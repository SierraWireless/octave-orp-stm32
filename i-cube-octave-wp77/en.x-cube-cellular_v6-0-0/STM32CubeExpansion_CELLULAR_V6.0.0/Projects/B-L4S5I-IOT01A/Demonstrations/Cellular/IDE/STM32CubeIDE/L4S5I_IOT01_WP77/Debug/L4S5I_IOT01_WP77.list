
L4S5I_IOT01_WP77.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000217c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b5c0  08021988  08021988  00031988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cf48  0802cf48  00040fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0802cf48  0802cf48  0003cf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cf50  0802cf50  00040fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802cf50  0802cf50  0003cf50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cf58  0802cf58  0003cf58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0802cf5c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008944  20000fd0  0802df2c  00040fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009914  0802df2c  00049914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040fd0  2**0
                  CONTENTS, READONLY
 12 .debug_line   000776cf  00000000  00000000  00041000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000d065c  00000000  00000000  000b86cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00011420  00000000  00000000  00188d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003398  00000000  00000000  0019a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013cceb  00000000  00000000  0019d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00005170  00000000  00000000  002da1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000441d5  00000000  00000000  002df348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0032351d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0c4  00000000  00000000  00323570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000348b5  00000000  00000000  0032e634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000fd0 	.word	0x20000fd0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0802196c 	.word	0x0802196c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000fd4 	.word	0x20000fd4
 80001fc:	0802196c 	.word	0x0802196c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef4:	f003 f8ba 	bl	800406c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ef8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000efa:	e003      	b.n	8000f04 <LoopCopyDataInit>

08000efc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000efe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f02:	3104      	adds	r1, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f0c:	d3f6      	bcc.n	8000efc <CopyDataInit>
	ldr	r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f10:	e002      	b.n	8000f18 <LoopFillZerobss>

08000f12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f14:	f842 3b04 	str.w	r3, [r2], #4

08000f18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <LoopForever+0x16>)
	cmp	r2, r3
 8000f1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f1c:	d3f9      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f01b ff5b 	bl	801cdd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f22:	f000 f94d 	bl	80011c0 <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f28:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f2c:	0802cf5c 	.word	0x0802cf5c
	ldr	r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f34:	20000fd0 	.word	0x20000fd0
	ldr	r2, =_sbss
 8000f38:	20000fd0 	.word	0x20000fd0
	ldr	r3, = _ebss
 8000f3c:	20009914 	.word	0x20009914

08000f40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_IRQHandler>
	...

08000f44 <MX_GPIO_Init>:
 * Free pins are configured automatically as Analog (this feature is enabled through
 * the Code Generation settings)
 PD5   ------> USART2_TX
 PD6   ------> USART2_RX
 */
void MX_GPIO_Init(void) {
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b08d      	sub	sp, #52	; 0x34

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f48:	2214      	movs	r2, #20
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	a807      	add	r0, sp, #28
 8000f4e:	f01b ff83 	bl	801ce58 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <MX_GPIO_Init+0x194>)
	HAL_GPIO_WritePin(GPIOA,
			MDM_SIM_SELECT_1_Pin | MDM_SIM_SELECT_0_Pin | MDM_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, MDM_DTR_Pin | LED2_Pin | MDM_PWR_EN_Pin,
 8000f54:	4e61      	ldr	r6, [pc, #388]	; (80010dc <MX_GPIO_Init+0x198>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f60:	f002 0210 	and.w	r2, r2, #16
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f6a:	f042 0204 	orr.w	r2, r2, #4
 8000f6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f72:	f002 0204 	and.w	r2, r2, #4
 8000f76:	9202      	str	r2, [sp, #8]
 8000f78:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f80:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f84:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f88:	9203      	str	r2, [sp, #12]
 8000f8a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f96:	f002 0201 	and.w	r2, r2, #1
 8000f9a:	9204      	str	r2, [sp, #16]
 8000f9c:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa0:	f042 0202 	orr.w	r2, r2, #2
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa8:	f002 0202 	and.w	r2, r2, #2
 8000fac:	9205      	str	r2, [sp, #20]
 8000fae:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb2:	f042 0208 	orr.w	r2, r2, #8
 8000fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA,
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f248 0118 	movw	r1, #32792	; 0x8018
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	9b06      	ldr	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA,
 8000fcc:	f003 faea 	bl	80045a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, MDM_DTR_Pin | LED2_Pin | MDM_PWR_EN_Pin,
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	f244 0112 	movw	r1, #16402	; 0x4012
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, MDM_DTR_Pin | LED2_Pin | MDM_PWR_EN_Pin,
 8000fda:	f003 fae3 	bl	80045a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2503      	movs	r5, #3
 8000fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	a907      	add	r1, sp, #28
 8000fe6:	483e      	ldr	r0, [pc, #248]	; (80010e0 <MX_GPIO_Init+0x19c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	e9cd 3507 	strd	r3, r5, [sp, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f003 f967 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_GPIO_Init+0x1a0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	483c      	ldr	r0, [pc, #240]	; (80010e8 <MX_GPIO_Init+0x1a4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	e9cd 2307 	strd	r2, r3, [sp, #28]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MDM_SIM_CLK_Pin;
 8001002:	2701      	movs	r7, #1
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001004:	f003 f95c 	bl	80042c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MDM_SIM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001008:	a907      	add	r1, sp, #28
 800100a:	4837      	ldr	r0, [pc, #220]	; (80010e8 <MX_GPIO_Init+0x1a4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	e9cd 7407 	strd	r7, r4, [sp, #28]
	HAL_GPIO_Init(MDM_SIM_CLK_GPIO_Port, &GPIO_InitStruct);
 8001012:	f003 f955 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC1 PC2 PC3 PC4
	 PC5 PC6 PC7 PC8
	 PC9 PC10 PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
 8001016:	f641 73fe 	movw	r3, #8190	; 0x1ffe
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
			| GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	a907      	add	r1, sp, #28
 800101c:	4832      	ldr	r0, [pc, #200]	; (80010e8 <MX_GPIO_Init+0x1a4>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001020:	e9cd 3507 	strd	r3, r5, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f003 f94c 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA5 PA6 PA7
	 PA8 PA9 PA10 PA11
	 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 8001028:	f641 73e4 	movw	r3, #8164	; 0x1fe4
			| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	a907      	add	r1, sp, #28
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f003 f942 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = MDM_SIM_SELECT_1_Pin | MDM_SIM_SELECT_0_Pin
 800103c:	f248 0318 	movw	r3, #32792	; 0x8018
			| MDM_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	a907      	add	r1, sp, #28
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	e9cd 3707 	strd	r3, r7, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f003 f937 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 PB10 PB11
	 PB12 PB13 PB15 PB3
	 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_10 | GPIO_PIN_11
 8001052:	f64b 732d 	movw	r3, #48941	; 0xbf2d
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_3 | GPIO_PIN_5
			| GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	a907      	add	r1, sp, #28
 8001058:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	e9cd 3507 	strd	r3, r5, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f003 f92e 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = MDM_DTR_Pin | LED2_Pin | MDM_PWR_EN_Pin;
 8001064:	f244 0312 	movw	r3, #16402	; 0x4012
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	a907      	add	r1, sp, #28
 800106a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	e9cd 3707 	strd	r3, r7, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f003 f924 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD15 PD0
	 PD1 PD2 PD3 PD4
	 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001078:	f64b 739f 	movw	r3, #49055	; 0xbf9f
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_0 | GPIO_PIN_1
			| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	a907      	add	r1, sp, #28
 800107e:	481b      	ldr	r0, [pc, #108]	; (80010ec <MX_GPIO_Init+0x1a8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	e9cd 3507 	strd	r3, r5, [sp, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f003 f91b 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MDM_SIM_DATA_Pin;
 800108a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MDM_SIM_DATA_GPIO_Port, &GPIO_InitStruct);
 800108e:	a907      	add	r1, sp, #28
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <MX_GPIO_Init+0x1a8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	e9cd 3407 	strd	r3, r4, [sp, #28]
	HAL_GPIO_Init(MDM_SIM_DATA_GPIO_Port, &GPIO_InitStruct);
 8001098:	f003 f912 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD5 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2160      	movs	r1, #96	; 0x60
 800109e:	2302      	movs	r3, #2
 80010a0:	e9cd 1307 	strd	r1, r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_GPIO_Init+0x1a8>)
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a8:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f003 f906 	bl	80042c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b4:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010b6:	a907      	add	r1, sp, #28
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_GPIO_Init+0x1ac>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010bc:	e9cd 3507 	strd	r3, r5, [sp, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010c0:	f003 f8fe 	bl	80042c0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010c4:	4622      	mov	r2, r4
 80010c6:	2105      	movs	r1, #5
 80010c8:	2028      	movs	r0, #40	; 0x28
 80010ca:	f003 f839 	bl	8004140 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f003 f868 	bl	80041a4 <HAL_NVIC_EnableIRQ>

}
 80010d4:	b00d      	add	sp, #52	; 0x34
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	48001000 	.word	0x48001000
 80010e4:	10110000 	.word	0x10110000
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00
 80010f0:	48001c00 	.word	0x48001c00

080010f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010f4:	b530      	push	{r4, r5, lr}
 80010f6:	b0bd      	sub	sp, #244	; 0xf4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010f8:	2244      	movs	r2, #68	; 0x44
 80010fa:	2100      	movs	r1, #0
 80010fc:	a806      	add	r0, sp, #24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010fe:	2514      	movs	r5, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001100:	f01b feaa 	bl	801ce58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001104:	462a      	mov	r2, r5
 8001106:	2100      	movs	r1, #0
 8001108:	a801      	add	r0, sp, #4
 800110a:	f01b fea5 	bl	801ce58 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800110e:	2294      	movs	r2, #148	; 0x94
 8001110:	2100      	movs	r1, #0
 8001112:	a817      	add	r0, sp, #92	; 0x5c
 8001114:	f01b fea0 	bl	801ce58 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111c:	f003 fdb4 	bl	8004c88 <HAL_PWREx_ControlVoltageScaling>
 8001120:	4604      	mov	r4, r0
 8001122:	b108      	cbz	r0, 8001128 <SystemClock_Config+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001126:	e7fe      	b.n	8001126 <SystemClock_Config+0x32>
	HAL_PWR_EnableBkUpAccess();
 8001128:	f003 fd94 	bl	8004c54 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800112c:	4a22      	ldr	r2, [pc, #136]	; (80011b8 <SystemClock_Config+0xc4>)
 800112e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001132:	f023 0318 	bic.w	r3, r3, #24
 8001136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800113a:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800113c:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800113e:	2501      	movs	r5, #1
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001140:	e9cd 540c 	strd	r5, r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001144:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001148:	2328      	movs	r3, #40	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800114a:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800114c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001154:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001158:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLM = 1;
 800115a:	9512      	str	r5, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800115c:	f003 fe7c 	bl	8004e58 <HAL_RCC_OscConfig>
 8001160:	b108      	cbz	r0, 8001166 <SystemClock_Config+0x72>
 8001162:	b672      	cpsid	i
	while (1) {
 8001164:	e7fe      	b.n	8001164 <SystemClock_Config+0x70>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001166:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	230f      	movs	r3, #15
 800116c:	2103      	movs	r1, #3
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001170:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001172:	e9cd 3101 	strd	r3, r1, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001176:	f004 f91d 	bl	80053b4 <HAL_RCC_ClockConfig>
 800117a:	b108      	cbz	r0, 8001180 <SystemClock_Config+0x8c>
 800117c:	b672      	cpsid	i
	while (1) {
 800117e:	e7fe      	b.n	800117e <SystemClock_Config+0x8a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <SystemClock_Config+0xc8>)
 8001182:	9317      	str	r3, [sp, #92]	; 0x5c
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001188:	933b      	str	r3, [sp, #236]	; 0xec
	PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800118a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800118e:	9336      	str	r3, [sp, #216]	; 0xd8
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001190:	2310      	movs	r3, #16
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001192:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001196:	9026      	str	r0, [sp, #152]	; 0x98
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001198:	9029      	str	r0, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800119a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800119e:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011a0:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011a4:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011a8:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011aa:	f004 fb29 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	b108      	cbz	r0, 80011b4 <SystemClock_Config+0xc0>
 80011b0:	b672      	cpsid	i
	while (1) {
 80011b2:	e7fe      	b.n	80011b2 <SystemClock_Config+0xbe>
}
 80011b4:	b03d      	add	sp, #244	; 0xf4
 80011b6:	bd30      	pop	{r4, r5, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	00060009 	.word	0x00060009

080011c0 <main>:
int main(void) {
 80011c0:	b508      	push	{r3, lr}
	HAL_Init();
 80011c2:	f002 ff75 	bl	80040b0 <HAL_Init>
	SystemClock_Config();
 80011c6:	f7ff ff95 	bl	80010f4 <SystemClock_Config>
	MX_GPIO_Init();
 80011ca:	f7ff febb 	bl	8000f44 <MX_GPIO_Init>
	MX_RNG_Init();
 80011ce:	f000 f815 	bl	80011fc <MX_RNG_Init>
	MX_RTC_Init();
 80011d2:	f000 f83b 	bl	800124c <MX_RTC_Init>
	MX_USART1_UART_Init();
 80011d6:	f000 f92f 	bl	8001438 <MX_USART1_UART_Init>
	MX_FREERTOS_Init();
 80011da:	f01a fdc5 	bl	801bd68 <MX_FREERTOS_Init>
	osKernelStart();
 80011de:	f018 f88b 	bl	80192f8 <osKernelStart>
	while (1) {
 80011e2:	e7fe      	b.n	80011e2 <main+0x22>

080011e4 <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM3) {
 80011e4:	6802      	ldr	r2, [r0, #0]
 80011e6:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d101      	bne.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 80011ec:	f002 bf70 	b.w	80040d0 <HAL_IncTick>
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40000400 	.word	0x40000400

080011f8 <Error_Handler>:
 80011f8:	b672      	cpsid	i
	while (1) {
 80011fa:	e7fe      	b.n	80011fa <Error_Handler+0x2>

080011fc <MX_RNG_Init>:
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_RNG_Init+0x1c>)
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <MX_RNG_Init+0x20>)
void MX_RNG_Init(void) {
 8001200:	b508      	push	{r3, lr}
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	e9c0 2300 	strd	r2, r3, [r0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001208:	f004 fd10 	bl	8005c2c <HAL_RNG_Init>
 800120c:	b118      	cbz	r0, 8001216 <MX_RNG_Init+0x1a>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 800120e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001212:	f7ff bff1 	b.w	80011f8 <Error_Handler>
}
 8001216:	bd08      	pop	{r3, pc}
 8001218:	20008590 	.word	0x20008590
 800121c:	50060800 	.word	0x50060800

08001220 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {

	if (rngHandle->Instance == RNG) {
 8001220:	6802      	ldr	r2, [r0, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_RNG_MspInit+0x28>)
 8001224:	429a      	cmp	r2, r3
void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 8001226:	b082      	sub	sp, #8
	if (rngHandle->Instance == RNG) {
 8001228:	d10c      	bne.n	8001244 <HAL_RNG_MspInit+0x24>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 800122a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800122e:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 8001232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001234:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001238:	64da      	str	r2, [r3, #76]	; 0x4c
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	9b01      	ldr	r3, [sp, #4]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 8001244:	b002      	add	sp, #8
 8001246:	4770      	bx	lr
 8001248:	50060800 	.word	0x50060800

0800124c <MX_RTC_Init>:
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <MX_RTC_Init+0x2c>)
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_RTC_Init+0x30>)
void MX_RTC_Init(void) {
 8001250:	b508      	push	{r3, lr}
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001252:	2300      	movs	r3, #0
 8001254:	e9c0 2300 	strd	r2, r3, [r0]
	hrtc.Init.AsynchPrediv = 127;
	hrtc.Init.SynchPrediv = 255;
 8001258:	217f      	movs	r1, #127	; 0x7f
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001260:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001264:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001268:	f004 fda6 	bl	8005db8 <HAL_RTC_Init>
 800126c:	b118      	cbz	r0, 8001276 <MX_RTC_Init+0x2a>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800126e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001272:	f7ff bfc1 	b.w	80011f8 <Error_Handler>
}
 8001276:	bd08      	pop	{r3, pc}
 8001278:	200085a4 	.word	0x200085a4
 800127c:	40002800 	.word	0x40002800

08001280 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle) {

	if (rtcHandle->Instance == RTC) {
 8001280:	6802      	ldr	r2, [r0, #0]
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_RTC_MspInit+0x18>)
 8001284:	429a      	cmp	r2, r3
		/* USER CODE BEGIN RTC_MspInit 0 */

		/* USER CODE END RTC_MspInit 0 */
		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 8001286:	bf01      	itttt	eq
 8001288:	4a04      	ldreq	r2, [pc, #16]	; (800129c <HAL_RTC_MspInit+0x1c>)
 800128a:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800128e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8001292:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}
}
 8001296:	4770      	bx	lr
 8001298:	40002800 	.word	0x40002800
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_MspInit>:
void HAL_MspInit(void) {
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_MspInit+0x38>)
 80012a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	661a      	str	r2, [r3, #96]	; 0x60
 80012aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void HAL_MspInit(void) {
 80012ac:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	f002 0201 	and.w	r2, r2, #1
 80012b2:	9200      	str	r2, [sp, #0]
 80012b4:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012bc:	659a      	str	r2, [r3, #88]	; 0x58
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	9b01      	ldr	r3, [sp, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	210f      	movs	r1, #15
 80012cc:	f06f 0001 	mvn.w	r0, #1

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80012d0:	b002      	add	sp, #8
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012d2:	f002 bf35 	b.w	8004140 <HAL_NVIC_SetPriority>
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	4601      	mov	r1, r0
 80012e0:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	201d      	movs	r0, #29
 80012e6:	f002 ff2b 	bl	8004140 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012ea:	201d      	movs	r0, #29
 80012ec:	f002 ff5a 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_InitTick+0x68>)
  uwTimclock = HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80012f2:	4c15      	ldr	r4, [pc, #84]	; (8001348 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 80012f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012f6:	f042 0202 	orr.w	r2, r2, #2
 80012fa:	659a      	str	r2, [r3, #88]	; 0x58
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001304:	a901      	add	r1, sp, #4
 8001306:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001308:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130a:	f004 f971 	bl	80055f0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800130e:	f004 f94b 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_InitTick+0x70>)
 8001314:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001316:	f240 33e7 	movw	r3, #999	; 0x3e7
 800131a:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_InitTick+0x74>)
 800131e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001322:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 8001324:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 8001326:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001328:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 800132a:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800132e:	f004 fedf 	bl	80060f0 <HAL_TIM_Base_Init>
 8001332:	b920      	cbnz	r0, 800133e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001334:	4620      	mov	r0, r4
 8001336:	f004 fd87 	bl	8005e48 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 800133a:	b008      	add	sp, #32
 800133c:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800133e:	2001      	movs	r0, #1
 8001340:	e7fb      	b.n	800133a <HAL_InitTick+0x5e>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	200085c8 	.word	0x200085c8
 800134c:	40000400 	.word	0x40000400
 8001350:	000f4240 	.word	0x000f4240

08001354 <NMI_Handler>:
void NMI_Handler(void) {
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001354:	e7fe      	b.n	8001354 <NMI_Handler>

08001356 <HardFault_Handler>:
 */
void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler>

08001358 <MemManage_Handler>:
 */
void MemManage_Handler(void) {
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler>

0800135a <BusFault_Handler>:
 */
void BusFault_Handler(void) {
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800135a:	e7fe      	b.n	800135a <BusFault_Handler>

0800135c <UsageFault_Handler>:
 */
void UsageFault_Handler(void) {
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler>

0800135e <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	4770      	bx	lr

08001360 <TIM3_IRQHandler>:
 */
void TIM3_IRQHandler(void) {
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <TIM3_IRQHandler+0x8>)
 8001362:	f004 bdaf 	b.w	8005ec4 <HAL_TIM_IRQHandler>
 8001366:	bf00      	nop
 8001368:	200085c8 	.word	0x200085c8

0800136c <USART1_IRQHandler>:
 */
void USART1_IRQHandler(void) {
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <USART1_IRQHandler+0x8>)
 800136e:	f005 b86d 	b.w	800644c <HAL_UART_IRQHandler>
 8001372:	bf00      	nop
 8001374:	20008614 	.word	0x20008614

08001378 <EXTI15_10_IRQHandler>:
 */
void EXTI15_10_IRQHandler(void) {
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001378:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800137c:	f003 b918 	b.w	80045b0 <HAL_GPIO_EXTI_IRQHandler>

08001380 <UART4_IRQHandler>:
 */
void UART4_IRQHandler(void) {
	/* USER CODE BEGIN UART4_IRQn 0 */

	/* USER CODE END UART4_IRQn 0 */
	HAL_UART_IRQHandler(&huart4);
 8001380:	4801      	ldr	r0, [pc, #4]	; (8001388 <UART4_IRQHandler+0x8>)
 8001382:	f005 b863 	b.w	800644c <HAL_UART_IRQHandler>
 8001386:	bf00      	nop
 8001388:	200086a4 	.word	0x200086a4

0800138c <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 800138c:	2001      	movs	r0, #1
 800138e:	4770      	bx	lr

08001390 <_kill>:

int _kill(int pid, int sig) {
 8001390:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001392:	f01b fd1b 	bl	801cdcc <__errno>
 8001396:	2316      	movs	r3, #22
 8001398:	6003      	str	r3, [r0, #0]
	return -1;
}
 800139a:	f04f 30ff 	mov.w	r0, #4294967295
 800139e:	bd08      	pop	{r3, pc}

080013a0 <_exit>:

void _exit(int status) {
 80013a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80013a2:	f01b fd13 	bl	801cdcc <__errno>
 80013a6:	2316      	movs	r3, #22
 80013a8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {
 80013aa:	e7fe      	b.n	80013aa <_exit+0xa>

080013ac <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	460e      	mov	r6, r1
 80013b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013b2:	2500      	movs	r5, #0
 80013b4:	42a5      	cmp	r5, r4
 80013b6:	db01      	blt.n	80013bc <_read+0x10>
		*ptr++ = __io_getchar();
	}

	return len;
}
 80013b8:	4620      	mov	r0, r4
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80013bc:	f3af 8000 	nop.w
 80013c0:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013c2:	3501      	adds	r5, #1
 80013c4:	e7f6      	b.n	80013b4 <_read+0x8>

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80013c6:	b570      	push	{r4, r5, r6, lr}
 80013c8:	460e      	mov	r6, r1
 80013ca:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013cc:	2500      	movs	r5, #0
 80013ce:	42a5      	cmp	r5, r4
 80013d0:	db01      	blt.n	80013d6 <_write+0x10>
		__io_putchar(*ptr++);
	}
	return len;
}
 80013d2:	4620      	mov	r0, r4
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80013d6:	5d70      	ldrb	r0, [r6, r5]
 80013d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80013dc:	3501      	adds	r5, #1
 80013de:	e7f6      	b.n	80013ce <_write+0x8>

080013e0 <_close>:

int _close(int file) {
	return -1;
}
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80013e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80013ec:	2000      	movs	r0, #0
 80013ee:	4770      	bx	lr

080013f0 <_isatty>:

int _isatty(int file) {
	return 1;
}
 80013f0:	2001      	movs	r0, #1
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80013f4:	2000      	movs	r0, #0
 80013f6:	4770      	bx	lr

080013f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <_sbrk+0x30>)
 80013fa:	6819      	ldr	r1, [r3, #0]
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001400:	b909      	cbnz	r1, 8001406 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <_sbrk+0x34>)
 8001404:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	4909      	ldr	r1, [pc, #36]	; (8001430 <_sbrk+0x38>)
 800140a:	4c0a      	ldr	r4, [pc, #40]	; (8001434 <_sbrk+0x3c>)
 800140c:	4402      	add	r2, r0
 800140e:	1b09      	subs	r1, r1, r4
 8001410:	428a      	cmp	r2, r1
 8001412:	d906      	bls.n	8001422 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001414:	f01b fcda 	bl	801cdcc <__errno>
 8001418:	230c      	movs	r3, #12
 800141a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800141c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001420:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001422:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001424:	e7fc      	b.n	8001420 <_sbrk+0x28>
 8001426:	bf00      	nop
 8001428:	20000fec 	.word	0x20000fec
 800142c:	20009918 	.word	0x20009918
 8001430:	200a0000 	.word	0x200a0000
 8001434:	00000400 	.word	0x00000400

08001438 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <MX_USART1_UART_Init+0x60>)
{
 800143c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 800143e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001442:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001448:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001456:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145c:	f005 fd7a 	bl	8006f54 <HAL_UART_Init>
 8001460:	b108      	cbz	r0, 8001466 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8001462:	f7ff fec9 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001468:	2100      	movs	r1, #0
 800146a:	f005 fe75 	bl	8007158 <HAL_UARTEx_SetTxFifoThreshold>
 800146e:	b108      	cbz	r0, 8001474 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 8001470:	f7ff fec2 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001476:	2100      	movs	r1, #0
 8001478:	f005 fe92 	bl	80071a0 <HAL_UARTEx_SetRxFifoThreshold>
 800147c:	b108      	cbz	r0, 8001482 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800147e:	f7ff febb 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_USART1_UART_Init+0x5c>)
 8001484:	f005 fe4d 	bl	8007122 <HAL_UARTEx_DisableFifoMode>
 8001488:	b118      	cbz	r0, 8001492 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800148a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800148e:	f7ff beb3 	b.w	80011f8 <Error_Handler>
}
 8001492:	bd08      	pop	{r3, pc}
 8001494:	20008614 	.word	0x20008614
 8001498:	40013800 	.word	0x40013800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	2214      	movs	r2, #20
{
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	2100      	movs	r1, #0
 80014a6:	eb0d 0002 	add.w	r0, sp, r2
 80014aa:	f01b fcd5 	bl	801ce58 <memset>
  if(uartHandle->Instance==UART4)
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_UART_MspInit+0xd0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12d      	bne.n	8001512 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_UART_MspInit+0xd4>)
 80014b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014be:	659a      	str	r2, [r3, #88]	; 0x58
 80014c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014c2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80014c6:	9201      	str	r2, [sp, #4]
 80014c8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	9302      	str	r3, [sp, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	e9cd 4307 	strd	r4, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014ec:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014f2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f002 fee4 	bl	80042c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80014f8:	4622      	mov	r2, r4
 80014fa:	2105      	movs	r1, #5
 80014fc:	2034      	movs	r0, #52	; 0x34
 80014fe:	f002 fe1f 	bl	8004140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001502:	2034      	movs	r0, #52	; 0x34
 8001504:	f002 fe4e 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
    /* disable IRQ to avoid problems with IPC - will be reactivated later */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001508:	2034      	movs	r0, #52	; 0x34
 800150a:	f002 fe59 	bl	80041c0 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800150e:	b00a      	add	sp, #40	; 0x28
 8001510:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART1)
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_UART_MspInit+0xd8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d1fa      	bne.n	800150e <HAL_UART_MspInit+0x72>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0xd4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800151c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800151e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001522:	661a      	str	r2, [r3, #96]	; 0x60
 8001524:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001526:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800152a:	9203      	str	r2, [sp, #12]
 800152c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001530:	f042 0202 	orr.w	r2, r2, #2
 8001534:	64da      	str	r2, [r3, #76]	; 0x4c
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	9304      	str	r3, [sp, #16]
 800153e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	22c0      	movs	r2, #192	; 0xc0
 8001542:	2302      	movs	r3, #2
 8001544:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2400      	movs	r4, #0
 800154a:	2303      	movs	r3, #3
 800154c:	e9cd 4307 	strd	r4, r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001552:	2307      	movs	r3, #7
 8001554:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f002 feb3 	bl	80042c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800155a:	4622      	mov	r2, r4
 800155c:	2105      	movs	r1, #5
 800155e:	2025      	movs	r0, #37	; 0x25
 8001560:	f002 fdee 	bl	8004140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001564:	2025      	movs	r0, #37	; 0x25
 8001566:	f002 fe1d 	bl	80041a4 <HAL_NVIC_EnableIRQ>
}
 800156a:	e7d0      	b.n	800150e <HAL_UART_MspInit+0x72>
 800156c:	40004c00 	.word	0x40004c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40013800 	.word	0x40013800
 8001578:	48000400 	.word	0x48000400

0800157c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800157c:	b508      	push	{r3, lr}

  if(uartHandle->Instance==UART4)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_UART_MspDeInit+0x4c>)
 8001580:	6803      	ldr	r3, [r0, #0]
 8001582:	4293      	cmp	r3, r2
 8001584:	d10f      	bne.n	80015a6 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001586:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_UART4_CLK_DISABLE();
 800158e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001590:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001596:	2103      	movs	r1, #3
 8001598:	f002 ff6c 	bl	8004474 <HAL_GPIO_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800159c:	2034      	movs	r0, #52	; 0x34
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800159e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80015a2:	f002 be0d 	b.w	80041c0 <HAL_NVIC_DisableIRQ>
  else if(uartHandle->Instance==USART1)
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_UART_MspDeInit+0x50>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d10b      	bne.n	80015c4 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART1_CLK_DISABLE();
 80015ac:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <HAL_UART_MspDeInit+0x54>)
    __HAL_RCC_USART1_CLK_DISABLE();
 80015b2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80015b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015b8:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80015ba:	21c0      	movs	r1, #192	; 0xc0
 80015bc:	f002 ff5a 	bl	8004474 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80015c0:	2025      	movs	r0, #37	; 0x25
 80015c2:	e7ec      	b.n	800159e <HAL_UART_MspDeInit+0x22>
}
 80015c4:	bd08      	pop	{r3, pc}
 80015c6:	bf00      	nop
 80015c8:	40004c00 	.word	0x40004c00
 80015cc:	40013800 	.word	0x40013800
 80015d0:	48000400 	.word	0x48000400

080015d4 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80015d4:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015d6:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80015d8:	4c2a      	ldr	r4, [pc, #168]	; (8001684 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015dc:	4d2b      	ldr	r5, [pc, #172]	; (800168c <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015de:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80015e0:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80015e4:	2201      	movs	r2, #1
 80015e6:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 80015ea:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80015ee:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64eb      	str	r3, [r5, #76]	; 0x4c
 80015fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 80015fc:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001606:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001608:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800160c:	2312      	movs	r3, #18
 800160e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001612:	2003      	movs	r0, #3
 8001614:	2304      	movs	r3, #4
 8001616:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800161a:	a903      	add	r1, sp, #12
 800161c:	481c      	ldr	r0, [pc, #112]	; (8001690 <I2Cx_Init.constprop.0+0xbc>)
 800161e:	f002 fe4f 	bl	80042c0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001622:	a903      	add	r1, sp, #12
 8001624:	481a      	ldr	r0, [pc, #104]	; (8001690 <I2Cx_Init.constprop.0+0xbc>)
 8001626:	f002 fe4b 	bl	80042c0 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800162a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800162c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001630:	65ab      	str	r3, [r5, #88]	; 0x58
 8001632:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 800163c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800163e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001642:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001644:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001646:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800164a:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800164c:	4632      	mov	r2, r6
 800164e:	210f      	movs	r1, #15
 8001650:	2021      	movs	r0, #33	; 0x21
 8001652:	f002 fd75 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001656:	2021      	movs	r0, #33	; 0x21
 8001658:	f002 fda4 	bl	80041a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800165c:	4632      	mov	r2, r6
 800165e:	210f      	movs	r1, #15
 8001660:	2022      	movs	r0, #34	; 0x22
 8001662:	f002 fd6d 	bl	8004140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001666:	2022      	movs	r0, #34	; 0x22
 8001668:	f002 fd9c 	bl	80041a4 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 800166c:	4620      	mov	r0, r4
 800166e:	f003 f8ee 	bl	800484e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001672:	4631      	mov	r1, r6
 8001674:	4620      	mov	r0, r4
 8001676:	f003 fac7 	bl	8004c08 <HAL_I2CEx_ConfigAnalogFilter>
}
 800167a:	b008      	add	sp, #32
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	bf00      	nop
 8001680:	40005800 	.word	0x40005800
 8001684:	200087c4 	.word	0x200087c4
 8001688:	00702681 	.word	0x00702681
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400

08001694 <I2Cx_Error.isra.0.constprop.0>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 8001694:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <I2Cx_Error.isra.0.constprop.0+0x10>)
 8001698:	f003 f92b 	bl	80048f2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 800169c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 80016a0:	f7ff bf98 	b.w	80015d4 <I2Cx_Init.constprop.0>
 80016a4:	200087c4 	.word	0x200087c4

080016a8 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 80016a8:	f7ff bf94 	b.w	80015d4 <I2Cx_Init.constprop.0>

080016ac <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80016ae:	2301      	movs	r3, #1
{
 80016b0:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80016b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80016bc:	f10d 0217 	add.w	r2, sp, #23
 80016c0:	9200      	str	r2, [sp, #0]
 80016c2:	460a      	mov	r2, r1
 80016c4:	4601      	mov	r1, r0
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <SENSOR_IO_Write+0x2c>)
 80016c8:	f003 f92c 	bl	8004924 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80016cc:	b108      	cbz	r0, 80016d2 <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 80016ce:	f7ff ffe1 	bl	8001694 <I2Cx_Error.isra.0.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 80016d2:	b007      	add	sp, #28
 80016d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80016d8:	200087c4 	.word	0x200087c4

080016dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80016dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 80016de:	2300      	movs	r3, #0
{
 80016e0:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80016e2:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80016e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ea:	2301      	movs	r3, #1
 80016ec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80016f0:	f10d 0117 	add.w	r1, sp, #23
 80016f4:	9100      	str	r1, [sp, #0]
 80016f6:	4601      	mov	r1, r0
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <SENSOR_IO_Read+0x34>)
 80016fa:	f003 f9c9 	bl	8004a90 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80016fe:	b108      	cbz	r0, 8001704 <SENSOR_IO_Read+0x28>
    I2Cx_Error(i2c_handler, Addr);
 8001700:	f7ff ffc8 	bl	8001694 <I2Cx_Error.isra.0.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8001704:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001708:	b007      	add	sp, #28
 800170a:	f85d fb04 	ldr.w	pc, [sp], #4
 800170e:	bf00      	nop
 8001710:	200087c4 	.word	0x200087c4

08001714 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001716:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800171a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	2301      	movs	r3, #1
 8001722:	460a      	mov	r2, r1
 8001724:	4601      	mov	r1, r0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <SENSOR_IO_ReadMultiple+0x28>)
 8001728:	f003 f9b2 	bl	8004a90 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800172c:	4604      	mov	r4, r0
 800172e:	b108      	cbz	r0, 8001734 <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 8001730:	f7ff ffb0 	bl	8001694 <I2Cx_Error.isra.0.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001734:	b2a0      	uxth	r0, r4
 8001736:	b004      	add	sp, #16
 8001738:	bd10      	pop	{r4, pc}
 800173a:	bf00      	nop
 800173c:	200087c4 	.word	0x200087c4

08001740 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001740:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001742:	4c07      	ldr	r4, [pc, #28]	; (8001760 <BSP_ACCELERO_Init+0x20>)
 8001744:	68a3      	ldr	r3, [r4, #8]
 8001746:	4798      	blx	r3
 8001748:	286a      	cmp	r0, #106	; 0x6a
 800174a:	d107      	bne.n	800175c <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800174e:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001752:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001758:	2000      	movs	r0, #0
  }  

  return ret;
}
 800175a:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	e7fc      	b.n	800175a <BSP_ACCELERO_Init+0x1a>
 8001760:	20000028 	.word	0x20000028
 8001764:	20000ff0 	.word	0x20000ff0

08001768 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <BSP_ACCELERO_AccGetXYZ+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b113      	cbz	r3, 8001774 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	b103      	cbz	r3, 8001774 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001772:	4718      	bx	r3
    }
  }
}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000ff0 	.word	0x20000ff0

0800177c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800177c:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800177e:	4c07      	ldr	r4, [pc, #28]	; (800179c <BSP_HSENSOR_Init+0x20>)
 8001780:	20be      	movs	r0, #190	; 0xbe
 8001782:	6863      	ldr	r3, [r4, #4]
 8001784:	4798      	blx	r3
 8001786:	28bc      	cmp	r0, #188	; 0xbc
 8001788:	d106      	bne.n	8001798 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800178c:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 800178e:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001794:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8001796:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8001798:	2001      	movs	r0, #1
  return ret;
 800179a:	e7fc      	b.n	8001796 <BSP_HSENSOR_Init+0x1a>
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000ff4 	.word	0x20000ff4

080017a4 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <BSP_HSENSOR_ReadHumidity+0xc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	20be      	movs	r0, #190	; 0xbe
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4718      	bx	r3
 80017ae:	bf00      	nop
 80017b0:	20000ff4 	.word	0x20000ff4

080017b4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80017b4:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80017b6:	4c07      	ldr	r4, [pc, #28]	; (80017d4 <BSP_PSENSOR_Init+0x20>)
 80017b8:	20ba      	movs	r0, #186	; 0xba
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	4798      	blx	r3
 80017be:	28b1      	cmp	r0, #177	; 0xb1
 80017c0:	d106      	bne.n	80017d0 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80017c4:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 80017c6:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	4798      	blx	r3
    ret = PSENSOR_OK;
 80017cc:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80017ce:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 80017d0:	2001      	movs	r0, #1
  return ret;
 80017d2:	e7fc      	b.n	80017ce <BSP_PSENSOR_Init+0x1a>
 80017d4:	2000001c 	.word	0x2000001c
 80017d8:	20000ff8 	.word	0x20000ff8

080017dc <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <BSP_PSENSOR_ReadPressure+0xc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	20ba      	movs	r0, #186	; 0xba
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4718      	bx	r3
 80017e6:	bf00      	nop
 80017e8:	20000ff8 	.word	0x20000ff8

080017ec <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80017ec:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80017ee:	4c06      	ldr	r4, [pc, #24]	; (8001808 <BSP_TSENSOR_Init+0x1c>)
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <BSP_TSENSOR_Init+0x20>)
 80017f2:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80017f4:	f7ff ff58 	bl	80016a8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	2100      	movs	r1, #0
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	20be      	movs	r0, #190	; 0xbe
 8001800:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001802:	2000      	movs	r0, #0
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	20000ffc 	.word	0x20000ffc
 800180c:	2000000c 	.word	0x2000000c

08001810 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <BSP_TSENSOR_ReadTemp+0xc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	20be      	movs	r0, #190	; 0xbe
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4718      	bx	r3
 800181a:	bf00      	nop
 800181c:	20000ffc 	.word	0x20000ffc

08001820 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001820:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001822:	b2c4      	uxtb	r4, r0
 8001824:	2120      	movs	r1, #32
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff ff58 	bl	80016dc <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800182c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001830:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001834:	2120      	movs	r1, #32
 8001836:	4620      	mov	r0, r4
}
 8001838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800183c:	f7ff bf36 	b.w	80016ac <SENSOR_IO_Write>

08001840 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001840:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001842:	b2c4      	uxtb	r4, r0
 8001844:	2120      	movs	r1, #32
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff ff48 	bl	80016dc <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800184c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001850:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 8001854:	2120      	movs	r1, #32
 8001856:	4620      	mov	r0, r4
}
 8001858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800185c:	f7ff bf26 	b.w	80016ac <SENSOR_IO_Write>

08001860 <HTS221_H_ReadID>:
{  
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001864:	f7ff ff20 	bl	80016a8 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001868:	b2e0      	uxtb	r0, r4
 800186a:	210f      	movs	r1, #15
}
 800186c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001870:	f7ff bf34 	b.w	80016dc <SENSOR_IO_Read>

08001874 <HTS221_H_ReadHumidity>:
{
 8001874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001878:	fa5f f880 	uxtb.w	r8, r0
 800187c:	2302      	movs	r3, #2
 800187e:	aa01      	add	r2, sp, #4
 8001880:	21b0      	movs	r1, #176	; 0xb0
 8001882:	4640      	mov	r0, r8
 8001884:	f7ff ff46 	bl	8001714 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001888:	2302      	movs	r3, #2
 800188a:	aa01      	add	r2, sp, #4
 800188c:	21b6      	movs	r1, #182	; 0xb6
 800188e:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8001890:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8001894:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001898:	f7ff ff3c 	bl	8001714 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800189c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80018a0:	f89d 7004 	ldrb.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80018a4:	2302      	movs	r3, #2
 80018a6:	aa01      	add	r2, sp, #4
 80018a8:	21ba      	movs	r1, #186	; 0xba
 80018aa:	4640      	mov	r0, r8
 80018ac:	f7ff ff32 	bl	8001714 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018b0:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018b8:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80018bc:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80018c2:	21a8      	movs	r1, #168	; 0xa8
 80018c4:	2302      	movs	r3, #2
 80018c6:	4640      	mov	r0, r8
 80018c8:	f7ff ff24 	bl	8001714 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80018d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018d8:	b23f      	sxth	r7, r7
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80018da:	b21b      	sxth	r3, r3
 80018dc:	1bdb      	subs	r3, r3, r7
 80018de:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 80018e2:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 80018e4:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80018e6:	1bab      	subs	r3, r5, r6
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80018f0:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80018f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f6:	1be4      	subs	r4, r4, r7
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ee07 4a10 	vmov	s14, r4
 8001900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001904:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001908:	ee07 6a90 	vmov	s15, r6
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8001910:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001948 <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001914:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001918:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800191c:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	dc07      	bgt.n	800193a <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 800192a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001932:	d504      	bpl.n	800193e <HTS221_H_ReadHumidity+0xca>
 8001934:	eddf 7a05 	vldr	s15, [pc, #20]	; 800194c <HTS221_H_ReadHumidity+0xd8>
 8001938:	e001      	b.n	800193e <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 800193a:	eef0 7a47 	vmov.f32	s15, s14
}
 800193e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001942:	b002      	add	sp, #8
 8001944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001948:	447a0000 	.word	0x447a0000
 800194c:	00000000 	.word	0x00000000

08001950 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001954:	fa5f f880 	uxtb.w	r8, r0
 8001958:	aa01      	add	r2, sp, #4
 800195a:	2302      	movs	r3, #2
 800195c:	21b2      	movs	r1, #178	; 0xb2
 800195e:	4640      	mov	r0, r8
 8001960:	f7ff fed8 	bl	8001714 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001964:	2135      	movs	r1, #53	; 0x35
 8001966:	4640      	mov	r0, r8
 8001968:	f7ff feb8 	bl	80016dc <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800196c:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800196e:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001972:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001976:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001978:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800197c:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8001980:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001982:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001984:	2304      	movs	r3, #4
 8001986:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800198a:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800198c:	21bc      	movs	r1, #188	; 0xbc
 800198e:	4640      	mov	r0, r8
 8001990:	f7ff fec0 	bl	8001714 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001994:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001998:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800199c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019a0:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80019a4:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80019a8:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80019aa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80019ae:	21aa      	movs	r1, #170	; 0xaa
 80019b0:	2302      	movs	r3, #2
 80019b2:	4640      	mov	r0, r8
 80019b4:	f7ff feae 	bl	8001714 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80019bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019c4:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	1bdb      	subs	r3, r3, r7
 80019ca:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 80019ce:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80019d0:	1bab      	subs	r3, r5, r6
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80019da:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80019dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e0:	1be4      	subs	r4, r4, r7
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee07 4a10 	vmov	s14, r4
 80019ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f2:	ee07 6a90 	vmov	s15, r6
 80019f6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 80019fa:	ee36 0a80 	vadd.f32	s0, s13, s0
 80019fe:	b002      	add	sp, #8
 8001a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a04 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001a06:	b2c4      	uxtb	r4, r0
 8001a08:	2128      	movs	r1, #40	; 0x28
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fe66 	bl	80016dc <SENSOR_IO_Read>
 8001a10:	2129      	movs	r1, #41	; 0x29
 8001a12:	4605      	mov	r5, r0
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fe61 	bl	80016dc <SENSOR_IO_Read>
 8001a1a:	212a      	movs	r1, #42	; 0x2a
 8001a1c:	4606      	mov	r6, r0
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff fe5c 	bl	80016dc <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001a24:	0402      	lsls	r2, r0, #16
 8001a26:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
 8001a2a:	ea43 0005 	orr.w	r0, r3, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001a2e:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 8001a30:	bf48      	it	mi
 8001a32:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8001a36:	2364      	movs	r3, #100	; 0x64
 8001a38:	4358      	muls	r0, r3
 8001a3a:	bf48      	it	mi
 8001a3c:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
 8001a40:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 8001a42:	ee07 0a90 	vmov	s15, r0
 8001a46:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001a4a:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001a54 <LPS22HB_P_ReadPressure+0x50>
 8001a4e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001a52:	bd70      	pop	{r4, r5, r6, pc}
 8001a54:	42c80000 	.word	0x42c80000

08001a58 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001a58:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001a5a:	b2c4      	uxtb	r4, r0
 8001a5c:	211a      	movs	r1, #26
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fe3c 	bl	80016dc <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001a64:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001a68:	f040 0201 	orr.w	r2, r0, #1
 8001a6c:	211a      	movs	r1, #26
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff fe1c 	bl	80016ac <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001a74:	2110      	movs	r1, #16
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff fe30 	bl	80016dc <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001a7c:	f000 008d 	and.w	r0, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001a80:	f040 0232 	orr.w	r2, r0, #50	; 0x32
 8001a84:	2110      	movs	r1, #16
 8001a86:	4620      	mov	r0, r4
}  
 8001a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001a8c:	f7ff be0e 	b.w	80016ac <SENSOR_IO_Write>

08001a90 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 8001a90:	f7ff bfe2 	b.w	8001a58 <LPS22HB_Init>

08001a94 <LPS22HB_P_ReadID>:
{  
 8001a94:	b510      	push	{r4, lr}
 8001a96:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8001a98:	f7ff fe06 	bl	80016a8 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001a9c:	b2e0      	uxtb	r0, r4
 8001a9e:	210f      	movs	r1, #15
}
 8001aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001aa4:	f7ff be1a 	b.w	80016dc <SENSOR_IO_Read>

08001aa8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001aa8:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001aaa:	2110      	movs	r1, #16
{  
 8001aac:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001aae:	20d4      	movs	r0, #212	; 0xd4
 8001ab0:	f7ff fe14 	bl	80016dc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001ab4:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001ab8:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	2110      	movs	r1, #16
 8001abe:	20d4      	movs	r0, #212	; 0xd4
 8001ac0:	f7ff fdf4 	bl	80016ac <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001ac4:	2112      	movs	r1, #18
 8001ac6:	20d4      	movs	r0, #212	; 0xd4
 8001ac8:	f7ff fe08 	bl	80016dc <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001acc:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001ad0:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8001ad4:	2112      	movs	r1, #18
}
 8001ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001ada:	20d4      	movs	r0, #212	; 0xd4
 8001adc:	f7ff bde6 	b.w	80016ac <SENSOR_IO_Write>

08001ae0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001ae0:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	20d4      	movs	r0, #212	; 0xd4
 8001ae6:	f7ff fdf9 	bl	80016dc <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8001aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001aee:	f000 020f 	and.w	r2, r0, #15
 8001af2:	2110      	movs	r1, #16
 8001af4:	20d4      	movs	r0, #212	; 0xd4
 8001af6:	f7ff bdd9 	b.w	80016ac <SENSOR_IO_Write>

08001afa <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001afa:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001afc:	2115      	movs	r1, #21
{
 8001afe:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001b00:	20d4      	movs	r0, #212	; 0xd4
 8001b02:	f7ff fdeb 	bl	80016dc <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001b06:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8001b0a:	b10c      	cbz	r4, 8001b10 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001b0c:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 8001b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001b14:	2115      	movs	r1, #21
 8001b16:	20d4      	movs	r0, #212	; 0xd4
 8001b18:	f7ff bdc8 	b.w	80016ac <SENSOR_IO_Write>

08001b1c <LSM6DSL_AccReadID>:
{  
 8001b1c:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8001b1e:	f7ff fdc3 	bl	80016a8 <SENSOR_IO_Init>
}
 8001b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001b26:	210f      	movs	r1, #15
 8001b28:	20d4      	movs	r0, #212	; 0xd4
 8001b2a:	f7ff bdd7 	b.w	80016dc <SENSOR_IO_Read>
	...

08001b30 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001b30:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b32:	2110      	movs	r1, #16
{
 8001b34:	b085      	sub	sp, #20
 8001b36:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b38:	20d4      	movs	r0, #212	; 0xd4
 8001b3a:	f7ff fdcf 	bl	80016dc <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001b3e:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b40:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001b42:	aa02      	add	r2, sp, #8
 8001b44:	2128      	movs	r1, #40	; 0x28
 8001b46:	20d4      	movs	r0, #212	; 0xd4
 8001b48:	f7ff fde4 	bl	8001714 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001b4c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001b50:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001b54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b58:	f8ad 3000 	strh.w	r3, [sp]
 8001b5c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001b60:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001b64:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b68:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001b6c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001b70:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001b74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b78:	f8ad 3004 	strh.w	r3, [sp, #4]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <LSM6DSL_AccReadXYZ+0x84>)
 8001b7e:	f005 050c 	and.w	r5, r5, #12
 8001b82:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001b86:	ed95 7a00 	vldr	s14, [r5]
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
    break;    
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001b8a:	1ea3      	subs	r3, r4, #2
 8001b8c:	466a      	mov	r2, sp
 8001b8e:	3404      	adds	r4, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001b90:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8001b94:	ee07 1a90 	vmov	s15, r1
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba4:	ee17 1a90 	vmov	r1, s15
 8001ba8:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8001bac:	42a3      	cmp	r3, r4
 8001bae:	d1ef      	bne.n	8001b90 <LSM6DSL_AccReadXYZ+0x60>
  }
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	bd30      	pop	{r4, r5, pc}
 8001bb4:	080219a8 	.word	0x080219a8

08001bb8 <atcma_init_at_func_ptrs>:
/* Functions Definition ------------------------------------------------------*/
void atcma_init_at_func_ptrs(atcustom_funcPtrs_t *funcPtrs)
{
#if defined(USE_MODEM_WP77)
  /* init function pointers with WP77 functions */
  funcPtrs->f_init = ATCustom_WP77_init;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <atcma_init_at_func_ptrs+0x30>)
 8001bba:	6043      	str	r3, [r0, #4]
  funcPtrs->f_checkEndOfMsgCallback = ATCustom_WP77_checkEndOfMsgCallback;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <atcma_init_at_func_ptrs+0x34>)
 8001bbe:	6083      	str	r3, [r0, #8]
  funcPtrs->f_getCmd = ATCustom_WP77_getCmd;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <atcma_init_at_func_ptrs+0x38>)
 8001bc2:	60c3      	str	r3, [r0, #12]
  funcPtrs->f_extractElement = ATCustom_WP77_extractElement;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <atcma_init_at_func_ptrs+0x3c>)
 8001bc6:	6103      	str	r3, [r0, #16]
  funcPtrs->f_analyzeCmd = ATCustom_WP77_analyzeCmd;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <atcma_init_at_func_ptrs+0x40>)
 8001bca:	6143      	str	r3, [r0, #20]
  funcPtrs->f_analyzeParam = ATCustom_WP77_analyzeParam;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <atcma_init_at_func_ptrs+0x44>)
 8001bce:	6183      	str	r3, [r0, #24]
  funcPtrs->f_terminateCmd = ATCustom_WP77_terminateCmd;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <atcma_init_at_func_ptrs+0x48>)
 8001bd2:	61c3      	str	r3, [r0, #28]
  funcPtrs->f_get_rsp = ATCustom_WP77_get_rsp;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <atcma_init_at_func_ptrs+0x4c>)
 8001bd6:	6203      	str	r3, [r0, #32]
  funcPtrs->f_get_urc = ATCustom_WP77_get_urc;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <atcma_init_at_func_ptrs+0x50>)
 8001bda:	6243      	str	r3, [r0, #36]	; 0x24
  funcPtrs->f_get_error = ATCustom_WP77_get_error;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <atcma_init_at_func_ptrs+0x54>)
 8001bde:	6283      	str	r3, [r0, #40]	; 0x28
  funcPtrs->f_hw_event = ATCustom_WP77_hw_event;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <atcma_init_at_func_ptrs+0x58>)
 8001be2:	62c3      	str	r3, [r0, #44]	; 0x2c
#else
#error AT custom does not match with selected modem
#endif /* USE_MODEM_WP77 */
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08002a8d 	.word	0x08002a8d
 8001bec:	08002af1 	.word	0x08002af1
 8001bf0:	08002c35 	.word	0x08002c35
 8001bf4:	08003449 	.word	0x08003449
 8001bf8:	08003565 	.word	0x08003565
 8001bfc:	0800392d 	.word	0x0800392d
 8001c00:	0800398d 	.word	0x0800398d
 8001c04:	08003a65 	.word	0x08003a65
 8001c08:	08003b39 	.word	0x08003b39
 8001c0c:	08003b89 	.word	0x08003b89
 8001c10:	08003bd9 	.word	0x08003bd9

08001c14 <atcma_init_sysctrl_func_ptrs>:

void atcma_init_sysctrl_func_ptrs(sysctrl_funcPtrs_t *funcPtrs)
{
#if defined(USE_MODEM_WP77)
  /* init function pointers with WP77 functions */
  funcPtrs->f_getDeviceDescriptor = SysCtrl_WP77_getDeviceDescriptor;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <atcma_init_sysctrl_func_ptrs+0x20>)
 8001c16:	6043      	str	r3, [r0, #4]
  funcPtrs->f_open_channel =  SysCtrl_WP77_open_channel;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <atcma_init_sysctrl_func_ptrs+0x24>)
 8001c1a:	6083      	str	r3, [r0, #8]
  funcPtrs->f_close_channel =  SysCtrl_WP77_close_channel;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <atcma_init_sysctrl_func_ptrs+0x28>)
 8001c1e:	60c3      	str	r3, [r0, #12]
  funcPtrs->f_power_on =  SysCtrl_WP77_power_on;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <atcma_init_sysctrl_func_ptrs+0x2c>)
 8001c22:	6103      	str	r3, [r0, #16]
  funcPtrs->f_power_off = SysCtrl_WP77_power_off;
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <atcma_init_sysctrl_func_ptrs+0x30>)
 8001c26:	6143      	str	r3, [r0, #20]
  funcPtrs->f_reset_device = SysCtrl_WP77_reset;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <atcma_init_sysctrl_func_ptrs+0x34>)
 8001c2a:	6183      	str	r3, [r0, #24]
  funcPtrs->f_sim_select = SysCtrl_WP77_sim_select;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <atcma_init_sysctrl_func_ptrs+0x38>)
 8001c2e:	61c3      	str	r3, [r0, #28]
#else
#error SysCtrl does not match with selected modem
#endif /* USE_MODEM_WP77 */
}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	08003bdd 	.word	0x08003bdd
 8001c38:	08003c95 	.word	0x08003c95
 8001c3c:	08003d09 	.word	0x08003d09
 8001c40:	08003d55 	.word	0x08003d55
 8001c44:	08003e2d 	.word	0x08003e2d
 8001c48:	08003e8d 	.word	0x08003e8d
 8001c4c:	08003f59 	.word	0x08003f59

08001c50 <orp_storage_add_msg>:

static int8_t orp_storage_add_msg(const uint8_t *pbuf, uint32_t size);
static bool orpMsgIsAnURC(const uint8_t *pbuf, uint32_t size);

static int8_t orp_storage_add_msg(const uint8_t *pbuf, uint32_t size)
{
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   *                         - a new msg is stored only if previous msg consumed by client, otherwise new msg
   *                           is ignored
   *
   * evolution: implement a FIFO if required, or keep only last msg, ... => customer choice.
   */
  if (orp_msg_urc.free == 1U)
 8001c52:	4e26      	ldr	r6, [pc, #152]	; (8001cec <orp_storage_add_msg+0x9c>)
 8001c54:	7834      	ldrb	r4, [r6, #0]
 8001c56:	2c01      	cmp	r4, #1
{
 8001c58:	4607      	mov	r7, r0
 8001c5a:	460d      	mov	r5, r1
  if (orp_msg_urc.free == 1U)
 8001c5c:	d13a      	bne.n	8001cd4 <orp_storage_add_msg+0x84>
  {
    if (size <= ORP_MSG_MAX_SIZE)
 8001c5e:	29fa      	cmp	r1, #250	; 0xfa
 8001c60:	d81f      	bhi.n	8001ca2 <orp_storage_add_msg+0x52>
    {
      PRINT_INFO("ORP URC message: stored")
 8001c62:	4923      	ldr	r1, [pc, #140]	; (8001cf0 <orp_storage_add_msg+0xa0>)
 8001c64:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001c66:	f01b f997 	bl	801cf98 <strcpy>
 8001c6a:	4822      	ldr	r0, [pc, #136]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001c6c:	f016 f962 	bl	8017f34 <crs_strlen>
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001c72:	b283      	uxth	r3, r0
 8001c74:	4621      	mov	r1, r4
 8001c76:	4620      	mov	r0, r4
 8001c78:	f016 f99a 	bl	8017fb0 <traceIF_itmPrint>
 8001c7c:	481d      	ldr	r0, [pc, #116]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001c7e:	f016 f959 	bl	8017f34 <crs_strlen>
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001c84:	b283      	uxth	r3, r0
 8001c86:	4621      	mov	r1, r4
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f016 fbb7 	bl	80183fc <traceIF_uartPrint>
      (void) memcpy(orp_msg_urc.data, pbuf, size);
 8001c8e:	462a      	mov	r2, r5
 8001c90:	4639      	mov	r1, r7
 8001c92:	1c70      	adds	r0, r6, #1
 8001c94:	f01b f8d2 	bl	801ce3c <memcpy>
      orp_msg_urc.size = size;
      orp_msg_urc.free = 0U;
 8001c98:	2000      	movs	r0, #0
      orp_msg_urc.size = size;
 8001c9a:	f8c6 50fc 	str.w	r5, [r6, #252]	; 0xfc
      orp_msg_urc.free = 0U;
 8001c9e:	7030      	strb	r0, [r6, #0]
    PRINT_INFO("ORP URC message: ERROR, no free slot")
    status = -1;
  }

  return(status);
}
 8001ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PRINT_INFO("ORP URC message: ERROR, exceed maximum size")
 8001ca2:	4915      	ldr	r1, [pc, #84]	; (8001cf8 <orp_storage_add_msg+0xa8>)
 8001ca4:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001ca6:	f01b f977 	bl	801cf98 <strcpy>
 8001caa:	4812      	ldr	r0, [pc, #72]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cac:	f016 f942 	bl	8017f34 <crs_strlen>
 8001cb0:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cb2:	b283      	uxth	r3, r0
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	4620      	mov	r0, r4
    PRINT_INFO("ORP URC message: ERROR, no free slot")
 8001cb8:	f016 f97a 	bl	8017fb0 <traceIF_itmPrint>
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cbe:	f016 f939 	bl	8017f34 <crs_strlen>
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	b283      	uxth	r3, r0
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cc8:	4608      	mov	r0, r1
 8001cca:	f016 fb97 	bl	80183fc <traceIF_uartPrint>
    status = -1;
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	e7e5      	b.n	8001ca0 <orp_storage_add_msg+0x50>
    PRINT_INFO("ORP URC message: ERROR, no free slot")
 8001cd4:	4909      	ldr	r1, [pc, #36]	; (8001cfc <orp_storage_add_msg+0xac>)
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cd8:	f01b f95e 	bl	801cf98 <strcpy>
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001cde:	f016 f929 	bl	8017f34 <crs_strlen>
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	b283      	uxth	r3, r0
 8001ce6:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <orp_storage_add_msg+0xa4>)
 8001ce8:	4608      	mov	r0, r1
 8001cea:	e7e5      	b.n	8001cb8 <orp_storage_add_msg+0x68>
 8001cec:	2000005c 	.word	0x2000005c
 8001cf0:	080219dc 	.word	0x080219dc
 8001cf4:	20008ef8 	.word	0x20008ef8
 8001cf8:	080219fb 	.word	0x080219fb
 8001cfc:	08021a2e 	.word	0x08021a2e

08001d00 <orpMsgIsAnURC>:

  return (retval);
}

static bool orpMsgIsAnURC(const uint8_t *pbuf, uint32_t size)
{
 8001d00:	b508      	push	{r3, lr}
 8001d02:	4401      	add	r1, r0
 8001d04:	1c43      	adds	r3, r0, #1
  bool isAnURC = false;

  /* parse msg content until first condition is met: first occurence of "@" (0x40) is found, end of message
   * if "@" is found, check if previous char is "c" and indicates an URC
   */
  for (uint32_t i=1U; i<size; i++)
 8001d06:	428b      	cmp	r3, r1
 8001d08:	d101      	bne.n	8001d0e <orpMsgIsAnURC+0xe>
  bool isAnURC = false;
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e020      	b.n	8001d50 <orpMsgIsAnURC+0x50>
  {
    /* search for first '@' (ascii code = 0x40) */
    if(*(pbuf+i) == 0x40U)
 8001d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d12:	2a40      	cmp	r2, #64	; 0x40
 8001d14:	d1f7      	bne.n	8001d06 <orpMsgIsAnURC+0x6>
    {
      /* if previous char is 'c' or 'C' (ascii code = 0x43 or 0x63), it is an URC */
      if((*(pbuf+i-1) == 0x43U) ||(*(pbuf+i-1) == 0x63U))
 8001d16:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8001d1a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001d1e:	2a43      	cmp	r2, #67	; 0x43
 8001d20:	d1f1      	bne.n	8001d06 <orpMsgIsAnURC+0x6>
      {
        PRINT_INFO("ORP msg analyze: URC confirmed")
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <orpMsgIsAnURC+0x54>)
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <orpMsgIsAnURC+0x58>)
 8001d26:	f01b f937 	bl	801cf98 <strcpy>
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <orpMsgIsAnURC+0x58>)
 8001d2c:	f016 f902 	bl	8017f34 <crs_strlen>
 8001d30:	2101      	movs	r1, #1
 8001d32:	b283      	uxth	r3, r0
 8001d34:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <orpMsgIsAnURC+0x58>)
 8001d36:	4608      	mov	r0, r1
 8001d38:	f016 f93a 	bl	8017fb0 <traceIF_itmPrint>
 8001d3c:	4806      	ldr	r0, [pc, #24]	; (8001d58 <orpMsgIsAnURC+0x58>)
 8001d3e:	f016 f8f9 	bl	8017f34 <crs_strlen>
 8001d42:	2101      	movs	r1, #1
 8001d44:	b283      	uxth	r3, r0
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <orpMsgIsAnURC+0x58>)
 8001d48:	4608      	mov	r0, r1
 8001d4a:	f016 fb57 	bl	80183fc <traceIF_uartPrint>
 8001d4e:	2001      	movs	r0, #1
      }
    }
  }

  return(isAnURC);
}
 8001d50:	bd08      	pop	{r3, pc}
 8001d52:	bf00      	nop
 8001d54:	08021a5a 	.word	0x08021a5a
 8001d58:	20008ef8 	.word	0x20008ef8

08001d5c <fCmdBuild_ATD_WP77>:
{
 8001d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d5e:	4604      	mov	r4, r0
 8001d60:	460d      	mov	r5, r1
  PRINT_API("enter fCmdBuild_ATD_WP77()")
 8001d62:	4822      	ldr	r0, [pc, #136]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001d64:	4922      	ldr	r1, [pc, #136]	; (8001df0 <fCmdBuild_ATD_WP77+0x94>)
 8001d66:	f01b f917 	bl	801cf98 <strcpy>
 8001d6a:	4820      	ldr	r0, [pc, #128]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001d6c:	f016 f8e2 	bl	8017f34 <crs_strlen>
 8001d70:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001d72:	b283      	uxth	r3, r0
 8001d74:	2104      	movs	r1, #4
 8001d76:	2001      	movs	r0, #1
 8001d78:	f016 f91a 	bl	8017fb0 <traceIF_itmPrint>
 8001d7c:	481b      	ldr	r0, [pc, #108]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001d7e:	f016 f8d9 	bl	8017f34 <crs_strlen>
 8001d82:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001d84:	b283      	uxth	r3, r0
 8001d86:	2104      	movs	r1, #4
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f016 fb37 	bl	80183fc <traceIF_uartPrint>
  if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD)
 8001d8e:	8923      	ldrh	r3, [r4, #8]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d127      	bne.n	8001de4 <fCmdBuild_ATD_WP77+0x88>
    CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(p_modem_ctxt);
 8001d94:	4628      	mov	r0, r5
 8001d96:	f006 fbb9 	bl	800850c <atcm_get_cid_current_SID>
    uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist, current_conf_id);
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	9001      	str	r0, [sp, #4]
 8001d9e:	f105 000c 	add.w	r0, r5, #12
 8001da2:	f007 fe99 	bl	8009ad8 <atcm_get_affected_modem_cid>
    PRINT_INFO("Activate PDN (user cid = %d, modem cid = %d)", (uint8_t)current_conf_id, modem_cid)
 8001da6:	9a01      	ldr	r2, [sp, #4]
 8001da8:	4912      	ldr	r1, [pc, #72]	; (8001df4 <fCmdBuild_ATD_WP77+0x98>)
 8001daa:	4603      	mov	r3, r0
    uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist, current_conf_id);
 8001dac:	4605      	mov	r5, r0
    PRINT_INFO("Activate PDN (user cid = %d, modem cid = %d)", (uint8_t)current_conf_id, modem_cid)
 8001dae:	480f      	ldr	r0, [pc, #60]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001db0:	f01b f882 	bl	801ceb8 <sprintf>
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001db6:	f016 f8bd 	bl	8017f34 <crs_strlen>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	b283      	uxth	r3, r0
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	f016 f8f5 	bl	8017fb0 <traceIF_itmPrint>
 8001dc6:	4809      	ldr	r0, [pc, #36]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001dc8:	f016 f8b4 	bl	8017f34 <crs_strlen>
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4a07      	ldr	r2, [pc, #28]	; (8001dec <fCmdBuild_ATD_WP77+0x90>)
 8001dd0:	b283      	uxth	r3, r0
 8001dd2:	4608      	mov	r0, r1
 8001dd4:	f016 fb12 	bl	80183fc <traceIF_uartPrint>
    (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->current_atcmd.params, "*99***%d#", modem_cid);
 8001dd8:	4907      	ldr	r1, [pc, #28]	; (8001df8 <fCmdBuild_ATD_WP77+0x9c>)
 8001dda:	462a      	mov	r2, r5
 8001ddc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001de0:	f01b f86a 	bl	801ceb8 <sprintf>
}
 8001de4:	2000      	movs	r0, #0
 8001de6:	b003      	add	sp, #12
 8001de8:	bd30      	pop	{r4, r5, pc}
 8001dea:	bf00      	nop
 8001dec:	20008ef8 	.word	0x20008ef8
 8001df0:	08021a80 	.word	0x08021a80
 8001df4:	08021aa6 	.word	0x08021aa6
 8001df8:	08021ada 	.word	0x08021ada

08001dfc <fCmdBuild_CGSN_WP77>:
{
 8001dfc:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter fCmdBuild_CGSN_WP77()")
 8001dfe:	4c0e      	ldr	r4, [pc, #56]	; (8001e38 <fCmdBuild_CGSN_WP77+0x3c>)
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <fCmdBuild_CGSN_WP77+0x40>)
{
 8001e02:	4605      	mov	r5, r0
  PRINT_API("enter fCmdBuild_CGSN_WP77()")
 8001e04:	4620      	mov	r0, r4
 8001e06:	f01b f8c7 	bl	801cf98 <strcpy>
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f016 f892 	bl	8017f34 <crs_strlen>
 8001e10:	4622      	mov	r2, r4
 8001e12:	b283      	uxth	r3, r0
 8001e14:	2104      	movs	r1, #4
 8001e16:	2001      	movs	r0, #1
 8001e18:	f016 f8ca 	bl	8017fb0 <traceIF_itmPrint>
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f016 f889 	bl	8017f34 <crs_strlen>
 8001e22:	4622      	mov	r2, r4
 8001e24:	b283      	uxth	r3, r0
 8001e26:	2104      	movs	r1, #4
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f016 fae7 	bl	80183fc <traceIF_uartPrint>
  if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD)
 8001e2e:	8928      	ldrh	r0, [r5, #8]
}
 8001e30:	1ec3      	subs	r3, r0, #3
 8001e32:	4258      	negs	r0, r3
 8001e34:	4158      	adcs	r0, r3
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
 8001e38:	20008ef8 	.word	0x20008ef8
 8001e3c:	08021ae4 	.word	0x08021ae4

08001e40 <fCmdBuild_CGDCONT_WP77>:
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
  PRINT_API("enter fCmdBuild_CGDCONT_WP77()")
 8001e42:	4c0f      	ldr	r4, [pc, #60]	; (8001e80 <fCmdBuild_CGDCONT_WP77+0x40>)
{
 8001e44:	4605      	mov	r5, r0
 8001e46:	460e      	mov	r6, r1
  PRINT_API("enter fCmdBuild_CGDCONT_WP77()")
 8001e48:	4620      	mov	r0, r4
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <fCmdBuild_CGDCONT_WP77+0x44>)
 8001e4c:	f01b f8a4 	bl	801cf98 <strcpy>
 8001e50:	4620      	mov	r0, r4
 8001e52:	f016 f86f 	bl	8017f34 <crs_strlen>
 8001e56:	4622      	mov	r2, r4
 8001e58:	b283      	uxth	r3, r0
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f016 f8a7 	bl	8017fb0 <traceIF_itmPrint>
 8001e62:	4620      	mov	r0, r4
 8001e64:	f016 f866 	bl	8017f34 <crs_strlen>
 8001e68:	4622      	mov	r2, r4
 8001e6a:	b283      	uxth	r3, r0
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f016 fac4 	bl	80183fc <traceIF_uartPrint>
  retval = fCmdBuild_CGDCONT(p_atp_ctxt, p_modem_ctxt);
 8001e74:	4631      	mov	r1, r6
 8001e76:	4628      	mov	r0, r5
}
 8001e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  retval = fCmdBuild_CGDCONT(p_atp_ctxt, p_modem_ctxt);
 8001e7c:	f008 b95a 	b.w	800a134 <fCmdBuild_CGDCONT>
 8001e80:	20008ef8 	.word	0x20008ef8
 8001e84:	08021b0b 	.word	0x08021b0b

08001e88 <fCmdBuild_KCELL_WP77>:
{
 8001e88:	b510      	push	{r4, lr}
	PRINT_API("enter fCmdBuild_KCELL_WP77()")
 8001e8a:	4910      	ldr	r1, [pc, #64]	; (8001ecc <fCmdBuild_KCELL_WP77+0x44>)
{
 8001e8c:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_KCELL_WP77()")
 8001e8e:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <fCmdBuild_KCELL_WP77+0x48>)
 8001e90:	f01b f882 	bl	801cf98 <strcpy>
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <fCmdBuild_KCELL_WP77+0x48>)
 8001e96:	f016 f84d 	bl	8017f34 <crs_strlen>
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <fCmdBuild_KCELL_WP77+0x48>)
 8001e9c:	b283      	uxth	r3, r0
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f016 f885 	bl	8017fb0 <traceIF_itmPrint>
 8001ea6:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <fCmdBuild_KCELL_WP77+0x48>)
 8001ea8:	f016 f844 	bl	8017f34 <crs_strlen>
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <fCmdBuild_KCELL_WP77+0x48>)
 8001eae:	b283      	uxth	r3, r0
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f016 faa2 	bl	80183fc <traceIF_uartPrint>
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD)
 8001eb8:	8923      	ldrh	r3, [r4, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d104      	bne.n	8001ec8 <fCmdBuild_KCELL_WP77+0x40>
	  (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->current_atcmd.params, "0");
 8001ebe:	4905      	ldr	r1, [pc, #20]	; (8001ed4 <fCmdBuild_KCELL_WP77+0x4c>)
 8001ec0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001ec4:	f01b f868 	bl	801cf98 <strcpy>
}
 8001ec8:	2000      	movs	r0, #0
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	08021b35 	.word	0x08021b35
 8001ed0:	20008ef8 	.word	0x20008ef8
 8001ed4:	08024e97 	.word	0x08024e97

08001ed8 <fCmdBuild_WDSI_WP77>:
{
 8001ed8:	b510      	push	{r4, lr}
	PRINT_API("enter fCmdBuild_WDSI_WP77()")
 8001eda:	4910      	ldr	r1, [pc, #64]	; (8001f1c <fCmdBuild_WDSI_WP77+0x44>)
{
 8001edc:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_WDSI_WP77()")
 8001ede:	4810      	ldr	r0, [pc, #64]	; (8001f20 <fCmdBuild_WDSI_WP77+0x48>)
 8001ee0:	f01b f85a 	bl	801cf98 <strcpy>
 8001ee4:	480e      	ldr	r0, [pc, #56]	; (8001f20 <fCmdBuild_WDSI_WP77+0x48>)
 8001ee6:	f016 f825 	bl	8017f34 <crs_strlen>
 8001eea:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <fCmdBuild_WDSI_WP77+0x48>)
 8001eec:	b283      	uxth	r3, r0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f016 f85d 	bl	8017fb0 <traceIF_itmPrint>
 8001ef6:	480a      	ldr	r0, [pc, #40]	; (8001f20 <fCmdBuild_WDSI_WP77+0x48>)
 8001ef8:	f016 f81c 	bl	8017f34 <crs_strlen>
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <fCmdBuild_WDSI_WP77+0x48>)
 8001efe:	b283      	uxth	r3, r0
 8001f00:	2104      	movs	r1, #4
 8001f02:	2001      	movs	r0, #1
 8001f04:	f016 fa7a 	bl	80183fc <traceIF_uartPrint>
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD)
 8001f08:	8923      	ldrh	r3, [r4, #8]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d104      	bne.n	8001f18 <fCmdBuild_WDSI_WP77+0x40>
	  (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->current_atcmd.params, "4096");
 8001f0e:	4905      	ldr	r1, [pc, #20]	; (8001f24 <fCmdBuild_WDSI_WP77+0x4c>)
 8001f10:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001f14:	f01b f840 	bl	801cf98 <strcpy>
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	08021b5d 	.word	0x08021b5d
 8001f20:	20008ef8 	.word	0x20008ef8
 8001f24:	08021b84 	.word	0x08021b84

08001f28 <fRspAnalyze_Error_WP77>:
{
 8001f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f2c:	4606      	mov	r6, r0
 8001f2e:	460f      	mov	r7, r1
  PRINT_API("enter fRspAnalyze_Error_WP77()")
 8001f30:	4843      	ldr	r0, [pc, #268]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001f32:	4944      	ldr	r1, [pc, #272]	; (8002044 <fRspAnalyze_Error_WP77+0x11c>)
{
 8001f34:	4690      	mov	r8, r2
 8001f36:	461d      	mov	r5, r3
  PRINT_API("enter fRspAnalyze_Error_WP77()")
 8001f38:	f01b f82e 	bl	801cf98 <strcpy>
 8001f3c:	4840      	ldr	r0, [pc, #256]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001f3e:	f015 fff9 	bl	8017f34 <crs_strlen>
 8001f42:	4a3f      	ldr	r2, [pc, #252]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001f44:	b283      	uxth	r3, r0
 8001f46:	2104      	movs	r1, #4
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f016 f831 	bl	8017fb0 <traceIF_itmPrint>
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001f50:	f015 fff0 	bl	8017f34 <crs_strlen>
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001f56:	b283      	uxth	r3, r0
 8001f58:	2104      	movs	r1, #4
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f016 fa4e 	bl	80183fc <traceIF_uartPrint>
  switch (p_atp_ctxt->current_SID)
 8001f60:	8a33      	ldrh	r3, [r6, #16]
 8001f62:	2b79      	cmp	r3, #121	; 0x79
 8001f64:	d105      	bne.n	8001f72 <fRspAnalyze_Error_WP77+0x4a>
      (void) atcm_socket_release_modem_cid(p_modem_ctxt, p_modem_ctxt->socket_ctxt.socket_info->socket_handle);
 8001f66:	f8d7 3774 	ldr.w	r3, [r7, #1908]	; 0x774
 8001f6a:	4638      	mov	r0, r7
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	f00b ffa5 	bl	800debc <atcm_socket_release_modem_cid>
  switch (p_atp_ctxt->current_atcmd.id)
 8001f72:	69f4      	ldr	r4, [r6, #28]
 8001f74:	2c23      	cmp	r4, #35	; 0x23
 8001f76:	d80f      	bhi.n	8001f98 <fRspAnalyze_Error_WP77+0x70>
 8001f78:	2c11      	cmp	r4, #17
 8001f7a:	d918      	bls.n	8001fae <fRspAnalyze_Error_WP77+0x86>
 8001f7c:	3c12      	subs	r4, #18
 8001f7e:	2c11      	cmp	r4, #17
 8001f80:	d815      	bhi.n	8001fae <fRspAnalyze_Error_WP77+0x86>
 8001f82:	e8df f004 	tbb	[pc, r4]
 8001f86:	1424      	.short	0x1424
 8001f88:	10141414 	.word	0x10141414
 8001f8c:	14141010 	.word	0x14141010
 8001f90:	14141c10 	.word	0x14141c10
 8001f94:	10101414 	.word	0x10101414
 8001f98:	2c47      	cmp	r4, #71	; 0x47
 8001f9a:	d035      	beq.n	8002008 <fRspAnalyze_Error_WP77+0xe0>
 8001f9c:	d807      	bhi.n	8001fae <fRspAnalyze_Error_WP77+0x86>
 8001f9e:	2c38      	cmp	r4, #56	; 0x38
 8001fa0:	d803      	bhi.n	8001faa <fRspAnalyze_Error_WP77+0x82>
 8001fa2:	2c35      	cmp	r4, #53	; 0x35
 8001fa4:	d903      	bls.n	8001fae <fRspAnalyze_Error_WP77+0x86>
 8001fa6:	2401      	movs	r4, #1
 8001fa8:	e00e      	b.n	8001fc8 <fRspAnalyze_Error_WP77+0xa0>
 8001faa:	2c3e      	cmp	r4, #62	; 0x3e
 8001fac:	d0fb      	beq.n	8001fa6 <fRspAnalyze_Error_WP77+0x7e>
      retval = fRspAnalyze_Error(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos);
 8001fae:	462b      	mov	r3, r5
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	4639      	mov	r1, r7
 8001fb4:	4630      	mov	r0, r6
}
 8001fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      retval = fRspAnalyze_Error(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos);
 8001fba:	f008 bf21 	b.w	800ae00 <fRspAnalyze_Error>
      if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_INIT_MODEM)
 8001fbe:	8a33      	ldrh	r3, [r6, #16]
        retval = ATACTION_RSP_FRC_END;
 8001fc0:	2b67      	cmp	r3, #103	; 0x67
 8001fc2:	bf14      	ite	ne
 8001fc4:	2404      	movne	r4, #4
 8001fc6:	2401      	moveq	r4, #1
}
 8001fc8:	4620      	mov	r0, r4
 8001fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (WP77_shared.WP77_sim_status_retries != 0U)
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <fRspAnalyze_Error_WP77+0x120>)
 8001fd0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ea      	beq.n	8001fae <fRspAnalyze_Error_WP77+0x86>
        PRINT_INFO("error ignored (waiting for SIM ready)")
 8001fd8:	491c      	ldr	r1, [pc, #112]	; (800204c <fRspAnalyze_Error_WP77+0x124>)
 8001fda:	4819      	ldr	r0, [pc, #100]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001fdc:	f01a ffdc 	bl	801cf98 <strcpy>
 8001fe0:	4817      	ldr	r0, [pc, #92]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001fe2:	f015 ffa7 	bl	8017f34 <crs_strlen>
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	b283      	uxth	r3, r0
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001fec:	4608      	mov	r0, r1
 8001fee:	f015 ffdf 	bl	8017fb0 <traceIF_itmPrint>
 8001ff2:	4813      	ldr	r0, [pc, #76]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001ff4:	f015 ff9e 	bl	8017f34 <crs_strlen>
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	b283      	uxth	r3, r0
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <fRspAnalyze_Error_WP77+0x118>)
 8001ffe:	4608      	mov	r0, r1
 8002000:	f016 f9fc 	bl	80183fc <traceIF_uartPrint>
        retval = ATACTION_RSP_FRC_CONTINUE;
 8002004:	2402      	movs	r4, #2
 8002006:	e7df      	b.n	8001fc8 <fRspAnalyze_Error_WP77+0xa0>
      if (element_infos->cmd_id_received == (uint32_t) CMD_AT_CME_ERROR)
 8002008:	686b      	ldr	r3, [r5, #4]
 800200a:	2b09      	cmp	r3, #9
 800200c:	d116      	bne.n	800203c <fRspAnalyze_Error_WP77+0x114>
        retval = ATACTION_RSP_IGNORED;
 800200e:	2410      	movs	r4, #16
        START_PARAM_LOOP()
 8002010:	4641      	mov	r1, r8
 8002012:	462a      	mov	r2, r5
 8002014:	4630      	mov	r0, r6
 8002016:	f006 f8a9 	bl	800816c <atcc_extractElement>
 800201a:	89e9      	ldrh	r1, [r5, #14]
 800201c:	4681      	mov	r9, r0
 800201e:	b149      	cbz	r1, 8002034 <fRspAnalyze_Error_WP77+0x10c>
        if (element_infos->param_rank == 2U)
 8002020:	892b      	ldrh	r3, [r5, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d106      	bne.n	8002034 <fRspAnalyze_Error_WP77+0x10c>
          uint32_t CmeErrorCode = ATutil_convertStringToInt(&p_msg_in->buffer[element_infos->str_start_idx],
 8002026:	8968      	ldrh	r0, [r5, #10]
 8002028:	4440      	add	r0, r8
 800202a:	f00c fb71 	bl	800e710 <ATutil_convertStringToInt>
          retval = ATACTION_RSP_FRC_END;
 800202e:	2401      	movs	r4, #1
          p_mdm_com->errorCode = (int32_t) CmeErrorCode;
 8002030:	f8c7 075c 	str.w	r0, [r7, #1884]	; 0x75c
        END_PARAM_LOOP()
 8002034:	f1b9 0f01 	cmp.w	r9, #1
 8002038:	d1c6      	bne.n	8001fc8 <fRspAnalyze_Error_WP77+0xa0>
 800203a:	e7e9      	b.n	8002010 <fRspAnalyze_Error_WP77+0xe8>
  at_action_rsp_t retval = ATACTION_RSP_ERROR;
 800203c:	2404      	movs	r4, #4
 800203e:	e7c3      	b.n	8001fc8 <fRspAnalyze_Error_WP77+0xa0>
 8002040:	20008ef8 	.word	0x20008ef8
 8002044:	08021b89 	.word	0x08021b89
 8002048:	2000015c 	.word	0x2000015c
 800204c:	08021bb3 	.word	0x08021bb3

08002050 <fRspAnalyze_CFUN_WP77>:
{
 8002050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  PRINT_API("enter fRspAnalyze_CFUN_WP77()")
 8002054:	4925      	ldr	r1, [pc, #148]	; (80020ec <fRspAnalyze_CFUN_WP77+0x9c>)
    PRINT_DBG("URC +CFUN received")
 8002056:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80020f4 <fRspAnalyze_CFUN_WP77+0xa4>
 800205a:	4d25      	ldr	r5, [pc, #148]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
{
 800205c:	4680      	mov	r8, r0
  PRINT_API("enter fRspAnalyze_CFUN_WP77()")
 800205e:	4824      	ldr	r0, [pc, #144]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
{
 8002060:	4616      	mov	r6, r2
 8002062:	461c      	mov	r4, r3
  PRINT_API("enter fRspAnalyze_CFUN_WP77()")
 8002064:	f01a ff98 	bl	801cf98 <strcpy>
 8002068:	4821      	ldr	r0, [pc, #132]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
 800206a:	f015 ff63 	bl	8017f34 <crs_strlen>
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
 8002070:	b283      	uxth	r3, r0
 8002072:	2104      	movs	r1, #4
 8002074:	2001      	movs	r0, #1
 8002076:	f015 ff9b 	bl	8017fb0 <traceIF_itmPrint>
 800207a:	481d      	ldr	r0, [pc, #116]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
 800207c:	f015 ff5a 	bl	8017f34 <crs_strlen>
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <fRspAnalyze_CFUN_WP77+0xa0>)
 8002082:	b283      	uxth	r3, r0
 8002084:	2104      	movs	r1, #4
 8002086:	2001      	movs	r0, #1
 8002088:	f016 f9b8 	bl	80183fc <traceIF_uartPrint>
  START_PARAM_LOOP()
 800208c:	4622      	mov	r2, r4
 800208e:	4631      	mov	r1, r6
 8002090:	4640      	mov	r0, r8
 8002092:	f006 f86b 	bl	800816c <atcc_extractElement>
 8002096:	89e3      	ldrh	r3, [r4, #14]
 8002098:	4607      	mov	r7, r0
 800209a:	b30b      	cbz	r3, 80020e0 <fRspAnalyze_CFUN_WP77+0x90>
  if (element_infos->param_rank == 2U)
 800209c:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 80020a0:	f1b9 0f02 	cmp.w	r9, #2
 80020a4:	d11c      	bne.n	80020e0 <fRspAnalyze_CFUN_WP77+0x90>
    PRINT_DBG("URC +CFUN received")
 80020a6:	4651      	mov	r1, sl
 80020a8:	4628      	mov	r0, r5
 80020aa:	f01a ff75 	bl	801cf98 <strcpy>
 80020ae:	4628      	mov	r0, r5
 80020b0:	f015 ff40 	bl	8017f34 <crs_strlen>
 80020b4:	462a      	mov	r2, r5
 80020b6:	b283      	uxth	r3, r0
 80020b8:	4649      	mov	r1, r9
 80020ba:	2001      	movs	r0, #1
 80020bc:	f015 ff78 	bl	8017fb0 <traceIF_itmPrint>
 80020c0:	4628      	mov	r0, r5
 80020c2:	f015 ff37 	bl	8017f34 <crs_strlen>
 80020c6:	462a      	mov	r2, r5
 80020c8:	b283      	uxth	r3, r0
 80020ca:	4649      	mov	r1, r9
 80020cc:	2001      	movs	r0, #1
 80020ce:	f016 f995 	bl	80183fc <traceIF_uartPrint>
    PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 80020d2:	8962      	ldrh	r2, [r4, #10]
 80020d4:	89e3      	ldrh	r3, [r4, #14]
 80020d6:	2101      	movs	r1, #1
 80020d8:	4432      	add	r2, r6
 80020da:	4608      	mov	r0, r1
 80020dc:	f016 f9ac 	bl	8018438 <traceIF_BufCharPrint>
  END_PARAM_LOOP()
 80020e0:	2f01      	cmp	r7, #1
 80020e2:	d0d3      	beq.n	800208c <fRspAnalyze_CFUN_WP77+0x3c>
}
 80020e4:	2010      	movs	r0, #16
 80020e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ea:	bf00      	nop
 80020ec:	08021be0 	.word	0x08021be0
 80020f0:	20008ef8 	.word	0x20008ef8
 80020f4:	08021c09 	.word	0x08021c09

080020f8 <fRspAnalyze_SELRAT_WP77>:
{
 80020f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	PRINT_DBG("enter fRspAnalyze_SELRAT_WP77()")
 80020fc:	493a      	ldr	r1, [pc, #232]	; (80021e8 <fRspAnalyze_SELRAT_WP77+0xf0>)
{
 80020fe:	4607      	mov	r7, r0
	PRINT_DBG("enter fRspAnalyze_SELRAT_WP77()")
 8002100:	483a      	ldr	r0, [pc, #232]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
{
 8002102:	4690      	mov	r8, r2
 8002104:	461e      	mov	r6, r3
	PRINT_DBG("enter fRspAnalyze_SELRAT_WP77()")
 8002106:	f01a ff47 	bl	801cf98 <strcpy>
 800210a:	4838      	ldr	r0, [pc, #224]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
 800210c:	f015 ff12 	bl	8017f34 <crs_strlen>
 8002110:	4a36      	ldr	r2, [pc, #216]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
 8002112:	b283      	uxth	r3, r0
 8002114:	2102      	movs	r1, #2
 8002116:	2001      	movs	r0, #1
 8002118:	f015 ff4a 	bl	8017fb0 <traceIF_itmPrint>
 800211c:	4833      	ldr	r0, [pc, #204]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
 800211e:	f015 ff09 	bl	8017f34 <crs_strlen>
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
 8002124:	b283      	uxth	r3, r0
 8002126:	2102      	movs	r1, #2
 8002128:	2001      	movs	r0, #1
 800212a:	f016 f967 	bl	80183fc <traceIF_uartPrint>
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD)
 800212e:	8b3b      	ldrh	r3, [r7, #24]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d13e      	bne.n	80021b2 <fRspAnalyze_SELRAT_WP77+0xba>
			WP77_shared.mode_and_bands_config.nw_scanmode = rat;
 8002134:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800220c <fRspAnalyze_SELRAT_WP77+0x114>
				PRINT_INFO("Modem Access Technology is LTE and GSM Only")
 8002138:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8002210 <fRspAnalyze_SELRAT_WP77+0x118>
 800213c:	4c2b      	ldr	r4, [pc, #172]	; (80021ec <fRspAnalyze_SELRAT_WP77+0xf4>)
		START_PARAM_LOOP()
 800213e:	4641      	mov	r1, r8
 8002140:	4632      	mov	r2, r6
 8002142:	4638      	mov	r0, r7
 8002144:	f006 f812 	bl	800816c <atcc_extractElement>
 8002148:	89f1      	ldrh	r1, [r6, #14]
 800214a:	4681      	mov	r9, r0
 800214c:	b371      	cbz	r1, 80021ac <fRspAnalyze_SELRAT_WP77+0xb4>
		if (element_infos->param_rank == 2U)
 800214e:	8933      	ldrh	r3, [r6, #8]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d12b      	bne.n	80021ac <fRspAnalyze_SELRAT_WP77+0xb4>
			uint8_t rat = ATutil_convertStringToInt(
 8002154:	8970      	ldrh	r0, [r6, #10]
 8002156:	4440      	add	r0, r8
 8002158:	f00c fada 	bl	800e710 <ATutil_convertStringToInt>
 800215c:	b2c5      	uxtb	r5, r0
			WP77_shared.mode_and_bands_config.nw_scanmode = rat;
 800215e:	f8ca 5004 	str.w	r5, [sl, #4]
			if(rat == 0)
 8002162:	b95d      	cbnz	r5, 800217c <fRspAnalyze_SELRAT_WP77+0x84>
				PRINT_INFO("Modem Access Technology is set to Automatic (All RATs")
 8002164:	4922      	ldr	r1, [pc, #136]	; (80021f0 <fRspAnalyze_SELRAT_WP77+0xf8>)
				PRINT_INFO("Modem Access Technology is LTE and GSM Only")
 8002166:	4620      	mov	r0, r4
 8002168:	f01a ff16 	bl	801cf98 <strcpy>
 800216c:	4620      	mov	r0, r4
 800216e:	f015 fee1 	bl	8017f34 <crs_strlen>
 8002172:	2101      	movs	r1, #1
 8002174:	b283      	uxth	r3, r0
 8002176:	4622      	mov	r2, r4
 8002178:	4608      	mov	r0, r1
 800217a:	e00c      	b.n	8002196 <fRspAnalyze_SELRAT_WP77+0x9e>
			else if(rat == 1)
 800217c:	2d01      	cmp	r5, #1
 800217e:	d11b      	bne.n	80021b8 <fRspAnalyze_SELRAT_WP77+0xc0>
				PRINT_INFO("Modem Access Technology is UMTS 3G only")
 8002180:	491c      	ldr	r1, [pc, #112]	; (80021f4 <fRspAnalyze_SELRAT_WP77+0xfc>)
 8002182:	4620      	mov	r0, r4
 8002184:	f01a ff08 	bl	801cf98 <strcpy>
 8002188:	4620      	mov	r0, r4
 800218a:	f015 fed3 	bl	8017f34 <crs_strlen>
 800218e:	4622      	mov	r2, r4
 8002190:	b283      	uxth	r3, r0
 8002192:	4629      	mov	r1, r5
 8002194:	4628      	mov	r0, r5
				PRINT_INFO("Modem Access Technology is LTE and GSM Only")
 8002196:	f015 ff0b 	bl	8017fb0 <traceIF_itmPrint>
 800219a:	4620      	mov	r0, r4
 800219c:	f015 feca 	bl	8017f34 <crs_strlen>
 80021a0:	2101      	movs	r1, #1
 80021a2:	b283      	uxth	r3, r0
 80021a4:	4622      	mov	r2, r4
 80021a6:	4608      	mov	r0, r1
 80021a8:	f016 f928 	bl	80183fc <traceIF_uartPrint>
		END_PARAM_LOOP()
 80021ac:	f1b9 0f01 	cmp.w	r9, #1
 80021b0:	d0c5      	beq.n	800213e <fRspAnalyze_SELRAT_WP77+0x46>
}
 80021b2:	2010      	movs	r0, #16
 80021b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if(rat == 2)
 80021b8:	2d02      	cmp	r5, #2
 80021ba:	d101      	bne.n	80021c0 <fRspAnalyze_SELRAT_WP77+0xc8>
				PRINT_INFO("Modem Access Technology is 2G Only")
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <fRspAnalyze_SELRAT_WP77+0x100>)
 80021be:	e7d2      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
			else if(rat == 54)
 80021c0:	2d36      	cmp	r5, #54	; 0x36
 80021c2:	d101      	bne.n	80021c8 <fRspAnalyze_SELRAT_WP77+0xd0>
				PRINT_INFO("Modem Access Technology is UMTS and GSM Only")
 80021c4:	490d      	ldr	r1, [pc, #52]	; (80021fc <fRspAnalyze_SELRAT_WP77+0x104>)
 80021c6:	e7ce      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
			else if(rat == 6)
 80021c8:	2d06      	cmp	r5, #6
 80021ca:	d101      	bne.n	80021d0 <fRspAnalyze_SELRAT_WP77+0xd8>
				PRINT_INFO("Modem Access Technology is LTE Only")
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <fRspAnalyze_SELRAT_WP77+0x108>)
 80021ce:	e7ca      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
			else if(rat == 7)
 80021d0:	2d07      	cmp	r5, #7
 80021d2:	d101      	bne.n	80021d8 <fRspAnalyze_SELRAT_WP77+0xe0>
				PRINT_INFO("Modem Access Technology is LTE,UMTS,2G Only")
 80021d4:	490b      	ldr	r1, [pc, #44]	; (8002204 <fRspAnalyze_SELRAT_WP77+0x10c>)
 80021d6:	e7c6      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
			else if(rat == 11)
 80021d8:	2d0b      	cmp	r5, #11
 80021da:	d101      	bne.n	80021e0 <fRspAnalyze_SELRAT_WP77+0xe8>
				PRINT_INFO("Modem Access Technology is LTE and UMTS Only")
 80021dc:	490a      	ldr	r1, [pc, #40]	; (8002208 <fRspAnalyze_SELRAT_WP77+0x110>)
 80021de:	e7c2      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
			else if(rat == 12)
 80021e0:	2d0c      	cmp	r5, #12
 80021e2:	d1e3      	bne.n	80021ac <fRspAnalyze_SELRAT_WP77+0xb4>
				PRINT_INFO("Modem Access Technology is LTE and GSM Only")
 80021e4:	4659      	mov	r1, fp
 80021e6:	e7be      	b.n	8002166 <fRspAnalyze_SELRAT_WP77+0x6e>
 80021e8:	08021c23 	.word	0x08021c23
 80021ec:	20008ef8 	.word	0x20008ef8
 80021f0:	08021c4a 	.word	0x08021c4a
 80021f4:	08021c87 	.word	0x08021c87
 80021f8:	08021cb6 	.word	0x08021cb6
 80021fc:	08021ce0 	.word	0x08021ce0
 8002200:	08021d14 	.word	0x08021d14
 8002204:	08021d3f 	.word	0x08021d3f
 8002208:	08021d72 	.word	0x08021d72
 800220c:	2000015c 	.word	0x2000015c
 8002210:	08021da6 	.word	0x08021da6

08002214 <fRspAnalyze_BAND_WP77>:
{
 8002214:	b570      	push	{r4, r5, r6, lr}
PRINT_DBG("enter fRspAnalyze_BAND_WP77()")
 8002216:	4d14      	ldr	r5, [pc, #80]	; (8002268 <fRspAnalyze_BAND_WP77+0x54>)
 8002218:	4914      	ldr	r1, [pc, #80]	; (800226c <fRspAnalyze_BAND_WP77+0x58>)
 800221a:	4628      	mov	r0, r5
{
 800221c:	461c      	mov	r4, r3
 800221e:	4616      	mov	r6, r2
PRINT_DBG("enter fRspAnalyze_BAND_WP77()")
 8002220:	f01a feba 	bl	801cf98 <strcpy>
 8002224:	4628      	mov	r0, r5
 8002226:	f015 fe85 	bl	8017f34 <crs_strlen>
 800222a:	462a      	mov	r2, r5
 800222c:	b283      	uxth	r3, r0
 800222e:	2102      	movs	r1, #2
 8002230:	2001      	movs	r0, #1
 8002232:	f015 febd 	bl	8017fb0 <traceIF_itmPrint>
 8002236:	4628      	mov	r0, r5
 8002238:	f015 fe7c 	bl	8017f34 <crs_strlen>
 800223c:	462a      	mov	r2, r5
 800223e:	b283      	uxth	r3, r0
 8002240:	2102      	movs	r1, #2
 8002242:	2001      	movs	r0, #1
 8002244:	f016 f8da 	bl	80183fc <traceIF_uartPrint>
PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 8002248:	8962      	ldrh	r2, [r4, #10]
 800224a:	89e3      	ldrh	r3, [r4, #14]
 800224c:	2101      	movs	r1, #1
 800224e:	4432      	add	r2, r6
 8002250:	4608      	mov	r0, r1
 8002252:	f016 f8f1 	bl	8018438 <traceIF_BufCharPrint>
(void) memcpy((void *)(WP77_shared.mode_and_bands_config.band),(const void *) & (p_msg_in->buffer[element_infos->str_start_idx]),
 8002256:	8961      	ldrh	r1, [r4, #10]
 8002258:	89e2      	ldrh	r2, [r4, #14]
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <fRspAnalyze_BAND_WP77+0x5c>)
 800225c:	4431      	add	r1, r6
 800225e:	f01a fded 	bl	801ce3c <memcpy>
}
 8002262:	2010      	movs	r0, #16
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	bf00      	nop
 8002268:	20008ef8 	.word	0x20008ef8
 800226c:	08021dd9 	.word	0x08021dd9
 8002270:	2000016c 	.word	0x2000016c

08002274 <fRspAnalyze_SELACQ_WP77>:
{
 8002274:	b570      	push	{r4, r5, r6, lr}
PRINT_DBG("enter fRspAnalyze_SELACQ_WP77()")
 8002276:	4c11      	ldr	r4, [pc, #68]	; (80022bc <fRspAnalyze_SELACQ_WP77+0x48>)
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <fRspAnalyze_SELACQ_WP77+0x4c>)
 800227a:	4620      	mov	r0, r4
{
 800227c:	461d      	mov	r5, r3
 800227e:	4616      	mov	r6, r2
PRINT_DBG("enter fRspAnalyze_SELACQ_WP77()")
 8002280:	f01a fe8a 	bl	801cf98 <strcpy>
 8002284:	4620      	mov	r0, r4
 8002286:	f015 fe55 	bl	8017f34 <crs_strlen>
 800228a:	4622      	mov	r2, r4
 800228c:	b283      	uxth	r3, r0
 800228e:	2102      	movs	r1, #2
 8002290:	2001      	movs	r0, #1
 8002292:	f015 fe8d 	bl	8017fb0 <traceIF_itmPrint>
 8002296:	4620      	mov	r0, r4
 8002298:	f015 fe4c 	bl	8017f34 <crs_strlen>
 800229c:	4622      	mov	r2, r4
 800229e:	b283      	uxth	r3, r0
 80022a0:	2102      	movs	r1, #2
 80022a2:	2001      	movs	r0, #1
 80022a4:	f016 f8aa 	bl	80183fc <traceIF_uartPrint>
PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 80022a8:	896a      	ldrh	r2, [r5, #10]
 80022aa:	89eb      	ldrh	r3, [r5, #14]
 80022ac:	2101      	movs	r1, #1
 80022ae:	4608      	mov	r0, r1
 80022b0:	4432      	add	r2, r6
 80022b2:	f016 f8c1 	bl	8018438 <traceIF_BufCharPrint>
}
 80022b6:	2010      	movs	r0, #16
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	bf00      	nop
 80022bc:	20008ef8 	.word	0x20008ef8
 80022c0:	08021dfe 	.word	0x08021dfe

080022c4 <fRspAnalyze_GSTATUS_WP77>:
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
	PRINT_API("enter fRspAnalyze_GSTATUS_WP77()")
 80022c6:	4c11      	ldr	r4, [pc, #68]	; (800230c <fRspAnalyze_GSTATUS_WP77+0x48>)
 80022c8:	4911      	ldr	r1, [pc, #68]	; (8002310 <fRspAnalyze_GSTATUS_WP77+0x4c>)
 80022ca:	4620      	mov	r0, r4
{
 80022cc:	461d      	mov	r5, r3
 80022ce:	4616      	mov	r6, r2
	PRINT_API("enter fRspAnalyze_GSTATUS_WP77()")
 80022d0:	f01a fe62 	bl	801cf98 <strcpy>
 80022d4:	4620      	mov	r0, r4
 80022d6:	f015 fe2d 	bl	8017f34 <crs_strlen>
 80022da:	4622      	mov	r2, r4
 80022dc:	b283      	uxth	r3, r0
 80022de:	2104      	movs	r1, #4
 80022e0:	2001      	movs	r0, #1
 80022e2:	f015 fe65 	bl	8017fb0 <traceIF_itmPrint>
 80022e6:	4620      	mov	r0, r4
 80022e8:	f015 fe24 	bl	8017f34 <crs_strlen>
 80022ec:	4622      	mov	r2, r4
 80022ee:	b283      	uxth	r3, r0
 80022f0:	2104      	movs	r1, #4
 80022f2:	2001      	movs	r0, #1
 80022f4:	f016 f882 	bl	80183fc <traceIF_uartPrint>
	PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 80022f8:	896a      	ldrh	r2, [r5, #10]
 80022fa:	89eb      	ldrh	r3, [r5, #14]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4608      	mov	r0, r1
 8002300:	4432      	add	r2, r6
 8002302:	f016 f899 	bl	8018438 <traceIF_BufCharPrint>
}
 8002306:	2010      	movs	r0, #16
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	bf00      	nop
 800230c:	20008ef8 	.word	0x20008ef8
 8002310:	08021e25 	.word	0x08021e25

08002314 <fRspAnalyze_CCID_WP77>:
{
 8002314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002318:	4680      	mov	r8, r0
 800231a:	4689      	mov	r9, r1
  PRINT_API("enter fRspAnalyze_QCCID_WP77()")
 800231c:	482e      	ldr	r0, [pc, #184]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
 800231e:	492f      	ldr	r1, [pc, #188]	; (80023dc <fRspAnalyze_CCID_WP77+0xc8>)
    PRINT_DBG("ICCID:")
 8002320:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80023e0 <fRspAnalyze_CCID_WP77+0xcc>
 8002324:	4e2c      	ldr	r6, [pc, #176]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
{
 8002326:	4615      	mov	r5, r2
 8002328:	461c      	mov	r4, r3
  PRINT_API("enter fRspAnalyze_QCCID_WP77()")
 800232a:	f01a fe35 	bl	801cf98 <strcpy>
 800232e:	482a      	ldr	r0, [pc, #168]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
 8002330:	f015 fe00 	bl	8017f34 <crs_strlen>
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
 8002336:	b283      	uxth	r3, r0
 8002338:	2104      	movs	r1, #4
 800233a:	2001      	movs	r0, #1
 800233c:	f015 fe38 	bl	8017fb0 <traceIF_itmPrint>
 8002340:	4825      	ldr	r0, [pc, #148]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
 8002342:	f015 fdf7 	bl	8017f34 <crs_strlen>
 8002346:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <fRspAnalyze_CCID_WP77+0xc4>)
 8002348:	b283      	uxth	r3, r0
 800234a:	2104      	movs	r1, #4
 800234c:	2001      	movs	r0, #1
 800234e:	f016 f855 	bl	80183fc <traceIF_uartPrint>
  START_PARAM_LOOP()
 8002352:	4622      	mov	r2, r4
 8002354:	4629      	mov	r1, r5
 8002356:	4640      	mov	r0, r8
 8002358:	f005 ff08 	bl	800816c <atcc_extractElement>
 800235c:	89e3      	ldrh	r3, [r4, #14]
 800235e:	4607      	mov	r7, r0
 8002360:	b393      	cbz	r3, 80023c8 <fRspAnalyze_CCID_WP77+0xb4>
  if (element_infos->param_rank == 2U)
 8002362:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 8002366:	f1bb 0f02 	cmp.w	fp, #2
 800236a:	d132      	bne.n	80023d2 <fRspAnalyze_CCID_WP77+0xbe>
    PRINT_DBG("ICCID:")
 800236c:	4651      	mov	r1, sl
 800236e:	4630      	mov	r0, r6
 8002370:	f01a fe12 	bl	801cf98 <strcpy>
 8002374:	4630      	mov	r0, r6
 8002376:	f015 fddd 	bl	8017f34 <crs_strlen>
 800237a:	4632      	mov	r2, r6
 800237c:	b283      	uxth	r3, r0
 800237e:	4659      	mov	r1, fp
 8002380:	2001      	movs	r0, #1
 8002382:	f015 fe15 	bl	8017fb0 <traceIF_itmPrint>
 8002386:	4630      	mov	r0, r6
 8002388:	f015 fdd4 	bl	8017f34 <crs_strlen>
 800238c:	4632      	mov	r2, r6
 800238e:	b283      	uxth	r3, r0
 8002390:	4659      	mov	r1, fp
 8002392:	2001      	movs	r0, #1
 8002394:	f016 f832 	bl	80183fc <traceIF_uartPrint>
    PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 8002398:	8962      	ldrh	r2, [r4, #10]
 800239a:	89e3      	ldrh	r3, [r4, #14]
 800239c:	2101      	movs	r1, #1
 800239e:	442a      	add	r2, r5
 80023a0:	4608      	mov	r0, r1
 80023a2:	f016 f849 	bl	8018438 <traceIF_BufCharPrint>
    uint16_t src_idx = element_infos->str_start_idx;
 80023a6:	8963      	ldrh	r3, [r4, #10]
    size_t ccid_size = element_infos->str_size;
 80023a8:	89e2      	ldrh	r2, [r4, #14]
    if ((p_msg_in->buffer[src_idx] == 0x20U) &&
 80023aa:	5ce9      	ldrb	r1, [r5, r3]
 80023ac:	2920      	cmp	r1, #32
 80023ae:	d105      	bne.n	80023bc <fRspAnalyze_CCID_WP77+0xa8>
 80023b0:	2a01      	cmp	r2, #1
      src_idx += 1U;
 80023b2:	bf82      	ittt	hi
 80023b4:	3301      	addhi	r3, #1
      ccid_size -= 1U;
 80023b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
      src_idx += 1U;
 80023ba:	b29b      	uxthhi	r3, r3
    (void) memcpy((void *) & (p_modem_ctxt->SID_ctxt.device_info->u.iccid),
 80023bc:	f8d9 05dc 	ldr.w	r0, [r9, #1500]	; 0x5dc
 80023c0:	18e9      	adds	r1, r5, r3
 80023c2:	3002      	adds	r0, #2
 80023c4:	f01a fd3a 	bl	801ce3c <memcpy>
  END_PARAM_LOOP()
 80023c8:	2f01      	cmp	r7, #1
 80023ca:	d0c2      	beq.n	8002352 <fRspAnalyze_CCID_WP77+0x3e>
}
 80023cc:	2008      	movs	r0, #8
 80023ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __NOP(); /* to avoid warning */
 80023d2:	bf00      	nop
 80023d4:	e7f8      	b.n	80023c8 <fRspAnalyze_CCID_WP77+0xb4>
 80023d6:	bf00      	nop
 80023d8:	20008ef8 	.word	0x20008ef8
 80023dc:	08021e51 	.word	0x08021e51
 80023e0:	08021e7b 	.word	0x08021e7b

080023e4 <fRspAnalyze_KCELL_WP77>:
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
    PRINT_API("enter fRspAnalyze_KCELL_HL78()")
 80023e6:	4c11      	ldr	r4, [pc, #68]	; (800242c <fRspAnalyze_KCELL_WP77+0x48>)
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <fRspAnalyze_KCELL_WP77+0x4c>)
 80023ea:	4620      	mov	r0, r4
{
 80023ec:	461d      	mov	r5, r3
 80023ee:	4616      	mov	r6, r2
    PRINT_API("enter fRspAnalyze_KCELL_HL78()")
 80023f0:	f01a fdd2 	bl	801cf98 <strcpy>
 80023f4:	4620      	mov	r0, r4
 80023f6:	f015 fd9d 	bl	8017f34 <crs_strlen>
 80023fa:	4622      	mov	r2, r4
 80023fc:	b283      	uxth	r3, r0
 80023fe:	2104      	movs	r1, #4
 8002400:	2001      	movs	r0, #1
 8002402:	f015 fdd5 	bl	8017fb0 <traceIF_itmPrint>
 8002406:	4620      	mov	r0, r4
 8002408:	f015 fd94 	bl	8017f34 <crs_strlen>
 800240c:	4622      	mov	r2, r4
 800240e:	b283      	uxth	r3, r0
 8002410:	2104      	movs	r1, #4
 8002412:	2001      	movs	r0, #1
 8002414:	f015 fff2 	bl	80183fc <traceIF_uartPrint>
	PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 8002418:	896a      	ldrh	r2, [r5, #10]
 800241a:	89eb      	ldrh	r3, [r5, #14]
 800241c:	2101      	movs	r1, #1
 800241e:	4608      	mov	r0, r1
 8002420:	4432      	add	r2, r6
 8002422:	f016 f809 	bl	8018438 <traceIF_BufCharPrint>
}
 8002426:	2010      	movs	r0, #16
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	bf00      	nop
 800242c:	20008ef8 	.word	0x20008ef8
 8002430:	08021e89 	.word	0x08021e89

08002434 <fRspAnalyze_WDSI_WP77>:
{
 8002434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PRINT_API("enter fRspAnalyze_WDSI_WP77()")
 8002438:	492e      	ldr	r1, [pc, #184]	; (80024f4 <fRspAnalyze_WDSI_WP77+0xc0>)
		  WP77_shared.avms_connection_status = avms_connection_status;
 800243a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80024fc <fRspAnalyze_WDSI_WP77+0xc8>
		  PRINT_INFO(" Air Vantage connection Status changed to %d",avms_connection_status)
 800243e:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8002500 <fRspAnalyze_WDSI_WP77+0xcc>
 8002442:	4e2d      	ldr	r6, [pc, #180]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
{
 8002444:	4681      	mov	r9, r0
  PRINT_API("enter fRspAnalyze_WDSI_WP77()")
 8002446:	482c      	ldr	r0, [pc, #176]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
{
 8002448:	4615      	mov	r5, r2
 800244a:	461c      	mov	r4, r3
  PRINT_API("enter fRspAnalyze_WDSI_WP77()")
 800244c:	f01a fda4 	bl	801cf98 <strcpy>
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
 8002452:	f015 fd6f 	bl	8017f34 <crs_strlen>
 8002456:	4a28      	ldr	r2, [pc, #160]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
 8002458:	b283      	uxth	r3, r0
 800245a:	2104      	movs	r1, #4
 800245c:	2001      	movs	r0, #1
 800245e:	f015 fda7 	bl	8017fb0 <traceIF_itmPrint>
 8002462:	4825      	ldr	r0, [pc, #148]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
 8002464:	f015 fd66 	bl	8017f34 <crs_strlen>
 8002468:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <fRspAnalyze_WDSI_WP77+0xc4>)
 800246a:	b283      	uxth	r3, r0
 800246c:	2104      	movs	r1, #4
 800246e:	2001      	movs	r0, #1
 8002470:	f015 ffc4 	bl	80183fc <traceIF_uartPrint>
  uint32_t wdsi_urc = 0;
 8002474:	2700      	movs	r7, #0
  START_PARAM_LOOP()
 8002476:	4629      	mov	r1, r5
 8002478:	4622      	mov	r2, r4
 800247a:	4648      	mov	r0, r9
 800247c:	f005 fe76 	bl	800816c <atcc_extractElement>
 8002480:	89e1      	ldrh	r1, [r4, #14]
 8002482:	4680      	mov	r8, r0
 8002484:	b139      	cbz	r1, 8002496 <fRspAnalyze_WDSI_WP77+0x62>
  if (element_infos->param_rank == 2U)
 8002486:	8923      	ldrh	r3, [r4, #8]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d10a      	bne.n	80024a2 <fRspAnalyze_WDSI_WP77+0x6e>
	  wdsi_urc= ATutil_convertStringToInt(&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 800248c:	8960      	ldrh	r0, [r4, #10]
 800248e:	4428      	add	r0, r5
 8002490:	f00c f93e 	bl	800e710 <ATutil_convertStringToInt>
 8002494:	4607      	mov	r7, r0
  END_PARAM_LOOP()
 8002496:	f1b8 0f01 	cmp.w	r8, #1
 800249a:	d0ec      	beq.n	8002476 <fRspAnalyze_WDSI_WP77+0x42>
}
 800249c:	2010      	movs	r0, #16
 800249e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (element_infos->param_rank == 3U)
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d123      	bne.n	80024ee <fRspAnalyze_WDSI_WP77+0xba>
	  if(wdsi_urc == 23)
 80024a6:	2f17      	cmp	r7, #23
 80024a8:	d1f5      	bne.n	8002496 <fRspAnalyze_WDSI_WP77+0x62>
		  avms_connection_status = ATutil_convertStringToInt(&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 80024aa:	8960      	ldrh	r0, [r4, #10]
 80024ac:	4428      	add	r0, r5
 80024ae:	f00c f92f 	bl	800e710 <ATutil_convertStringToInt>
		  WP77_shared.avms_connection_status = avms_connection_status;
 80024b2:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
		  PRINT_INFO(" Air Vantage connection Status changed to %d",avms_connection_status)
 80024bc:	4659      	mov	r1, fp
 80024be:	4630      	mov	r0, r6
		  WP77_shared.avms_connection_status = avms_connection_status;
 80024c0:	f88a 30b2 	strb.w	r3, [sl, #178]	; 0xb2
		  PRINT_INFO(" Air Vantage connection Status changed to %d",avms_connection_status)
 80024c4:	f01a fcf8 	bl	801ceb8 <sprintf>
 80024c8:	4630      	mov	r0, r6
 80024ca:	f015 fd33 	bl	8017f34 <crs_strlen>
 80024ce:	2101      	movs	r1, #1
 80024d0:	b283      	uxth	r3, r0
 80024d2:	4632      	mov	r2, r6
 80024d4:	4608      	mov	r0, r1
 80024d6:	f015 fd6b 	bl	8017fb0 <traceIF_itmPrint>
 80024da:	4630      	mov	r0, r6
 80024dc:	f015 fd2a 	bl	8017f34 <crs_strlen>
 80024e0:	2101      	movs	r1, #1
 80024e2:	b283      	uxth	r3, r0
 80024e4:	4632      	mov	r2, r6
 80024e6:	4608      	mov	r0, r1
 80024e8:	f015 ff88 	bl	80183fc <traceIF_uartPrint>
 80024ec:	e7d3      	b.n	8002496 <fRspAnalyze_WDSI_WP77+0x62>
    __NOP(); /* to avoid warning */
 80024ee:	bf00      	nop
 80024f0:	e7d1      	b.n	8002496 <fRspAnalyze_WDSI_WP77+0x62>
 80024f2:	bf00      	nop
 80024f4:	08021eb3 	.word	0x08021eb3
 80024f8:	20008ef8 	.word	0x20008ef8
 80024fc:	2000015c 	.word	0x2000015c
 8002500:	08021edc 	.word	0x08021edc

08002504 <orp_storage_get_msg>:
{
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (orp_msg_urc.free == 0U)
 8002506:	4c2f      	ldr	r4, [pc, #188]	; (80025c4 <orp_storage_get_msg+0xc0>)
 8002508:	7825      	ldrb	r5, [r4, #0]
{
 800250a:	4607      	mov	r7, r0
 800250c:	4616      	mov	r6, r2
  if (orp_msg_urc.free == 0U)
 800250e:	2d00      	cmp	r5, #0
 8002510:	d141      	bne.n	8002596 <orp_storage_get_msg+0x92>
    if (orp_msg_urc.size <= max_size)
 8002512:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8002516:	428b      	cmp	r3, r1
 8002518:	d822      	bhi.n	8002560 <orp_storage_get_msg+0x5c>
     PRINT_INFO("ORP URC message: copy to client buffer")
 800251a:	492b      	ldr	r1, [pc, #172]	; (80025c8 <orp_storage_get_msg+0xc4>)
 800251c:	482b      	ldr	r0, [pc, #172]	; (80025cc <orp_storage_get_msg+0xc8>)
 800251e:	f01a fd3b 	bl	801cf98 <strcpy>
 8002522:	482a      	ldr	r0, [pc, #168]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002524:	f015 fd06 	bl	8017f34 <crs_strlen>
 8002528:	2101      	movs	r1, #1
 800252a:	b283      	uxth	r3, r0
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <orp_storage_get_msg+0xc8>)
 800252e:	4608      	mov	r0, r1
 8002530:	f015 fd3e 	bl	8017fb0 <traceIF_itmPrint>
 8002534:	4825      	ldr	r0, [pc, #148]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002536:	f015 fcfd 	bl	8017f34 <crs_strlen>
 800253a:	2101      	movs	r1, #1
 800253c:	b283      	uxth	r3, r0
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002540:	4608      	mov	r0, r1
 8002542:	f015 ff5b 	bl	80183fc <traceIF_uartPrint>
     (void) memcpy((void *)pbuf, (void *)orp_msg_urc.data, orp_msg_urc.size);
 8002546:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 800254a:	1c61      	adds	r1, r4, #1
 800254c:	4638      	mov	r0, r7
 800254e:	f01a fc75 	bl	801ce3c <memcpy>
     *size = orp_msg_urc.size;
 8002552:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8002556:	6033      	str	r3, [r6, #0]
     orp_msg_urc.free = 1U;
 8002558:	2301      	movs	r3, #1
 800255a:	7023      	strb	r3, [r4, #0]
     status = 0;
 800255c:	4628      	mov	r0, r5
}
 800255e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PRINT_INFO("ORP URC message: ERROR, client buffer size is too small")
 8002560:	491b      	ldr	r1, [pc, #108]	; (80025d0 <orp_storage_get_msg+0xcc>)
 8002562:	481a      	ldr	r0, [pc, #104]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002564:	f01a fd18 	bl	801cf98 <strcpy>
 8002568:	4818      	ldr	r0, [pc, #96]	; (80025cc <orp_storage_get_msg+0xc8>)
 800256a:	f015 fce3 	bl	8017f34 <crs_strlen>
 800256e:	2101      	movs	r1, #1
 8002570:	b283      	uxth	r3, r0
 8002572:	4a16      	ldr	r2, [pc, #88]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002574:	4608      	mov	r0, r1
 8002576:	f015 fd1b 	bl	8017fb0 <traceIF_itmPrint>
 800257a:	4814      	ldr	r0, [pc, #80]	; (80025cc <orp_storage_get_msg+0xc8>)
 800257c:	f015 fcda 	bl	8017f34 <crs_strlen>
 8002580:	2101      	movs	r1, #1
 8002582:	b283      	uxth	r3, r0
 8002584:	4a11      	ldr	r2, [pc, #68]	; (80025cc <orp_storage_get_msg+0xc8>)
 8002586:	4608      	mov	r0, r1
 8002588:	f015 ff38 	bl	80183fc <traceIF_uartPrint>
      orp_msg_urc.free = 1U; /* free message to avoid blocking cases */
 800258c:	2301      	movs	r3, #1
 800258e:	7023      	strb	r3, [r4, #0]
    status = -1;
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	e7e3      	b.n	800255e <orp_storage_get_msg+0x5a>
    PRINT_INFO("ORP URC message: ERROR, no msg available")
 8002596:	490f      	ldr	r1, [pc, #60]	; (80025d4 <orp_storage_get_msg+0xd0>)
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <orp_storage_get_msg+0xc8>)
 800259a:	f01a fcfd 	bl	801cf98 <strcpy>
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <orp_storage_get_msg+0xc8>)
 80025a0:	f015 fcc8 	bl	8017f34 <crs_strlen>
 80025a4:	2101      	movs	r1, #1
 80025a6:	b283      	uxth	r3, r0
 80025a8:	4a08      	ldr	r2, [pc, #32]	; (80025cc <orp_storage_get_msg+0xc8>)
 80025aa:	4608      	mov	r0, r1
 80025ac:	f015 fd00 	bl	8017fb0 <traceIF_itmPrint>
 80025b0:	4806      	ldr	r0, [pc, #24]	; (80025cc <orp_storage_get_msg+0xc8>)
 80025b2:	f015 fcbf 	bl	8017f34 <crs_strlen>
 80025b6:	2101      	movs	r1, #1
 80025b8:	b283      	uxth	r3, r0
 80025ba:	4a04      	ldr	r2, [pc, #16]	; (80025cc <orp_storage_get_msg+0xc8>)
 80025bc:	4608      	mov	r0, r1
 80025be:	f015 ff1d 	bl	80183fc <traceIF_uartPrint>
 80025c2:	e7e5      	b.n	8002590 <orp_storage_get_msg+0x8c>
 80025c4:	2000005c 	.word	0x2000005c
 80025c8:	08021f10 	.word	0x08021f10
 80025cc:	20008ef8 	.word	0x20008ef8
 80025d0:	08021f3e 	.word	0x08021f3e
 80025d4:	08021f7d 	.word	0x08021f7d

080025d8 <fCmdBuild_ORP>:
{
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4604      	mov	r4, r0
 80025dc:	460d      	mov	r5, r1
  PRINT_INFO("enter fCmdBuild_ORP()")
 80025de:	4826      	ldr	r0, [pc, #152]	; (8002678 <fCmdBuild_ORP+0xa0>)
 80025e0:	4926      	ldr	r1, [pc, #152]	; (800267c <fCmdBuild_ORP+0xa4>)
 80025e2:	f01a fcd9 	bl	801cf98 <strcpy>
 80025e6:	4824      	ldr	r0, [pc, #144]	; (8002678 <fCmdBuild_ORP+0xa0>)
 80025e8:	f015 fca4 	bl	8017f34 <crs_strlen>
 80025ec:	2101      	movs	r1, #1
 80025ee:	b283      	uxth	r3, r0
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <fCmdBuild_ORP+0xa0>)
 80025f2:	4608      	mov	r0, r1
 80025f4:	f015 fcdc 	bl	8017fb0 <traceIF_itmPrint>
 80025f8:	481f      	ldr	r0, [pc, #124]	; (8002678 <fCmdBuild_ORP+0xa0>)
 80025fa:	f015 fc9b 	bl	8017f34 <crs_strlen>
 80025fe:	2101      	movs	r1, #1
 8002600:	b283      	uxth	r3, r0
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <fCmdBuild_ORP+0xa0>)
 8002604:	4608      	mov	r0, r1
 8002606:	f015 fef9 	bl	80183fc <traceIF_uartPrint>
  if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD)
 800260a:	8923      	ldrh	r3, [r4, #8]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d131      	bne.n	8002674 <fCmdBuild_ORP+0x9c>
    PRINT_INFO("COM DATA transaction_type = 0x%x",
 8002610:	f895 2744 	ldrb.w	r2, [r5, #1860]	; 0x744
 8002614:	491a      	ldr	r1, [pc, #104]	; (8002680 <fCmdBuild_ORP+0xa8>)
 8002616:	4818      	ldr	r0, [pc, #96]	; (8002678 <fCmdBuild_ORP+0xa0>)
 8002618:	f01a fc4e 	bl	801ceb8 <sprintf>
 800261c:	4816      	ldr	r0, [pc, #88]	; (8002678 <fCmdBuild_ORP+0xa0>)
 800261e:	f015 fc89 	bl	8017f34 <crs_strlen>
 8002622:	2101      	movs	r1, #1
 8002624:	b283      	uxth	r3, r0
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <fCmdBuild_ORP+0xa0>)
 8002628:	4608      	mov	r0, r1
 800262a:	f015 fcc1 	bl	8017fb0 <traceIF_itmPrint>
 800262e:	4812      	ldr	r0, [pc, #72]	; (8002678 <fCmdBuild_ORP+0xa0>)
 8002630:	f015 fc80 	bl	8017f34 <crs_strlen>
 8002634:	2101      	movs	r1, #1
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <fCmdBuild_ORP+0xa0>)
 8002638:	b283      	uxth	r3, r0
 800263a:	4608      	mov	r0, r1
 800263c:	f015 fede 	bl	80183fc <traceIF_uartPrint>
    (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->current_atcmd.params, "\"");
 8002640:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002644:	490f      	ldr	r1, [pc, #60]	; (8002684 <fCmdBuild_ORP+0xac>)
 8002646:	4618      	mov	r0, r3
 8002648:	f01a fca6 	bl	801cf98 <strcpy>
    uint16_t cmd_params_size = (uint16_t) strlen((CRC_CHAR_t *)&p_atp_ctxt->current_atcmd.params);
 800264c:	f7fd fde2 	bl	8000214 <strlen>
 8002650:	b286      	uxth	r6, r0
    (void) memcpy((void *) &p_atp_ctxt->current_atcmd.params[cmd_params_size ],
 8002652:	4633      	mov	r3, r6
 8002654:	3330      	adds	r3, #48	; 0x30
 8002656:	18e0      	adds	r0, r4, r3
 8002658:	f8d5 274c 	ldr.w	r2, [r5, #1868]	; 0x74c
 800265c:	f8d5 1748 	ldr.w	r1, [r5, #1864]	; 0x748
 8002660:	f01a fbec 	bl	801ce3c <memcpy>
    cmd_params_size += p_mdm_com->txBuffer.buffer_size;
 8002664:	f8d5 074c 	ldr.w	r0, [r5, #1868]	; 0x74c
 8002668:	4406      	add	r6, r0
    (void) memcpy((void *) &p_atp_ctxt->current_atcmd.params[cmd_params_size],
 800266a:	fa14 f486 	uxtah	r4, r4, r6
 800266e:	2322      	movs	r3, #34	; 0x22
 8002670:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8002674:	2000      	movs	r0, #0
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	20008ef8 	.word	0x20008ef8
 800267c:	08021fad 	.word	0x08021fad
 8002680:	08021fca 	.word	0x08021fca
 8002684:	08029b2e 	.word	0x08029b2e

08002688 <fRspAnalyze_ORP>:
{
 8002688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	b085      	sub	sp, #20
 800268e:	4682      	mov	sl, r0
 8002690:	af00      	add	r7, sp, #0
  PRINT_INFO("enter fRspAnalyze_ORP()")
 8002692:	4880      	ldr	r0, [pc, #512]	; (8002894 <fRspAnalyze_ORP+0x20c>)
{
 8002694:	460e      	mov	r6, r1
  PRINT_INFO("enter fRspAnalyze_ORP()")
 8002696:	4980      	ldr	r1, [pc, #512]	; (8002898 <fRspAnalyze_ORP+0x210>)
{
 8002698:	4690      	mov	r8, r2
 800269a:	461c      	mov	r4, r3
  PRINT_INFO("enter fRspAnalyze_ORP()")
 800269c:	f01a fc7c 	bl	801cf98 <strcpy>
 80026a0:	487c      	ldr	r0, [pc, #496]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 80026a2:	f015 fc47 	bl	8017f34 <crs_strlen>
 80026a6:	2101      	movs	r1, #1
 80026a8:	b283      	uxth	r3, r0
 80026aa:	4a7a      	ldr	r2, [pc, #488]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 80026ac:	4608      	mov	r0, r1
 80026ae:	f015 fc7f 	bl	8017fb0 <traceIF_itmPrint>
 80026b2:	4878      	ldr	r0, [pc, #480]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 80026b4:	f015 fc3e 	bl	8017f34 <crs_strlen>
 80026b8:	2101      	movs	r1, #1
 80026ba:	b283      	uxth	r3, r0
 80026bc:	4a75      	ldr	r2, [pc, #468]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 80026be:	4608      	mov	r0, r1
 80026c0:	f015 fe9c 	bl	80183fc <traceIF_uartPrint>
  if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT_ORP)
 80026c4:	f8da 301c 	ldr.w	r3, [sl, #28]
 80026c8:	2b47      	cmp	r3, #71	; 0x47
 80026ca:	f040 80ef 	bne.w	80028ac <fRspAnalyze_ORP+0x224>
        PRINT_INFO("ORP message received")
 80026ce:	4d71      	ldr	r5, [pc, #452]	; (8002894 <fRspAnalyze_ORP+0x20c>)
  at_action_rsp_t retval = ATACTION_RSP_IGNORED;
 80026d0:	f04f 0910 	mov.w	r9, #16
    START_PARAM_LOOP()
 80026d4:	4641      	mov	r1, r8
 80026d6:	4622      	mov	r2, r4
 80026d8:	4650      	mov	r0, sl
 80026da:	f005 fd47 	bl	800816c <atcc_extractElement>
 80026de:	89e1      	ldrh	r1, [r4, #14]
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	2900      	cmp	r1, #0
 80026e4:	d04d      	beq.n	8002782 <fRspAnalyze_ORP+0xfa>
    if (element_infos->param_rank == 2U)
 80026e6:	8923      	ldrh	r3, [r4, #8]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d14a      	bne.n	8002782 <fRspAnalyze_ORP+0xfa>
      if (orpMsgIsAnURC(&p_msg_in->buffer[element_infos->str_start_idx],  element_infos->str_size))
 80026ec:	8960      	ldrh	r0, [r4, #10]
 80026ee:	4440      	add	r0, r8
 80026f0:	f7ff fb06 	bl	8001d00 <orpMsgIsAnURC>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d048      	beq.n	800278a <fRspAnalyze_ORP+0x102>
        PRINT_INFO("ORP urc received, crossing case")
 80026f8:	4968      	ldr	r1, [pc, #416]	; (800289c <fRspAnalyze_ORP+0x214>)
 80026fa:	4628      	mov	r0, r5
 80026fc:	f01a fc4c 	bl	801cf98 <strcpy>
 8002700:	4628      	mov	r0, r5
 8002702:	f015 fc17 	bl	8017f34 <crs_strlen>
 8002706:	2101      	movs	r1, #1
 8002708:	b283      	uxth	r3, r0
 800270a:	462a      	mov	r2, r5
 800270c:	4608      	mov	r0, r1
 800270e:	f015 fc4f 	bl	8017fb0 <traceIF_itmPrint>
 8002712:	4628      	mov	r0, r5
 8002714:	f015 fc0e 	bl	8017f34 <crs_strlen>
 8002718:	2101      	movs	r1, #1
 800271a:	b283      	uxth	r3, r0
 800271c:	462a      	mov	r2, r5
 800271e:	4608      	mov	r0, r1
 8002720:	f015 fe6c 	bl	80183fc <traceIF_uartPrint>
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 8002724:	f8d6 3750 	ldr.w	r3, [r6, #1872]	; 0x750
        strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 8002728:	89e2      	ldrh	r2, [r4, #14]
 800272a:	607a      	str	r2, [r7, #4]
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 800272c:	3307      	adds	r3, #7
 800272e:	f023 0307 	bic.w	r3, r3, #7
      {
 8002732:	46eb      	mov	fp, sp
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 8002734:	ebad 0d03 	sub.w	sp, sp, r3
        strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 8002738:	8963      	ldrh	r3, [r4, #10]
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	eb08 0103 	add.w	r1, r8, r3
 8002740:	4668      	mov	r0, sp
 8002742:	f01a fc43 	bl	801cfcc <strncpy>
        strFound = strchr(rcvBuf,',');
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	4668      	mov	r0, sp
 800274a:	f01a fc18 	bl	801cf7e <strchr>
        if(strFound)
 800274e:	b148      	cbz	r0, 8002764 <fRspAnalyze_ORP+0xdc>
        	int loc = strFound - rcvBuf + 1;
 8002750:	466b      	mov	r3, sp
 8002752:	1ac0      	subs	r0, r0, r3
        	element_infos->str_size = element_infos->str_size - loc;
 8002754:	687a      	ldr	r2, [r7, #4]
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 8002756:	68bb      	ldr	r3, [r7, #8]
        	int loc = strFound - rcvBuf + 1;
 8002758:	3001      	adds	r0, #1
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 800275a:	fa13 f380 	uxtah	r3, r3, r0
        	element_infos->str_size = element_infos->str_size - loc;
 800275e:	1a12      	subs	r2, r2, r0
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 8002760:	8163      	strh	r3, [r4, #10]
        	element_infos->str_size = element_infos->str_size - loc;
 8002762:	81e2      	strh	r2, [r4, #14]
        if (orp_storage_add_msg(&p_msg_in->buffer[element_infos->str_start_idx],  element_infos->str_size) == 0)
 8002764:	8960      	ldrh	r0, [r4, #10]
 8002766:	89e1      	ldrh	r1, [r4, #14]
 8002768:	4440      	add	r0, r8
 800276a:	f7ff fa71 	bl	8001c50 <orp_storage_add_msg>
 800276e:	2800      	cmp	r0, #0
 8002770:	d16f      	bne.n	8002852 <fRspAnalyze_ORP+0x1ca>
          p_modem_ctxt->persist.urc_avail_commdm_event_count++;
 8002772:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8002776:	3301      	adds	r3, #1
 8002778:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
          retval = ATACTION_RSP_URC_FORWARDED;
 800277c:	f04f 0940 	mov.w	r9, #64	; 0x40
 8002780:	46dd      	mov	sp, fp
    END_PARAM_LOOP()
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d17f      	bne.n	8002888 <fRspAnalyze_ORP+0x200>
 8002788:	e7a4      	b.n	80026d4 <fRspAnalyze_ORP+0x4c>
        PRINT_INFO("ORP message received")
 800278a:	4945      	ldr	r1, [pc, #276]	; (80028a0 <fRspAnalyze_ORP+0x218>)
 800278c:	4628      	mov	r0, r5
 800278e:	f01a fc03 	bl	801cf98 <strcpy>
 8002792:	4628      	mov	r0, r5
 8002794:	f015 fbce 	bl	8017f34 <crs_strlen>
 8002798:	2101      	movs	r1, #1
 800279a:	b283      	uxth	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4608      	mov	r0, r1
 80027a0:	f015 fc06 	bl	8017fb0 <traceIF_itmPrint>
 80027a4:	4628      	mov	r0, r5
 80027a6:	f015 fbc5 	bl	8017f34 <crs_strlen>
 80027aa:	2101      	movs	r1, #1
 80027ac:	b283      	uxth	r3, r0
 80027ae:	462a      	mov	r2, r5
 80027b0:	4608      	mov	r0, r1
 80027b2:	f015 fe23 	bl	80183fc <traceIF_uartPrint>
        if (p_mdm_com->transaction_type == CS_COMMDM_TRANSACTION)
 80027b6:	f896 3744 	ldrb.w	r3, [r6, #1860]	; 0x744
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e1      	bne.n	8002782 <fRspAnalyze_ORP+0xfa>
          char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 80027be:	f8d6 3750 	ldr.w	r3, [r6, #1872]	; 0x750
          strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 80027c2:	8961      	ldrh	r1, [r4, #10]
 80027c4:	89e2      	ldrh	r2, [r4, #14]
          char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 80027c6:	3307      	adds	r3, #7
 80027c8:	f023 0307 	bic.w	r3, r3, #7
        {
 80027cc:	46eb      	mov	fp, sp
          char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 80027ce:	ebad 0d03 	sub.w	sp, sp, r3
          strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 80027d2:	4441      	add	r1, r8
 80027d4:	4668      	mov	r0, sp
 80027d6:	f01a fbf9 	bl	801cfcc <strncpy>
          PRINT_INFO("Original Received string is :%s",rcvBuf)
 80027da:	4932      	ldr	r1, [pc, #200]	; (80028a4 <fRspAnalyze_ORP+0x21c>)
 80027dc:	466a      	mov	r2, sp
 80027de:	4628      	mov	r0, r5
 80027e0:	f01a fb6a 	bl	801ceb8 <sprintf>
 80027e4:	4628      	mov	r0, r5
 80027e6:	f015 fba5 	bl	8017f34 <crs_strlen>
 80027ea:	2101      	movs	r1, #1
 80027ec:	b283      	uxth	r3, r0
 80027ee:	462a      	mov	r2, r5
 80027f0:	4608      	mov	r0, r1
 80027f2:	f015 fbdd 	bl	8017fb0 <traceIF_itmPrint>
 80027f6:	4628      	mov	r0, r5
 80027f8:	f015 fb9c 	bl	8017f34 <crs_strlen>
 80027fc:	2101      	movs	r1, #1
 80027fe:	b283      	uxth	r3, r0
 8002800:	462a      	mov	r2, r5
 8002802:	4608      	mov	r0, r1
 8002804:	f015 fdfa 	bl	80183fc <traceIF_uartPrint>
          PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 8002808:	8962      	ldrh	r2, [r4, #10]
 800280a:	89e3      	ldrh	r3, [r4, #14]
 800280c:	2101      	movs	r1, #1
 800280e:	4442      	add	r2, r8
 8002810:	4608      	mov	r0, r1
 8002812:	f015 fe11 	bl	8018438 <traceIF_BufCharPrint>
          strFound = strchr(rcvBuf,'D');
 8002816:	2144      	movs	r1, #68	; 0x44
 8002818:	4668      	mov	r0, sp
 800281a:	f01a fbb0 	bl	801cf7e <strchr>
          if(strFound)
 800281e:	89e2      	ldrh	r2, [r4, #14]
 8002820:	b130      	cbz	r0, 8002830 <fRspAnalyze_ORP+0x1a8>
        	int loc = strFound - rcvBuf + 1;
 8002822:	466b      	mov	r3, sp
 8002824:	1ac0      	subs	r0, r0, r3
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 8002826:	8963      	ldrh	r3, [r4, #10]
        	int loc = strFound - rcvBuf + 1;
 8002828:	3001      	adds	r0, #1
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 800282a:	4403      	add	r3, r0
 800282c:	8163      	strh	r3, [r4, #10]
        	bufSize = element_infos->str_size - loc;
 800282e:	1a12      	subs	r2, r2, r0
          if (bufSize <= p_mdm_com->rxBuffer.max_buffer_size)
 8002830:	f8d6 3750 	ldr.w	r3, [r6, #1872]	; 0x750
 8002834:	4293      	cmp	r3, r2
 8002836:	d30e      	bcc.n	8002856 <fRspAnalyze_ORP+0x1ce>
                        (const void *)&p_msg_in->buffer[element_infos->str_start_idx],
 8002838:	8961      	ldrh	r1, [r4, #10]
            (void) memcpy((void *) p_mdm_com->rxBuffer.p_buffer,
 800283a:	f8d6 0754 	ldr.w	r0, [r6, #1876]	; 0x754
 800283e:	60ba      	str	r2, [r7, #8]
 8002840:	4441      	add	r1, r8
 8002842:	f01a fafb 	bl	801ce3c <memcpy>
            p_mdm_com->rxBuffer.buffer_size = bufSize;
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f8c6 2758 	str.w	r2, [r6, #1880]	; 0x758
            p_mdm_com->errorCode = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c6 375c 	str.w	r3, [r6, #1884]	; 0x75c
 8002852:	46dd      	mov	sp, fp
 8002854:	e795      	b.n	8002782 <fRspAnalyze_ORP+0xfa>
            PRINT_INFO("ORP message received, size error !")
 8002856:	4914      	ldr	r1, [pc, #80]	; (80028a8 <fRspAnalyze_ORP+0x220>)
 8002858:	480e      	ldr	r0, [pc, #56]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 800285a:	f01a fb9d 	bl	801cf98 <strcpy>
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 8002860:	f015 fb68 	bl	8017f34 <crs_strlen>
 8002864:	2101      	movs	r1, #1
 8002866:	b283      	uxth	r3, r0
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 800286a:	4608      	mov	r0, r1
 800286c:	f015 fba0 	bl	8017fb0 <traceIF_itmPrint>
 8002870:	4808      	ldr	r0, [pc, #32]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 8002872:	f015 fb5f 	bl	8017f34 <crs_strlen>
 8002876:	2101      	movs	r1, #1
 8002878:	b283      	uxth	r3, r0
 800287a:	4a06      	ldr	r2, [pc, #24]	; (8002894 <fRspAnalyze_ORP+0x20c>)
 800287c:	4608      	mov	r0, r1
 800287e:	f015 fdbd 	bl	80183fc <traceIF_uartPrint>
            retval = ATACTION_RSP_ERROR;
 8002882:	f04f 0904 	mov.w	r9, #4
 8002886:	46dd      	mov	sp, fp
}
 8002888:	4648      	mov	r0, r9
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002892:	bf00      	nop
 8002894:	20008ef8 	.word	0x20008ef8
 8002898:	08021ff2 	.word	0x08021ff2
 800289c:	08022011 	.word	0x08022011
 80028a0:	08022038 	.word	0x08022038
 80028a4:	08022054 	.word	0x08022054
 80028a8:	0802207b 	.word	0x0802207b
    PRINT_INFO("possible ORP urc detected")
 80028ac:	495f      	ldr	r1, [pc, #380]	; (8002a2c <fRspAnalyze_ORP+0x3a4>)
 80028ae:	4860      	ldr	r0, [pc, #384]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
        PRINT_INFO("this ORP is not an URC")
 80028b0:	4d5f      	ldr	r5, [pc, #380]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
    PRINT_INFO("possible ORP urc detected")
 80028b2:	f01a fb71 	bl	801cf98 <strcpy>
 80028b6:	485e      	ldr	r0, [pc, #376]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
 80028b8:	f015 fb3c 	bl	8017f34 <crs_strlen>
 80028bc:	2101      	movs	r1, #1
 80028be:	b283      	uxth	r3, r0
 80028c0:	4a5b      	ldr	r2, [pc, #364]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
 80028c2:	4608      	mov	r0, r1
 80028c4:	f015 fb74 	bl	8017fb0 <traceIF_itmPrint>
 80028c8:	4859      	ldr	r0, [pc, #356]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
 80028ca:	f015 fb33 	bl	8017f34 <crs_strlen>
 80028ce:	2101      	movs	r1, #1
 80028d0:	b283      	uxth	r3, r0
 80028d2:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <fRspAnalyze_ORP+0x3a8>)
 80028d4:	4608      	mov	r0, r1
 80028d6:	f015 fd91 	bl	80183fc <traceIF_uartPrint>
  at_action_rsp_t retval = ATACTION_RSP_IGNORED;
 80028da:	f04f 0910 	mov.w	r9, #16
    START_PARAM_LOOP()
 80028de:	4641      	mov	r1, r8
 80028e0:	4622      	mov	r2, r4
 80028e2:	4650      	mov	r0, sl
 80028e4:	f005 fc42 	bl	800816c <atcc_extractElement>
 80028e8:	89e1      	ldrh	r1, [r4, #14]
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	2900      	cmp	r1, #0
 80028ee:	f000 8081 	beq.w	80029f4 <fRspAnalyze_ORP+0x36c>
    if (element_infos->param_rank == 2U)
 80028f2:	8923      	ldrh	r3, [r4, #8]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d17d      	bne.n	80029f4 <fRspAnalyze_ORP+0x36c>
      if (orpMsgIsAnURC(&p_msg_in->buffer[element_infos->str_start_idx],  element_infos->str_size))
 80028f8:	8960      	ldrh	r0, [r4, #10]
 80028fa:	4440      	add	r0, r8
 80028fc:	f7ff fa00 	bl	8001d00 <orpMsgIsAnURC>
 8002900:	2800      	cmp	r0, #0
 8002902:	d07c      	beq.n	80029fe <fRspAnalyze_ORP+0x376>
        PRINT_INFO("ORP urc confirmed")
 8002904:	494b      	ldr	r1, [pc, #300]	; (8002a34 <fRspAnalyze_ORP+0x3ac>)
 8002906:	4628      	mov	r0, r5
 8002908:	f01a fb46 	bl	801cf98 <strcpy>
 800290c:	4628      	mov	r0, r5
 800290e:	f015 fb11 	bl	8017f34 <crs_strlen>
 8002912:	2101      	movs	r1, #1
 8002914:	b283      	uxth	r3, r0
 8002916:	462a      	mov	r2, r5
 8002918:	4608      	mov	r0, r1
 800291a:	f015 fb49 	bl	8017fb0 <traceIF_itmPrint>
 800291e:	4628      	mov	r0, r5
 8002920:	f015 fb08 	bl	8017f34 <crs_strlen>
 8002924:	2101      	movs	r1, #1
 8002926:	b283      	uxth	r3, r0
 8002928:	462a      	mov	r2, r5
 800292a:	4608      	mov	r0, r1
 800292c:	f015 fd66 	bl	80183fc <traceIF_uartPrint>
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 8002930:	f8d6 3750 	ldr.w	r3, [r6, #1872]	; 0x750
        strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 8002934:	8961      	ldrh	r1, [r4, #10]
 8002936:	89e2      	ldrh	r2, [r4, #14]
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 8002938:	3307      	adds	r3, #7
 800293a:	f023 0307 	bic.w	r3, r3, #7
      {
 800293e:	46eb      	mov	fp, sp
        char rcvBuf[p_mdm_com->rxBuffer.max_buffer_size];
 8002940:	ebad 0d03 	sub.w	sp, sp, r3
        strncpy(rcvBuf,(const char*)&p_msg_in->buffer[element_infos->str_start_idx],element_infos->str_size);
 8002944:	4441      	add	r1, r8
 8002946:	4668      	mov	r0, sp
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	f01a fb3f 	bl	801cfcc <strncpy>
        PRINT_INFO("Original Received string is %s",(char *)&p_msg_in->buffer[element_infos->str_start_idx])
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	4628      	mov	r0, r5
 8002952:	460a      	mov	r2, r1
 8002954:	4938      	ldr	r1, [pc, #224]	; (8002a38 <fRspAnalyze_ORP+0x3b0>)
 8002956:	f01a faaf 	bl	801ceb8 <sprintf>
 800295a:	4628      	mov	r0, r5
 800295c:	f015 faea 	bl	8017f34 <crs_strlen>
 8002960:	2101      	movs	r1, #1
 8002962:	b283      	uxth	r3, r0
 8002964:	462a      	mov	r2, r5
 8002966:	4608      	mov	r0, r1
 8002968:	f015 fb22 	bl	8017fb0 <traceIF_itmPrint>
 800296c:	4628      	mov	r0, r5
 800296e:	f015 fae1 	bl	8017f34 <crs_strlen>
 8002972:	2101      	movs	r1, #1
 8002974:	b283      	uxth	r3, r0
 8002976:	462a      	mov	r2, r5
 8002978:	4608      	mov	r0, r1
 800297a:	f015 fd3f 	bl	80183fc <traceIF_uartPrint>
        PRINT_BUF((const uint8_t *)&p_msg_in->buffer[element_infos->str_start_idx], element_infos->str_size)
 800297e:	8962      	ldrh	r2, [r4, #10]
 8002980:	89e3      	ldrh	r3, [r4, #14]
 8002982:	2101      	movs	r1, #1
 8002984:	4608      	mov	r0, r1
 8002986:	4442      	add	r2, r8
 8002988:	f015 fd56 	bl	8018438 <traceIF_BufCharPrint>
        PRINT_INFO("Received string is %s",rcvBuf)
 800298c:	492b      	ldr	r1, [pc, #172]	; (8002a3c <fRspAnalyze_ORP+0x3b4>)
 800298e:	466a      	mov	r2, sp
 8002990:	4628      	mov	r0, r5
 8002992:	f01a fa91 	bl	801ceb8 <sprintf>
 8002996:	4628      	mov	r0, r5
 8002998:	f015 facc 	bl	8017f34 <crs_strlen>
 800299c:	2101      	movs	r1, #1
 800299e:	b283      	uxth	r3, r0
 80029a0:	462a      	mov	r2, r5
 80029a2:	4608      	mov	r0, r1
 80029a4:	f015 fb04 	bl	8017fb0 <traceIF_itmPrint>
 80029a8:	4628      	mov	r0, r5
 80029aa:	f015 fac3 	bl	8017f34 <crs_strlen>
 80029ae:	2101      	movs	r1, #1
 80029b0:	b283      	uxth	r3, r0
 80029b2:	462a      	mov	r2, r5
 80029b4:	4608      	mov	r0, r1
 80029b6:	f015 fd21 	bl	80183fc <traceIF_uartPrint>
        strFound = strchr(rcvBuf,',');
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	4668      	mov	r0, sp
 80029be:	f01a fade 	bl	801cf7e <strchr>
        if(strFound)
 80029c2:	b148      	cbz	r0, 80029d8 <fRspAnalyze_ORP+0x350>
        	int loc = strFound - rcvBuf + 1;
 80029c4:	466b      	mov	r3, sp
 80029c6:	1ac0      	subs	r0, r0, r3
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 80029c8:	8963      	ldrh	r3, [r4, #10]
        	int loc = strFound - rcvBuf + 1;
 80029ca:	3001      	adds	r0, #1
        	element_infos->str_start_idx = element_infos->str_start_idx + loc;
 80029cc:	fa13 f380 	uxtah	r3, r3, r0
 80029d0:	8163      	strh	r3, [r4, #10]
        	element_infos->str_size = element_infos->str_size - loc;
 80029d2:	89e3      	ldrh	r3, [r4, #14]
 80029d4:	1a18      	subs	r0, r3, r0
 80029d6:	81e0      	strh	r0, [r4, #14]
        if (orp_storage_add_msg(&p_msg_in->buffer[element_infos->str_start_idx],  element_infos->str_size) == 0)
 80029d8:	8960      	ldrh	r0, [r4, #10]
 80029da:	89e1      	ldrh	r1, [r4, #14]
 80029dc:	4440      	add	r0, r8
 80029de:	f7ff f937 	bl	8001c50 <orp_storage_add_msg>
 80029e2:	b930      	cbnz	r0, 80029f2 <fRspAnalyze_ORP+0x36a>
          p_modem_ctxt->persist.urc_avail_commdm_event_count++;
 80029e4:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
          retval = ATACTION_RSP_URC_FORWARDED;
 80029ee:	f04f 0940 	mov.w	r9, #64	; 0x40
 80029f2:	46dd      	mov	sp, fp
    END_PARAM_LOOP()
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f47f af46 	bne.w	8002888 <fRspAnalyze_ORP+0x200>
 80029fc:	e76f      	b.n	80028de <fRspAnalyze_ORP+0x256>
        PRINT_INFO("this ORP is not an URC")
 80029fe:	4910      	ldr	r1, [pc, #64]	; (8002a40 <fRspAnalyze_ORP+0x3b8>)
 8002a00:	4628      	mov	r0, r5
 8002a02:	f01a fac9 	bl	801cf98 <strcpy>
 8002a06:	4628      	mov	r0, r5
 8002a08:	f015 fa94 	bl	8017f34 <crs_strlen>
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	b283      	uxth	r3, r0
 8002a10:	462a      	mov	r2, r5
 8002a12:	4608      	mov	r0, r1
 8002a14:	f015 facc 	bl	8017fb0 <traceIF_itmPrint>
 8002a18:	4628      	mov	r0, r5
 8002a1a:	f015 fa8b 	bl	8017f34 <crs_strlen>
 8002a1e:	2101      	movs	r1, #1
 8002a20:	b283      	uxth	r3, r0
 8002a22:	462a      	mov	r2, r5
 8002a24:	4608      	mov	r0, r1
 8002a26:	f015 fce9 	bl	80183fc <traceIF_uartPrint>
 8002a2a:	e7e3      	b.n	80029f4 <fRspAnalyze_ORP+0x36c>
 8002a2c:	080220a5 	.word	0x080220a5
 8002a30:	20008ef8 	.word	0x20008ef8
 8002a34:	080220c6 	.word	0x080220c6
 8002a38:	080220df 	.word	0x080220df
 8002a3c:	08022105 	.word	0x08022105
 8002a40:	08022122 	.word	0x08022122

08002a44 <WP77_modem_reset.constprop.0>:
}

/* WP77 modem reset function
*  call common reset function and then do actions specific to this modem
*/
static void WP77_modem_reset(atcustom_modem_context_t *p_modem_ctxt)
 8002a44:	b510      	push	{r4, lr}
{
  PRINT_API("enter WP77_modem_reset")
 8002a46:	4c0e      	ldr	r4, [pc, #56]	; (8002a80 <WP77_modem_reset.constprop.0+0x3c>)
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <WP77_modem_reset.constprop.0+0x40>)
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f01a faa4 	bl	801cf98 <strcpy>
 8002a50:	4620      	mov	r0, r4
 8002a52:	f015 fa6f 	bl	8017f34 <crs_strlen>
 8002a56:	4622      	mov	r2, r4
 8002a58:	b283      	uxth	r3, r0
 8002a5a:	2104      	movs	r1, #4
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f015 faa7 	bl	8017fb0 <traceIF_itmPrint>
 8002a62:	4620      	mov	r0, r4
 8002a64:	f015 fa66 	bl	8017f34 <crs_strlen>
 8002a68:	4622      	mov	r2, r4
 8002a6a:	b283      	uxth	r3, r0
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f015 fcc4 	bl	80183fc <traceIF_uartPrint>

  /* common reset function (reset all contexts except SID) */
  atcm_modem_reset(p_modem_ctxt);

  /* modem specific actions if any */
}
 8002a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  atcm_modem_reset(p_modem_ctxt);
 8002a78:	4803      	ldr	r0, [pc, #12]	; (8002a88 <WP77_modem_reset.constprop.0+0x44>)
 8002a7a:	f006 be13 	b.w	80096a4 <atcm_modem_reset>
 8002a7e:	bf00      	nop
 8002a80:	20008ef8 	.word	0x20008ef8
 8002a84:	08022140 	.word	0x08022140
 8002a88:	20001008 	.word	0x20001008

08002a8c <ATCustom_WP77_init>:
{
 8002a8c:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter WP77_modem_init")
 8002a8e:	4c13      	ldr	r4, [pc, #76]	; (8002adc <ATCustom_WP77_init+0x50>)
 8002a90:	4913      	ldr	r1, [pc, #76]	; (8002ae0 <ATCustom_WP77_init+0x54>)
{
 8002a92:	4605      	mov	r5, r0
  PRINT_API("enter WP77_modem_init")
 8002a94:	4620      	mov	r0, r4
 8002a96:	f01a fa7f 	bl	801cf98 <strcpy>
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f015 fa4a 	bl	8017f34 <crs_strlen>
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	b283      	uxth	r3, r0
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f015 fa82 	bl	8017fb0 <traceIF_itmPrint>
 8002aac:	4620      	mov	r0, r4
 8002aae:	f015 fa41 	bl	8017f34 <crs_strlen>
 8002ab2:	4622      	mov	r2, r4
  atcm_modem_init(p_modem_ctxt);
 8002ab4:	4c0b      	ldr	r4, [pc, #44]	; (8002ae4 <ATCustom_WP77_init+0x58>)
  PRINT_API("enter WP77_modem_init")
 8002ab6:	b283      	uxth	r3, r0
 8002ab8:	2104      	movs	r1, #4
 8002aba:	2001      	movs	r0, #1
 8002abc:	f015 fc9e 	bl	80183fc <traceIF_uartPrint>
  atcm_modem_init(p_modem_ctxt);
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f006 fdbf 	bl	8009644 <atcm_modem_init>
  WP77_ctxt.modem_LUT_size = SIZE_ATCMD_WP77_LUT;
 8002ac6:	2344      	movs	r3, #68	; 0x44
 8002ac8:	6023      	str	r3, [r4, #0]
  WP77_ctxt.p_modem_LUT = (const atcustom_LUT_t *)ATCMD_WP77_LUT;
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <ATCustom_WP77_init+0x5c>)
 8002acc:	6063      	str	r3, [r4, #4]
  (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->endstr, "\r");
 8002ace:	f205 6074 	addw	r0, r5, #1652	; 0x674
 8002ad2:	4906      	ldr	r1, [pc, #24]	; (8002aec <ATCustom_WP77_init+0x60>)
}
 8002ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  (void) sprintf((CRC_CHAR_t *)p_atp_ctxt->endstr, "\r");
 8002ad8:	f01a ba5e 	b.w	801cf98 <strcpy>
 8002adc:	20008ef8 	.word	0x20008ef8
 8002ae0:	08022162 	.word	0x08022162
 8002ae4:	20001008 	.word	0x20001008
 8002ae8:	080226fc 	.word	0x080226fc
 8002aec:	080246ff 	.word	0x080246ff

08002af0 <ATCustom_WP77_checkEndOfMsgCallback>:
{
 8002af0:	b538      	push	{r3, r4, r5, lr}
  if (WP77_ctxt.state_SyntaxAutomaton == WAITING_FOR_INIT_CR)
 8002af2:	4a4a      	ldr	r2, [pc, #296]	; (8002c1c <ATCustom_WP77_checkEndOfMsgCallback+0x12c>)
 8002af4:	7a13      	ldrb	r3, [r2, #8]
 8002af6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
{
 8002afa:	4605      	mov	r5, r0
 8002afc:	4614      	mov	r4, r2
  if (WP77_ctxt.state_SyntaxAutomaton == WAITING_FOR_INIT_CR)
 8002afe:	d104      	bne.n	8002b0a <ATCustom_WP77_checkEndOfMsgCallback+0x1a>
    if ((AT_CHAR_t)('\r') == rxChar)
 8002b00:	2d0d      	cmp	r5, #13
 8002b02:	d13e      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
      WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_LF;
 8002b04:	2303      	movs	r3, #3
        WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_CR;
 8002b06:	7223      	strb	r3, [r4, #8]
  if (last_char == 0U)
 8002b08:	e03b      	b.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
  else if (WP77_ctxt.state_SyntaxAutomaton == WAITING_FOR_LF)
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <ATCustom_WP77_checkEndOfMsgCallback+0x2e>
    if ((AT_CHAR_t)('\n') == rxChar)
 8002b0e:	280a      	cmp	r0, #10
 8002b10:	d137      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
      QIRD_Counter = 0U;
 8002b12:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <ATCustom_WP77_checkEndOfMsgCallback+0x130>)
      WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_FIRST_CHAR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	7210      	strb	r0, [r2, #8]
      QIRD_Counter = 0U;
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
}
 8002b1c:	bd38      	pop	{r3, r4, r5, pc}
  else if (WP77_ctxt.state_SyntaxAutomaton == WAITING_FOR_FIRST_CHAR)
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d162      	bne.n	8002be8 <ATCustom_WP77_checkEndOfMsgCallback+0xf8>
    if (WP77_ctxt.socket_ctxt.socket_RxData_state == SocketRxDataState_waiting_header)
 8002b22:	f892 37e2 	ldrb.w	r3, [r2, #2018]	; 0x7e2
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d114      	bne.n	8002b54 <ATCustom_WP77_checkEndOfMsgCallback+0x64>
      if (rxChar == QIRD_string[QIRD_Counter])
 8002b2a:	4a3d      	ldr	r2, [pc, #244]	; (8002c20 <ATCustom_WP77_checkEndOfMsgCallback+0x130>)
 8002b2c:	493d      	ldr	r1, [pc, #244]	; (8002c24 <ATCustom_WP77_checkEndOfMsgCallback+0x134>)
 8002b2e:	7813      	ldrb	r3, [r2, #0]
 8002b30:	5cc9      	ldrb	r1, [r1, r3]
 8002b32:	4281      	cmp	r1, r0
 8002b34:	d10e      	bne.n	8002b54 <ATCustom_WP77_checkEndOfMsgCallback+0x64>
        QIRD_Counter++;
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2db      	uxtb	r3, r3
        if (QIRD_Counter == (uint8_t) strlen((const CRC_CHAR_t *)QIRD_string))
 8002b3a:	2b05      	cmp	r3, #5
        QIRD_Counter++;
 8002b3c:	7013      	strb	r3, [r2, #0]
        if (QIRD_Counter == (uint8_t) strlen((const CRC_CHAR_t *)QIRD_string))
 8002b3e:	d109      	bne.n	8002b54 <ATCustom_WP77_checkEndOfMsgCallback+0x64>
  (void) memset((void *)WP77_shared.QIURC_dnsgip_param.hostIPaddr, 0, MAX_SIZE_IPADDR);
}*/

static void socketHeaderRX_reset(void)
{
  (void) memset((void *)SocketHeaderDataRx_Buf, 0, 4U);
 8002b40:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <ATCustom_WP77_checkEndOfMsgCallback+0x138>)
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
  SocketHeaderDataRx_Cpt = 0U;
 8002b46:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <ATCustom_WP77_checkEndOfMsgCallback+0x13c>)
 8002b48:	7013      	strb	r3, [r2, #0]
  SocketHeaderDataRx_Cpt_Complete = 0U;
 8002b4a:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <ATCustom_WP77_checkEndOfMsgCallback+0x140>)
 8002b4c:	7013      	strb	r3, [r2, #0]
          WP77_ctxt.socket_ctxt.socket_RxData_state = SocketRxDataState_receiving_header;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f884 37e2 	strb.w	r3, [r4, #2018]	; 0x7e2
    if (WP77_ctxt.socket_ctxt.socket_RxData_state == SocketRxDataState_receiving_header)
 8002b54:	f894 37e2 	ldrb.w	r3, [r4, #2018]	; 0x7e2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d133      	bne.n	8002bc4 <ATCustom_WP77_checkEndOfMsgCallback+0xd4>
      if ((AT_CHAR_t)('\r') == rxChar)
 8002b5c:	2d0d      	cmp	r5, #13
 8002b5e:	d11a      	bne.n	8002b96 <ATCustom_WP77_checkEndOfMsgCallback+0xa6>
    SocketHeaderDataRx_Cpt++;
  }
}
static uint16_t SocketHeaderRX_getSize(void)
{
  uint16_t retval = (uint16_t) ATutil_convertStringToInt((uint8_t *)SocketHeaderDataRx_Buf,
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <ATCustom_WP77_checkEndOfMsgCallback+0x13c>)
 8002b62:	4831      	ldr	r0, [pc, #196]	; (8002c28 <ATCustom_WP77_checkEndOfMsgCallback+0x138>)
 8002b64:	7819      	ldrb	r1, [r3, #0]
 8002b66:	f00b fdd3 	bl	800e710 <ATutil_convertStringToInt>
        if (WP77_ctxt.socket_ctxt.socket_rx_expected_buf_size != size_from_header)
 8002b6a:	f8d4 37d4 	ldr.w	r3, [r4, #2004]	; 0x7d4
 8002b6e:	b280      	uxth	r0, r0
 8002b70:	4298      	cmp	r0, r3
        WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_LF;
 8002b72:	f04f 0303 	mov.w	r3, #3
          WP77_ctxt.socket_ctxt.socket_rx_expected_buf_size = size_from_header;
 8002b76:	bf18      	it	ne
 8002b78:	f8c4 07d4 	strne.w	r0, [r4, #2004]	; 0x7d4
        WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_LF;
 8002b7c:	7223      	strb	r3, [r4, #8]
        WP77_ctxt.socket_ctxt.socket_RxData_state = SocketRxDataState_receiving_data;
 8002b7e:	f884 37e2 	strb.w	r3, [r4, #2018]	; 0x7e2
    if (WP77_ctxt.socket_ctxt.socket_send_state != SocketSendState_No_Activity)
 8002b82:	f894 07e0 	ldrb.w	r0, [r4, #2016]	; 0x7e0
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d0c8      	beq.n	8002b1c <ATCustom_WP77_checkEndOfMsgCallback+0x2c>
      switch (WP77_ctxt.socket_ctxt.socket_send_state)
 8002b8a:	2801      	cmp	r0, #1
 8002b8c:	d034      	beq.n	8002bf8 <ATCustom_WP77_checkEndOfMsgCallback+0x108>
 8002b8e:	2802      	cmp	r0, #2
 8002b90:	d038      	beq.n	8002c04 <ATCustom_WP77_checkEndOfMsgCallback+0x114>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e7c2      	b.n	8002b1c <ATCustom_WP77_checkEndOfMsgCallback+0x2c>
      else if ((rxChar >= (AT_CHAR_t)('0')) && (rxChar <= (AT_CHAR_t)('9')))
 8002b96:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002b9a:	2b09      	cmp	r3, #9
 8002b9c:	d80c      	bhi.n	8002bb8 <ATCustom_WP77_checkEndOfMsgCallback+0xc8>
  if ((SocketHeaderDataRx_Cpt_Complete == 0U) && (SocketHeaderDataRx_Cpt < 4U))
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <ATCustom_WP77_checkEndOfMsgCallback+0x140>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ed      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <ATCustom_WP77_checkEndOfMsgCallback+0x13c>)
 8002ba8:	7813      	ldrb	r3, [r2, #0]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d8e9      	bhi.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
    (void) memcpy((void *)&SocketHeaderDataRx_Buf[SocketHeaderDataRx_Cpt], (void *)rxchar, sizeof(char));
 8002bae:	491e      	ldr	r1, [pc, #120]	; (8002c28 <ATCustom_WP77_checkEndOfMsgCallback+0x138>)
 8002bb0:	54cd      	strb	r5, [r1, r3]
    SocketHeaderDataRx_Cpt++;
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	7013      	strb	r3, [r2, #0]
 8002bb6:	e7e4      	b.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
      else if (rxChar == (AT_CHAR_t)(','))
 8002bb8:	2d2c      	cmp	r5, #44	; 0x2c
 8002bba:	d1e2      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
        SocketHeaderDataRx_Cpt_Complete = 1U;
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <ATCustom_WP77_checkEndOfMsgCallback+0x140>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
  if (last_char == 0U)
 8002bc2:	e7de      	b.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
    else if (WP77_ctxt.socket_ctxt.socket_RxData_state == SocketRxDataState_receiving_data)
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d19b      	bne.n	8002b00 <ATCustom_WP77_checkEndOfMsgCallback+0x10>
      WP77_ctxt.socket_ctxt.socket_rx_count_bytes_received++;
 8002bc8:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	; 0x7d8
      WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_SOCKET_DATA;
 8002bcc:	2204      	movs	r2, #4
      WP77_ctxt.socket_ctxt.socket_rx_count_bytes_received++;
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
      WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_SOCKET_DATA;
 8002bd4:	7222      	strb	r2, [r4, #8]
      if (WP77_ctxt.socket_ctxt.socket_rx_count_bytes_received == WP77_ctxt.socket_ctxt.socket_rx_expected_buf_size)
 8002bd6:	f8d4 27d4 	ldr.w	r2, [r4, #2004]	; 0x7d4
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d1d1      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
        WP77_ctxt.socket_ctxt.socket_RxData_state = SocketRxDataState_data_received;
 8002bde:	2304      	movs	r3, #4
 8002be0:	f884 37e2 	strb.w	r3, [r4, #2018]	; 0x7e2
        WP77_ctxt.state_SyntaxAutomaton = WAITING_FOR_CR;
 8002be4:	2302      	movs	r3, #2
 8002be6:	e78e      	b.n	8002b06 <ATCustom_WP77_checkEndOfMsgCallback+0x16>
  else if (WP77_ctxt.state_SyntaxAutomaton == WAITING_FOR_SOCKET_DATA)
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d1ca      	bne.n	8002b82 <ATCustom_WP77_checkEndOfMsgCallback+0x92>
    WP77_ctxt.socket_ctxt.socket_rx_count_bytes_received++;
 8002bec:	f8d2 37d8 	ldr.w	r3, [r2, #2008]	; 0x7d8
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f8c2 37d8 	str.w	r3, [r2, #2008]	; 0x7d8
    if (WP77_ctxt.socket_ctxt.socket_rx_count_bytes_received == WP77_ctxt.socket_ctxt.socket_rx_expected_buf_size)
 8002bf6:	e7ee      	b.n	8002bd6 <ATCustom_WP77_checkEndOfMsgCallback+0xe6>
          if ((AT_CHAR_t)('>') == rxChar)
 8002bf8:	2d3e      	cmp	r5, #62	; 0x3e
 8002bfa:	d1ca      	bne.n	8002b92 <ATCustom_WP77_checkEndOfMsgCallback+0xa2>
            WP77_ctxt.socket_ctxt.socket_send_state = SocketSendState_WaitingPrompt2nd_space;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f884 37e0 	strb.w	r3, [r4, #2016]	; 0x7e0
 8002c02:	e7c6      	b.n	8002b92 <ATCustom_WP77_checkEndOfMsgCallback+0xa2>
          if ((AT_CHAR_t)(' ') == rxChar)
 8002c04:	2d20      	cmp	r5, #32
 8002c06:	f04f 0001 	mov.w	r0, #1
 8002c0a:	d103      	bne.n	8002c14 <ATCustom_WP77_checkEndOfMsgCallback+0x124>
            WP77_ctxt.socket_ctxt.socket_send_state = SocketSendState_Prompt_Received;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f884 37e0 	strb.w	r3, [r4, #2016]	; 0x7e0
            last_char = 1U;
 8002c12:	e783      	b.n	8002b1c <ATCustom_WP77_checkEndOfMsgCallback+0x2c>
            WP77_ctxt.socket_ctxt.socket_send_state = SocketSendState_WaitingPrompt1st_greaterthan;
 8002c14:	f884 07e0 	strb.w	r0, [r4, #2016]	; 0x7e0
 8002c18:	e7bb      	b.n	8002b92 <ATCustom_WP77_checkEndOfMsgCallback+0xa2>
 8002c1a:	bf00      	nop
 8002c1c:	20001008 	.word	0x20001008
 8002c20:	20001000 	.word	0x20001000
 8002c24:	080233bc 	.word	0x080233bc
 8002c28:	20001001 	.word	0x20001001
 8002c2c:	20001005 	.word	0x20001005
 8002c30:	20001006 	.word	0x20001006

08002c34 <ATCustom_WP77_getCmd>:
{
 8002c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  at_msg_t curSID = p_atp_ctxt->current_SID;
 8002c38:	8a06      	ldrh	r6, [r0, #16]
  if (atcm_retrieve_SID_parameters(&WP77_ctxt, p_atp_ctxt) != ATSTATUS_OK)
 8002c3a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8002f30 <ATCustom_WP77_getCmd+0x2fc>
{
 8002c3e:	b08b      	sub	sp, #44	; 0x2c
  PRINT_API("enter ATCustom_WP77_getCmd() for SID %d", curSID)
 8002c40:	4632      	mov	r2, r6
  atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
 8002c42:	f100 0410 	add.w	r4, r0, #16
{
 8002c46:	4607      	mov	r7, r0
 8002c48:	4688      	mov	r8, r1
  PRINT_API("enter ATCustom_WP77_getCmd() for SID %d", curSID)
 8002c4a:	48b4      	ldr	r0, [pc, #720]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002c4c:	49b4      	ldr	r1, [pc, #720]	; (8002f20 <ATCustom_WP77_getCmd+0x2ec>)
 8002c4e:	f01a f933 	bl	801ceb8 <sprintf>
 8002c52:	48b2      	ldr	r0, [pc, #712]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002c54:	f015 f96e 	bl	8017f34 <crs_strlen>
 8002c58:	4ab0      	ldr	r2, [pc, #704]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002c5a:	b283      	uxth	r3, r0
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f015 f9a6 	bl	8017fb0 <traceIF_itmPrint>
 8002c64:	48ad      	ldr	r0, [pc, #692]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002c66:	f015 f965 	bl	8017f34 <crs_strlen>
 8002c6a:	4aac      	ldr	r2, [pc, #688]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002c6c:	b283      	uxth	r3, r0
 8002c6e:	2104      	movs	r1, #4
 8002c70:	2001      	movs	r0, #1
 8002c72:	f015 fbc3 	bl	80183fc <traceIF_uartPrint>
  if (atcm_retrieve_SID_parameters(&WP77_ctxt, p_atp_ctxt) != ATSTATUS_OK)
 8002c76:	4621      	mov	r1, r4
 8002c78:	4648      	mov	r0, r9
 8002c7a:	f006 fde3 	bl	8009844 <atcm_retrieve_SID_parameters>
 8002c7e:	464d      	mov	r5, r9
 8002c80:	2800      	cmp	r0, #0
 8002c82:	f040 80f0 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
  atcm_reset_CMD_context(&WP77_ctxt.CMD_ctxt);
 8002c86:	f509 60ec 	add.w	r0, r9, #1888	; 0x760
 8002c8a:	f006 fc7b 	bl	8009584 <atcm_reset_CMD_context>
  if (curSID == (at_msg_t) SID_CS_CHECK_CNX)
 8002c8e:	2e64      	cmp	r6, #100	; 0x64
 8002c90:	d10b      	bne.n	8002caa <ATCustom_WP77_getCmd+0x76>
    if CHECK_STEP((0U))
 8002c92:	7cbb      	ldrb	r3, [r7, #18]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 80e6 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT, FINAL_CMD);
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4648      	mov	r0, r9
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_ORP, FINAL_CMD);
 8002ca4:	f005 fcea 	bl	800867c <atcm_program_AT_CMD>
 8002ca8:	e04e      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
  else if (curSID == (at_msg_t) SID_CS_MODEM_CONFIG)
 8002caa:	2e82      	cmp	r6, #130	; 0x82
 8002cac:	d0f1      	beq.n	8002c92 <ATCustom_WP77_getCmd+0x5e>
  else if ((curSID == (at_msg_t) SID_CS_POWER_ON) ||
 8002cae:	2e65      	cmp	r6, #101	; 0x65
 8002cb0:	d00b      	beq.n	8002cca <ATCustom_WP77_getCmd+0x96>
 8002cb2:	2e80      	cmp	r6, #128	; 0x80
 8002cb4:	f040 80db 	bne.w	8002e6e <ATCustom_WP77_getCmd+0x23a>
        (WP77_ctxt.SID_ctxt.reset_type != CS_RESET_HW))
 8002cb8:	f899 26e0 	ldrb.w	r2, [r9, #1760]	; 0x6e0
    if ((curSID == (at_msg_t) SID_CS_RESET) &&
 8002cbc:	2a01      	cmp	r2, #1
 8002cbe:	d004      	beq.n	8002cca <ATCustom_WP77_getCmd+0x96>
      PRINT_ERR("Reset type (%d) not supported", WP77_ctxt.SID_ctxt.reset_type)
 8002cc0:	4998      	ldr	r1, [pc, #608]	; (8002f24 <ATCustom_WP77_getCmd+0x2f0>)
    PRINT_ERR("Error, invalid command ID %d", curSID)
 8002cc2:	4896      	ldr	r0, [pc, #600]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002cc4:	f01a f8f8 	bl	801ceb8 <sprintf>
 8002cc8:	e06c      	b.n	8002da4 <ATCustom_WP77_getCmd+0x170>
      if CHECK_STEP((0U))
 8002cca:	7cba      	ldrb	r2, [r7, #18]
 8002ccc:	b9ca      	cbnz	r2, 8002d02 <ATCustom_WP77_getCmd+0xce>
  WP77_shared.mode_and_bands_config.nw_scanseq = 0xFFFFFFFFU;
 8002cce:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <ATCustom_WP77_getCmd+0x2f4>)
        WP77_ctxt.persist.modem_at_ready = AT_FALSE;
 8002cd0:	f885 2518 	strb.w	r2, [r5, #1304]	; 0x518
  WP77_shared.mode_and_bands_config.nw_scanseq = 0xFFFFFFFFU;
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
        if (curSID == (at_msg_t) SID_CS_RESET)
 8002cd8:	2e80      	cmp	r6, #128	; 0x80
  WP77_shared.mode_and_bands_config.nw_scanmode = 0xFFFFFFFFU;
 8002cda:	e9c3 1100 	strd	r1, r1, [r3]
  WP77_shared.mode_and_bands_config.gsm_bands = 0xFFFFFFFFU;
 8002cde:	e9c3 1102 	strd	r1, r1, [r3, #8]
  WP77_shared.mode_and_bands_config.CatM1_bands_LsbPart = 0xFFFFFFFFU;
 8002ce2:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  WP77_shared.mode_and_bands_config.CatNB1_bands_LsbPart = 0xFFFFFFFFU;
 8002ce6:	e9c3 1113 	strd	r1, r1, [r3, #76]	; 0x4c
  WP77_shared.host_lp_state = HOST_LP_STATE_IDLE;
 8002cea:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
  WP77_shared.modem_lp_state = MDM_LP_STATE_IDLE;
 8002cee:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        if (curSID == (at_msg_t) SID_CS_RESET)
 8002cf2:	d101      	bne.n	8002cf8 <ATCustom_WP77_getCmd+0xc4>
          WP77_modem_reset(&WP77_ctxt);
 8002cf4:	f7ff fea6 	bl	8002a44 <WP77_modem_reset.constprop.0>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_IFC, INTERMEDIATE_CMD);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2332      	movs	r3, #50	; 0x32
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_ORP, FINAL_CMD);
 8002cfe:	2203      	movs	r2, #3
 8002d00:	e06a      	b.n	8002dd8 <ATCustom_WP77_getCmd+0x1a4>
      else if (CHECK_STEP_BETWEEN((1U), (WP77_MODEM_SYNCHRO_AT_MAX_RETRIES - 1U)))
 8002d02:	1e53      	subs	r3, r2, #1
 8002d04:	2b1c      	cmp	r3, #28
 8002d06:	d843      	bhi.n	8002d90 <ATCustom_WP77_getCmd+0x15c>
        if (WP77_ctxt.persist.modem_at_ready == AT_FALSE)
 8002d08:	f895 5518 	ldrb.w	r5, [r5, #1304]	; 0x518
 8002d0c:	bb25      	cbnz	r5, 8002d58 <ATCustom_WP77_getCmd+0x124>
          PRINT_DBG("test connection [try number %d] ", p_atp_ctxt->step)
 8002d0e:	4987      	ldr	r1, [pc, #540]	; (8002f2c <ATCustom_WP77_getCmd+0x2f8>)
 8002d10:	4882      	ldr	r0, [pc, #520]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d12:	f01a f8d1 	bl	801ceb8 <sprintf>
 8002d16:	4881      	ldr	r0, [pc, #516]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d18:	f015 f90c 	bl	8017f34 <crs_strlen>
 8002d1c:	4a7f      	ldr	r2, [pc, #508]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d1e:	b283      	uxth	r3, r0
 8002d20:	2102      	movs	r1, #2
 8002d22:	2001      	movs	r0, #1
 8002d24:	f015 f944 	bl	8017fb0 <traceIF_itmPrint>
 8002d28:	487c      	ldr	r0, [pc, #496]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d2a:	f015 f903 	bl	8017f34 <crs_strlen>
 8002d2e:	4a7b      	ldr	r2, [pc, #492]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d30:	b283      	uxth	r3, r0
 8002d32:	2102      	movs	r1, #2
 8002d34:	2001      	movs	r0, #1
 8002d36:	f015 fb61 	bl	80183fc <traceIF_uartPrint>
          atcm_program_AT_CMD_ANSWER_OPTIONAL(&WP77_ctxt, p_atp_ctxt,
 8002d3a:	487d      	ldr	r0, [pc, #500]	; (8002f30 <ATCustom_WP77_getCmd+0x2fc>)
 8002d3c:	9500      	str	r5, [sp, #0]
 8002d3e:	462b      	mov	r3, r5
 8002d40:	2204      	movs	r2, #4
 8002d42:	4621      	mov	r1, r4
 8002d44:	f005 fcac 	bl	80086a0 <atcm_program_AT_CMD_ANSWER_OPTIONAL>
    retval = atcm_modem_build_cmd(&WP77_ctxt, p_atp_ctxt, p_ATcmdTimeout);
 8002d48:	4879      	ldr	r0, [pc, #484]	; (8002f30 <ATCustom_WP77_getCmd+0x2fc>)
 8002d4a:	4642      	mov	r2, r8
 8002d4c:	4621      	mov	r1, r4
}
 8002d4e:	b00b      	add	sp, #44	; 0x2c
 8002d50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    retval = atcm_modem_build_cmd(&WP77_ctxt, p_atp_ctxt, p_ATcmdTimeout);
 8002d54:	f005 bd04 	b.w	8008760 <atcm_modem_build_cmd>
          PRINT_INFO("modem synchro established, proceed to normal power sequence")
 8002d58:	4976      	ldr	r1, [pc, #472]	; (8002f34 <ATCustom_WP77_getCmd+0x300>)
 8002d5a:	4870      	ldr	r0, [pc, #448]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d5c:	f01a f91c 	bl	801cf98 <strcpy>
 8002d60:	486e      	ldr	r0, [pc, #440]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d62:	f015 f8e7 	bl	8017f34 <crs_strlen>
 8002d66:	2101      	movs	r1, #1
 8002d68:	b283      	uxth	r3, r0
 8002d6a:	4a6c      	ldr	r2, [pc, #432]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	f015 f91f 	bl	8017fb0 <traceIF_itmPrint>
 8002d72:	486a      	ldr	r0, [pc, #424]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d74:	f015 f8de 	bl	8017f34 <crs_strlen>
 8002d78:	2101      	movs	r1, #1
 8002d7a:	b283      	uxth	r3, r0
 8002d7c:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002d7e:	4608      	mov	r0, r1
 8002d80:	f015 fb3c 	bl	80183fc <traceIF_uartPrint>
          p_atp_ctxt->step = common_start_sequence_step;
 8002d84:	231f      	movs	r3, #31
 8002d86:	74bb      	strb	r3, [r7, #18]
      atcm_program_SKIP_CMD(p_atp_ctxt);
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f005 fcdd 	bl	8008748 <atcm_program_SKIP_CMD>
 8002d8e:	e7db      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
      else if CHECK_STEP((WP77_MODEM_SYNCHRO_AT_MAX_RETRIES))
 8002d90:	2a1e      	cmp	r2, #30
 8002d92:	d117      	bne.n	8002dc4 <ATCustom_WP77_getCmd+0x190>
        if (WP77_ctxt.persist.modem_at_ready == AT_FALSE)
 8002d94:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f5      	bne.n	8002d88 <ATCustom_WP77_getCmd+0x154>
          PRINT_ERR("Impossible to sync with modem")
 8002d9c:	4966      	ldr	r1, [pc, #408]	; (8002f38 <ATCustom_WP77_getCmd+0x304>)
 8002d9e:	485f      	ldr	r0, [pc, #380]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002da0:	f01a f8fa 	bl	801cf98 <strcpy>
    PRINT_ERR("Error, invalid command ID %d", curSID)
 8002da4:	485d      	ldr	r0, [pc, #372]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002da6:	f015 f8c5 	bl	8017f34 <crs_strlen>
 8002daa:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002dac:	b283      	uxth	r3, r0
 8002dae:	2110      	movs	r1, #16
 8002db0:	2001      	movs	r0, #1
 8002db2:	f015 f8fd 	bl	8017fb0 <traceIF_itmPrint>
 8002db6:	4859      	ldr	r0, [pc, #356]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002db8:	f015 f8bc 	bl	8017f34 <crs_strlen>
 8002dbc:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002dbe:	b283      	uxth	r3, r0
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	e150      	b.n	8003066 <ATCustom_WP77_getCmd+0x432>
      else if CHECK_STEP((common_start_sequence_step))
 8002dc4:	2a1f      	cmp	r2, #31
 8002dc6:	d097      	beq.n	8002cf8 <ATCustom_WP77_getCmd+0xc4>
      else if CHECK_STEP((common_start_sequence_step + 1U))
 8002dc8:	2a20      	cmp	r2, #32
 8002dca:	d108      	bne.n	8002dde <ATCustom_WP77_getCmd+0x1aa>
        WP77_ctxt.CMD_ctxt.command_echo = AT_FALSE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f885 3763 	strb.w	r3, [r5, #1891]	; 0x763
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_ATE, INTERMEDIATE_CMD);
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2328      	movs	r3, #40	; 0x28
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CSQ, FINAL_CMD );
 8002dd6:	2204      	movs	r2, #4
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_ORP, FINAL_CMD);
 8002dd8:	4855      	ldr	r0, [pc, #340]	; (8002f30 <ATCustom_WP77_getCmd+0x2fc>)
 8002dda:	4621      	mov	r1, r4
 8002ddc:	e762      	b.n	8002ca4 <ATCustom_WP77_getCmd+0x70>
      else if CHECK_STEP((common_start_sequence_step + 2U))
 8002dde:	2a21      	cmp	r2, #33	; 0x21
 8002de0:	d103      	bne.n	8002dea <ATCustom_WP77_getCmd+0x1b6>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CMEE, INTERMEDIATE_CMD);
 8002de2:	2300      	movs	r3, #0
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2311      	movs	r3, #17
 8002de8:	e789      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
      else if CHECK_STEP((common_start_sequence_step + 3U))
 8002dea:	2a22      	cmp	r2, #34	; 0x22
 8002dec:	d106      	bne.n	8002dfc <ATCustom_WP77_getCmd+0x1c8>
        WP77_ctxt.CMD_ctxt.dce_full_resp_format = AT_TRUE;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f885 3764 	strb.w	r3, [r5, #1892]	; 0x764
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_ATV, INTERMEDIATE_CMD);
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	232b      	movs	r3, #43	; 0x2b
 8002dfa:	e7ec      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
      else if CHECK_STEP((common_start_sequence_step + 4U))
 8002dfc:	2a23      	cmp	r2, #35	; 0x23
 8002dfe:	d103      	bne.n	8002e08 <ATCustom_WP77_getCmd+0x1d4>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_AND_D, INTERMEDIATE_CMD);
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	232d      	movs	r3, #45	; 0x2d
 8002e06:	e7e6      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
      else if CHECK_STEP((common_start_sequence_step + 5U))
 8002e08:	2a24      	cmp	r2, #36	; 0x24
 8002e0a:	d103      	bne.n	8002e14 <ATCustom_WP77_getCmd+0x1e0>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CGMR, INTERMEDIATE_CMD);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	230d      	movs	r3, #13
 8002e12:	e7e0      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
      else if CHECK_STEP((common_start_sequence_step + 6U))
 8002e14:	2a25      	cmp	r2, #37	; 0x25
 8002e16:	d105      	bne.n	8002e24 <ATCustom_WP77_getCmd+0x1f0>
        WP77_ctxt.CMD_ctxt.cfun_value = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f885 3771 	strb.w	r3, [r5, #1905]	; 0x771
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CFUN, INTERMEDIATE_CMD);
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2313      	movs	r3, #19
 8002e22:	e76c      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
      else if CHECK_STEP((common_start_sequence_step + 7U))
 8002e24:	2a26      	cmp	r2, #38	; 0x26
 8002e26:	d104      	bne.n	8002e32 <ATCustom_WP77_getCmd+0x1fe>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_SELRAT, INTERMEDIATE_CMD);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2336      	movs	r3, #54	; 0x36
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGATT, FINAL_CMD);
 8002e2e:	2202      	movs	r2, #2
 8002e30:	e7d2      	b.n	8002dd8 <ATCustom_WP77_getCmd+0x1a4>
      else if CHECK_STEP((common_start_sequence_step + 8U))
 8002e32:	2a27      	cmp	r2, #39	; 0x27
 8002e34:	d103      	bne.n	8002e3e <ATCustom_WP77_getCmd+0x20a>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_BAND, INTERMEDIATE_CMD);
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2337      	movs	r3, #55	; 0x37
 8002e3c:	e7f7      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
      else if CHECK_STEP((common_start_sequence_step + 9U))
 8002e3e:	2a28      	cmp	r2, #40	; 0x28
 8002e40:	d103      	bne.n	8002e4a <ATCustom_WP77_getCmd+0x216>
    	atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_SELACQ, INTERMEDIATE_CMD);
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2338      	movs	r3, #56	; 0x38
 8002e48:	e7f1      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
      else if CHECK_STEP((common_start_sequence_step + 10U))
 8002e4a:	2a29      	cmp	r2, #41	; 0x29
 8002e4c:	d108      	bne.n	8002e60 <ATCustom_WP77_getCmd+0x22c>
        WP77_ctxt.SID_ctxt.set_power_config.psm_present = CELLULAR_TRUE;
 8002e4e:	2301      	movs	r3, #1
        WP77_ctxt.SID_ctxt.set_power_config.psm_mode = PSM_MODE_DISABLE;
 8002e50:	2200      	movs	r2, #0
        WP77_ctxt.SID_ctxt.set_power_config.psm_present = CELLULAR_TRUE;
 8002e52:	f885 3737 	strb.w	r3, [r5, #1847]	; 0x737
        WP77_ctxt.SID_ctxt.set_power_config.psm_mode = PSM_MODE_DISABLE;
 8002e56:	f885 2739 	strb.w	r2, [r5, #1849]	; 0x739
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CPSMS, FINAL_CMD);
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2322      	movs	r3, #34	; 0x22
 8002e5e:	e74e      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
      else if CHECK_STEP_EXCEEDS((common_start_sequence_step + 12U))
 8002e60:	2a2a      	cmp	r2, #42	; 0x2a
 8002e62:	f43f af71 	beq.w	8002d48 <ATCustom_WP77_getCmd+0x114>
}
 8002e66:	2001      	movs	r0, #1
 8002e68:	b00b      	add	sp, #44	; 0x2c
 8002e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (curSID == (at_msg_t) SID_CS_POWER_OFF)
 8002e6e:	2e66      	cmp	r6, #102	; 0x66
 8002e70:	d106      	bne.n	8002e80 <ATCustom_WP77_getCmd+0x24c>
    if CHECK_STEP((0U))
 8002e72:	7cbb      	ldrb	r3, [r7, #18]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f6      	bne.n	8002e66 <ATCustom_WP77_getCmd+0x232>
    atcm_program_NO_MORE_CMD(p_atp_ctxt);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f005 fc59 	bl	8008730 <atcm_program_NO_MORE_CMD>
 8002e7e:	e763      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
  else if (curSID == (at_msg_t) SID_CS_INIT_MODEM)
 8002e80:	2e67      	cmp	r6, #103	; 0x67
 8002e82:	f040 8112 	bne.w	80030aa <ATCustom_WP77_getCmd+0x476>
    if CHECK_STEP((0U))
 8002e86:	7cbe      	ldrb	r6, [r7, #18]
 8002e88:	b956      	cbnz	r6, 8002ea0 <ATCustom_WP77_getCmd+0x26c>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CFUN, INTERMEDIATE_CMD);
 8002e8a:	2313      	movs	r3, #19
 8002e8c:	9600      	str	r6, [sp, #0]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4621      	mov	r1, r4
 8002e92:	4648      	mov	r0, r9
 8002e94:	f005 fbf2 	bl	800867c <atcm_program_AT_CMD>
      WP77_shared.QINISTAT_error = AT_FALSE;
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <ATCustom_WP77_getCmd+0x2f4>)
 8002e9a:	f8a3 60ac 	strh.w	r6, [r3, #172]	; 0xac
 8002e9e:	e753      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
    else if CHECK_STEP((1U))
 8002ea0:	2e01      	cmp	r6, #1
 8002ea2:	d112      	bne.n	8002eca <ATCustom_WP77_getCmd+0x296>
      if (WP77_ctxt.SID_ctxt.modem_init.init == CS_CMI_MINI)
 8002ea4:	f899 35c9 	ldrb.w	r3, [r9, #1481]	; 0x5c9
 8002ea8:	b933      	cbnz	r3, 8002eb8 <ATCustom_WP77_getCmd+0x284>
        atcm_program_NO_MORE_CMD(p_atp_ctxt);
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f005 fc40 	bl	8008730 <atcm_program_NO_MORE_CMD>
      WP77_ctxt.persist.modem_sim_ready  = AT_FALSE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f885 3519 	strb.w	r3, [r5, #1305]	; 0x519
 8002eb6:	e747      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CCID, INTERMEDIATE_CMD);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	481c      	ldr	r0, [pc, #112]	; (8002f30 <ATCustom_WP77_getCmd+0x2fc>)
 8002ebe:	233d      	movs	r3, #61	; 0x3d
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	f005 fbda 	bl	800867c <atcm_program_AT_CMD>
 8002ec8:	e7f2      	b.n	8002eb0 <ATCustom_WP77_getCmd+0x27c>
    else if CHECK_STEP((2U))
 8002eca:	2e02      	cmp	r6, #2
 8002ecc:	d147      	bne.n	8002f5e <ATCustom_WP77_getCmd+0x32a>
      if (WP77_shared.WP77_sim_status_retries > WP77_MAX_SIM_STATUS_RETRIES)
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <ATCustom_WP77_getCmd+0x2f4>)
 8002ed0:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8002ed4:	2b14      	cmp	r3, #20
 8002ed6:	d933      	bls.n	8002f40 <ATCustom_WP77_getCmd+0x30c>
        if (WP77_shared.QINISTAT_error == AT_FALSE)
 8002ed8:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 8002edc:	b91b      	cbnz	r3, 8002ee6 <ATCustom_WP77_getCmd+0x2b2>
          atcm_program_NO_MORE_CMD(p_atp_ctxt);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f005 fc26 	bl	8008730 <atcm_program_NO_MORE_CMD>
          retval = ATSTATUS_ERROR;
 8002ee4:	e7bf      	b.n	8002e66 <ATCustom_WP77_getCmd+0x232>
          PRINT_INFO("warning, modem FW version certainly too old")
 8002ee6:	4915      	ldr	r1, [pc, #84]	; (8002f3c <ATCustom_WP77_getCmd+0x308>)
 8002ee8:	480c      	ldr	r0, [pc, #48]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002eea:	f01a f855 	bl	801cf98 <strcpy>
 8002eee:	480b      	ldr	r0, [pc, #44]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002ef0:	f015 f820 	bl	8017f34 <crs_strlen>
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	b283      	uxth	r3, r0
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002efa:	4608      	mov	r0, r1
 8002efc:	f015 f858 	bl	8017fb0 <traceIF_itmPrint>
 8002f00:	4806      	ldr	r0, [pc, #24]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002f02:	f015 f817 	bl	8017f34 <crs_strlen>
 8002f06:	2101      	movs	r1, #1
 8002f08:	b283      	uxth	r3, r0
 8002f0a:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <ATCustom_WP77_getCmd+0x2e8>)
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	f015 fa75 	bl	80183fc <traceIF_uartPrint>
          WP77_ctxt.persist.modem_sim_ready  = AT_TRUE; /* assume that SIM is ready now */
 8002f12:	2301      	movs	r3, #1
 8002f14:	f889 3519 	strb.w	r3, [r9, #1305]	; 0x519
 8002f18:	e778      	b.n	8002e0c <ATCustom_WP77_getCmd+0x1d8>
 8002f1a:	bf00      	nop
 8002f1c:	20008ef8 	.word	0x20008ef8
 8002f20:	08022183 	.word	0x08022183
 8002f24:	080221b6 	.word	0x080221b6
 8002f28:	2000015c 	.word	0x2000015c
 8002f2c:	080221e1 	.word	0x080221e1
 8002f30:	20001008 	.word	0x20001008
 8002f34:	08022209 	.word	0x08022209
 8002f38:	0802224c 	.word	0x0802224c
 8002f3c:	08022277 	.word	0x08022277
        if ((WP77_shared.WP77_sim_status_retries != 0U) &&
 8002f40:	b15b      	cbz	r3, 8002f5a <ATCustom_WP77_getCmd+0x326>
 8002f42:	2203      	movs	r2, #3
 8002f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8002f52:	d102      	bne.n	8002f5a <ATCustom_WP77_getCmd+0x326>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CPIN, INTERMEDIATE_CMD);
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2312      	movs	r3, #18
 8002f58:	e769      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
                    atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt,
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e7fa      	b.n	8002f54 <ATCustom_WP77_getCmd+0x320>
    else if CHECK_STEP((3U))
 8002f5e:	2e03      	cmp	r6, #3
 8002f60:	d145      	bne.n	8002fee <ATCustom_WP77_getCmd+0x3ba>
      if (WP77_ctxt.persist.modem_sim_ready == AT_FALSE)
 8002f62:	f899 2519 	ldrb.w	r2, [r9, #1305]	; 0x519
 8002f66:	b91a      	cbnz	r2, 8002f70 <ATCustom_WP77_getCmd+0x33c>
        if (WP77_ctxt.persist.sim_state == CS_SIMSTATE_SIM_PIN_REQUIRED)
 8002f68:	f899 351b 	ldrb.w	r3, [r9, #1307]	; 0x51b
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d119      	bne.n	8002fa4 <ATCustom_WP77_getCmd+0x370>
        atcm_program_SKIP_CMD(p_atp_ctxt);
 8002f70:	4620      	mov	r0, r4
 8002f72:	f005 fbe9 	bl	8008748 <atcm_program_SKIP_CMD>
        PRINT_INFO("SIM is ready, unlock sequence")
 8002f76:	49b2      	ldr	r1, [pc, #712]	; (8003240 <ATCustom_WP77_getCmd+0x60c>)
 8002f78:	48b2      	ldr	r0, [pc, #712]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002f7a:	f01a f80d 	bl	801cf98 <strcpy>
 8002f7e:	48b1      	ldr	r0, [pc, #708]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002f80:	f014 ffd8 	bl	8017f34 <crs_strlen>
 8002f84:	2101      	movs	r1, #1
 8002f86:	b283      	uxth	r3, r0
 8002f88:	4aae      	ldr	r2, [pc, #696]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002f8a:	4608      	mov	r0, r1
 8002f8c:	f015 f810 	bl	8017fb0 <traceIF_itmPrint>
 8002f90:	48ac      	ldr	r0, [pc, #688]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002f92:	f014 ffcf 	bl	8017f34 <crs_strlen>
 8002f96:	2101      	movs	r1, #1
 8002f98:	b283      	uxth	r3, r0
 8002f9a:	4aaa      	ldr	r2, [pc, #680]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	f015 fa2d 	bl	80183fc <traceIF_uartPrint>
 8002fa2:	e6d1      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
          atcm_program_TEMPO(p_atp_ctxt, WP77_SIMREADY_TIMEOUT, INTERMEDIATE_CMD);
 8002fa4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f005 fb95 	bl	80086d8 <atcm_program_TEMPO>
          p_atp_ctxt->step = p_atp_ctxt->step - 2U;
 8002fae:	7cbb      	ldrb	r3, [r7, #18]
          PRINT_INFO("SIM not ready yet")
 8002fb0:	49a5      	ldr	r1, [pc, #660]	; (8003248 <ATCustom_WP77_getCmd+0x614>)
 8002fb2:	48a4      	ldr	r0, [pc, #656]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
          p_atp_ctxt->step = p_atp_ctxt->step - 2U;
 8002fb4:	3b02      	subs	r3, #2
 8002fb6:	74bb      	strb	r3, [r7, #18]
          PRINT_INFO("SIM not ready yet")
 8002fb8:	f019 ffee 	bl	801cf98 <strcpy>
 8002fbc:	48a1      	ldr	r0, [pc, #644]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002fbe:	f014 ffb9 	bl	8017f34 <crs_strlen>
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	b283      	uxth	r3, r0
 8002fc6:	4a9f      	ldr	r2, [pc, #636]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002fc8:	4608      	mov	r0, r1
 8002fca:	f014 fff1 	bl	8017fb0 <traceIF_itmPrint>
 8002fce:	489d      	ldr	r0, [pc, #628]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002fd0:	f014 ffb0 	bl	8017f34 <crs_strlen>
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	b283      	uxth	r3, r0
 8002fd8:	4a9a      	ldr	r2, [pc, #616]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8002fda:	4608      	mov	r0, r1
 8002fdc:	f015 fa0e 	bl	80183fc <traceIF_uartPrint>
          WP77_shared.WP77_sim_status_retries++;
 8002fe0:	4a9a      	ldr	r2, [pc, #616]	; (800324c <ATCustom_WP77_getCmd+0x618>)
 8002fe2:	f892 30ad 	ldrb.w	r3, [r2, #173]	; 0xad
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
 8002fec:	e6ac      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
    else if CHECK_STEP((4U))
 8002fee:	2e04      	cmp	r6, #4
 8002ff0:	d104      	bne.n	8002ffc <ATCustom_WP77_getCmd+0x3c8>
      WP77_shared.WP77_sim_status_retries = 0U;
 8002ff2:	4a96      	ldr	r2, [pc, #600]	; (800324c <ATCustom_WP77_getCmd+0x618>)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
 8002ffa:	e7ab      	b.n	8002f54 <ATCustom_WP77_getCmd+0x320>
    else if CHECK_STEP((5U))
 8002ffc:	2e05      	cmp	r6, #5
 8002ffe:	d14d      	bne.n	800309c <ATCustom_WP77_getCmd+0x468>
      if (WP77_ctxt.persist.sim_pin_code_ready == AT_FALSE)
 8003000:	f899 651a 	ldrb.w	r6, [r9, #1306]	; 0x51a
 8003004:	2e00      	cmp	r6, #0
 8003006:	d132      	bne.n	800306e <ATCustom_WP77_getCmd+0x43a>
        if (strlen((const CRC_CHAR_t *)&WP77_ctxt.SID_ctxt.modem_init.pincode.pincode) != 0U)
 8003008:	f899 35cb 	ldrb.w	r3, [r9, #1483]	; 0x5cb
 800300c:	b1c3      	cbz	r3, 8003040 <ATCustom_WP77_getCmd+0x40c>
          PRINT_INFO("CPIN required, we send user value to modem")
 800300e:	4990      	ldr	r1, [pc, #576]	; (8003250 <ATCustom_WP77_getCmd+0x61c>)
 8003010:	488c      	ldr	r0, [pc, #560]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003012:	f019 ffc1 	bl	801cf98 <strcpy>
 8003016:	488b      	ldr	r0, [pc, #556]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003018:	f014 ff8c 	bl	8017f34 <crs_strlen>
 800301c:	2101      	movs	r1, #1
 800301e:	b283      	uxth	r3, r0
 8003020:	4a88      	ldr	r2, [pc, #544]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003022:	4608      	mov	r0, r1
 8003024:	f014 ffc4 	bl	8017fb0 <traceIF_itmPrint>
 8003028:	4886      	ldr	r0, [pc, #536]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 800302a:	f014 ff83 	bl	8017f34 <crs_strlen>
 800302e:	2101      	movs	r1, #1
 8003030:	b283      	uxth	r3, r0
 8003032:	4a84      	ldr	r2, [pc, #528]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003034:	4608      	mov	r0, r1
 8003036:	f015 f9e1 	bl	80183fc <traceIF_uartPrint>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CPIN, INTERMEDIATE_CMD);
 800303a:	9600      	str	r6, [sp, #0]
 800303c:	2312      	movs	r3, #18
 800303e:	e65e      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
          PRINT_INFO("CPIN required but not provided by user")
 8003040:	4984      	ldr	r1, [pc, #528]	; (8003254 <ATCustom_WP77_getCmd+0x620>)
 8003042:	4880      	ldr	r0, [pc, #512]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003044:	f019 ffa8 	bl	801cf98 <strcpy>
 8003048:	487e      	ldr	r0, [pc, #504]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 800304a:	f014 ff73 	bl	8017f34 <crs_strlen>
 800304e:	2101      	movs	r1, #1
 8003050:	b283      	uxth	r3, r0
 8003052:	4a7c      	ldr	r2, [pc, #496]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003054:	4608      	mov	r0, r1
 8003056:	f014 ffab 	bl	8017fb0 <traceIF_itmPrint>
 800305a:	487a      	ldr	r0, [pc, #488]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 800305c:	f014 ff6a 	bl	8017f34 <crs_strlen>
 8003060:	4a78      	ldr	r2, [pc, #480]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003062:	b283      	uxth	r3, r0
 8003064:	2101      	movs	r1, #1
    PRINT_ERR("Error, invalid command ID %d", curSID)
 8003066:	2001      	movs	r0, #1
 8003068:	f015 f9c8 	bl	80183fc <traceIF_uartPrint>
    retval = ATSTATUS_ERROR;
 800306c:	e6fb      	b.n	8002e66 <ATCustom_WP77_getCmd+0x232>
        PRINT_INFO("CPIN not required")
 800306e:	497a      	ldr	r1, [pc, #488]	; (8003258 <ATCustom_WP77_getCmd+0x624>)
 8003070:	4874      	ldr	r0, [pc, #464]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003072:	f019 ff91 	bl	801cf98 <strcpy>
 8003076:	4873      	ldr	r0, [pc, #460]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003078:	f014 ff5c 	bl	8017f34 <crs_strlen>
 800307c:	2101      	movs	r1, #1
 800307e:	b283      	uxth	r3, r0
 8003080:	4a70      	ldr	r2, [pc, #448]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003082:	4608      	mov	r0, r1
 8003084:	f014 ff94 	bl	8017fb0 <traceIF_itmPrint>
 8003088:	486e      	ldr	r0, [pc, #440]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 800308a:	f014 ff53 	bl	8017f34 <crs_strlen>
 800308e:	2101      	movs	r1, #1
 8003090:	b283      	uxth	r3, r0
 8003092:	4a6c      	ldr	r2, [pc, #432]	; (8003244 <ATCustom_WP77_getCmd+0x610>)
 8003094:	4608      	mov	r0, r1
 8003096:	f015 f9b1 	bl	80183fc <traceIF_uartPrint>
        atcm_program_SKIP_CMD(p_atp_ctxt);
 800309a:	e675      	b.n	8002d88 <ATCustom_WP77_getCmd+0x154>
    else if CHECK_STEP((6U))
 800309c:	2e06      	cmp	r6, #6
 800309e:	f47f aee2 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGDCONT, FINAL_CMD);
 80030a2:	2301      	movs	r3, #1
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	231d      	movs	r3, #29
 80030a8:	e6c1      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
  else if (curSID == (at_msg_t) SID_CS_GET_DEVICE_INFO)
 80030aa:	2e68      	cmp	r6, #104	; 0x68
 80030ac:	d145      	bne.n	800313a <ATCustom_WP77_getCmd+0x506>
    if CHECK_STEP((0U))
 80030ae:	7cbb      	ldrb	r3, [r7, #18]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f aed8 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      switch (WP77_ctxt.SID_ctxt.device_info->field_requested)
 80030b6:	f8d9 35dc 	ldr.w	r3, [r9, #1500]	; 0x5dc
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d81b      	bhi.n	80030f8 <ATCustom_WP77_getCmd+0x4c4>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f43f aed0 	beq.w	8002e66 <ATCustom_WP77_getCmd+0x232>
 80030c6:	3b01      	subs	r3, #1
 80030c8:	2201      	movs	r2, #1
 80030ca:	2b07      	cmp	r3, #7
 80030cc:	f63f aecb 	bhi.w	8002e66 <ATCustom_WP77_getCmd+0x232>
 80030d0:	a101      	add	r1, pc, #4	; (adr r1, 80030d8 <ATCustom_WP77_getCmd+0x4a4>)
 80030d2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	08003127 	.word	0x08003127
 80030dc:	08003117 	.word	0x08003117
 80030e0:	08002e67 	.word	0x08002e67
 80030e4:	0800311d 	.word	0x0800311d
 80030e8:	08002e67 	.word	0x08002e67
 80030ec:	08002e67 	.word	0x08002e67
 80030f0:	08002e67 	.word	0x08002e67
 80030f4:	08003123 	.word	0x08003123
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d017      	beq.n	800312c <ATCustom_WP77_getCmd+0x4f8>
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	f04f 0201 	mov.w	r2, #1
 8003102:	d017      	beq.n	8003134 <ATCustom_WP77_getCmd+0x500>
 8003104:	2b10      	cmp	r3, #16
 8003106:	f47f aeae 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
          WP77_ctxt.CMD_ctxt.cgsn_write_cmd_param = CGSN_SN;
 800310a:	2300      	movs	r3, #0
 800310c:	f889 3760 	strb.w	r3, [r9, #1888]	; 0x760
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CGSN, FINAL_CMD);
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	230e      	movs	r3, #14
 8003114:	e65f      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CGMI, FINAL_CMD);
 8003116:	9200      	str	r2, [sp, #0]
 8003118:	230b      	movs	r3, #11
 800311a:	e65c      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CGMM, FINAL_CMD);
 800311c:	9200      	str	r2, [sp, #0]
 800311e:	230c      	movs	r3, #12
 8003120:	e659      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CGMR, FINAL_CMD);
 8003122:	9200      	str	r2, [sp, #0]
 8003124:	e674      	b.n	8002e10 <ATCustom_WP77_getCmd+0x1dc>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_GSN, FINAL_CMD);
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	2330      	movs	r3, #48	; 0x30
 800312a:	e654      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CIMI, FINAL_CMD);
 800312c:	2301      	movs	r3, #1
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	230f      	movs	r3, #15
 8003132:	e650      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
          atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CCID, FINAL_CMD);
 8003134:	9200      	str	r2, [sp, #0]
 8003136:	233d      	movs	r3, #61	; 0x3d
 8003138:	e64d      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
  else if (curSID == (at_msg_t) SID_CS_GET_SIGNAL_QUALITY)
 800313a:	2e6e      	cmp	r6, #110	; 0x6e
 800313c:	d109      	bne.n	8003152 <ATCustom_WP77_getCmd+0x51e>
    if CHECK_STEP((0U))
 800313e:	7cbb      	ldrb	r3, [r7, #18]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f43f ae21 	beq.w	8002d88 <ATCustom_WP77_getCmd+0x154>
    else if CHECK_STEP((1U))
 8003146:	2b01      	cmp	r3, #1
 8003148:	f47f ae8d 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_EXECUTION_CMD, (CMD_ID_t) CMD_AT_CSQ, FINAL_CMD );
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	231c      	movs	r3, #28
 8003150:	e641      	b.n	8002dd6 <ATCustom_WP77_getCmd+0x1a2>
  else if (curSID == (at_msg_t) SID_CS_GET_ATTACHSTATUS)
 8003152:	2e6d      	cmp	r6, #109	; 0x6d
 8003154:	d107      	bne.n	8003166 <ATCustom_WP77_getCmd+0x532>
    if CHECK_STEP((0U))
 8003156:	7cbb      	ldrb	r3, [r7, #18]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f ae84 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGATT, FINAL_CMD);
 800315e:	2301      	movs	r3, #1
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGATT, FINAL_CMD);
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2316      	movs	r3, #22
 8003164:	e663      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
  else if (curSID == (at_msg_t) SID_CS_REGISTER_NET)
 8003166:	2e69      	cmp	r6, #105	; 0x69
 8003168:	d11d      	bne.n	80031a6 <ATCustom_WP77_getCmd+0x572>
    if CHECK_STEP((0U))
 800316a:	7cba      	ldrb	r2, [r7, #18]
 800316c:	b912      	cbnz	r2, 8003174 <ATCustom_WP77_getCmd+0x540>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_COPS, INTERMEDIATE_CMD);
 800316e:	9200      	str	r2, [sp, #0]
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_COPS, FINAL_CMD);
 8003170:	2314      	movs	r3, #20
 8003172:	e65c      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
    else if CHECK_STEP((1U))
 8003174:	2a01      	cmp	r2, #1
 8003176:	d103      	bne.n	8003180 <ATCustom_WP77_getCmd+0x54c>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_COPS, INTERMEDIATE_CMD);
 8003178:	2300      	movs	r3, #0
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2314      	movs	r3, #20
 800317e:	e5be      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
    else if CHECK_STEP((2U))
 8003180:	2a02      	cmp	r2, #2
 8003182:	d103      	bne.n	800318c <ATCustom_WP77_getCmd+0x558>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CEREG, INTERMEDIATE_CMD);
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2319      	movs	r3, #25
 800318a:	e625      	b.n	8002dd8 <ATCustom_WP77_getCmd+0x1a4>
    else if CHECK_STEP((3U))
 800318c:	2a03      	cmp	r2, #3
 800318e:	d103      	bne.n	8003198 <ATCustom_WP77_getCmd+0x564>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CREG, INTERMEDIATE_CMD);
 8003190:	2300      	movs	r3, #0
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2317      	movs	r3, #23
 8003196:	e64a      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
    else if CHECK_STEP((4U))
 8003198:	2a04      	cmp	r2, #4
 800319a:	f47f ae64 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGREG, FINAL_CMD);
 800319e:	2301      	movs	r3, #1
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2318      	movs	r3, #24
 80031a4:	e643      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
  else if (curSID == (at_msg_t) SID_CS_GET_NETSTATUS)
 80031a6:	2e6c      	cmp	r6, #108	; 0x6c
 80031a8:	d112      	bne.n	80031d0 <ATCustom_WP77_getCmd+0x59c>
    if CHECK_STEP((0U))
 80031aa:	7cba      	ldrb	r2, [r7, #18]
 80031ac:	b912      	cbnz	r2, 80031b4 <ATCustom_WP77_getCmd+0x580>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CEREG, INTERMEDIATE_CMD);
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	e63c      	b.n	8002e2e <ATCustom_WP77_getCmd+0x1fa>
    else if CHECK_STEP((1U))
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	d0eb      	beq.n	8003190 <ATCustom_WP77_getCmd+0x55c>
    else if CHECK_STEP((2U))
 80031b8:	2a02      	cmp	r2, #2
 80031ba:	d103      	bne.n	80031c4 <ATCustom_WP77_getCmd+0x590>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_CGREG, INTERMEDIATE_CMD);
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2318      	movs	r3, #24
 80031c2:	e609      	b.n	8002dd8 <ATCustom_WP77_getCmd+0x1a4>
    else if CHECK_STEP((3U))
 80031c4:	2a03      	cmp	r2, #3
 80031c6:	f47f ae4e 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_READ_CMD, (CMD_ID_t) CMD_AT_COPS, FINAL_CMD);
 80031ca:	2301      	movs	r3, #1
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	e7cf      	b.n	8003170 <ATCustom_WP77_getCmd+0x53c>
  else if (curSID == (at_msg_t) SID_CS_SUSBCRIBE_NET_EVENT)
 80031d0:	2e6a      	cmp	r6, #106	; 0x6a
 80031d2:	d11c      	bne.n	800320e <ATCustom_WP77_getCmd+0x5da>
    if CHECK_STEP((0U))
 80031d4:	7cbb      	ldrb	r3, [r7, #18]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f ae45 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      CS_UrcEvent_t urcEvent = WP77_ctxt.SID_ctxt.urcEvent;
 80031dc:	f899 367c 	ldrb.w	r3, [r9, #1660]	; 0x67c
      if ((urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_EPS_LOCATION_INFO) ||
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	2a05      	cmp	r2, #5
 80031e4:	d804      	bhi.n	80031f0 <ATCustom_WP77_getCmd+0x5bc>
        (void) atcm_subscribe_net_event(&WP77_ctxt, p_atp_ctxt);
 80031e6:	4621      	mov	r1, r4
 80031e8:	481c      	ldr	r0, [pc, #112]	; (800325c <ATCustom_WP77_getCmd+0x628>)
 80031ea:	f005 fffb 	bl	80091e4 <atcm_subscribe_net_event>
 80031ee:	e5ab      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
      else if (urcEvent == CS_URCEVENT_SIGNAL_QUALITY)
 80031f0:	2b07      	cmp	r3, #7
 80031f2:	f47f ae41 	bne.w	8002e78 <ATCustom_WP77_getCmd+0x244>
        if (WP77_ctxt.persist.urc_subscript_signalQuality == CELLULAR_FALSE)
 80031f6:	f899 3012 	ldrb.w	r3, [r9, #18]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f ae3c 	bne.w	8002e78 <ATCustom_WP77_getCmd+0x244>
          WP77_ctxt.persist.urc_subscript_signalQuality = CELLULAR_TRUE;
 8003200:	2301      	movs	r3, #1
          WP77_ctxt.persist.urc_subscript_signalQuality = CELLULAR_FALSE;
 8003202:	74ab      	strb	r3, [r5, #18]
          WP77_shared.QINDCFG_command_param = QINDCFG_csq;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <ATCustom_WP77_getCmd+0x618>)
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800320c:	e59c      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
  else if (curSID == (at_msg_t) SID_CS_UNSUSBCRIBE_NET_EVENT)
 800320e:	2e6b      	cmp	r6, #107	; 0x6b
 8003210:	d126      	bne.n	8003260 <ATCustom_WP77_getCmd+0x62c>
    if CHECK_STEP((0U))
 8003212:	7cbb      	ldrb	r3, [r7, #18]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f ae26 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      CS_UrcEvent_t urcEvent = WP77_ctxt.SID_ctxt.urcEvent;
 800321a:	f899 267c 	ldrb.w	r2, [r9, #1660]	; 0x67c
      if ((urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_EPS_LOCATION_INFO) ||
 800321e:	1e51      	subs	r1, r2, #1
 8003220:	2905      	cmp	r1, #5
 8003222:	d804      	bhi.n	800322e <ATCustom_WP77_getCmd+0x5fa>
        (void) atcm_unsubscribe_net_event(&WP77_ctxt, p_atp_ctxt);
 8003224:	4621      	mov	r1, r4
 8003226:	480d      	ldr	r0, [pc, #52]	; (800325c <ATCustom_WP77_getCmd+0x628>)
 8003228:	f006 f832 	bl	8009290 <atcm_unsubscribe_net_event>
 800322c:	e58c      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
      else if (urcEvent == CS_URCEVENT_SIGNAL_QUALITY)
 800322e:	2a07      	cmp	r2, #7
 8003230:	f47f ae22 	bne.w	8002e78 <ATCustom_WP77_getCmd+0x244>
        if (WP77_ctxt.persist.urc_subscript_signalQuality == CELLULAR_TRUE)
 8003234:	f899 2012 	ldrb.w	r2, [r9, #18]
 8003238:	2a00      	cmp	r2, #0
 800323a:	d1e2      	bne.n	8003202 <ATCustom_WP77_getCmd+0x5ce>
 800323c:	e61c      	b.n	8002e78 <ATCustom_WP77_getCmd+0x244>
 800323e:	bf00      	nop
 8003240:	080222aa 	.word	0x080222aa
 8003244:	20008ef8 	.word	0x20008ef8
 8003248:	080222cf 	.word	0x080222cf
 800324c:	2000015c 	.word	0x2000015c
 8003250:	080222e8 	.word	0x080222e8
 8003254:	0802231a 	.word	0x0802231a
 8003258:	08022348 	.word	0x08022348
 800325c:	20001008 	.word	0x20001008
  else if (curSID == (at_msg_t) SID_CS_REGISTER_PDN_EVENT)
 8003260:	2e73      	cmp	r6, #115	; 0x73
 8003262:	d112      	bne.n	800328a <ATCustom_WP77_getCmd+0x656>
    if CHECK_STEP((0U))
 8003264:	7cbb      	ldrb	r3, [r7, #18]
 8003266:	b953      	cbnz	r3, 800327e <ATCustom_WP77_getCmd+0x64a>
      if (WP77_ctxt.persist.urc_subscript_pdn_event == CELLULAR_FALSE)
 8003268:	f899 3013 	ldrb.w	r3, [r9, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f ae03 	bne.w	8002e78 <ATCustom_WP77_getCmd+0x244>
        WP77_ctxt.persist.urc_subscript_pdn_event = CELLULAR_TRUE;
 8003272:	2201      	movs	r2, #1
 8003274:	f889 2013 	strb.w	r2, [r9, #19]
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGEREP, FINAL_CMD);
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	231a      	movs	r3, #26
 800327c:	e53f      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
    else if CHECK_STEP((1U))
 800327e:	2b01      	cmp	r3, #1
 8003280:	f47f adf1 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_WDSI, FINAL_CMD);
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2339      	movs	r3, #57	; 0x39
 8003288:	e539      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
  else if (curSID == (at_msg_t) SID_CS_DEREGISTER_PDN_EVENT)
 800328a:	2e74      	cmp	r6, #116	; 0x74
 800328c:	d10c      	bne.n	80032a8 <ATCustom_WP77_getCmd+0x674>
    if CHECK_STEP((0U))
 800328e:	7cbb      	ldrb	r3, [r7, #18]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f47f ade8 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      if (WP77_ctxt.persist.urc_subscript_pdn_event == CELLULAR_TRUE)
 8003296:	f899 2013 	ldrb.w	r2, [r9, #19]
 800329a:	2a00      	cmp	r2, #0
 800329c:	f43f adec 	beq.w	8002e78 <ATCustom_WP77_getCmd+0x244>
        WP77_ctxt.persist.urc_subscript_pdn_event = CELLULAR_FALSE;
 80032a0:	f889 3013 	strb.w	r3, [r9, #19]
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGEREP, FINAL_CMD);
 80032a4:	2301      	movs	r3, #1
 80032a6:	e7e7      	b.n	8003278 <ATCustom_WP77_getCmd+0x644>
  else if (curSID == (at_msg_t) SID_ATTACH_PS_DOMAIN)
 80032a8:	2e70      	cmp	r6, #112	; 0x70
 80032aa:	d107      	bne.n	80032bc <ATCustom_WP77_getCmd+0x688>
    if CHECK_STEP((0U))
 80032ac:	7cbb      	ldrb	r3, [r7, #18]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f47f add9 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      WP77_ctxt.CMD_ctxt.cgatt_write_cmd_param = CGATT_ATTACHED;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f889 3761 	strb.w	r3, [r9, #1889]	; 0x761
 80032ba:	e751      	b.n	8003160 <ATCustom_WP77_getCmd+0x52c>
  else if (curSID == (at_msg_t) SID_DETACH_PS_DOMAIN)
 80032bc:	2e71      	cmp	r6, #113	; 0x71
 80032be:	d106      	bne.n	80032ce <ATCustom_WP77_getCmd+0x69a>
    if CHECK_STEP((0U))
 80032c0:	7cbb      	ldrb	r3, [r7, #18]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f adcf 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      WP77_ctxt.CMD_ctxt.cgatt_write_cmd_param = CGATT_DETACHED;
 80032c8:	f889 3761 	strb.w	r3, [r9, #1889]	; 0x761
      atcm_program_NO_MORE_CMD(p_atp_ctxt);
 80032cc:	e5d4      	b.n	8002e78 <ATCustom_WP77_getCmd+0x244>
  else if (curSID == (at_msg_t) SID_CS_ACTIVATE_PDN)
 80032ce:	2e6f      	cmp	r6, #111	; 0x6f
 80032d0:	d140      	bne.n	8003354 <ATCustom_WP77_getCmd+0x720>
    if CHECK_STEP((0U))
 80032d2:	7cbd      	ldrb	r5, [r7, #18]
 80032d4:	b935      	cbnz	r5, 80032e4 <ATCustom_WP77_getCmd+0x6b0>
      WP77_shared.pdn_already_active = AT_FALSE;
 80032d6:	4a54      	ldr	r2, [pc, #336]	; (8003428 <ATCustom_WP77_getCmd+0x7f4>)
 80032d8:	2300      	movs	r3, #0
 80032da:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGPADDR, FINAL_CMD);
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	2321      	movs	r3, #33	; 0x21
 80032e2:	e50c      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
    else if CHECK_STEP((1U))
 80032e4:	2d01      	cmp	r5, #1
 80032e6:	d130      	bne.n	800334a <ATCustom_WP77_getCmd+0x716>
      AT_CHAR_t line[32] = {0};
 80032e8:	2600      	movs	r6, #0
 80032ea:	221c      	movs	r2, #28
 80032ec:	4631      	mov	r1, r6
 80032ee:	a803      	add	r0, sp, #12
 80032f0:	9602      	str	r6, [sp, #8]
 80032f2:	f019 fdb1 	bl	801ce58 <memset>
      (void) memcpy((void *)&line[0],&WP77_ctxt.persist.modem_cid_table->ip_addr_infos.ip_addr_value,
 80032f6:	484d      	ldr	r0, [pc, #308]	; (800342c <ATCustom_WP77_getCmd+0x7f8>)
 80032f8:	f7fc ff8c 	bl	8000214 <strlen>
 80032fc:	494b      	ldr	r1, [pc, #300]	; (800342c <ATCustom_WP77_getCmd+0x7f8>)
 80032fe:	4602      	mov	r2, r0
 8003300:	a802      	add	r0, sp, #8
 8003302:	f019 fd9b 	bl	801ce3c <memcpy>
      if (((AT_CHAR_t *) strcmp((const CRC_CHAR_t *)&line[0], "0.0.0.0") != NULL) &&
 8003306:	494a      	ldr	r1, [pc, #296]	; (8003430 <ATCustom_WP77_getCmd+0x7fc>)
 8003308:	a802      	add	r0, sp, #8
 800330a:	f7fc ff79 	bl	8000200 <strcmp>
 800330e:	b1c8      	cbz	r0, 8003344 <ATCustom_WP77_getCmd+0x710>
 8003310:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003314:	b1b3      	cbz	r3, 8003344 <ATCustom_WP77_getCmd+0x710>
    	PRINT_INFO("Skip PDN activation (already active)")
 8003316:	4947      	ldr	r1, [pc, #284]	; (8003434 <ATCustom_WP77_getCmd+0x800>)
 8003318:	4847      	ldr	r0, [pc, #284]	; (8003438 <ATCustom_WP77_getCmd+0x804>)
 800331a:	f019 fe3d 	bl	801cf98 <strcpy>
 800331e:	4846      	ldr	r0, [pc, #280]	; (8003438 <ATCustom_WP77_getCmd+0x804>)
 8003320:	f014 fe08 	bl	8017f34 <crs_strlen>
 8003324:	4629      	mov	r1, r5
 8003326:	b283      	uxth	r3, r0
 8003328:	4a43      	ldr	r2, [pc, #268]	; (8003438 <ATCustom_WP77_getCmd+0x804>)
 800332a:	4628      	mov	r0, r5
 800332c:	f014 fe40 	bl	8017fb0 <traceIF_itmPrint>
 8003330:	4841      	ldr	r0, [pc, #260]	; (8003438 <ATCustom_WP77_getCmd+0x804>)
 8003332:	f014 fdff 	bl	8017f34 <crs_strlen>
 8003336:	4a40      	ldr	r2, [pc, #256]	; (8003438 <ATCustom_WP77_getCmd+0x804>)
 8003338:	b283      	uxth	r3, r0
 800333a:	4629      	mov	r1, r5
 800333c:	4628      	mov	r0, r5
 800333e:	f015 f85d 	bl	80183fc <traceIF_uartPrint>
        atcm_program_NO_MORE_CMD(p_atp_ctxt);
 8003342:	e599      	b.n	8002e78 <ATCustom_WP77_getCmd+0x244>
    	atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGACT, INTERMEDIATE_CMD);
 8003344:	9600      	str	r6, [sp, #0]
 8003346:	231e      	movs	r3, #30
 8003348:	e4d9      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
    else if CHECK_STEP((2U))
 800334a:	2d02      	cmp	r5, #2
 800334c:	f47f ad8b 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGPADDR, FINAL_CMD);
 8003350:	2301      	movs	r3, #1
 8003352:	e7c4      	b.n	80032de <ATCustom_WP77_getCmd+0x6aa>
  else if (curSID == (at_msg_t) SID_CS_DEACTIVATE_PDN)
 8003354:	2e72      	cmp	r6, #114	; 0x72
 8003356:	f43f ad86 	beq.w	8002e66 <ATCustom_WP77_getCmd+0x232>
  else if (curSID == (at_msg_t) SID_CS_DEFINE_PDN)
 800335a:	2e76      	cmp	r6, #118	; 0x76
 800335c:	d10a      	bne.n	8003374 <ATCustom_WP77_getCmd+0x740>
    if CHECK_STEP((0U))
 800335e:	7cbb      	ldrb	r3, [r7, #18]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f47f ad80 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      WP77_shared.QICGSP_config_command = AT_TRUE;
 8003366:	4a30      	ldr	r2, [pc, #192]	; (8003428 <ATCustom_WP77_getCmd+0x7f4>)
 8003368:	2301      	movs	r3, #1
 800336a:	f882 3059 	strb.w	r3, [r2, #89]	; 0x59
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGDCONT, FINAL_CMD);
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	231d      	movs	r3, #29
 8003372:	e4c4      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
  else if (curSID == (at_msg_t) SID_CS_SET_DEFAULT_PDN)
 8003374:	2e77      	cmp	r6, #119	; 0x77
 8003376:	f43f ad7f 	beq.w	8002e78 <ATCustom_WP77_getCmd+0x244>
  else if (curSID == (at_msg_t) SID_CS_GET_IP_ADDRESS)
 800337a:	2e75      	cmp	r6, #117	; 0x75
 800337c:	d0e8      	beq.n	8003350 <ATCustom_WP77_getCmd+0x71c>
  else if (curSID == (at_msg_t) SID_CS_SUSBCRIBE_MODEM_EVENT)
 800337e:	2e85      	cmp	r6, #133	; 0x85
 8003380:	f43f ad7a 	beq.w	8002e78 <ATCustom_WP77_getCmd+0x244>
  else if (curSID == (at_msg_t) SID_CS_DIRECT_CMD)
 8003384:	2e86      	cmp	r6, #134	; 0x86
 8003386:	d113      	bne.n	80033b0 <ATCustom_WP77_getCmd+0x77c>
    if CHECK_STEP((0U))
 8003388:	7cbb      	ldrb	r3, [r7, #18]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f ad6b 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_RAW_CMD, (CMD_ID_t) CMD_AT_DIRECT_CMD, FINAL_CMD);
 8003390:	2301      	movs	r3, #1
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4621      	mov	r1, r4
 8003396:	4829      	ldr	r0, [pc, #164]	; (800343c <ATCustom_WP77_getCmd+0x808>)
 8003398:	2334      	movs	r3, #52	; 0x34
 800339a:	2206      	movs	r2, #6
 800339c:	f005 f96e 	bl	800867c <atcm_program_AT_CMD>
      atcm_program_CMD_TIMEOUT(&WP77_ctxt, p_atp_ctxt, WP77_ctxt.SID_ctxt.direct_cmd_tx->cmd_timeout);
 80033a0:	f8d9 372c 	ldr.w	r3, [r9, #1836]	; 0x72c
 80033a4:	4825      	ldr	r0, [pc, #148]	; (800343c <ATCustom_WP77_getCmd+0x808>)
 80033a6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033a8:	4621      	mov	r1, r4
 80033aa:	f005 f98b 	bl	80086c4 <atcm_program_CMD_TIMEOUT>
 80033ae:	e4cb      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
  else if (curSID == (at_msg_t) SID_CS_SIM_SELECT)
 80033b0:	2e87      	cmp	r6, #135	; 0x87
 80033b2:	d10f      	bne.n	80033d4 <ATCustom_WP77_getCmd+0x7a0>
    if CHECK_STEP((0U))
 80033b4:	7cbb      	ldrb	r3, [r7, #18]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f ad55 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      if (atcm_select_hw_simslot(WP77_ctxt.persist.sim_selected) != ATSTATUS_OK)
 80033bc:	f899 051c 	ldrb.w	r0, [r9, #1308]	; 0x51c
 80033c0:	f005 f87e 	bl	80084c0 <atcm_select_hw_simslot>
 80033c4:	4605      	mov	r5, r0
      atcm_program_NO_MORE_CMD(p_atp_ctxt);
 80033c6:	4620      	mov	r0, r4
 80033c8:	f005 f9b2 	bl	8008730 <atcm_program_NO_MORE_CMD>
  if (retval == ATSTATUS_OK)
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	f47f ad4a 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
 80033d2:	e4b9      	b.n	8002d48 <ATCustom_WP77_getCmd+0x114>
  else if (curSID == (at_msg_t) SID_CS_SIM_GENERIC_ACCESS)
 80033d4:	2e88      	cmp	r6, #136	; 0x88
 80033d6:	d107      	bne.n	80033e8 <ATCustom_WP77_getCmd+0x7b4>
    if CHECK_STEP((0U))
 80033d8:	7cbb      	ldrb	r3, [r7, #18]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f47f ad43 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CSIM, FINAL_CMD);
 80033e0:	2301      	movs	r3, #1
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2326      	movs	r3, #38	; 0x26
 80033e6:	e48a      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
  else if (curSID == (at_msg_t) SID_CS_COM_MDM_TRANSACTION)
 80033e8:	2e8f      	cmp	r6, #143	; 0x8f
 80033ea:	d119      	bne.n	8003420 <ATCustom_WP77_getCmd+0x7ec>
    if CHECK_STEP((0U))
 80033ec:	7cbb      	ldrb	r3, [r7, #18]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f ad39 	bne.w	8002e66 <ATCustom_WP77_getCmd+0x232>
      if (WP77_ctxt.SID_ctxt.com_mdm_data.transaction_type == CS_COMMDM_RECEIVE)
 80033f4:	f899 3744 	ldrb.w	r3, [r9, #1860]	; 0x744
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d10d      	bne.n	8003418 <ATCustom_WP77_getCmd+0x7e4>
        atcm_program_NO_MORE_CMD(p_atp_ctxt);
 80033fc:	4620      	mov	r0, r4
 80033fe:	f005 f997 	bl	8008730 <atcm_program_NO_MORE_CMD>
        if (orp_storage_get_msg(WP77_ctxt.SID_ctxt.com_mdm_data.rxBuffer.p_buffer,
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <ATCustom_WP77_getCmd+0x80c>)
 8003404:	f8d9 1750 	ldr.w	r1, [r9, #1872]	; 0x750
 8003408:	f8d9 0754 	ldr.w	r0, [r9, #1876]	; 0x754
 800340c:	f7ff f87a 	bl	8002504 <orp_storage_get_msg>
 8003410:	2800      	cmp	r0, #0
 8003412:	f6bf ac99 	bge.w	8002d48 <ATCustom_WP77_getCmd+0x114>
 8003416:	e526      	b.n	8002e66 <ATCustom_WP77_getCmd+0x232>
        atcm_program_AT_CMD(&WP77_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_ORP, FINAL_CMD);
 8003418:	2301      	movs	r3, #1
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2347      	movs	r3, #71	; 0x47
 800341e:	e46e      	b.n	8002cfe <ATCustom_WP77_getCmd+0xca>
    PRINT_ERR("Error, invalid command ID %d", curSID)
 8003420:	4908      	ldr	r1, [pc, #32]	; (8003444 <ATCustom_WP77_getCmd+0x810>)
 8003422:	4632      	mov	r2, r6
 8003424:	e44d      	b.n	8002cc2 <ATCustom_WP77_getCmd+0x8e>
 8003426:	bf00      	nop
 8003428:	2000015c 	.word	0x2000015c
 800342c:	20001372 	.word	0x20001372
 8003430:	08022361 	.word	0x08022361
 8003434:	08022369 	.word	0x08022369
 8003438:	20008ef8 	.word	0x20008ef8
 800343c:	20001008 	.word	0x20001008
 8003440:	20001760 	.word	0x20001760
 8003444:	08022395 	.word	0x08022395

08003448 <ATCustom_WP77_extractElement>:
{
 8003448:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter ATCustom_WP77_extractElement()")
 800344a:	4842      	ldr	r0, [pc, #264]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
{
 800344c:	460d      	mov	r5, r1
  PRINT_API("enter ATCustom_WP77_extractElement()")
 800344e:	4942      	ldr	r1, [pc, #264]	; (8003558 <ATCustom_WP77_extractElement+0x110>)
{
 8003450:	4614      	mov	r4, r2
  PRINT_API("enter ATCustom_WP77_extractElement()")
 8003452:	f019 fda1 	bl	801cf98 <strcpy>
 8003456:	483f      	ldr	r0, [pc, #252]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 8003458:	f014 fd6c 	bl	8017f34 <crs_strlen>
 800345c:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 800345e:	b283      	uxth	r3, r0
 8003460:	2104      	movs	r1, #4
 8003462:	2001      	movs	r0, #1
 8003464:	f014 fda4 	bl	8017fb0 <traceIF_itmPrint>
 8003468:	483a      	ldr	r0, [pc, #232]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 800346a:	f014 fd63 	bl	8017f34 <crs_strlen>
 800346e:	4a39      	ldr	r2, [pc, #228]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 8003470:	b283      	uxth	r3, r0
 8003472:	2104      	movs	r1, #4
 8003474:	2001      	movs	r0, #1
 8003476:	f014 ffc1 	bl	80183fc <traceIF_uartPrint>
  PRINT_DBG("input message: size=%d ", p_msg_in->size)
 800347a:	f8b5 27d0 	ldrh.w	r2, [r5, #2000]	; 0x7d0
 800347e:	4937      	ldr	r1, [pc, #220]	; (800355c <ATCustom_WP77_extractElement+0x114>)
 8003480:	4834      	ldr	r0, [pc, #208]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 8003482:	f019 fd19 	bl	801ceb8 <sprintf>
 8003486:	4833      	ldr	r0, [pc, #204]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 8003488:	f014 fd54 	bl	8017f34 <crs_strlen>
 800348c:	4a31      	ldr	r2, [pc, #196]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 800348e:	b283      	uxth	r3, r0
 8003490:	2102      	movs	r1, #2
 8003492:	2001      	movs	r0, #1
 8003494:	f014 fd8c 	bl	8017fb0 <traceIF_itmPrint>
 8003498:	482e      	ldr	r0, [pc, #184]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 800349a:	f014 fd4b 	bl	8017f34 <crs_strlen>
 800349e:	4a2d      	ldr	r2, [pc, #180]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 80034a0:	b283      	uxth	r3, r0
 80034a2:	2102      	movs	r1, #2
 80034a4:	2001      	movs	r0, #1
 80034a6:	f014 ffa9 	bl	80183fc <traceIF_uartPrint>
  if (*p_parseIndex == 0U)
 80034aa:	8823      	ldrh	r3, [r4, #0]
 80034ac:	b1a3      	cbz	r3, 80034d8 <ATCustom_WP77_extractElement+0x90>
  element_infos->str_start_idx = *p_parseIndex;
 80034ae:	8823      	ldrh	r3, [r4, #0]
  if (*p_parseIndex >= p_msg_in->size)
 80034b0:	f8b5 27d0 	ldrh.w	r2, [r5, #2000]	; 0x7d0
  element_infos->str_start_idx = *p_parseIndex;
 80034b4:	8163      	strh	r3, [r4, #10]
  element_infos->str_size = 0U;
 80034b6:	2000      	movs	r0, #0
  if (*p_parseIndex >= p_msg_in->size)
 80034b8:	429a      	cmp	r2, r3
  element_infos->str_end_idx = *p_parseIndex;
 80034ba:	81a3      	strh	r3, [r4, #12]
  element_infos->str_size = 0U;
 80034bc:	81e0      	strh	r0, [r4, #14]
  if (*p_parseIndex >= p_msg_in->size)
 80034be:	d944      	bls.n	800354a <ATCustom_WP77_extractElement+0x102>
  at_endmsg_t retval_msg_end_detected = ATENDMSG_NO;
 80034c0:	2001      	movs	r0, #1
    switch (p_msg_in->buffer[*p_parseIndex])
 80034c2:	8823      	ldrh	r3, [r4, #0]
 80034c4:	5cea      	ldrb	r2, [r5, r3]
 80034c6:	2a2c      	cmp	r2, #44	; 0x2c
 80034c8:	d02b      	beq.n	8003522 <ATCustom_WP77_extractElement+0xda>
 80034ca:	2a3a      	cmp	r2, #58	; 0x3a
 80034cc:	d029      	beq.n	8003522 <ATCustom_WP77_extractElement+0xda>
 80034ce:	2a0d      	cmp	r2, #13
 80034d0:	d12a      	bne.n	8003528 <ATCustom_WP77_extractElement+0xe0>
 80034d2:	2201      	movs	r2, #1
 80034d4:	2000      	movs	r0, #0
 80034d6:	e02c      	b.n	8003532 <ATCustom_WP77_extractElement+0xea>
    if ((p_msg_in->buffer[0] == (AT_CHAR_t)('\r')) && (p_msg_in->buffer[1] == (AT_CHAR_t)('\n')))
 80034d8:	8829      	ldrh	r1, [r5, #0]
 80034da:	f640 220d 	movw	r2, #2573	; 0xa0d
 80034de:	4291      	cmp	r1, r2
 80034e0:	d117      	bne.n	8003512 <ATCustom_WP77_extractElement+0xca>
      PRINT_DBG("cmd init sequence <CR><LF> found - break")
 80034e2:	491f      	ldr	r1, [pc, #124]	; (8003560 <ATCustom_WP77_extractElement+0x118>)
 80034e4:	481b      	ldr	r0, [pc, #108]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 80034e6:	f019 fd57 	bl	801cf98 <strcpy>
 80034ea:	481a      	ldr	r0, [pc, #104]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 80034ec:	f014 fd22 	bl	8017f34 <crs_strlen>
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 80034f2:	b283      	uxth	r3, r0
 80034f4:	2102      	movs	r1, #2
 80034f6:	2001      	movs	r0, #1
 80034f8:	f014 fd5a 	bl	8017fb0 <traceIF_itmPrint>
 80034fc:	4815      	ldr	r0, [pc, #84]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 80034fe:	f014 fd19 	bl	8017f34 <crs_strlen>
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <ATCustom_WP77_extractElement+0x10c>)
 8003504:	b283      	uxth	r3, r0
 8003506:	2102      	movs	r1, #2
 8003508:	2001      	movs	r0, #1
 800350a:	f014 ff77 	bl	80183fc <traceIF_uartPrint>
      *p_parseIndex = 2U;
 800350e:	2302      	movs	r3, #2
 8003510:	8023      	strh	r3, [r4, #0]
    for (idx = start_idx; (idx < (p_msg_in->size - 1U)) && (exit_loop == false); idx++)
 8003512:	f8b5 27d0 	ldrh.w	r2, [r5, #2000]	; 0x7d0
 8003516:	3a01      	subs	r2, #1
 8003518:	4293      	cmp	r3, r2
 800351a:	d2c8      	bcs.n	80034ae <ATCustom_WP77_extractElement+0x66>
 800351c:	3301      	adds	r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	e7fa      	b.n	8003518 <ATCustom_WP77_extractElement+0xd0>
    	if (element_infos->cmd_id_received != CMD_AT_ORP)
 8003522:	6862      	ldr	r2, [r4, #4]
 8003524:	2a47      	cmp	r2, #71	; 0x47
 8003526:	d111      	bne.n	800354c <ATCustom_WP77_extractElement+0x104>
        element_infos->str_size++;
 8003528:	89e2      	ldrh	r2, [r4, #14]
        element_infos->str_end_idx = *p_parseIndex;
 800352a:	81a3      	strh	r3, [r4, #12]
        element_infos->str_size++;
 800352c:	3201      	adds	r2, #1
 800352e:	81e2      	strh	r2, [r4, #14]
        break;
 8003530:	2200      	movs	r2, #0
    (*p_parseIndex)++;
 8003532:	3301      	adds	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	8023      	strh	r3, [r4, #0]
    if (*p_parseIndex >= p_msg_in->size)
 8003538:	f8b5 17d0 	ldrh.w	r1, [r5, #2000]	; 0x7d0
 800353c:	4299      	cmp	r1, r3
 800353e:	d907      	bls.n	8003550 <ATCustom_WP77_extractElement+0x108>
  } while (exit_loop == false);
 8003540:	2a00      	cmp	r2, #0
 8003542:	d0be      	beq.n	80034c2 <ATCustom_WP77_extractElement+0x7a>
  element_infos->param_rank = (element_infos->param_rank + 1U);
 8003544:	8923      	ldrh	r3, [r4, #8]
 8003546:	3301      	adds	r3, #1
 8003548:	8123      	strh	r3, [r4, #8]
}
 800354a:	bd38      	pop	{r3, r4, r5, pc}
    		exit_loop = true;
 800354c:	2201      	movs	r2, #1
 800354e:	e7f0      	b.n	8003532 <ATCustom_WP77_extractElement+0xea>
      retval_msg_end_detected = ATENDMSG_YES;
 8003550:	2000      	movs	r0, #0
 8003552:	e7f7      	b.n	8003544 <ATCustom_WP77_extractElement+0xfc>
 8003554:	20008ef8 	.word	0x20008ef8
 8003558:	080223bf 	.word	0x080223bf
 800355c:	080223ef 	.word	0x080223ef
 8003560:	0802240e 	.word	0x0802240e

08003564 <ATCustom_WP77_analyzeCmd>:
{
 8003564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003568:	4604      	mov	r4, r0
 800356a:	460e      	mov	r6, r1
  PRINT_API("enter ATCustom_WP77_analyzeCmd()")
 800356c:	48c0      	ldr	r0, [pc, #768]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800356e:	49c1      	ldr	r1, [pc, #772]	; (8003874 <ATCustom_WP77_analyzeCmd+0x310>)
 8003570:	4fc1      	ldr	r7, [pc, #772]	; (8003878 <ATCustom_WP77_analyzeCmd+0x314>)
{
 8003572:	4615      	mov	r5, r2
  PRINT_API("enter ATCustom_WP77_analyzeCmd()")
 8003574:	f019 fd10 	bl	801cf98 <strcpy>
 8003578:	48bd      	ldr	r0, [pc, #756]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800357a:	f014 fcdb 	bl	8017f34 <crs_strlen>
 800357e:	4abc      	ldr	r2, [pc, #752]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003580:	b283      	uxth	r3, r0
 8003582:	2104      	movs	r1, #4
 8003584:	2001      	movs	r0, #1
 8003586:	f014 fd13 	bl	8017fb0 <traceIF_itmPrint>
 800358a:	48b9      	ldr	r0, [pc, #740]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800358c:	f014 fcd2 	bl	8017f34 <crs_strlen>
 8003590:	4ab7      	ldr	r2, [pc, #732]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003592:	b283      	uxth	r3, r0
 8003594:	2104      	movs	r1, #4
 8003596:	2001      	movs	r0, #1
 8003598:	f014 ff30 	bl	80183fc <traceIF_uartPrint>
  if (ATSTATUS_OK != atcm_searchCmdInLUT(&WP77_ctxt, p_atp_ctxt, p_msg_in, element_infos))
 800359c:	48b6      	ldr	r0, [pc, #728]	; (8003878 <ATCustom_WP77_analyzeCmd+0x314>)
 800359e:	462b      	mov	r3, r5
 80035a0:	4632      	mov	r2, r6
 80035a2:	f104 0110 	add.w	r1, r4, #16
 80035a6:	f006 f8a9 	bl	80096fc <atcm_searchCmdInLUT>
 80035aa:	b300      	cbz	r0, 80035ee <ATCustom_WP77_analyzeCmd+0x8a>
    retval = atcm_check_text_line_cmd(&WP77_ctxt, p_at_ctxt, p_msg_in, element_infos);
 80035ac:	462b      	mov	r3, r5
 80035ae:	4632      	mov	r2, r6
 80035b0:	4621      	mov	r1, r4
 80035b2:	4638      	mov	r0, r7
 80035b4:	f006 f8fe 	bl	80097b4 <atcm_check_text_line_cmd>
    if (retval == ATACTION_RSP_NO_ACTION)
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f040 80df 	bne.w	800377c <ATCustom_WP77_analyzeCmd+0x218>
          PRINT_DBG("receive an un-expected line... is it a text line ?")
 80035be:	49af      	ldr	r1, [pc, #700]	; (800387c <ATCustom_WP77_analyzeCmd+0x318>)
 80035c0:	48ab      	ldr	r0, [pc, #684]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80035c2:	f019 fce9 	bl	801cf98 <strcpy>
 80035c6:	48aa      	ldr	r0, [pc, #680]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80035c8:	f014 fcb4 	bl	8017f34 <crs_strlen>
 80035cc:	4aa8      	ldr	r2, [pc, #672]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80035ce:	b283      	uxth	r3, r0
 80035d0:	2102      	movs	r1, #2
 80035d2:	2001      	movs	r0, #1
 80035d4:	f014 fcec 	bl	8017fb0 <traceIF_itmPrint>
 80035d8:	48a5      	ldr	r0, [pc, #660]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80035da:	f014 fcab 	bl	8017f34 <crs_strlen>
 80035de:	4aa4      	ldr	r2, [pc, #656]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80035e0:	b283      	uxth	r3, r0
 80035e2:	2102      	movs	r1, #2
 80035e4:	2001      	movs	r0, #1
 80035e6:	f014 ff09 	bl	80183fc <traceIF_uartPrint>
          retval = ATACTION_RSP_IGNORED;
 80035ea:	2010      	movs	r0, #16
 80035ec:	e0c6      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
    switch (element_infos->cmd_id_received)
 80035ee:	686b      	ldr	r3, [r5, #4]
 80035f0:	2b47      	cmp	r3, #71	; 0x47
 80035f2:	f200 8097 	bhi.w	8003724 <ATCustom_WP77_analyzeCmd+0x1c0>
 80035f6:	2b47      	cmp	r3, #71	; 0x47
 80035f8:	f200 8173 	bhi.w	80038e2 <ATCustom_WP77_analyzeCmd+0x37e>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <ATCustom_WP77_analyzeCmd+0xa0>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	080035eb 	.word	0x080035eb
 8003608:	0800372f 	.word	0x0800372f
 800360c:	080037e7 	.word	0x080037e7
 8003610:	0800372b 	.word	0x0800372b
 8003614:	0800372b 	.word	0x0800372b
 8003618:	080038d3 	.word	0x080038d3
 800361c:	0800372b 	.word	0x0800372b
 8003620:	0800372b 	.word	0x0800372b
 8003624:	0800372b 	.word	0x0800372b
 8003628:	080038d3 	.word	0x080038d3
 800362c:	080038d3 	.word	0x080038d3
 8003630:	080038e3 	.word	0x080038e3
 8003634:	080038e3 	.word	0x080038e3
 8003638:	080038e3 	.word	0x080038e3
 800363c:	080038e3 	.word	0x080038e3
 8003640:	080038e3 	.word	0x080038e3
 8003644:	080038e3 	.word	0x080038e3
 8003648:	080038e3 	.word	0x080038e3
 800364c:	0800383d 	.word	0x0800383d
 8003650:	0800383d 	.word	0x0800383d
 8003654:	080038e3 	.word	0x080038e3
 8003658:	080038e3 	.word	0x080038e3
 800365c:	080038e3 	.word	0x080038e3
 8003660:	08003819 	.word	0x08003819
 8003664:	08003819 	.word	0x08003819
 8003668:	08003819 	.word	0x08003819
 800366c:	080038e3 	.word	0x080038e3
 8003670:	0800381f 	.word	0x0800381f
 8003674:	080038e3 	.word	0x080038e3
 8003678:	080038e3 	.word	0x080038e3
 800367c:	08003919 	.word	0x08003919
 8003680:	080038e3 	.word	0x080038e3
 8003684:	080038e3 	.word	0x080038e3
 8003688:	080038e3 	.word	0x080038e3
 800368c:	08003919 	.word	0x08003919
 8003690:	08003919 	.word	0x08003919
 8003694:	080038e3 	.word	0x080038e3
 8003698:	080038e3 	.word	0x080038e3
 800369c:	080038e3 	.word	0x080038e3
 80036a0:	080038e3 	.word	0x080038e3
 80036a4:	080038e3 	.word	0x080038e3
 80036a8:	080038e3 	.word	0x080038e3
 80036ac:	080038e3 	.word	0x080038e3
 80036b0:	080038e3 	.word	0x080038e3
 80036b4:	080038e3 	.word	0x080038e3
 80036b8:	080038e3 	.word	0x080038e3
 80036bc:	080038e3 	.word	0x080038e3
 80036c0:	080038e3 	.word	0x080038e3
 80036c4:	080038e3 	.word	0x080038e3
 80036c8:	080038e3 	.word	0x080038e3
 80036cc:	080038e3 	.word	0x080038e3
 80036d0:	080038e3 	.word	0x080038e3
 80036d4:	080038e3 	.word	0x080038e3
 80036d8:	080038e3 	.word	0x080038e3
 80036dc:	08003919 	.word	0x08003919
 80036e0:	08003919 	.word	0x08003919
 80036e4:	08003919 	.word	0x08003919
 80036e8:	08003919 	.word	0x08003919
 80036ec:	08003895 	.word	0x08003895
 80036f0:	080038c9 	.word	0x080038c9
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	080038e3 	.word	0x080038e3
 80036fc:	08003919 	.word	0x08003919
 8003700:	08003919 	.word	0x08003919
 8003704:	080038e3 	.word	0x080038e3
 8003708:	080038e3 	.word	0x080038e3
 800370c:	080038e3 	.word	0x080038e3
 8003710:	08003823 	.word	0x08003823
 8003714:	0800383d 	.word	0x0800383d
 8003718:	08003841 	.word	0x08003841
 800371c:	080035eb 	.word	0x080035eb
 8003720:	08003919 	.word	0x08003919
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	f040 80dc 	bne.w	80038e2 <ATCustom_WP77_analyzeCmd+0x37e>
        retval = ATACTION_RSP_ERROR;
 800372a:	2004      	movs	r0, #4
 800372c:	e026      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
        if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_DATA_SUSPEND)
 800372e:	8a23      	ldrh	r3, [r4, #16]
 8003730:	2b7e      	cmp	r3, #126	; 0x7e
 8003732:	d115      	bne.n	8003760 <ATCustom_WP77_analyzeCmd+0x1fc>
          PRINT_INFO("MODEM SWITCHES TO COMMAND MODE")
 8003734:	4952      	ldr	r1, [pc, #328]	; (8003880 <ATCustom_WP77_analyzeCmd+0x31c>)
 8003736:	484e      	ldr	r0, [pc, #312]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003738:	f019 fc2e 	bl	801cf98 <strcpy>
 800373c:	484c      	ldr	r0, [pc, #304]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800373e:	f014 fbf9 	bl	8017f34 <crs_strlen>
 8003742:	2101      	movs	r1, #1
 8003744:	b283      	uxth	r3, r0
 8003746:	4a4a      	ldr	r2, [pc, #296]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003748:	4608      	mov	r0, r1
 800374a:	f014 fc31 	bl	8017fb0 <traceIF_itmPrint>
 800374e:	4848      	ldr	r0, [pc, #288]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003750:	f014 fbf0 	bl	8017f34 <crs_strlen>
 8003754:	2101      	movs	r1, #1
 8003756:	b283      	uxth	r3, r0
 8003758:	4a45      	ldr	r2, [pc, #276]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800375a:	4608      	mov	r0, r1
 800375c:	f014 fe4e 	bl	80183fc <traceIF_uartPrint>
        if ((p_atp_ctxt->current_SID == (at_msg_t) SID_CS_POWER_ON) ||
 8003760:	8a23      	ldrh	r3, [r4, #16]
 8003762:	2b65      	cmp	r3, #101	; 0x65
 8003764:	d001      	beq.n	800376a <ATCustom_WP77_analyzeCmd+0x206>
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d104      	bne.n	8003774 <ATCustom_WP77_analyzeCmd+0x210>
          if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT)
 800376a:	69e3      	ldr	r3, [r4, #28]
 800376c:	b943      	cbnz	r3, 8003780 <ATCustom_WP77_analyzeCmd+0x21c>
            WP77_ctxt.persist.modem_at_ready = AT_TRUE;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3518 	strb.w	r3, [r7, #1304]	; 0x518
        if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_PING_IP_ADDRESS)
 8003774:	8a23      	ldrh	r3, [r4, #16]
 8003776:	2b84      	cmp	r3, #132	; 0x84
 8003778:	d01b      	beq.n	80037b2 <ATCustom_WP77_analyzeCmd+0x24e>
        retval = ATACTION_RSP_FRC_END;
 800377a:	2001      	movs	r0, #1
}
 800377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_ATE)
 8003780:	2b28      	cmp	r3, #40	; 0x28
 8003782:	d1f7      	bne.n	8003774 <ATCustom_WP77_analyzeCmd+0x210>
            PRINT_DBG("Echo successfully disabled")
 8003784:	493f      	ldr	r1, [pc, #252]	; (8003884 <ATCustom_WP77_analyzeCmd+0x320>)
 8003786:	483a      	ldr	r0, [pc, #232]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003788:	f019 fc06 	bl	801cf98 <strcpy>
 800378c:	4838      	ldr	r0, [pc, #224]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800378e:	f014 fbd1 	bl	8017f34 <crs_strlen>
 8003792:	4a37      	ldr	r2, [pc, #220]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003794:	b283      	uxth	r3, r0
 8003796:	2102      	movs	r1, #2
 8003798:	2001      	movs	r0, #1
 800379a:	f014 fc09 	bl	8017fb0 <traceIF_itmPrint>
 800379e:	4834      	ldr	r0, [pc, #208]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037a0:	f014 fbc8 	bl	8017f34 <crs_strlen>
 80037a4:	4a32      	ldr	r2, [pc, #200]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037a6:	b283      	uxth	r3, r0
 80037a8:	2102      	movs	r1, #2
 80037aa:	2001      	movs	r0, #1
 80037ac:	f014 fe26 	bl	80183fc <traceIF_uartPrint>
 80037b0:	e7e0      	b.n	8003774 <ATCustom_WP77_analyzeCmd+0x210>
          PRINT_DBG("this is a valid PING request")
 80037b2:	4935      	ldr	r1, [pc, #212]	; (8003888 <ATCustom_WP77_analyzeCmd+0x324>)
 80037b4:	482e      	ldr	r0, [pc, #184]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037b6:	f019 fbef 	bl	801cf98 <strcpy>
 80037ba:	482d      	ldr	r0, [pc, #180]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037bc:	f014 fbba 	bl	8017f34 <crs_strlen>
 80037c0:	4a2b      	ldr	r2, [pc, #172]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037c2:	b283      	uxth	r3, r0
 80037c4:	2102      	movs	r1, #2
 80037c6:	2001      	movs	r0, #1
 80037c8:	f014 fbf2 	bl	8017fb0 <traceIF_itmPrint>
 80037cc:	4828      	ldr	r0, [pc, #160]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037ce:	f014 fbb1 	bl	8017f34 <crs_strlen>
 80037d2:	4a27      	ldr	r2, [pc, #156]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037d4:	b283      	uxth	r3, r0
 80037d6:	2102      	movs	r1, #2
 80037d8:	2001      	movs	r0, #1
 80037da:	f014 fe0f 	bl	80183fc <traceIF_uartPrint>
          atcm_validate_ping_request(&WP77_ctxt);
 80037de:	4826      	ldr	r0, [pc, #152]	; (8003878 <ATCustom_WP77_analyzeCmd+0x314>)
 80037e0:	f005 fda3 	bl	800932a <atcm_validate_ping_request>
 80037e4:	e7c9      	b.n	800377a <ATCustom_WP77_analyzeCmd+0x216>
        PRINT_INFO("MODEM SWITCHES TO DATA MODE")
 80037e6:	4929      	ldr	r1, [pc, #164]	; (800388c <ATCustom_WP77_analyzeCmd+0x328>)
 80037e8:	4821      	ldr	r0, [pc, #132]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037ea:	f019 fbd5 	bl	801cf98 <strcpy>
 80037ee:	4820      	ldr	r0, [pc, #128]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037f0:	f014 fba0 	bl	8017f34 <crs_strlen>
 80037f4:	2101      	movs	r1, #1
 80037f6:	b283      	uxth	r3, r0
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 80037fa:	4608      	mov	r0, r1
 80037fc:	f014 fbd8 	bl	8017fb0 <traceIF_itmPrint>
 8003800:	481b      	ldr	r0, [pc, #108]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003802:	f014 fb97 	bl	8017f34 <crs_strlen>
 8003806:	2101      	movs	r1, #1
 8003808:	b283      	uxth	r3, r0
 800380a:	4a19      	ldr	r2, [pc, #100]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800380c:	4608      	mov	r0, r1
 800380e:	f014 fdf5 	bl	80183fc <traceIF_uartPrint>
        retval = (at_action_rsp_t)(ATACTION_RSP_FLAG_DATA_MODE | ATACTION_RSP_FRC_END);
 8003812:	f248 0001 	movw	r0, #32769	; 0x8001
        break;
 8003816:	e7b1      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
        if (element_infos->cmd_id_received == p_atp_ctxt->current_atcmd.id)
 8003818:	69e2      	ldr	r2, [r4, #28]
 800381a:	4293      	cmp	r3, r2
 800381c:	d07c      	beq.n	8003918 <ATCustom_WP77_analyzeCmd+0x3b4>
        retval = ATACTION_RSP_URC_FORWARDED;
 800381e:	2040      	movs	r0, #64	; 0x40
        break;
 8003820:	e7ac      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
        if ((p_atp_ctxt->current_SID == (at_msg_t) SID_CS_POWER_ON) ||
 8003822:	8a23      	ldrh	r3, [r4, #16]
        WP77_ctxt.persist.modem_at_ready = AT_TRUE;
 8003824:	2101      	movs	r1, #1
        if ((p_atp_ctxt->current_SID == (at_msg_t) SID_CS_POWER_ON) ||
 8003826:	2b65      	cmp	r3, #101	; 0x65
        WP77_ctxt.persist.modem_at_ready = AT_TRUE;
 8003828:	f887 1518 	strb.w	r1, [r7, #1304]	; 0x518
        if ((p_atp_ctxt->current_SID == (at_msg_t) SID_CS_POWER_ON) ||
 800382c:	d006      	beq.n	800383c <ATCustom_WP77_analyzeCmd+0x2d8>
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d004      	beq.n	800383c <ATCustom_WP77_analyzeCmd+0x2d8>
        if (atcm_modem_event_received(&WP77_ctxt, CS_MDMEVENT_POWER_DOWN) == AT_TRUE)
 8003832:	4811      	ldr	r0, [pc, #68]	; (8003878 <ATCustom_WP77_analyzeCmd+0x314>)
 8003834:	f005 fd8f 	bl	8009356 <atcm_modem_event_received>
 8003838:	2800      	cmp	r0, #0
 800383a:	d1f0      	bne.n	800381e <ATCustom_WP77_analyzeCmd+0x2ba>
            retval = ATACTION_RSP_URC_IGNORED;
 800383c:	2020      	movs	r0, #32
 800383e:	e79d      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
        PRINT_DBG("MODEM POWERED DOWN EVENT DETECTED")
 8003840:	4913      	ldr	r1, [pc, #76]	; (8003890 <ATCustom_WP77_analyzeCmd+0x32c>)
 8003842:	480b      	ldr	r0, [pc, #44]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003844:	f019 fba8 	bl	801cf98 <strcpy>
 8003848:	4809      	ldr	r0, [pc, #36]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800384a:	f014 fb73 	bl	8017f34 <crs_strlen>
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003850:	b283      	uxth	r3, r0
 8003852:	2102      	movs	r1, #2
 8003854:	2001      	movs	r0, #1
 8003856:	f014 fbab 	bl	8017fb0 <traceIF_itmPrint>
 800385a:	4805      	ldr	r0, [pc, #20]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 800385c:	f014 fb6a 	bl	8017f34 <crs_strlen>
 8003860:	2102      	movs	r1, #2
 8003862:	b283      	uxth	r3, r0
 8003864:	4a02      	ldr	r2, [pc, #8]	; (8003870 <ATCustom_WP77_analyzeCmd+0x30c>)
 8003866:	2001      	movs	r0, #1
 8003868:	f014 fdc8 	bl	80183fc <traceIF_uartPrint>
        if (atcm_modem_event_received(&WP77_ctxt, CS_MDMEVENT_POWER_DOWN) == AT_TRUE)
 800386c:	2102      	movs	r1, #2
 800386e:	e7e0      	b.n	8003832 <ATCustom_WP77_analyzeCmd+0x2ce>
 8003870:	20008ef8 	.word	0x20008ef8
 8003874:	0802243e 	.word	0x0802243e
 8003878:	20001008 	.word	0x20001008
 800387c:	0802246a 	.word	0x0802246a
 8003880:	080224a4 	.word	0x080224a4
 8003884:	080224ca 	.word	0x080224ca
 8003888:	080224ec 	.word	0x080224ec
 800388c:	08022510 	.word	0x08022510
 8003890:	08022533 	.word	0x08022533
        PRINT_INFO(" SOCKET PROMPT RECEIVED")
 8003894:	4921      	ldr	r1, [pc, #132]	; (800391c <ATCustom_WP77_analyzeCmd+0x3b8>)
 8003896:	4822      	ldr	r0, [pc, #136]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 8003898:	f019 fb7e 	bl	801cf98 <strcpy>
 800389c:	4820      	ldr	r0, [pc, #128]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 800389e:	f014 fb49 	bl	8017f34 <crs_strlen>
 80038a2:	2101      	movs	r1, #1
 80038a4:	b283      	uxth	r3, r0
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 80038a8:	4608      	mov	r0, r1
 80038aa:	f014 fb81 	bl	8017fb0 <traceIF_itmPrint>
 80038ae:	481c      	ldr	r0, [pc, #112]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 80038b0:	f014 fb40 	bl	8017f34 <crs_strlen>
 80038b4:	2101      	movs	r1, #1
 80038b6:	b283      	uxth	r3, r0
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 80038ba:	4608      	mov	r0, r1
 80038bc:	f014 fd9e 	bl	80183fc <traceIF_uartPrint>
        if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_SEND_DATA)
 80038c0:	8a23      	ldrh	r3, [r4, #16]
 80038c2:	2b7a      	cmp	r3, #122	; 0x7a
 80038c4:	d1ba      	bne.n	800383c <ATCustom_WP77_analyzeCmd+0x2d8>
 80038c6:	e758      	b.n	800377a <ATCustom_WP77_analyzeCmd+0x216>
        if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_SEND_DATA)
 80038c8:	8a23      	ldrh	r3, [r4, #16]
 80038ca:	2b7a      	cmp	r3, #122	; 0x7a
 80038cc:	f47f af2d 	bne.w	800372a <ATCustom_WP77_analyzeCmd+0x1c6>
 80038d0:	e753      	b.n	800377a <ATCustom_WP77_analyzeCmd+0x216>
        retval = fRspAnalyze_Error_WP77(p_at_ctxt, &WP77_ctxt, p_msg_in, element_infos);
 80038d2:	462b      	mov	r3, r5
 80038d4:	4632      	mov	r2, r6
 80038d6:	4620      	mov	r0, r4
 80038d8:	4912      	ldr	r1, [pc, #72]	; (8003924 <ATCustom_WP77_analyzeCmd+0x3c0>)
}
 80038da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        retval = fRspAnalyze_Error_WP77(p_at_ctxt, &WP77_ctxt, p_msg_in, element_infos);
 80038de:	f7fe bb23 	b.w	8001f28 <fRspAnalyze_Error_WP77>
        if (element_infos->cmd_id_received == p_atp_ctxt->current_atcmd.id)
 80038e2:	69e2      	ldr	r2, [r4, #28]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d017      	beq.n	8003918 <ATCustom_WP77_analyzeCmd+0x3b4>
        else if (p_atp_ctxt->current_atcmd.type == ATTYPE_RAW_CMD)
 80038e8:	8b23      	ldrh	r3, [r4, #24]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	f43f ae7d 	beq.w	80035ea <ATCustom_WP77_analyzeCmd+0x86>
          PRINT_INFO("UNEXPECTED MESSAGE RECEIVED")
 80038f0:	490d      	ldr	r1, [pc, #52]	; (8003928 <ATCustom_WP77_analyzeCmd+0x3c4>)
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 80038f4:	f019 fb50 	bl	801cf98 <strcpy>
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 80038fa:	f014 fb1b 	bl	8017f34 <crs_strlen>
 80038fe:	2101      	movs	r1, #1
 8003900:	b283      	uxth	r3, r0
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 8003904:	4608      	mov	r0, r1
 8003906:	f014 fb53 	bl	8017fb0 <traceIF_itmPrint>
 800390a:	4805      	ldr	r0, [pc, #20]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 800390c:	f014 fb12 	bl	8017f34 <crs_strlen>
 8003910:	4a03      	ldr	r2, [pc, #12]	; (8003920 <ATCustom_WP77_analyzeCmd+0x3bc>)
 8003912:	b283      	uxth	r3, r0
 8003914:	2101      	movs	r1, #1
 8003916:	e665      	b.n	80035e4 <ATCustom_WP77_analyzeCmd+0x80>
          retval = ATACTION_RSP_INTERMEDIATE;
 8003918:	2008      	movs	r0, #8
 800391a:	e72f      	b.n	800377c <ATCustom_WP77_analyzeCmd+0x218>
 800391c:	0802255c 	.word	0x0802255c
 8003920:	20008ef8 	.word	0x20008ef8
 8003924:	20001008 	.word	0x20001008
 8003928:	0802257b 	.word	0x0802257b

0800392c <ATCustom_WP77_analyzeParam>:
{
 800392c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  PRINT_API("enter ATCustom_WP77_analyzeParam()")
 8003930:	4c13      	ldr	r4, [pc, #76]	; (8003980 <ATCustom_WP77_analyzeParam+0x54>)
{
 8003932:	4606      	mov	r6, r0
 8003934:	460f      	mov	r7, r1
  PRINT_API("enter ATCustom_WP77_analyzeParam()")
 8003936:	4620      	mov	r0, r4
 8003938:	4912      	ldr	r1, [pc, #72]	; (8003984 <ATCustom_WP77_analyzeParam+0x58>)
{
 800393a:	4615      	mov	r5, r2
  PRINT_API("enter ATCustom_WP77_analyzeParam()")
 800393c:	f019 fb2c 	bl	801cf98 <strcpy>
 8003940:	4620      	mov	r0, r4
 8003942:	f014 faf7 	bl	8017f34 <crs_strlen>
 8003946:	4622      	mov	r2, r4
 8003948:	b283      	uxth	r3, r0
 800394a:	2104      	movs	r1, #4
 800394c:	2001      	movs	r0, #1
 800394e:	f014 fb2f 	bl	8017fb0 <traceIF_itmPrint>
 8003952:	4620      	mov	r0, r4
 8003954:	f014 faee 	bl	8017f34 <crs_strlen>
 8003958:	4622      	mov	r2, r4
  retval = (atcm_get_CmdAnalyzeFunc(&WP77_ctxt, element_infos->cmd_id_received))(p_at_ctxt,
 800395a:	4c0b      	ldr	r4, [pc, #44]	; (8003988 <ATCustom_WP77_analyzeParam+0x5c>)
  PRINT_API("enter ATCustom_WP77_analyzeParam()")
 800395c:	b283      	uxth	r3, r0
 800395e:	2104      	movs	r1, #4
 8003960:	2001      	movs	r0, #1
 8003962:	f014 fd4b 	bl	80183fc <traceIF_uartPrint>
  retval = (atcm_get_CmdAnalyzeFunc(&WP77_ctxt, element_infos->cmd_id_received))(p_at_ctxt,
 8003966:	6869      	ldr	r1, [r5, #4]
 8003968:	4620      	mov	r0, r4
 800396a:	f004 fe4d 	bl	8008608 <atcm_get_CmdAnalyzeFunc>
 800396e:	4686      	mov	lr, r0
 8003970:	462b      	mov	r3, r5
 8003972:	463a      	mov	r2, r7
 8003974:	4621      	mov	r1, r4
 8003976:	4630      	mov	r0, r6
 8003978:	46f4      	mov	ip, lr
}
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  retval = (atcm_get_CmdAnalyzeFunc(&WP77_ctxt, element_infos->cmd_id_received))(p_at_ctxt,
 800397e:	4760      	bx	ip
 8003980:	20008ef8 	.word	0x20008ef8
 8003984:	0802259e 	.word	0x0802259e
 8003988:	20001008 	.word	0x20001008

0800398c <ATCustom_WP77_terminateCmd>:
{
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
  PRINT_API("enter ATCustom_WP77_terminateCmd()")
 8003992:	482f      	ldr	r0, [pc, #188]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003994:	492f      	ldr	r1, [pc, #188]	; (8003a54 <ATCustom_WP77_terminateCmd+0xc8>)
 8003996:	f019 faff 	bl	801cf98 <strcpy>
 800399a:	482d      	ldr	r0, [pc, #180]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 800399c:	f014 faca 	bl	8017f34 <crs_strlen>
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 80039a2:	b283      	uxth	r3, r0
 80039a4:	2104      	movs	r1, #4
 80039a6:	2001      	movs	r0, #1
 80039a8:	f014 fb02 	bl	8017fb0 <traceIF_itmPrint>
 80039ac:	4828      	ldr	r0, [pc, #160]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 80039ae:	f014 fac1 	bl	8017f34 <crs_strlen>
 80039b2:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 80039b4:	b283      	uxth	r3, r0
 80039b6:	2104      	movs	r1, #4
 80039b8:	2001      	movs	r0, #1
 80039ba:	f014 fd1f 	bl	80183fc <traceIF_uartPrint>
  if (WP77_ctxt.socket_ctxt.socket_send_state != SocketSendState_No_Activity)
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <ATCustom_WP77_terminateCmd+0xcc>)
 80039c0:	f893 27e0 	ldrb.w	r2, [r3, #2016]	; 0x7e0
 80039c4:	b12a      	cbz	r2, 80039d2 <ATCustom_WP77_terminateCmd+0x46>
    if (p_atp_ctxt->current_SID != (at_msg_t) SID_CS_SEND_DATA)
 80039c6:	8822      	ldrh	r2, [r4, #0]
 80039c8:	2a7a      	cmp	r2, #122	; 0x7a
      WP77_ctxt.socket_ctxt.socket_send_state = SocketSendState_No_Activity;
 80039ca:	bf1c      	itt	ne
 80039cc:	2200      	movne	r2, #0
 80039ce:	f883 27e0 	strbne.w	r2, [r3, #2016]	; 0x7e0
      (p_atp_ctxt->current_atcmd.id == (at_msg_t) CMD_ATO) ||
 80039d2:	68e3      	ldr	r3, [r4, #12]
 80039d4:	3b1f      	subs	r3, #31
 80039d6:	2b0b      	cmp	r3, #11
 80039d8:	d820      	bhi.n	8003a1c <ATCustom_WP77_terminateCmd+0x90>
 80039da:	f640 1201 	movw	r2, #2305	; 0x901
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	07db      	lsls	r3, r3, #31
 80039e4:	d51a      	bpl.n	8003a1c <ATCustom_WP77_terminateCmd+0x90>
    if (element_infos->cmd_id_received == (at_msg_t) CMD_AT_CONNECT)
 80039e6:	686e      	ldr	r6, [r5, #4]
 80039e8:	2e02      	cmp	r6, #2
 80039ea:	d119      	bne.n	8003a20 <ATCustom_WP77_terminateCmd+0x94>
      p_atp_ctxt->is_final_cmd = 1U;
 80039ec:	2501      	movs	r5, #1
      PRINT_DBG("CONNECT received")
 80039ee:	491b      	ldr	r1, [pc, #108]	; (8003a5c <ATCustom_WP77_terminateCmd+0xd0>)
 80039f0:	4817      	ldr	r0, [pc, #92]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
      p_atp_ctxt->is_final_cmd = 1U;
 80039f2:	7125      	strb	r5, [r4, #4]
      PRINT_DBG("CONNECT received")
 80039f4:	f019 fad0 	bl	801cf98 <strcpy>
 80039f8:	4815      	ldr	r0, [pc, #84]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 80039fa:	f014 fa9b 	bl	8017f34 <crs_strlen>
 80039fe:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a00:	b283      	uxth	r3, r0
 8003a02:	4631      	mov	r1, r6
 8003a04:	4628      	mov	r0, r5
 8003a06:	f014 fad3 	bl	8017fb0 <traceIF_itmPrint>
 8003a0a:	4811      	ldr	r0, [pc, #68]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a0c:	f014 fa92 	bl	8017f34 <crs_strlen>
 8003a10:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a12:	b283      	uxth	r3, r0
 8003a14:	4631      	mov	r1, r6
 8003a16:	4628      	mov	r0, r5
 8003a18:	f014 fcf0 	bl	80183fc <traceIF_uartPrint>
  at_action_rsp_t retval = ATACTION_RSP_IGNORED;
 8003a1c:	2010      	movs	r0, #16
 8003a1e:	e016      	b.n	8003a4e <ATCustom_WP77_terminateCmd+0xc2>
      PRINT_ERR("expected CONNECT not received !!!")
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <ATCustom_WP77_terminateCmd+0xd4>)
 8003a22:	480b      	ldr	r0, [pc, #44]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a24:	f019 fab8 	bl	801cf98 <strcpy>
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a2a:	f014 fa83 	bl	8017f34 <crs_strlen>
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a30:	b283      	uxth	r3, r0
 8003a32:	2110      	movs	r1, #16
 8003a34:	2001      	movs	r0, #1
 8003a36:	f014 fabb 	bl	8017fb0 <traceIF_itmPrint>
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a3c:	f014 fa7a 	bl	8017f34 <crs_strlen>
 8003a40:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <ATCustom_WP77_terminateCmd+0xc4>)
 8003a42:	b283      	uxth	r3, r0
 8003a44:	2110      	movs	r1, #16
 8003a46:	2001      	movs	r0, #1
 8003a48:	f014 fcd8 	bl	80183fc <traceIF_uartPrint>
      retval = ATACTION_RSP_ERROR;
 8003a4c:	2004      	movs	r0, #4
}
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	20008ef8 	.word	0x20008ef8
 8003a54:	080225cc 	.word	0x080225cc
 8003a58:	20001008 	.word	0x20001008
 8003a5c:	080225fa 	.word	0x080225fa
 8003a60:	08022612 	.word	0x08022612

08003a64 <ATCustom_WP77_get_rsp>:
{
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	4607      	mov	r7, r0
 8003a68:	460c      	mov	r4, r1
  PRINT_API("enter ATCustom_WP77_get_rsp()")
 8003a6a:	482d      	ldr	r0, [pc, #180]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003a6c:	492d      	ldr	r1, [pc, #180]	; (8003b24 <ATCustom_WP77_get_rsp+0xc0>)
  retval = atcm_modem_get_rsp(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003a6e:	4e2e      	ldr	r6, [pc, #184]	; (8003b28 <ATCustom_WP77_get_rsp+0xc4>)
  PRINT_API("enter ATCustom_WP77_get_rsp()")
 8003a70:	f019 fa92 	bl	801cf98 <strcpy>
 8003a74:	482a      	ldr	r0, [pc, #168]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003a76:	f014 fa5d 	bl	8017f34 <crs_strlen>
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003a7c:	b283      	uxth	r3, r0
 8003a7e:	2104      	movs	r1, #4
 8003a80:	2001      	movs	r0, #1
 8003a82:	f014 fa95 	bl	8017fb0 <traceIF_itmPrint>
 8003a86:	4826      	ldr	r0, [pc, #152]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003a88:	f014 fa54 	bl	8017f34 <crs_strlen>
 8003a8c:	4a24      	ldr	r2, [pc, #144]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003a8e:	b283      	uxth	r3, r0
 8003a90:	2104      	movs	r1, #4
 8003a92:	2001      	movs	r0, #1
 8003a94:	f014 fcb2 	bl	80183fc <traceIF_uartPrint>
  retval = atcm_modem_get_rsp(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4639      	mov	r1, r7
 8003a9c:	4630      	mov	r0, r6
 8003a9e:	f004 fedb 	bl	8008858 <atcm_modem_get_rsp>
  switch (p_atp_ctxt->current_SID)
 8003aa2:	883b      	ldrh	r3, [r7, #0]
 8003aa4:	2b83      	cmp	r3, #131	; 0x83
  retval = atcm_modem_get_rsp(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003aa6:	4605      	mov	r5, r0
  switch (p_atp_ctxt->current_SID)
 8003aa8:	d006      	beq.n	8003ab8 <ATCustom_WP77_get_rsp+0x54>
 8003aaa:	2b84      	cmp	r3, #132	; 0x84
 8003aac:	d014      	beq.n	8003ad8 <ATCustom_WP77_get_rsp+0x74>
 8003aae:	2b66      	cmp	r3, #102	; 0x66
 8003ab0:	d10a      	bne.n	8003ac8 <ATCustom_WP77_get_rsp+0x64>
      WP77_modem_reset(&WP77_ctxt);
 8003ab2:	f7fe ffc7 	bl	8002a44 <WP77_modem_reset.constprop.0>
      break;
 8003ab6:	e007      	b.n	8003ac8 <ATCustom_WP77_get_rsp+0x64>
      if (DATAPACK_writeStruct(p_rsp_buf,
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <ATCustom_WP77_get_rsp+0xc8>)
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	2129      	movs	r1, #41	; 0x29
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f004 fa2e 	bl	8007f20 <DATAPACK_writeStruct>
 8003ac4:	b100      	cbz	r0, 8003ac8 <ATCustom_WP77_get_rsp+0x64>
        retval = ATSTATUS_OK;
 8003ac6:	2500      	movs	r5, #0
  atcm_reset_SID_context(&WP77_ctxt.SID_ctxt);
 8003ac8:	4819      	ldr	r0, [pc, #100]	; (8003b30 <ATCustom_WP77_get_rsp+0xcc>)
 8003aca:	f005 fcfd 	bl	80094c8 <atcm_reset_SID_context>
  atcm_reset_SOCKET_context(&WP77_ctxt);
 8003ace:	4816      	ldr	r0, [pc, #88]	; (8003b28 <ATCustom_WP77_get_rsp+0xc4>)
 8003ad0:	f005 fd86 	bl	80095e0 <atcm_reset_SOCKET_context>
}
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PRINT_DBG("Ping no report available yet - use PING_INVALID_INDEX")
 8003ad8:	4916      	ldr	r1, [pc, #88]	; (8003b34 <ATCustom_WP77_get_rsp+0xd0>)
 8003ada:	4811      	ldr	r0, [pc, #68]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003adc:	f019 fa5c 	bl	801cf98 <strcpy>
 8003ae0:	480f      	ldr	r0, [pc, #60]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003ae2:	f014 fa27 	bl	8017f34 <crs_strlen>
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003ae8:	b283      	uxth	r3, r0
 8003aea:	2102      	movs	r1, #2
 8003aec:	2001      	movs	r0, #1
 8003aee:	f014 fa5f 	bl	8017fb0 <traceIF_itmPrint>
 8003af2:	480b      	ldr	r0, [pc, #44]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003af4:	f014 fa1e 	bl	8017f34 <crs_strlen>
 8003af8:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <ATCustom_WP77_get_rsp+0xbc>)
 8003afa:	b283      	uxth	r3, r0
 8003afc:	2102      	movs	r1, #2
 8003afe:	2001      	movs	r0, #1
 8003b00:	f014 fc7c 	bl	80183fc <traceIF_uartPrint>
      (void) memset((void *)&WP77_ctxt.persist.ping_resp_urc, 0, sizeof(CS_Ping_response_t));
 8003b04:	2250      	movs	r2, #80	; 0x50
 8003b06:	2100      	movs	r1, #0
 8003b08:	f206 5064 	addw	r0, r6, #1380	; 0x564
 8003b0c:	f019 f9a4 	bl	801ce58 <memset>
      WP77_ctxt.persist.ping_resp_urc.index = PING_INVALID_INDEX;
 8003b10:	23ff      	movs	r3, #255	; 0xff
 8003b12:	f886 3564 	strb.w	r3, [r6, #1380]	; 0x564
      if (DATAPACK_writeStruct(p_rsp_buf,
 8003b16:	2250      	movs	r2, #80	; 0x50
 8003b18:	f206 5364 	addw	r3, r6, #1380	; 0x564
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	e7ce      	b.n	8003abe <ATCustom_WP77_get_rsp+0x5a>
 8003b20:	20008ef8 	.word	0x20008ef8
 8003b24:	08022641 	.word	0x08022641
 8003b28:	20001008 	.word	0x20001008
 8003b2c:	200001c8 	.word	0x200001c8
 8003b30:	200015d0 	.word	0x200015d0
 8003b34:	0802266a 	.word	0x0802266a

08003b38 <ATCustom_WP77_get_urc>:
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
  PRINT_API("enter ATCustom_WP77_get_urc()")
 8003b3a:	4c10      	ldr	r4, [pc, #64]	; (8003b7c <ATCustom_WP77_get_urc+0x44>)
{
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	460e      	mov	r6, r1
  PRINT_API("enter ATCustom_WP77_get_urc()")
 8003b40:	4620      	mov	r0, r4
 8003b42:	490f      	ldr	r1, [pc, #60]	; (8003b80 <ATCustom_WP77_get_urc+0x48>)
 8003b44:	f019 fa28 	bl	801cf98 <strcpy>
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f014 f9f3 	bl	8017f34 <crs_strlen>
 8003b4e:	4622      	mov	r2, r4
 8003b50:	b283      	uxth	r3, r0
 8003b52:	2104      	movs	r1, #4
 8003b54:	2001      	movs	r0, #1
 8003b56:	f014 fa2b 	bl	8017fb0 <traceIF_itmPrint>
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f014 f9ea 	bl	8017f34 <crs_strlen>
 8003b60:	4622      	mov	r2, r4
 8003b62:	b283      	uxth	r3, r0
 8003b64:	2104      	movs	r1, #4
 8003b66:	2001      	movs	r0, #1
 8003b68:	f014 fc48 	bl	80183fc <traceIF_uartPrint>
  retval = atcm_modem_get_urc(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4629      	mov	r1, r5
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <ATCustom_WP77_get_urc+0x4c>)
}
 8003b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  retval = atcm_modem_get_urc(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003b76:	f004 bf2f 	b.w	80089d8 <atcm_modem_get_urc>
 8003b7a:	bf00      	nop
 8003b7c:	20008ef8 	.word	0x20008ef8
 8003b80:	080226a7 	.word	0x080226a7
 8003b84:	20001008 	.word	0x20001008

08003b88 <ATCustom_WP77_get_error>:
{
 8003b88:	b570      	push	{r4, r5, r6, lr}
  PRINT_API("enter ATCustom_WP77_get_error()")
 8003b8a:	4c10      	ldr	r4, [pc, #64]	; (8003bcc <ATCustom_WP77_get_error+0x44>)
{
 8003b8c:	4605      	mov	r5, r0
 8003b8e:	460e      	mov	r6, r1
  PRINT_API("enter ATCustom_WP77_get_error()")
 8003b90:	4620      	mov	r0, r4
 8003b92:	490f      	ldr	r1, [pc, #60]	; (8003bd0 <ATCustom_WP77_get_error+0x48>)
 8003b94:	f019 fa00 	bl	801cf98 <strcpy>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f014 f9cb 	bl	8017f34 <crs_strlen>
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	b283      	uxth	r3, r0
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f014 fa03 	bl	8017fb0 <traceIF_itmPrint>
 8003baa:	4620      	mov	r0, r4
 8003bac:	f014 f9c2 	bl	8017f34 <crs_strlen>
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	b283      	uxth	r3, r0
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f014 fc20 	bl	80183fc <traceIF_uartPrint>
  retval = atcm_modem_get_error(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <ATCustom_WP77_get_error+0x4c>)
}
 8003bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  retval = atcm_modem_get_error(&WP77_ctxt, p_atp_ctxt, p_rsp_buf);
 8003bc6:	f005 bae7 	b.w	8009198 <atcm_modem_get_error>
 8003bca:	bf00      	nop
 8003bcc:	20008ef8 	.word	0x20008ef8
 8003bd0:	080226d0 	.word	0x080226d0
 8003bd4:	20001008 	.word	0x20001008

08003bd8 <ATCustom_WP77_hw_event>:
}
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4770      	bx	lr

08003bdc <SysCtrl_WP77_getDeviceDescriptor>:
/* Private function prototypes -----------------------------------------------*/
static sysctrl_status_t SysCtrl_WP77_setup(void);

/* Functions Definition ------------------------------------------------------*/
sysctrl_status_t SysCtrl_WP77_getDeviceDescriptor(sysctrl_device_type_t type, sysctrl_info_t *p_devices_list)
{
 8003bdc:	b530      	push	{r4, r5, lr}
 8003bde:	4604      	mov	r4, r0
 8003be0:	b087      	sub	sp, #28
  sysctrl_status_t retval;

  if (p_devices_list == NULL)
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d04c      	beq.n	8003c80 <SysCtrl_WP77_getDeviceDescriptor+0xa4>
    retval = SCSTATUS_ERROR;
  }
  else
  {
    /* check type */
    if (type == DEVTYPE_MODEM_CELLULAR)
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d14a      	bne.n	8003c80 <SysCtrl_WP77_getDeviceDescriptor+0xa4>
    {
#if defined(USE_MODEM_WP77)
      p_devices_list->type          = DEVTYPE_MODEM_CELLULAR;
      p_devices_list->ipc_device    = USER_DEFINED_IPC_DEVICE_MODEM;
      p_devices_list->ipc_interface = IPC_INTERFACE_UART;
 8003bea:	2501      	movs	r5, #1

      (void) IPC_init(p_devices_list->ipc_device, p_devices_list->ipc_interface, &MODEM_UART_HANDLE);
 8003bec:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <SysCtrl_WP77_getDeviceDescriptor+0xa8>)
      p_devices_list->type          = DEVTYPE_MODEM_CELLULAR;
 8003bee:	7008      	strb	r0, [r1, #0]
      p_devices_list->ipc_device    = USER_DEFINED_IPC_DEVICE_MODEM;
 8003bf0:	7048      	strb	r0, [r1, #1]
      p_devices_list->ipc_interface = IPC_INTERFACE_UART;
 8003bf2:	708d      	strb	r5, [r1, #2]
      (void) IPC_init(p_devices_list->ipc_device, p_devices_list->ipc_interface, &MODEM_UART_HANDLE);
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f013 fc3f 	bl	8017478 <IPC_init>
   * Initial pins state:
   *  PWR_EN initial state = 1 : used to power-on/power-off the board
   *  RST initial state = 0 : used to reset the board
   *  DTR initial state = 0 ; not used
   */
  HAL_GPIO_WritePin(MODEM_PWR_EN_GPIO_PORT, MODEM_PWR_EN_PIN, GPIO_PIN_RESET);
 8003bfa:	4823      	ldr	r0, [pc, #140]	; (8003c88 <SysCtrl_WP77_getDeviceDescriptor+0xac>)
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	2110      	movs	r1, #16
 8003c00:	f000 fcd0 	bl	80045a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MODEM_RST_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_RESET);
 8003c04:	4622      	mov	r2, r4
 8003c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c0e:	f000 fcc9 	bl	80045a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MODEM_DTR_GPIO_PORT, MODEM_DTR_PIN, GPIO_PIN_RESET);
 8003c12:	4622      	mov	r2, r4
 8003c14:	481c      	ldr	r0, [pc, #112]	; (8003c88 <SysCtrl_WP77_getDeviceDescriptor+0xac>)
 8003c16:	2102      	movs	r1, #2
 8003c18:	f000 fcc4 	bl	80045a4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  /* Init GPIOs - RESET pin */
  GPIO_InitStruct.Pin = MODEM_RST_PIN;
 8003c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(MODEM_RST_GPIO_PORT, &GPIO_InitStruct);
 8003c20:	a901      	add	r1, sp, #4
 8003c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MODEM_RST_PIN;
 8003c26:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	e9cd 5402 	strd	r5, r4, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(MODEM_RST_GPIO_PORT, &GPIO_InitStruct);
 8003c2e:	f000 fb47 	bl	80042c0 <HAL_GPIO_Init>

  /* Init GPIOs - DTR pin */
  GPIO_InitStruct.Pin = MODEM_DTR_PIN;
 8003c32:	2302      	movs	r3, #2
  HAL_GPIO_Init(MODEM_DTR_GPIO_PORT, &GPIO_InitStruct);
 8003c34:	4814      	ldr	r0, [pc, #80]	; (8003c88 <SysCtrl_WP77_getDeviceDescriptor+0xac>)
  GPIO_InitStruct.Pin = MODEM_DTR_PIN;
 8003c36:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(MODEM_DTR_GPIO_PORT, &GPIO_InitStruct);
 8003c38:	a901      	add	r1, sp, #4
 8003c3a:	f000 fb41 	bl	80042c0 <HAL_GPIO_Init>

  /* Init GPIOs - PWR_EN pin */
  GPIO_InitStruct.Pin = MODEM_PWR_EN_PIN;
 8003c3e:	2310      	movs	r3, #16
  HAL_GPIO_Init(MODEM_PWR_EN_GPIO_PORT, &GPIO_InitStruct);
 8003c40:	4811      	ldr	r0, [pc, #68]	; (8003c88 <SysCtrl_WP77_getDeviceDescriptor+0xac>)
  GPIO_InitStruct.Pin = MODEM_PWR_EN_PIN;
 8003c42:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(MODEM_PWR_EN_GPIO_PORT, &GPIO_InitStruct);
 8003c44:	a901      	add	r1, sp, #4
 8003c46:	f000 fb3b 	bl	80042c0 <HAL_GPIO_Init>

  PRINT_FORCE("WP77 UART config: BaudRate=%d / HW flow ctrl=%d", MODEM_UART_BAUDRATE,
 8003c4a:	4910      	ldr	r1, [pc, #64]	; (8003c8c <SysCtrl_WP77_getDeviceDescriptor+0xb0>)
 8003c4c:	4810      	ldr	r0, [pc, #64]	; (8003c90 <SysCtrl_WP77_getDeviceDescriptor+0xb4>)
 8003c4e:	4623      	mov	r3, r4
 8003c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c54:	f019 f930 	bl	801ceb8 <sprintf>
 8003c58:	480d      	ldr	r0, [pc, #52]	; (8003c90 <SysCtrl_WP77_getDeviceDescriptor+0xb4>)
 8003c5a:	f014 f96b 	bl	8017f34 <crs_strlen>
 8003c5e:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <SysCtrl_WP77_getDeviceDescriptor+0xb4>)
 8003c60:	b283      	uxth	r3, r0
 8003c62:	4629      	mov	r1, r5
 8003c64:	4628      	mov	r0, r5
 8003c66:	f014 f9a3 	bl	8017fb0 <traceIF_itmPrint>
 8003c6a:	4809      	ldr	r0, [pc, #36]	; (8003c90 <SysCtrl_WP77_getDeviceDescriptor+0xb4>)
 8003c6c:	f014 f962 	bl	8017f34 <crs_strlen>
 8003c70:	4907      	ldr	r1, [pc, #28]	; (8003c90 <SysCtrl_WP77_getDeviceDescriptor+0xb4>)
 8003c72:	b282      	uxth	r2, r0
 8003c74:	4628      	mov	r0, r5
 8003c76:	f014 fbdb 	bl	8018430 <traceIF_uartPrintForce>
}
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	b007      	add	sp, #28
 8003c7e:	bd30      	pop	{r4, r5, pc}
    retval = SCSTATUS_ERROR;
 8003c80:	2401      	movs	r4, #1
 8003c82:	e7fa      	b.n	8003c7a <SysCtrl_WP77_getDeviceDescriptor+0x9e>
 8003c84:	200086a4 	.word	0x200086a4
 8003c88:	48000400 	.word	0x48000400
 8003c8c:	080233c2 	.word	0x080233c2
 8003c90:	20008ef8 	.word	0x20008ef8

08003c94 <SysCtrl_WP77_open_channel>:
  MODEM_UART_HANDLE.Instance = MODEM_UART_INSTANCE;
 8003c94:	4818      	ldr	r0, [pc, #96]	; (8003cf8 <SysCtrl_WP77_open_channel+0x64>)
  MODEM_UART_HANDLE.Init.BaudRate = MODEM_UART_BAUDRATE;
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <SysCtrl_WP77_open_channel+0x68>)
 8003c98:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
{
 8003c9c:	b510      	push	{r4, lr}
  MODEM_UART_HANDLE.Init.BaudRate = MODEM_UART_BAUDRATE;
 8003c9e:	e9c0 2300 	strd	r2, r3, [r0]
  MODEM_UART_HANDLE.Init.WordLength = MODEM_UART_WORDLENGTH;
 8003ca2:	2300      	movs	r3, #0
  MODEM_UART_HANDLE.Init.Mode = MODEM_UART_MODE;
 8003ca4:	220c      	movs	r2, #12
  MODEM_UART_HANDLE.Init.StopBits = MODEM_UART_STOPBITS;
 8003ca6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  MODEM_UART_HANDLE.Init.HwFlowCtl = MODEM_UART_HWFLOWCTRL;
 8003caa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  MODEM_UART_HANDLE.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cae:	e9c0 3307 	strd	r3, r3, [r0, #28]
  MODEM_UART_HANDLE.Init.Parity = MODEM_UART_PARITY;
 8003cb2:	6103      	str	r3, [r0, #16]
  MODEM_UART_HANDLE.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cb4:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&MODEM_UART_HANDLE) != HAL_OK)
 8003cb6:	f003 f94d 	bl	8006f54 <HAL_UART_Init>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	b1b0      	cbz	r0, 8003cec <SysCtrl_WP77_open_channel+0x58>
    PRINT_ERR("HAL_UART_Init error")
 8003cbe:	4910      	ldr	r1, [pc, #64]	; (8003d00 <SysCtrl_WP77_open_channel+0x6c>)
 8003cc0:	4810      	ldr	r0, [pc, #64]	; (8003d04 <SysCtrl_WP77_open_channel+0x70>)
 8003cc2:	f019 f969 	bl	801cf98 <strcpy>
 8003cc6:	480f      	ldr	r0, [pc, #60]	; (8003d04 <SysCtrl_WP77_open_channel+0x70>)
 8003cc8:	f014 f934 	bl	8017f34 <crs_strlen>
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <SysCtrl_WP77_open_channel+0x70>)
 8003cce:	b283      	uxth	r3, r0
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f014 f96c 	bl	8017fb0 <traceIF_itmPrint>
 8003cd8:	480a      	ldr	r0, [pc, #40]	; (8003d04 <SysCtrl_WP77_open_channel+0x70>)
 8003cda:	f014 f92b 	bl	8017f34 <crs_strlen>
 8003cde:	4a09      	ldr	r2, [pc, #36]	; (8003d04 <SysCtrl_WP77_open_channel+0x70>)
 8003ce0:	b283      	uxth	r3, r0
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f014 fb89 	bl	80183fc <traceIF_uartPrint>
    retval = SCSTATUS_ERROR;
 8003cea:	2401      	movs	r4, #1
  HAL_NVIC_EnableIRQ(MODEM_UART_IRQN);
 8003cec:	2034      	movs	r0, #52	; 0x34
 8003cee:	f000 fa59 	bl	80041a4 <HAL_NVIC_EnableIRQ>
}
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200086a4 	.word	0x200086a4
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	080233f4 	.word	0x080233f4
 8003d04:	20008ef8 	.word	0x20008ef8

08003d08 <SysCtrl_WP77_close_channel>:
{
 8003d08:	b508      	push	{r3, lr}
  HAL_NVIC_DisableIRQ(MODEM_UART_IRQN);
 8003d0a:	2034      	movs	r0, #52	; 0x34
 8003d0c:	f000 fa58 	bl	80041c0 <HAL_NVIC_DisableIRQ>
  if (HAL_UART_DeInit(&MODEM_UART_HANDLE) != HAL_OK)
 8003d10:	480d      	ldr	r0, [pc, #52]	; (8003d48 <SysCtrl_WP77_close_channel+0x40>)
 8003d12:	f002 fac7 	bl	80062a4 <HAL_UART_DeInit>
 8003d16:	b1b0      	cbz	r0, 8003d46 <SysCtrl_WP77_close_channel+0x3e>
    PRINT_ERR("HAL_UART_DeInit error")
 8003d18:	490c      	ldr	r1, [pc, #48]	; (8003d4c <SysCtrl_WP77_close_channel+0x44>)
 8003d1a:	480d      	ldr	r0, [pc, #52]	; (8003d50 <SysCtrl_WP77_close_channel+0x48>)
 8003d1c:	f019 f93c 	bl	801cf98 <strcpy>
 8003d20:	480b      	ldr	r0, [pc, #44]	; (8003d50 <SysCtrl_WP77_close_channel+0x48>)
 8003d22:	f014 f907 	bl	8017f34 <crs_strlen>
 8003d26:	4a0a      	ldr	r2, [pc, #40]	; (8003d50 <SysCtrl_WP77_close_channel+0x48>)
 8003d28:	b283      	uxth	r3, r0
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	f014 f93f 	bl	8017fb0 <traceIF_itmPrint>
 8003d32:	4807      	ldr	r0, [pc, #28]	; (8003d50 <SysCtrl_WP77_close_channel+0x48>)
 8003d34:	f014 f8fe 	bl	8017f34 <crs_strlen>
 8003d38:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <SysCtrl_WP77_close_channel+0x48>)
 8003d3a:	b283      	uxth	r3, r0
 8003d3c:	2110      	movs	r1, #16
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f014 fb5c 	bl	80183fc <traceIF_uartPrint>
    retval = SCSTATUS_ERROR;
 8003d44:	2001      	movs	r0, #1
}
 8003d46:	bd08      	pop	{r3, pc}
 8003d48:	200086a4 	.word	0x200086a4
 8003d4c:	0802341d 	.word	0x0802341d
 8003d50:	20008ef8 	.word	0x20008ef8

08003d54 <SysCtrl_WP77_power_on>:
{
 8003d54:	b510      	push	{r4, lr}
  PRINT_INFO("!!! Modem Powering On !!!")
 8003d56:	4c30      	ldr	r4, [pc, #192]	; (8003e18 <SysCtrl_WP77_power_on+0xc4>)
 8003d58:	4930      	ldr	r1, [pc, #192]	; (8003e1c <SysCtrl_WP77_power_on+0xc8>)
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f019 f91c 	bl	801cf98 <strcpy>
 8003d60:	4620      	mov	r0, r4
 8003d62:	f014 f8e7 	bl	8017f34 <crs_strlen>
 8003d66:	2101      	movs	r1, #1
 8003d68:	b283      	uxth	r3, r0
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	f014 f91f 	bl	8017fb0 <traceIF_itmPrint>
 8003d72:	4620      	mov	r0, r4
 8003d74:	f014 f8de 	bl	8017f34 <crs_strlen>
 8003d78:	2101      	movs	r1, #1
 8003d7a:	b283      	uxth	r3, r0
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	4608      	mov	r0, r1
 8003d80:	f014 fb3c 	bl	80183fc <traceIF_uartPrint>
  HAL_GPIO_WritePin(MODEM_PWR_EN_GPIO_PORT, MODEM_PWR_EN_PIN, GPIO_PIN_SET);
 8003d84:	4826      	ldr	r0, [pc, #152]	; (8003e20 <SysCtrl_WP77_power_on+0xcc>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	2110      	movs	r1, #16
 8003d8a:	f000 fc0b 	bl	80045a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MODEM_RST_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_RESET);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d98:	f000 fc04 	bl	80045a4 <HAL_GPIO_WritePin>
  SysCtrl_delay(200U);
 8003d9c:	20c8      	movs	r0, #200	; 0xc8
 8003d9e:	f00a feb3 	bl	800eb08 <SysCtrl_delay>
  HAL_GPIO_WritePin(MODEM_RST_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_SET);
 8003da2:	2201      	movs	r2, #1
 8003da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dac:	f000 fbfa 	bl	80045a4 <HAL_GPIO_WritePin>
  PRINT_INFO("Waiting %d millisec for modem running...", WP77_BOOT_TIME)
 8003db0:	491c      	ldr	r1, [pc, #112]	; (8003e24 <SysCtrl_WP77_power_on+0xd0>)
 8003db2:	f247 5230 	movw	r2, #30000	; 0x7530
 8003db6:	4620      	mov	r0, r4
 8003db8:	f019 f87e 	bl	801ceb8 <sprintf>
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f014 f8b9 	bl	8017f34 <crs_strlen>
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	b283      	uxth	r3, r0
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	4608      	mov	r0, r1
 8003dca:	f014 f8f1 	bl	8017fb0 <traceIF_itmPrint>
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f014 f8b0 	bl	8017f34 <crs_strlen>
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	b283      	uxth	r3, r0
 8003dd8:	4622      	mov	r2, r4
 8003dda:	4608      	mov	r0, r1
 8003ddc:	f014 fb0e 	bl	80183fc <traceIF_uartPrint>
  SysCtrl_delay(WP77_BOOT_TIME);
 8003de0:	f247 5030 	movw	r0, #30000	; 0x7530
 8003de4:	f00a fe90 	bl	800eb08 <SysCtrl_delay>
  PRINT_INFO("...done")
 8003de8:	490f      	ldr	r1, [pc, #60]	; (8003e28 <SysCtrl_WP77_power_on+0xd4>)
 8003dea:	4620      	mov	r0, r4
 8003dec:	f019 f8d4 	bl	801cf98 <strcpy>
 8003df0:	4620      	mov	r0, r4
 8003df2:	f014 f89f 	bl	8017f34 <crs_strlen>
 8003df6:	2101      	movs	r1, #1
 8003df8:	b283      	uxth	r3, r0
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	f014 f8d7 	bl	8017fb0 <traceIF_itmPrint>
 8003e02:	4620      	mov	r0, r4
 8003e04:	f014 f896 	bl	8017f34 <crs_strlen>
 8003e08:	2101      	movs	r1, #1
 8003e0a:	b283      	uxth	r3, r0
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4608      	mov	r0, r1
 8003e10:	f014 faf4 	bl	80183fc <traceIF_uartPrint>
}
 8003e14:	2000      	movs	r0, #0
 8003e16:	bd10      	pop	{r4, pc}
 8003e18:	20008ef8 	.word	0x20008ef8
 8003e1c:	08023448 	.word	0x08023448
 8003e20:	48000400 	.word	0x48000400
 8003e24:	08023471 	.word	0x08023471
 8003e28:	080234a9 	.word	0x080234a9

08003e2c <SysCtrl_WP77_power_off>:
{
 8003e2c:	b510      	push	{r4, lr}
  PRINT_INFO("!!! Modem Power Off !!!")
 8003e2e:	4c14      	ldr	r4, [pc, #80]	; (8003e80 <SysCtrl_WP77_power_off+0x54>)
 8003e30:	4914      	ldr	r1, [pc, #80]	; (8003e84 <SysCtrl_WP77_power_off+0x58>)
 8003e32:	4620      	mov	r0, r4
 8003e34:	f019 f8b0 	bl	801cf98 <strcpy>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f014 f87b 	bl	8017f34 <crs_strlen>
 8003e3e:	2101      	movs	r1, #1
 8003e40:	b283      	uxth	r3, r0
 8003e42:	4622      	mov	r2, r4
 8003e44:	4608      	mov	r0, r1
 8003e46:	f014 f8b3 	bl	8017fb0 <traceIF_itmPrint>
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f014 f872 	bl	8017f34 <crs_strlen>
 8003e50:	4622      	mov	r2, r4
 8003e52:	2101      	movs	r1, #1
  HAL_GPIO_WritePin(MODEM_PWR_EN_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_RESET);
 8003e54:	4c0c      	ldr	r4, [pc, #48]	; (8003e88 <SysCtrl_WP77_power_off+0x5c>)
  PRINT_INFO("!!! Modem Power Off !!!")
 8003e56:	b283      	uxth	r3, r0
 8003e58:	4608      	mov	r0, r1
 8003e5a:	f014 facf 	bl	80183fc <traceIF_uartPrint>
  HAL_GPIO_WritePin(MODEM_PWR_EN_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_RESET);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e64:	4620      	mov	r0, r4
 8003e66:	f000 fb9d 	bl	80045a4 <HAL_GPIO_WritePin>
  SysCtrl_delay(5000U);
 8003e6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e6e:	f00a fe4b 	bl	800eb08 <SysCtrl_delay>
  HAL_GPIO_WritePin(MODEM_PWR_EN_GPIO_PORT, MODEM_PWR_EN_PIN, GPIO_PIN_RESET);
 8003e72:	4620      	mov	r0, r4
 8003e74:	2200      	movs	r2, #0
 8003e76:	2110      	movs	r1, #16
 8003e78:	f000 fb94 	bl	80045a4 <HAL_GPIO_WritePin>
}
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	bd10      	pop	{r4, pc}
 8003e80:	20008ef8 	.word	0x20008ef8
 8003e84:	080234c0 	.word	0x080234c0
 8003e88:	48000400 	.word	0x48000400

08003e8c <SysCtrl_WP77_reset>:
{
 8003e8c:	b510      	push	{r4, lr}
  PRINT_INFO("!!! Hardware Reset triggered !!!")
 8003e8e:	4c2e      	ldr	r4, [pc, #184]	; (8003f48 <SysCtrl_WP77_reset+0xbc>)
 8003e90:	492e      	ldr	r1, [pc, #184]	; (8003f4c <SysCtrl_WP77_reset+0xc0>)
 8003e92:	4620      	mov	r0, r4
 8003e94:	f019 f880 	bl	801cf98 <strcpy>
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f014 f84b 	bl	8017f34 <crs_strlen>
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	b283      	uxth	r3, r0
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	f014 f883 	bl	8017fb0 <traceIF_itmPrint>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f014 f842 	bl	8017f34 <crs_strlen>
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	b283      	uxth	r3, r0
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	f014 faa0 	bl	80183fc <traceIF_uartPrint>
  HAL_GPIO_WritePin(MODEM_RST_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_RESET);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec6:	f000 fb6d 	bl	80045a4 <HAL_GPIO_WritePin>
  SysCtrl_delay(200U);
 8003eca:	20c8      	movs	r0, #200	; 0xc8
 8003ecc:	f00a fe1c 	bl	800eb08 <SysCtrl_delay>
  HAL_GPIO_WritePin(MODEM_RST_GPIO_PORT, MODEM_RST_PIN, GPIO_PIN_SET);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eda:	f000 fb63 	bl	80045a4 <HAL_GPIO_WritePin>
  PRINT_INFO("Waiting %d millisec for modem running...", WP77_BOOT_TIME)
 8003ede:	491c      	ldr	r1, [pc, #112]	; (8003f50 <SysCtrl_WP77_reset+0xc4>)
 8003ee0:	f247 5230 	movw	r2, #30000	; 0x7530
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f018 ffe7 	bl	801ceb8 <sprintf>
 8003eea:	4620      	mov	r0, r4
 8003eec:	f014 f822 	bl	8017f34 <crs_strlen>
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	b283      	uxth	r3, r0
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	f014 f85a 	bl	8017fb0 <traceIF_itmPrint>
 8003efc:	4620      	mov	r0, r4
 8003efe:	f014 f819 	bl	8017f34 <crs_strlen>
 8003f02:	2101      	movs	r1, #1
 8003f04:	b283      	uxth	r3, r0
 8003f06:	4622      	mov	r2, r4
 8003f08:	4608      	mov	r0, r1
 8003f0a:	f014 fa77 	bl	80183fc <traceIF_uartPrint>
  SysCtrl_delay(WP77_BOOT_TIME);
 8003f0e:	f247 5030 	movw	r0, #30000	; 0x7530
 8003f12:	f00a fdf9 	bl	800eb08 <SysCtrl_delay>
  PRINT_INFO("...done")
 8003f16:	490f      	ldr	r1, [pc, #60]	; (8003f54 <SysCtrl_WP77_reset+0xc8>)
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f019 f83d 	bl	801cf98 <strcpy>
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f014 f808 	bl	8017f34 <crs_strlen>
 8003f24:	2101      	movs	r1, #1
 8003f26:	b283      	uxth	r3, r0
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4608      	mov	r0, r1
 8003f2c:	f014 f840 	bl	8017fb0 <traceIF_itmPrint>
 8003f30:	4620      	mov	r0, r4
 8003f32:	f013 ffff 	bl	8017f34 <crs_strlen>
 8003f36:	2101      	movs	r1, #1
 8003f38:	b283      	uxth	r3, r0
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	f014 fa5d 	bl	80183fc <traceIF_uartPrint>
}
 8003f42:	2000      	movs	r0, #0
 8003f44:	bd10      	pop	{r4, pc}
 8003f46:	bf00      	nop
 8003f48:	20008ef8 	.word	0x20008ef8
 8003f4c:	080234e7 	.word	0x080234e7
 8003f50:	08023471 	.word	0x08023471
 8003f54:	080234a9 	.word	0x080234a9

08003f58 <SysCtrl_WP77_sim_select>:
  switch (sim_slot)
 8003f58:	2901      	cmp	r1, #1
{
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	460c      	mov	r4, r1
  switch (sim_slot)
 8003f5e:	d027      	beq.n	8003fb0 <SysCtrl_WP77_sim_select+0x58>
 8003f60:	2902      	cmp	r1, #2
 8003f62:	d049      	beq.n	8003ff8 <SysCtrl_WP77_sim_select+0xa0>
      PRINT_ERR("Invalid SIM %d selected", sim_slot)
 8003f64:	460a      	mov	r2, r1
  switch (sim_slot)
 8003f66:	2900      	cmp	r1, #0
 8003f68:	d15e      	bne.n	8004028 <SysCtrl_WP77_sim_select+0xd0>
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_0_GPIO_PORT, MODEM_SIM_SELECT_0_PIN, GPIO_PIN_RESET);
 8003f6a:	2110      	movs	r1, #16
 8003f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f70:	f000 fb18 	bl	80045a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_1_GPIO_PORT, MODEM_SIM_SELECT_1_PIN, GPIO_PIN_RESET);
 8003f74:	4622      	mov	r2, r4
 8003f76:	2108      	movs	r1, #8
 8003f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7c:	f000 fb12 	bl	80045a4 <HAL_GPIO_WritePin>
      PRINT_INFO("MODEM SIM SOCKET SELECTED")
 8003f80:	4935      	ldr	r1, [pc, #212]	; (8004058 <SysCtrl_WP77_sim_select+0x100>)
 8003f82:	4836      	ldr	r0, [pc, #216]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003f84:	f019 f808 	bl	801cf98 <strcpy>
 8003f88:	4834      	ldr	r0, [pc, #208]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003f8a:	f013 ffd3 	bl	8017f34 <crs_strlen>
 8003f8e:	2101      	movs	r1, #1
 8003f90:	b283      	uxth	r3, r0
 8003f92:	4a32      	ldr	r2, [pc, #200]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003f94:	4608      	mov	r0, r1
 8003f96:	f014 f80b 	bl	8017fb0 <traceIF_itmPrint>
 8003f9a:	4830      	ldr	r0, [pc, #192]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003f9c:	f013 ffca 	bl	8017f34 <crs_strlen>
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	b283      	uxth	r3, r0
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fa6:	4608      	mov	r0, r1
 8003fa8:	f014 fa28 	bl	80183fc <traceIF_uartPrint>
}
 8003fac:	4620      	mov	r0, r4
 8003fae:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_0_GPIO_PORT, MODEM_SIM_SELECT_0_PIN, GPIO_PIN_SET);
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fb6:	2110      	movs	r1, #16
 8003fb8:	f000 faf4 	bl	80045a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_1_GPIO_PORT, MODEM_SIM_SELECT_1_PIN, GPIO_PIN_RESET);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc4:	f000 faee 	bl	80045a4 <HAL_GPIO_WritePin>
      PRINT_INFO("MODEM SIM ESIM SELECTED")
 8003fc8:	4925      	ldr	r1, [pc, #148]	; (8004060 <SysCtrl_WP77_sim_select+0x108>)
 8003fca:	4824      	ldr	r0, [pc, #144]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fcc:	f018 ffe4 	bl	801cf98 <strcpy>
 8003fd0:	4822      	ldr	r0, [pc, #136]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fd2:	f013 ffaf 	bl	8017f34 <crs_strlen>
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fd8:	b283      	uxth	r3, r0
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4620      	mov	r0, r4
      PRINT_INFO("STM32 SIM SELECTED")
 8003fde:	f013 ffe7 	bl	8017fb0 <traceIF_itmPrint>
 8003fe2:	481e      	ldr	r0, [pc, #120]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fe4:	f013 ffa6 	bl	8017f34 <crs_strlen>
 8003fe8:	2101      	movs	r1, #1
 8003fea:	b283      	uxth	r3, r0
 8003fec:	4a1b      	ldr	r2, [pc, #108]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8003fee:	4608      	mov	r0, r1
 8003ff0:	f014 fa04 	bl	80183fc <traceIF_uartPrint>
  sysctrl_status_t retval = SCSTATUS_OK;
 8003ff4:	2400      	movs	r4, #0
      break;
 8003ff6:	e7d9      	b.n	8003fac <SysCtrl_WP77_sim_select+0x54>
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_0_GPIO_PORT, MODEM_SIM_SELECT_0_PIN, GPIO_PIN_RESET);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004000:	f000 fad0 	bl	80045a4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MODEM_SIM_SELECT_1_GPIO_PORT, MODEM_SIM_SELECT_1_PIN, GPIO_PIN_SET);
 8004004:	2201      	movs	r2, #1
 8004006:	2108      	movs	r1, #8
 8004008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800400c:	f000 faca 	bl	80045a4 <HAL_GPIO_WritePin>
      PRINT_INFO("STM32 SIM SELECTED")
 8004010:	4914      	ldr	r1, [pc, #80]	; (8004064 <SysCtrl_WP77_sim_select+0x10c>)
 8004012:	4812      	ldr	r0, [pc, #72]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8004014:	f018 ffc0 	bl	801cf98 <strcpy>
 8004018:	4810      	ldr	r0, [pc, #64]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 800401a:	f013 ff8b 	bl	8017f34 <crs_strlen>
 800401e:	2101      	movs	r1, #1
 8004020:	b283      	uxth	r3, r0
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8004024:	4608      	mov	r0, r1
 8004026:	e7da      	b.n	8003fde <SysCtrl_WP77_sim_select+0x86>
      PRINT_ERR("Invalid SIM %d selected", sim_slot)
 8004028:	490f      	ldr	r1, [pc, #60]	; (8004068 <SysCtrl_WP77_sim_select+0x110>)
 800402a:	480c      	ldr	r0, [pc, #48]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 800402c:	f018 ff44 	bl	801ceb8 <sprintf>
 8004030:	480a      	ldr	r0, [pc, #40]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8004032:	f013 ff7f 	bl	8017f34 <crs_strlen>
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8004038:	b283      	uxth	r3, r0
 800403a:	2110      	movs	r1, #16
 800403c:	2001      	movs	r0, #1
 800403e:	f013 ffb7 	bl	8017fb0 <traceIF_itmPrint>
 8004042:	4806      	ldr	r0, [pc, #24]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 8004044:	f013 ff76 	bl	8017f34 <crs_strlen>
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <SysCtrl_WP77_sim_select+0x104>)
 800404a:	b283      	uxth	r3, r0
 800404c:	2110      	movs	r1, #16
 800404e:	2001      	movs	r0, #1
 8004050:	f014 f9d4 	bl	80183fc <traceIF_uartPrint>
      retval = SCSTATUS_ERROR;
 8004054:	2401      	movs	r4, #1
      break;
 8004056:	e7a9      	b.n	8003fac <SysCtrl_WP77_sim_select+0x54>
 8004058:	08023517 	.word	0x08023517
 800405c:	20008ef8 	.word	0x20008ef8
 8004060:	08023540 	.word	0x08023540
 8004064:	08023567 	.word	0x08023567
 8004068:	08023589 	.word	0x08023589

0800406c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800406c:	4a0e      	ldr	r2, [pc, #56]	; (80040a8 <SystemInit+0x3c>)
 800406e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004072:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004076:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <SystemInit+0x40>)
 800407c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800407e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004086:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800408e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004092:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004098:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040a0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80040a2:	6199      	str	r1, [r3, #24]
}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_Init>:
 *         Once done, time base tick starts incrementing: the tick variable counter is incremented
 *         each 1ms in the SysTick_Handler() interrupt handler.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80040b0:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b2:	2003      	movs	r0, #3
 80040b4:	f000 f832 	bl	800411c <HAL_NVIC_SetPriorityGrouping>

	/* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fd f90f 	bl	80012dc <HAL_InitTick>
 80040be:	4604      	mov	r4, r0
 80040c0:	b918      	cbnz	r0, 80040ca <HAL_Init+0x1a>
		status = HAL_ERROR;
	} else {
		/* Init the low level hardware */
		HAL_MspInit();
 80040c2:	f7fd f8ed 	bl	80012a0 <HAL_MspInit>
	}

	/* Return function status */
	return status;
}
 80040c6:	4620      	mov	r0, r4
 80040c8:	bd10      	pop	{r4, pc}
		status = HAL_ERROR;
 80040ca:	2401      	movs	r4, #1
 80040cc:	e7fb      	b.n	80040c6 <HAL_Init+0x16>
	...

080040d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
	uwTick += (uint32_t) uwTickFreq;
 80040d0:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_IncTick+0x10>)
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_IncTick+0x14>)
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	440b      	add	r3, r1
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20008810 	.word	0x20008810
 80040e4:	20000214 	.word	0x20000214

080040e8 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 80040e8:	4b01      	ldr	r3, [pc, #4]	; (80040f0 <HAL_GetTick+0x8>)
 80040ea:	6818      	ldr	r0, [r3, #0]
}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20008810 	.word	0x20008810

080040f4 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff fff6 	bl	80040e8 <HAL_GetTick>
	uint32_t wait = Delay;

	/* Add a period to guaranty minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80040fc:	1c63      	adds	r3, r4, #1
		wait += (uint32_t) uwTickFreq;
 80040fe:	bf1c      	itt	ne
 8004100:	4b05      	ldrne	r3, [pc, #20]	; (8004118 <HAL_Delay+0x24>)
 8004102:	781b      	ldrbne	r3, [r3, #0]
	uint32_t tickstart = HAL_GetTick();
 8004104:	4605      	mov	r5, r0
		wait += (uint32_t) uwTickFreq;
 8004106:	bf18      	it	ne
 8004108:	18e4      	addne	r4, r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 800410a:	f7ff ffed 	bl	80040e8 <HAL_GetTick>
 800410e:	1b43      	subs	r3, r0, r5
 8004110:	42a3      	cmp	r3, r4
 8004112:	d3fa      	bcc.n	800410a <HAL_Delay+0x16>
	}
}
 8004114:	bd38      	pop	{r3, r4, r5, pc}
 8004116:	bf00      	nop
 8004118:	20000214 	.word	0x20000214

0800411c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800411c:	4907      	ldr	r1, [pc, #28]	; (800413c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800411e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004124:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004126:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004128:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800412c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800412e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004138:	60cb      	str	r3, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_NVIC_SetPriority+0x5c>)
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8004142:	b530      	push	{r4, r5, lr}
 8004144:	68dc      	ldr	r4, [r3, #12]
 8004146:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800414a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	2d04      	cmp	r5, #4
 8004152:	bf28      	it	cs
 8004154:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004156:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415c:	bf8c      	ite	hi
 800415e:	3c03      	subhi	r4, #3
 8004160:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004162:	fa03 f505 	lsl.w	r5, r3, r5
 8004166:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800416a:	40a3      	lsls	r3, r4
 800416c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8004172:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	bfac      	ite	ge
 800417a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	4a08      	ldrlt	r2, [pc, #32]	; (80041a0 <HAL_NVIC_SetPriority+0x60>)
 8004180:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004184:	bfb8      	it	lt
 8004186:	f000 000f 	andlt.w	r0, r0, #15
 800418a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418c:	bfaa      	itet	ge
 800418e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004194:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004198:	bd30      	pop	{r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00
 80041a0:	e000ed14 	.word	0xe000ed14

080041a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041a4:	2800      	cmp	r0, #0
 80041a6:	db08      	blt.n	80041ba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a8:	2301      	movs	r3, #1
 80041aa:	0942      	lsrs	r2, r0, #5
 80041ac:	f000 001f 	and.w	r0, r0, #31
 80041b0:	fa03 f000 	lsl.w	r0, r3, r0
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <HAL_NVIC_EnableIRQ+0x18>)
 80041b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
}
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100

080041c0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80041c0:	2800      	cmp	r0, #0
 80041c2:	db0d      	blt.n	80041e0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c4:	0943      	lsrs	r3, r0, #5
 80041c6:	2201      	movs	r2, #1
 80041c8:	f000 001f 	and.w	r0, r0, #31
 80041cc:	fa02 f000 	lsl.w	r0, r2, r0
 80041d0:	3320      	adds	r3, #32
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_NVIC_DisableIRQ+0x24>)
 80041d4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041dc:	f3bf 8f6f 	isb	sy
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Disable interrupt */
	NVIC_DisableIRQ(IRQn);
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <HAL_DMA_Abort>:
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
	HAL_StatusTypeDef status = HAL_OK;

	/* Check the DMA peripheral state */
	if (hdma->State != HAL_DMA_STATE_BUSY) {
 80041e8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d006      	beq.n	80041fe <HAL_DMA_Abort+0x16>
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f0:	2304      	movs	r3, #4
 80041f2:	63c3      	str	r3, [r0, #60]	; 0x3c

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 80041f4:	2300      	movs	r3, #0
 80041f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		return HAL_ERROR;
 80041fa:	2001      	movs	r0, #1
 80041fc:	4770      	bx	lr
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fe:	6803      	ldr	r3, [r0, #0]

#if defined(DMAMUX1)
		/* disable the DMAMUX sync overrun IT*/
		hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004200:	6c81      	ldr	r1, [r0, #72]	; 0x48
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	f022 020e 	bic.w	r2, r2, #14
 8004208:	601a      	str	r2, [r3, #0]
		hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800420a:	680a      	ldr	r2, [r1, #0]
 800420c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004210:	600a      	str	r2, [r1, #0]
#endif /* DMAMUX1 */

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
				<< (hdma->ChannelIndex & 0x1CU));
 800421a:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 800421e:	f003 021c 	and.w	r2, r3, #28
 8004222:	2301      	movs	r3, #1
 8004224:	4093      	lsls	r3, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 8004226:	604b      	str	r3, [r1, #4]

#if defined(DMAMUX1)
		/* Clear the DMAMUX synchro overrun flag */
		hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004228:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 800422c:	605a      	str	r2, [r3, #4]

		if (hdma->DMAmuxRequestGen != 0U) {
 800422e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004230:	b133      	cbz	r3, 8004240 <HAL_DMA_Abort+0x58>
			/* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
			/* disable the request gen overrun IT*/
			hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]

			/* Clear the DMAMUX request generator overrun flag */
			hdma->DMAmuxRequestGenStatus->RGCFR =
					hdma->DMAmuxRequestGenStatusMask;
 800423a:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
			hdma->DMAmuxRequestGenStatus->RGCFR =
 800423e:	605a      	str	r2, [r3, #4]
		}

#endif /* DMAMUX1 */

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8004240:	2301      	movs	r3, #1
 8004242:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8004246:	2300      	movs	r3, #0
 8004248:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

		return status;
 800424c:	4618      	mov	r0, r3
	}
}
 800424e:	4770      	bx	lr

08004250 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 8004250:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status = HAL_OK;

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 8004252:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004256:	2b02      	cmp	r3, #2
 8004258:	d003      	beq.n	8004262 <HAL_DMA_Abort_IT+0x12>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800425a:	2304      	movs	r3, #4
 800425c:	63c3      	str	r3, [r0, #60]	; 0x3c

		status = HAL_ERROR;
 800425e:	2001      	movs	r0, #1
		if (hdma->XferAbortCallback != NULL) {
			hdma->XferAbortCallback(hdma);
		}
	}
	return status;
}
 8004260:	bd10      	pop	{r4, pc}
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004262:	6803      	ldr	r3, [r0, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f022 020e 	bic.w	r2, r2, #14
 800426a:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(hdma);
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
		hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004274:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]
				<< (hdma->ChannelIndex & 0x1CU));
 800427e:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	; 0x40
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	2301      	movs	r3, #1
 8004288:	4093      	lsls	r3, r2
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1
 800428a:	604b      	str	r3, [r1, #4]
		hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800428c:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	; 0x4c
 8004290:	605a      	str	r2, [r3, #4]
		if (hdma->DMAmuxRequestGen != 0U) {
 8004292:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004294:	b133      	cbz	r3, 80042a4 <HAL_DMA_Abort_IT+0x54>
			hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800429c:	601a      	str	r2, [r3, #0]
					hdma->DMAmuxRequestGenStatusMask;
 800429e:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	; 0x58
			hdma->DMAmuxRequestGenStatus->RGCFR =
 80042a2:	605a      	str	r2, [r3, #4]
		hdma->State = HAL_DMA_STATE_READY;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
		if (hdma->XferAbortCallback != NULL) {
 80042aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
		__HAL_UNLOCK(hdma);
 80042ac:	2400      	movs	r4, #0
 80042ae:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
		if (hdma->XferAbortCallback != NULL) {
 80042b2:	b113      	cbz	r3, 80042ba <HAL_DMA_Abort_IT+0x6a>
			hdma->XferAbortCallback(hdma);
 80042b4:	4798      	blx	r3
	HAL_StatusTypeDef status = HAL_OK;
 80042b6:	4620      	mov	r0, r4
 80042b8:	e7d2      	b.n	8004260 <HAL_DMA_Abort_IT+0x10>
 80042ba:	4618      	mov	r0, r3
 80042bc:	e7d0      	b.n	8004260 <HAL_DMA_Abort_IT+0x10>
	...

080042c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800446c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042c8:	4c66      	ldr	r4, [pc, #408]	; (8004464 <HAL_GPIO_Init+0x1a4>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042ca:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8004470 <HAL_GPIO_Init+0x1b0>
  uint32_t position = 0x00u;
 80042ce:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042d0:	680a      	ldr	r2, [r1, #0]
 80042d2:	fa32 f503 	lsrs.w	r5, r2, r3
 80042d6:	d102      	bne.n	80042de <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80042d8:	b003      	add	sp, #12
 80042da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042de:	f04f 0c01 	mov.w	ip, #1
 80042e2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80042e6:	ea1c 0202 	ands.w	r2, ip, r2
 80042ea:	f000 80ab 	beq.w	8004444 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042ee:	684d      	ldr	r5, [r1, #4]
 80042f0:	f025 0a10 	bic.w	sl, r5, #16
 80042f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80042f8:	2603      	movs	r6, #3
 80042fa:	f10a 37ff 	add.w	r7, sl, #4294967295
 80042fe:	fa06 f60e 	lsl.w	r6, r6, lr
 8004302:	2f01      	cmp	r7, #1
 8004304:	ea6f 0606 	mvn.w	r6, r6
 8004308:	d811      	bhi.n	800432e <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 800430a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800430c:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004310:	68cf      	ldr	r7, [r1, #12]
 8004312:	fa07 f70e 	lsl.w	r7, r7, lr
 8004316:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800431a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800431c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800431e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004322:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004326:	409f      	lsls	r7, r3
 8004328:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800432c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800432e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004330:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004334:	688f      	ldr	r7, [r1, #8]
 8004336:	fa07 f70e 	lsl.w	r7, r7, lr
 800433a:	ea47 070c 	orr.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800433e:	f1ba 0f02 	cmp.w	sl, #2
      GPIOx->PUPDR = temp;
 8004342:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004344:	d116      	bne.n	8004374 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->AFR[position >> 3u];
 8004346:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800434a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800434e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8004352:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004356:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800435a:	f04f 0c0f 	mov.w	ip, #15
 800435e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8004362:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004366:	690f      	ldr	r7, [r1, #16]
 8004368:	fa07 f70b 	lsl.w	r7, r7, fp
 800436c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004370:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8004374:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004376:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004378:	f005 0703 	and.w	r7, r5, #3
 800437c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004380:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8004384:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004386:	00ee      	lsls	r6, r5, #3
 8004388:	d55c      	bpl.n	8004444 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800438a:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800438e:	f046 0601 	orr.w	r6, r6, #1
 8004392:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8004396:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 800439a:	f023 0703 	bic.w	r7, r3, #3
 800439e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80043a2:	f006 0601 	and.w	r6, r6, #1
 80043a6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80043aa:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ac:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80043b2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043b6:	f04f 0e0f 	mov.w	lr, #15
 80043ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80043be:	fa0e f60c 	lsl.w	r6, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043c6:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043ca:	d03d      	beq.n	8004448 <HAL_GPIO_Init+0x188>
 80043cc:	4e26      	ldr	r6, [pc, #152]	; (8004468 <HAL_GPIO_Init+0x1a8>)
 80043ce:	42b0      	cmp	r0, r6
 80043d0:	d03c      	beq.n	800444c <HAL_GPIO_Init+0x18c>
 80043d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043d6:	42b0      	cmp	r0, r6
 80043d8:	d03a      	beq.n	8004450 <HAL_GPIO_Init+0x190>
 80043da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043de:	42b0      	cmp	r0, r6
 80043e0:	d038      	beq.n	8004454 <HAL_GPIO_Init+0x194>
 80043e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043e6:	42b0      	cmp	r0, r6
 80043e8:	d036      	beq.n	8004458 <HAL_GPIO_Init+0x198>
 80043ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043ee:	42b0      	cmp	r0, r6
 80043f0:	d034      	beq.n	800445c <HAL_GPIO_Init+0x19c>
 80043f2:	4548      	cmp	r0, r9
 80043f4:	d034      	beq.n	8004460 <HAL_GPIO_Init+0x1a0>
 80043f6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80043fa:	42b0      	cmp	r0, r6
 80043fc:	bf0c      	ite	eq
 80043fe:	2607      	moveq	r6, #7
 8004400:	2608      	movne	r6, #8
 8004402:	fa06 f60c 	lsl.w	r6, r6, ip
 8004406:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800440a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800440c:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 800440e:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004410:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8004414:	bf0c      	ite	eq
 8004416:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004418:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 800441a:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR1;
 800441c:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800441e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8004422:	bf0c      	ite	eq
 8004424:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004426:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8004428:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR1;
 800442a:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800442c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8004430:	bf0c      	ite	eq
 8004432:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004434:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8004436:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8004438:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800443a:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 800443c:	bf54      	ite	pl
 800443e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8004440:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8004442:	60e6      	str	r6, [r4, #12]
    position++;
 8004444:	3301      	adds	r3, #1
 8004446:	e743      	b.n	80042d0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004448:	2600      	movs	r6, #0
 800444a:	e7da      	b.n	8004402 <HAL_GPIO_Init+0x142>
 800444c:	2601      	movs	r6, #1
 800444e:	e7d8      	b.n	8004402 <HAL_GPIO_Init+0x142>
 8004450:	2602      	movs	r6, #2
 8004452:	e7d6      	b.n	8004402 <HAL_GPIO_Init+0x142>
 8004454:	2603      	movs	r6, #3
 8004456:	e7d4      	b.n	8004402 <HAL_GPIO_Init+0x142>
 8004458:	2604      	movs	r6, #4
 800445a:	e7d2      	b.n	8004402 <HAL_GPIO_Init+0x142>
 800445c:	2605      	movs	r6, #5
 800445e:	e7d0      	b.n	8004402 <HAL_GPIO_Init+0x142>
 8004460:	2606      	movs	r6, #6
 8004462:	e7ce      	b.n	8004402 <HAL_GPIO_Init+0x142>
 8004464:	40010400 	.word	0x40010400
 8004468:	48000400 	.word	0x48000400
 800446c:	40021000 	.word	0x40021000
 8004470:	48001800 	.word	0x48001800

08004474 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004478:	4c43      	ldr	r4, [pc, #268]	; (8004588 <HAL_GPIO_DeInit+0x114>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800447a:	f8df a114 	ldr.w	sl, [pc, #276]	; 8004590 <HAL_GPIO_DeInit+0x11c>
 800447e:	f8df b114 	ldr.w	fp, [pc, #276]	; 8004594 <HAL_GPIO_DeInit+0x120>
  uint32_t position = 0x00u;
 8004482:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004484:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004488:	fa31 f302 	lsrs.w	r3, r1, r2
 800448c:	d101      	bne.n	8004492 <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 800448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004492:	fa09 fe02 	lsl.w	lr, r9, r2
    if (iocurrent != 0x00u)
 8004496:	ea1e 0701 	ands.w	r7, lr, r1
 800449a:	d065      	beq.n	8004568 <HAL_GPIO_DeInit+0xf4>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800449c:	f022 0503 	bic.w	r5, r2, #3
 80044a0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80044a4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044a8:	f002 0c03 	and.w	ip, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80044ac:	68ab      	ldr	r3, [r5, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80044b2:	260f      	movs	r6, #15
 80044b4:	fa06 f60c 	lsl.w	r6, r6, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80044b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80044bc:	ea06 0803 	and.w	r8, r6, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80044c0:	d054      	beq.n	800456c <HAL_GPIO_DeInit+0xf8>
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_GPIO_DeInit+0x118>)
 80044c4:	4298      	cmp	r0, r3
 80044c6:	d053      	beq.n	8004570 <HAL_GPIO_DeInit+0xfc>
 80044c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044cc:	4298      	cmp	r0, r3
 80044ce:	d051      	beq.n	8004574 <HAL_GPIO_DeInit+0x100>
 80044d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d4:	4298      	cmp	r0, r3
 80044d6:	d04f      	beq.n	8004578 <HAL_GPIO_DeInit+0x104>
 80044d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044dc:	4298      	cmp	r0, r3
 80044de:	d04d      	beq.n	800457c <HAL_GPIO_DeInit+0x108>
 80044e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e4:	4298      	cmp	r0, r3
 80044e6:	d04b      	beq.n	8004580 <HAL_GPIO_DeInit+0x10c>
 80044e8:	4550      	cmp	r0, sl
 80044ea:	d04b      	beq.n	8004584 <HAL_GPIO_DeInit+0x110>
 80044ec:	4558      	cmp	r0, fp
 80044ee:	bf0c      	ite	eq
 80044f0:	2307      	moveq	r3, #7
 80044f2:	2308      	movne	r3, #8
 80044f4:	fa03 f30c 	lsl.w	r3, r3, ip
 80044f8:	4543      	cmp	r3, r8
 80044fa:	d113      	bne.n	8004524 <HAL_GPIO_DeInit+0xb0>
        EXTI->IMR1 &= ~(iocurrent);
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	ea23 0307 	bic.w	r3, r3, r7
 8004502:	6023      	str	r3, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	ea23 0307 	bic.w	r3, r3, r7
 800450a:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	ea23 0307 	bic.w	r3, r3, r7
 8004512:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004514:	68e3      	ldr	r3, [r4, #12]
 8004516:	ea23 0707 	bic.w	r7, r3, r7
 800451a:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800451c:	68ab      	ldr	r3, [r5, #8]
 800451e:	ea23 0606 	bic.w	r6, r3, r6
 8004522:	60ae      	str	r6, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004524:	6805      	ldr	r5, [r0, #0]
 8004526:	2603      	movs	r6, #3
 8004528:	0053      	lsls	r3, r2, #1
 800452a:	fa06 f303 	lsl.w	r3, r6, r3
 800452e:	431d      	orrs	r5, r3
 8004530:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004532:	fa22 f506 	lsr.w	r5, r2, r6
 8004536:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800453a:	f002 0c07 	and.w	ip, r2, #7
 800453e:	6a2e      	ldr	r6, [r5, #32]
 8004540:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004544:	270f      	movs	r7, #15
 8004546:	fa07 f70c 	lsl.w	r7, r7, ip
 800454a:	ea26 0707 	bic.w	r7, r6, r7
 800454e:	622f      	str	r7, [r5, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004550:	6885      	ldr	r5, [r0, #8]
 8004552:	ea25 0503 	bic.w	r5, r5, r3
 8004556:	6085      	str	r5, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004558:	6845      	ldr	r5, [r0, #4]
 800455a:	ea25 050e 	bic.w	r5, r5, lr
 800455e:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004560:	68c5      	ldr	r5, [r0, #12]
 8004562:	ea25 0303 	bic.w	r3, r5, r3
 8004566:	60c3      	str	r3, [r0, #12]
    position++;
 8004568:	3201      	adds	r2, #1
 800456a:	e78d      	b.n	8004488 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800456c:	2300      	movs	r3, #0
 800456e:	e7c1      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004570:	2301      	movs	r3, #1
 8004572:	e7bf      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004574:	2302      	movs	r3, #2
 8004576:	e7bd      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004578:	2303      	movs	r3, #3
 800457a:	e7bb      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 800457c:	2304      	movs	r3, #4
 800457e:	e7b9      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004580:	2305      	movs	r3, #5
 8004582:	e7b7      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004584:	2306      	movs	r3, #6
 8004586:	e7b5      	b.n	80044f4 <HAL_GPIO_DeInit+0x80>
 8004588:	40010400 	.word	0x40010400
 800458c:	48000400 	.word	0x48000400
 8004590:	48001800 	.word	0x48001800
 8004594:	48001c00 	.word	0x48001c00

08004598 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004598:	6903      	ldr	r3, [r0, #16]
 800459a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800459c:	bf14      	ite	ne
 800459e:	2001      	movne	r0, #1
 80045a0:	2000      	moveq	r0, #0
 80045a2:	4770      	bx	lr

080045a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a4:	b10a      	cbz	r2, 80045aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045a6:	6181      	str	r1, [r0, #24]
 80045a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80045b2:	6951      	ldr	r1, [r2, #20]
 80045b4:	4201      	tst	r1, r0
{
 80045b6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045b8:	d002      	beq.n	80045c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ba:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045bc:	f012 ff24 	bl	8017408 <HAL_GPIO_EXTI_Callback>
  }
}
 80045c0:	bd08      	pop	{r3, pc}
 80045c2:	bf00      	nop
 80045c4:	40010400 	.word	0x40010400

080045c8 <I2C_Flush_TXDR>:
 * @retval None
 */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c) {
	/* If a pending TXIS flag is set */
	/* Write a dummy data in TXDR to clear it */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET) {
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	0791      	lsls	r1, r2, #30
		hi2c->Instance->TXDR = 0x00U;
 80045ce:	bf44      	itt	mi
 80045d0:	2200      	movmi	r2, #0
 80045d2:	629a      	strmi	r2, [r3, #40]	; 0x28
	}

	/* Flush TX register if not empty */
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	07d2      	lsls	r2, r2, #31
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045d8:	bf5e      	ittt	pl
 80045da:	699a      	ldrpl	r2, [r3, #24]
 80045dc:	f042 0201 	orrpl.w	r2, r2, #1
 80045e0:	619a      	strpl	r2, [r3, #24]
	}
}
 80045e2:	4770      	bx	lr

080045e4 <I2C_TransferConfig>:
 *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
 *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
 * @retval None
 */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint8_t Size, uint32_t Mode, uint32_t Request) {
 80045e4:	b530      	push	{r4, r5, lr}
 80045e6:	9d03      	ldr	r5, [sp, #12]
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_TRANSFER_MODE(Mode));
	assert_param(IS_TRANSFER_REQUEST(Request));

	/* update CR2 register */
	MODIFY_REG(hi2c->Instance->CR2,
 80045e8:	6804      	ldr	r4, [r0, #0]
 80045ea:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <I2C_TransferConfig+0x24>)
 80045f2:	6860      	ldr	r0, [r4, #4]
 80045f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80045f8:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80045fc:	430a      	orrs	r2, r1
 80045fe:	ea20 0003 	bic.w	r0, r0, r3
 8004602:	4302      	orrs	r2, r0
 8004604:	6062      	str	r2, [r4, #4]
			((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)),
			(uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004606:	bd30      	pop	{r4, r5, pc}
 8004608:	03ff63ff 	.word	0x03ff63ff

0800460c <I2C_IsAcknowledgeFailed>:
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800460c:	6803      	ldr	r3, [r0, #0]
		uint32_t Timeout, uint32_t Tickstart) {
 800460e:	b570      	push	{r4, r5, r6, lr}
 8004610:	4604      	mov	r4, r0
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004612:	6998      	ldr	r0, [r3, #24]
 8004614:	f010 0010 	ands.w	r0, r0, #16
		uint32_t Timeout, uint32_t Tickstart) {
 8004618:	460d      	mov	r5, r1
 800461a:	4616      	mov	r6, r2
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 800461c:	d116      	bne.n	800464c <I2C_IsAcknowledgeFailed+0x40>
}
 800461e:	bd70      	pop	{r4, r5, r6, pc}
			if (Timeout != HAL_MAX_DELAY) {
 8004620:	1c69      	adds	r1, r5, #1
 8004622:	d014      	beq.n	800464e <I2C_IsAcknowledgeFailed+0x42>
				if (((HAL_GetTick() - Tickstart) > Timeout)
 8004624:	f7ff fd60 	bl	80040e8 <HAL_GetTick>
 8004628:	1b80      	subs	r0, r0, r6
 800462a:	42a8      	cmp	r0, r5
 800462c:	d800      	bhi.n	8004630 <I2C_IsAcknowledgeFailed+0x24>
						|| (Timeout == 0U)) {
 800462e:	b96d      	cbnz	r5, 800464c <I2C_IsAcknowledgeFailed+0x40>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6463      	str	r3, [r4, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 8004638:	2320      	movs	r3, #32
 800463a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	2300      	movs	r3, #0
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		__HAL_UNLOCK(hi2c);
 8004644:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		return HAL_ERROR;
 8004648:	2001      	movs	r0, #1
 800464a:	e7e8      	b.n	800461e <I2C_IsAcknowledgeFailed+0x12>
		while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	0692      	lsls	r2, r2, #26
 8004652:	d5e5      	bpl.n	8004620 <I2C_IsAcknowledgeFailed+0x14>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004654:	2210      	movs	r2, #16
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004656:	2520      	movs	r5, #32
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	61da      	str	r2, [r3, #28]
		I2C_Flush_TXDR(hi2c);
 800465a:	4620      	mov	r0, r4
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800465c:	61dd      	str	r5, [r3, #28]
		I2C_Flush_TXDR(hi2c);
 800465e:	f7ff ffb3 	bl	80045c8 <I2C_Flush_TXDR>
		I2C_RESET_CR2(hi2c);
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	6853      	ldr	r3, [r2, #4]
 8004666:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800466a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800466e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6053      	str	r3, [r2, #4]
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004678:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800467a:	f043 0304 	orr.w	r3, r3, #4
 800467e:	6463      	str	r3, [r4, #68]	; 0x44
		hi2c->State = HAL_I2C_STATE_READY;
 8004680:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8004684:	e7db      	b.n	800463e <I2C_IsAcknowledgeFailed+0x32>

08004686 <I2C_WaitOnSTOPFlagUntilTimeout>:
		uint32_t Timeout, uint32_t Tickstart) {
 8004686:	b570      	push	{r4, r5, r6, lr}
 8004688:	4604      	mov	r4, r0
 800468a:	460d      	mov	r5, r1
 800468c:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) {
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	069b      	lsls	r3, r3, #26
 8004694:	d501      	bpl.n	800469a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	return HAL_OK;
 8004696:	2000      	movs	r0, #0
}
 8004698:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK) {
 800469a:	4632      	mov	r2, r6
 800469c:	4629      	mov	r1, r5
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff ffb4 	bl	800460c <I2C_IsAcknowledgeFailed>
 80046a4:	b990      	cbnz	r0, 80046cc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
		if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80046a6:	f7ff fd1f 	bl	80040e8 <HAL_GetTick>
 80046aa:	1b80      	subs	r0, r0, r6
 80046ac:	42a8      	cmp	r0, r5
 80046ae:	d801      	bhi.n	80046b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	d1ec      	bne.n	800468e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6463      	str	r3, [r4, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	2320      	movs	r3, #32
 80046be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					__HAL_UNLOCK(hi2c);
 80046c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			return HAL_ERROR;
 80046cc:	2001      	movs	r0, #1
 80046ce:	e7e3      	b.n	8004698 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080046d0 <I2C_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 80046d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	9f06      	ldr	r7, [sp, #24]
 80046d6:	4604      	mov	r4, r0
 80046d8:	4688      	mov	r8, r1
 80046da:	4616      	mov	r6, r2
 80046dc:	461d      	mov	r5, r3
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	6993      	ldr	r3, [r2, #24]
 80046e2:	ea38 0303 	bics.w	r3, r8, r3
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	42b3      	cmp	r3, r6
 80046ee:	d001      	beq.n	80046f4 <I2C_WaitOnFlagUntilTimeout+0x24>
	return HAL_OK;
 80046f0:	2000      	movs	r0, #0
 80046f2:	e015      	b.n	8004720 <I2C_WaitOnFlagUntilTimeout+0x50>
		if (Timeout != HAL_MAX_DELAY) {
 80046f4:	1c6b      	adds	r3, r5, #1
 80046f6:	d0f3      	beq.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80046f8:	f7ff fcf6 	bl	80040e8 <HAL_GetTick>
 80046fc:	1bc0      	subs	r0, r0, r7
 80046fe:	42a8      	cmp	r0, r5
 8004700:	d801      	bhi.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004702:	2d00      	cmp	r5, #0
 8004704:	d1eb      	bne.n	80046de <I2C_WaitOnFlagUntilTimeout+0xe>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004708:	f043 0320 	orr.w	r3, r3, #32
 800470c:	6463      	str	r3, [r4, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 800470e:	2320      	movs	r3, #32
 8004710:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					__HAL_UNLOCK(hi2c);
 800471a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800471e:	2001      	movs	r0, #1
}
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004724 <I2C_WaitOnTXISFlagUntilTimeout>:
		uint32_t Timeout, uint32_t Tickstart) {
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	4616      	mov	r6, r2
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET) {
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	079b      	lsls	r3, r3, #30
 8004732:	d501      	bpl.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
	return HAL_OK;
 8004734:	2000      	movs	r0, #0
}
 8004736:	bd70      	pop	{r4, r5, r6, pc}
		if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004738:	4632      	mov	r2, r6
 800473a:	4629      	mov	r1, r5
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff ff65 	bl	800460c <I2C_IsAcknowledgeFailed>
 8004742:	b9a0      	cbnz	r0, 800476e <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
		if (Timeout != HAL_MAX_DELAY) {
 8004744:	1c6a      	adds	r2, r5, #1
 8004746:	d0f1      	beq.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8004748:	f7ff fcce 	bl	80040e8 <HAL_GetTick>
 800474c:	1b80      	subs	r0, r0, r6
 800474e:	42a8      	cmp	r0, r5
 8004750:	d801      	bhi.n	8004756 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004752:	2d00      	cmp	r5, #0
 8004754:	d1ea      	bne.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	6463      	str	r3, [r4, #68]	; 0x44
					hi2c->State = HAL_I2C_STATE_READY;
 800475e:	2320      	movs	r3, #32
 8004760:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	2300      	movs	r3, #0
 8004766:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
					__HAL_UNLOCK(hi2c);
 800476a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			return HAL_ERROR;
 800476e:	2001      	movs	r0, #1
 8004770:	e7e1      	b.n	8004736 <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08004774 <I2C_RequestMemoryWrite>:
		uint32_t Timeout, uint32_t Tickstart) {
 8004774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004778:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 800477c:	461e      	mov	r6, r3
	I2C_TransferConfig(hi2c, DevAddress, (uint8_t) MemAddSize, I2C_RELOAD_MODE,
 800477e:	4b17      	ldr	r3, [pc, #92]	; (80047dc <I2C_RequestMemoryWrite+0x68>)
 8004780:	9300      	str	r3, [sp, #0]
		uint32_t Timeout, uint32_t Tickstart) {
 8004782:	4605      	mov	r5, r0
 8004784:	4614      	mov	r4, r2
	I2C_TransferConfig(hi2c, DevAddress, (uint8_t) MemAddSize, I2C_RELOAD_MODE,
 8004786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800478a:	b2f2      	uxtb	r2, r6
 800478c:	f7ff ff2a 	bl	80045e4 <I2C_TransferConfig>
	if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8004790:	4642      	mov	r2, r8
 8004792:	4639      	mov	r1, r7
 8004794:	4628      	mov	r0, r5
 8004796:	f7ff ffc5 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 800479a:	b118      	cbz	r0, 80047a4 <I2C_RequestMemoryWrite+0x30>
		return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
}
 800479e:	b002      	add	sp, #8
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 80047a4:	2e01      	cmp	r6, #1
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	d10d      	bne.n	80047c6 <I2C_RequestMemoryWrite+0x52>
		hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047aa:	b2e4      	uxtb	r4, r4
 80047ac:	629c      	str	r4, [r3, #40]	; 0x28
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout,
 80047ae:	2200      	movs	r2, #0
 80047b0:	f8cd 8000 	str.w	r8, [sp]
 80047b4:	463b      	mov	r3, r7
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	4628      	mov	r0, r5
 80047ba:	f7ff ff89 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
		return HAL_ERROR;
 80047be:	3800      	subs	r0, #0
 80047c0:	bf18      	it	ne
 80047c2:	2001      	movne	r0, #1
 80047c4:	e7eb      	b.n	800479e <I2C_RequestMemoryWrite+0x2a>
		hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047c6:	0a22      	lsrs	r2, r4, #8
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
		if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart)
 80047ca:	4639      	mov	r1, r7
 80047cc:	4642      	mov	r2, r8
 80047ce:	4628      	mov	r0, r5
 80047d0:	f7ff ffa8 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1e1      	bne.n	800479c <I2C_RequestMemoryWrite+0x28>
		hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	e7e6      	b.n	80047aa <I2C_RequestMemoryWrite+0x36>
 80047dc:	80002000 	.word	0x80002000

080047e0 <I2C_RequestMemoryRead>:
		uint32_t Timeout, uint32_t Tickstart) {
 80047e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80047e4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80047e8:	461e      	mov	r6, r3
	I2C_TransferConfig(hi2c, DevAddress, (uint8_t) MemAddSize, I2C_SOFTEND_MODE,
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <I2C_RequestMemoryRead+0x68>)
 80047ec:	9300      	str	r3, [sp, #0]
		uint32_t Timeout, uint32_t Tickstart) {
 80047ee:	4605      	mov	r5, r0
 80047f0:	4614      	mov	r4, r2
	I2C_TransferConfig(hi2c, DevAddress, (uint8_t) MemAddSize, I2C_SOFTEND_MODE,
 80047f2:	2300      	movs	r3, #0
 80047f4:	b2f2      	uxtb	r2, r6
 80047f6:	f7ff fef5 	bl	80045e4 <I2C_TransferConfig>
	if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 80047fa:	4642      	mov	r2, r8
 80047fc:	4639      	mov	r1, r7
 80047fe:	4628      	mov	r0, r5
 8004800:	f7ff ff90 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 8004804:	b118      	cbz	r0, 800480e <I2C_RequestMemoryRead+0x2e>
		return HAL_ERROR;
 8004806:	2001      	movs	r0, #1
}
 8004808:	b002      	add	sp, #8
 800480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 800480e:	2e01      	cmp	r6, #1
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	d10d      	bne.n	8004830 <I2C_RequestMemoryRead+0x50>
		hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004814:	b2e4      	uxtb	r4, r4
 8004816:	629c      	str	r4, [r3, #40]	; 0x28
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart)
 8004818:	2200      	movs	r2, #0
 800481a:	f8cd 8000 	str.w	r8, [sp]
 800481e:	463b      	mov	r3, r7
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	4628      	mov	r0, r5
 8004824:	f7ff ff54 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
		return HAL_ERROR;
 8004828:	3800      	subs	r0, #0
 800482a:	bf18      	it	ne
 800482c:	2001      	movne	r0, #1
 800482e:	e7eb      	b.n	8004808 <I2C_RequestMemoryRead+0x28>
		hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004830:	0a22      	lsrs	r2, r4, #8
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
		if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart)
 8004834:	4639      	mov	r1, r7
 8004836:	4642      	mov	r2, r8
 8004838:	4628      	mov	r0, r5
 800483a:	f7ff ff73 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 800483e:	2800      	cmp	r0, #0
 8004840:	d1e1      	bne.n	8004806 <I2C_RequestMemoryRead+0x26>
		hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	e7e6      	b.n	8004814 <I2C_RequestMemoryRead+0x34>
 8004846:	bf00      	nop
 8004848:	80002000 	.word	0x80002000

0800484c <HAL_I2C_MspInit>:
}
 800484c:	4770      	bx	lr

0800484e <HAL_I2C_Init>:
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 800484e:	b510      	push	{r4, lr}
	if (hi2c == NULL) {
 8004850:	4604      	mov	r4, r0
 8004852:	2800      	cmp	r0, #0
 8004854:	d04a      	beq.n	80048ec <HAL_I2C_Init+0x9e>
	if (hi2c->State == HAL_I2C_STATE_RESET) {
 8004856:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800485a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800485e:	b91b      	cbnz	r3, 8004868 <HAL_I2C_Init+0x1a>
		hi2c->Lock = HAL_UNLOCKED;
 8004860:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
		HAL_I2C_MspInit(hi2c);
 8004864:	f7ff fff2 	bl	800484c <HAL_I2C_MspInit>
	hi2c->State = HAL_I2C_STATE_BUSY;
 8004868:	2324      	movs	r3, #36	; 0x24
 800486a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	__HAL_I2C_DISABLE(hi2c);
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
	hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004878:	6862      	ldr	r2, [r4, #4]
 800487a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800487e:	611a      	str	r2, [r3, #16]
	hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004886:	609a      	str	r2, [r3, #8]
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT) {
 8004888:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800488c:	2901      	cmp	r1, #1
 800488e:	d124      	bne.n	80048da <HAL_I2C_Init+0x8c>
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004894:	609a      	str	r2, [r3, #8]
	hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800489c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a0:	605a      	str	r2, [r3, #4]
	hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a8:	60da      	str	r2, [r3, #12]
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 80048aa:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80048ae:	430a      	orrs	r2, r1
			| (hi2c->Init.OwnAddress2Masks << 8));
 80048b0:	69a1      	ldr	r1, [r4, #24]
 80048b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2
 80048b6:	60da      	str	r2, [r3, #12]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048b8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80048bc:	430a      	orrs	r2, r1
	hi2c->Instance->CR1 =
 80048be:	601a      	str	r2, [r3, #0]
	__HAL_I2C_ENABLE(hi2c);
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c8:	2000      	movs	r0, #0
	hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	2320      	movs	r3, #32
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048cc:	6460      	str	r0, [r4, #68]	; 0x44
	hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	hi2c->PreviousState = I2C_STATE_NONE;
 80048d2:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80048d8:	bd10      	pop	{r4, pc}
				| hi2c->Init.OwnAddress1);
 80048da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
	if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT) {
 80048de:	2902      	cmp	r1, #2
		hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE
 80048e0:	609a      	str	r2, [r3, #8]
		hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048e2:	bf04      	itt	eq
 80048e4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80048e8:	605a      	streq	r2, [r3, #4]
 80048ea:	e7d4      	b.n	8004896 <HAL_I2C_Init+0x48>
		return HAL_ERROR;
 80048ec:	2001      	movs	r0, #1
 80048ee:	e7f3      	b.n	80048d8 <HAL_I2C_Init+0x8a>

080048f0 <HAL_I2C_MspDeInit>:
 80048f0:	4770      	bx	lr

080048f2 <HAL_I2C_DeInit>:
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c) {
 80048f2:	b510      	push	{r4, lr}
	if (hi2c == NULL) {
 80048f4:	4604      	mov	r4, r0
 80048f6:	b198      	cbz	r0, 8004920 <HAL_I2C_DeInit+0x2e>
	__HAL_I2C_DISABLE(hi2c);
 80048f8:	6802      	ldr	r2, [r0, #0]
	hi2c->State = HAL_I2C_STATE_BUSY;
 80048fa:	2324      	movs	r3, #36	; 0x24
 80048fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	__HAL_I2C_DISABLE(hi2c);
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6013      	str	r3, [r2, #0]
	HAL_I2C_MspDeInit(hi2c);
 8004908:	f7ff fff2 	bl	80048f0 <HAL_I2C_MspDeInit>
	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	2000      	movs	r0, #0
 800490e:	6460      	str	r0, [r4, #68]	; 0x44
	__HAL_UNLOCK(hi2c);
 8004910:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_RESET;
 8004914:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
	hi2c->PreviousState = I2C_STATE_NONE;
 8004918:	6320      	str	r0, [r4, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800491e:	bd10      	pop	{r4, pc}
		return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
 8004922:	e7fc      	b.n	800491e <HAL_I2C_DeInit+0x2c>

08004924 <HAL_I2C_Mem_Write>:
		uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	b085      	sub	sp, #20
 800492a:	469b      	mov	fp, r3
 800492c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004930:	9303      	str	r3, [sp, #12]
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004932:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
		uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8004936:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (hi2c->State == HAL_I2C_STATE_READY) {
 800493a:	2b20      	cmp	r3, #32
		uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 800493c:	4604      	mov	r4, r0
 800493e:	460f      	mov	r7, r1
 8004940:	4692      	mov	sl, r2
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004942:	f040 80a3 	bne.w	8004a8c <HAL_I2C_Mem_Write+0x168>
		if ((pData == NULL) || (Size == 0U)) {
 8004946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004948:	b10b      	cbz	r3, 800494e <HAL_I2C_Mem_Write+0x2a>
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	b933      	cbnz	r3, 800495c <HAL_I2C_Mem_Write+0x38>
			hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800494e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004952:	6463      	str	r3, [r4, #68]	; 0x44
			return HAL_ERROR;
 8004954:	2001      	movs	r0, #1
}
 8004956:	b005      	add	sp, #20
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__HAL_LOCK(hi2c);
 800495c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004960:	2b01      	cmp	r3, #1
 8004962:	f000 8093 	beq.w	8004a8c <HAL_I2C_Mem_Write+0x168>
 8004966:	2501      	movs	r5, #1
 8004968:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
		tickstart = HAL_GetTick();
 800496c:	f7ff fbbc 	bl	80040e8 <HAL_GetTick>
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004970:	2319      	movs	r3, #25
 8004972:	9000      	str	r0, [sp, #0]
		tickstart = HAL_GetTick();
 8004974:	4606      	mov	r6, r0
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004976:	462a      	mov	r2, r5
 8004978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fea7 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004982:	4680      	mov	r8, r0
 8004984:	2800      	cmp	r0, #0
 8004986:	d1e5      	bne.n	8004954 <HAL_I2C_Mem_Write+0x30>
		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8004988:	2321      	movs	r3, #33	; 0x21
 800498a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_MEM;
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		hi2c->pBuffPtr = pData;
 8004994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004996:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 8004998:	9b03      	ldr	r3, [sp, #12]
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499a:	6460      	str	r0, [r4, #68]	; 0x44
		hi2c->XferISR = NULL;
 800499c:	6360      	str	r0, [r4, #52]	; 0x34
		hi2c->XferCount = Size;
 800499e:	8563      	strh	r3, [r4, #42]	; 0x2a
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize,
 80049a0:	e9cd 9600 	strd	r9, r6, [sp]
 80049a4:	465b      	mov	r3, fp
 80049a6:	4652      	mov	r2, sl
 80049a8:	4639      	mov	r1, r7
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7ff fee2 	bl	8004774 <I2C_RequestMemoryWrite>
 80049b0:	b110      	cbz	r0, 80049b8 <HAL_I2C_Mem_Write+0x94>
			__HAL_UNLOCK(hi2c);
 80049b2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
			return HAL_ERROR;
 80049b6:	e7cd      	b.n	8004954 <HAL_I2C_Mem_Write+0x30>
		if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 80049b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2bff      	cmp	r3, #255	; 0xff
 80049be:	d955      	bls.n	8004a6c <HAL_I2C_Mem_Write+0x148>
			hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c0:	22ff      	movs	r2, #255	; 0xff
 80049c2:	8522      	strh	r2, [r4, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 80049c4:	9000      	str	r0, [sp, #0]
 80049c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 80049ca:	4639      	mov	r1, r7
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff fe09 	bl	80045e4 <I2C_TransferConfig>
			if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart)
 80049d2:	4632      	mov	r2, r6
 80049d4:	4649      	mov	r1, r9
 80049d6:	4620      	mov	r0, r4
 80049d8:	f7ff fea4 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d1b9      	bne.n	8004954 <HAL_I2C_Mem_Write+0x30>
			hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80049e8:	6291      	str	r1, [r2, #40]	; 0x28
			hi2c->pBuffPtr++;
 80049ea:	6263      	str	r3, [r4, #36]	; 0x24
			hi2c->XferCount--;
 80049ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hi2c->XferSize--;
 80049ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->XferCount--;
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 80049f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hi2c->XferSize--;
 80049f8:	3a01      	subs	r2, #1
 80049fa:	b292      	uxth	r2, r2
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 80049fc:	b29b      	uxth	r3, r3
			hi2c->XferSize--;
 80049fe:	8522      	strh	r2, [r4, #40]	; 0x28
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 8004a00:	b1ab      	cbz	r3, 8004a2e <HAL_I2C_Mem_Write+0x10a>
 8004a02:	b9a2      	cbnz	r2, 8004a2e <HAL_I2C_Mem_Write+0x10a>
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET,
 8004a04:	9600      	str	r6, [sp, #0]
 8004a06:	464b      	mov	r3, r9
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fe60 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d19f      	bne.n	8004954 <HAL_I2C_Mem_Write+0x30>
				if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8004a14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2bff      	cmp	r3, #255	; 0xff
 8004a1a:	d92f      	bls.n	8004a7c <HAL_I2C_Mem_Write+0x158>
					hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a1c:	22ff      	movs	r2, #255	; 0xff
 8004a1e:	8522      	strh	r2, [r4, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8004a20:	9000      	str	r0, [sp, #0]
 8004a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
					I2C_TransferConfig(hi2c, DevAddress,
 8004a26:	4639      	mov	r1, r7
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fddb 	bl	80045e4 <I2C_TransferConfig>
		} while (hi2c->XferCount > 0U);
 8004a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1cd      	bne.n	80049d2 <HAL_I2C_Mem_Write+0xae>
		if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart)
 8004a36:	4632      	mov	r2, r6
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f7ff fe23 	bl	8004686 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d187      	bne.n	8004954 <HAL_I2C_Mem_Write+0x30>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	2120      	movs	r1, #32
 8004a48:	61d9      	str	r1, [r3, #28]
		I2C_RESET_CR2(hi2c);
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004a50:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004a54:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	605a      	str	r2, [r3, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
		__HAL_UNLOCK(hi2c);
 8004a62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a66:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
		return HAL_OK;
 8004a6a:	e774      	b.n	8004956 <HAL_I2C_Mem_Write+0x32>
			hi2c->XferSize = hi2c->XferCount;
 8004a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004a6e:	9000      	str	r0, [sp, #0]
			hi2c->XferSize = hi2c->XferCount;
 8004a70:	b292      	uxth	r2, r2
 8004a72:	8522      	strh	r2, [r4, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	e7a6      	b.n	80049ca <HAL_I2C_Mem_Write+0xa6>
					hi2c->XferSize = hi2c->XferCount;
 8004a7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					I2C_TransferConfig(hi2c, DevAddress,
 8004a7e:	9000      	str	r0, [sp, #0]
					hi2c->XferSize = hi2c->XferCount;
 8004a80:	b292      	uxth	r2, r2
 8004a82:	8522      	strh	r2, [r4, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8004a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	e7cc      	b.n	8004a26 <HAL_I2C_Mem_Write+0x102>
		return HAL_BUSY;
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	e762      	b.n	8004956 <HAL_I2C_Mem_Write+0x32>

08004a90 <HAL_I2C_Mem_Read>:
		uint32_t Timeout) {
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	469b      	mov	fp, r3
 8004a98:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004a9c:	9303      	str	r3, [sp, #12]
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004a9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
		uint32_t Timeout) {
 8004aa2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004aa6:	2b20      	cmp	r3, #32
		uint32_t Timeout) {
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460f      	mov	r7, r1
 8004aac:	4692      	mov	sl, r2
	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004aae:	f040 80a7 	bne.w	8004c00 <HAL_I2C_Mem_Read+0x170>
		if ((pData == NULL) || (Size == 0U)) {
 8004ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab4:	b10b      	cbz	r3, 8004aba <HAL_I2C_Mem_Read+0x2a>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	b933      	cbnz	r3, 8004ac8 <HAL_I2C_Mem_Read+0x38>
			hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004abe:	6463      	str	r3, [r4, #68]	; 0x44
			return HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
}
 8004ac2:	b005      	add	sp, #20
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__HAL_LOCK(hi2c);
 8004ac8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f000 8097 	beq.w	8004c00 <HAL_I2C_Mem_Read+0x170>
 8004ad2:	2501      	movs	r5, #1
 8004ad4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
		tickstart = HAL_GetTick();
 8004ad8:	f7ff fb06 	bl	80040e8 <HAL_GetTick>
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004adc:	2319      	movs	r3, #25
 8004ade:	9000      	str	r0, [sp, #0]
		tickstart = HAL_GetTick();
 8004ae0:	4606      	mov	r6, r0
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff fdf1 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4680      	mov	r8, r0
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1e5      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x30>
		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8004af4:	2322      	movs	r3, #34	; 0x22
 8004af6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		hi2c->Mode = HAL_I2C_MODE_MEM;
 8004afa:	2340      	movs	r3, #64	; 0x40
 8004afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		hi2c->pBuffPtr = pData;
 8004b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b02:	6263      	str	r3, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 8004b04:	9b03      	ldr	r3, [sp, #12]
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b06:	6460      	str	r0, [r4, #68]	; 0x44
		hi2c->XferISR = NULL;
 8004b08:	6360      	str	r0, [r4, #52]	; 0x34
		hi2c->XferCount = Size;
 8004b0a:	8563      	strh	r3, [r4, #42]	; 0x2a
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize,
 8004b0c:	e9cd 9600 	strd	r9, r6, [sp]
 8004b10:	465b      	mov	r3, fp
 8004b12:	4652      	mov	r2, sl
 8004b14:	4639      	mov	r1, r7
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7ff fe62 	bl	80047e0 <I2C_RequestMemoryRead>
 8004b1c:	b110      	cbz	r0, 8004b24 <HAL_I2C_Mem_Read+0x94>
			__HAL_UNLOCK(hi2c);
 8004b1e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
			return HAL_ERROR;
 8004b22:	e7cd      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x30>
		if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8004b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2bff      	cmp	r3, #255	; 0xff
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <HAL_I2C_Mem_Read+0x174>)
 8004b2c:	d958      	bls.n	8004be0 <HAL_I2C_Mem_Read+0x150>
			hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2e:	22ff      	movs	r2, #255	; 0xff
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004b30:	9300      	str	r3, [sp, #0]
			hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b32:	8522      	strh	r2, [r4, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f7ff fd52 	bl	80045e4 <I2C_TransferConfig>
			if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout,
 8004b40:	9600      	str	r6, [sp, #0]
 8004b42:	464b      	mov	r3, r9
 8004b44:	2200      	movs	r2, #0
 8004b46:	2104      	movs	r1, #4
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff fdc1 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d1b6      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x30>
			*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->RXDR;
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b58:	701a      	strb	r2, [r3, #0]
			hi2c->pBuffPtr++;
 8004b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
			hi2c->XferSize--;
 8004b5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
			hi2c->pBuffPtr++;
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6263      	str	r3, [r4, #36]	; 0x24
			hi2c->XferCount--;
 8004b62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8563      	strh	r3, [r4, #42]	; 0x2a
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 8004b6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hi2c->XferSize--;
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	b292      	uxth	r2, r2
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 8004b70:	b29b      	uxth	r3, r3
			hi2c->XferSize--;
 8004b72:	8522      	strh	r2, [r4, #40]	; 0x28
			if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U)) {
 8004b74:	b1ab      	cbz	r3, 8004ba2 <HAL_I2C_Mem_Read+0x112>
 8004b76:	b9a2      	cbnz	r2, 8004ba2 <HAL_I2C_Mem_Read+0x112>
				if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET,
 8004b78:	9600      	str	r6, [sp, #0]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff fda6 	bl	80046d0 <I2C_WaitOnFlagUntilTimeout>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d19b      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x30>
				if (hi2c->XferCount > MAX_NBYTE_SIZE) {
 8004b88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2bff      	cmp	r3, #255	; 0xff
 8004b8e:	d92f      	bls.n	8004bf0 <HAL_I2C_Mem_Read+0x160>
					hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b90:	22ff      	movs	r2, #255	; 0xff
 8004b92:	8522      	strh	r2, [r4, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8004b94:	9000      	str	r0, [sp, #0]
 8004b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
					I2C_TransferConfig(hi2c, DevAddress,
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff fd21 	bl	80045e4 <I2C_TransferConfig>
		} while (hi2c->XferCount > 0U);
 8004ba2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ca      	bne.n	8004b40 <HAL_I2C_Mem_Read+0xb0>
		if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart)
 8004baa:	4632      	mov	r2, r6
 8004bac:	4649      	mov	r1, r9
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f7ff fd69 	bl	8004686 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d183      	bne.n	8004ac0 <HAL_I2C_Mem_Read+0x30>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	2120      	movs	r1, #32
 8004bbc:	61d9      	str	r1, [r3, #28]
		I2C_RESET_CR2(hi2c);
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004bc4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004bc8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	605a      	str	r2, [r3, #4]
		hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
		__HAL_UNLOCK(hi2c);
 8004bd6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
		return HAL_OK;
 8004bde:	e770      	b.n	8004ac2 <HAL_I2C_Mem_Read+0x32>
			hi2c->XferSize = hi2c->XferCount;
 8004be0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004be2:	9300      	str	r3, [sp, #0]
			hi2c->XferSize = hi2c->XferCount;
 8004be4:	b292      	uxth	r2, r2
 8004be6:	8522      	strh	r2, [r4, #40]	; 0x28
			I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize,
 8004be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	e7a3      	b.n	8004b38 <HAL_I2C_Mem_Read+0xa8>
					hi2c->XferSize = hi2c->XferCount;
 8004bf0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					I2C_TransferConfig(hi2c, DevAddress,
 8004bf2:	9000      	str	r0, [sp, #0]
					hi2c->XferSize = hi2c->XferCount;
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	8522      	strh	r2, [r4, #40]	; 0x28
					I2C_TransferConfig(hi2c, DevAddress,
 8004bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	e7cc      	b.n	8004b9a <HAL_I2C_Mem_Read+0x10a>
		return HAL_BUSY;
 8004c00:	2002      	movs	r0, #2
 8004c02:	e75e      	b.n	8004ac2 <HAL_I2C_Mem_Read+0x32>
 8004c04:	80002400 	.word	0x80002400

08004c08 <HAL_I2CEx_ConfigAnalogFilter>:
 *                the configuration information for the specified I2Cx peripheral.
 * @param  AnalogFilter New state of the Analog filter.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c,
		uint32_t AnalogFilter) {
 8004c08:	b510      	push	{r4, lr}
	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8004c0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	b2dc      	uxtb	r4, r3
 8004c12:	d11d      	bne.n	8004c50 <HAL_I2CEx_ConfigAnalogFilter+0x48>
		/* Process Locked */
		__HAL_LOCK(hi2c);
 8004c14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d019      	beq.n	8004c50 <HAL_I2CEx_ConfigAnalogFilter+0x48>

		hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1c:	2324      	movs	r3, #36	; 0x24
 8004c1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 8004c22:	6803      	ldr	r3, [r0, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

		/* Reset I2Cx ANOFF bit */
		hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c32:	601a      	str	r2, [r3, #0]

		/* Set analog filter bit*/
		hi2c->Instance->CR1 |= AnalogFilter;
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4311      	orrs	r1, r2
 8004c38:	6019      	str	r1, [r3, #0]

		__HAL_I2C_ENABLE(hi2c);
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004c42:	2300      	movs	r3, #0
		hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
		__HAL_UNLOCK(hi2c);
 8004c48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

		return HAL_OK;
 8004c4c:	4618      	mov	r0, r3
	} else {
		return HAL_BUSY;
	}
}
 8004c4e:	bd10      	pop	{r4, pc}
		return HAL_BUSY;
 8004c50:	2002      	movs	r0, #2
 8004c52:	e7fc      	b.n	8004c4e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004c54 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c54:	4a02      	ldr	r2, [pc, #8]	; (8004c60 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004c56:	6813      	ldr	r3, [r2, #0]
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	6013      	str	r3, [r2, #0]
}
 8004c5e:	4770      	bx	lr
 8004c60:	40007000 	.word	0x40007000

08004c64 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_PWREx_GetVoltageRange+0x20>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004c6c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004c70:	d006      	beq.n	8004c80 <HAL_PWREx_GetVoltageRange+0x1c>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004c72:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004c76:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8004c7a:	bf18      	it	ne
 8004c7c:	f44f 7000 	movne.w	r0, #512	; 0x200
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40007000 	.word	0x40007000

08004c88 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <HAL_PWREx_ControlVoltageScaling+0xac>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c8a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c8c:	bb38      	cbnz	r0, 8004cde <HAL_PWREx_ControlVoltageScaling+0x56>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c8e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8004c92:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c96:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ca2:	d11b      	bne.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x54>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004cb0:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004cb2:	6811      	ldr	r1, [r2, #0]
 8004cb4:	2232      	movs	r2, #50	; 0x32
 8004cb6:	434a      	muls	r2, r1
 8004cb8:	4920      	ldr	r1, [pc, #128]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004cba:	fbb2 f2f1 	udiv	r2, r2, r1
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cc2:	6958      	ldr	r0, [r3, #20]
 8004cc4:	0540      	lsls	r0, r0, #21
 8004cc6:	d500      	bpl.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x42>
 8004cc8:	b922      	cbnz	r2, 8004cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cca:	694b      	ldr	r3, [r1, #20]
 8004ccc:	055b      	lsls	r3, r3, #21
 8004cce:	d403      	bmi.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x50>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cd0:	2000      	movs	r0, #0
}
 8004cd2:	4770      	bx	lr
        wait_loop_index--;
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	e7f4      	b.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0x3a>
        return HAL_TIMEOUT;
 8004cd8:	2003      	movs	r0, #3
 8004cda:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cdc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cde:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004ce2:	d120      	bne.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0x9e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8004ce8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf8:	d1ea      	bne.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x48>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004d08:	6811      	ldr	r1, [r2, #0]
 8004d0a:	2232      	movs	r2, #50	; 0x32
 8004d0c:	434a      	muls	r2, r1
 8004d0e:	490b      	ldr	r1, [pc, #44]	; (8004d3c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004d10:	fbb2 f2f1 	udiv	r2, r2, r1
 8004d14:	4619      	mov	r1, r3
 8004d16:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d18:	6958      	ldr	r0, [r3, #20]
 8004d1a:	0540      	lsls	r0, r0, #21
 8004d1c:	d5d5      	bpl.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x42>
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	d0d3      	beq.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 8004d22:	3a01      	subs	r2, #1
 8004d24:	e7f8      	b.n	8004d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d26:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8004d2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e7ce      	b.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0x48>
 8004d32:	bf00      	nop
 8004d34:	40007000 	.word	0x40007000
 8004d38:	20000210 	.word	0x20000210
 8004d3c:	000f4240 	.word	0x000f4240

08004d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d42:	4d1c      	ldr	r5, [pc, #112]	; (8004db4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8004d44:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004d46:	00da      	lsls	r2, r3, #3
{
 8004d48:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d4a:	d518      	bpl.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d4c:	f7ff ff8a 	bl	8004c64 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004d54:	d123      	bne.n	8004d9e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d56:	2c80      	cmp	r4, #128	; 0x80
 8004d58:	d928      	bls.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d5a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d5c:	bf8c      	ite	hi
 8004d5e:	2402      	movhi	r4, #2
 8004d60:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d62:	4915      	ldr	r1, [pc, #84]	; (8004db8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8004d64:	680a      	ldr	r2, [r1, #0]
 8004d66:	f022 020f 	bic.w	r2, r2, #15
 8004d6a:	4322      	orrs	r2, r4
 8004d6c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d6e:	6808      	ldr	r0, [r1, #0]
 8004d70:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004d74:	1b00      	subs	r0, r0, r4
 8004d76:	bf18      	it	ne
 8004d78:	2001      	movne	r0, #1
 8004d7a:	b003      	add	sp, #12
 8004d7c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d84:	65ab      	str	r3, [r5, #88]	; 0x58
 8004d86:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004d90:	f7ff ff68 	bl	8004c64 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8004d9c:	e7d8      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8004d9e:	2c7f      	cmp	r4, #127	; 0x7f
 8004da0:	d806      	bhi.n	8004db0 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8004da2:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8004da6:	425c      	negs	r4, r3
 8004da8:	415c      	adcs	r4, r3
 8004daa:	e7da      	b.n	8004d62 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dac:	2400      	movs	r4, #0
 8004dae:	e7d8      	b.n	8004d62 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004db0:	2402      	movs	r4, #2
 8004db2:	e7d6      	b.n	8004d62 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40022000 	.word	0x40022000

08004dbc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dbc:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x8c>)
 8004dbe:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dc2:	f012 020c 	ands.w	r2, r2, #12
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x18>
 8004dc8:	2a0c      	cmp	r2, #12
 8004dca:	d115      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dcc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dd0:	2901      	cmp	r1, #1
 8004dd2:	d118      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dd4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8004dd6:	481d      	ldr	r0, [pc, #116]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dd8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dda:	bf55      	itete	pl
 8004ddc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004de2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8004dea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dee:	b34a      	cbz	r2, 8004e44 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004df0:	2a0c      	cmp	r2, #12
 8004df2:	d009      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x4c>
 8004df4:	2000      	movs	r0, #0
  return sysclockfreq;
 8004df6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004df8:	2a04      	cmp	r2, #4
 8004dfa:	d022      	beq.n	8004e42 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dfc:	2a08      	cmp	r2, #8
 8004dfe:	4814      	ldr	r0, [pc, #80]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e00:	bf18      	it	ne
 8004e02:	2000      	movne	r0, #0
 8004e04:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e06:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8004e0e:	2a02      	cmp	r2, #2
 8004e10:	d015      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x82>
 8004e12:	490f      	ldr	r1, [pc, #60]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e14:	2a03      	cmp	r2, #3
 8004e16:	bf08      	it	eq
 8004e18:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e1a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e1c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e24:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e28:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e2c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e2e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e30:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e32:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e34:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8004e38:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e3c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e40:	e7eb      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8004e42:	4804      	ldr	r0, [pc, #16]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	080235d0 	.word	0x080235d0
 8004e50:	007a1200 	.word	0x007a1200
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <HAL_RCC_OscConfig>:
{
 8004e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8004e5c:	4605      	mov	r5, r0
 8004e5e:	b908      	cbnz	r0, 8004e64 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
 8004e62:	e047      	b.n	8004ef4 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e64:	4c9f      	ldr	r4, [pc, #636]	; (80050e4 <HAL_RCC_OscConfig+0x28c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e66:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e68:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e6a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e6c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e72:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e76:	d575      	bpl.n	8004f64 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e78:	b11e      	cbz	r6, 8004e82 <HAL_RCC_OscConfig+0x2a>
 8004e7a:	2e0c      	cmp	r6, #12
 8004e7c:	d154      	bne.n	8004f28 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e7e:	2f01      	cmp	r7, #1
 8004e80:	d152      	bne.n	8004f28 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	0798      	lsls	r0, r3, #30
 8004e86:	d502      	bpl.n	8004e8e <HAL_RCC_OscConfig+0x36>
 8004e88:	69ab      	ldr	r3, [r5, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0e8      	beq.n	8004e60 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	6a28      	ldr	r0, [r5, #32]
 8004e92:	0719      	lsls	r1, r3, #28
 8004e94:	bf56      	itet	pl
 8004e96:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8004e9a:	6823      	ldrmi	r3, [r4, #0]
 8004e9c:	091b      	lsrpl	r3, r3, #4
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	d929      	bls.n	8004efa <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ea6:	f7ff ff4b 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d1d8      	bne.n	8004e60 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	6a2a      	ldr	r2, [r5, #32]
 8004eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	69ea      	ldr	r2, [r5, #28]
 8004ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004ece:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed0:	f7ff ff74 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	4a84      	ldr	r2, [pc, #528]	; (80050e8 <HAL_RCC_OscConfig+0x290>)
 8004ed8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
 8004ede:	f003 031f 	and.w	r3, r3, #31
 8004ee2:	40d8      	lsrs	r0, r3
 8004ee4:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_OscConfig+0x294>)
 8004ee6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004ee8:	4b81      	ldr	r3, [pc, #516]	; (80050f0 <HAL_RCC_OscConfig+0x298>)
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	f7fc f9f6 	bl	80012dc <HAL_InitTick>
        if(status != HAL_OK)
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d037      	beq.n	8004f64 <HAL_RCC_OscConfig+0x10c>
}
 8004ef4:	b003      	add	sp, #12
 8004ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f08:	4303      	orrs	r3, r0
 8004f0a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	69ea      	ldr	r2, [r5, #28]
 8004f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f18:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	d1d8      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f1e:	f7ff ff0f 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d0d4      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x78>
 8004f26:	e79b      	b.n	8004e60 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f28:	69ab      	ldr	r3, [r5, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03a      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f36:	f7ff f8d7 	bl	80040e8 <HAL_GetTick>
 8004f3a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	079a      	lsls	r2, r3, #30
 8004f40:	d528      	bpl.n	8004f94 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6a2a      	ldr	r2, [r5, #32]
 8004f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f52:	4313      	orrs	r3, r2
 8004f54:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	69ea      	ldr	r2, [r5, #28]
 8004f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f62:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	07d8      	lsls	r0, r3, #31
 8004f68:	d42d      	bmi.n	8004fc6 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	0799      	lsls	r1, r3, #30
 8004f6e:	d46b      	bmi.n	8005048 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	0718      	lsls	r0, r3, #28
 8004f74:	f100 80a0 	bmi.w	80050b8 <HAL_RCC_OscConfig+0x260>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	0759      	lsls	r1, r3, #29
 8004f7c:	f100 80ce 	bmi.w	800511c <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	069f      	lsls	r7, r3, #26
 8004f84:	f100 8137 	bmi.w	80051f6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f88:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 815d 	bne.w	800524a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8004f90:	2000      	movs	r0, #0
 8004f92:	e7af      	b.n	8004ef4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f94:	f7ff f8a8 	bl	80040e8 <HAL_GetTick>
 8004f98:	eba0 0008 	sub.w	r0, r0, r8
 8004f9c:	2802      	cmp	r0, #2
 8004f9e:	d9cd      	bls.n	8004f3c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	e7a7      	b.n	8004ef4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004fac:	f7ff f89c 	bl	80040e8 <HAL_GetTick>
 8004fb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	079b      	lsls	r3, r3, #30
 8004fb6:	d5d5      	bpl.n	8004f64 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fb8:	f7ff f896 	bl	80040e8 <HAL_GetTick>
 8004fbc:	eba0 0008 	sub.w	r0, r0, r8
 8004fc0:	2802      	cmp	r0, #2
 8004fc2:	d9f6      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x15a>
 8004fc4:	e7ec      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fc6:	2e08      	cmp	r6, #8
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x17a>
 8004fca:	2e0c      	cmp	r6, #12
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fce:	2f03      	cmp	r7, #3
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	039a      	lsls	r2, r3, #14
 8004fd6:	d5c8      	bpl.n	8004f6a <HAL_RCC_OscConfig+0x112>
 8004fd8:	686b      	ldr	r3, [r5, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1c5      	bne.n	8004f6a <HAL_RCC_OscConfig+0x112>
 8004fde:	e73f      	b.n	8004e60 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe0:	686b      	ldr	r3, [r5, #4]
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe6:	d110      	bne.n	800500a <HAL_RCC_OscConfig+0x1b2>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ff0:	f7ff f87a 	bl	80040e8 <HAL_GetTick>
 8004ff4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	039b      	lsls	r3, r3, #14
 8004ffa:	d4b6      	bmi.n	8004f6a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7ff f874 	bl	80040e8 <HAL_GetTick>
 8005000:	eba0 0008 	sub.w	r0, r0, r8
 8005004:	2864      	cmp	r0, #100	; 0x64
 8005006:	d9f6      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x19e>
 8005008:	e7ca      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500e:	d104      	bne.n	800501a <HAL_RCC_OscConfig+0x1c2>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	e7e6      	b.n	8004fe8 <HAL_RCC_OscConfig+0x190>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005020:	6022      	str	r2, [r4, #0]
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005028:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 800502e:	f7ff f85b 	bl	80040e8 <HAL_GetTick>
 8005032:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	0398      	lsls	r0, r3, #14
 8005038:	d597      	bpl.n	8004f6a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503a:	f7ff f855 	bl	80040e8 <HAL_GetTick>
 800503e:	eba0 0008 	sub.w	r0, r0, r8
 8005042:	2864      	cmp	r0, #100	; 0x64
 8005044:	d9f6      	bls.n	8005034 <HAL_RCC_OscConfig+0x1dc>
 8005046:	e7ab      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005048:	2e04      	cmp	r6, #4
 800504a:	d003      	beq.n	8005054 <HAL_RCC_OscConfig+0x1fc>
 800504c:	2e0c      	cmp	r6, #12
 800504e:	d110      	bne.n	8005072 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005050:	2f02      	cmp	r7, #2
 8005052:	d10e      	bne.n	8005072 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	0559      	lsls	r1, r3, #21
 8005058:	d503      	bpl.n	8005062 <HAL_RCC_OscConfig+0x20a>
 800505a:	68eb      	ldr	r3, [r5, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f43f aeff 	beq.w	8004e60 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	6863      	ldr	r3, [r4, #4]
 8005064:	692a      	ldr	r2, [r5, #16]
 8005066:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800506a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800506e:	6063      	str	r3, [r4, #4]
 8005070:	e77e      	b.n	8004f70 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005072:	68eb      	ldr	r3, [r5, #12]
 8005074:	b17b      	cbz	r3, 8005096 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800507e:	f7ff f833 	bl	80040e8 <HAL_GetTick>
 8005082:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	055a      	lsls	r2, r3, #21
 8005088:	d4eb      	bmi.n	8005062 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508a:	f7ff f82d 	bl	80040e8 <HAL_GetTick>
 800508e:	1bc0      	subs	r0, r0, r7
 8005090:	2802      	cmp	r0, #2
 8005092:	d9f7      	bls.n	8005084 <HAL_RCC_OscConfig+0x22c>
 8005094:	e784      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800509e:	f7ff f823 	bl	80040e8 <HAL_GetTick>
 80050a2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	055b      	lsls	r3, r3, #21
 80050a8:	f57f af62 	bpl.w	8004f70 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ac:	f7ff f81c 	bl	80040e8 <HAL_GetTick>
 80050b0:	1bc0      	subs	r0, r0, r7
 80050b2:	2802      	cmp	r0, #2
 80050b4:	d9f6      	bls.n	80050a4 <HAL_RCC_OscConfig+0x24c>
 80050b6:	e773      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b8:	696b      	ldr	r3, [r5, #20]
 80050ba:	b1db      	cbz	r3, 80050f4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 80050bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80050c8:	f7ff f80e 	bl	80040e8 <HAL_GetTick>
 80050cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80050d2:	079a      	lsls	r2, r3, #30
 80050d4:	f53f af50 	bmi.w	8004f78 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d8:	f7ff f806 	bl	80040e8 <HAL_GetTick>
 80050dc:	1bc0      	subs	r0, r0, r7
 80050de:	2802      	cmp	r0, #2
 80050e0:	d9f5      	bls.n	80050ce <HAL_RCC_OscConfig+0x276>
 80050e2:	e75d      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
 80050e4:	40021000 	.word	0x40021000
 80050e8:	080235b6 	.word	0x080235b6
 80050ec:	20000210 	.word	0x20000210
 80050f0:	20000218 	.word	0x20000218
      __HAL_RCC_LSI_DISABLE();
 80050f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005100:	f7fe fff2 	bl	80040e8 <HAL_GetTick>
 8005104:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005106:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	f57f af34 	bpl.w	8004f78 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005110:	f7fe ffea 	bl	80040e8 <HAL_GetTick>
 8005114:	1bc0      	subs	r0, r0, r7
 8005116:	2802      	cmp	r0, #2
 8005118:	d9f5      	bls.n	8005106 <HAL_RCC_OscConfig+0x2ae>
 800511a:	e741      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800511c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800511e:	00df      	lsls	r7, r3, #3
 8005120:	d429      	bmi.n	8005176 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	65a3      	str	r3, [r4, #88]	; 0x58
 800512a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005134:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005138:	4f9c      	ldr	r7, [pc, #624]	; (80053ac <HAL_RCC_OscConfig+0x554>)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	05d8      	lsls	r0, r3, #23
 800513e:	d51d      	bpl.n	800517c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005140:	68ab      	ldr	r3, [r5, #8]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d12b      	bne.n	800519e <HAL_RCC_OscConfig+0x346>
 8005146:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005152:	f7fe ffc9 	bl	80040e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800515a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005160:	079a      	lsls	r2, r3, #30
 8005162:	d542      	bpl.n	80051ea <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8005164:	f1b8 0f00 	cmp.w	r8, #0
 8005168:	f43f af0a 	beq.w	8004f80 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 800516c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005172:	65a3      	str	r3, [r4, #88]	; 0x58
 8005174:	e704      	b.n	8004f80 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	e7dd      	b.n	8005138 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005184:	f7fe ffb0 	bl	80040e8 <HAL_GetTick>
 8005188:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	05d9      	lsls	r1, r3, #23
 800518e:	d4d7      	bmi.n	8005140 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fe ffaa 	bl	80040e8 <HAL_GetTick>
 8005194:	eba0 0009 	sub.w	r0, r0, r9
 8005198:	2802      	cmp	r0, #2
 800519a:	d9f6      	bls.n	800518a <HAL_RCC_OscConfig+0x332>
 800519c:	e700      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d106      	bne.n	80051b0 <HAL_RCC_OscConfig+0x358>
 80051a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80051ae:	e7ca      	b.n	8005146 <HAL_RCC_OscConfig+0x2ee>
 80051b0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80051bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80051c0:	f022 0204 	bic.w	r2, r2, #4
 80051c4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1c2      	bne.n	8005152 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 80051cc:	f7fe ff8c 	bl	80040e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051d4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	d5c2      	bpl.n	8005164 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fe ff83 	bl	80040e8 <HAL_GetTick>
 80051e2:	1bc0      	subs	r0, r0, r7
 80051e4:	4548      	cmp	r0, r9
 80051e6:	d9f6      	bls.n	80051d6 <HAL_RCC_OscConfig+0x37e>
 80051e8:	e6da      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fe ff7d 	bl	80040e8 <HAL_GetTick>
 80051ee:	1bc0      	subs	r0, r0, r7
 80051f0:	4548      	cmp	r0, r9
 80051f2:	d9b3      	bls.n	800515c <HAL_RCC_OscConfig+0x304>
 80051f4:	e6d4      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051f8:	b19b      	cbz	r3, 8005222 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 80051fa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005206:	f7fe ff6f 	bl	80040e8 <HAL_GetTick>
 800520a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800520c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005210:	0798      	lsls	r0, r3, #30
 8005212:	f53f aeb9 	bmi.w	8004f88 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005216:	f7fe ff67 	bl	80040e8 <HAL_GetTick>
 800521a:	1bc0      	subs	r0, r0, r7
 800521c:	2802      	cmp	r0, #2
 800521e:	d9f5      	bls.n	800520c <HAL_RCC_OscConfig+0x3b4>
 8005220:	e6be      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8005222:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800522e:	f7fe ff5b 	bl	80040e8 <HAL_GetTick>
 8005232:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005234:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005238:	0799      	lsls	r1, r3, #30
 800523a:	f57f aea5 	bpl.w	8004f88 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800523e:	f7fe ff53 	bl	80040e8 <HAL_GetTick>
 8005242:	1bc0      	subs	r0, r0, r7
 8005244:	2802      	cmp	r0, #2
 8005246:	d9f5      	bls.n	8005234 <HAL_RCC_OscConfig+0x3dc>
 8005248:	e6aa      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800524a:	2b02      	cmp	r3, #2
 800524c:	f040 808c 	bne.w	8005368 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 8005250:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005254:	f003 0103 	and.w	r1, r3, #3
 8005258:	4291      	cmp	r1, r2
 800525a:	d122      	bne.n	80052a2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800525c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800525e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005262:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005268:	d11b      	bne.n	80052a2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800526a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800526c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005270:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005274:	d115      	bne.n	80052a2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005276:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005278:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800527c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005280:	d10f      	bne.n	80052a2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005282:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005284:	0852      	lsrs	r2, r2, #1
 8005286:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800528a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800528c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005292:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005294:	0852      	lsrs	r2, r2, #1
 8005296:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800529a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800529c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80052a0:	d049      	beq.n	8005336 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052a2:	2e0c      	cmp	r6, #12
 80052a4:	f43f addc 	beq.w	8004e60 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	f53f add8 	bmi.w	8004e60 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	f53f add4 	bmi.w	8004e60 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80052c0:	f7fe ff12 	bl	80040e8 <HAL_GetTick>
 80052c4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	019f      	lsls	r7, r3, #6
 80052ca:	d42e      	bmi.n	800532a <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052cc:	68e2      	ldr	r2, [r4, #12]
 80052ce:	4b38      	ldr	r3, [pc, #224]	; (80053b0 <HAL_RCC_OscConfig+0x558>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80052d4:	4313      	orrs	r3, r2
 80052d6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80052d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80052de:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80052e2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80052e4:	3a01      	subs	r2, #1
 80052e6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80052ea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80052ec:	0852      	lsrs	r2, r2, #1
 80052ee:	3a01      	subs	r2, #1
 80052f0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80052f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80052f6:	0852      	lsrs	r2, r2, #1
 80052f8:	3a01      	subs	r2, #1
 80052fa:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80052fe:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005306:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005308:	68e3      	ldr	r3, [r4, #12]
 800530a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530e:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8005310:	f7fe feea 	bl	80040e8 <HAL_GetTick>
 8005314:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0198      	lsls	r0, r3, #6
 800531a:	f53f ae39 	bmi.w	8004f90 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531e:	f7fe fee3 	bl	80040e8 <HAL_GetTick>
 8005322:	1b40      	subs	r0, r0, r5
 8005324:	2802      	cmp	r0, #2
 8005326:	d9f6      	bls.n	8005316 <HAL_RCC_OscConfig+0x4be>
 8005328:	e63a      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7fe fedd 	bl	80040e8 <HAL_GetTick>
 800532e:	1b80      	subs	r0, r0, r6
 8005330:	2802      	cmp	r0, #2
 8005332:	d9c8      	bls.n	80052c6 <HAL_RCC_OscConfig+0x46e>
 8005334:	e634      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	0199      	lsls	r1, r3, #6
 800533a:	f53f ae29 	bmi.w	8004f90 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005344:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534c:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800534e:	f7fe fecb 	bl	80040e8 <HAL_GetTick>
 8005352:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	019a      	lsls	r2, r3, #6
 8005358:	f53f ae1a 	bmi.w	8004f90 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535c:	f7fe fec4 	bl	80040e8 <HAL_GetTick>
 8005360:	1b40      	subs	r0, r0, r5
 8005362:	2802      	cmp	r0, #2
 8005364:	d9f6      	bls.n	8005354 <HAL_RCC_OscConfig+0x4fc>
 8005366:	e61b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005368:	2e0c      	cmp	r6, #12
 800536a:	f43f ad79 	beq.w	8004e60 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005374:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800537c:	bf02      	ittt	eq
 800537e:	68e3      	ldreq	r3, [r4, #12]
 8005380:	f023 0303 	biceq.w	r3, r3, #3
 8005384:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005386:	68e3      	ldr	r3, [r4, #12]
 8005388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005392:	f7fe fea9 	bl	80040e8 <HAL_GetTick>
 8005396:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	019b      	lsls	r3, r3, #6
 800539c:	f57f adf8 	bpl.w	8004f90 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fe fea2 	bl	80040e8 <HAL_GetTick>
 80053a4:	1b40      	subs	r0, r0, r5
 80053a6:	2802      	cmp	r0, #2
 80053a8:	d9f6      	bls.n	8005398 <HAL_RCC_OscConfig+0x540>
 80053aa:	e5f9      	b.n	8004fa0 <HAL_RCC_OscConfig+0x148>
 80053ac:	40007000 	.word	0x40007000
 80053b0:	019d800c 	.word	0x019d800c

080053b4 <HAL_RCC_ClockConfig>:
{
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80053ba:	4605      	mov	r5, r0
 80053bc:	b910      	cbnz	r0, 80053c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80053be:	2001      	movs	r0, #1
}
 80053c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c4:	4a6f      	ldr	r2, [pc, #444]	; (8005584 <HAL_RCC_ClockConfig+0x1d0>)
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d335      	bcc.n	800543c <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d0:	6829      	ldr	r1, [r5, #0]
 80053d2:	f011 0701 	ands.w	r7, r1, #1
 80053d6:	d13c      	bne.n	8005452 <HAL_RCC_ClockConfig+0x9e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d8:	682a      	ldr	r2, [r5, #0]
 80053da:	0791      	lsls	r1, r2, #30
 80053dc:	f140 80b7 	bpl.w	800554e <HAL_RCC_ClockConfig+0x19a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e0:	4969      	ldr	r1, [pc, #420]	; (8005588 <HAL_RCC_ClockConfig+0x1d4>)
 80053e2:	68a8      	ldr	r0, [r5, #8]
 80053e4:	688b      	ldr	r3, [r1, #8]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ec:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ee:	4965      	ldr	r1, [pc, #404]	; (8005584 <HAL_RCC_ClockConfig+0x1d0>)
 80053f0:	680b      	ldr	r3, [r1, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	42b3      	cmp	r3, r6
 80053f8:	f200 80b1 	bhi.w	800555e <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	f012 0f04 	tst.w	r2, #4
 8005400:	4c61      	ldr	r4, [pc, #388]	; (8005588 <HAL_RCC_ClockConfig+0x1d4>)
 8005402:	f040 80b8 	bne.w	8005576 <HAL_RCC_ClockConfig+0x1c2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005406:	0713      	lsls	r3, r2, #28
 8005408:	d506      	bpl.n	8005418 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	692a      	ldr	r2, [r5, #16]
 800540e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005412:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005416:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005418:	f7ff fcd0 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	4a5b      	ldr	r2, [pc, #364]	; (800558c <HAL_RCC_ClockConfig+0x1d8>)
 8005420:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005424:	5cd3      	ldrb	r3, [r2, r3]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	40d8      	lsrs	r0, r3
 800542c:	4b58      	ldr	r3, [pc, #352]	; (8005590 <HAL_RCC_ClockConfig+0x1dc>)
 800542e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005430:	4b58      	ldr	r3, [pc, #352]	; (8005594 <HAL_RCC_ClockConfig+0x1e0>)
 8005432:	6818      	ldr	r0, [r3, #0]
}
 8005434:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8005438:	f7fb bf50 	b.w	80012dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	f023 030f 	bic.w	r3, r3, #15
 8005442:	430b      	orrs	r3, r1
 8005444:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	428b      	cmp	r3, r1
 800544e:	d1b6      	bne.n	80053be <HAL_RCC_ClockConfig+0xa>
 8005450:	e7be      	b.n	80053d0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005452:	686b      	ldr	r3, [r5, #4]
 8005454:	4c4c      	ldr	r4, [pc, #304]	; (8005588 <HAL_RCC_ClockConfig+0x1d4>)
 8005456:	2b03      	cmp	r3, #3
 8005458:	d163      	bne.n	8005522 <HAL_RCC_ClockConfig+0x16e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	019b      	lsls	r3, r3, #6
 800545e:	d5ae      	bpl.n	80053be <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005460:	68e3      	ldr	r3, [r4, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d145      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x142>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800546a:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800546c:	4a4a      	ldr	r2, [pc, #296]	; (8005598 <HAL_RCC_ClockConfig+0x1e4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800546e:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005470:	bf55      	itete	pl
 8005472:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005476:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005478:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800547c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8005480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005484:	68e2      	ldr	r2, [r4, #12]
 8005486:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 800548a:	2a02      	cmp	r2, #2
 800548c:	d035      	beq.n	80054fa <HAL_RCC_ClockConfig+0x146>
 800548e:	4843      	ldr	r0, [pc, #268]	; (800559c <HAL_RCC_ClockConfig+0x1e8>)
 8005490:	2a03      	cmp	r2, #3
 8005492:	bf08      	it	eq
 8005494:	4603      	moveq	r3, r0
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005496:	68e0      	ldr	r0, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005498:	68e2      	ldr	r2, [r4, #12]
 800549a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800549e:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a0:	68e2      	ldr	r2, [r4, #12]
 80054a2:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054a6:	f3c0 1003 	ubfx	r0, r0, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054aa:	3201      	adds	r2, #1
 80054ac:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054ae:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054b0:	fbb3 f3f0 	udiv	r3, r3, r0
  sysclockfreq = pllvco / pllr;
 80054b4:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80054b8:	4a39      	ldr	r2, [pc, #228]	; (80055a0 <HAL_RCC_ClockConfig+0x1ec>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d81f      	bhi.n	80054fe <HAL_RCC_ClockConfig+0x14a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054be:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054c0:	68a3      	ldr	r3, [r4, #8]
 80054c2:	686a      	ldr	r2, [r5, #4]
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80054cc:	f7fe fe0c 	bl	80040e8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d0:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80054d4:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	686a      	ldr	r2, [r5, #4]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054e2:	f43f af79 	beq.w	80053d8 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e6:	f7fe fdff 	bl	80040e8 <HAL_GetTick>
 80054ea:	eba0 0008 	sub.w	r0, r0, r8
 80054ee:	4548      	cmp	r0, r9
 80054f0:	d9f1      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80054f2:	2003      	movs	r0, #3
 80054f4:	e764      	b.n	80053c0 <HAL_RCC_ClockConfig+0xc>
  uint32_t msirange = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e7c4      	b.n	8005484 <HAL_RCC_ClockConfig+0xd0>
    pllvco = HSI_VALUE;
 80054fa:	4b2a      	ldr	r3, [pc, #168]	; (80055a4 <HAL_RCC_ClockConfig+0x1f0>)
 80054fc:	e7cb      	b.n	8005496 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0x162>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005510:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005512:	2780      	movs	r7, #128	; 0x80
 8005514:	e7d4      	b.n	80054c0 <HAL_RCC_ClockConfig+0x10c>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005516:	0788      	lsls	r0, r1, #30
 8005518:	d5d1      	bpl.n	80054be <HAL_RCC_ClockConfig+0x10a>
 800551a:	68ab      	ldr	r3, [r5, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ce      	bne.n	80054be <HAL_RCC_ClockConfig+0x10a>
 8005520:	e7f1      	b.n	8005506 <HAL_RCC_ClockConfig+0x152>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005522:	2b02      	cmp	r3, #2
 8005524:	d10a      	bne.n	800553c <HAL_RCC_ClockConfig+0x188>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552c:	f43f af47 	beq.w	80053be <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005530:	f7ff fc44 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <HAL_RCC_ClockConfig+0x1ec>)
 8005536:	4298      	cmp	r0, r3
 8005538:	d9c1      	bls.n	80054be <HAL_RCC_ClockConfig+0x10a>
 800553a:	e7e4      	b.n	8005506 <HAL_RCC_ClockConfig+0x152>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800553c:	b91b      	cbnz	r3, 8005546 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f013 0f02 	tst.w	r3, #2
 8005544:	e7f2      	b.n	800552c <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800554c:	e7ee      	b.n	800552c <HAL_RCC_ClockConfig+0x178>
    if(hpre == RCC_SYSCLK_DIV2)
 800554e:	2f80      	cmp	r7, #128	; 0x80
 8005550:	f47f af4d 	bne.w	80053ee <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005554:	490c      	ldr	r1, [pc, #48]	; (8005588 <HAL_RCC_ClockConfig+0x1d4>)
 8005556:	688b      	ldr	r3, [r1, #8]
 8005558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555c:	e746      	b.n	80053ec <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	680b      	ldr	r3, [r1, #0]
 8005560:	f023 030f 	bic.w	r3, r3, #15
 8005564:	4333      	orrs	r3, r6
 8005566:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005568:	680b      	ldr	r3, [r1, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	42b3      	cmp	r3, r6
 8005570:	f47f af25 	bne.w	80053be <HAL_RCC_ClockConfig+0xa>
 8005574:	e742      	b.n	80053fc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005576:	68a3      	ldr	r3, [r4, #8]
 8005578:	68e9      	ldr	r1, [r5, #12]
 800557a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800557e:	430b      	orrs	r3, r1
 8005580:	60a3      	str	r3, [r4, #8]
 8005582:	e740      	b.n	8005406 <HAL_RCC_ClockConfig+0x52>
 8005584:	40022000 	.word	0x40022000
 8005588:	40021000 	.word	0x40021000
 800558c:	080235b6 	.word	0x080235b6
 8005590:	20000210 	.word	0x20000210
 8005594:	20000218 	.word	0x20000218
 8005598:	080235d0 	.word	0x080235d0
 800559c:	007a1200 	.word	0x007a1200
 80055a0:	04c4b400 	.word	0x04c4b400
 80055a4:	00f42400 	.word	0x00f42400

080055a8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055a8:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80055aa:	4a06      	ldr	r2, [pc, #24]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b6:	6810      	ldr	r0, [r2, #0]
 80055b8:	f003 031f 	and.w	r3, r3, #31
}
 80055bc:	40d8      	lsrs	r0, r3
 80055be:	4770      	bx	lr
 80055c0:	40021000 	.word	0x40021000
 80055c4:	080235c6 	.word	0x080235c6
 80055c8:	20000210 	.word	0x20000210

080055cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055cc:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80055ce:	4a06      	ldr	r2, [pc, #24]	; (80055e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80055d6:	5cd3      	ldrb	r3, [r2, r3]
 80055d8:	4a04      	ldr	r2, [pc, #16]	; (80055ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80055da:	6810      	ldr	r0, [r2, #0]
 80055dc:	f003 031f 	and.w	r3, r3, #31
}
 80055e0:	40d8      	lsrs	r0, r3
 80055e2:	4770      	bx	lr
 80055e4:	40021000 	.word	0x40021000
 80055e8:	080235c6 	.word	0x080235c6
 80055ec:	20000210 	.word	0x20000210

080055f0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055f0:	230f      	movs	r3, #15
 80055f2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_RCC_GetClockConfig+0x34>)
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	f002 0203 	and.w	r2, r2, #3
 80055fc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005604:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800560c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	08db      	lsrs	r3, r3, #3
 8005612:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005616:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetClockConfig+0x38>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	600b      	str	r3, [r1, #0]
}
 8005622:	4770      	bx	lr
 8005624:	40021000 	.word	0x40021000
 8005628:	40022000 	.word	0x40022000

0800562c <RCCEx_PLLSAI1_Config>:
	assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
	assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

	/* Check that PLLSAI1 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 800562c:	4a3d      	ldr	r2, [pc, #244]	; (8005724 <RCCEx_PLLSAI1_Config+0xf8>)
		uint32_t Divider) {
 800562e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005630:	460f      	mov	r7, r1
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8005632:	68d1      	ldr	r1, [r2, #12]
 8005634:	6803      	ldr	r3, [r0, #0]
 8005636:	f011 0f03 	tst.w	r1, #3
		uint32_t Divider) {
 800563a:	4605      	mov	r5, r0
 800563c:	4614      	mov	r4, r2
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 800563e:	d023      	beq.n	8005688 <RCCEx_PLLSAI1_Config+0x5c>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	f002 0203 	and.w	r2, r2, #3
 8005646:	429a      	cmp	r2, r3
 8005648:	d16a      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xf4>
				|| (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800564a:	2a00      	cmp	r2, #0
 800564c:	d068      	beq.n	8005720 <RCCEx_PLLSAI1_Config+0xf4>
		}
	}

	if (status == HAL_OK) {
		/* Disable the PLLSAI1 */
		__HAL_RCC_PLLSAI1_DISABLE();
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005654:	6023      	str	r3, [r4, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8005656:	f7fe fd47 	bl	80040e8 <HAL_GetTick>
 800565a:	4606      	mov	r6, r0

		/* Wait till PLLSAI1 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U) {
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	011a      	lsls	r2, r3, #4
 8005660:	d42d      	bmi.n	80056be <RCCEx_PLLSAI1_Config+0x92>
				break;
			}
		}

		if (status == HAL_OK) {
			if (Divider == DIVIDER_P_UPDATE) {
 8005662:	68ab      	ldr	r3, [r5, #8]
 8005664:	021e      	lsls	r6, r3, #8
 8005666:	686b      	ldr	r3, [r5, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	0118      	lsls	r0, r3, #4
 800566c:	b377      	cbz	r7, 80056cc <RCCEx_PLLSAI1_Config+0xa0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
			} else if (Divider == DIVIDER_Q_UPDATE) {
 800566e:	2f01      	cmp	r7, #1
 8005670:	d145      	bne.n	80056fe <RCCEx_PLLSAI1_Config+0xd2>
				assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
				/* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
				MODIFY_REG(RCC->PLLSAI1CFGR,
 8005672:	692b      	ldr	r3, [r5, #16]
 8005674:	6927      	ldr	r7, [r4, #16]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	1e59      	subs	r1, r3, #1
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <RCCEx_PLLSAI1_Config+0xfc>)
 800567c:	403b      	ands	r3, r7
 800567e:	4333      	orrs	r3, r6
 8005680:	4303      	orrs	r3, r0
 8005682:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005686:	e029      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xb0>
		switch (PllSai1->PLLSAI1Source) {
 8005688:	2b02      	cmp	r3, #2
 800568a:	d00d      	beq.n	80056a8 <RCCEx_PLLSAI1_Config+0x7c>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d00f      	beq.n	80056b0 <RCCEx_PLLSAI1_Config+0x84>
 8005690:	2b01      	cmp	r3, #1
 8005692:	d145      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0xf4>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	f012 0f02 	tst.w	r2, #2
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 800569a:	d041      	beq.n	8005720 <RCCEx_PLLSAI1_Config+0xf4>
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC,
 800569c:	68e0      	ldr	r0, [r4, #12]
 800569e:	f020 0003 	bic.w	r0, r0, #3
 80056a2:	4318      	orrs	r0, r3
 80056a4:	60e0      	str	r0, [r4, #12]
	if (status == HAL_OK) {
 80056a6:	e7d2      	b.n	800564e <RCCEx_PLLSAI1_Config+0x22>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80056ae:	e7f4      	b.n	800569a <RCCEx_PLLSAI1_Config+0x6e>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 80056b0:	6811      	ldr	r1, [r2, #0]
 80056b2:	0389      	lsls	r1, r1, #14
 80056b4:	d4f2      	bmi.n	800569c <RCCEx_PLLSAI1_Config+0x70>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80056bc:	e7ed      	b.n	800569a <RCCEx_PLLSAI1_Config+0x6e>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80056be:	f7fe fd13 	bl	80040e8 <HAL_GetTick>
 80056c2:	1b80      	subs	r0, r0, r6
 80056c4:	2802      	cmp	r0, #2
 80056c6:	d9c9      	bls.n	800565c <RCCEx_PLLSAI1_Config+0x30>
				status = HAL_TIMEOUT;
 80056c8:	2003      	movs	r0, #3
			}
		}
	}

	return status;
}
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				MODIFY_REG(RCC->PLLSAI1CFGR,
 80056cc:	68e9      	ldr	r1, [r5, #12]
 80056ce:	6922      	ldr	r2, [r4, #16]
 80056d0:	ea46 63c1 	orr.w	r3, r6, r1, lsl #27
 80056d4:	4915      	ldr	r1, [pc, #84]	; (800572c <RCCEx_PLLSAI1_Config+0x100>)
 80056d6:	4011      	ands	r1, r2
 80056d8:	430b      	orrs	r3, r1
 80056da:	4303      	orrs	r3, r0
				MODIFY_REG(RCC->PLLSAI1CFGR,
 80056dc:	6123      	str	r3, [r4, #16]
			__HAL_RCC_PLLSAI1_ENABLE();
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056e4:	6023      	str	r3, [r4, #0]
			tickstart = HAL_GetTick();
 80056e6:	f7fe fcff 	bl	80040e8 <HAL_GetTick>
 80056ea:	4606      	mov	r6, r0
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U) {
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	d510      	bpl.n	8005714 <RCCEx_PLLSAI1_Config+0xe8>
				__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	69aa      	ldr	r2, [r5, #24]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	2000      	movs	r0, #0
	return status;
 80056fc:	e7e5      	b.n	80056ca <RCCEx_PLLSAI1_Config+0x9e>
				MODIFY_REG(RCC->PLLSAI1CFGR,
 80056fe:	696b      	ldr	r3, [r5, #20]
 8005700:	6921      	ldr	r1, [r4, #16]
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <RCCEx_PLLSAI1_Config+0x104>)
 8005708:	400b      	ands	r3, r1
 800570a:	4333      	orrs	r3, r6
 800570c:	4303      	orrs	r3, r0
 800570e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005712:	e7e3      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xb0>
				if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8005714:	f7fe fce8 	bl	80040e8 <HAL_GetTick>
 8005718:	1b80      	subs	r0, r0, r6
 800571a:	2802      	cmp	r0, #2
 800571c:	d9e6      	bls.n	80056ec <RCCEx_PLLSAI1_Config+0xc0>
 800571e:	e7d3      	b.n	80056c8 <RCCEx_PLLSAI1_Config+0x9c>
			status = HAL_ERROR;
 8005720:	2001      	movs	r0, #1
 8005722:	e7d2      	b.n	80056ca <RCCEx_PLLSAI1_Config+0x9e>
 8005724:	40021000 	.word	0x40021000
 8005728:	ff9f800f 	.word	0xff9f800f
 800572c:	07ff800f 	.word	0x07ff800f
 8005730:	f9ff800f 	.word	0xf9ff800f

08005734 <RCCEx_PLLSAI2_Config.constprop.0>:
	assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
	assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
	assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

	/* Check that PLLSAI2 clock source and divider M can be applied */
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8005734:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <RCCEx_PLLSAI2_Config.constprop.0+0xc4>)
 8005736:	6803      	ldr	r3, [r0, #0]
 8005738:	68d1      	ldr	r1, [r2, #12]
 800573a:	f011 0f03 	tst.w	r1, #3
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2,
 800573e:	b570      	push	{r4, r5, r6, lr}
 8005740:	4605      	mov	r5, r0
 8005742:	4614      	mov	r4, r2
	if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE) {
 8005744:	d026      	beq.n	8005794 <RCCEx_PLLSAI2_Config.constprop.0+0x60>
		/* PLL clock source and divider M already set, check that no request for change  */
		if ((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005746:	68d2      	ldr	r2, [r2, #12]
 8005748:	f002 0203 	and.w	r2, r2, #3
 800574c:	429a      	cmp	r2, r3
 800574e:	d151      	bne.n	80057f4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>
				|| (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005750:	2a00      	cmp	r2, #0
 8005752:	d04f      	beq.n	80057f4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>
		}
	}

	if (status == HAL_OK) {
		/* Disable the PLLSAI2 */
		__HAL_RCC_PLLSAI2_DISABLE();
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575a:	6023      	str	r3, [r4, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800575c:	f7fe fcc4 	bl	80040e8 <HAL_GetTick>
 8005760:	4606      	mov	r6, r0

		/* Wait till PLLSAI2 is ready to be updated */
		while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U) {
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	009a      	lsls	r2, r3, #2
 8005766:	d430      	bmi.n	80057ca <RCCEx_PLLSAI2_Config.constprop.0+0x96>
				assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

				/* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
				MODIFY_REG(RCC->PLLSAI2CFGR,
 8005768:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800576c:	06db      	lsls	r3, r3, #27
 800576e:	6961      	ldr	r1, [r4, #20]
 8005770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005774:	4a21      	ldr	r2, [pc, #132]	; (80057fc <RCCEx_PLLSAI2_Config.constprop.0+0xc8>)
 8005776:	400a      	ands	r2, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	686a      	ldr	r2, [r5, #4]
 800577c:	3a01      	subs	r2, #1
 800577e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005782:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
			}

			/* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
			__HAL_RCC_PLLSAI2_ENABLE();
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578a:	6023      	str	r3, [r4, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800578c:	f7fe fcac 	bl	80040e8 <HAL_GetTick>
 8005790:	4606      	mov	r6, r0

			/* Wait till PLLSAI2 is ready */
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 8005792:	e026      	b.n	80057e2 <RCCEx_PLLSAI2_Config.constprop.0+0xae>
		switch (PllSai2->PLLSAI2Source) {
 8005794:	2b02      	cmp	r3, #2
 8005796:	d00d      	beq.n	80057b4 <RCCEx_PLLSAI2_Config.constprop.0+0x80>
 8005798:	2b03      	cmp	r3, #3
 800579a:	d00f      	beq.n	80057bc <RCCEx_PLLSAI2_Config.constprop.0+0x88>
 800579c:	2b01      	cmp	r3, #1
 800579e:	d129      	bne.n	80057f4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY)) {
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	f012 0f02 	tst.w	r2, #2
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 80057a6:	d025      	beq.n	80057f4 <RCCEx_PLLSAI2_Config.constprop.0+0xc0>
			MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC,
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	f020 0003 	bic.w	r0, r0, #3
 80057ae:	4318      	orrs	r0, r3
 80057b0:	60e0      	str	r0, [r4, #12]
	if (status == HAL_OK) {
 80057b2:	e7cf      	b.n	8005754 <RCCEx_PLLSAI2_Config.constprop.0+0x20>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY)) {
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80057ba:	e7f4      	b.n	80057a6 <RCCEx_PLLSAI2_Config.constprop.0+0x72>
			if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY)) {
 80057bc:	6811      	ldr	r1, [r2, #0]
 80057be:	0389      	lsls	r1, r1, #14
 80057c0:	d4f2      	bmi.n	80057a8 <RCCEx_PLLSAI2_Config.constprop.0+0x74>
				if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP)) {
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80057c8:	e7ed      	b.n	80057a6 <RCCEx_PLLSAI2_Config.constprop.0+0x72>
			if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 80057ca:	f7fe fc8d 	bl	80040e8 <HAL_GetTick>
 80057ce:	1b80      	subs	r0, r0, r6
 80057d0:	2802      	cmp	r0, #2
 80057d2:	d9c6      	bls.n	8005762 <RCCEx_PLLSAI2_Config.constprop.0+0x2e>
				status = HAL_TIMEOUT;
 80057d4:	2003      	movs	r0, #3
			}
		}
	}

	return status;
}
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
				if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE) {
 80057d8:	f7fe fc86 	bl	80040e8 <HAL_GetTick>
 80057dc:	1b80      	subs	r0, r0, r6
 80057de:	2802      	cmp	r0, #2
 80057e0:	d8f8      	bhi.n	80057d4 <RCCEx_PLLSAI2_Config.constprop.0+0xa0>
			while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U) {
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	d5f7      	bpl.n	80057d8 <RCCEx_PLLSAI2_Config.constprop.0+0xa4>
				__HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057e8:	6963      	ldr	r3, [r4, #20]
 80057ea:	69aa      	ldr	r2, [r5, #24]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	6163      	str	r3, [r4, #20]
 80057f0:	2000      	movs	r0, #0
	return status;
 80057f2:	e7f0      	b.n	80057d6 <RCCEx_PLLSAI2_Config.constprop.0+0xa2>
			status = HAL_ERROR;
 80057f4:	2001      	movs	r0, #1
 80057f6:	e7ee      	b.n	80057d6 <RCCEx_PLLSAI2_Config.constprop.0+0xa2>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	07ff800f 	.word	0x07ff800f

08005800 <HAL_RCCEx_PeriphCLKConfig>:
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8005800:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8005804:	6806      	ldr	r6, [r0, #0]
 8005806:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 800580a:	4604      	mov	r4, r0
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800580c:	d007      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e>
		switch (PeriphClkInit->Sai1ClockSelection) {
 800580e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8005810:	2940      	cmp	r1, #64	; 0x40
 8005812:	d022      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8005814:	d812      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005816:	b331      	cbz	r1, 8005866 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005818:	2920      	cmp	r1, #32
 800581a:	d02b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800581c:	2601      	movs	r6, #1
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	04db      	lsls	r3, r3, #19
 8005822:	d509      	bpl.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x38>
		switch (PeriphClkInit->Sai2ClockSelection) {
 8005824:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005826:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800582a:	d02f      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800582c:	d826      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800582e:	b399      	cbz	r1, 8005898 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005830:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005834:	d073      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8005836:	2601      	movs	r6, #1
 8005838:	4635      	mov	r5, r6
 800583a:	e03c      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
		switch (PeriphClkInit->Sai1ClockSelection) {
 800583c:	2960      	cmp	r1, #96	; 0x60
 800583e:	d001      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005840:	2980      	cmp	r1, #128	; 0x80
 8005842:	d1eb      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1c>
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005844:	4a3b      	ldr	r2, [pc, #236]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005846:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005848:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800584c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005850:	430b      	orrs	r3, r1
 8005852:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005856:	2600      	movs	r6, #0
 8005858:	e7e1      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e>
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800585a:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800585c:	68d3      	ldr	r3, [r2, #12]
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	60d3      	str	r3, [r2, #12]
		if (ret == HAL_OK) {
 8005864:	e7ee      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x44>
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005866:	3004      	adds	r0, #4
 8005868:	f7ff fee0 	bl	800562c <RCCEx_PLLSAI1_Config>
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 800586c:	4606      	mov	r6, r0
		if (ret == HAL_OK) {
 800586e:	2800      	cmp	r0, #0
 8005870:	d1d5      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005872:	e7e7      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x44>
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 8005874:	3020      	adds	r0, #32
 8005876:	f7ff ff5d 	bl	8005734 <RCCEx_PLLSAI2_Config.constprop.0>
 800587a:	e7f7      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x6c>
		switch (PeriphClkInit->Sai2ClockSelection) {
 800587c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8005880:	d002      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005882:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005886:	d1d6      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8005888:	4635      	mov	r5, r6
 800588a:	e009      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800588e:	68d3      	ldr	r3, [r2, #12]
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	60d3      	str	r3, [r2, #12]
			break;
 8005896:	e7f7      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x88>
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005898:	1d20      	adds	r0, r4, #4
 800589a:	f7ff fec7 	bl	800562c <RCCEx_PLLSAI1_Config>
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 800589e:	4605      	mov	r5, r0
		if (ret == HAL_OK) {
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	d141      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x128>
			__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058a4:	4a23      	ldr	r2, [pc, #140]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058a6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80058a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80058ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC)
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	039f      	lsls	r7, r3, #14
 80058ba:	f140 817d 	bpl.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
		if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U) {
 80058be:	4f1d      	ldr	r7, [pc, #116]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80058c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c2:	00d8      	lsls	r0, r3, #3
 80058c4:	d432      	bmi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x12c>
			__HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 80058d8:	f04f 0801 	mov.w	r8, #1
		SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058dc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005938 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80058e0:	f8d9 3000 	ldr.w	r3, [r9]
 80058e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e8:	f8c9 3000 	str.w	r3, [r9]
		tickstart = HAL_GetTick();
 80058ec:	f7fe fbfc 	bl	80040e8 <HAL_GetTick>
 80058f0:	4682      	mov	sl, r0
		while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U) {
 80058f2:	f8d9 3000 	ldr.w	r3, [r9]
 80058f6:	05d9      	lsls	r1, r3, #23
 80058f8:	d520      	bpl.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x13c>
		if (ret == HAL_OK) {
 80058fa:	bb35      	cbnz	r5, 800594a <HAL_RCCEx_PeriphCLKConfig+0x14a>
			tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
			if ((tmpregister != RCC_RTCCLKSOURCE_NONE)
 8005900:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005904:	f040 812e 	bne.w	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x364>
				__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005908:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800590c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800591a:	4635      	mov	r5, r6
 800591c:	e015      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x14a>
			ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2),
 800591e:	f104 0020 	add.w	r0, r4, #32
 8005922:	f7ff ff07 	bl	8005734 <RCCEx_PLLSAI2_Config.constprop.0>
 8005926:	e7ba      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005928:	462e      	mov	r6, r5
 800592a:	e7c4      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
		FlagStatus pwrclkchanged = RESET;
 800592c:	f04f 0800 	mov.w	r8, #0
 8005930:	e7d4      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	40007000 	.word	0x40007000
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800593c:	f7fe fbd4 	bl	80040e8 <HAL_GetTick>
 8005940:	eba0 000a 	sub.w	r0, r0, sl
 8005944:	2802      	cmp	r0, #2
 8005946:	d9d4      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
				ret = HAL_TIMEOUT;
 8005948:	2503      	movs	r5, #3
		if (pwrclkchanged == SET) {
 800594a:	f1b8 0f00 	cmp.w	r8, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x158>
			__HAL_RCC_PWR_CLK_DISABLE();
 8005950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005956:	65bb      	str	r3, [r7, #88]	; 0x58
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	07d8      	lsls	r0, r3, #31
 800595c:	d508      	bpl.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x170>
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800595e:	49b2      	ldr	r1, [pc, #712]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005960:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005962:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005966:	f022 0203 	bic.w	r2, r2, #3
 800596a:	4302      	orrs	r2, r0
 800596c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 8005970:	0799      	lsls	r1, r3, #30
 8005972:	d508      	bpl.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x186>
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005974:	49ac      	ldr	r1, [pc, #688]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005976:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005978:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800597c:	f022 020c 	bic.w	r2, r2, #12
 8005980:	4302      	orrs	r2, r0
 8005982:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8005986:	075a      	lsls	r2, r3, #29
 8005988:	d508      	bpl.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x19c>
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800598a:	49a7      	ldr	r1, [pc, #668]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800598c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800598e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005992:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005996:	4302      	orrs	r2, r0
 8005998:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 800599c:	071f      	lsls	r7, r3, #28
 800599e:	d508      	bpl.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a0:	49a1      	ldr	r1, [pc, #644]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80059a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059a8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80059ac:	4302      	orrs	r2, r0
 80059ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 80059b2:	06de      	lsls	r6, r3, #27
 80059b4:	d508      	bpl.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059b6:	499c      	ldr	r1, [pc, #624]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059b8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059c2:	4302      	orrs	r2, r0
 80059c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 80059c8:	0698      	lsls	r0, r3, #26
 80059ca:	d508      	bpl.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1de>
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059cc:	4996      	ldr	r1, [pc, #600]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80059d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059d8:	4302      	orrs	r2, r0
 80059da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 80059de:	0599      	lsls	r1, r3, #22
 80059e0:	d508      	bpl.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059e2:	4991      	ldr	r1, [pc, #580]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80059e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80059ea:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80059ee:	4302      	orrs	r2, r0
 80059f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 80059f4:	055a      	lsls	r2, r3, #21
 80059f6:	d508      	bpl.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059f8:	498b      	ldr	r1, [pc, #556]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80059fa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80059fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a00:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005a04:	4302      	orrs	r2, r0
 8005a06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8005a0a:	065f      	lsls	r7, r3, #25
 8005a0c:	d508      	bpl.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x220>
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0e:	4986      	ldr	r1, [pc, #536]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a16:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005a1a:	4302      	orrs	r2, r0
 8005a1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 8005a20:	061e      	lsls	r6, r3, #24
 8005a22:	d508      	bpl.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x236>
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a24:	4980      	ldr	r1, [pc, #512]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005a30:	4302      	orrs	r2, r0
 8005a32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8005a36:	05d8      	lsls	r0, r3, #23
 8005a38:	d508      	bpl.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x24c>
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a3a:	497b      	ldr	r1, [pc, #492]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a3c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005a3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005a42:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005a46:	4302      	orrs	r2, r0
 8005a48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8005a4c:	02d9      	lsls	r1, r3, #11
 8005a4e:	d508      	bpl.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x262>
		__HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a50:	4975      	ldr	r1, [pc, #468]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a52:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005a54:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8005a58:	f022 0203 	bic.w	r2, r2, #3
 8005a5c:	4302      	orrs	r2, r0
 8005a5e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8005a62:	049a      	lsls	r2, r3, #18
 8005a64:	d510      	bpl.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x288>
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a66:	4a70      	ldr	r2, [pc, #448]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a68:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005a6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005a6e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005a72:	430b      	orrs	r3, r1
		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8005a74:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 8005a7c:	f040 809e 	bne.w	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	68d3      	ldr	r3, [r2, #12]
 8005a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a86:	60d3      	str	r3, [r2, #12]
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	031b      	lsls	r3, r3, #12
 8005a8c:	d50f      	bpl.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a8e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005a90:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005a92:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005a96:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005a9a:	f040 809b 	bne.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8005a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	60da      	str	r2, [r3, #12]
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	035f      	lsls	r7, r3, #13
 8005ab2:	d510      	bpl.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab4:	4a5c      	ldr	r2, [pc, #368]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005ab6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005ab8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005abc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005ac0:	430b      	orrs	r3, r1
		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8005ac2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ac6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8005aca:	f040 80a1 	bne.w	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x410>
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ace:	68d3      	ldr	r3, [r2, #12]
 8005ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad4:	60d3      	str	r3, [r2, #12]
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	045e      	lsls	r6, r3, #17
 8005ada:	d513      	bpl.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x304>
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005adc:	4952      	ldr	r1, [pc, #328]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005ade:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005ae2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005ae6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005aea:	4313      	orrs	r3, r2
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 8005aec:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 8005af4:	d106      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x304>
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005af6:	2102      	movs	r1, #2
 8005af8:	1d20      	adds	r0, r4, #4
 8005afa:	f7ff fd97 	bl	800562c <RCCEx_PLLSAI1_Config>
			if (ret != HAL_OK) {
 8005afe:	2800      	cmp	r0, #0
 8005b00:	bf18      	it	ne
 8005b02:	4605      	movne	r5, r0
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 8005b04:	6822      	ldr	r2, [r4, #0]
 8005b06:	03d0      	lsls	r0, r2, #15
 8005b08:	d509      	bpl.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b0a:	4947      	ldr	r1, [pc, #284]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005b0c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005b10:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	4303      	orrs	r3, r0
 8005b1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b1e:	0291      	lsls	r1, r2, #10
 8005b20:	d509      	bpl.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x336>
		__HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b22:	4941      	ldr	r1, [pc, #260]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005b24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005b28:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8005b2c:	f023 0318 	bic.w	r3, r3, #24
 8005b30:	4303      	orrs	r3, r0
 8005b32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI)
 8005b36:	01d3      	lsls	r3, r2, #7
 8005b38:	d510      	bpl.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
		__HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b3a:	4a3b      	ldr	r2, [pc, #236]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005b3c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005b40:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005b44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL) {
 8005b4e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b52:	bf02      	ittt	eq
 8005b54:	68d3      	ldreq	r3, [r2, #12]
 8005b56:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8005b5a:	60d3      	streq	r3, [r2, #12]
}
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	b002      	add	sp, #8
 8005b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					&& (tmpregister != PeriphClkInit->RTCClockSelection)) {
 8005b64:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	f43f aecd 	beq.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
				__HAL_RCC_BACKUPRESET_FORCE();
 8005b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				__HAL_RCC_BACKUPRESET_RELEASE();
 8005b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
				tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b82:	f422 7140 	bic.w	r1, r2, #768	; 0x300
				__HAL_RCC_BACKUPRESET_RELEASE();
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8005b8a:	07d2      	lsls	r2, r2, #31
				__HAL_RCC_BACKUPRESET_RELEASE();
 8005b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				RCC->BDCR = tmpregister;
 8005b90:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
			if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON)) {
 8005b94:	f57f aeb8 	bpl.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
				tickstart = HAL_GetTick();
 8005b98:	f7fe faa6 	bl	80040e8 <HAL_GetTick>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005b9c:	f241 3988 	movw	r9, #5000	; 0x1388
				tickstart = HAL_GetTick();
 8005ba0:	4605      	mov	r5, r0
				while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U) {
 8005ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba6:	079b      	lsls	r3, r3, #30
 8005ba8:	f53f aeae 	bmi.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x108>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8005bac:	f7fe fa9c 	bl	80040e8 <HAL_GetTick>
 8005bb0:	1b40      	subs	r0, r0, r5
 8005bb2:	4548      	cmp	r0, r9
 8005bb4:	d9f5      	bls.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005bb6:	e6c7      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8005bb8:	4635      	mov	r5, r6
 8005bba:	e6cd      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x158>
			if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 8005bbc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005bc0:	f47f af62 	bne.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x288>
				ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	1d20      	adds	r0, r4, #4
 8005bc8:	f7ff fd30 	bl	800562c <RCCEx_PLLSAI1_Config>
				if (ret != HAL_OK) {
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	bf18      	it	ne
 8005bd0:	4605      	movne	r5, r0
 8005bd2:	e759      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x288>
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8005bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005be0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005be4:	430a      	orrs	r2, r1
		if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL) /* PLL "Q" ? */
 8005be6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL) /* PLL "Q" ? */
 8005bee:	d103      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005bf6:	e759      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
		else if (PeriphClkInit->Sdmmc1ClockSelection
 8005bf8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005bfc:	f47f af57 	bne.w	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005c00:	2101      	movs	r1, #1
 8005c02:	1d20      	adds	r0, r4, #4
 8005c04:	f7ff fd12 	bl	800562c <RCCEx_PLLSAI1_Config>
			if (ret != HAL_OK) {
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	bf18      	it	ne
 8005c0c:	4605      	movne	r5, r0
 8005c0e:	e74e      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
		else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1) {
 8005c10:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005c14:	f47f af5f 	bne.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
			ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1),
 8005c18:	2101      	movs	r1, #1
 8005c1a:	1d20      	adds	r0, r4, #4
 8005c1c:	f7ff fd06 	bl	800562c <RCCEx_PLLSAI1_Config>
			if (ret != HAL_OK) {
 8005c20:	2800      	cmp	r0, #0
 8005c22:	bf18      	it	ne
 8005c24:	4605      	movne	r5, r0
 8005c26:	e756      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005c28:	40021000 	.word	0x40021000

08005c2c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c2e:	4604      	mov	r4, r0
 8005c30:	b1c0      	cbz	r0, 8005c64 <HAL_RNG_Init+0x38>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c32:	7a43      	ldrb	r3, [r0, #9]
 8005c34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c38:	b913      	cbnz	r3, 8005c40 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005c3a:	7202      	strb	r2, [r0, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005c3c:	f7fb faf0 	bl	8001220 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c40:	2302      	movs	r3, #2
 8005c42:	7263      	strb	r3, [r4, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	6861      	ldr	r1, [r4, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	f022 0220 	bic.w	r2, r2, #32
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	f042 0204 	orr.w	r2, r2, #4
 8005c58:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	065b      	lsls	r3, r3, #25
 8005c5e:	d503      	bpl.n	8005c68 <HAL_RNG_Init+0x3c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005c60:	2304      	movs	r3, #4
 8005c62:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8005c64:	2001      	movs	r0, #1
 8005c66:	e00a      	b.n	8005c7e <HAL_RNG_Init+0x52>
    return HAL_ERROR;
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c68:	f7fe fa3e 	bl	80040e8 <HAL_GetTick>
 8005c6c:	4605      	mov	r5, r0
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	6858      	ldr	r0, [r3, #4]
 8005c72:	f010 0004 	ands.w	r0, r0, #4
 8005c76:	d103      	bne.n	8005c80 <HAL_RNG_Init+0x54>
      return HAL_ERROR;
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c78:	2201      	movs	r2, #1
 8005c7a:	7262      	strb	r2, [r4, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c7c:	60e0      	str	r0, [r4, #12]

  /* Return function status */
  return HAL_OK;
}
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c80:	f7fe fa32 	bl	80040e8 <HAL_GetTick>
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	2802      	cmp	r0, #2
 8005c88:	d9f1      	bls.n	8005c6e <HAL_RNG_Init+0x42>
      hrng->State = HAL_RNG_STATE_ERROR;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 8005c92:	e7e7      	b.n	8005c64 <HAL_RNG_Init+0x38>

08005c94 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005c98:	7a03      	ldrb	r3, [r0, #8]
 8005c9a:	2b01      	cmp	r3, #1
{
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460f      	mov	r7, r1
  __HAL_LOCK(hrng);
 8005ca0:	d02a      	beq.n	8005cf8 <HAL_RNG_GenerateRandomNumber+0x64>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ca2:	7a42      	ldrb	r2, [r0, #9]
  __HAL_LOCK(hrng);
 8005ca4:	2301      	movs	r3, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ca6:	429a      	cmp	r2, r3
  __HAL_LOCK(hrng);
 8005ca8:	7203      	strb	r3, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8005caa:	b2d5      	uxtb	r5, r2
 8005cac:	d120      	bne.n	8005cf0 <HAL_RNG_GenerateRandomNumber+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	7243      	strb	r3, [r0, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb2:	f7fe fa19 	bl	80040e8 <HAL_GetTick>
 8005cb6:	4680      	mov	r8, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	6856      	ldr	r6, [r2, #4]
 8005cbc:	f016 0601 	ands.w	r6, r6, #1
 8005cc0:	d008      	beq.n	8005cd4 <HAL_RNG_GenerateRandomNumber+0x40>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005cc2:	6893      	ldr	r3, [r2, #8]
 8005cc4:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8005cc6:	603b      	str	r3, [r7, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8005ccc:	2500      	movs	r5, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	7223      	strb	r3, [r4, #8]

  return status;
 8005cd2:	e00a      	b.n	8005cea <HAL_RNG_GenerateRandomNumber+0x56>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005cd4:	f7fe fa08 	bl	80040e8 <HAL_GetTick>
 8005cd8:	eba0 0008 	sub.w	r0, r0, r8
 8005cdc:	2802      	cmp	r0, #2
 8005cde:	d9eb      	bls.n	8005cb8 <HAL_RNG_GenerateRandomNumber+0x24>
        hrng->State = HAL_RNG_STATE_READY;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	60e3      	str	r3, [r4, #12]
        __HAL_UNLOCK(hrng);
 8005ce8:	7226      	strb	r6, [r4, #8]
}
 8005cea:	4628      	mov	r0, r5
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	60c2      	str	r2, [r0, #12]
    status = HAL_ERROR;
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	e7ea      	b.n	8005cce <HAL_RNG_GenerateRandomNumber+0x3a>
  __HAL_LOCK(hrng);
 8005cf8:	2502      	movs	r5, #2
 8005cfa:	e7f6      	b.n	8005cea <HAL_RNG_GenerateRandomNumber+0x56>

08005cfc <HAL_RTC_WaitForSynchro>:

	/* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
	hrtc->Instance->ISR &= (uint32_t) RTC_RSF_MASK;
 8005cfc:	6802      	ldr	r2, [r0, #0]
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc) {
 8005cfe:	b538      	push	{r3, r4, r5, lr}
	hrtc->Instance->ISR &= (uint32_t) RTC_RSF_MASK;
 8005d00:	68d3      	ldr	r3, [r2, #12]
 8005d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d06:	60d3      	str	r3, [r2, #12]
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc) {
 8005d08:	4604      	mov	r4, r0
#endif

	tickstart = HAL_GetTick();
 8005d0a:	f7fe f9ed 	bl	80040e8 <HAL_GetTick>
 8005d0e:	4605      	mov	r5, r0

	/* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	069b      	lsls	r3, r3, #26
 8005d16:	d501      	bpl.n	8005d1c <HAL_RTC_WaitForSynchro+0x20>
		if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}

	return HAL_OK;
 8005d18:	2000      	movs	r0, #0
}
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
		if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 8005d1c:	f7fe f9e4 	bl	80040e8 <HAL_GetTick>
 8005d20:	1b40      	subs	r0, r0, r5
 8005d22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005d26:	d9f3      	bls.n	8005d10 <HAL_RTC_WaitForSynchro+0x14>
			return HAL_TIMEOUT;
 8005d28:	2003      	movs	r0, #3
 8005d2a:	e7f6      	b.n	8005d1a <HAL_RTC_WaitForSynchro+0x1e>

08005d2c <RTC_EnterInitMode>:
 * @note   The RTC Initialization mode is write protected, use the
 *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
 * @param  hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc) {
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
	if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 8005d2e:	6803      	ldr	r3, [r0, #0]
 8005d30:	68dc      	ldr	r4, [r3, #12]
 8005d32:	f014 0440 	ands.w	r4, r4, #64	; 0x40
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc) {
 8005d36:	4605      	mov	r5, r0
	if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 8005d38:	d118      	bne.n	8005d6c <RTC_EnterInitMode+0x40>
		/* Set the Initialization mode */
		hrtc->Instance->ISR = (uint32_t) RTC_INIT_MASK;
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	60da      	str	r2, [r3, #12]

		tickstart = HAL_GetTick();
 8005d40:	f7fe f9d2 	bl	80040e8 <HAL_GetTick>
		/* Wait till RTC is in INIT state and if Time out is reached exit */
		while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
				&& (status != HAL_TIMEOUT)) {
			if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
				status = HAL_TIMEOUT;
				hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d44:	2703      	movs	r7, #3
		tickstart = HAL_GetTick();
 8005d46:	4606      	mov	r6, r0
		while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	065b      	lsls	r3, r3, #25
 8005d4e:	d401      	bmi.n	8005d54 <RTC_EnterInitMode+0x28>
				&& (status != HAL_TIMEOUT)) {
 8005d50:	2c03      	cmp	r4, #3
 8005d52:	d101      	bne.n	8005d58 <RTC_EnterInitMode+0x2c>
		}
	}
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

	return status;
}
 8005d54:	4620      	mov	r0, r4
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 8005d58:	f7fe f9c6 	bl	80040e8 <HAL_GetTick>
 8005d5c:	1b80      	subs	r0, r0, r6
 8005d5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
				hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d62:	bf84      	itt	hi
 8005d64:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
				status = HAL_TIMEOUT;
 8005d68:	2403      	movhi	r4, #3
 8005d6a:	e7ed      	b.n	8005d48 <RTC_EnterInitMode+0x1c>
	HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	e7f1      	b.n	8005d54 <RTC_EnterInitMode+0x28>

08005d70 <RTC_ExitInitMode>:
	/* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
	/* Exit Initialization mode */
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d70:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <RTC_ExitInitMode+0x44>)
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc) {
 8005d78:	b510      	push	{r4, lr}
	CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d7a:	60da      	str	r2, [r3, #12]
#endif

	/* If CR_BYPSHAD bit = 0, wait for synchro */
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U) {
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	0692      	lsls	r2, r2, #26
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc) {
 8005d80:	4604      	mov	r4, r0
	if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U) {
 8005d82:	d406      	bmi.n	8005d92 <RTC_ExitInitMode+0x22>
		if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 8005d84:	f7ff ffba 	bl	8005cfc <HAL_RTC_WaitForSynchro>
 8005d88:	b110      	cbz	r0, 8005d90 <RTC_ExitInitMode+0x20>
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d8a:	2003      	movs	r0, #3
 8005d8c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		/* Restore BYPSHAD bit */
		SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
	}

	return status;
}
 8005d90:	bd10      	pop	{r4, pc}
		CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	f022 0220 	bic.w	r2, r2, #32
 8005d98:	609a      	str	r2, [r3, #8]
		if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 8005d9a:	f7ff ffaf 	bl	8005cfc <HAL_RTC_WaitForSynchro>
 8005d9e:	b110      	cbz	r0, 8005da6 <RTC_ExitInitMode+0x36>
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005da0:	2003      	movs	r0, #3
 8005da2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
		SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005da6:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <RTC_ExitInitMode+0x44>)
 8005da8:	6893      	ldr	r3, [r2, #8]
 8005daa:	f043 0320 	orr.w	r3, r3, #32
 8005dae:	6093      	str	r3, [r2, #8]
	return status;
 8005db0:	e7ee      	b.n	8005d90 <RTC_ExitInitMode+0x20>
 8005db2:	bf00      	nop
 8005db4:	40002800 	.word	0x40002800

08005db8 <HAL_RTC_Init>:
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc) {
 8005db8:	b538      	push	{r3, r4, r5, lr}
	if (hrtc != NULL) {
 8005dba:	4604      	mov	r4, r0
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d03f      	beq.n	8005e40 <HAL_RTC_Init+0x88>
		if (hrtc->State == HAL_RTC_STATE_RESET) {
 8005dc0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005dc8:	b91b      	cbnz	r3, 8005dd2 <HAL_RTC_Init+0x1a>
			hrtc->Lock = HAL_UNLOCKED;
 8005dca:	f880 2020 	strb.w	r2, [r0, #32]
			HAL_RTC_MspInit(hrtc);
 8005dce:	f7fb fa57 	bl	8001280 <HAL_RTC_MspInit>
		hrtc->State = HAL_RTC_STATE_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	22ca      	movs	r2, #202	; 0xca
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dde:	2253      	movs	r2, #83	; 0x53
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
		status = RTC_EnterInitMode(hrtc);
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff ffa2 	bl	8005d2c <RTC_EnterInitMode>
		if (status == HAL_OK) {
 8005de8:	bb48      	cbnz	r0, 8005e3e <HAL_RTC_Init+0x86>
			hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005dea:	6823      	ldr	r3, [r4, #0]
			hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut
 8005dec:	6920      	ldr	r0, [r4, #16]
			hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8005df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df8:	609a      	str	r2, [r3, #8]
			hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut
 8005dfa:	6862      	ldr	r2, [r4, #4]
 8005dfc:	6899      	ldr	r1, [r3, #8]
 8005dfe:	4302      	orrs	r2, r0
					| hrtc->Init.OutPutPolarity);
 8005e00:	69a0      	ldr	r0, [r4, #24]
 8005e02:	4302      	orrs	r2, r0
			hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut
 8005e04:	430a      	orrs	r2, r1
 8005e06:	609a      	str	r2, [r3, #8]
			hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005e08:	68e2      	ldr	r2, [r4, #12]
 8005e0a:	611a      	str	r2, [r3, #16]
			hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv
 8005e0c:	691a      	ldr	r2, [r3, #16]
					<< RTC_PRER_PREDIV_A_Pos);
 8005e0e:	68a1      	ldr	r1, [r4, #8]
			hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv
 8005e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005e14:	611a      	str	r2, [r3, #16]
			status = RTC_ExitInitMode(hrtc);
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff ffaa 	bl	8005d70 <RTC_ExitInitMode>
			if (status == HAL_OK) {
 8005e1c:	b978      	cbnz	r0, 8005e3e <HAL_RTC_Init+0x86>
				hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e1e:	6823      	ldr	r3, [r4, #0]
						| hrtc->Init.OutPutRemap);
 8005e20:	6965      	ldr	r5, [r4, #20]
				hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e24:	f022 0203 	bic.w	r2, r2, #3
 8005e28:	64da      	str	r2, [r3, #76]	; 0x4c
						| hrtc->Init.OutPutRemap);
 8005e2a:	69e2      	ldr	r2, [r4, #28]
				hrtc->Instance->OR |= (hrtc->Init.OutPutType
 8005e2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
						| hrtc->Init.OutPutRemap);
 8005e2e:	432a      	orrs	r2, r5
				hrtc->Instance->OR |= (hrtc->Init.OutPutType
 8005e30:	430a      	orrs	r2, r1
 8005e32:	64da      	str	r2, [r3, #76]	; 0x4c
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e34:	22ff      	movs	r2, #255	; 0xff
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
				hrtc->State = HAL_RTC_STATE_READY;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
	HAL_StatusTypeDef status = HAL_ERROR;
 8005e40:	2001      	movs	r0, #1
 8005e42:	e7fc      	b.n	8005e3e <HAL_RTC_Init+0x86>

08005e44 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e44:	4770      	bx	lr
	...

08005e48 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d12f      	bne.n	8005eb0 <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	2302      	movs	r3, #2
 8005e52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e56:	6803      	ldr	r3, [r0, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x6c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d016      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6a:	d013      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e6c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e84:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <HAL_TIM_Base_Start_IT+0x4c>
 8005e8c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e94:	6899      	ldr	r1, [r3, #8]
 8005e96:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <HAL_TIM_Base_Start_IT+0x70>)
 8005e98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	2a06      	cmp	r2, #6
 8005e9c:	d006      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x64>
 8005e9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eac:	2000      	movs	r0, #0
}
 8005eae:	4770      	bx	lr
    return HAL_ERROR;
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	4770      	bx	lr
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	00010007 	.word	0x00010007

08005ebc <HAL_TIM_OC_DelayElapsedCallback>:
 8005ebc:	4770      	bx	lr

08005ebe <HAL_TIM_IC_CaptureCallback>:
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_TIM_TriggerCallback>:
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec4:	6803      	ldr	r3, [r0, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	0791      	lsls	r1, r2, #30
{
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ece:	d50f      	bpl.n	8005ef0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	0792      	lsls	r2, r2, #30
 8005ed4:	d50c      	bpl.n	8005ef0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ed6:	f06f 0202 	mvn.w	r2, #2
 8005eda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005edc:	2201      	movs	r2, #1
 8005ede:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	0799      	lsls	r1, r3, #30
 8005ee4:	f000 8085 	beq.w	8005ff2 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee8:	f7ff ffe9 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eec:	2300      	movs	r3, #0
 8005eee:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	0752      	lsls	r2, r2, #29
 8005ef6:	d510      	bpl.n	8005f1a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	0750      	lsls	r0, r2, #29
 8005efc:	d50d      	bpl.n	8005f1a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005efe:	f06f 0204 	mvn.w	r2, #4
 8005f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f04:	2202      	movs	r2, #2
 8005f06:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f10:	d075      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	f7ff ffd4 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	2300      	movs	r3, #0
 8005f18:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	0711      	lsls	r1, r2, #28
 8005f20:	d50f      	bpl.n	8005f42 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	0712      	lsls	r2, r2, #28
 8005f26:	d50c      	bpl.n	8005f42 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	f06f 0208 	mvn.w	r2, #8
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2e:	2204      	movs	r2, #4
 8005f30:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	d067      	beq.n	800600a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	f7ff ffc0 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	06d0      	lsls	r0, r2, #27
 8005f48:	d510      	bpl.n	8005f6c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	06d1      	lsls	r1, r2, #27
 8005f4e:	d50d      	bpl.n	8005f6c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f50:	f06f 0210 	mvn.w	r2, #16
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f56:	2208      	movs	r2, #8
 8005f58:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	f7ff ffab 	bl	8005ebe <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	07d2      	lsls	r2, r2, #31
 8005f72:	d508      	bpl.n	8005f86 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	07d0      	lsls	r0, r2, #31
 8005f78:	d505      	bpl.n	8005f86 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f7a:	f06f 0201 	mvn.w	r2, #1
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fb f92f 	bl	80011e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	0611      	lsls	r1, r2, #24
 8005f8c:	d508      	bpl.n	8005fa0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	0612      	lsls	r2, r2, #24
 8005f92:	d505      	bpl.n	8005fa0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 f8d9 	bl	8006152 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	05d0      	lsls	r0, r2, #23
 8005fa6:	d508      	bpl.n	8005fba <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	0611      	lsls	r1, r2, #24
 8005fac:	d505      	bpl.n	8005fba <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f8cd 	bl	8006154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	0652      	lsls	r2, r2, #25
 8005fc0:	d508      	bpl.n	8005fd4 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	0650      	lsls	r0, r2, #25
 8005fc6:	d505      	bpl.n	8005fd4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff ff77 	bl	8005ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	0691      	lsls	r1, r2, #26
 8005fda:	d522      	bpl.n	8006022 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	0692      	lsls	r2, r2, #26
 8005fe0:	d51f      	bpl.n	8006022 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005fee:	f000 b8af 	b.w	8006150 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	f7ff ff63 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff ff62 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ffc:	e776      	b.n	8005eec <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	f7ff ff5d 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006002:	4620      	mov	r0, r4
 8006004:	f7ff ff5c 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006008:	e785      	b.n	8005f16 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	f7ff ff57 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff ff56 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006014:	e793      	b.n	8005f3e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	f7ff ff51 	bl	8005ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff ff50 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
 8006020:	e7a2      	b.n	8005f68 <HAL_TIM_IRQHandler+0xa4>
}
 8006022:	bd10      	pop	{r4, pc}

08006024 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006024:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006026:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006028:	4290      	cmp	r0, r2
 800602a:	d012      	beq.n	8006052 <TIM_Base_SetConfig+0x2e>
 800602c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006030:	d00f      	beq.n	8006052 <TIM_Base_SetConfig+0x2e>
 8006032:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006036:	4290      	cmp	r0, r2
 8006038:	d00b      	beq.n	8006052 <TIM_Base_SetConfig+0x2e>
 800603a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800603e:	4290      	cmp	r0, r2
 8006040:	d007      	beq.n	8006052 <TIM_Base_SetConfig+0x2e>
 8006042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006046:	4290      	cmp	r0, r2
 8006048:	d003      	beq.n	8006052 <TIM_Base_SetConfig+0x2e>
 800604a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800604e:	4290      	cmp	r0, r2
 8006050:	d119      	bne.n	8006086 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006052:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006058:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605a:	4a23      	ldr	r2, [pc, #140]	; (80060e8 <TIM_Base_SetConfig+0xc4>)
 800605c:	4290      	cmp	r0, r2
 800605e:	d01d      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 8006060:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006064:	d01a      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 8006066:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800606a:	4290      	cmp	r0, r2
 800606c:	d016      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 800606e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006072:	4290      	cmp	r0, r2
 8006074:	d012      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 8006076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800607a:	4290      	cmp	r0, r2
 800607c:	d00e      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 800607e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006082:	4290      	cmp	r0, r2
 8006084:	d00a      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 8006086:	4a19      	ldr	r2, [pc, #100]	; (80060ec <TIM_Base_SetConfig+0xc8>)
 8006088:	4290      	cmp	r0, r2
 800608a:	d007      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 800608c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006090:	4290      	cmp	r0, r2
 8006092:	d003      	beq.n	800609c <TIM_Base_SetConfig+0x78>
 8006094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006098:	4290      	cmp	r0, r2
 800609a:	d103      	bne.n	80060a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800609e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	694a      	ldr	r2, [r1, #20]
 80060a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060aa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80060ac:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ae:	688b      	ldr	r3, [r1, #8]
 80060b0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b2:	680b      	ldr	r3, [r1, #0]
 80060b4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <TIM_Base_SetConfig+0xc4>)
 80060b8:	4298      	cmp	r0, r3
 80060ba:	d00f      	beq.n	80060dc <TIM_Base_SetConfig+0xb8>
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	4298      	cmp	r0, r3
 80060c2:	d00b      	beq.n	80060dc <TIM_Base_SetConfig+0xb8>
 80060c4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80060c8:	4298      	cmp	r0, r3
 80060ca:	d007      	beq.n	80060dc <TIM_Base_SetConfig+0xb8>
 80060cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d0:	4298      	cmp	r0, r3
 80060d2:	d003      	beq.n	80060dc <TIM_Base_SetConfig+0xb8>
 80060d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d8:	4298      	cmp	r0, r3
 80060da:	d101      	bne.n	80060e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060dc:	690b      	ldr	r3, [r1, #16]
 80060de:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	2301      	movs	r3, #1
 80060e2:	6143      	str	r3, [r0, #20]
}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40014000 	.word	0x40014000

080060f0 <HAL_TIM_Base_Init>:
{
 80060f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060f2:	4604      	mov	r4, r0
 80060f4:	b350      	cbz	r0, 800614c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060fe:	b91b      	cbnz	r3, 8006108 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006100:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006104:	f7ff fe9e 	bl	8005e44 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006110:	1d21      	adds	r1, r4, #4
 8006112:	f7ff ff87 	bl	8006024 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006116:	2301      	movs	r3, #1
 8006118:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800611c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006122:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006126:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800612a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800612e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800613a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800613e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006142:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006146:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800614a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800614c:	2001      	movs	r0, #1
 800614e:	e7fc      	b.n	800614a <HAL_TIM_Base_Init+0x5a>

08006150 <HAL_TIMEx_CommutCallback>:
 8006150:	4770      	bx	lr

08006152 <HAL_TIMEx_BreakCallback>:
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_Break2Callback>:
 8006154:	4770      	bx	lr

08006156 <UART_EndRxTransfer>:
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
	CLEAR_BIT(huart->Instance->CR1,
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800615e:	601a      	str	r2, [r3, #0]
			(USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
	CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800616c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800616e:	2a01      	cmp	r2, #1
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	bf02      	ittt	eq
 8006172:	681a      	ldreq	r2, [r3, #0]
 8006174:	f022 0210 	biceq.w	r2, r2, #16
 8006178:	601a      	streq	r2, [r3, #0]
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 800617a:	2320      	movs	r3, #32
 800617c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006180:	2300      	movs	r3, #0
 8006182:	66c3      	str	r3, [r0, #108]	; 0x6c

	/* Reset RxIsr function pointer */
	huart->RxISR = NULL;
 8006184:	6703      	str	r3, [r0, #112]	; 0x70
}
 8006186:	4770      	bx	lr

08006188 <UART_TxISR_8BIT>:
 * @param huart UART handle.
 * @retval None
 */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart) {
	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006188:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800618c:	2b21      	cmp	r3, #33	; 0x21
 800618e:	d118      	bne.n	80061c2 <UART_TxISR_8BIT+0x3a>
		if (huart->TxXferCount == 0U) {
 8006190:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 8006194:	6803      	ldr	r3, [r0, #0]
 8006196:	b292      	uxth	r2, r2
 8006198:	b942      	cbnz	r2, 80061ac <UART_TxISR_8BIT+0x24>
			/* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a0:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

			/* Enable the UART Transmit Complete Interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	4770      	bx	lr
		} else {
			huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 80061ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80061ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 80061b2:	8519      	strh	r1, [r3, #40]	; 0x28
					& (uint8_t) 0xFF);
			huart->pTxBuffPtr++;
			huart->TxXferCount--;
 80061b4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
			huart->pTxBuffPtr++;
 80061b8:	6502      	str	r2, [r0, #80]	; 0x50
			huart->TxXferCount--;
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
		}
	}
}
 80061c2:	4770      	bx	lr

080061c4 <UART_TxISR_16BIT>:
 */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart) {
	uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80061c4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80061c8:	2b21      	cmp	r3, #33	; 0x21
 80061ca:	d11a      	bne.n	8006202 <UART_TxISR_16BIT+0x3e>
		if (huart->TxXferCount == 0U) {
 80061cc:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 80061d0:	6803      	ldr	r3, [r0, #0]
 80061d2:	b292      	uxth	r2, r2
 80061d4:	b942      	cbnz	r2, 80061e8 <UART_TxISR_16BIT+0x24>
			/* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
			CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061dc:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

			/* Enable the UART Transmit Complete Interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	4770      	bx	lr
		} else {
			tmp = (uint16_t*) huart->pTxBuffPtr;
			huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 80061e8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80061ea:	f832 1b02 	ldrh.w	r1, [r2], #2
 80061ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80061f2:	8519      	strh	r1, [r3, #40]	; 0x28
			huart->pTxBuffPtr += 2U;
			huart->TxXferCount--;
 80061f4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
			huart->pTxBuffPtr += 2U;
 80061f8:	6502      	str	r2, [r0, #80]	; 0x50
			huart->TxXferCount--;
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
		}
	}
}
 8006202:	4770      	bx	lr

08006204 <UART_TxISR_16BIT_FIFOEN>:
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
	uint16_t *tmp;
	uint16_t nb_tx_data;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006204:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006208:	2b21      	cmp	r3, #33	; 0x21
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
 800620a:	b510      	push	{r4, lr}
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800620c:	d10f      	bne.n	800622e <UART_TxISR_16BIT_FIFOEN+0x2a>
		for (nb_tx_data = huart->NbTxDataToProcess; nb_tx_data > 0U;
 800620e:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006212:	b162      	cbz	r2, 800622e <UART_TxISR_16BIT_FIFOEN+0x2a>
				nb_tx_data--) {
			if (huart->TxXferCount == 0U) {
 8006214:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	b289      	uxth	r1, r1
 800621c:	b941      	cbnz	r1, 8006230 <UART_TxISR_16BIT_FIFOEN+0x2c>
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006224:	609a      	str	r2, [r3, #8]
				SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622c:	601a      	str	r2, [r3, #0]
			} else {
				/* Nothing to do */
			}
		}
	}
}
 800622e:	bd10      	pop	{r4, pc}
			} else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF)
 8006230:	69d9      	ldr	r1, [r3, #28]
 8006232:	0609      	lsls	r1, r1, #24
 8006234:	d50c      	bpl.n	8006250 <UART_TxISR_16BIT_FIFOEN+0x4c>
				huart->Instance->TDR = (((uint32_t) (*tmp)) & 0x01FFUL);
 8006236:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006238:	f831 4b02 	ldrh.w	r4, [r1], #2
 800623c:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8006240:	851c      	strh	r4, [r3, #40]	; 0x28
				huart->TxXferCount--;
 8006242:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
				huart->pTxBuffPtr += 2U;
 8006246:	6501      	str	r1, [r0, #80]	; 0x50
				huart->TxXferCount--;
 8006248:	3b01      	subs	r3, #1
 800624a:	b29b      	uxth	r3, r3
 800624c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
				nb_tx_data--) {
 8006250:	3a01      	subs	r2, #1
 8006252:	b292      	uxth	r2, r2
 8006254:	e7dd      	b.n	8006212 <UART_TxISR_16BIT_FIFOEN+0xe>

08006256 <UART_TxISR_8BIT_FIFOEN>:
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006256:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800625a:	2b21      	cmp	r3, #33	; 0x21
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart) {
 800625c:	b510      	push	{r4, lr}
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 800625e:	d10f      	bne.n	8006280 <UART_TxISR_8BIT_FIFOEN+0x2a>
		for (nb_tx_data = huart->NbTxDataToProcess; nb_tx_data > 0U;
 8006260:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 8006264:	b162      	cbz	r2, 8006280 <UART_TxISR_8BIT_FIFOEN+0x2a>
			if (huart->TxXferCount == 0U) {
 8006266:	f8b0 1056 	ldrh.w	r1, [r0, #86]	; 0x56
 800626a:	6803      	ldr	r3, [r0, #0]
 800626c:	b289      	uxth	r1, r1
 800626e:	b941      	cbnz	r1, 8006282 <UART_TxISR_8BIT_FIFOEN+0x2c>
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8006276:	609a      	str	r2, [r3, #8]
				SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800627e:	601a      	str	r2, [r3, #0]
}
 8006280:	bd10      	pop	{r4, pc}
			} else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF)
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	0609      	lsls	r1, r1, #24
 8006286:	d50a      	bpl.n	800629e <UART_TxISR_8BIT_FIFOEN+0x48>
				huart->Instance->TDR = (uint8_t) (*huart->pTxBuffPtr
 8006288:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800628a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628e:	851c      	strh	r4, [r3, #40]	; 0x28
				huart->TxXferCount--;
 8006290:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
				huart->pTxBuffPtr++;
 8006294:	6501      	str	r1, [r0, #80]	; 0x50
				huart->TxXferCount--;
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
				nb_tx_data--) {
 800629e:	3a01      	subs	r2, #1
 80062a0:	b292      	uxth	r2, r2
 80062a2:	e7df      	b.n	8006264 <UART_TxISR_8BIT_FIFOEN+0xe>

080062a4 <HAL_UART_DeInit>:
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart) {
 80062a4:	b538      	push	{r3, r4, r5, lr}
	if (huart == NULL) {
 80062a6:	4605      	mov	r5, r0
 80062a8:	b1c0      	cbz	r0, 80062dc <HAL_UART_DeInit+0x38>
	huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	2324      	movs	r3, #36	; 0x24
 80062ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	__HAL_UART_DISABLE(huart);
 80062b0:	6803      	ldr	r3, [r0, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
	huart->Instance->CR1 = 0x0U;
 80062b4:	2400      	movs	r4, #0
	__HAL_UART_DISABLE(huart);
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
	huart->Instance->CR1 = 0x0U;
 80062bc:	601c      	str	r4, [r3, #0]
	huart->Instance->CR2 = 0x0U;
 80062be:	605c      	str	r4, [r3, #4]
	huart->Instance->CR3 = 0x0U;
 80062c0:	609c      	str	r4, [r3, #8]
	HAL_UART_MspDeInit(huart);
 80062c2:	f7fb f95b 	bl	800157c <HAL_UART_MspDeInit>
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c6:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
	__HAL_UNLOCK(huart);
 80062ca:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
	huart->gState = HAL_UART_STATE_RESET;
 80062ce:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
	return HAL_OK;
 80062d2:	4620      	mov	r0, r4
	huart->RxState = HAL_UART_STATE_RESET;
 80062d4:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	66ec      	str	r4, [r5, #108]	; 0x6c
}
 80062da:	bd38      	pop	{r3, r4, r5, pc}
		return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
 80062de:	e7fc      	b.n	80062da <HAL_UART_DeInit+0x36>

080062e0 <HAL_UART_Transmit_IT>:
	if (huart->gState == HAL_UART_STATE_READY) {
 80062e0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80062e4:	2b20      	cmp	r3, #32
		uint8_t *pData, uint16_t Size) {
 80062e6:	b510      	push	{r4, lr}
	if (huart->gState == HAL_UART_STATE_READY) {
 80062e8:	d147      	bne.n	800637a <HAL_UART_Transmit_IT+0x9a>
		if ((pData == NULL) || (Size == 0U)) {
 80062ea:	2900      	cmp	r1, #0
 80062ec:	d043      	beq.n	8006376 <HAL_UART_Transmit_IT+0x96>
 80062ee:	2a00      	cmp	r2, #0
 80062f0:	d041      	beq.n	8006376 <HAL_UART_Transmit_IT+0x96>
		__HAL_LOCK(huart);
 80062f2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d03f      	beq.n	800637a <HAL_UART_Transmit_IT+0x9a>
		huart->TxXferCount = Size;
 80062fa:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
		__HAL_LOCK(huart);
 80062fe:	2301      	movs	r3, #1
		huart->TxXferSize = Size;
 8006300:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
		if (huart->FifoMode == UART_FIFOMODE_ENABLE) {
 8006304:	6e42      	ldr	r2, [r0, #100]	; 0x64
		__HAL_LOCK(huart);
 8006306:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630a:	2300      	movs	r3, #0
 800630c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		if (huart->FifoMode == UART_FIFOMODE_ENABLE) {
 8006310:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006314:	f04f 0321 	mov.w	r3, #33	; 0x21
 8006318:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	6883      	ldr	r3, [r0, #8]
		huart->pTxBuffPtr = pData;
 8006320:	6501      	str	r1, [r0, #80]	; 0x50
		if (huart->FifoMode == UART_FIFOMODE_ENABLE) {
 8006322:	d114      	bne.n	800634e <HAL_UART_Transmit_IT+0x6e>
			if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d10f      	bne.n	800634a <HAL_UART_Transmit_IT+0x6a>
					&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800632a:	6904      	ldr	r4, [r0, #16]
				huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800632c:	4b14      	ldr	r3, [pc, #80]	; (8006380 <HAL_UART_Transmit_IT+0xa0>)
 800632e:	4915      	ldr	r1, [pc, #84]	; (8006384 <HAL_UART_Transmit_IT+0xa4>)
 8006330:	2c00      	cmp	r4, #0
 8006332:	bf08      	it	eq
 8006334:	460b      	moveq	r3, r1
 8006336:	6743      	str	r3, [r0, #116]	; 0x74
			__HAL_UNLOCK(huart);
 8006338:	2300      	movs	r3, #0
 800633a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
			SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800633e:	6891      	ldr	r1, [r2, #8]
 8006340:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8006344:	6091      	str	r1, [r2, #8]
		return HAL_OK;
 8006346:	4618      	mov	r0, r3
}
 8006348:	bd10      	pop	{r4, pc}
				huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800634a:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <HAL_UART_Transmit_IT+0xa0>)
 800634c:	e7f3      	b.n	8006336 <HAL_UART_Transmit_IT+0x56>
			if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d10e      	bne.n	8006372 <HAL_UART_Transmit_IT+0x92>
					&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8006354:	6904      	ldr	r4, [r0, #16]
				huart->TxISR = UART_TxISR_16BIT;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <HAL_UART_Transmit_IT+0xa8>)
 8006358:	490c      	ldr	r1, [pc, #48]	; (800638c <HAL_UART_Transmit_IT+0xac>)
 800635a:	2c00      	cmp	r4, #0
 800635c:	bf08      	it	eq
 800635e:	460b      	moveq	r3, r1
 8006360:	6743      	str	r3, [r0, #116]	; 0x74
			__HAL_UNLOCK(huart);
 8006362:	2300      	movs	r3, #0
 8006364:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
			SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006368:	6811      	ldr	r1, [r2, #0]
 800636a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800636e:	6011      	str	r1, [r2, #0]
 8006370:	e7e9      	b.n	8006346 <HAL_UART_Transmit_IT+0x66>
				huart->TxISR = UART_TxISR_8BIT;
 8006372:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_UART_Transmit_IT+0xa8>)
 8006374:	e7f4      	b.n	8006360 <HAL_UART_Transmit_IT+0x80>
			return HAL_ERROR;
 8006376:	2001      	movs	r0, #1
 8006378:	e7e6      	b.n	8006348 <HAL_UART_Transmit_IT+0x68>
		return HAL_BUSY;
 800637a:	2002      	movs	r0, #2
 800637c:	e7e4      	b.n	8006348 <HAL_UART_Transmit_IT+0x68>
 800637e:	bf00      	nop
 8006380:	08006257 	.word	0x08006257
 8006384:	08006205 	.word	0x08006205
 8006388:	08006189 	.word	0x08006189
 800638c:	080061c5 	.word	0x080061c5

08006390 <UART_DMAAbortOnError>:
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8006390:	b508      	push	{r3, lr}
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8006392:	6a80      	ldr	r0, [r0, #40]	; 0x28
	huart->RxXferCount = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
	huart->TxXferCount = 0U;
 800639a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
	HAL_UART_ErrorCallback(huart);
 800639e:	f011 f861 	bl	8017464 <HAL_UART_ErrorCallback>
}
 80063a2:	bd08      	pop	{r3, pc}

080063a4 <HAL_UART_AbortTransmitCpltCallback>:
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_UART_AbortTransmit_IT>:
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 80063a8:	6803      	ldr	r3, [r0, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart) {
 80063b0:	b510      	push	{r4, lr}
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
 80063b2:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80063ba:	609a      	str	r2, [r3, #8]
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) {
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	f012 0280 	ands.w	r2, r2, #128	; 0x80
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart) {
 80063c2:	4604      	mov	r4, r0
	if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) {
 80063c4:	d019      	beq.n	80063fa <HAL_UART_AbortTransmit_IT+0x52>
		CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063cc:	609a      	str	r2, [r3, #8]
		if (huart->hdmatx != NULL) {
 80063ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80063d0:	b153      	cbz	r3, 80063e8 <HAL_UART_AbortTransmit_IT+0x40>
			huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80063d2:	4a12      	ldr	r2, [pc, #72]	; (800641c <HAL_UART_AbortTransmit_IT+0x74>)
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
			if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK) {
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fd ff3a 	bl	8004250 <HAL_DMA_Abort_IT>
 80063dc:	b110      	cbz	r0, 80063e4 <HAL_UART_AbortTransmit_IT+0x3c>
				huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80063de:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80063e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80063e2:	4798      	blx	r3
}
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd10      	pop	{r4, pc}
			huart->TxXferCount = 0U;
 80063e8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
			huart->TxISR = NULL;
 80063ec:	6743      	str	r3, [r0, #116]	; 0x74
			huart->gState = HAL_UART_STATE_READY;
 80063ee:	2320      	movs	r3, #32
 80063f0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		HAL_UART_AbortTransmitCpltCallback(huart);
 80063f4:	f7ff ffd6 	bl	80063a4 <HAL_UART_AbortTransmitCpltCallback>
 80063f8:	e7f4      	b.n	80063e4 <HAL_UART_AbortTransmit_IT+0x3c>
		huart->TxXferCount = 0U;
 80063fa:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
		huart->TxISR = NULL;
 80063fe:	6742      	str	r2, [r0, #116]	; 0x74
		if (huart->FifoMode == UART_FIFOMODE_ENABLE) {
 8006400:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006402:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
			__HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006406:	bf01      	itttt	eq
 8006408:	8b1a      	ldrheq	r2, [r3, #24]
 800640a:	b292      	uxtheq	r2, r2
 800640c:	f042 0210 	orreq.w	r2, r2, #16
 8006410:	831a      	strheq	r2, [r3, #24]
		huart->gState = HAL_UART_STATE_READY;
 8006412:	2320      	movs	r3, #32
 8006414:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		HAL_UART_AbortTransmitCpltCallback(huart);
 8006418:	e7ec      	b.n	80063f4 <HAL_UART_AbortTransmit_IT+0x4c>
 800641a:	bf00      	nop
 800641c:	08006421 	.word	0x08006421

08006420 <UART_DMATxOnlyAbortCallback>:
	UART_HandleTypeDef *huart = (UART_HandleTypeDef*) (hdma->Parent);
 8006420:	6a80      	ldr	r0, [r0, #40]	; 0x28
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma) {
 8006422:	b508      	push	{r3, lr}
	huart->TxXferCount = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
	if (huart->FifoMode == UART_FIFOMODE_ENABLE) {
 800642a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800642c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006430:	d105      	bne.n	800643e <UART_DMATxOnlyAbortCallback+0x1e>
		__HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006432:	6802      	ldr	r2, [r0, #0]
 8006434:	8b13      	ldrh	r3, [r2, #24]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f043 0310 	orr.w	r3, r3, #16
 800643c:	8313      	strh	r3, [r2, #24]
	huart->gState = HAL_UART_STATE_READY;
 800643e:	2320      	movs	r3, #32
 8006440:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	HAL_UART_AbortTransmitCpltCallback(huart);
 8006444:	f7ff ffae 	bl	80063a4 <HAL_UART_AbortTransmitCpltCallback>
}
 8006448:	bd08      	pop	{r3, pc}

0800644a <HAL_UARTEx_RxEventCallback>:
}
 800644a:	4770      	bx	lr

0800644c <HAL_UART_IRQHandler>:
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 800644c:	6803      	ldr	r3, [r0, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8006450:	6819      	ldr	r1, [r3, #0]
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (errorflags == 0U) {
 8006456:	f640 060f 	movw	r6, #2063	; 0x80f
 800645a:	4232      	tst	r2, r6
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 800645c:	689d      	ldr	r5, [r3, #8]
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 800645e:	4604      	mov	r4, r0
	if (errorflags == 0U) {
 8006460:	d10f      	bne.n	8006482 <HAL_UART_IRQHandler+0x36>
		if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006462:	0696      	lsls	r6, r2, #26
 8006464:	f140 808b 	bpl.w	800657e <HAL_UART_IRQHandler+0x132>
				&& (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006468:	f001 0620 	and.w	r6, r1, #32
						|| ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800646c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8006470:	433e      	orrs	r6, r7
 8006472:	f000 8084 	beq.w	800657e <HAL_UART_IRQHandler+0x132>
			if (huart->RxISR != NULL) {
 8006476:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006478:	2b00      	cmp	r3, #0
 800647a:	d079      	beq.n	8006570 <HAL_UART_IRQHandler+0x124>
}
 800647c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006480:	4718      	bx	r3
			&& ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006482:	4e8d      	ldr	r6, [pc, #564]	; (80066b8 <HAL_UART_IRQHandler+0x26c>)
							& (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE
 8006484:	488d      	ldr	r0, [pc, #564]	; (80066bc <HAL_UART_IRQHandler+0x270>)
			&& ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006486:	402e      	ands	r6, r5
							& (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE
 8006488:	4008      	ands	r0, r1
					|| ((cr1its
 800648a:	4330      	orrs	r0, r6
 800648c:	d077      	beq.n	800657e <HAL_UART_IRQHandler+0x132>
		if (((isrflags & USART_ISR_PE) != 0U)
 800648e:	07d7      	lsls	r7, r2, #31
 8006490:	d509      	bpl.n	80064a6 <HAL_UART_IRQHandler+0x5a>
				&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8006492:	05c8      	lsls	r0, r1, #23
 8006494:	d507      	bpl.n	80064a6 <HAL_UART_IRQHandler+0x5a>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006496:	2001      	movs	r0, #1
 8006498:	6218      	str	r0, [r3, #32]
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 800649a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800649e:	f040 0001 	orr.w	r0, r0, #1
 80064a2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (((isrflags & USART_ISR_FE) != 0U)
 80064a6:	0797      	lsls	r7, r2, #30
 80064a8:	d509      	bpl.n	80064be <HAL_UART_IRQHandler+0x72>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80064aa:	07e8      	lsls	r0, r5, #31
 80064ac:	d507      	bpl.n	80064be <HAL_UART_IRQHandler+0x72>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064ae:	2002      	movs	r0, #2
 80064b0:	6218      	str	r0, [r3, #32]
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80064b6:	f040 0004 	orr.w	r0, r0, #4
 80064ba:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (((isrflags & USART_ISR_NE) != 0U)
 80064be:	0757      	lsls	r7, r2, #29
 80064c0:	d509      	bpl.n	80064d6 <HAL_UART_IRQHandler+0x8a>
				&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80064c2:	07e8      	lsls	r0, r5, #31
 80064c4:	d507      	bpl.n	80064d6 <HAL_UART_IRQHandler+0x8a>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064c6:	2004      	movs	r0, #4
 80064c8:	6218      	str	r0, [r3, #32]
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ca:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80064ce:	f040 0002 	orr.w	r0, r0, #2
 80064d2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (((isrflags & USART_ISR_ORE) != 0U)
 80064d6:	0717      	lsls	r7, r2, #28
 80064d8:	d50b      	bpl.n	80064f2 <HAL_UART_IRQHandler+0xa6>
				&& (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064da:	f001 0020 	and.w	r0, r1, #32
 80064de:	4330      	orrs	r0, r6
 80064e0:	d007      	beq.n	80064f2 <HAL_UART_IRQHandler+0xa6>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e2:	2008      	movs	r0, #8
 80064e4:	6218      	str	r0, [r3, #32]
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80064ea:	f040 0008 	orr.w	r0, r0, #8
 80064ee:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		if (((isrflags & USART_ISR_RTOF) != 0U)
 80064f2:	0516      	lsls	r6, r2, #20
 80064f4:	d50a      	bpl.n	800650c <HAL_UART_IRQHandler+0xc0>
				&& ((cr1its & USART_CR1_RTOIE) != 0U)) {
 80064f6:	0148      	lsls	r0, r1, #5
 80064f8:	d508      	bpl.n	800650c <HAL_UART_IRQHandler+0xc0>
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80064fe:	6218      	str	r0, [r3, #32]
			huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006500:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006504:	f043 0320 	orr.w	r3, r3, #32
 8006508:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 800650c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006510:	b373      	cbz	r3, 8006570 <HAL_UART_IRQHandler+0x124>
			if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006512:	0693      	lsls	r3, r2, #26
 8006514:	d50a      	bpl.n	800652c <HAL_UART_IRQHandler+0xe0>
					&& (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006516:	f001 0120 	and.w	r1, r1, #32
							|| ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800651a:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800651e:	ea51 0305 	orrs.w	r3, r1, r5
 8006522:	d003      	beq.n	800652c <HAL_UART_IRQHandler+0xe0>
				if (huart->RxISR != NULL) {
 8006524:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006526:	b10b      	cbz	r3, 800652c <HAL_UART_IRQHandler+0xe0>
					huart->RxISR(huart);
 8006528:	4620      	mov	r0, r4
 800652a:	4798      	blx	r3
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	6823      	ldr	r3, [r4, #0]
			errorcode = huart->ErrorCode;
 800652e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006532:	689b      	ldr	r3, [r3, #8]
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 8006534:	f005 0528 	and.w	r5, r5, #40	; 0x28
			if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 800653c:	431d      	orrs	r5, r3
				UART_EndRxTransfer(huart);
 800653e:	4620      	mov	r0, r4
					|| ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE))
 8006540:	d018      	beq.n	8006574 <HAL_UART_IRQHandler+0x128>
				UART_EndRxTransfer(huart);
 8006542:	f7ff fe08 	bl	8006156 <UART_EndRxTransfer>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	0657      	lsls	r7, r2, #25
 800654c:	d50d      	bpl.n	800656a <HAL_UART_IRQHandler+0x11e>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	689a      	ldr	r2, [r3, #8]
					if (huart->hdmarx != NULL) {
 8006550:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006556:	609a      	str	r2, [r3, #8]
					if (huart->hdmarx != NULL) {
 8006558:	b138      	cbz	r0, 800656a <HAL_UART_IRQHandler+0x11e>
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800655a:	4b59      	ldr	r3, [pc, #356]	; (80066c0 <HAL_UART_IRQHandler+0x274>)
 800655c:	6383      	str	r3, [r0, #56]	; 0x38
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 800655e:	f7fd fe77 	bl	8004250 <HAL_DMA_Abort_IT>
 8006562:	b128      	cbz	r0, 8006570 <HAL_UART_IRQHandler+0x124>
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006564:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006566:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006568:	e788      	b.n	800647c <HAL_UART_IRQHandler+0x30>
						HAL_UART_ErrorCallback(huart);
 800656a:	4620      	mov	r0, r4
 800656c:	f010 ff7a 	bl	8017464 <HAL_UART_ErrorCallback>
}
 8006570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				HAL_UART_ErrorCallback(huart);
 8006574:	f010 ff76 	bl	8017464 <HAL_UART_ErrorCallback>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 800657c:	e7f8      	b.n	8006570 <HAL_UART_IRQHandler+0x124>
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006580:	2801      	cmp	r0, #1
 8006582:	d15b      	bne.n	800663c <HAL_UART_IRQHandler+0x1f0>
			&& ((isrflags & USART_ISR_IDLE) != 0U)
 8006584:	06d6      	lsls	r6, r2, #27
 8006586:	d559      	bpl.n	800663c <HAL_UART_IRQHandler+0x1f0>
			&& ((cr1its & USART_ISR_IDLE) != 0U)) {
 8006588:	06c8      	lsls	r0, r1, #27
 800658a:	d557      	bpl.n	800663c <HAL_UART_IRQHandler+0x1f0>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800658c:	2210      	movs	r2, #16
 800658e:	621a      	str	r2, [r3, #32]
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8006596:	d02f      	beq.n	80065f8 <HAL_UART_IRQHandler+0x1ac>
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 8006598:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800659a:	6801      	ldr	r1, [r0, #0]
 800659c:	684a      	ldr	r2, [r1, #4]
 800659e:	b292      	uxth	r2, r2
			if ((nb_remaining_rx_data > 0U)
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	d0e5      	beq.n	8006570 <HAL_UART_IRQHandler+0x124>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 80065a4:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 80065a8:	4295      	cmp	r5, r2
 80065aa:	d9e1      	bls.n	8006570 <HAL_UART_IRQHandler+0x124>
				huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
				if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR,
 80065b0:	680a      	ldr	r2, [r1, #0]
 80065b2:	f012 0220 	ands.w	r2, r2, #32
 80065b6:	d115      	bne.n	80065e4 <HAL_UART_IRQHandler+0x198>
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80065be:	6019      	str	r1, [r3, #0]
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c0:	6899      	ldr	r1, [r3, #8]
 80065c2:	f021 0101 	bic.w	r1, r1, #1
 80065c6:	6099      	str	r1, [r3, #8]
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c8:	6899      	ldr	r1, [r3, #8]
 80065ca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80065ce:	6099      	str	r1, [r3, #8]
					huart->RxState = HAL_UART_STATE_READY;
 80065d0:	2120      	movs	r1, #32
 80065d2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	66e2      	str	r2, [r4, #108]	; 0x6c
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f022 0210 	bic.w	r2, r2, #16
 80065de:	601a      	str	r2, [r3, #0]
					(void) HAL_DMA_Abort(huart->hdmarx);
 80065e0:	f7fd fe02 	bl	80041e8 <HAL_DMA_Abort>
						(huart->RxXferSize - huart->RxXferCount));
 80065e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
				HAL_UARTEx_RxEventCallback(huart,
 80065e8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80065ec:	1ac9      	subs	r1, r1, r3
 80065ee:	b289      	uxth	r1, r1
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff ff2a 	bl	800644a <HAL_UARTEx_RxEventCallback>
 80065f6:	e7bb      	b.n	8006570 <HAL_UART_IRQHandler+0x124>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065f8:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 80065fc:	b288      	uxth	r0, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 80065fe:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8006602:	b289      	uxth	r1, r1
 8006604:	2900      	cmp	r1, #0
 8006606:	d0b3      	beq.n	8006570 <HAL_UART_IRQHandler+0x124>
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006608:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800660c:	1a09      	subs	r1, r1, r0
 800660e:	b289      	uxth	r1, r1
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8006610:	2900      	cmp	r1, #0
 8006612:	d0ad      	beq.n	8006570 <HAL_UART_IRQHandler+0x124>
				CLEAR_BIT(huart->Instance->CR1,
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800661a:	6018      	str	r0, [r3, #0]
				CLEAR_BIT(huart->Instance->CR3,
 800661c:	6898      	ldr	r0, [r3, #8]
 800661e:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8006622:	f020 0001 	bic.w	r0, r0, #1
 8006626:	6098      	str	r0, [r3, #8]
				huart->RxState = HAL_UART_STATE_READY;
 8006628:	2020      	movs	r0, #32
 800662a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	66e2      	str	r2, [r4, #108]	; 0x6c
				huart->RxISR = NULL;
 8006630:	6722      	str	r2, [r4, #112]	; 0x70
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f022 0210 	bic.w	r2, r2, #16
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	e7d9      	b.n	80065f0 <HAL_UART_IRQHandler+0x1a4>
	if (((isrflags & USART_ISR_WUF) != 0U)
 800663c:	02d7      	lsls	r7, r2, #11
 800663e:	d509      	bpl.n	8006654 <HAL_UART_IRQHandler+0x208>
			&& ((cr3its & USART_CR3_WUFIE) != 0U)) {
 8006640:	026e      	lsls	r6, r5, #9
 8006642:	d507      	bpl.n	8006654 <HAL_UART_IRQHandler+0x208>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
		HAL_UARTEx_WakeupCallback(huart);
 8006648:	4620      	mov	r0, r4
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800664a:	621a      	str	r2, [r3, #32]
}
 800664c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_UARTEx_WakeupCallback(huart);
 8006650:	f000 bd64 	b.w	800711c <HAL_UARTEx_WakeupCallback>
	if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006654:	0610      	lsls	r0, r2, #24
 8006656:	d50a      	bpl.n	800666e <HAL_UART_IRQHandler+0x222>
			&& (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006658:	f001 0080 	and.w	r0, r1, #128	; 0x80
					|| ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800665c:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8006660:	4328      	orrs	r0, r5
 8006662:	d004      	beq.n	800666e <HAL_UART_IRQHandler+0x222>
		if (huart->TxISR != NULL) {
 8006664:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006666:	2b00      	cmp	r3, #0
 8006668:	d082      	beq.n	8006570 <HAL_UART_IRQHandler+0x124>
			huart->TxISR(huart);
 800666a:	4620      	mov	r0, r4
 800666c:	e706      	b.n	800647c <HAL_UART_IRQHandler+0x30>
	if (((isrflags & USART_ISR_TC) != 0U)
 800666e:	0657      	lsls	r7, r2, #25
 8006670:	d50e      	bpl.n	8006690 <HAL_UART_IRQHandler+0x244>
			&& ((cr1its & USART_CR1_TCIE) != 0U)) {
 8006672:	064e      	lsls	r6, r1, #25
 8006674:	d50c      	bpl.n	8006690 <HAL_UART_IRQHandler+0x244>
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
	/* Disable the UART Transmit Complete Interrupt */
	CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667c:	601a      	str	r2, [r3, #0]

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 800667e:	2320      	movs	r3, #32
 8006680:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	/* Cleat TxISR function pointer */
	huart->TxISR = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8006688:	4620      	mov	r0, r4
 800668a:	f010 fee1 	bl	8017450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668e:	e76f      	b.n	8006570 <HAL_UART_IRQHandler+0x124>
	if (((isrflags & USART_ISR_TXFE) != 0U)
 8006690:	0215      	lsls	r5, r2, #8
 8006692:	d506      	bpl.n	80066a2 <HAL_UART_IRQHandler+0x256>
			&& ((cr1its & USART_CR1_TXFEIE) != 0U)) {
 8006694:	0048      	lsls	r0, r1, #1
 8006696:	d504      	bpl.n	80066a2 <HAL_UART_IRQHandler+0x256>
		HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006698:	4620      	mov	r0, r4
}
 800669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_UARTEx_TxFifoEmptyCallback(huart);
 800669e:	f000 bd3f 	b.w	8007120 <HAL_UARTEx_TxFifoEmptyCallback>
	if (((isrflags & USART_ISR_RXFF) != 0U)
 80066a2:	01d3      	lsls	r3, r2, #7
 80066a4:	f57f af64 	bpl.w	8006570 <HAL_UART_IRQHandler+0x124>
			&& ((cr1its & USART_CR1_RXFFIE) != 0U)) {
 80066a8:	2900      	cmp	r1, #0
 80066aa:	f6bf af61 	bge.w	8006570 <HAL_UART_IRQHandler+0x124>
		HAL_UARTEx_RxFifoFullCallback(huart);
 80066ae:	4620      	mov	r0, r4
}
 80066b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_UARTEx_RxFifoFullCallback(huart);
 80066b4:	f000 bd33 	b.w	800711e <HAL_UARTEx_RxFifoFullCallback>
 80066b8:	10000001 	.word	0x10000001
 80066bc:	04000120 	.word	0x04000120
 80066c0:	08006391 	.word	0x08006391

080066c4 <UART_RxISR_8BIT>:
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
	uint16_t uhMask = huart->Mask;
	uint16_t uhdata;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80066c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80066c8:	6802      	ldr	r2, [r0, #0]
 80066ca:	2b22      	cmp	r3, #34	; 0x22
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4604      	mov	r4, r0
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80066d0:	d130      	bne.n	8006734 <UART_RxISR_8BIT+0x70>
		uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
		*huart->pRxBuffPtr = (uint8_t) (uhdata & (uint8_t) uhMask);
 80066d4:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
 80066d8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80066da:	400b      	ands	r3, r1
 80066dc:	7013      	strb	r3, [r2, #0]
		huart->pRxBuffPtr++;
 80066de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80066e0:	3301      	adds	r3, #1
 80066e2:	6583      	str	r3, [r0, #88]	; 0x58
		huart->RxXferCount--;
 80066e4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e

		if (huart->RxXferCount == 0U) {
 80066f0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80066f4:	b292      	uxth	r2, r2
 80066f6:	b9ca      	cbnz	r2, 800672c <UART_RxISR_8BIT+0x68>
			/* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
			CLEAR_BIT(huart->Instance->CR1,
 80066f8:	6803      	ldr	r3, [r0, #0]
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8006700:	6019      	str	r1, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	6899      	ldr	r1, [r3, #8]
 8006704:	f021 0101 	bic.w	r1, r1, #1
 8006708:	6099      	str	r1, [r3, #8]

			/* Rx process is completed, restore huart->RxState to Ready */
			huart->RxState = HAL_UART_STATE_READY;
 800670a:	2120      	movs	r1, #32
 800670c:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

			/* Clear RxISR function pointer */
			huart->RxISR = NULL;
 8006710:	6702      	str	r2, [r0, #112]	; 0x70

			/* Check current reception Mode :
			 If Reception till IDLE event has been selected : */
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8006712:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006714:	2a01      	cmp	r2, #1
 8006716:	d10a      	bne.n	800672e <UART_RxISR_8BIT+0x6a>
				/* Disable IDLE interrupt */
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800671a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671e:	f022 0210 	bic.w	r2, r2, #16
 8006722:	601a      	str	r2, [r3, #0]
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006724:	f7ff fe91 	bl	800644a <HAL_UARTEx_RxEventCallback>
#else
				/*Call legacy weak Rx complete callback*/
				HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
			huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	2300      	movs	r3, #0
 800672a:	66e3      	str	r3, [r4, #108]	; 0x6c
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
	}
}
 800672c:	bd10      	pop	{r4, pc}
				HAL_UART_RxCpltCallback(huart);
 800672e:	f010 fe7d 	bl	801742c <HAL_UART_RxCpltCallback>
 8006732:	e7f9      	b.n	8006728 <UART_RxISR_8BIT+0x64>
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006734:	8b13      	ldrh	r3, [r2, #24]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f043 0308 	orr.w	r3, r3, #8
 800673c:	8313      	strh	r3, [r2, #24]
}
 800673e:	e7f5      	b.n	800672c <UART_RxISR_8BIT+0x68>

08006740 <UART_RxISR_16BIT>:
	uint16_t *tmp;
	uint16_t uhMask = huart->Mask;
	uint16_t uhdata;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006740:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006744:	6803      	ldr	r3, [r0, #0]
 8006746:	2a22      	cmp	r2, #34	; 0x22
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart) {
 8006748:	b510      	push	{r4, lr}
 800674a:	4604      	mov	r4, r0
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 800674c:	d12e      	bne.n	80067ac <UART_RxISR_16BIT+0x6c>
		uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800674e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
		tmp = (uint16_t*) huart->pRxBuffPtr;
		*tmp = (uint16_t) (uhdata & uhMask);
 8006750:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8006754:	4011      	ands	r1, r2
 8006756:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006758:	f822 1b02 	strh.w	r1, [r2], #2
		huart->pRxBuffPtr += 2U;
 800675c:	6582      	str	r2, [r0, #88]	; 0x58
		huart->RxXferCount--;
 800675e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8006762:	3a01      	subs	r2, #1
 8006764:	b292      	uxth	r2, r2
 8006766:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e

		if (huart->RxXferCount == 0U) {
 800676a:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 800676e:	b292      	uxth	r2, r2
 8006770:	b9c2      	cbnz	r2, 80067a4 <UART_RxISR_16BIT+0x64>
			/* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
			CLEAR_BIT(huart->Instance->CR1,
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8006778:	6019      	str	r1, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	6899      	ldr	r1, [r3, #8]
 800677c:	f021 0101 	bic.w	r1, r1, #1
 8006780:	6099      	str	r1, [r3, #8]

			/* Rx process is completed, restore huart->RxState to Ready */
			huart->RxState = HAL_UART_STATE_READY;
 8006782:	2120      	movs	r1, #32
 8006784:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

			/* Clear RxISR function pointer */
			huart->RxISR = NULL;
 8006788:	6702      	str	r2, [r0, #112]	; 0x70

			/* Check current reception Mode :
			 If Reception till IDLE event has been selected : */
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 800678a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800678c:	2a01      	cmp	r2, #1
 800678e:	d10a      	bne.n	80067a6 <UART_RxISR_16BIT+0x66>
				/* Disable IDLE interrupt */
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006790:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006792:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006796:	f022 0210 	bic.w	r2, r2, #16
 800679a:	601a      	str	r2, [r3, #0]
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800679c:	f7ff fe55 	bl	800644a <HAL_UARTEx_RxEventCallback>
#else
				/*Call legacy weak Rx complete callback*/
				HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}
			huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	2300      	movs	r3, #0
 80067a2:	66e3      	str	r3, [r4, #108]	; 0x6c
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
	}
}
 80067a4:	bd10      	pop	{r4, pc}
				HAL_UART_RxCpltCallback(huart);
 80067a6:	f010 fe41 	bl	801742c <HAL_UART_RxCpltCallback>
 80067aa:	e7f9      	b.n	80067a0 <UART_RxISR_16BIT+0x60>
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ac:	8b1a      	ldrh	r2, [r3, #24]
 80067ae:	b292      	uxth	r2, r2
 80067b0:	f042 0208 	orr.w	r2, r2, #8
 80067b4:	831a      	strh	r2, [r3, #24]
}
 80067b6:	e7f5      	b.n	80067a4 <UART_RxISR_16BIT+0x64>

080067b8 <UART_RxISR_8BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart) {
 80067b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t uhMask = huart->Mask;
	uint16_t uhdata;
	uint16_t nb_rx_data;
	uint16_t rxdatacount;
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	69dd      	ldr	r5, [r3, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80067c0:	f8d3 9000 	ldr.w	r9, [r3]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80067c4:	689e      	ldr	r6, [r3, #8]

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80067c6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067ca:	2a22      	cmp	r2, #34	; 0x22
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart) {
 80067cc:	4604      	mov	r4, r0
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80067ce:	f040 8085 	bne.w	80068dc <UART_RxISR_8BIT_FIFOEN+0x124>
	uint16_t uhMask = huart->Mask;
 80067d2:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
		nb_rx_data = huart->NbRxDataToProcess;
 80067d6:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
				/* Disable the UART Parity Error Interrupt and RXFT interrupt*/
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

				/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
				 and RX FIFO Threshold interrupt */
				CLEAR_BIT(huart->Instance->CR3,
 80067da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80068ec <UART_RxISR_8BIT_FIFOEN+0x134>
					huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067de:	2700      	movs	r7, #0
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80067e0:	f006 0601 	and.w	r6, r6, #1
		while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 80067e4:	f1ba 0f00 	cmp.w	sl, #0
 80067e8:	d001      	beq.n	80067ee <UART_RxISR_8BIT_FIFOEN+0x36>
 80067ea:	06ab      	lsls	r3, r5, #26
 80067ec:	d414      	bmi.n	8006818 <UART_RxISR_8BIT_FIFOEN+0x60>

		/* When remaining number of bytes to receive is less than the RX FIFO
		 threshold, next incoming frames are processed as if FIFO mode was
		 disabled (i.e. one interrupt per received frame).
		 */
		rxdatacount = huart->RxXferCount;
 80067ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80067f2:	b29b      	uxth	r3, r3
		if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 80067f4:	b173      	cbz	r3, 8006814 <UART_RxISR_8BIT_FIFOEN+0x5c>
 80067f6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d90a      	bls.n	8006814 <UART_RxISR_8BIT_FIFOEN+0x5c>
			/* Disable the UART RXFT interrupt*/
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006806:	609a      	str	r2, [r3, #8]

			/* Update the RxISR function pointer */
			huart->RxISR = UART_RxISR_8BIT;
 8006808:	4a37      	ldr	r2, [pc, #220]	; (80068e8 <UART_RxISR_8BIT_FIFOEN+0x130>)
 800680a:	6722      	str	r2, [r4, #112]	; 0x70

			/* Enable the UART Data Register Not Empty interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f042 0220 	orr.w	r2, r2, #32
 8006812:	601a      	str	r2, [r3, #0]
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
	}
}
 8006814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006818:	6823      	ldr	r3, [r4, #0]
			*huart->pRxBuffPtr = (uint8_t) (uhdata & (uint8_t) uhMask);
 800681a:	6da2      	ldr	r2, [r4, #88]	; 0x58
			uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800681c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			*huart->pRxBuffPtr = (uint8_t) (uhdata & (uint8_t) uhMask);
 800681e:	ea08 0303 	and.w	r3, r8, r3
 8006822:	7013      	strb	r3, [r2, #0]
			huart->pRxBuffPtr++;
 8006824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006826:	3301      	adds	r3, #1
 8006828:	65a3      	str	r3, [r4, #88]	; 0x58
			huart->RxXferCount--;
 800682a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800682e:	3b01      	subs	r3, #1
 8006830:	b29b      	uxth	r3, r3
 8006832:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
			isrflags = READ_REG(huart->Instance->ISR);
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	69dd      	ldr	r5, [r3, #28]
			if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE))
 800683a:	076a      	lsls	r2, r5, #29
 800683c:	d02a      	beq.n	8006894 <UART_RxISR_8BIT_FIFOEN+0xdc>
				if (((isrflags & USART_ISR_PE) != 0U)
 800683e:	07e8      	lsls	r0, r5, #31
 8006840:	d50a      	bpl.n	8006858 <UART_RxISR_8BIT_FIFOEN+0xa0>
						&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8006842:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006846:	d007      	beq.n	8006858 <UART_RxISR_8BIT_FIFOEN+0xa0>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006848:	2201      	movs	r2, #1
 800684a:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_PE;
 800684c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
				if (((isrflags & USART_ISR_FE) != 0U)
 8006858:	07a9      	lsls	r1, r5, #30
 800685a:	d508      	bpl.n	800686e <UART_RxISR_8BIT_FIFOEN+0xb6>
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 800685c:	b13e      	cbz	r6, 800686e <UART_RxISR_8BIT_FIFOEN+0xb6>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800685e:	2202      	movs	r2, #2
 8006860:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006862:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006866:	f042 0204 	orr.w	r2, r2, #4
 800686a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
				if (((isrflags & USART_ISR_NE) != 0U)
 800686e:	076a      	lsls	r2, r5, #29
 8006870:	d508      	bpl.n	8006884 <UART_RxISR_8BIT_FIFOEN+0xcc>
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8006872:	b13e      	cbz	r6, 8006884 <UART_RxISR_8BIT_FIFOEN+0xcc>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006874:	2204      	movs	r2, #4
 8006876:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006878:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800687c:	f043 0302 	orr.w	r3, r3, #2
 8006880:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
				if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8006884:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006888:	b123      	cbz	r3, 8006894 <UART_RxISR_8BIT_FIFOEN+0xdc>
					HAL_UART_ErrorCallback(huart);
 800688a:	4620      	mov	r0, r4
 800688c:	f010 fdea 	bl	8017464 <HAL_UART_ErrorCallback>
					huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
			if (huart->RxXferCount == 0U) {
 8006894:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006898:	b292      	uxth	r2, r2
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1a2      	bne.n	80067e4 <UART_RxISR_8BIT_FIFOEN+0x2c>
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80068a6:	6019      	str	r1, [r3, #0]
				CLEAR_BIT(huart->Instance->CR3,
 80068a8:	6899      	ldr	r1, [r3, #8]
 80068aa:	ea01 010b 	and.w	r1, r1, fp
 80068ae:	6099      	str	r1, [r3, #8]
				huart->RxState = HAL_UART_STATE_READY;
 80068b0:	2120      	movs	r1, #32
 80068b2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
				huart->RxISR = NULL;
 80068b6:	6722      	str	r2, [r4, #112]	; 0x70
				if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80068b8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80068ba:	2a01      	cmp	r2, #1
 80068bc:	d10a      	bne.n	80068d4 <UART_RxISR_8BIT_FIFOEN+0x11c>
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068be:	681a      	ldr	r2, [r3, #0]
					HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	f022 0210 	bic.w	r2, r2, #16
 80068c8:	601a      	str	r2, [r3, #0]
					HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff fdbd 	bl	800644a <HAL_UARTEx_RxEventCallback>
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	66e7      	str	r7, [r4, #108]	; 0x6c
 80068d2:	e787      	b.n	80067e4 <UART_RxISR_8BIT_FIFOEN+0x2c>
					HAL_UART_RxCpltCallback(huart);
 80068d4:	4620      	mov	r0, r4
 80068d6:	f010 fda9 	bl	801742c <HAL_UART_RxCpltCallback>
 80068da:	e7f9      	b.n	80068d0 <UART_RxISR_8BIT_FIFOEN+0x118>
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068dc:	8b1a      	ldrh	r2, [r3, #24]
 80068de:	b292      	uxth	r2, r2
 80068e0:	f042 0208 	orr.w	r2, r2, #8
 80068e4:	831a      	strh	r2, [r3, #24]
}
 80068e6:	e795      	b.n	8006814 <UART_RxISR_8BIT_FIFOEN+0x5c>
 80068e8:	080066c5 	.word	0x080066c5
 80068ec:	effffffe 	.word	0xeffffffe

080068f0 <UART_RxISR_16BIT_FIFOEN>:
 * @note   Function is called under interruption only, once
 *         interruptions have been enabled by HAL_UART_Receive_IT()
 * @param huart UART handle.
 * @retval None
 */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
 80068f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t *tmp;
	uint16_t uhMask = huart->Mask;
	uint16_t uhdata;
	uint16_t nb_rx_data;
	uint16_t rxdatacount;
	uint32_t isrflags = READ_REG(huart->Instance->ISR);
 80068f4:	6803      	ldr	r3, [r0, #0]
 80068f6:	69dd      	ldr	r5, [r3, #28]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80068f8:	f8d3 9000 	ldr.w	r9, [r3]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 80068fc:	689e      	ldr	r6, [r3, #8]

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 80068fe:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006902:	2a22      	cmp	r2, #34	; 0x22
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart) {
 8006904:	4604      	mov	r4, r0
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8006906:	f040 8083 	bne.w	8006a10 <UART_RxISR_16BIT_FIFOEN+0x120>
	uint16_t uhMask = huart->Mask;
 800690a:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
		nb_rx_data = huart->NbRxDataToProcess;
 800690e:	f8b0 a068 	ldrh.w	sl, [r0, #104]	; 0x68
				/* Disable the UART Parity Error Interrupt and RXFT interrupt*/
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);

				/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
				 and RX FIFO Threshold interrupt */
				CLEAR_BIT(huart->Instance->CR3,
 8006912:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8006a20 <UART_RxISR_16BIT_FIFOEN+0x130>
					huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006916:	2700      	movs	r7, #0
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8006918:	f006 0601 	and.w	r6, r6, #1
		while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U)) {
 800691c:	f1ba 0f00 	cmp.w	sl, #0
 8006920:	d001      	beq.n	8006926 <UART_RxISR_16BIT_FIFOEN+0x36>
 8006922:	06ab      	lsls	r3, r5, #26
 8006924:	d414      	bmi.n	8006950 <UART_RxISR_16BIT_FIFOEN+0x60>

		/* When remaining number of bytes to receive is less than the RX FIFO
		 threshold, next incoming frames are processed as if FIFO mode was
		 disabled (i.e. one interrupt per received frame).
		 */
		rxdatacount = huart->RxXferCount;
 8006926:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800692a:	b29b      	uxth	r3, r3
		if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess)) {
 800692c:	b173      	cbz	r3, 800694c <UART_RxISR_16BIT_FIFOEN+0x5c>
 800692e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006932:	429a      	cmp	r2, r3
 8006934:	d90a      	bls.n	800694c <UART_RxISR_16BIT_FIFOEN+0x5c>
			/* Disable the UART RXFT interrupt*/
			CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800693e:	609a      	str	r2, [r3, #8]

			/* Update the RxISR function pointer */
			huart->RxISR = UART_RxISR_16BIT;
 8006940:	4a36      	ldr	r2, [pc, #216]	; (8006a1c <UART_RxISR_16BIT_FIFOEN+0x12c>)
 8006942:	6722      	str	r2, [r4, #112]	; 0x70

			/* Enable the UART Data Register Not Empty interrupt */
			SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	f042 0220 	orr.w	r2, r2, #32
 800694a:	601a      	str	r2, [r3, #0]
		}
	} else {
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
	}
}
 800694c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006950:	6823      	ldr	r3, [r4, #0]
			*tmp = (uint16_t) (uhdata & uhMask);
 8006952:	6da2      	ldr	r2, [r4, #88]	; 0x58
			uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006954:	8c99      	ldrh	r1, [r3, #36]	; 0x24
			*tmp = (uint16_t) (uhdata & uhMask);
 8006956:	ea08 0101 	and.w	r1, r8, r1
 800695a:	f822 1b02 	strh.w	r1, [r2], #2
			huart->pRxBuffPtr += 2U;
 800695e:	65a2      	str	r2, [r4, #88]	; 0x58
			huart->RxXferCount--;
 8006960:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006964:	3a01      	subs	r2, #1
 8006966:	b292      	uxth	r2, r2
 8006968:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
			isrflags = READ_REG(huart->Instance->ISR);
 800696c:	69dd      	ldr	r5, [r3, #28]
			if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE))
 800696e:	076a      	lsls	r2, r5, #29
 8006970:	d02a      	beq.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0xd8>
				if (((isrflags & USART_ISR_PE) != 0U)
 8006972:	07e8      	lsls	r0, r5, #31
 8006974:	d50a      	bpl.n	800698c <UART_RxISR_16BIT_FIFOEN+0x9c>
						&& ((cr1its & USART_CR1_PEIE) != 0U)) {
 8006976:	f419 7f80 	tst.w	r9, #256	; 0x100
 800697a:	d007      	beq.n	800698c <UART_RxISR_16BIT_FIFOEN+0x9c>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800697c:	2201      	movs	r2, #1
 800697e:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006980:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
				if (((isrflags & USART_ISR_FE) != 0U)
 800698c:	07a9      	lsls	r1, r5, #30
 800698e:	d508      	bpl.n	80069a2 <UART_RxISR_16BIT_FIFOEN+0xb2>
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 8006990:	b13e      	cbz	r6, 80069a2 <UART_RxISR_16BIT_FIFOEN+0xb2>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006992:	2202      	movs	r2, #2
 8006994:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006996:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800699a:	f042 0204 	orr.w	r2, r2, #4
 800699e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
				if (((isrflags & USART_ISR_NE) != 0U)
 80069a2:	076a      	lsls	r2, r5, #29
 80069a4:	d508      	bpl.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0xc8>
						&& ((cr3its & USART_CR3_EIE) != 0U)) {
 80069a6:	b13e      	cbz	r6, 80069b8 <UART_RxISR_16BIT_FIFOEN+0xc8>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069a8:	2204      	movs	r2, #4
 80069aa:	621a      	str	r2, [r3, #32]
					huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
				if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 80069b8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80069bc:	b123      	cbz	r3, 80069c8 <UART_RxISR_16BIT_FIFOEN+0xd8>
					HAL_UART_ErrorCallback(huart);
 80069be:	4620      	mov	r0, r4
 80069c0:	f010 fd50 	bl	8017464 <HAL_UART_ErrorCallback>
					huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
			if (huart->RxXferCount == 0U) {
 80069c8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80069cc:	b292      	uxth	r2, r2
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	d1a4      	bne.n	800691c <UART_RxISR_16BIT_FIFOEN+0x2c>
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	6819      	ldr	r1, [r3, #0]
 80069d6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80069da:	6019      	str	r1, [r3, #0]
				CLEAR_BIT(huart->Instance->CR3,
 80069dc:	6899      	ldr	r1, [r3, #8]
 80069de:	ea01 010b 	and.w	r1, r1, fp
 80069e2:	6099      	str	r1, [r3, #8]
				huart->RxState = HAL_UART_STATE_READY;
 80069e4:	2120      	movs	r1, #32
 80069e6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
				huart->RxISR = NULL;
 80069ea:	6722      	str	r2, [r4, #112]	; 0x70
				if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 80069ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80069ee:	2a01      	cmp	r2, #1
 80069f0:	d10a      	bne.n	8006a08 <UART_RxISR_16BIT_FIFOEN+0x118>
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f2:	681a      	ldr	r2, [r3, #0]
					HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f8:	f022 0210 	bic.w	r2, r2, #16
 80069fc:	601a      	str	r2, [r3, #0]
					HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7ff fd23 	bl	800644a <HAL_UARTEx_RxEventCallback>
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	66e7      	str	r7, [r4, #108]	; 0x6c
 8006a06:	e789      	b.n	800691c <UART_RxISR_16BIT_FIFOEN+0x2c>
					HAL_UART_RxCpltCallback(huart);
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f010 fd0f 	bl	801742c <HAL_UART_RxCpltCallback>
 8006a0e:	e7f9      	b.n	8006a04 <UART_RxISR_16BIT_FIFOEN+0x114>
		__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a10:	8b1a      	ldrh	r2, [r3, #24]
 8006a12:	b292      	uxth	r2, r2
 8006a14:	f042 0208 	orr.w	r2, r2, #8
 8006a18:	831a      	strh	r2, [r3, #24]
}
 8006a1a:	e797      	b.n	800694c <UART_RxISR_16BIT_FIFOEN+0x5c>
 8006a1c:	08006741 	.word	0x08006741
 8006a20:	effffffe 	.word	0xeffffffe

08006a24 <UART_SetConfig>:
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8006a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a26:	4604      	mov	r4, r0
	if (UART_INSTANCE_LOWPOWER(huart)) {
 8006a28:	6803      	ldr	r3, [r0, #0]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006a2a:	6921      	ldr	r1, [r4, #16]
 8006a2c:	68a2      	ldr	r2, [r4, #8]
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a2e:	681d      	ldr	r5, [r3, #0]
			| huart->Init.Mode | huart->Init.OverSampling;
 8006a30:	69c0      	ldr	r0, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006a32:	430a      	orrs	r2, r1
			| huart->Init.Mode | huart->Init.OverSampling;
 8006a34:	6961      	ldr	r1, [r4, #20]
 8006a36:	430a      	orrs	r2, r1
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a38:	49a1      	ldr	r1, [pc, #644]	; (8006cc0 <UART_SetConfig+0x29c>)
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8006a3a:	4302      	orrs	r2, r0
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a3c:	4029      	ands	r1, r5
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	601a      	str	r2, [r3, #0]
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68e1      	ldr	r1, [r4, #12]
 8006a46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 8006a4e:	4a9d      	ldr	r2, [pc, #628]	; (8006cc4 <UART_SetConfig+0x2a0>)
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8006a50:	69a1      	ldr	r1, [r4, #24]
	if (!(UART_INSTANCE_LOWPOWER(huart))) {
 8006a52:	4293      	cmp	r3, r2
		tmpreg |= huart->Init.OneBitSampling;
 8006a54:	bf1c      	itt	ne
 8006a56:	6a22      	ldrne	r2, [r4, #32]
 8006a58:	4311      	orrne	r1, r2
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006a60:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
	MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER,
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a6c:	f022 020f 	bic.w	r2, r2, #15
 8006a70:	430a      	orrs	r2, r1
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006a74:	4a94      	ldr	r2, [pc, #592]	; (8006cc8 <UART_SetConfig+0x2a4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d11b      	bne.n	8006ab2 <UART_SetConfig+0x8e>
 8006a7a:	4b94      	ldr	r3, [pc, #592]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	f200 80e5 	bhi.w	8006c56 <UART_SetConfig+0x232>
 8006a8c:	4a90      	ldr	r2, [pc, #576]	; (8006cd0 <UART_SetConfig+0x2ac>)
 8006a8e:	5cd3      	ldrb	r3, [r2, r3]
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006a90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006a94:	f040 80ab 	bne.w	8006bee <UART_SetConfig+0x1ca>
		switch (clocksource) {
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d826      	bhi.n	8006aea <UART_SetConfig+0xc6>
 8006a9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006aa0:	00de00ef 	.word	0x00de00ef
 8006aa4:	002500a5 	.word	0x002500a5
 8006aa8:	002500e4 	.word	0x002500e4
 8006aac:	00250025 	.word	0x00250025
 8006ab0:	00f3      	.short	0x00f3
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006ab2:	4a88      	ldr	r2, [pc, #544]	; (8006cd4 <UART_SetConfig+0x2b0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d106      	bne.n	8006ac6 <UART_SetConfig+0xa2>
 8006ab8:	4b84      	ldr	r3, [pc, #528]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006aba:	4a87      	ldr	r2, [pc, #540]	; (8006cd8 <UART_SetConfig+0x2b4>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	e7e3      	b.n	8006a8e <UART_SetConfig+0x6a>
 8006ac6:	4a85      	ldr	r2, [pc, #532]	; (8006cdc <UART_SetConfig+0x2b8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d119      	bne.n	8006b00 <UART_SetConfig+0xdc>
 8006acc:	4b7f      	ldr	r3, [pc, #508]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	f000 80c9 	beq.w	8006c6e <UART_SetConfig+0x24a>
 8006adc:	d807      	bhi.n	8006aee <UART_SetConfig+0xca>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80ca 	beq.w	8006c78 <UART_SetConfig+0x254>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	f000 80bc 	beq.w	8006c62 <UART_SetConfig+0x23e>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006aea:	2001      	movs	r0, #1
 8006aec:	e04e      	b.n	8006b8c <UART_SetConfig+0x168>
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006aee:	2b30      	cmp	r3, #48	; 0x30
 8006af0:	d1fb      	bne.n	8006aea <UART_SetConfig+0xc6>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006af2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006af6:	f000 80c6 	beq.w	8006c86 <UART_SetConfig+0x262>
 8006afa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006afe:	e093      	b.n	8006c28 <UART_SetConfig+0x204>
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006b00:	4a77      	ldr	r2, [pc, #476]	; (8006ce0 <UART_SetConfig+0x2bc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d10f      	bne.n	8006b26 <UART_SetConfig+0x102>
 8006b06:	4b71      	ldr	r3, [pc, #452]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b10:	2b80      	cmp	r3, #128	; 0x80
 8006b12:	f000 80ac 	beq.w	8006c6e <UART_SetConfig+0x24a>
 8006b16:	d804      	bhi.n	8006b22 <UART_SetConfig+0xfe>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80ad 	beq.w	8006c78 <UART_SetConfig+0x254>
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	e7e1      	b.n	8006ae6 <UART_SetConfig+0xc2>
 8006b22:	2bc0      	cmp	r3, #192	; 0xc0
 8006b24:	e7e4      	b.n	8006af0 <UART_SetConfig+0xcc>
 8006b26:	4a6f      	ldr	r2, [pc, #444]	; (8006ce4 <UART_SetConfig+0x2c0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d112      	bne.n	8006b52 <UART_SetConfig+0x12e>
 8006b2c:	4b67      	ldr	r3, [pc, #412]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3a:	f000 8098 	beq.w	8006c6e <UART_SetConfig+0x24a>
 8006b3e:	d805      	bhi.n	8006b4c <UART_SetConfig+0x128>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8099 	beq.w	8006c78 <UART_SetConfig+0x254>
 8006b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4a:	e7cc      	b.n	8006ae6 <UART_SetConfig+0xc2>
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b50:	e7ce      	b.n	8006af0 <UART_SetConfig+0xcc>
 8006b52:	4a5c      	ldr	r2, [pc, #368]	; (8006cc4 <UART_SetConfig+0x2a0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d1c8      	bne.n	8006aea <UART_SetConfig+0xc6>
 8006b58:	4b5c      	ldr	r3, [pc, #368]	; (8006ccc <UART_SetConfig+0x2a8>)
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b66:	d018      	beq.n	8006b9a <UART_SetConfig+0x176>
 8006b68:	d806      	bhi.n	8006b78 <UART_SetConfig+0x154>
 8006b6a:	b15b      	cbz	r3, 8006b84 <UART_SetConfig+0x160>
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b70:	d1bb      	bne.n	8006aea <UART_SetConfig+0xc6>
			pclk = HAL_RCC_GetSysClockFreq();
 8006b72:	f7fe f923 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
			break;
 8006b76:	e007      	b.n	8006b88 <UART_SetConfig+0x164>
	UART_GETCLOCKSOURCE(huart, clocksource);
 8006b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b7c:	d1b5      	bne.n	8006aea <UART_SetConfig+0xc6>
			pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b82:	e00b      	b.n	8006b9c <UART_SetConfig+0x178>
			pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fe fd10 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8006b88:	b940      	cbnz	r0, 8006b9c <UART_SetConfig+0x178>
 8006b8a:	2000      	movs	r0, #0
	huart->NbRxDataToProcess = 1;
 8006b8c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006b90:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->RxISR = NULL;
 8006b92:	2300      	movs	r3, #0
	huart->TxISR = NULL;
 8006b94:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
}
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pclk = (uint32_t) HSI_VALUE;
 8006b9a:	4853      	ldr	r0, [pc, #332]	; (8006ce8 <UART_SetConfig+0x2c4>)
			if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate))
 8006b9c:	6865      	ldr	r5, [r4, #4]
					/ UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b9e:	4b53      	ldr	r3, [pc, #332]	; (8006cec <UART_SetConfig+0x2c8>)
 8006ba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
			if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate))
 8006ba2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
					/ UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ba6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
			lpuart_ker_ck_pres = (pclk
 8006baa:	fbb0 f3f2 	udiv	r3, r0, r2
			if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate))
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	d89b      	bhi.n	8006aea <UART_SetConfig+0xc6>
					|| (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate))) {
 8006bb2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006bb6:	d898      	bhi.n	8006aea <UART_SetConfig+0xc6>
				usartdiv = (uint32_t) (UART_DIV_LPUART(pclk,
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2100      	movs	r1, #0
 8006bbc:	f7fa f81c 	bl	8000bf8 <__aeabi_uldivmod>
 8006bc0:	020f      	lsls	r7, r1, #8
 8006bc2:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006bc6:	0206      	lsls	r6, r0, #8
 8006bc8:	0868      	lsrs	r0, r5, #1
 8006bca:	1830      	adds	r0, r6, r0
 8006bcc:	462a      	mov	r2, r5
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	f147 0100 	adc.w	r1, r7, #0
 8006bd6:	f7fa f80f 	bl	8000bf8 <__aeabi_uldivmod>
				if ((usartdiv >= LPUART_BRR_MIN)
 8006bda:	4b45      	ldr	r3, [pc, #276]	; (8006cf0 <UART_SetConfig+0x2cc>)
						&& (usartdiv <= LPUART_BRR_MAX)) {
 8006bdc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
				if ((usartdiv >= LPUART_BRR_MIN)
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d882      	bhi.n	8006aea <UART_SetConfig+0xc6>
					huart->Instance->BRR = usartdiv;
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	60d8      	str	r0, [r3, #12]
 8006be8:	e7cf      	b.n	8006b8a <UART_SetConfig+0x166>
			pclk = (uint32_t) HSI_VALUE;
 8006bea:	483f      	ldr	r0, [pc, #252]	; (8006ce8 <UART_SetConfig+0x2c4>)
 8006bec:	e04b      	b.n	8006c86 <UART_SetConfig+0x262>
		switch (clocksource) {
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	f63f af7b 	bhi.w	8006aea <UART_SetConfig+0xc6>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0x1d8>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c4b 	.word	0x08006c4b
 8006c04:	08006c75 	.word	0x08006c75
 8006c08:	08006aeb 	.word	0x08006aeb
 8006c0c:	08006c51 	.word	0x08006c51
 8006c10:	08006aeb 	.word	0x08006aeb
 8006c14:	08006aeb 	.word	0x08006aeb
 8006c18:	08006aeb 	.word	0x08006aeb
 8006c1c:	08006afb 	.word	0x08006afb
			pclk = HAL_RCC_GetPCLK1Freq();
 8006c20:	f7fe fcc2 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d0b0      	beq.n	8006b8a <UART_SetConfig+0x166>
			usartdiv = (uint16_t) (UART_DIV_SAMPLING16(pclk,
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <UART_SetConfig+0x2c8>)
 8006c2e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006c32:	fbb0 f0f2 	udiv	r0, r0, r2
 8006c36:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006c3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c3e:	b280      	uxth	r0, r0
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006c40:	f1a0 0210 	sub.w	r2, r0, #16
 8006c44:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006c48:	e7ca      	b.n	8006be0 <UART_SetConfig+0x1bc>
			pclk = HAL_RCC_GetPCLK2Freq();
 8006c4a:	f7fe fcbf 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
			break;
 8006c4e:	e7e9      	b.n	8006c24 <UART_SetConfig+0x200>
			pclk = HAL_RCC_GetSysClockFreq();
 8006c50:	f7fe f8b4 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
			break;
 8006c54:	e7e6      	b.n	8006c24 <UART_SetConfig+0x200>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006c56:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c5a:	d1f6      	bne.n	8006c4a <UART_SetConfig+0x226>
			pclk = HAL_RCC_GetPCLK2Freq();
 8006c5c:	f7fe fcb6 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
			break;
 8006c60:	e00f      	b.n	8006c82 <UART_SetConfig+0x25e>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006c62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c66:	d1f3      	bne.n	8006c50 <UART_SetConfig+0x22c>
			pclk = HAL_RCC_GetSysClockFreq();
 8006c68:	f7fe f8a8 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
			break;
 8006c6c:	e009      	b.n	8006c82 <UART_SetConfig+0x25e>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006c6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c72:	d0ba      	beq.n	8006bea <UART_SetConfig+0x1c6>
			pclk = (uint32_t) HSI_VALUE;
 8006c74:	481c      	ldr	r0, [pc, #112]	; (8006ce8 <UART_SetConfig+0x2c4>)
 8006c76:	e7d7      	b.n	8006c28 <UART_SetConfig+0x204>
	else if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8006c78:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006c7c:	d1d0      	bne.n	8006c20 <UART_SetConfig+0x1fc>
			pclk = HAL_RCC_GetPCLK1Freq();
 8006c7e:	f7fe fc93 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d081      	beq.n	8006b8a <UART_SetConfig+0x166>
			usartdiv = (uint16_t) (UART_DIV_SAMPLING8(pclk,
 8006c86:	6862      	ldr	r2, [r4, #4]
 8006c88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c8a:	4b18      	ldr	r3, [pc, #96]	; (8006cec <UART_SetConfig+0x2c8>)
 8006c8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c94:	0850      	lsrs	r0, r2, #1
 8006c96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006c9a:	fbb0 f0f2 	udiv	r0, r0, r2
 8006c9e:	b283      	uxth	r3, r0
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8006ca0:	f1a3 0110 	sub.w	r1, r3, #16
 8006ca4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006ca8:	4291      	cmp	r1, r2
 8006caa:	f63f af1e 	bhi.w	8006aea <UART_SetConfig+0xc6>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8006cae:	f020 000f 	bic.w	r0, r0, #15
				huart->Instance->BRR = brrtemp;
 8006cb2:	6822      	ldr	r2, [r4, #0]
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8006cb4:	b280      	uxth	r0, r0
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8006cb6:	f3c3 0342 	ubfx	r3, r3, #1, #3
				huart->Instance->BRR = brrtemp;
 8006cba:	4318      	orrs	r0, r3
 8006cbc:	60d0      	str	r0, [r2, #12]
 8006cbe:	e764      	b.n	8006b8a <UART_SetConfig+0x166>
 8006cc0:	cfff69f3 	.word	0xcfff69f3
 8006cc4:	40008000 	.word	0x40008000
 8006cc8:	40013800 	.word	0x40013800
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	08023600 	.word	0x08023600
 8006cd4:	40004400 	.word	0x40004400
 8006cd8:	08023603 	.word	0x08023603
 8006cdc:	40004800 	.word	0x40004800
 8006ce0:	40004c00 	.word	0x40004c00
 8006ce4:	40005000 	.word	0x40005000
 8006ce8:	00f42400 	.word	0x00f42400
 8006cec:	08023610 	.word	0x08023610
 8006cf0:	000ffcff 	.word	0x000ffcff

08006cf4 <UART_AdvFeatureConfig>:
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006cf6:	07da      	lsls	r2, r3, #31
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8006cf8:	b510      	push	{r4, lr}
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006cfa:	d506      	bpl.n	8006d0a <UART_AdvFeatureConfig+0x16>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8006cfc:	6801      	ldr	r1, [r0, #0]
 8006cfe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006d00:	684a      	ldr	r2, [r1, #4]
 8006d02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006d06:	4322      	orrs	r2, r4
 8006d08:	604a      	str	r2, [r1, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d0a:	079c      	lsls	r4, r3, #30
 8006d0c:	d506      	bpl.n	8006d1c <UART_AdvFeatureConfig+0x28>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8006d0e:	6801      	ldr	r1, [r0, #0]
 8006d10:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d12:	684a      	ldr	r2, [r1, #4]
 8006d14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d18:	4322      	orrs	r2, r4
 8006d1a:	604a      	str	r2, [r1, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d1c:	0759      	lsls	r1, r3, #29
 8006d1e:	d506      	bpl.n	8006d2e <UART_AdvFeatureConfig+0x3a>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8006d20:	6801      	ldr	r1, [r0, #0]
 8006d22:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006d24:	684a      	ldr	r2, [r1, #4]
 8006d26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d2a:	4322      	orrs	r2, r4
 8006d2c:	604a      	str	r2, [r1, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d2e:	071a      	lsls	r2, r3, #28
 8006d30:	d506      	bpl.n	8006d40 <UART_AdvFeatureConfig+0x4c>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8006d32:	6801      	ldr	r1, [r0, #0]
 8006d34:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006d36:	684a      	ldr	r2, [r1, #4]
 8006d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d3c:	4322      	orrs	r2, r4
 8006d3e:	604a      	str	r2, [r1, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d40:	06dc      	lsls	r4, r3, #27
 8006d42:	d506      	bpl.n	8006d52 <UART_AdvFeatureConfig+0x5e>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8006d44:	6801      	ldr	r1, [r0, #0]
 8006d46:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d48:	688a      	ldr	r2, [r1, #8]
 8006d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d4e:	4322      	orrs	r2, r4
 8006d50:	608a      	str	r2, [r1, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d52:	0699      	lsls	r1, r3, #26
 8006d54:	d506      	bpl.n	8006d64 <UART_AdvFeatureConfig+0x70>
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8006d56:	6801      	ldr	r1, [r0, #0]
 8006d58:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d5a:	688a      	ldr	r2, [r1, #8]
 8006d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d60:	4322      	orrs	r2, r4
 8006d62:	608a      	str	r2, [r1, #8]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d64:	065a      	lsls	r2, r3, #25
 8006d66:	d50f      	bpl.n	8006d88 <UART_AdvFeatureConfig+0x94>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006d6c:	684a      	ldr	r2, [r1, #4]
 8006d6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006d72:	4322      	orrs	r2, r4
		if (huart->AdvancedInit.AutoBaudRateEnable
 8006d74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8006d78:	604a      	str	r2, [r1, #4]
		if (huart->AdvancedInit.AutoBaudRateEnable
 8006d7a:	d105      	bne.n	8006d88 <UART_AdvFeatureConfig+0x94>
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8006d7c:	684a      	ldr	r2, [r1, #4]
 8006d7e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006d80:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006d84:	4322      	orrs	r2, r4
 8006d86:	604a      	str	r2, [r1, #4]
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8006d88:	061b      	lsls	r3, r3, #24
 8006d8a:	d506      	bpl.n	8006d9a <UART_AdvFeatureConfig+0xa6>
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8006d8c:	6802      	ldr	r2, [r0, #0]
 8006d8e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006d90:	6853      	ldr	r3, [r2, #4]
 8006d92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006d96:	430b      	orrs	r3, r1
 8006d98:	6053      	str	r3, [r2, #4]
}
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <UART_WaitOnFlagUntilTimeout>:
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006da4:	4604      	mov	r4, r0
 8006da6:	460e      	mov	r6, r1
 8006da8:	4615      	mov	r5, r2
 8006daa:	461f      	mov	r7, r3
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	69d3      	ldr	r3, [r2, #28]
 8006db0:	ea36 0303 	bics.w	r3, r6, r3
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	d001      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x26>
	return HAL_OK;
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e01c      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x60>
		if (Timeout != HAL_MAX_DELAY) {
 8006dc2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006dc6:	d0f2      	beq.n	8006dae <UART_WaitOnFlagUntilTimeout+0x12>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006dc8:	f7fd f98e 	bl	80040e8 <HAL_GetTick>
 8006dcc:	1bc0      	subs	r0, r0, r7
 8006dce:	4540      	cmp	r0, r8
 8006dd0:	6820      	ldr	r0, [r4, #0]
				CLEAR_BIT(huart->Instance->CR1,
 8006dd2:	6803      	ldr	r3, [r0, #0]
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8006dd4:	d802      	bhi.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x40>
 8006dd6:	f1b8 0f00 	cmp.w	r8, #0
 8006dda:	d111      	bne.n	8006e00 <UART_WaitOnFlagUntilTimeout+0x64>
				CLEAR_BIT(huart->Instance->CR1,
 8006ddc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006de0:	6003      	str	r3, [r0, #0]
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	6883      	ldr	r3, [r0, #8]
 8006de4:	f023 0301 	bic.w	r3, r3, #1
 8006de8:	6083      	str	r3, [r0, #8]
				huart->gState = HAL_UART_STATE_READY;
 8006dea:	2320      	movs	r3, #32
 8006dec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				huart->RxState = HAL_UART_STATE_READY;
 8006df0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
					__HAL_UNLOCK(huart);
 8006df4:	2300      	movs	r3, #0
 8006df6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
					return HAL_TIMEOUT;
 8006dfa:	2003      	movs	r0, #3
}
 8006dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8006e00:	075a      	lsls	r2, r3, #29
 8006e02:	d5d3      	bpl.n	8006dac <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8006e04:	69c3      	ldr	r3, [r0, #28]
 8006e06:	051b      	lsls	r3, r3, #20
 8006e08:	d5d0      	bpl.n	8006dac <UART_WaitOnFlagUntilTimeout+0x10>
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e0e:	6203      	str	r3, [r0, #32]
					CLEAR_BIT(huart->Instance->CR1,
 8006e10:	6803      	ldr	r3, [r0, #0]
 8006e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e16:	6003      	str	r3, [r0, #0]
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e18:	6883      	ldr	r3, [r0, #8]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	6083      	str	r3, [r0, #8]
					huart->gState = HAL_UART_STATE_READY;
 8006e20:	2320      	movs	r3, #32
 8006e22:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
					huart->RxState = HAL_UART_STATE_READY;
 8006e26:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006e2e:	e7e1      	b.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x58>

08006e30 <HAL_UART_Transmit>:
		uint16_t Size, uint32_t Timeout) {
 8006e30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006e34:	4698      	mov	r8, r3
	if (huart->gState == HAL_UART_STATE_READY) {
 8006e36:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006e3a:	2b20      	cmp	r3, #32
		uint16_t Size, uint32_t Timeout) {
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	460e      	mov	r6, r1
 8006e40:	4617      	mov	r7, r2
	if (huart->gState == HAL_UART_STATE_READY) {
 8006e42:	d150      	bne.n	8006ee6 <HAL_UART_Transmit+0xb6>
		if ((pData == NULL) || (Size == 0U)) {
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d04c      	beq.n	8006ee2 <HAL_UART_Transmit+0xb2>
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d04a      	beq.n	8006ee2 <HAL_UART_Transmit+0xb2>
		__HAL_LOCK(huart);
 8006e4c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d048      	beq.n	8006ee6 <HAL_UART_Transmit+0xb6>
 8006e54:	2301      	movs	r3, #1
 8006e56:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5a:	2500      	movs	r5, #0
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e5c:	2321      	movs	r3, #33	; 0x21
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5e:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e62:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		tickstart = HAL_GetTick();
 8006e66:	f7fd f93f 	bl	80040e8 <HAL_GetTick>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e6a:	68a2      	ldr	r2, [r4, #8]
		huart->TxXferSize = Size;
 8006e6c:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
		tickstart = HAL_GetTick();
 8006e74:	4603      	mov	r3, r0
		huart->TxXferCount = Size;
 8006e76:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e7a:	d103      	bne.n	8006e84 <HAL_UART_Transmit+0x54>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8006e7c:	6922      	ldr	r2, [r4, #16]
 8006e7e:	b90a      	cbnz	r2, 8006e84 <HAL_UART_Transmit+0x54>
 8006e80:	4635      	mov	r5, r6
			pdata8bits = NULL;
 8006e82:	4616      	mov	r6, r2
		__HAL_UNLOCK(huart);
 8006e84:	2200      	movs	r2, #0
 8006e86:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
		while (huart->TxXferCount > 0U) {
 8006e8a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8006e8e:	f8cd 8000 	str.w	r8, [sp]
		while (huart->TxXferCount > 0U) {
 8006e92:	b292      	uxth	r2, r2
 8006e94:	b942      	cbnz	r2, 8006ea8 <HAL_UART_Transmit+0x78>
		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8006e96:	2140      	movs	r1, #64	; 0x40
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f7ff ff7f 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006e9e:	b958      	cbnz	r0, 8006eb8 <HAL_UART_Transmit+0x88>
		huart->gState = HAL_UART_STATE_READY;
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		return HAL_OK;
 8006ea6:	e008      	b.n	8006eba <HAL_UART_Transmit+0x8a>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	4620      	mov	r0, r4
 8006eae:	9303      	str	r3, [sp, #12]
 8006eb0:	f7ff ff74 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	b118      	cbz	r0, 8006ec0 <HAL_UART_Transmit+0x90>
				return HAL_TIMEOUT;
 8006eb8:	2003      	movs	r0, #3
}
 8006eba:	b004      	add	sp, #16
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (pdata8bits == NULL) {
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	b95e      	cbnz	r6, 8006edc <HAL_UART_Transmit+0xac>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 8006ec4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 8006ecc:	850a      	strh	r2, [r1, #40]	; 0x28
			huart->TxXferCount--;
 8006ece:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8006ed2:	3a01      	subs	r2, #1
 8006ed4:	b292      	uxth	r2, r2
 8006ed6:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8006eda:	e7d6      	b.n	8006e8a <HAL_UART_Transmit+0x5a>
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 8006edc:	f816 2b01 	ldrb.w	r2, [r6], #1
 8006ee0:	e7f4      	b.n	8006ecc <HAL_UART_Transmit+0x9c>
			return HAL_ERROR;
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	e7e9      	b.n	8006eba <HAL_UART_Transmit+0x8a>
		return HAL_BUSY;
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	e7e7      	b.n	8006eba <HAL_UART_Transmit+0x8a>

08006eea <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8006eea:	b530      	push	{r4, r5, lr}
 8006eec:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eee:	2500      	movs	r5, #0
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8006ef0:	b085      	sub	sp, #20
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
	tickstart = HAL_GetTick();
 8006ef6:	f7fd f8f7 	bl	80040e8 <HAL_GetTick>
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	0711      	lsls	r1, r2, #28
	tickstart = HAL_GetTick();
 8006f00:	4603      	mov	r3, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8006f02:	d417      	bmi.n	8006f34 <UART_CheckIdleState+0x4a>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	0752      	lsls	r2, r2, #29
 8006f0a:	d509      	bpl.n	8006f20 <UART_CheckIdleState+0x36>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8006f0c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006f10:	9200      	str	r2, [sp, #0]
 8006f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f16:	2200      	movs	r2, #0
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f7ff ff3f 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006f1e:	b9b0      	cbnz	r0, 8006f4e <UART_CheckIdleState+0x64>
	huart->gState = HAL_UART_STATE_READY;
 8006f20:	2320      	movs	r3, #32
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	2000      	movs	r0, #0
	huart->gState = HAL_UART_STATE_READY;
 8006f24:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	__HAL_UNLOCK(huart);
 8006f28:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
	huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f30:	66e0      	str	r0, [r4, #108]	; 0x6c
	return HAL_OK;
 8006f32:	e00d      	b.n	8006f50 <UART_CheckIdleState+0x66>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8006f34:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006f38:	9200      	str	r2, [sp, #0]
 8006f3a:	9003      	str	r0, [sp, #12]
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff ff2a 	bl	8006d9c <UART_WaitOnFlagUntilTimeout>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d0da      	beq.n	8006f04 <UART_CheckIdleState+0x1a>
			return HAL_TIMEOUT;
 8006f4e:	2003      	movs	r0, #3
}
 8006f50:	b005      	add	sp, #20
 8006f52:	bd30      	pop	{r4, r5, pc}

08006f54 <HAL_UART_Init>:
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8006f54:	b510      	push	{r4, lr}
	if (huart == NULL) {
 8006f56:	4604      	mov	r4, r0
 8006f58:	b350      	cbz	r0, 8006fb0 <HAL_UART_Init+0x5c>
	if (huart->gState == HAL_UART_STATE_RESET) {
 8006f5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006f5e:	b91b      	cbnz	r3, 8006f68 <HAL_UART_Init+0x14>
		huart->Lock = HAL_UNLOCKED;
 8006f60:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
		HAL_UART_MspInit(huart);
 8006f64:	f7fa fa9a 	bl	800149c <HAL_UART_MspInit>
	__HAL_UART_DISABLE(huart);
 8006f68:	6822      	ldr	r2, [r4, #0]
	huart->gState = HAL_UART_STATE_BUSY;
 8006f6a:	2324      	movs	r3, #36	; 0x24
 8006f6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	__HAL_UART_DISABLE(huart);
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7ff fd53 	bl	8006a24 <UART_SetConfig>
 8006f7e:	2801      	cmp	r0, #1
 8006f80:	d016      	beq.n	8006fb0 <HAL_UART_Init+0x5c>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8006f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f84:	b113      	cbz	r3, 8006f8c <HAL_UART_Init+0x38>
		UART_AdvFeatureConfig(huart);
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7ff feb4 	bl	8006cf4 <UART_AdvFeatureConfig>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f94:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f9c:	609a      	str	r2, [r3, #8]
	__HAL_UART_ENABLE(huart);
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
	return (UART_CheckIdleState(huart));
 8006fa4:	4620      	mov	r0, r4
	__HAL_UART_ENABLE(huart);
 8006fa6:	601a      	str	r2, [r3, #0]
}
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (UART_CheckIdleState(huart));
 8006fac:	f7ff bf9d 	b.w	8006eea <UART_CheckIdleState>
}
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	bd10      	pop	{r4, pc}

08006fb4 <UART_Start_Receive_IT>:
		uint8_t *pData, uint16_t Size) {
 8006fb4:	b510      	push	{r4, lr}
	huart->pRxBuffPtr = pData;
 8006fb6:	6581      	str	r1, [r0, #88]	; 0x58
	UART_MASK_COMPUTATION(huart);
 8006fb8:	6881      	ldr	r1, [r0, #8]
	huart->RxXferSize = Size;
 8006fba:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
	huart->RxISR = NULL;
 8006fbe:	2300      	movs	r3, #0
	UART_MASK_COMPUTATION(huart);
 8006fc0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
	huart->RxXferCount = Size;
 8006fc4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
	huart->RxISR = NULL;
 8006fc8:	6703      	str	r3, [r0, #112]	; 0x70
	UART_MASK_COMPUTATION(huart);
 8006fca:	d131      	bne.n	8007030 <UART_Start_Receive_IT+0x7c>
 8006fcc:	6903      	ldr	r3, [r0, #16]
 8006fce:	bb6b      	cbnz	r3, 800702c <UART_Start_Receive_IT+0x78>
 8006fd0:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006fd4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fde:	2322      	movs	r3, #34	; 0x22
 8006fe0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
	SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe4:	6803      	ldr	r3, [r0, #0]
 8006fe6:	689c      	ldr	r4, [r3, #8]
 8006fe8:	f044 0401 	orr.w	r4, r4, #1
 8006fec:	609c      	str	r4, [r3, #8]
	if ((huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006fee:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8006ff0:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8006ff4:	d12c      	bne.n	8007050 <UART_Start_Receive_IT+0x9c>
			&& (Size >= huart->NbRxDataToProcess)) {
 8006ff6:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 8006ffa:	4294      	cmp	r4, r2
 8006ffc:	d828      	bhi.n	8007050 <UART_Start_Receive_IT+0x9c>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ffe:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007002:	d123      	bne.n	800704c <UART_Start_Receive_IT+0x98>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8007004:	6904      	ldr	r4, [r0, #16]
			huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <UART_Start_Receive_IT+0xc4>)
 8007008:	491c      	ldr	r1, [pc, #112]	; (800707c <UART_Start_Receive_IT+0xc8>)
 800700a:	2c00      	cmp	r4, #0
 800700c:	bf08      	it	eq
 800700e:	460a      	moveq	r2, r1
 8007010:	6702      	str	r2, [r0, #112]	; 0x70
		__HAL_UNLOCK(huart);
 8007012:	2200      	movs	r2, #0
 8007014:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800701e:	601a      	str	r2, [r3, #0]
		SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007026:	609a      	str	r2, [r3, #8]
}
 8007028:	2000      	movs	r0, #0
 800702a:	bd10      	pop	{r4, pc}
	UART_MASK_COMPUTATION(huart);
 800702c:	23ff      	movs	r3, #255	; 0xff
 800702e:	e7d1      	b.n	8006fd4 <UART_Start_Receive_IT+0x20>
 8007030:	b921      	cbnz	r1, 800703c <UART_Start_Receive_IT+0x88>
 8007032:	6903      	ldr	r3, [r0, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f9      	beq.n	800702c <UART_Start_Receive_IT+0x78>
 8007038:	237f      	movs	r3, #127	; 0x7f
 800703a:	e7cb      	b.n	8006fd4 <UART_Start_Receive_IT+0x20>
 800703c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007040:	d1c8      	bne.n	8006fd4 <UART_Start_Receive_IT+0x20>
 8007042:	6903      	ldr	r3, [r0, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d0f7      	beq.n	8007038 <UART_Start_Receive_IT+0x84>
 8007048:	233f      	movs	r3, #63	; 0x3f
 800704a:	e7c3      	b.n	8006fd4 <UART_Start_Receive_IT+0x20>
			huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <UART_Start_Receive_IT+0xc4>)
 800704e:	e7df      	b.n	8007010 <UART_Start_Receive_IT+0x5c>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007050:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007054:	d10e      	bne.n	8007074 <UART_Start_Receive_IT+0xc0>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8007056:	6904      	ldr	r4, [r0, #16]
			huart->RxISR = UART_RxISR_16BIT;
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <UART_Start_Receive_IT+0xcc>)
 800705a:	490a      	ldr	r1, [pc, #40]	; (8007084 <UART_Start_Receive_IT+0xd0>)
 800705c:	2c00      	cmp	r4, #0
 800705e:	bf08      	it	eq
 8007060:	460a      	moveq	r2, r1
 8007062:	6702      	str	r2, [r0, #112]	; 0x70
		__HAL_UNLOCK(huart);
 8007064:	2200      	movs	r2, #0
 8007066:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
		SET_BIT(huart->Instance->CR1,
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e7d9      	b.n	8007028 <UART_Start_Receive_IT+0x74>
			huart->RxISR = UART_RxISR_8BIT;
 8007074:	4a02      	ldr	r2, [pc, #8]	; (8007080 <UART_Start_Receive_IT+0xcc>)
 8007076:	e7f4      	b.n	8007062 <UART_Start_Receive_IT+0xae>
 8007078:	080067b9 	.word	0x080067b9
 800707c:	080068f1 	.word	0x080068f1
 8007080:	080066c5 	.word	0x080066c5
 8007084:	08006741 	.word	0x08006741

08007088 <HAL_UART_Receive_IT>:
	if (huart->RxState == HAL_UART_STATE_READY) {
 8007088:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800708c:	2b20      	cmp	r3, #32
		uint16_t Size) {
 800708e:	b410      	push	{r4}
	if (huart->RxState == HAL_UART_STATE_READY) {
 8007090:	d11d      	bne.n	80070ce <HAL_UART_Receive_IT+0x46>
		if ((pData == NULL) || (Size == 0U)) {
 8007092:	b1c1      	cbz	r1, 80070c6 <HAL_UART_Receive_IT+0x3e>
 8007094:	b1ba      	cbz	r2, 80070c6 <HAL_UART_Receive_IT+0x3e>
		__HAL_LOCK(huart);
 8007096:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800709a:	2b01      	cmp	r3, #1
 800709c:	d017      	beq.n	80070ce <HAL_UART_Receive_IT+0x46>
 800709e:	2301      	movs	r3, #1
 80070a0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a4:	2300      	movs	r3, #0
		if (!(IS_LPUART_INSTANCE(huart->Instance))) {
 80070a6:	4c0b      	ldr	r4, [pc, #44]	; (80070d4 <HAL_UART_Receive_IT+0x4c>)
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	66c3      	str	r3, [r0, #108]	; 0x6c
		if (!(IS_LPUART_INSTANCE(huart->Instance))) {
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d006      	beq.n	80070be <HAL_UART_Receive_IT+0x36>
			if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U) {
 80070b0:	685c      	ldr	r4, [r3, #4]
 80070b2:	0224      	lsls	r4, r4, #8
				SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070b4:	bf42      	ittt	mi
 80070b6:	681c      	ldrmi	r4, [r3, #0]
 80070b8:	f044 6480 	orrmi.w	r4, r4, #67108864	; 0x4000000
 80070bc:	601c      	strmi	r4, [r3, #0]
}
 80070be:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (UART_Start_Receive_IT(huart, pData, Size));
 80070c2:	f7ff bf77 	b.w	8006fb4 <UART_Start_Receive_IT>
			return HAL_ERROR;
 80070c6:	2001      	movs	r0, #1
}
 80070c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070cc:	4770      	bx	lr
		return HAL_BUSY;
 80070ce:	2002      	movs	r0, #2
 80070d0:	e7fa      	b.n	80070c8 <HAL_UART_Receive_IT+0x40>
 80070d2:	bf00      	nop
 80070d4:	40008000 	.word	0x40008000

080070d8 <UARTEx_SetNbDataToProcess>:
	uint8_t rx_fifo_threshold;
	uint8_t tx_fifo_threshold;
	static const uint8_t numerator[] = { 1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U };
	static const uint8_t denominator[] = { 8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U };

	if (huart->FifoMode == UART_FIFOMODE_DISABLE) {
 80070d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart) {
 80070da:	b530      	push	{r4, r5, lr}
	if (huart->FifoMode == UART_FIFOMODE_DISABLE) {
 80070dc:	b91b      	cbnz	r3, 80070e6 <UARTEx_SetNbDataToProcess+0xe>
		huart->NbTxDataToProcess = 1U;
		huart->NbRxDataToProcess = 1U;
 80070de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80070e2:	6683      	str	r3, [r0, #104]	; 0x68
				/ (uint16_t) denominator[tx_fifo_threshold];
		huart->NbRxDataToProcess = ((uint16_t) rx_fifo_depth
				* numerator[rx_fifo_threshold])
				/ (uint16_t) denominator[rx_fifo_threshold];
	}
}
 80070e4:	bd30      	pop	{r4, r5, pc}
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG)
 80070e6:	6803      	ldr	r3, [r0, #0]
				* numerator[tx_fifo_threshold])
 80070e8:	4d0a      	ldr	r5, [pc, #40]	; (8007114 <UARTEx_SetNbDataToProcess+0x3c>)
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG)
 80070ea:	689a      	ldr	r2, [r3, #8]
				(uint8_t) (READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG)
 80070ec:	6899      	ldr	r1, [r3, #8]
				/ (uint16_t) denominator[tx_fifo_threshold];
 80070ee:	4c0a      	ldr	r4, [pc, #40]	; (8007118 <UARTEx_SetNbDataToProcess+0x40>)
						>> USART_CR3_TXFTCFG_Pos);
 80070f0:	0f49      	lsrs	r1, r1, #29
				* numerator[rx_fifo_threshold])
 80070f2:	f3c2 6242 	ubfx	r2, r2, #25, #3
				* numerator[tx_fifo_threshold])
 80070f6:	5c6b      	ldrb	r3, [r5, r1]
				/ (uint16_t) denominator[tx_fifo_threshold];
 80070f8:	5c61      	ldrb	r1, [r4, r1]
				* numerator[tx_fifo_threshold])
 80070fa:	00db      	lsls	r3, r3, #3
				/ (uint16_t) denominator[tx_fifo_threshold];
 80070fc:	fbb3 f3f1 	udiv	r3, r3, r1
		huart->NbTxDataToProcess = ((uint16_t) tx_fifo_depth
 8007100:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
				* numerator[rx_fifo_threshold])
 8007104:	5cab      	ldrb	r3, [r5, r2]
				/ (uint16_t) denominator[rx_fifo_threshold];
 8007106:	5ca2      	ldrb	r2, [r4, r2]
				* numerator[rx_fifo_threshold])
 8007108:	00db      	lsls	r3, r3, #3
				/ (uint16_t) denominator[rx_fifo_threshold];
 800710a:	fbb3 f3f2 	udiv	r3, r3, r2
		huart->NbRxDataToProcess = ((uint16_t) rx_fifo_depth
 800710e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8007112:	e7e7      	b.n	80070e4 <UARTEx_SetNbDataToProcess+0xc>
 8007114:	08023630 	.word	0x08023630
 8007118:	08023628 	.word	0x08023628

0800711c <HAL_UARTEx_WakeupCallback>:
}
 800711c:	4770      	bx	lr

0800711e <HAL_UARTEx_RxFifoFullCallback>:
 800711e:	4770      	bx	lr

08007120 <HAL_UARTEx_TxFifoEmptyCallback>:
 8007120:	4770      	bx	lr

08007122 <HAL_UARTEx_DisableFifoMode>:
	__HAL_LOCK(huart);
 8007122:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007126:	2b01      	cmp	r3, #1
 8007128:	d014      	beq.n	8007154 <HAL_UARTEx_DisableFifoMode+0x32>
	tmpcr1 = READ_REG(huart->Instance->CR1);
 800712a:	6802      	ldr	r2, [r0, #0]
	huart->gState = HAL_UART_STATE_BUSY;
 800712c:	2324      	movs	r3, #36	; 0x24
 800712e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tmpcr1 = READ_REG(huart->Instance->CR1);
 8007132:	6811      	ldr	r1, [r2, #0]
	__HAL_UART_DISABLE(huart);
 8007134:	6813      	ldr	r3, [r2, #0]
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800713c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
	huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007140:	2300      	movs	r3, #0
 8007142:	6643      	str	r3, [r0, #100]	; 0x64
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007144:	6011      	str	r1, [r2, #0]
	huart->gState = HAL_UART_STATE_READY;
 8007146:	2220      	movs	r2, #32
 8007148:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	__HAL_UNLOCK(huart);
 800714c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
	return HAL_OK;
 8007150:	4618      	mov	r0, r3
 8007152:	4770      	bx	lr
	__HAL_LOCK(huart);
 8007154:	2002      	movs	r0, #2
}
 8007156:	4770      	bx	lr

08007158 <HAL_UARTEx_SetTxFifoThreshold>:
		uint32_t Threshold) {
 8007158:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(huart);
 800715a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800715e:	2b01      	cmp	r3, #1
		uint32_t Threshold) {
 8007160:	4604      	mov	r4, r0
	__HAL_LOCK(huart);
 8007162:	d01b      	beq.n	800719c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8007164:	2301      	movs	r3, #1
 8007166:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
	huart->gState = HAL_UART_STATE_BUSY;
 800716a:	2324      	movs	r3, #36	; 0x24
 800716c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tmpcr1 = READ_REG(huart->Instance->CR1);
 8007170:	6803      	ldr	r3, [r0, #0]
 8007172:	681d      	ldr	r5, [r3, #0]
	__HAL_UART_DISABLE(huart);
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	601a      	str	r2, [r3, #0]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8007182:	4311      	orrs	r1, r2
 8007184:	6099      	str	r1, [r3, #8]
	UARTEx_SetNbDataToProcess(huart);
 8007186:	f7ff ffa7 	bl	80070d8 <UARTEx_SetNbDataToProcess>
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 800718a:	6803      	ldr	r3, [r0, #0]
 800718c:	601d      	str	r5, [r3, #0]
	huart->gState = HAL_UART_STATE_READY;
 800718e:	2320      	movs	r3, #32
 8007190:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	__HAL_UNLOCK(huart);
 8007194:	2000      	movs	r0, #0
 8007196:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800719a:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_LOCK(huart);
 800719c:	2002      	movs	r0, #2
 800719e:	e7fc      	b.n	800719a <HAL_UARTEx_SetTxFifoThreshold+0x42>

080071a0 <HAL_UARTEx_SetRxFifoThreshold>:
		uint32_t Threshold) {
 80071a0:	b538      	push	{r3, r4, r5, lr}
	__HAL_LOCK(huart);
 80071a2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80071a6:	2b01      	cmp	r3, #1
		uint32_t Threshold) {
 80071a8:	4604      	mov	r4, r0
	__HAL_LOCK(huart);
 80071aa:	d01b      	beq.n	80071e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80071ac:	2301      	movs	r3, #1
 80071ae:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
	huart->gState = HAL_UART_STATE_BUSY;
 80071b2:	2324      	movs	r3, #36	; 0x24
 80071b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b8:	6803      	ldr	r3, [r0, #0]
 80071ba:	681d      	ldr	r5, [r3, #0]
	__HAL_UART_DISABLE(huart);
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 80071ca:	4311      	orrs	r1, r2
 80071cc:	6099      	str	r1, [r3, #8]
	UARTEx_SetNbDataToProcess(huart);
 80071ce:	f7ff ff83 	bl	80070d8 <UARTEx_SetNbDataToProcess>
	WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d2:	6803      	ldr	r3, [r0, #0]
 80071d4:	601d      	str	r5, [r3, #0]
	huart->gState = HAL_UART_STATE_READY;
 80071d6:	2320      	movs	r3, #32
 80071d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	__HAL_UNLOCK(huart);
 80071dc:	2000      	movs	r0, #0
 80071de:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_LOCK(huart);
 80071e4:	2002      	movs	r0, #2
 80071e6:	e7fc      	b.n	80071e2 <HAL_UARTEx_SetRxFifoThreshold+0x42>

080071e8 <msgSentCallback>:
}

static void msgSentCallback(IPC_Handle_t *ipcHandle) {
	UNUSED(ipcHandle);
	/* Warning ! this function is called under IT */
	at_context.dataSent = AT_TRUE;
 80071e8:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <msgSentCallback+0x10>)
 80071ea:	2201      	movs	r2, #1
	(void) rtosalSemaphoreRelease(at_context.s_SendConfirm_SemaphoreId);
 80071ec:	f8d3 0698 	ldr.w	r0, [r3, #1688]	; 0x698
	at_context.dataSent = AT_TRUE;
 80071f0:	731a      	strb	r2, [r3, #12]
	(void) rtosalSemaphoreRelease(at_context.s_SendConfirm_SemaphoreId);
 80071f2:	f010 bde1 	b.w	8017db8 <rtosalSemaphoreRelease>
 80071f6:	bf00      	nop
 80071f8:	200017f4 	.word	0x200017f4

080071fc <ATCoreTaskBody>:
	}

	return (retval);
}

static void ATCoreTaskBody(void *argument) {
 80071fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	UNUSED(argument);

	at_status_t retUrc;
	at_action_rsp_t action;
	rtosalStatus status;
	uint32_t msg = 0;
 8007200:	2300      	movs	r3, #0

	static at_buf_t urc_buf[ATCMD_MAX_BUF_SIZE]; /* buffer size not optimized yet */

	TRACE_DBG("<start ATCore TASK>")
 8007202:	49a7      	ldr	r1, [pc, #668]	; (80074a0 <ATCoreTaskBody+0x2a4>)
 8007204:	48a7      	ldr	r0, [pc, #668]	; (80074a4 <ATCoreTaskBody+0x2a8>)
	uint32_t msg = 0;
 8007206:	9301      	str	r3, [sp, #4]
	TRACE_DBG("<start ATCore TASK>")
 8007208:	f015 fec6 	bl	801cf98 <strcpy>
 800720c:	48a5      	ldr	r0, [pc, #660]	; (80074a4 <ATCoreTaskBody+0x2a8>)

	/* Infinite loop */
	for (;;) {
		/* waiting IPC message received event (message) */
		status = rtosalMessageQueueGet(q_msg_IPC_received_Id, (uint32_t*) &msg,
 800720e:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80074f4 <ATCoreTaskBody+0x2f8>
			} else if (msg == (SIG_INTERNAL_EVENT_MODEM)) {
				/* An internal event has been received (ie not coming from IPC: could be an interrupt from modem,...)
				 * Do not call IPC_receive in this case
				 */
				TRACE_DBG("!!! an internal event has been received !!!")
				if (register_URC_callback != NULL) {
 8007212:	4fa5      	ldr	r7, [pc, #660]	; (80074a8 <ATCoreTaskBody+0x2ac>)
	TRACE_DBG("<start ATCore TASK>")
 8007214:	f010 fe8e 	bl	8017f34 <crs_strlen>
 8007218:	4aa2      	ldr	r2, [pc, #648]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800721a:	b283      	uxth	r3, r0
 800721c:	2102      	movs	r1, #2
 800721e:	2001      	movs	r0, #1
 8007220:	f010 fec6 	bl	8017fb0 <traceIF_itmPrint>
 8007224:	489f      	ldr	r0, [pc, #636]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007226:	f010 fe85 	bl	8017f34 <crs_strlen>
 800722a:	4a9e      	ldr	r2, [pc, #632]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800722c:	b283      	uxth	r3, r0
 800722e:	2102      	movs	r1, #2
 8007230:	2001      	movs	r0, #1
 8007232:	f011 f8e3 	bl	80183fc <traceIF_uartPrint>
		status = rtosalMessageQueueGet(q_msg_IPC_received_Id, (uint32_t*) &msg,
 8007236:	f8d8 0000 	ldr.w	r0, [r8]
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	a901      	add	r1, sp, #4
 8007240:	f010 fdd6 	bl	8017df0 <rtosalMessageQueueGet>
		if ((status == osEventMessage) || (status == osOK)) {
 8007244:	f030 0310 	bics.w	r3, r0, #16
 8007248:	d1f5      	bne.n	8007236 <ATCoreTaskBody+0x3a>
			if (msg == (SIG_IPC_MSG)) {
 800724a:	9c01      	ldr	r4, [sp, #4]
 800724c:	2c01      	cmp	r4, #1
 800724e:	f040 8153 	bne.w	80074f8 <ATCoreTaskBody+0x2fc>
				if (IPC_receive(&ipcHandleTab, &msgFromIPC) == IPC_ERROR) {
 8007252:	4996      	ldr	r1, [pc, #600]	; (80074ac <ATCoreTaskBody+0x2b0>)
 8007254:	4896      	ldr	r0, [pc, #600]	; (80074b0 <ATCoreTaskBody+0x2b4>)
 8007256:	f010 f946 	bl	80174e6 <IPC_receive>
 800725a:	2801      	cmp	r0, #1
 800725c:	4605      	mov	r5, r0
 800725e:	d133      	bne.n	80072c8 <ATCoreTaskBody+0xcc>
					TRACE_DBG("IPC receive error")
 8007260:	4994      	ldr	r1, [pc, #592]	; (80074b4 <ATCoreTaskBody+0x2b8>)
 8007262:	4890      	ldr	r0, [pc, #576]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007264:	f015 fe98 	bl	801cf98 <strcpy>
 8007268:	488e      	ldr	r0, [pc, #568]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800726a:	f010 fe63 	bl	8017f34 <crs_strlen>
 800726e:	4a8d      	ldr	r2, [pc, #564]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007270:	b283      	uxth	r3, r0
 8007272:	2102      	movs	r1, #2
 8007274:	4628      	mov	r0, r5
 8007276:	f010 fe9b 	bl	8017fb0 <traceIF_itmPrint>
 800727a:	488a      	ldr	r0, [pc, #552]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800727c:	f010 fe5a 	bl	8017f34 <crs_strlen>
 8007280:	2102      	movs	r1, #2
 8007282:	b283      	uxth	r3, r0
 8007284:	4a87      	ldr	r2, [pc, #540]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007286:	4628      	mov	r0, r5
 8007288:	f011 f8b8 	bl	80183fc <traceIF_uartPrint>
					ATParser_abort_request(&at_context);
 800728c:	488a      	ldr	r0, [pc, #552]	; (80074b8 <ATCoreTaskBody+0x2bc>)
 800728e:	f007 f9da 	bl	800e646 <ATParser_abort_request>
					TRACE_DBG("**** Sema Released on error 1 *****")
 8007292:	498a      	ldr	r1, [pc, #552]	; (80074bc <ATCoreTaskBody+0x2c0>)
					TRACE_DBG("**** Sema Released on error 2 *****")
 8007294:	4883      	ldr	r0, [pc, #524]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007296:	f015 fe7f 	bl	801cf98 <strcpy>
 800729a:	4882      	ldr	r0, [pc, #520]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800729c:	f010 fe4a 	bl	8017f34 <crs_strlen>
 80072a0:	4a80      	ldr	r2, [pc, #512]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80072a2:	b283      	uxth	r3, r0
 80072a4:	2102      	movs	r1, #2
 80072a6:	2001      	movs	r0, #1
 80072a8:	f010 fe82 	bl	8017fb0 <traceIF_itmPrint>
 80072ac:	487d      	ldr	r0, [pc, #500]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80072ae:	f010 fe41 	bl	8017f34 <crs_strlen>
 80072b2:	4a7c      	ldr	r2, [pc, #496]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80072b4:	b283      	uxth	r3, r0
 80072b6:	2102      	movs	r1, #2
 80072b8:	2001      	movs	r0, #1
 80072ba:	f011 f89f 	bl	80183fc <traceIF_uartPrint>
					(void) rtosalSemaphoreRelease(s_WaitAnswer_SemaphoreId);
 80072be:	4b80      	ldr	r3, [pc, #512]	; (80074c0 <ATCoreTaskBody+0x2c4>)
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f010 fd79 	bl	8017db8 <rtosalSemaphoreRelease>
					continue;
 80072c6:	e7b6      	b.n	8007236 <ATCoreTaskBody+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 80072c8:	b672      	cpsid	i
				MsgReceived--;
 80072ca:	4a7e      	ldr	r2, [pc, #504]	; (80074c4 <ATCoreTaskBody+0x2c8>)
 80072cc:	7813      	ldrb	r3, [r2, #0]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80072d4:	b662      	cpsie	i
				(void) rtosalMutexAcquire(ATCore_ParsingMutexHandle,
 80072d6:	4d7c      	ldr	r5, [pc, #496]	; (80074c8 <ATCoreTaskBody+0x2cc>)
				action = ATParser_parse_rsp(&at_context, &msgFromIPC);
 80072d8:	4e77      	ldr	r6, [pc, #476]	; (80074b8 <ATCoreTaskBody+0x2bc>)
				(void) rtosalMutexAcquire(ATCore_ParsingMutexHandle,
 80072da:	6828      	ldr	r0, [r5, #0]
 80072dc:	f04f 31ff 	mov.w	r1, #4294967295
 80072e0:	f010 fd75 	bl	8017dce <rtosalMutexAcquire>
				action = ATParser_parse_rsp(&at_context, &msgFromIPC);
 80072e4:	4971      	ldr	r1, [pc, #452]	; (80074ac <ATCoreTaskBody+0x2b0>)
 80072e6:	4630      	mov	r0, r6
 80072e8:	f007 f8e6 	bl	800e4b8 <ATParser_parse_rsp>
 80072ec:	4681      	mov	r9, r0
				(void) rtosalMutexRelease(ATCore_ParsingMutexHandle);
 80072ee:	6828      	ldr	r0, [r5, #0]
 80072f0:	f010 fd6f 	bl	8017dd2 <rtosalMutexRelease>
	TRACE_DBG("RAW ACTION (analyze_action_result) = 0x%x", val)
 80072f4:	4975      	ldr	r1, [pc, #468]	; (80074cc <ATCoreTaskBody+0x2d0>)
 80072f6:	486b      	ldr	r0, [pc, #428]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80072f8:	464a      	mov	r2, r9
 80072fa:	f015 fddd 	bl	801ceb8 <sprintf>
 80072fe:	4869      	ldr	r0, [pc, #420]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007300:	f010 fe18 	bl	8017f34 <crs_strlen>
 8007304:	4a67      	ldr	r2, [pc, #412]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007306:	b283      	uxth	r3, r0
 8007308:	2102      	movs	r1, #2
 800730a:	4620      	mov	r0, r4
 800730c:	f010 fe50 	bl	8017fb0 <traceIF_itmPrint>
 8007310:	4864      	ldr	r0, [pc, #400]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007312:	f010 fe0f 	bl	8017f34 <crs_strlen>
 8007316:	f3c9 3acf 	ubfx	sl, r9, #15, #16
 800731a:	b283      	uxth	r3, r0
 800731c:	4a61      	ldr	r2, [pc, #388]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800731e:	2102      	movs	r1, #2
 8007320:	4620      	mov	r0, r4
	action = (at_action_rsp_t) (val
 8007322:	f3c9 050e 	ubfx	r5, r9, #0, #15
	TRACE_DBG("RAW ACTION (analyze_action_result) = 0x%x", val)
 8007326:	f011 f869 	bl	80183fc <traceIF_uartPrint>
	TRACE_DBG("CLEANED ACTION=%d (data mode=%d)", action, data_mode)
 800732a:	4969      	ldr	r1, [pc, #420]	; (80074d0 <ATCoreTaskBody+0x2d4>)
 800732c:	485d      	ldr	r0, [pc, #372]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800732e:	4653      	mov	r3, sl
 8007330:	462a      	mov	r2, r5
 8007332:	f015 fdc1 	bl	801ceb8 <sprintf>
 8007336:	485b      	ldr	r0, [pc, #364]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007338:	f010 fdfc 	bl	8017f34 <crs_strlen>
 800733c:	4a59      	ldr	r2, [pc, #356]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800733e:	b283      	uxth	r3, r0
 8007340:	2102      	movs	r1, #2
 8007342:	4620      	mov	r0, r4
 8007344:	f010 fe34 	bl	8017fb0 <traceIF_itmPrint>
 8007348:	4856      	ldr	r0, [pc, #344]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800734a:	f010 fdf3 	bl	8017f34 <crs_strlen>
 800734e:	4a55      	ldr	r2, [pc, #340]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007350:	b283      	uxth	r3, r0
 8007352:	2102      	movs	r1, #2
 8007354:	4620      	mov	r0, r4
 8007356:	f011 f851 	bl	80183fc <traceIF_uartPrint>
	if (data_mode == AT_TRUE) {
 800735a:	7ab3      	ldrb	r3, [r6, #10]
 800735c:	f1ba 0f00 	cmp.w	sl, #0
 8007360:	d076      	beq.n	8007450 <ATCoreTaskBody+0x254>
		if (at_context.in_data_mode == AT_FALSE) {
 8007362:	2b00      	cmp	r3, #0
 8007364:	d134      	bne.n	80073d0 <ATCoreTaskBody+0x1d4>
			IPC_Handle_t *h_other_ipc = IPC_get_other_channel(
 8007366:	6870      	ldr	r0, [r6, #4]
 8007368:	f010 f8b5 	bl	80174d6 <IPC_get_other_channel>
			if (h_other_ipc != NULL) {
 800736c:	b1c8      	cbz	r0, 80073a2 <ATCoreTaskBody+0x1a6>
				(void) IPC_select(h_other_ipc);
 800736e:	f010 f8ad 	bl	80174cc <IPC_select>
				TRACE_INFO("<<< DATA MODE SELECTED >>>")
 8007372:	4958      	ldr	r1, [pc, #352]	; (80074d4 <ATCoreTaskBody+0x2d8>)
				at_context.in_data_mode = AT_TRUE;
 8007374:	72b4      	strb	r4, [r6, #10]
			TRACE_INFO("<<< COMMAND MODE SELECTED >>>")
 8007376:	484b      	ldr	r0, [pc, #300]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007378:	f015 fe0e 	bl	801cf98 <strcpy>
 800737c:	4849      	ldr	r0, [pc, #292]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800737e:	f010 fdd9 	bl	8017f34 <crs_strlen>
 8007382:	4621      	mov	r1, r4
 8007384:	b283      	uxth	r3, r0
 8007386:	4a47      	ldr	r2, [pc, #284]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007388:	4620      	mov	r0, r4
 800738a:	f010 fe11 	bl	8017fb0 <traceIF_itmPrint>
 800738e:	4845      	ldr	r0, [pc, #276]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007390:	f010 fdd0 	bl	8017f34 <crs_strlen>
 8007394:	4a43      	ldr	r2, [pc, #268]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007396:	b283      	uxth	r3, r0
 8007398:	4621      	mov	r1, r4
 800739a:	4620      	mov	r0, r4
 800739c:	f011 f82e 	bl	80183fc <traceIF_uartPrint>
 80073a0:	e016      	b.n	80073d0 <ATCoreTaskBody+0x1d4>
				TRACE_ERR("<<< ERROR WHEN SELECTING DATA MODE >>>")
 80073a2:	494d      	ldr	r1, [pc, #308]	; (80074d8 <ATCoreTaskBody+0x2dc>)
 80073a4:	483f      	ldr	r0, [pc, #252]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073a6:	f015 fdf7 	bl	801cf98 <strcpy>
 80073aa:	483e      	ldr	r0, [pc, #248]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073ac:	f010 fdc2 	bl	8017f34 <crs_strlen>
 80073b0:	4a3c      	ldr	r2, [pc, #240]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073b2:	b283      	uxth	r3, r0
 80073b4:	2110      	movs	r1, #16
 80073b6:	4620      	mov	r0, r4
 80073b8:	f010 fdfa 	bl	8017fb0 <traceIF_itmPrint>
 80073bc:	4839      	ldr	r0, [pc, #228]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073be:	f010 fdb9 	bl	8017f34 <crs_strlen>
 80073c2:	4a38      	ldr	r2, [pc, #224]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073c4:	b283      	uxth	r3, r0
 80073c6:	2110      	movs	r1, #16
 80073c8:	4620      	mov	r0, r4
 80073ca:	f011 f817 	bl	80183fc <traceIF_uartPrint>
				action = ATACTION_RSP_ERROR;
 80073ce:	2504      	movs	r5, #4
						|| (action == ATACTION_RSP_FRC_CONTINUE)
 80073d0:	1e6c      	subs	r4, r5, #1
 80073d2:	b2a4      	uxth	r4, r4
				if ((action == ATACTION_RSP_FRC_END)
 80073d4:	2c01      	cmp	r4, #1
 80073d6:	d902      	bls.n	80073de <ATCoreTaskBody+0x1e2>
						|| (action == ATACTION_RSP_ERROR)) {
 80073d8:	2d04      	cmp	r5, #4
 80073da:	f040 80c1 	bne.w	8007560 <ATCoreTaskBody+0x364>
					at_context.action_flags |= action;
 80073de:	f8b6 3690 	ldrh.w	r3, [r6, #1680]	; 0x690
					TRACE_DBG("add action 0x%x (flags=0x%x)", action,
 80073e2:	493e      	ldr	r1, [pc, #248]	; (80074dc <ATCoreTaskBody+0x2e0>)
 80073e4:	482f      	ldr	r0, [pc, #188]	; (80074a4 <ATCoreTaskBody+0x2a8>)
					at_context.action_flags |= action;
 80073e6:	432b      	orrs	r3, r5
					TRACE_DBG("add action 0x%x (flags=0x%x)", action,
 80073e8:	462a      	mov	r2, r5
					at_context.action_flags |= action;
 80073ea:	f8a6 3690 	strh.w	r3, [r6, #1680]	; 0x690
					TRACE_DBG("add action 0x%x (flags=0x%x)", action,
 80073ee:	f015 fd63 	bl	801ceb8 <sprintf>
 80073f2:	482c      	ldr	r0, [pc, #176]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073f4:	f010 fd9e 	bl	8017f34 <crs_strlen>
 80073f8:	4a2a      	ldr	r2, [pc, #168]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 80073fa:	b283      	uxth	r3, r0
 80073fc:	2102      	movs	r1, #2
 80073fe:	2001      	movs	r0, #1
 8007400:	f010 fdd6 	bl	8017fb0 <traceIF_itmPrint>
 8007404:	4827      	ldr	r0, [pc, #156]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007406:	f010 fd95 	bl	8017f34 <crs_strlen>
 800740a:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800740c:	b283      	uxth	r3, r0
 800740e:	2102      	movs	r1, #2
 8007410:	2001      	movs	r0, #1
 8007412:	f010 fff3 	bl	80183fc <traceIF_uartPrint>
				if (action == ATACTION_RSP_ERROR) {
 8007416:	2d04      	cmp	r5, #4
 8007418:	d120      	bne.n	800745c <ATCoreTaskBody+0x260>
					TRACE_ERR("AT_sendcmd error")
 800741a:	4931      	ldr	r1, [pc, #196]	; (80074e0 <ATCoreTaskBody+0x2e4>)
 800741c:	4821      	ldr	r0, [pc, #132]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800741e:	f015 fdbb 	bl	801cf98 <strcpy>
 8007422:	4820      	ldr	r0, [pc, #128]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007424:	f010 fd86 	bl	8017f34 <crs_strlen>
 8007428:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 800742a:	b283      	uxth	r3, r0
 800742c:	2110      	movs	r1, #16
 800742e:	2001      	movs	r0, #1
 8007430:	f010 fdbe 	bl	8017fb0 <traceIF_itmPrint>
 8007434:	481b      	ldr	r0, [pc, #108]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007436:	f010 fd7d 	bl	8017f34 <crs_strlen>
 800743a:	2110      	movs	r1, #16
 800743c:	b283      	uxth	r3, r0
 800743e:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <ATCoreTaskBody+0x2a8>)
 8007440:	2001      	movs	r0, #1
 8007442:	f010 ffdb 	bl	80183fc <traceIF_uartPrint>
					ATParser_abort_request(&at_context);
 8007446:	481c      	ldr	r0, [pc, #112]	; (80074b8 <ATCoreTaskBody+0x2bc>)
 8007448:	f007 f8fd 	bl	800e646 <ATParser_abort_request>
					TRACE_DBG("**** Sema Released on error 2 *****")
 800744c:	4925      	ldr	r1, [pc, #148]	; (80074e4 <ATCoreTaskBody+0x2e8>)
 800744e:	e721      	b.n	8007294 <ATCoreTaskBody+0x98>
		if (at_context.in_data_mode == AT_TRUE) {
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0bd      	beq.n	80073d0 <ATCoreTaskBody+0x1d4>
			TRACE_INFO("<<< COMMAND MODE SELECTED >>>")
 8007454:	4924      	ldr	r1, [pc, #144]	; (80074e8 <ATCoreTaskBody+0x2ec>)
			at_context.in_data_mode = AT_FALSE;
 8007456:	f886 a00a 	strb.w	sl, [r6, #10]
			TRACE_INFO("<<< COMMAND MODE SELECTED >>>")
 800745a:	e78c      	b.n	8007376 <ATCoreTaskBody+0x17a>
				if (action == ATACTION_RSP_URC_FORWARDED) {
 800745c:	2d40      	cmp	r5, #64	; 0x40
 800745e:	d119      	bne.n	8007494 <ATCoreTaskBody+0x298>
					if (register_URC_callback != NULL) {
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f43f aee7 	beq.w	8007236 <ATCoreTaskBody+0x3a>
							(void) memset((void*) urc_buf, 0,
 8007468:	4d20      	ldr	r5, [pc, #128]	; (80074ec <ATCoreTaskBody+0x2f0>)
							retUrc = ATParser_get_urc(&at_context, urc_buf);
 800746a:	4e13      	ldr	r6, [pc, #76]	; (80074b8 <ATCoreTaskBody+0x2bc>)
							(void) memset((void*) urc_buf, 0,
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	2100      	movs	r1, #0
 8007470:	4628      	mov	r0, r5
 8007472:	f015 fcf1 	bl	801ce58 <memset>
							retUrc = ATParser_get_urc(&at_context, urc_buf);
 8007476:	4629      	mov	r1, r5
 8007478:	4630      	mov	r0, r6
 800747a:	f007 f8e0 	bl	800e63e <ATParser_get_urc>
							if ((retUrc == ATSTATUS_OK)
 800747e:	4604      	mov	r4, r0
 8007480:	b110      	cbz	r0, 8007488 <ATCoreTaskBody+0x28c>
									|| (retUrc == ATSTATUS_OK_PENDING_URC)) {
 8007482:	2803      	cmp	r0, #3
 8007484:	f47f aed7 	bne.w	8007236 <ATCoreTaskBody+0x3a>
								(*register_URC_callback)(urc_buf);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	4628      	mov	r0, r5
 800748c:	4798      	blx	r3
						} while (retUrc == ATSTATUS_OK_PENDING_URC);
 800748e:	2c03      	cmp	r4, #3
 8007490:	d0ec      	beq.n	800746c <ATCoreTaskBody+0x270>
 8007492:	e6d0      	b.n	8007236 <ATCoreTaskBody+0x3a>
				} else if ((action == ATACTION_RSP_FRC_CONTINUE)
 8007494:	2c01      	cmp	r4, #1
 8007496:	f63f aece 	bhi.w	8007236 <ATCoreTaskBody+0x3a>
					TRACE_DBG("**** Sema released *****")
 800749a:	4915      	ldr	r1, [pc, #84]	; (80074f0 <ATCoreTaskBody+0x2f4>)
 800749c:	e6fa      	b.n	8007294 <ATCoreTaskBody+0x98>
 800749e:	bf00      	nop
 80074a0:	08023638 	.word	0x08023638
 80074a4:	20008ef8 	.word	0x20008ef8
 80074a8:	200034a8 	.word	0x200034a8
 80074ac:	20002cd0 	.word	0x20002cd0
 80074b0:	200024d4 	.word	0x200024d4
 80074b4:	08023655 	.word	0x08023655
 80074b8:	200017f4 	.word	0x200017f4
 80074bc:	08023670 	.word	0x08023670
 80074c0:	200034ac 	.word	0x200034ac
 80074c4:	200017f1 	.word	0x200017f1
 80074c8:	200017ec 	.word	0x200017ec
 80074cc:	0802369d 	.word	0x0802369d
 80074d0:	080236d0 	.word	0x080236d0
 80074d4:	080236fa 	.word	0x080236fa
 80074d8:	0802371e 	.word	0x0802371e
 80074dc:	0802377b 	.word	0x0802377b
 80074e0:	080237a1 	.word	0x080237a1
 80074e4:	080237c1 	.word	0x080237c1
 80074e8:	08023754 	.word	0x08023754
 80074ec:	200034b0 	.word	0x200034b0
 80074f0:	080237ee 	.word	0x080237ee
 80074f4:	200034a4 	.word	0x200034a4
			} else if (msg == (SIG_INTERNAL_EVENT_MODEM)) {
 80074f8:	2c02      	cmp	r4, #2
 80074fa:	d12f      	bne.n	800755c <ATCoreTaskBody+0x360>
				TRACE_DBG("!!! an internal event has been received !!!")
 80074fc:	491a      	ldr	r1, [pc, #104]	; (8007568 <ATCoreTaskBody+0x36c>)
 80074fe:	481b      	ldr	r0, [pc, #108]	; (800756c <ATCoreTaskBody+0x370>)
 8007500:	f015 fd4a 	bl	801cf98 <strcpy>
 8007504:	4819      	ldr	r0, [pc, #100]	; (800756c <ATCoreTaskBody+0x370>)
 8007506:	f010 fd15 	bl	8017f34 <crs_strlen>
 800750a:	4a18      	ldr	r2, [pc, #96]	; (800756c <ATCoreTaskBody+0x370>)
 800750c:	b283      	uxth	r3, r0
 800750e:	4621      	mov	r1, r4
 8007510:	2001      	movs	r0, #1
 8007512:	f010 fd4d 	bl	8017fb0 <traceIF_itmPrint>
 8007516:	4815      	ldr	r0, [pc, #84]	; (800756c <ATCoreTaskBody+0x370>)
 8007518:	f010 fd0c 	bl	8017f34 <crs_strlen>
 800751c:	4a13      	ldr	r2, [pc, #76]	; (800756c <ATCoreTaskBody+0x370>)
 800751e:	b283      	uxth	r3, r0
 8007520:	4621      	mov	r1, r4
 8007522:	2001      	movs	r0, #1
 8007524:	f010 ff6a 	bl	80183fc <traceIF_uartPrint>
				if (register_URC_callback != NULL) {
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f43f ae83 	beq.w	8007236 <ATCoreTaskBody+0x3a>
					do {
						(void) memset((void*) urc_buf, 0, ATCMD_MAX_BUF_SIZE);
 8007530:	4d0f      	ldr	r5, [pc, #60]	; (8007570 <ATCoreTaskBody+0x374>)
						retUrc = ATParser_get_urc(&at_context, urc_buf);
 8007532:	4e10      	ldr	r6, [pc, #64]	; (8007574 <ATCoreTaskBody+0x378>)
						(void) memset((void*) urc_buf, 0, ATCMD_MAX_BUF_SIZE);
 8007534:	2280      	movs	r2, #128	; 0x80
 8007536:	2100      	movs	r1, #0
 8007538:	4628      	mov	r0, r5
 800753a:	f015 fc8d 	bl	801ce58 <memset>
						retUrc = ATParser_get_urc(&at_context, urc_buf);
 800753e:	4629      	mov	r1, r5
 8007540:	4630      	mov	r0, r6
 8007542:	f007 f87c 	bl	800e63e <ATParser_get_urc>
						if ((retUrc == ATSTATUS_OK)
 8007546:	4604      	mov	r4, r0
 8007548:	b110      	cbz	r0, 8007550 <ATCoreTaskBody+0x354>
								|| (retUrc == ATSTATUS_OK_PENDING_URC)) {
 800754a:	2803      	cmp	r0, #3
 800754c:	f47f ae73 	bne.w	8007236 <ATCoreTaskBody+0x3a>
							/* call the URC callback */
							(*register_URC_callback)(urc_buf);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4628      	mov	r0, r5
 8007554:	4798      	blx	r3
						}
					} while (retUrc == ATSTATUS_OK_PENDING_URC);
 8007556:	2c03      	cmp	r4, #3
 8007558:	d0ec      	beq.n	8007534 <ATCoreTaskBody+0x338>
 800755a:	e66c      	b.n	8007236 <ATCoreTaskBody+0x3a>
				}
			} else {
				/* should not happen */
				__NOP();
 800755c:	bf00      	nop
 800755e:	e66a      	b.n	8007236 <ATCoreTaskBody+0x3a>
				if (action == ATACTION_RSP_URC_FORWARDED) {
 8007560:	2d40      	cmp	r5, #64	; 0x40
 8007562:	f47f ae68 	bne.w	8007236 <ATCoreTaskBody+0x3a>
 8007566:	e77b      	b.n	8007460 <ATCoreTaskBody+0x264>
 8007568:	08023810 	.word	0x08023810
 800756c:	20008ef8 	.word	0x20008ef8
 8007570:	200034b0 	.word	0x200034b0
 8007574:	200017f4 	.word	0x200017f4

08007578 <msgReceivedCallback>:
static void msgReceivedCallback(IPC_Handle_t *ipcHandle) {
 8007578:	b510      	push	{r4, lr}
	MsgReceived++;
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <msgReceivedCallback+0x4c>)
 800757c:	7813      	ldrb	r3, [r2, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	b2db      	uxtb	r3, r3
 8007582:	7013      	strb	r3, [r2, #0]
	if (rtosalMessageQueuePut(q_msg_IPC_received_Id, (uint32_t) SIG_IPC_MSG,
 8007584:	4b10      	ldr	r3, [pc, #64]	; (80075c8 <msgReceivedCallback+0x50>)
 8007586:	2200      	movs	r2, #0
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	2101      	movs	r1, #1
 800758c:	f010 fc2e 	bl	8017dec <rtosalMessageQueuePut>
 8007590:	b1b8      	cbz	r0, 80075c2 <msgReceivedCallback+0x4a>
		TRACE_ERR("q_msg_IPC_received_Id error for SIG_IPC_MSG")
 8007592:	490e      	ldr	r1, [pc, #56]	; (80075cc <msgReceivedCallback+0x54>)
 8007594:	480e      	ldr	r0, [pc, #56]	; (80075d0 <msgReceivedCallback+0x58>)
 8007596:	f015 fcff 	bl	801cf98 <strcpy>
 800759a:	480d      	ldr	r0, [pc, #52]	; (80075d0 <msgReceivedCallback+0x58>)
 800759c:	f010 fcca 	bl	8017f34 <crs_strlen>
 80075a0:	4a0b      	ldr	r2, [pc, #44]	; (80075d0 <msgReceivedCallback+0x58>)
 80075a2:	b283      	uxth	r3, r0
 80075a4:	2110      	movs	r1, #16
 80075a6:	2001      	movs	r0, #1
 80075a8:	f010 fd02 	bl	8017fb0 <traceIF_itmPrint>
 80075ac:	4808      	ldr	r0, [pc, #32]	; (80075d0 <msgReceivedCallback+0x58>)
 80075ae:	f010 fcc1 	bl	8017f34 <crs_strlen>
}
 80075b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		TRACE_ERR("q_msg_IPC_received_Id error for SIG_IPC_MSG")
 80075b6:	b283      	uxth	r3, r0
 80075b8:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <msgReceivedCallback+0x58>)
 80075ba:	2110      	movs	r1, #16
 80075bc:	2001      	movs	r0, #1
 80075be:	f010 bf1d 	b.w	80183fc <traceIF_uartPrint>
}
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	200017f1 	.word	0x200017f1
 80075c8:	200034a4 	.word	0x200034a4
 80075cc:	08023845 	.word	0x08023845
 80075d0:	20008ef8 	.word	0x20008ef8

080075d4 <AT_init>:
at_status_t AT_init(void) {
 80075d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (AT_Core_initialized == 1U) {
 80075d6:	4e18      	ldr	r6, [pc, #96]	; (8007638 <AT_init+0x64>)
 80075d8:	7830      	ldrb	r0, [r6, #0]
 80075da:	2801      	cmp	r0, #1
 80075dc:	d107      	bne.n	80075ee <AT_init+0x1a>
		LOG_ERROR(1, ERROR_WARNING);
 80075de:	4601      	mov	r1, r0
 80075e0:	2202      	movs	r2, #2
 80075e2:	9001      	str	r0, [sp, #4]
 80075e4:	f00f feaa 	bl	801733c <ERROR_Handler>
		retval = ATSTATUS_ERROR;
 80075e8:	9801      	ldr	r0, [sp, #4]
}
 80075ea:	b002      	add	sp, #8
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
		MsgReceived = 0U;
 80075ee:	4b13      	ldr	r3, [pc, #76]	; (800763c <AT_init+0x68>)
		at_context.device_type = DEVTYPE_INVALID;
 80075f0:	4813      	ldr	r0, [pc, #76]	; (8007640 <AT_init+0x6c>)
		MsgReceived = 0U;
 80075f2:	2400      	movs	r4, #0
 80075f4:	701c      	strb	r4, [r3, #0]
		at_context.device_type = DEVTYPE_INVALID;
 80075f6:	2501      	movs	r5, #1
		register_URC_callback = NULL;
 80075f8:	4b12      	ldr	r3, [pc, #72]	; (8007644 <AT_init+0x70>)
		at_context.device_type = DEVTYPE_INVALID;
 80075fa:	7005      	strb	r5, [r0, #0]
		at_context.in_data_mode = AT_FALSE;
 80075fc:	8144      	strh	r4, [r0, #10]
		at_context.dataSent = AT_FALSE;
 80075fe:	7304      	strb	r4, [r0, #12]
		at_context.action_flags = ATACTION_RSP_NO_ACTION;
 8007600:	f8a0 4690 	strh.w	r4, [r0, #1680]	; 0x690
		at_context.p_rsp_buf = NULL;
 8007604:	f8c0 4694 	str.w	r4, [r0, #1684]	; 0x694
		at_context.s_SendConfirm_SemaphoreId = NULL;
 8007608:	f8c0 4698 	str.w	r4, [r0, #1688]	; 0x698
		(void) memset((void*) &at_context.parser, 0,
 800760c:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 8007610:	4621      	mov	r1, r4
 8007612:	3010      	adds	r0, #16
		register_URC_callback = NULL;
 8007614:	601c      	str	r4, [r3, #0]
		(void) memset((void*) &at_context.parser, 0,
 8007616:	f015 fc1f 	bl	801ce58 <memset>
		ATCore_ParsingMutexHandle = rtosalMutexNew(NULL);
 800761a:	4620      	mov	r0, r4
 800761c:	f010 fbce 	bl	8017dbc <rtosalMutexNew>
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <AT_init+0x74>)
 8007622:	6018      	str	r0, [r3, #0]
		if (ATCore_ParsingMutexHandle == NULL) {
 8007624:	b920      	cbnz	r0, 8007630 <AT_init+0x5c>
			ERROR_Handler(DBG_CHAN_ATCMD, 20, ERROR_FATAL);
 8007626:	2203      	movs	r2, #3
 8007628:	2114      	movs	r1, #20
 800762a:	4628      	mov	r0, r5
 800762c:	f00f fe86 	bl	801733c <ERROR_Handler>
		AT_Core_initialized = 1U;
 8007630:	2301      	movs	r3, #1
 8007632:	7033      	strb	r3, [r6, #0]
		retval = ATSTATUS_OK;
 8007634:	2000      	movs	r0, #0
 8007636:	e7d8      	b.n	80075ea <AT_init+0x16>
 8007638:	200017f0 	.word	0x200017f0
 800763c:	200017f1 	.word	0x200017f1
 8007640:	200017f4 	.word	0x200017f4
 8007644:	200034a8 	.word	0x200034a8
 8007648:	200017ec 	.word	0x200017ec

0800764c <AT_open>:
at_handle_t AT_open(sysctrl_info_t *p_device_infos, urc_callback_t urc_callback) {
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4604      	mov	r4, r0
	if (ATParser_initParsers(p_device_infos->type) != ATSTATUS_OK) {
 8007650:	7800      	ldrb	r0, [r0, #0]
at_handle_t AT_open(sysctrl_info_t *p_device_infos, urc_callback_t urc_callback) {
 8007652:	460e      	mov	r6, r1
	if (ATParser_initParsers(p_device_infos->type) != ATSTATUS_OK) {
 8007654:	f006 fddc 	bl	800e210 <ATParser_initParsers>
 8007658:	b110      	cbz	r0, 8007660 <AT_open+0x14>
				affectedHandle = AT_HANDLE_INVALID;
 800765a:	f04f 30ff 	mov.w	r0, #4294967295
 800765e:	e01e      	b.n	800769e <AT_open+0x52>
		at_context.ipc_handle = &ipcHandleTab;
 8007660:	4d1b      	ldr	r5, [pc, #108]	; (80076d0 <AT_open+0x84>)
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <AT_open+0x88>)
 8007664:	606b      	str	r3, [r5, #4]
		at_context.device_type = p_device_infos->type;
 8007666:	7823      	ldrb	r3, [r4, #0]
 8007668:	702b      	strb	r3, [r5, #0]
		at_context.ipc_device = p_device_infos->ipc_device;
 800766a:	7863      	ldrb	r3, [r4, #1]
 800766c:	722b      	strb	r3, [r5, #8]
		if (p_device_infos->ipc_interface == IPC_INTERFACE_UART) {
 800766e:	78a4      	ldrb	r4, [r4, #2]
 8007670:	2c01      	cmp	r4, #1
 8007672:	d1f2      	bne.n	800765a <AT_open+0xe>
			at_context.ipc_mode = IPC_MODE_UART_CHARACTER;
 8007674:	7268      	strb	r0, [r5, #9]
			at_context.in_data_mode = AT_FALSE;
 8007676:	8168      	strh	r0, [r5, #10]
			at_context.dataSent = AT_FALSE;
 8007678:	7328      	strb	r0, [r5, #12]
			at_context.s_SendConfirm_SemaphoreId = rtosalSemaphoreNew(
 800767a:	4621      	mov	r1, r4
 800767c:	4816      	ldr	r0, [pc, #88]	; (80076d8 <AT_open+0x8c>)
 800767e:	f010 fb90 	bl	8017da2 <rtosalSemaphoreNew>
 8007682:	f8c5 0698 	str.w	r0, [r5, #1688]	; 0x698
			if (at_context.s_SendConfirm_SemaphoreId != NULL) {
 8007686:	b158      	cbz	r0, 80076a0 <AT_open+0x54>
				(void) rtosalSemaphoreAcquire(
 8007688:	f241 3188 	movw	r1, #5000	; 0x1388
 800768c:	f010 fb92 	bl	8017db4 <rtosalSemaphoreAcquire>
				register_URC_callback = urc_callback;
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <AT_open+0x90>)
				ATParser_init(&at_context, &custom_checkEndOfMsgCallback);
 8007692:	4913      	ldr	r1, [pc, #76]	; (80076e0 <AT_open+0x94>)
				register_URC_callback = urc_callback;
 8007694:	601e      	str	r6, [r3, #0]
				ATParser_init(&at_context, &custom_checkEndOfMsgCallback);
 8007696:	4628      	mov	r0, r5
 8007698:	f006 fdbc 	bl	800e214 <ATParser_init>
		affectedHandle = AT_HANDLE_MODEM;
 800769c:	4620      	mov	r0, r4
}
 800769e:	bd70      	pop	{r4, r5, r6, pc}
				TRACE_ERR("SendSemaphoreId creation error for handle = %d",
 80076a0:	4622      	mov	r2, r4
 80076a2:	4910      	ldr	r1, [pc, #64]	; (80076e4 <AT_open+0x98>)
 80076a4:	4810      	ldr	r0, [pc, #64]	; (80076e8 <AT_open+0x9c>)
 80076a6:	f015 fc07 	bl	801ceb8 <sprintf>
 80076aa:	480f      	ldr	r0, [pc, #60]	; (80076e8 <AT_open+0x9c>)
 80076ac:	f010 fc42 	bl	8017f34 <crs_strlen>
 80076b0:	4a0d      	ldr	r2, [pc, #52]	; (80076e8 <AT_open+0x9c>)
 80076b2:	b283      	uxth	r3, r0
 80076b4:	2110      	movs	r1, #16
 80076b6:	4620      	mov	r0, r4
 80076b8:	f010 fc7a 	bl	8017fb0 <traceIF_itmPrint>
 80076bc:	480a      	ldr	r0, [pc, #40]	; (80076e8 <AT_open+0x9c>)
 80076be:	f010 fc39 	bl	8017f34 <crs_strlen>
 80076c2:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <AT_open+0x9c>)
 80076c4:	b283      	uxth	r3, r0
 80076c6:	2110      	movs	r1, #16
 80076c8:	4620      	mov	r0, r4
 80076ca:	f010 fe97 	bl	80183fc <traceIF_uartPrint>
 80076ce:	e7c4      	b.n	800765a <AT_open+0xe>
 80076d0:	200017f4 	.word	0x200017f4
 80076d4:	200024d4 	.word	0x200024d4
 80076d8:	08023880 	.word	0x08023880
 80076dc:	200034a8 	.word	0x200034a8
 80076e0:	200024d0 	.word	0x200024d0
 80076e4:	08023890 	.word	0x08023890
 80076e8:	20008ef8 	.word	0x20008ef8

080076ec <AT_open_channel>:
at_status_t AT_open_channel(at_handle_t athandle) {
 80076ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (athandle != AT_HANDLE_INVALID) {
 80076ee:	3001      	adds	r0, #1
 80076f0:	d031      	beq.n	8007756 <AT_open_channel+0x6a>
		if (IPC_open(at_context.ipc_handle, at_context.ipc_device,
 80076f2:	4a1a      	ldr	r2, [pc, #104]	; (800775c <AT_open_channel+0x70>)
		at_context.in_data_mode = AT_FALSE;
 80076f4:	4c1a      	ldr	r4, [pc, #104]	; (8007760 <AT_open_channel+0x74>)
		if (IPC_open(at_context.ipc_handle, at_context.ipc_device,
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	7a21      	ldrb	r1, [r4, #8]
 80076fa:	6860      	ldr	r0, [r4, #4]
		at_context.in_data_mode = AT_FALSE;
 80076fc:	2300      	movs	r3, #0
		if (IPC_open(at_context.ipc_handle, at_context.ipc_device,
 80076fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
		at_context.in_data_mode = AT_FALSE;
 8007702:	8163      	strh	r3, [r4, #10]
		at_context.dataSent = AT_FALSE;
 8007704:	7323      	strb	r3, [r4, #12]
		at_context.action_flags = ATACTION_RSP_NO_ACTION;
 8007706:	f8a4 3690 	strh.w	r3, [r4, #1680]	; 0x690
		if (IPC_open(at_context.ipc_handle, at_context.ipc_device,
 800770a:	4b16      	ldr	r3, [pc, #88]	; (8007764 <AT_open_channel+0x78>)
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	7a62      	ldrb	r2, [r4, #9]
 8007710:	4b15      	ldr	r3, [pc, #84]	; (8007768 <AT_open_channel+0x7c>)
 8007712:	f00f febb 	bl	801748c <IPC_open>
 8007716:	b9e0      	cbnz	r0, 8007752 <AT_open_channel+0x66>
			if (IPC_select(at_context.ipc_handle) == IPC_OK) {
 8007718:	6860      	ldr	r0, [r4, #4]
 800771a:	f00f fed7 	bl	80174cc <IPC_select>
 800771e:	b1b0      	cbz	r0, 800774e <AT_open_channel+0x62>
				TRACE_ERR("IPC selection error")
 8007720:	4912      	ldr	r1, [pc, #72]	; (800776c <AT_open_channel+0x80>)
		TRACE_ERR("IPC invalid handle")
 8007722:	4813      	ldr	r0, [pc, #76]	; (8007770 <AT_open_channel+0x84>)
 8007724:	f015 fc38 	bl	801cf98 <strcpy>
 8007728:	4811      	ldr	r0, [pc, #68]	; (8007770 <AT_open_channel+0x84>)
 800772a:	f010 fc03 	bl	8017f34 <crs_strlen>
 800772e:	4a10      	ldr	r2, [pc, #64]	; (8007770 <AT_open_channel+0x84>)
 8007730:	b283      	uxth	r3, r0
 8007732:	2110      	movs	r1, #16
 8007734:	2001      	movs	r0, #1
 8007736:	f010 fc3b 	bl	8017fb0 <traceIF_itmPrint>
 800773a:	480d      	ldr	r0, [pc, #52]	; (8007770 <AT_open_channel+0x84>)
 800773c:	f010 fbfa 	bl	8017f34 <crs_strlen>
 8007740:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <AT_open_channel+0x84>)
 8007742:	b283      	uxth	r3, r0
 8007744:	2110      	movs	r1, #16
 8007746:	2001      	movs	r0, #1
 8007748:	f010 fe58 	bl	80183fc <traceIF_uartPrint>
		retval = ATSTATUS_ERROR;
 800774c:	2001      	movs	r0, #1
}
 800774e:	b004      	add	sp, #16
 8007750:	bd10      	pop	{r4, pc}
			TRACE_ERR("IPC open error")
 8007752:	4908      	ldr	r1, [pc, #32]	; (8007774 <AT_open_channel+0x88>)
 8007754:	e7e5      	b.n	8007722 <AT_open_channel+0x36>
		TRACE_ERR("IPC invalid handle")
 8007756:	4908      	ldr	r1, [pc, #32]	; (8007778 <AT_open_channel+0x8c>)
 8007758:	e7e3      	b.n	8007722 <AT_open_channel+0x36>
 800775a:	bf00      	nop
 800775c:	200024d0 	.word	0x200024d0
 8007760:	200017f4 	.word	0x200017f4
 8007764:	080071e9 	.word	0x080071e9
 8007768:	08007579 	.word	0x08007579
 800776c:	080238ce 	.word	0x080238ce
 8007770:	20008ef8 	.word	0x20008ef8
 8007774:	080238f1 	.word	0x080238f1
 8007778:	0802390f 	.word	0x0802390f

0800777c <AT_close_channel>:
	if (athandle != AT_HANDLE_INVALID) {
 800777c:	3001      	adds	r0, #1
at_status_t AT_close_channel(at_handle_t athandle) {
 800777e:	b508      	push	{r3, lr}
	if (athandle != AT_HANDLE_INVALID) {
 8007780:	d01c      	beq.n	80077bc <AT_close_channel+0x40>
		if (IPC_close(at_context.ipc_handle) == IPC_OK) {
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <AT_close_channel+0x44>)
 8007784:	6858      	ldr	r0, [r3, #4]
 8007786:	f00f fe97 	bl	80174b8 <IPC_close>
 800778a:	b1b0      	cbz	r0, 80077ba <AT_close_channel+0x3e>
			TRACE_ERR("IPC close error")
 800778c:	490d      	ldr	r1, [pc, #52]	; (80077c4 <AT_close_channel+0x48>)
		TRACE_ERR("IPC invalid handle")
 800778e:	480e      	ldr	r0, [pc, #56]	; (80077c8 <AT_close_channel+0x4c>)
 8007790:	f015 fc02 	bl	801cf98 <strcpy>
 8007794:	480c      	ldr	r0, [pc, #48]	; (80077c8 <AT_close_channel+0x4c>)
 8007796:	f010 fbcd 	bl	8017f34 <crs_strlen>
 800779a:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <AT_close_channel+0x4c>)
 800779c:	b283      	uxth	r3, r0
 800779e:	2110      	movs	r1, #16
 80077a0:	2001      	movs	r0, #1
 80077a2:	f010 fc05 	bl	8017fb0 <traceIF_itmPrint>
 80077a6:	4808      	ldr	r0, [pc, #32]	; (80077c8 <AT_close_channel+0x4c>)
 80077a8:	f010 fbc4 	bl	8017f34 <crs_strlen>
 80077ac:	4a06      	ldr	r2, [pc, #24]	; (80077c8 <AT_close_channel+0x4c>)
 80077ae:	b283      	uxth	r3, r0
 80077b0:	2110      	movs	r1, #16
 80077b2:	2001      	movs	r0, #1
 80077b4:	f010 fe22 	bl	80183fc <traceIF_uartPrint>
		retval = ATSTATUS_ERROR;
 80077b8:	2001      	movs	r0, #1
}
 80077ba:	bd08      	pop	{r3, pc}
		TRACE_ERR("IPC invalid handle")
 80077bc:	4903      	ldr	r1, [pc, #12]	; (80077cc <AT_close_channel+0x50>)
 80077be:	e7e6      	b.n	800778e <AT_close_channel+0x12>
 80077c0:	200017f4 	.word	0x200017f4
 80077c4:	08023931 	.word	0x08023931
 80077c8:	20008ef8 	.word	0x20008ef8
 80077cc:	0802390f 	.word	0x0802390f

080077d0 <AT_sendcmd>:
		at_buf_t *p_cmd_in_buf, at_buf_t *p_rsp_buf) {
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (athandle == AT_HANDLE_INVALID) {
 80077d4:	3001      	adds	r0, #1
		at_buf_t *p_cmd_in_buf, at_buf_t *p_rsp_buf) {
 80077d6:	b085      	sub	sp, #20
 80077d8:	460f      	mov	r7, r1
 80077da:	4616      	mov	r6, r2
 80077dc:	4698      	mov	r8, r3
	if (athandle == AT_HANDLE_INVALID) {
 80077de:	d109      	bne.n	80077f4 <AT_sendcmd+0x24>
		LOG_ERROR(21, ERROR_WARNING);
 80077e0:	2202      	movs	r2, #2
 80077e2:	2115      	movs	r1, #21
 80077e4:	2001      	movs	r0, #1
 80077e6:	f00f fda9 	bl	801733c <ERROR_Handler>
		retval = ATSTATUS_ERROR;
 80077ea:	2401      	movs	r4, #1
}
 80077ec:	4620      	mov	r0, r4
 80077ee:	b005      	add	sp, #20
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (at_context.processing_cmd == 1U) {
 80077f4:	4d98      	ldr	r5, [pc, #608]	; (8007a58 <AT_sendcmd+0x288>)
 80077f6:	7aec      	ldrb	r4, [r5, #11]
 80077f8:	2c01      	cmp	r4, #1
 80077fa:	d11d      	bne.n	8007838 <AT_sendcmd+0x68>
			TRACE_ERR(
 80077fc:	4997      	ldr	r1, [pc, #604]	; (8007a5c <AT_sendcmd+0x28c>)
 80077fe:	4898      	ldr	r0, [pc, #608]	; (8007a60 <AT_sendcmd+0x290>)
 8007800:	f015 fbca 	bl	801cf98 <strcpy>
 8007804:	4896      	ldr	r0, [pc, #600]	; (8007a60 <AT_sendcmd+0x290>)
 8007806:	f010 fb95 	bl	8017f34 <crs_strlen>
 800780a:	4a95      	ldr	r2, [pc, #596]	; (8007a60 <AT_sendcmd+0x290>)
 800780c:	b283      	uxth	r3, r0
 800780e:	2110      	movs	r1, #16
 8007810:	4620      	mov	r0, r4
 8007812:	f010 fbcd 	bl	8017fb0 <traceIF_itmPrint>
 8007816:	4892      	ldr	r0, [pc, #584]	; (8007a60 <AT_sendcmd+0x290>)
 8007818:	f010 fb8c 	bl	8017f34 <crs_strlen>
 800781c:	4a90      	ldr	r2, [pc, #576]	; (8007a60 <AT_sendcmd+0x290>)
 800781e:	b283      	uxth	r3, r0
 8007820:	2110      	movs	r1, #16
 8007822:	4620      	mov	r0, r4
 8007824:	f010 fdea 	bl	80183fc <traceIF_uartPrint>
			LOG_ERROR(2, ERROR_WARNING);
 8007828:	2202      	movs	r2, #2
 800782a:	4611      	mov	r1, r2
 800782c:	4620      	mov	r0, r4
 800782e:	f00f fd85 	bl	801733c <ERROR_Handler>
		at_context.processing_cmd = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	72eb      	strb	r3, [r5, #11]
	return (retval);
 8007836:	e7d9      	b.n	80077ec <AT_sendcmd+0x1c>
		(void) memset((void*) p_rsp_buf, 0, ATCMD_MAX_BUF_SIZE);
 8007838:	4618      	mov	r0, r3
 800783a:	2280      	movs	r2, #128	; 0x80
 800783c:	2100      	movs	r1, #0
 800783e:	f015 fb0b 	bl	801ce58 <memset>
		if (at_context.in_data_mode == AT_TRUE) {
 8007842:	7aab      	ldrb	r3, [r5, #10]
		at_context.p_rsp_buf = p_rsp_buf;
 8007844:	f8c5 8694 	str.w	r8, [r5, #1684]	; 0x694
		at_context.processing_cmd = 1U;
 8007848:	2401      	movs	r4, #1
 800784a:	72ec      	strb	r4, [r5, #11]
		if (at_context.in_data_mode == AT_TRUE) {
 800784c:	2b00      	cmp	r3, #0
 800784e:	d063      	beq.n	8007918 <AT_sendcmd+0x148>
			if (msg_in_id == (at_msg_t) SID_CS_DATA_SUSPEND) {
 8007850:	2f7e      	cmp	r7, #126	; 0x7e
 8007852:	d118      	bne.n	8007886 <AT_sendcmd+0xb6>
				TRACE_DBG("<<< restore IPC COMMAND channel >>>")
 8007854:	4983      	ldr	r1, [pc, #524]	; (8007a64 <AT_sendcmd+0x294>)
 8007856:	4882      	ldr	r0, [pc, #520]	; (8007a60 <AT_sendcmd+0x290>)
 8007858:	f015 fb9e 	bl	801cf98 <strcpy>
 800785c:	4880      	ldr	r0, [pc, #512]	; (8007a60 <AT_sendcmd+0x290>)
 800785e:	f010 fb69 	bl	8017f34 <crs_strlen>
 8007862:	4a7f      	ldr	r2, [pc, #508]	; (8007a60 <AT_sendcmd+0x290>)
 8007864:	b283      	uxth	r3, r0
 8007866:	2102      	movs	r1, #2
 8007868:	4620      	mov	r0, r4
 800786a:	f010 fba1 	bl	8017fb0 <traceIF_itmPrint>
 800786e:	487c      	ldr	r0, [pc, #496]	; (8007a60 <AT_sendcmd+0x290>)
 8007870:	f010 fb60 	bl	8017f34 <crs_strlen>
 8007874:	4a7a      	ldr	r2, [pc, #488]	; (8007a60 <AT_sendcmd+0x290>)
 8007876:	b283      	uxth	r3, r0
 8007878:	2102      	movs	r1, #2
 800787a:	4620      	mov	r0, r4
 800787c:	f010 fdbe 	bl	80183fc <traceIF_uartPrint>
				(void) IPC_select(at_context.ipc_handle);
 8007880:	6868      	ldr	r0, [r5, #4]
 8007882:	f00f fe23 	bl	80174cc <IPC_select>
		ATParser_process_request(&at_context, msg_in_id, p_cmd_in_buf);
 8007886:	4632      	mov	r2, r6
 8007888:	4873      	ldr	r0, [pc, #460]	; (8007a58 <AT_sendcmd+0x288>)
		(void) memset((void*) &build_atcmd[0], 0,
 800788a:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8007a84 <AT_sendcmd+0x2b4>
	uint32_t at_cmd_timeout = 0U;
 800788e:	2600      	movs	r6, #0
		ATParser_process_request(&at_context, msg_in_id, p_cmd_in_buf);
 8007890:	4639      	mov	r1, r7
 8007892:	f006 fcd9 	bl	800e248 <ATParser_process_request>
	uint32_t at_cmd_timeout = 0U;
 8007896:	9603      	str	r6, [sp, #12]
	at_context.action_flags = ATACTION_RSP_NO_ACTION;
 8007898:	f8a5 6690 	strh.w	r6, [r5, #1680]	; 0x690
		(void) rtosalMutexAcquire(ATCore_ParsingMutexHandle,
 800789c:	4c72      	ldr	r4, [pc, #456]	; (8007a68 <AT_sendcmd+0x298>)
		(void) memset((void*) &build_atcmd[0], 0,
 800789e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078a2:	2100      	movs	r1, #0
 80078a4:	4658      	mov	r0, fp
 80078a6:	f015 fad7 	bl	801ce58 <memset>
		build_atcmd_size = 0U;
 80078aa:	f04f 0300 	mov.w	r3, #0
		(void) rtosalMutexAcquire(ATCore_ParsingMutexHandle,
 80078ae:	f04f 31ff 	mov.w	r1, #4294967295
 80078b2:	6820      	ldr	r0, [r4, #0]
		build_atcmd_size = 0U;
 80078b4:	f8ad 300a 	strh.w	r3, [sp, #10]
		(void) rtosalMutexAcquire(ATCore_ParsingMutexHandle,
 80078b8:	f010 fa89 	bl	8017dce <rtosalMutexAcquire>
		action_send = ATParser_get_ATcmd(&at_context,
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80078c4:	f10d 030a 	add.w	r3, sp, #10
 80078c8:	4659      	mov	r1, fp
 80078ca:	4863      	ldr	r0, [pc, #396]	; (8007a58 <AT_sendcmd+0x288>)
 80078cc:	f006 fcc8 	bl	800e260 <ATParser_get_ATcmd>
 80078d0:	4681      	mov	r9, r0
		(void) rtosalMutexRelease(ATCore_ParsingMutexHandle);
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	f010 fa7d 	bl	8017dd2 <rtosalMutexRelease>
		if ((action_send & ATACTION_SEND_ERROR) != 0U) {
 80078d8:	f019 0f04 	tst.w	r9, #4
 80078dc:	d03a      	beq.n	8007954 <AT_sendcmd+0x184>
			TRACE_DBG("AT_sendcmd error: get at command")
 80078de:	4963      	ldr	r1, [pc, #396]	; (8007a6c <AT_sendcmd+0x29c>)
 80078e0:	485f      	ldr	r0, [pc, #380]	; (8007a60 <AT_sendcmd+0x290>)
 80078e2:	f015 fb59 	bl	801cf98 <strcpy>
 80078e6:	485e      	ldr	r0, [pc, #376]	; (8007a60 <AT_sendcmd+0x290>)
 80078e8:	f010 fb24 	bl	8017f34 <crs_strlen>
 80078ec:	4a5c      	ldr	r2, [pc, #368]	; (8007a60 <AT_sendcmd+0x290>)
 80078ee:	b283      	uxth	r3, r0
 80078f0:	2102      	movs	r1, #2
 80078f2:	2001      	movs	r0, #1
 80078f4:	f010 fb5c 	bl	8017fb0 <traceIF_itmPrint>
 80078f8:	4859      	ldr	r0, [pc, #356]	; (8007a60 <AT_sendcmd+0x290>)
 80078fa:	f010 fb1b 	bl	8017f34 <crs_strlen>
 80078fe:	4a58      	ldr	r2, [pc, #352]	; (8007a60 <AT_sendcmd+0x290>)
 8007900:	b283      	uxth	r3, r0
 8007902:	2102      	movs	r1, #2
 8007904:	2001      	movs	r0, #1
 8007906:	f010 fd79 	bl	80183fc <traceIF_uartPrint>
			LOG_ERROR(7, ERROR_WARNING);
 800790a:	2202      	movs	r2, #2
 800790c:	2107      	movs	r1, #7
					LOG_ERROR(13, ERROR_WARNING);
 800790e:	2001      	movs	r0, #1
 8007910:	f00f fd14 	bl	801733c <ERROR_Handler>
 8007914:	2401      	movs	r4, #1
 8007916:	e149      	b.n	8007bac <AT_sendcmd+0x3dc>
		else if (msg_in_id == (at_msg_t) SID_CS_DATA_SUSPEND) {
 8007918:	2f7e      	cmp	r7, #126	; 0x7e
 800791a:	d1b4      	bne.n	8007886 <AT_sendcmd+0xb6>
			LOG_ERROR(3, ERROR_WARNING);
 800791c:	2202      	movs	r2, #2
 800791e:	4620      	mov	r0, r4
 8007920:	2103      	movs	r1, #3
 8007922:	f00f fd0b 	bl	801733c <ERROR_Handler>
			TRACE_ERR("DATA not active")
 8007926:	4952      	ldr	r1, [pc, #328]	; (8007a70 <AT_sendcmd+0x2a0>)
 8007928:	484d      	ldr	r0, [pc, #308]	; (8007a60 <AT_sendcmd+0x290>)
 800792a:	f015 fb35 	bl	801cf98 <strcpy>
 800792e:	484c      	ldr	r0, [pc, #304]	; (8007a60 <AT_sendcmd+0x290>)
 8007930:	f010 fb00 	bl	8017f34 <crs_strlen>
 8007934:	4a4a      	ldr	r2, [pc, #296]	; (8007a60 <AT_sendcmd+0x290>)
 8007936:	b283      	uxth	r3, r0
 8007938:	2110      	movs	r1, #16
 800793a:	4620      	mov	r0, r4
 800793c:	f010 fb38 	bl	8017fb0 <traceIF_itmPrint>
 8007940:	4847      	ldr	r0, [pc, #284]	; (8007a60 <AT_sendcmd+0x290>)
 8007942:	f010 faf7 	bl	8017f34 <crs_strlen>
 8007946:	4a46      	ldr	r2, [pc, #280]	; (8007a60 <AT_sendcmd+0x290>)
 8007948:	b283      	uxth	r3, r0
 800794a:	2110      	movs	r1, #16
 800794c:	4620      	mov	r0, r4
 800794e:	f010 fd55 	bl	80183fc <traceIF_uartPrint>
			goto exit_func;
 8007952:	e76e      	b.n	8007832 <AT_sendcmd+0x62>
			if (build_atcmd_size > 0U) {
 8007954:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007958:	2a00      	cmp	r2, #0
 800795a:	d060      	beq.n	8007a1e <AT_sendcmd+0x24e>
				if ((at_context.in_data_mode == AT_TRUE)
 800795c:	7aab      	ldrb	r3, [r5, #10]
 800795e:	b1d3      	cbz	r3, 8007996 <AT_sendcmd+0x1c6>
						&& (msg_in_id != (at_msg_t) SID_CS_DATA_SUSPEND)) {
 8007960:	2f7e      	cmp	r7, #126	; 0x7e
 8007962:	d018      	beq.n	8007996 <AT_sendcmd+0x1c6>
					TRACE_ERR("DATA ongoing, can not send a command")
 8007964:	4943      	ldr	r1, [pc, #268]	; (8007a74 <AT_sendcmd+0x2a4>)
 8007966:	483e      	ldr	r0, [pc, #248]	; (8007a60 <AT_sendcmd+0x290>)
 8007968:	f015 fb16 	bl	801cf98 <strcpy>
 800796c:	483c      	ldr	r0, [pc, #240]	; (8007a60 <AT_sendcmd+0x290>)
 800796e:	f010 fae1 	bl	8017f34 <crs_strlen>
 8007972:	4a3b      	ldr	r2, [pc, #236]	; (8007a60 <AT_sendcmd+0x290>)
 8007974:	b283      	uxth	r3, r0
 8007976:	2110      	movs	r1, #16
 8007978:	2001      	movs	r0, #1
 800797a:	f010 fb19 	bl	8017fb0 <traceIF_itmPrint>
 800797e:	4838      	ldr	r0, [pc, #224]	; (8007a60 <AT_sendcmd+0x290>)
 8007980:	f010 fad8 	bl	8017f34 <crs_strlen>
 8007984:	4a36      	ldr	r2, [pc, #216]	; (8007a60 <AT_sendcmd+0x290>)
 8007986:	b283      	uxth	r3, r0
 8007988:	2110      	movs	r1, #16
 800798a:	2001      	movs	r0, #1
 800798c:	f010 fd36 	bl	80183fc <traceIF_uartPrint>
					LOG_ERROR(8, ERROR_WARNING);
 8007990:	2202      	movs	r2, #2
 8007992:	2108      	movs	r1, #8
 8007994:	e7bb      	b.n	800790e <AT_sendcmd+0x13e>
	if (IPC_send(at_context.ipc_handle, cmdBuf, cmdSize) == IPC_ERROR) {
 8007996:	6868      	ldr	r0, [r5, #4]
 8007998:	4659      	mov	r1, fp
 800799a:	f00f fd9e 	bl	80174da <IPC_send>
 800799e:	2801      	cmp	r0, #1
 80079a0:	4604      	mov	r4, r0
 80079a2:	d133      	bne.n	8007a0c <AT_sendcmd+0x23c>
		TRACE_ERR(" IPC send error")
 80079a4:	4934      	ldr	r1, [pc, #208]	; (8007a78 <AT_sendcmd+0x2a8>)
 80079a6:	482e      	ldr	r0, [pc, #184]	; (8007a60 <AT_sendcmd+0x290>)
 80079a8:	f015 faf6 	bl	801cf98 <strcpy>
 80079ac:	482c      	ldr	r0, [pc, #176]	; (8007a60 <AT_sendcmd+0x290>)
 80079ae:	f010 fac1 	bl	8017f34 <crs_strlen>
 80079b2:	4a2b      	ldr	r2, [pc, #172]	; (8007a60 <AT_sendcmd+0x290>)
 80079b4:	b283      	uxth	r3, r0
 80079b6:	2110      	movs	r1, #16
 80079b8:	4620      	mov	r0, r4
 80079ba:	f010 faf9 	bl	8017fb0 <traceIF_itmPrint>
 80079be:	4828      	ldr	r0, [pc, #160]	; (8007a60 <AT_sendcmd+0x290>)
 80079c0:	f010 fab8 	bl	8017f34 <crs_strlen>
 80079c4:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <AT_sendcmd+0x290>)
 80079c6:	b283      	uxth	r3, r0
 80079c8:	2110      	movs	r1, #16
 80079ca:	4620      	mov	r0, r4
 80079cc:	f010 fd16 	bl	80183fc <traceIF_uartPrint>
		LOG_ERROR(15, ERROR_WARNING);
 80079d0:	2202      	movs	r2, #2
 80079d2:	210f      	movs	r1, #15
 80079d4:	4620      	mov	r0, r4
 80079d6:	f00f fcb1 	bl	801733c <ERROR_Handler>
						TRACE_ERR("AT_sendcmd error: send to ipc")
 80079da:	4928      	ldr	r1, [pc, #160]	; (8007a7c <AT_sendcmd+0x2ac>)
 80079dc:	4820      	ldr	r0, [pc, #128]	; (8007a60 <AT_sendcmd+0x290>)
 80079de:	f015 fadb 	bl	801cf98 <strcpy>
 80079e2:	481f      	ldr	r0, [pc, #124]	; (8007a60 <AT_sendcmd+0x290>)
 80079e4:	f010 faa6 	bl	8017f34 <crs_strlen>
 80079e8:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <AT_sendcmd+0x290>)
 80079ea:	b283      	uxth	r3, r0
 80079ec:	2110      	movs	r1, #16
 80079ee:	2001      	movs	r0, #1
 80079f0:	f010 fade 	bl	8017fb0 <traceIF_itmPrint>
 80079f4:	481a      	ldr	r0, [pc, #104]	; (8007a60 <AT_sendcmd+0x290>)
 80079f6:	f010 fa9d 	bl	8017f34 <crs_strlen>
 80079fa:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <AT_sendcmd+0x290>)
 80079fc:	b283      	uxth	r3, r0
 80079fe:	2110      	movs	r1, #16
 8007a00:	2001      	movs	r0, #1
 8007a02:	f010 fcfb 	bl	80183fc <traceIF_uartPrint>
						LOG_ERROR(9, ERROR_WARNING);
 8007a06:	2202      	movs	r2, #2
 8007a08:	2109      	movs	r1, #9
 8007a0a:	e780      	b.n	800790e <AT_sendcmd+0x13e>
		(void) rtosalSemaphoreAcquire(at_context.s_SendConfirm_SemaphoreId,
 8007a0c:	f8d5 0698 	ldr.w	r0, [r5, #1688]	; 0x698
 8007a10:	f241 3188 	movw	r1, #5000	; 0x1388
 8007a14:	f010 f9ce 	bl	8017db4 <rtosalSemaphoreAcquire>
		if (at_context.dataSent == AT_TRUE) {
 8007a18:	7b2b      	ldrb	r3, [r5, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0dd      	beq.n	80079da <AT_sendcmd+0x20a>
				if (((action_send & ATACTION_SEND_WAIT_MANDATORY_RSP) != 0U)
 8007a1e:	f019 0f03 	tst.w	r9, #3
 8007a22:	d131      	bne.n	8007a88 <AT_sendcmd+0x2b8>
					TRACE_ERR("Invalid action code")
 8007a24:	4916      	ldr	r1, [pc, #88]	; (8007a80 <AT_sendcmd+0x2b0>)
 8007a26:	480e      	ldr	r0, [pc, #56]	; (8007a60 <AT_sendcmd+0x290>)
 8007a28:	f015 fab6 	bl	801cf98 <strcpy>
 8007a2c:	480c      	ldr	r0, [pc, #48]	; (8007a60 <AT_sendcmd+0x290>)
 8007a2e:	f010 fa81 	bl	8017f34 <crs_strlen>
 8007a32:	4a0b      	ldr	r2, [pc, #44]	; (8007a60 <AT_sendcmd+0x290>)
 8007a34:	b283      	uxth	r3, r0
 8007a36:	2110      	movs	r1, #16
 8007a38:	2001      	movs	r0, #1
 8007a3a:	f010 fab9 	bl	8017fb0 <traceIF_itmPrint>
 8007a3e:	4808      	ldr	r0, [pc, #32]	; (8007a60 <AT_sendcmd+0x290>)
 8007a40:	f010 fa78 	bl	8017f34 <crs_strlen>
 8007a44:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <AT_sendcmd+0x290>)
 8007a46:	b283      	uxth	r3, r0
 8007a48:	2110      	movs	r1, #16
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f010 fcd6 	bl	80183fc <traceIF_uartPrint>
					LOG_ERROR(13, ERROR_WARNING);
 8007a50:	2202      	movs	r2, #2
 8007a52:	210d      	movs	r1, #13
 8007a54:	e75b      	b.n	800790e <AT_sendcmd+0x13e>
 8007a56:	bf00      	nop
 8007a58:	200017f4 	.word	0x200017f4
 8007a5c:	08023950 	.word	0x08023950
 8007a60:	20008ef8 	.word	0x20008ef8
 8007a64:	080239a6 	.word	0x080239a6
 8007a68:	200017ec 	.word	0x200017ec
 8007a6c:	080239f2 	.word	0x080239f2
 8007a70:	080239d3 	.word	0x080239d3
 8007a74:	08023a1c 	.word	0x08023a1c
 8007a78:	08023a50 	.word	0x08023a50
 8007a7c:	08023a6f 	.word	0x08023a6f
 8007a80:	08023b70 	.word	0x08023b70
 8007a84:	20001e90 	.word	0x20001e90
					action_rsp = process_answer(action_send, at_cmd_timeout);
 8007a88:	f8dd a00c 	ldr.w	sl, [sp, #12]
	TRACE_DBG("**** Waiting Sema (to=%lu) *****", Timeout)
 8007a8c:	4e93      	ldr	r6, [pc, #588]	; (8007cdc <AT_sendcmd+0x50c>)
	uint32_t tickstart = HAL_GetTick();
 8007a8e:	f7fc fb2b 	bl	80040e8 <HAL_GetTick>
	TRACE_DBG("**** Waiting Sema (to=%lu) *****", Timeout)
 8007a92:	4993      	ldr	r1, [pc, #588]	; (8007ce0 <AT_sendcmd+0x510>)
 8007a94:	4652      	mov	r2, sl
 8007a96:	4630      	mov	r0, r6
 8007a98:	f015 fa0e 	bl	801ceb8 <sprintf>
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f010 fa49 	bl	8017f34 <crs_strlen>
 8007aa2:	4632      	mov	r2, r6
 8007aa4:	b283      	uxth	r3, r0
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	f010 fa81 	bl	8017fb0 <traceIF_itmPrint>
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f010 fa40 	bl	8017f34 <crs_strlen>
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	b283      	uxth	r3, r0
 8007ab8:	2102      	movs	r1, #2
 8007aba:	2001      	movs	r0, #1
 8007abc:	f010 fc9e 	bl	80183fc <traceIF_uartPrint>
	if (Timeout != 0U) {
 8007ac0:	f1ba 0f00 	cmp.w	sl, #0
 8007ac4:	d04f      	beq.n	8007b66 <AT_sendcmd+0x396>
		sem_status = rtosalSemaphoreAcquire(s_WaitAnswer_SemaphoreId, Timeout);
 8007ac6:	4b87      	ldr	r3, [pc, #540]	; (8007ce4 <AT_sendcmd+0x514>)
 8007ac8:	4651      	mov	r1, sl
 8007aca:	6818      	ldr	r0, [r3, #0]
 8007acc:	f010 f972 	bl	8017db4 <rtosalSemaphoreAcquire>
		if (sem_status != ((rtosalStatus) osOK)) {
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f000 80c5 	beq.w	8007c60 <AT_sendcmd+0x490>
			TRACE_DBG("**** Sema Timeout (=%ld) !!! *****", Timeout)
 8007ad6:	4984      	ldr	r1, [pc, #528]	; (8007ce8 <AT_sendcmd+0x518>)
 8007ad8:	4652      	mov	r2, sl
 8007ada:	4630      	mov	r0, r6
 8007adc:	f015 f9ec 	bl	801ceb8 <sprintf>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f010 fa27 	bl	8017f34 <crs_strlen>
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	b283      	uxth	r3, r0
 8007aea:	2102      	movs	r1, #2
 8007aec:	2001      	movs	r0, #1
 8007aee:	f010 fa5f 	bl	8017fb0 <traceIF_itmPrint>
 8007af2:	4630      	mov	r0, r6
 8007af4:	f010 fa1e 	bl	8017f34 <crs_strlen>
 8007af8:	4632      	mov	r2, r6
 8007afa:	b283      	uxth	r3, r0
 8007afc:	2102      	movs	r1, #2
 8007afe:	2001      	movs	r0, #1
 8007b00:	f010 fc7c 	bl	80183fc <traceIF_uartPrint>
			retval = ATSTATUS_TIMEOUT;
 8007b04:	2402      	movs	r4, #2
		TRACE_DBG("**** Sema Freed *****")
 8007b06:	4979      	ldr	r1, [pc, #484]	; (8007cec <AT_sendcmd+0x51c>)
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f015 fa45 	bl	801cf98 <strcpy>
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f010 fa10 	bl	8017f34 <crs_strlen>
 8007b14:	4632      	mov	r2, r6
 8007b16:	b283      	uxth	r3, r0
 8007b18:	2102      	movs	r1, #2
 8007b1a:	2001      	movs	r0, #1
 8007b1c:	f010 fa48 	bl	8017fb0 <traceIF_itmPrint>
 8007b20:	4630      	mov	r0, r6
 8007b22:	f010 fa07 	bl	8017f34 <crs_strlen>
 8007b26:	4632      	mov	r2, r6
 8007b28:	b283      	uxth	r3, r0
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f010 fc65 	bl	80183fc <traceIF_uartPrint>
	if (retval != ATSTATUS_OK) {
 8007b32:	2c00      	cmp	r4, #0
 8007b34:	f000 80c6 	beq.w	8007cc4 <AT_sendcmd+0x4f4>
			TRACE_INFO("TIMEOUT EVENT(%ld ms)", cmdTimeout)
 8007b38:	496d      	ldr	r1, [pc, #436]	; (8007cf0 <AT_sendcmd+0x520>)
 8007b3a:	4868      	ldr	r0, [pc, #416]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b3c:	4652      	mov	r2, sl
 8007b3e:	f015 f9bb 	bl	801ceb8 <sprintf>
 8007b42:	4866      	ldr	r0, [pc, #408]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b44:	f010 f9f6 	bl	8017f34 <crs_strlen>
 8007b48:	2101      	movs	r1, #1
 8007b4a:	b283      	uxth	r3, r0
 8007b4c:	4a63      	ldr	r2, [pc, #396]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b4e:	4608      	mov	r0, r1
 8007b50:	f010 fa2e 	bl	8017fb0 <traceIF_itmPrint>
 8007b54:	4861      	ldr	r0, [pc, #388]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b56:	f010 f9ed 	bl	8017f34 <crs_strlen>
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	b283      	uxth	r3, r0
 8007b5e:	4a5f      	ldr	r2, [pc, #380]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b60:	4608      	mov	r0, r1
 8007b62:	f010 fc4b 	bl	80183fc <traceIF_uartPrint>
			(void) IPC_abort(at_context.ipc_handle);
 8007b66:	6868      	ldr	r0, [r5, #4]
 8007b68:	f00f fcab 	bl	80174c2 <IPC_abort>
			if ((action_send & ATACTION_SEND_WAIT_MANDATORY_RSP) != 0U) {
 8007b6c:	f019 0f01 	tst.w	r9, #1
 8007b70:	d078      	beq.n	8007c64 <AT_sendcmd+0x494>
				TRACE_ERR("AT_sendcmd error: wait from ipc")
 8007b72:	4960      	ldr	r1, [pc, #384]	; (8007cf4 <AT_sendcmd+0x524>)
 8007b74:	4859      	ldr	r0, [pc, #356]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b76:	f015 fa0f 	bl	801cf98 <strcpy>
 8007b7a:	4858      	ldr	r0, [pc, #352]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b7c:	f010 f9da 	bl	8017f34 <crs_strlen>
 8007b80:	4a56      	ldr	r2, [pc, #344]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b82:	b283      	uxth	r3, r0
 8007b84:	2110      	movs	r1, #16
 8007b86:	2001      	movs	r0, #1
 8007b88:	f010 fa12 	bl	8017fb0 <traceIF_itmPrint>
 8007b8c:	4853      	ldr	r0, [pc, #332]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b8e:	f010 f9d1 	bl	8017f34 <crs_strlen>
 8007b92:	4a52      	ldr	r2, [pc, #328]	; (8007cdc <AT_sendcmd+0x50c>)
 8007b94:	b283      	uxth	r3, r0
 8007b96:	2110      	movs	r1, #16
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f010 fc2f 	bl	80183fc <traceIF_uartPrint>
				LOG_ERROR(10, ERROR_WARNING);
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	210a      	movs	r1, #10
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	f00f fbca 	bl	801733c <ERROR_Handler>
				action_rsp = ATACTION_RSP_ERROR;
 8007ba8:	2604      	movs	r6, #4
					action_rsp = ATACTION_RSP_FRC_END;
 8007baa:	2400      	movs	r4, #0
	at_context.action_flags = ATACTION_RSP_NO_ACTION;
 8007bac:	2300      	movs	r3, #0
	TRACE_DBG("action_rsp value = %d", action_rsp)
 8007bae:	4952      	ldr	r1, [pc, #328]	; (8007cf8 <AT_sendcmd+0x528>)
 8007bb0:	484a      	ldr	r0, [pc, #296]	; (8007cdc <AT_sendcmd+0x50c>)
	at_context.action_flags = ATACTION_RSP_NO_ACTION;
 8007bb2:	f8a5 3690 	strh.w	r3, [r5, #1680]	; 0x690
	TRACE_DBG("action_rsp value = %d", action_rsp)
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	f015 f97e 	bl	801ceb8 <sprintf>
 8007bbc:	4847      	ldr	r0, [pc, #284]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bbe:	f010 f9b9 	bl	8017f34 <crs_strlen>
 8007bc2:	4a46      	ldr	r2, [pc, #280]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bc4:	b283      	uxth	r3, r0
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f010 f9f1 	bl	8017fb0 <traceIF_itmPrint>
 8007bce:	4843      	ldr	r0, [pc, #268]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bd0:	f010 f9b0 	bl	8017f34 <crs_strlen>
 8007bd4:	4a41      	ldr	r2, [pc, #260]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bd6:	b283      	uxth	r3, r0
 8007bd8:	2102      	movs	r1, #2
 8007bda:	2001      	movs	r0, #1
 8007bdc:	f010 fc0e 	bl	80183fc <traceIF_uartPrint>
	if (action_rsp == ATACTION_RSP_ERROR) {
 8007be0:	2e04      	cmp	r6, #4
 8007be2:	d168      	bne.n	8007cb6 <AT_sendcmd+0x4e6>
		LOG_ERROR(14, ERROR_WARNING);
 8007be4:	2202      	movs	r2, #2
 8007be6:	210e      	movs	r1, #14
 8007be8:	2001      	movs	r0, #1
 8007bea:	f00f fba7 	bl	801733c <ERROR_Handler>
			TRACE_DBG("AT_sendcmd error: process AT transaction")
 8007bee:	4943      	ldr	r1, [pc, #268]	; (8007cfc <AT_sendcmd+0x52c>)
 8007bf0:	483a      	ldr	r0, [pc, #232]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bf2:	f015 f9d1 	bl	801cf98 <strcpy>
 8007bf6:	4839      	ldr	r0, [pc, #228]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bf8:	f010 f99c 	bl	8017f34 <crs_strlen>
 8007bfc:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <AT_sendcmd+0x50c>)
 8007bfe:	b283      	uxth	r3, r0
 8007c00:	2102      	movs	r1, #2
 8007c02:	2001      	movs	r0, #1
 8007c04:	f010 f9d4 	bl	8017fb0 <traceIF_itmPrint>
 8007c08:	4834      	ldr	r0, [pc, #208]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c0a:	f010 f993 	bl	8017f34 <crs_strlen>
 8007c0e:	4a33      	ldr	r2, [pc, #204]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c10:	b283      	uxth	r3, r0
 8007c12:	2102      	movs	r1, #2
 8007c14:	2001      	movs	r0, #1
 8007c16:	f010 fbf1 	bl	80183fc <traceIF_uartPrint>
			(void) ATParser_get_error(&at_context, p_rsp_buf);
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	4838      	ldr	r0, [pc, #224]	; (8007d00 <AT_sendcmd+0x530>)
 8007c1e:	f006 fd10 	bl	800e642 <ATParser_get_error>
			ATParser_abort_request(&at_context);
 8007c22:	4837      	ldr	r0, [pc, #220]	; (8007d00 <AT_sendcmd+0x530>)
 8007c24:	f006 fd0f 	bl	800e646 <ATParser_abort_request>
			if (msg_in_id == (at_msg_t) SID_CS_DATA_SUSPEND) {
 8007c28:	2f7e      	cmp	r7, #126	; 0x7e
 8007c2a:	d117      	bne.n	8007c5c <AT_sendcmd+0x48c>
				TRACE_ERR("force to return to COMMAND mode")
 8007c2c:	4935      	ldr	r1, [pc, #212]	; (8007d04 <AT_sendcmd+0x534>)
 8007c2e:	482b      	ldr	r0, [pc, #172]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c30:	f015 f9b2 	bl	801cf98 <strcpy>
 8007c34:	4829      	ldr	r0, [pc, #164]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c36:	f010 f97d 	bl	8017f34 <crs_strlen>
 8007c3a:	4a28      	ldr	r2, [pc, #160]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c3c:	b283      	uxth	r3, r0
 8007c3e:	2110      	movs	r1, #16
 8007c40:	2001      	movs	r0, #1
 8007c42:	f010 f9b5 	bl	8017fb0 <traceIF_itmPrint>
 8007c46:	4825      	ldr	r0, [pc, #148]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c48:	f010 f974 	bl	8017f34 <crs_strlen>
 8007c4c:	4a23      	ldr	r2, [pc, #140]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c4e:	b283      	uxth	r3, r0
 8007c50:	2110      	movs	r1, #16
 8007c52:	2001      	movs	r0, #1
 8007c54:	f010 fbd2 	bl	80183fc <traceIF_uartPrint>
				at_context.in_data_mode = AT_FALSE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	72ab      	strb	r3, [r5, #10]
 8007c5c:	2401      	movs	r4, #1
 8007c5e:	e5e8      	b.n	8007832 <AT_sendcmd+0x62>
	at_status_t retval = ATSTATUS_OK;
 8007c60:	4604      	mov	r4, r0
 8007c62:	e750      	b.n	8007b06 <AT_sendcmd+0x336>
				if ((action_send & ATACTION_SEND_FLAG_LAST_CMD) != 0U) {
 8007c64:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8007c68:	d036      	beq.n	8007cd8 <AT_sendcmd+0x508>
					action_rsp = ATACTION_RSP_FRC_END;
 8007c6a:	2601      	movs	r6, #1
 8007c6c:	e79d      	b.n	8007baa <AT_sendcmd+0x3da>
			} else if ((at_context.action_flags & ATACTION_RSP_ERROR) != 0U) {
 8007c6e:	0759      	lsls	r1, r3, #29
 8007c70:	f57f af0f 	bpl.w	8007a92 <AT_sendcmd+0x2c2>
				at_context.action_flags &=
 8007c74:	f023 0304 	bic.w	r3, r3, #4
				TRACE_ERR("AT_sendcmd error: parse from rsp")
 8007c78:	4923      	ldr	r1, [pc, #140]	; (8007d08 <AT_sendcmd+0x538>)
 8007c7a:	4818      	ldr	r0, [pc, #96]	; (8007cdc <AT_sendcmd+0x50c>)
				at_context.action_flags &=
 8007c7c:	f8a5 3690 	strh.w	r3, [r5, #1680]	; 0x690
				TRACE_ERR("AT_sendcmd error: parse from rsp")
 8007c80:	f015 f98a 	bl	801cf98 <strcpy>
 8007c84:	4815      	ldr	r0, [pc, #84]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c86:	f010 f955 	bl	8017f34 <crs_strlen>
 8007c8a:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c8c:	b283      	uxth	r3, r0
 8007c8e:	2110      	movs	r1, #16
 8007c90:	2001      	movs	r0, #1
 8007c92:	f010 f98d 	bl	8017fb0 <traceIF_itmPrint>
 8007c96:	4811      	ldr	r0, [pc, #68]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c98:	f010 f94c 	bl	8017f34 <crs_strlen>
 8007c9c:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <AT_sendcmd+0x50c>)
 8007c9e:	b283      	uxth	r3, r0
 8007ca0:	2110      	movs	r1, #16
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	f010 fbaa 	bl	80183fc <traceIF_uartPrint>
				LOG_ERROR(11, ERROR_WARNING);
 8007ca8:	2202      	movs	r2, #2
 8007caa:	210b      	movs	r1, #11
 8007cac:	2001      	movs	r0, #1
 8007cae:	f00f fb45 	bl	801733c <ERROR_Handler>
				action_rsp = ATACTION_RSP_ERROR;
 8007cb2:	2604      	movs	r6, #4
 8007cb4:	e77a      	b.n	8007bac <AT_sendcmd+0x3dc>
		if (retval != ATSTATUS_OK) {
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	d199      	bne.n	8007bee <AT_sendcmd+0x41e>
		(void) ATParser_get_rsp(&at_context, p_rsp_buf);
 8007cba:	4641      	mov	r1, r8
 8007cbc:	4810      	ldr	r0, [pc, #64]	; (8007d00 <AT_sendcmd+0x530>)
 8007cbe:	f006 fcb3 	bl	800e628 <ATParser_get_rsp>
 8007cc2:	e5b6      	b.n	8007832 <AT_sendcmd+0x62>
			if ((at_context.action_flags & ATACTION_RSP_FRC_END) != 0U) {
 8007cc4:	f8b5 3690 	ldrh.w	r3, [r5, #1680]	; 0x690
 8007cc8:	07da      	lsls	r2, r3, #31
 8007cca:	d4ce      	bmi.n	8007c6a <AT_sendcmd+0x49a>
			} else if ((at_context.action_flags & ATACTION_RSP_FRC_CONTINUE)
 8007ccc:	0798      	lsls	r0, r3, #30
 8007cce:	d5ce      	bpl.n	8007c6e <AT_sendcmd+0x49e>
				at_context.action_flags &=
 8007cd0:	f023 0302 	bic.w	r3, r3, #2
 8007cd4:	f8a5 3690 	strh.w	r3, [r5, #1680]	; 0x690
	at_action_rsp_t action_rsp = ATACTION_RSP_NO_ACTION;
 8007cd8:	2602      	movs	r6, #2
 8007cda:	e5df      	b.n	800789c <AT_sendcmd+0xcc>
 8007cdc:	20008ef8 	.word	0x20008ef8
 8007ce0:	08023a9c 	.word	0x08023a9c
 8007ce4:	200034ac 	.word	0x200034ac
 8007ce8:	08023ac6 	.word	0x08023ac6
 8007cec:	08023af2 	.word	0x08023af2
 8007cf0:	08023c13 	.word	0x08023c13
 8007cf4:	08023b11 	.word	0x08023b11
 8007cf8:	08023b93 	.word	0x08023b93
 8007cfc:	08023bb2 	.word	0x08023bb2
 8007d00:	200017f4 	.word	0x200017f4
 8007d04:	08023be4 	.word	0x08023be4
 8007d08:	08023b40 	.word	0x08023b40

08007d0c <atcore_task_start>:
at_status_t atcore_task_start(osPriority taskPrio, uint16_t stackSize) {
 8007d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (AT_Core_initialized != 1U) {
 8007d0e:	4b3b      	ldr	r3, [pc, #236]	; (8007dfc <atcore_task_start+0xf0>)
 8007d10:	781c      	ldrb	r4, [r3, #0]
 8007d12:	2c01      	cmp	r4, #1
at_status_t atcore_task_start(osPriority taskPrio, uint16_t stackSize) {
 8007d14:	4606      	mov	r6, r0
 8007d16:	460f      	mov	r7, r1
	if (AT_Core_initialized != 1U) {
 8007d18:	d01e      	beq.n	8007d58 <atcore_task_start+0x4c>
		TRACE_ERR("error, ATCore is not initialized")
 8007d1a:	4939      	ldr	r1, [pc, #228]	; (8007e00 <atcore_task_start+0xf4>)
 8007d1c:	4839      	ldr	r0, [pc, #228]	; (8007e04 <atcore_task_start+0xf8>)
 8007d1e:	f015 f93b 	bl	801cf98 <strcpy>
 8007d22:	4838      	ldr	r0, [pc, #224]	; (8007e04 <atcore_task_start+0xf8>)
 8007d24:	f010 f906 	bl	8017f34 <crs_strlen>
 8007d28:	4a36      	ldr	r2, [pc, #216]	; (8007e04 <atcore_task_start+0xf8>)
 8007d2a:	b283      	uxth	r3, r0
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f010 f93e 	bl	8017fb0 <traceIF_itmPrint>
 8007d34:	4833      	ldr	r0, [pc, #204]	; (8007e04 <atcore_task_start+0xf8>)
 8007d36:	f010 f8fd 	bl	8017f34 <crs_strlen>
 8007d3a:	4a32      	ldr	r2, [pc, #200]	; (8007e04 <atcore_task_start+0xf8>)
 8007d3c:	b283      	uxth	r3, r0
 8007d3e:	2110      	movs	r1, #16
 8007d40:	2001      	movs	r0, #1
 8007d42:	f010 fb5b 	bl	80183fc <traceIF_uartPrint>
		LOG_ERROR(17, ERROR_WARNING);
 8007d46:	2202      	movs	r2, #2
 8007d48:	2111      	movs	r1, #17
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	f00f faf6 	bl	801733c <ERROR_Handler>
		retval = ATSTATUS_ERROR;
 8007d50:	2401      	movs	r4, #1
}
 8007d52:	4620      	mov	r0, r4
 8007d54:	b003      	add	sp, #12
 8007d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_WaitAnswer_SemaphoreId = rtosalSemaphoreNew(
 8007d58:	482b      	ldr	r0, [pc, #172]	; (8007e08 <atcore_task_start+0xfc>)
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	f010 f821 	bl	8017da2 <rtosalSemaphoreNew>
 8007d60:	4b2a      	ldr	r3, [pc, #168]	; (8007e0c <atcore_task_start+0x100>)
 8007d62:	6018      	str	r0, [r3, #0]
		if (s_WaitAnswer_SemaphoreId == NULL) {
 8007d64:	b9d8      	cbnz	r0, 8007d9e <atcore_task_start+0x92>
			TRACE_ERR("s_WaitAnswer_SemaphoreId creation error")
 8007d66:	492a      	ldr	r1, [pc, #168]	; (8007e10 <atcore_task_start+0x104>)
 8007d68:	4826      	ldr	r0, [pc, #152]	; (8007e04 <atcore_task_start+0xf8>)
 8007d6a:	f015 f915 	bl	801cf98 <strcpy>
 8007d6e:	4825      	ldr	r0, [pc, #148]	; (8007e04 <atcore_task_start+0xf8>)
 8007d70:	f010 f8e0 	bl	8017f34 <crs_strlen>
 8007d74:	4a23      	ldr	r2, [pc, #140]	; (8007e04 <atcore_task_start+0xf8>)
 8007d76:	b283      	uxth	r3, r0
 8007d78:	2110      	movs	r1, #16
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f010 f918 	bl	8017fb0 <traceIF_itmPrint>
 8007d80:	4820      	ldr	r0, [pc, #128]	; (8007e04 <atcore_task_start+0xf8>)
 8007d82:	f010 f8d7 	bl	8017f34 <crs_strlen>
 8007d86:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <atcore_task_start+0xf8>)
 8007d88:	b283      	uxth	r3, r0
 8007d8a:	2110      	movs	r1, #16
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f010 fb35 	bl	80183fc <traceIF_uartPrint>
			LOG_ERROR(18, ERROR_WARNING);
 8007d92:	2202      	movs	r2, #2
 8007d94:	2112      	movs	r1, #18
				LOG_ERROR(19, ERROR_WARNING);
 8007d96:	4620      	mov	r0, r4
 8007d98:	f00f fad0 	bl	801733c <ERROR_Handler>
				retval = ATSTATUS_ERROR;
 8007d9c:	e7d9      	b.n	8007d52 <atcore_task_start+0x46>
			(void) rtosalSemaphoreAcquire(s_WaitAnswer_SemaphoreId, 15000U);
 8007d9e:	f643 2198 	movw	r1, #15000	; 0x3a98
 8007da2:	f010 f807 	bl	8017db4 <rtosalSemaphoreAcquire>
			q_msg_IPC_received_Id = rtosalMessageQueueNew(
 8007da6:	2180      	movs	r1, #128	; 0x80
 8007da8:	481a      	ldr	r0, [pc, #104]	; (8007e14 <atcore_task_start+0x108>)
 8007daa:	f010 f814 	bl	8017dd6 <rtosalMessageQueueNew>
 8007dae:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <atcore_task_start+0x10c>)
			atcoreTaskId = rtosalThreadNew((const rtosal_char_t*) "AtCore",
 8007db0:	491a      	ldr	r1, [pc, #104]	; (8007e1c <atcore_task_start+0x110>)
			q_msg_IPC_received_Id = rtosalMessageQueueNew(
 8007db2:	6018      	str	r0, [r3, #0]
			atcoreTaskId = rtosalThreadNew((const rtosal_char_t*) "AtCore",
 8007db4:	2500      	movs	r5, #0
 8007db6:	481a      	ldr	r0, [pc, #104]	; (8007e20 <atcore_task_start+0x114>)
 8007db8:	9500      	str	r5, [sp, #0]
 8007dba:	463b      	mov	r3, r7
 8007dbc:	4632      	mov	r2, r6
 8007dbe:	f00f ffe1 	bl	8017d84 <rtosalThreadNew>
			if (atcoreTaskId == NULL) {
 8007dc2:	b9c0      	cbnz	r0, 8007df6 <atcore_task_start+0xea>
				TRACE_ERR("atcoreTaskId creation error")
 8007dc4:	4917      	ldr	r1, [pc, #92]	; (8007e24 <atcore_task_start+0x118>)
 8007dc6:	480f      	ldr	r0, [pc, #60]	; (8007e04 <atcore_task_start+0xf8>)
 8007dc8:	f015 f8e6 	bl	801cf98 <strcpy>
 8007dcc:	480d      	ldr	r0, [pc, #52]	; (8007e04 <atcore_task_start+0xf8>)
 8007dce:	f010 f8b1 	bl	8017f34 <crs_strlen>
 8007dd2:	4a0c      	ldr	r2, [pc, #48]	; (8007e04 <atcore_task_start+0xf8>)
 8007dd4:	b283      	uxth	r3, r0
 8007dd6:	2110      	movs	r1, #16
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f010 f8e9 	bl	8017fb0 <traceIF_itmPrint>
 8007dde:	4809      	ldr	r0, [pc, #36]	; (8007e04 <atcore_task_start+0xf8>)
 8007de0:	f010 f8a8 	bl	8017f34 <crs_strlen>
 8007de4:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <atcore_task_start+0xf8>)
 8007de6:	b283      	uxth	r3, r0
 8007de8:	2110      	movs	r1, #16
 8007dea:	4620      	mov	r0, r4
 8007dec:	f010 fb06 	bl	80183fc <traceIF_uartPrint>
				LOG_ERROR(19, ERROR_WARNING);
 8007df0:	2202      	movs	r2, #2
 8007df2:	2113      	movs	r1, #19
 8007df4:	e7cf      	b.n	8007d96 <atcore_task_start+0x8a>
				retval = ATSTATUS_OK;
 8007df6:	462c      	mov	r4, r5
 8007df8:	e7ab      	b.n	8007d52 <atcore_task_start+0x46>
 8007dfa:	bf00      	nop
 8007dfc:	200017f0 	.word	0x200017f0
 8007e00:	08023c32 	.word	0x08023c32
 8007e04:	20008ef8 	.word	0x20008ef8
 8007e08:	08023c62 	.word	0x08023c62
 8007e0c:	200034ac 	.word	0x200034ac
 8007e10:	08023c79 	.word	0x08023c79
 8007e14:	08023cb0 	.word	0x08023cb0
 8007e18:	200034a4 	.word	0x200034a4
 8007e1c:	080071fd 	.word	0x080071fd
 8007e20:	08023cbc 	.word	0x08023cbc
 8007e24:	08023cc3 	.word	0x08023cc3

08007e28 <check_structure_to_read>:
}

/* static functions ---------------------------------------------------------------------- */
static DataPack_Status_t check_structure_to_read(uint8_t *p_buf, uint16_t msgtype,
                                                 uint16_t expect_size, uint8_t expect_type)
{
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	4615      	mov	r5, r2
  msgtype = ((uint16_t)p_buf[0] << 8) + (uint16_t)p_buf[1];
 8007e2c:	7844      	ldrb	r4, [r0, #1]
 8007e2e:	7802      	ldrb	r2, [r0, #0]
 8007e30:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8007e34:	b2a2      	uxth	r2, r4
  DataPack_Status_t retval;
  uint16_t rx_msgtype;

  /* check that indicated msg type and received msg type are matching */
  rx_msgtype = DATAPACK_readMsgType(p_buf);
  if (rx_msgtype != msgtype)
 8007e36:	4291      	cmp	r1, r2
 8007e38:	d018      	beq.n	8007e6c <check_structure_to_read+0x44>
  {
    PRINT_INFO("DATAPACK read msgtype not matching (%d vs %d)", rx_msgtype, msgtype)
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	481e      	ldr	r0, [pc, #120]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e3e:	491f      	ldr	r1, [pc, #124]	; (8007ebc <check_structure_to_read+0x94>)
 8007e40:	f015 f83a 	bl	801ceb8 <sprintf>
 8007e44:	481c      	ldr	r0, [pc, #112]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e46:	f010 f875 	bl	8017f34 <crs_strlen>
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	b283      	uxth	r3, r0
 8007e4e:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e50:	4608      	mov	r0, r1
 8007e52:	f010 f8ad 	bl	8017fb0 <traceIF_itmPrint>
 8007e56:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e58:	f010 f86c 	bl	8017f34 <crs_strlen>
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e5e:	b283      	uxth	r3, r0
 8007e60:	2101      	movs	r1, #1
      /* check that expect_type corresponds to the received content type */
      uint8_t rx_contenttype;
      rx_contenttype = p_buf[4];
      if (rx_contenttype != expect_type)
      {
        PRINT_ERR("DATAPACK read content type not matching")
 8007e62:	2001      	movs	r0, #1
 8007e64:	f010 faca 	bl	80183fc <traceIF_uartPrint>
        retval = DATAPACK_ERROR;
 8007e68:	2001      	movs	r0, #1
      }
    }
  }

  return (retval);
}
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
  size = ((uint16_t)p_buf[2] << 8) + (uint16_t)p_buf[3];
 8007e6c:	7882      	ldrb	r2, [r0, #2]
 8007e6e:	78c1      	ldrb	r1, [r0, #3]
 8007e70:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8007e74:	b28a      	uxth	r2, r1
    if (rx_size != expect_size)
 8007e76:	4295      	cmp	r5, r2
 8007e78:	d014      	beq.n	8007ea4 <check_structure_to_read+0x7c>
      PRINT_ERR("DATAPACK read size error (%d, %d)", rx_size, expect_size)
 8007e7a:	4911      	ldr	r1, [pc, #68]	; (8007ec0 <check_structure_to_read+0x98>)
 8007e7c:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e7e:	462b      	mov	r3, r5
 8007e80:	f015 f81a 	bl	801ceb8 <sprintf>
        PRINT_ERR("DATAPACK read content type not matching")
 8007e84:	480c      	ldr	r0, [pc, #48]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e86:	f010 f855 	bl	8017f34 <crs_strlen>
 8007e8a:	4a0b      	ldr	r2, [pc, #44]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e8c:	b283      	uxth	r3, r0
 8007e8e:	2110      	movs	r1, #16
 8007e90:	2001      	movs	r0, #1
 8007e92:	f010 f88d 	bl	8017fb0 <traceIF_itmPrint>
 8007e96:	4808      	ldr	r0, [pc, #32]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e98:	f010 f84c 	bl	8017f34 <crs_strlen>
 8007e9c:	4a06      	ldr	r2, [pc, #24]	; (8007eb8 <check_structure_to_read+0x90>)
 8007e9e:	b283      	uxth	r3, r0
 8007ea0:	2110      	movs	r1, #16
 8007ea2:	e7de      	b.n	8007e62 <check_structure_to_read+0x3a>
      if (rx_contenttype != expect_type)
 8007ea4:	7902      	ldrb	r2, [r0, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d004      	beq.n	8007eb4 <check_structure_to_read+0x8c>
        PRINT_ERR("DATAPACK read content type not matching")
 8007eaa:	4906      	ldr	r1, [pc, #24]	; (8007ec4 <check_structure_to_read+0x9c>)
 8007eac:	4802      	ldr	r0, [pc, #8]	; (8007eb8 <check_structure_to_read+0x90>)
 8007eae:	f015 f873 	bl	801cf98 <strcpy>
 8007eb2:	e7e7      	b.n	8007e84 <check_structure_to_read+0x5c>
        retval = DATAPACK_OK;
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e7d8      	b.n	8007e6a <check_structure_to_read+0x42>
 8007eb8:	20008ef8 	.word	0x20008ef8
 8007ebc:	08023cee 	.word	0x08023cee
 8007ec0:	08023d27 	.word	0x08023d27
 8007ec4:	08023d5a 	.word	0x08023d5a

08007ec8 <DATAPACK_writePtr>:
{
 8007ec8:	b508      	push	{r3, lr}
 8007eca:	4603      	mov	r3, r0
  if ((p_data == NULL) || (p_buf == NULL))
 8007ecc:	b102      	cbz	r2, 8007ed0 <DATAPACK_writePtr+0x8>
 8007ece:	b9b8      	cbnz	r0, 8007f00 <DATAPACK_writePtr+0x38>
    PRINT_ERR("DATAPACK_writePtr error (%p, %p)", p_data, p_buf)
 8007ed0:	4911      	ldr	r1, [pc, #68]	; (8007f18 <DATAPACK_writePtr+0x50>)
 8007ed2:	4812      	ldr	r0, [pc, #72]	; (8007f1c <DATAPACK_writePtr+0x54>)
 8007ed4:	f014 fff0 	bl	801ceb8 <sprintf>
 8007ed8:	4810      	ldr	r0, [pc, #64]	; (8007f1c <DATAPACK_writePtr+0x54>)
 8007eda:	f010 f82b 	bl	8017f34 <crs_strlen>
 8007ede:	4a0f      	ldr	r2, [pc, #60]	; (8007f1c <DATAPACK_writePtr+0x54>)
 8007ee0:	b283      	uxth	r3, r0
 8007ee2:	2110      	movs	r1, #16
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	f010 f863 	bl	8017fb0 <traceIF_itmPrint>
 8007eea:	480c      	ldr	r0, [pc, #48]	; (8007f1c <DATAPACK_writePtr+0x54>)
 8007eec:	f010 f822 	bl	8017f34 <crs_strlen>
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <DATAPACK_writePtr+0x54>)
 8007ef2:	b283      	uxth	r3, r0
 8007ef4:	2110      	movs	r1, #16
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f010 fa80 	bl	80183fc <traceIF_uartPrint>
    retvalue = DATAPACK_ERROR;
 8007efc:	2001      	movs	r0, #1
}
 8007efe:	bd08      	pop	{r3, pc}
    p_buf[0] = (uint8_t)(msgtype >> 8);
 8007f00:	0a08      	lsrs	r0, r1, #8
    p_buf[1] = (uint8_t)(msgtype & 0x00FFU);
 8007f02:	7059      	strb	r1, [r3, #1]
    p_buf[3] = (uint8_t)(size & 0x00FFU);
 8007f04:	2104      	movs	r1, #4
    p_buf[0] = (uint8_t)(msgtype >> 8);
 8007f06:	7018      	strb	r0, [r3, #0]
    p_buf[3] = (uint8_t)(size & 0x00FFU);
 8007f08:	70d9      	strb	r1, [r3, #3]
    p_buf[2] = (uint8_t)(size >> 8);
 8007f0a:	2000      	movs	r0, #0
    p_buf[4] = DATASTRUCT_POINTER_TYPE;
 8007f0c:	2101      	movs	r1, #1
    p_buf[2] = (uint8_t)(size >> 8);
 8007f0e:	7098      	strb	r0, [r3, #2]
    p_buf[4] = DATASTRUCT_POINTER_TYPE;
 8007f10:	7119      	strb	r1, [r3, #4]
    (void) memcpy((void *)&p_buf[DATAPACK_HEADER_BYTE_SIZE + 1U], (void *)&sptr, sizeof(datapack_structptr_t));
 8007f12:	f8c3 2005 	str.w	r2, [r3, #5]
    retvalue = DATAPACK_OK;
 8007f16:	e7f2      	b.n	8007efe <DATAPACK_writePtr+0x36>
 8007f18:	08023d93 	.word	0x08023d93
 8007f1c:	20008ef8 	.word	0x20008ef8

08007f20 <DATAPACK_writeStruct>:
{
 8007f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f22:	4615      	mov	r5, r2
  if (size > datapack_biggest_size)
 8007f24:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <DATAPACK_writeStruct+0xa0>)
{
 8007f26:	461f      	mov	r7, r3
  if (size > datapack_biggest_size)
 8007f28:	6813      	ldr	r3, [r2, #0]
 8007f2a:	429d      	cmp	r5, r3
    datapack_biggest_size = size;
 8007f2c:	bf88      	it	hi
 8007f2e:	6015      	strhi	r5, [r2, #0]
  PRINT_DBG("<MAX SIZE INFO> msgtype=%d size=%d (biggest =%ld)", msgtype, size, datapack_biggest_size)
 8007f30:	6813      	ldr	r3, [r2, #0]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	460a      	mov	r2, r1
 8007f36:	462b      	mov	r3, r5
{
 8007f38:	4604      	mov	r4, r0
 8007f3a:	460e      	mov	r6, r1
  PRINT_DBG("<MAX SIZE INFO> msgtype=%d size=%d (biggest =%ld)", msgtype, size, datapack_biggest_size)
 8007f3c:	4821      	ldr	r0, [pc, #132]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f3e:	4922      	ldr	r1, [pc, #136]	; (8007fc8 <DATAPACK_writeStruct+0xa8>)
 8007f40:	f014 ffba 	bl	801ceb8 <sprintf>
 8007f44:	481f      	ldr	r0, [pc, #124]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f46:	f00f fff5 	bl	8017f34 <crs_strlen>
 8007f4a:	4a1e      	ldr	r2, [pc, #120]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f4c:	b283      	uxth	r3, r0
 8007f4e:	2102      	movs	r1, #2
 8007f50:	2001      	movs	r0, #1
 8007f52:	f010 f82d 	bl	8017fb0 <traceIF_itmPrint>
 8007f56:	481b      	ldr	r0, [pc, #108]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f58:	f00f ffec 	bl	8017f34 <crs_strlen>
 8007f5c:	4a19      	ldr	r2, [pc, #100]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f5e:	b283      	uxth	r3, r0
 8007f60:	2102      	movs	r1, #2
 8007f62:	2001      	movs	r0, #1
 8007f64:	f010 fa4a 	bl	80183fc <traceIF_uartPrint>
  if (((size - DATAPACK_HEADER_BYTE_SIZE) > DATAPACK_MAX_BUF_SIZE) || (p_buf == NULL))
 8007f68:	2d84      	cmp	r5, #132	; 0x84
 8007f6a:	d800      	bhi.n	8007f6e <DATAPACK_writeStruct+0x4e>
 8007f6c:	b9c4      	cbnz	r4, 8007fa0 <DATAPACK_writeStruct+0x80>
    PRINT_ERR("DATAPACK_writeStruct error")
 8007f6e:	4917      	ldr	r1, [pc, #92]	; (8007fcc <DATAPACK_writeStruct+0xac>)
 8007f70:	4814      	ldr	r0, [pc, #80]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f72:	f015 f811 	bl	801cf98 <strcpy>
 8007f76:	4813      	ldr	r0, [pc, #76]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f78:	f00f ffdc 	bl	8017f34 <crs_strlen>
 8007f7c:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f7e:	b283      	uxth	r3, r0
 8007f80:	2110      	movs	r1, #16
 8007f82:	2001      	movs	r0, #1
 8007f84:	f010 f814 	bl	8017fb0 <traceIF_itmPrint>
 8007f88:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f8a:	f00f ffd3 	bl	8017f34 <crs_strlen>
 8007f8e:	4a0d      	ldr	r2, [pc, #52]	; (8007fc4 <DATAPACK_writeStruct+0xa4>)
 8007f90:	b283      	uxth	r3, r0
 8007f92:	2110      	movs	r1, #16
 8007f94:	2001      	movs	r0, #1
 8007f96:	f010 fa31 	bl	80183fc <traceIF_uartPrint>
    retvalue = DATAPACK_ERROR;
 8007f9a:	2001      	movs	r0, #1
}
 8007f9c:	b003      	add	sp, #12
 8007f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_buf[0] = (uint8_t)(msgtype >> 8);
 8007fa0:	0a33      	lsrs	r3, r6, #8
 8007fa2:	7023      	strb	r3, [r4, #0]
    p_buf[1] = (uint8_t)(msgtype & 0x00FFU);
 8007fa4:	7066      	strb	r6, [r4, #1]
    p_buf[4] = DATASTRUCT_CONTENT_TYPE;
 8007fa6:	2302      	movs	r3, #2
    p_buf[2] = (uint8_t)(size >> 8);
 8007fa8:	2600      	movs	r6, #0
 8007faa:	70a6      	strb	r6, [r4, #2]
    p_buf[3] = (uint8_t)(size & 0x00FFU);
 8007fac:	70e5      	strb	r5, [r4, #3]
    p_buf[4] = DATASTRUCT_CONTENT_TYPE;
 8007fae:	7123      	strb	r3, [r4, #4]
    (void) memcpy((void *)&p_buf[DATAPACK_HEADER_BYTE_SIZE + 1U],
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4639      	mov	r1, r7
 8007fb4:	1d60      	adds	r0, r4, #5
 8007fb6:	f014 ff41 	bl	801ce3c <memcpy>
    retvalue = DATAPACK_OK;
 8007fba:	4630      	mov	r0, r6
 8007fbc:	e7ee      	b.n	8007f9c <DATAPACK_writeStruct+0x7c>
 8007fbe:	bf00      	nop
 8007fc0:	20003530 	.word	0x20003530
 8007fc4:	20008ef8 	.word	0x20008ef8
 8007fc8:	08023dc5 	.word	0x08023dc5
 8007fcc:	08023e02 	.word	0x08023e02

08007fd0 <DATAPACK_readPtr>:
{
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4615      	mov	r5, r2
  if (p_buf == NULL)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	b9c0      	cbnz	r0, 800800a <DATAPACK_readPtr+0x3a>
    PRINT_ERR("DATAPACK_readPtr pointer error (%p)", p_buf)
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4911      	ldr	r1, [pc, #68]	; (8008020 <DATAPACK_readPtr+0x50>)
 8007fdc:	4811      	ldr	r0, [pc, #68]	; (8008024 <DATAPACK_readPtr+0x54>)
 8007fde:	f014 ff6b 	bl	801ceb8 <sprintf>
 8007fe2:	4810      	ldr	r0, [pc, #64]	; (8008024 <DATAPACK_readPtr+0x54>)
 8007fe4:	f00f ffa6 	bl	8017f34 <crs_strlen>
 8007fe8:	4a0e      	ldr	r2, [pc, #56]	; (8008024 <DATAPACK_readPtr+0x54>)
 8007fea:	b283      	uxth	r3, r0
 8007fec:	2110      	movs	r1, #16
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f00f ffde 	bl	8017fb0 <traceIF_itmPrint>
 8007ff4:	480b      	ldr	r0, [pc, #44]	; (8008024 <DATAPACK_readPtr+0x54>)
 8007ff6:	f00f ff9d 	bl	8017f34 <crs_strlen>
 8007ffa:	4a0a      	ldr	r2, [pc, #40]	; (8008024 <DATAPACK_readPtr+0x54>)
 8007ffc:	b283      	uxth	r3, r0
 8007ffe:	2110      	movs	r1, #16
 8008000:	2001      	movs	r0, #1
 8008002:	f010 f9fb 	bl	80183fc <traceIF_uartPrint>
    retval = DATAPACK_ERROR;
 8008006:	2001      	movs	r0, #1
}
 8008008:	bd38      	pop	{r3, r4, r5, pc}
    retval = check_structure_to_read(p_buf, msgtype, size, DATASTRUCT_POINTER_TYPE);
 800800a:	2301      	movs	r3, #1
 800800c:	2204      	movs	r2, #4
 800800e:	f7ff ff0b 	bl	8007e28 <check_structure_to_read>
    if (retval == DATAPACK_OK)
 8008012:	2800      	cmp	r0, #0
 8008014:	d1f8      	bne.n	8008008 <DATAPACK_readPtr+0x38>
      *p_data = sptr.structptr;
 8008016:	f8d4 3005 	ldr.w	r3, [r4, #5]
 800801a:	602b      	str	r3, [r5, #0]
 800801c:	e7f4      	b.n	8008008 <DATAPACK_readPtr+0x38>
 800801e:	bf00      	nop
 8008020:	08023e2e 	.word	0x08023e2e
 8008024:	20008ef8 	.word	0x20008ef8

08008028 <DATAPACK_readStruct>:
{
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	4606      	mov	r6, r0
 800802c:	4617      	mov	r7, r2
  if ((p_data == NULL) || (p_buf == NULL))
 800802e:	461d      	mov	r5, r3
 8008030:	b103      	cbz	r3, 8008034 <DATAPACK_readStruct+0xc>
 8008032:	b9d0      	cbnz	r0, 800806a <DATAPACK_readStruct+0x42>
    PRINT_ERR("DATAPACK_readStruct pointer error( %p, %p)", p_data, p_buf)
 8008034:	4913      	ldr	r1, [pc, #76]	; (8008084 <DATAPACK_readStruct+0x5c>)
 8008036:	4814      	ldr	r0, [pc, #80]	; (8008088 <DATAPACK_readStruct+0x60>)
 8008038:	4633      	mov	r3, r6
 800803a:	462a      	mov	r2, r5
 800803c:	f014 ff3c 	bl	801ceb8 <sprintf>
 8008040:	4811      	ldr	r0, [pc, #68]	; (8008088 <DATAPACK_readStruct+0x60>)
 8008042:	f00f ff77 	bl	8017f34 <crs_strlen>
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <DATAPACK_readStruct+0x60>)
 8008048:	b283      	uxth	r3, r0
 800804a:	2110      	movs	r1, #16
 800804c:	2001      	movs	r0, #1
 800804e:	f00f ffaf 	bl	8017fb0 <traceIF_itmPrint>
 8008052:	480d      	ldr	r0, [pc, #52]	; (8008088 <DATAPACK_readStruct+0x60>)
 8008054:	f00f ff6e 	bl	8017f34 <crs_strlen>
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <DATAPACK_readStruct+0x60>)
 800805a:	b283      	uxth	r3, r0
 800805c:	2110      	movs	r1, #16
 800805e:	2001      	movs	r0, #1
 8008060:	f010 f9cc 	bl	80183fc <traceIF_uartPrint>
    retval = DATAPACK_ERROR;
 8008064:	2401      	movs	r4, #1
}
 8008066:	4620      	mov	r0, r4
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    retval = check_structure_to_read(p_buf, msgtype, size, DATASTRUCT_CONTENT_TYPE);
 800806a:	2302      	movs	r3, #2
 800806c:	f7ff fedc 	bl	8007e28 <check_structure_to_read>
    if (retval == DATAPACK_OK)
 8008070:	4604      	mov	r4, r0
 8008072:	2800      	cmp	r0, #0
 8008074:	d1f7      	bne.n	8008066 <DATAPACK_readStruct+0x3e>
      (void) memcpy((void *)p_data,
 8008076:	463a      	mov	r2, r7
 8008078:	1d71      	adds	r1, r6, #5
 800807a:	4628      	mov	r0, r5
 800807c:	f014 fede 	bl	801ce3c <memcpy>
 8008080:	e7f1      	b.n	8008066 <DATAPACK_readStruct+0x3e>
 8008082:	bf00      	nop
 8008084:	08023e63 	.word	0x08023e63
 8008088:	20008ef8 	.word	0x20008ef8

0800808c <DATAPACK_readMsgType>:
  msgtype = ((uint16_t)p_buf[0] << 8) + (uint16_t)p_buf[1];
 800808c:	7803      	ldrb	r3, [r0, #0]
 800808e:	7840      	ldrb	r0, [r0, #1]
 8008090:	eb00 2003 	add.w	r0, r0, r3, lsl #8
}
 8008094:	b280      	uxth	r0, r0
 8008096:	4770      	bx	lr

08008098 <atcc_initParsers>:
/**
 * @brief  Initialize modem parsers.
 * @param  deviceType Device ID on which the event has been received.
 * @retval at_status_t
 */
at_status_t atcc_initParsers(sysctrl_device_type_t device_type) {
 8008098:	b570      	push	{r4, r5, r6, lr}
	at_status_t retval;

	/* check if device is already initialized */
	if (at_custom_func[device_type].initialized == 0U) {
 800809a:	2430      	movs	r4, #48	; 0x30
 800809c:	4e11      	ldr	r6, [pc, #68]	; (80080e4 <atcc_initParsers+0x4c>)
 800809e:	4344      	muls	r4, r0
at_status_t atcc_initParsers(sysctrl_device_type_t device_type) {
 80080a0:	4602      	mov	r2, r0
	if (at_custom_func[device_type].initialized == 0U) {
 80080a2:	5d35      	ldrb	r5, [r6, r4]
 80080a4:	1930      	adds	r0, r6, r4
 80080a6:	b92d      	cbnz	r5, 80080b4 <atcc_initParsers+0x1c>
		/* Init  AT functions pointers */
		atcma_init_at_func_ptrs(&at_custom_func[device_type]);
 80080a8:	f7f9 fd86 	bl	8001bb8 <atcma_init_at_func_ptrs>
		/* device is initialized now */
		at_custom_func[device_type].initialized = 1U;
 80080ac:	2301      	movs	r3, #1
 80080ae:	5533      	strb	r3, [r6, r4]
				device_type);
		retval = ATSTATUS_ERROR;
	}

	return (retval);
}
 80080b0:	4628      	mov	r0, r5
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
		PRINT_ERR("Device type %d AT functions already initialized",
 80080b4:	490c      	ldr	r1, [pc, #48]	; (80080e8 <atcc_initParsers+0x50>)
 80080b6:	480d      	ldr	r0, [pc, #52]	; (80080ec <atcc_initParsers+0x54>)
 80080b8:	f014 fefe 	bl	801ceb8 <sprintf>
 80080bc:	480b      	ldr	r0, [pc, #44]	; (80080ec <atcc_initParsers+0x54>)
 80080be:	f00f ff39 	bl	8017f34 <crs_strlen>
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <atcc_initParsers+0x54>)
 80080c4:	b283      	uxth	r3, r0
 80080c6:	2110      	movs	r1, #16
 80080c8:	2001      	movs	r0, #1
 80080ca:	f00f ff71 	bl	8017fb0 <traceIF_itmPrint>
 80080ce:	4807      	ldr	r0, [pc, #28]	; (80080ec <atcc_initParsers+0x54>)
 80080d0:	f00f ff30 	bl	8017f34 <crs_strlen>
 80080d4:	4a05      	ldr	r2, [pc, #20]	; (80080ec <atcc_initParsers+0x54>)
 80080d6:	b283      	uxth	r3, r0
 80080d8:	2110      	movs	r1, #16
 80080da:	2001      	movs	r0, #1
 80080dc:	f010 f98e 	bl	80183fc <traceIF_uartPrint>
		retval = ATSTATUS_ERROR;
 80080e0:	2501      	movs	r5, #1
 80080e2:	e7e5      	b.n	80080b0 <atcc_initParsers+0x18>
 80080e4:	20003534 	.word	0x20003534
 80080e8:	08023e9f 	.word	0x08023e9f
 80080ec:	20008ef8 	.word	0x20008ef8

080080f0 <atcc_init>:
 * @brief  Call modem initialization function.
 * @param  p_at_ctxt Pointer to the modem context.
 * @retval none
 */
void atcc_init(at_context_t *p_at_ctxt) {
	(*at_custom_func[p_at_ctxt->device_type].f_init)(&p_at_ctxt->parser);
 80080f0:	f810 3b10 	ldrb.w	r3, [r0], #16
 80080f4:	4a02      	ldr	r2, [pc, #8]	; (8008100 <atcc_init+0x10>)
 80080f6:	2130      	movs	r1, #48	; 0x30
 80080f8:	fb01 2303 	mla	r3, r1, r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4718      	bx	r3
 8008100:	20003534 	.word	0x20003534

08008104 <atcc_checkEndOfMsgCallback>:
 * @retval none
 */
ATC_checkEndOfMsgCallbackTypeDef atcc_checkEndOfMsgCallback(
		const at_context_t *p_at_ctxt) {
	/* called under interruption, do not put trace here */
	return (at_custom_func[p_at_ctxt->device_type].f_checkEndOfMsgCallback);
 8008104:	7803      	ldrb	r3, [r0, #0]
 8008106:	4a03      	ldr	r2, [pc, #12]	; (8008114 <atcc_checkEndOfMsgCallback+0x10>)
 8008108:	2130      	movs	r1, #48	; 0x30
 800810a:	fb01 2303 	mla	r3, r1, r3, r2
}
 800810e:	6898      	ldr	r0, [r3, #8]
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20003534 	.word	0x20003534

08008118 <atcc_getCmd>:
 * @note   This functions can be called many times for a service if required.
 * @param  p_at_ctxt Pointer to the modem context.
 * @param  p_ATcmdTimeout Timeout value to apply for this command.
 * @retval at_status_t
 */
at_status_t atcc_getCmd(at_context_t *p_at_ctxt, uint32_t *p_ATcmdTimeout) {
 8008118:	b538      	push	{r3, r4, r5, lr}
	at_status_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_getCmd)(p_at_ctxt,
 800811a:	4a11      	ldr	r2, [pc, #68]	; (8008160 <atcc_getCmd+0x48>)
 800811c:	7803      	ldrb	r3, [r0, #0]
 800811e:	2430      	movs	r4, #48	; 0x30
 8008120:	fb04 2303 	mla	r3, r4, r3, r2
			p_ATcmdTimeout);

	PRINT_DBG("atcc_getCmd returned status = %d", retval)
 8008124:	4c0f      	ldr	r4, [pc, #60]	; (8008164 <atcc_getCmd+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_getCmd)(p_at_ctxt,
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4798      	blx	r3
	PRINT_DBG("atcc_getCmd returned status = %d", retval)
 800812a:	490f      	ldr	r1, [pc, #60]	; (8008168 <atcc_getCmd+0x50>)
 800812c:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_getCmd)(p_at_ctxt,
 800812e:	4605      	mov	r5, r0
	PRINT_DBG("atcc_getCmd returned status = %d", retval)
 8008130:	4620      	mov	r0, r4
 8008132:	f014 fec1 	bl	801ceb8 <sprintf>
 8008136:	4620      	mov	r0, r4
 8008138:	f00f fefc 	bl	8017f34 <crs_strlen>
 800813c:	4622      	mov	r2, r4
 800813e:	b283      	uxth	r3, r0
 8008140:	2102      	movs	r1, #2
 8008142:	2001      	movs	r0, #1
 8008144:	f00f ff34 	bl	8017fb0 <traceIF_itmPrint>
 8008148:	4620      	mov	r0, r4
 800814a:	f00f fef3 	bl	8017f34 <crs_strlen>
 800814e:	4622      	mov	r2, r4
 8008150:	b283      	uxth	r3, r0
 8008152:	2102      	movs	r1, #2
 8008154:	2001      	movs	r0, #1
 8008156:	f010 f951 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 800815a:	4628      	mov	r0, r5
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20003534 	.word	0x20003534
 8008164:	20008ef8 	.word	0x20008ef8
 8008168:	08023ee0 	.word	0x08023ee0

0800816c <atcc_extractElement>:
 * @param  p_msg_in Pointer to the received message.
 * @param  element_infos Pointer to the structure with extracted information.
 * @retval at_endmsg_t Indicates if this is the last message.
 */
at_endmsg_t atcc_extractElement(at_context_t *p_at_ctxt,
		const IPC_RxMessage_t *p_msg_in, at_element_info_t *element_infos) {
 800816c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	at_endmsg_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_extractElement)(
 800816e:	4c21      	ldr	r4, [pc, #132]	; (80081f4 <atcc_extractElement+0x88>)
 8008170:	f810 3b10 	ldrb.w	r3, [r0], #16
 8008174:	2630      	movs	r6, #48	; 0x30
 8008176:	fb06 4303 	mla	r3, r6, r3, r4
		const IPC_RxMessage_t *p_msg_in, at_element_info_t *element_infos) {
 800817a:	4615      	mov	r5, r2
	retval = (*at_custom_func[p_at_ctxt->device_type].f_extractElement)(
 800817c:	691b      	ldr	r3, [r3, #16]
			&p_at_ctxt->parser, p_msg_in, element_infos);

	PRINT_DBG("start idx=%d  end idx=%d  size=%d rank=%d",
 800817e:	4c1e      	ldr	r4, [pc, #120]	; (80081f8 <atcc_extractElement+0x8c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_extractElement)(
 8008180:	4798      	blx	r3
	PRINT_DBG("start idx=%d  end idx=%d  size=%d rank=%d",
 8008182:	892b      	ldrh	r3, [r5, #8]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	89eb      	ldrh	r3, [r5, #14]
 8008188:	896a      	ldrh	r2, [r5, #10]
 800818a:	491c      	ldr	r1, [pc, #112]	; (80081fc <atcc_extractElement+0x90>)
 800818c:	9300      	str	r3, [sp, #0]
	retval = (*at_custom_func[p_at_ctxt->device_type].f_extractElement)(
 800818e:	4606      	mov	r6, r0
	PRINT_DBG("start idx=%d  end idx=%d  size=%d rank=%d",
 8008190:	89ab      	ldrh	r3, [r5, #12]
 8008192:	4620      	mov	r0, r4
 8008194:	f014 fe90 	bl	801ceb8 <sprintf>
 8008198:	4620      	mov	r0, r4
 800819a:	f00f fecb 	bl	8017f34 <crs_strlen>
 800819e:	4622      	mov	r2, r4
 80081a0:	b283      	uxth	r3, r0
 80081a2:	2102      	movs	r1, #2
 80081a4:	2001      	movs	r0, #1
 80081a6:	f00f ff03 	bl	8017fb0 <traceIF_itmPrint>
 80081aa:	4620      	mov	r0, r4
 80081ac:	f00f fec2 	bl	8017f34 <crs_strlen>
 80081b0:	4622      	mov	r2, r4
 80081b2:	b283      	uxth	r3, r0
 80081b4:	2102      	movs	r1, #2
 80081b6:	2001      	movs	r0, #1
 80081b8:	f010 f920 	bl	80183fc <traceIF_uartPrint>
			element_infos->str_start_idx, element_infos->str_end_idx,
			element_infos->str_size, element_infos->param_rank)
	PRINT_DBG("atcc_extractElement returned endmsg = %d",
 80081bc:	fab6 f286 	clz	r2, r6
 80081c0:	490f      	ldr	r1, [pc, #60]	; (8008200 <atcc_extractElement+0x94>)
 80081c2:	0952      	lsrs	r2, r2, #5
 80081c4:	4620      	mov	r0, r4
 80081c6:	f014 fe77 	bl	801ceb8 <sprintf>
 80081ca:	4620      	mov	r0, r4
 80081cc:	f00f feb2 	bl	8017f34 <crs_strlen>
 80081d0:	4622      	mov	r2, r4
 80081d2:	b283      	uxth	r3, r0
 80081d4:	2102      	movs	r1, #2
 80081d6:	2001      	movs	r0, #1
 80081d8:	f00f feea 	bl	8017fb0 <traceIF_itmPrint>
 80081dc:	4620      	mov	r0, r4
 80081de:	f00f fea9 	bl	8017f34 <crs_strlen>
 80081e2:	4622      	mov	r2, r4
 80081e4:	b283      	uxth	r3, r0
 80081e6:	2102      	movs	r1, #2
 80081e8:	2001      	movs	r0, #1
 80081ea:	f010 f907 	bl	80183fc <traceIF_uartPrint>
			(retval == ATENDMSG_YES) ? 1 : 0)
	return (retval);
}
 80081ee:	4630      	mov	r0, r6
 80081f0:	b002      	add	sp, #8
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	20003534 	.word	0x20003534
 80081f8:	20008ef8 	.word	0x20008ef8
 80081fc:	08023f0c 	.word	0x08023f0c
 8008200:	08023f41 	.word	0x08023f41

08008204 <atcc_analyzeCmd>:
 * @param  p_msg_in Pointer to the received message.
 * @param  element_infos Pointer to the structure with extracted information.
 * @retval at_action_rsp_t Indicates next action.
 */
at_action_rsp_t atcc_analyzeCmd(at_context_t *p_at_ctxt,
		const IPC_RxMessage_t *p_msg_in, at_element_info_t *element_infos) {
 8008204:	b538      	push	{r3, r4, r5, lr}
	at_action_rsp_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_analyzeCmd)(p_at_ctxt,
 8008206:	4c11      	ldr	r4, [pc, #68]	; (800824c <atcc_analyzeCmd+0x48>)
 8008208:	7803      	ldrb	r3, [r0, #0]
 800820a:	2530      	movs	r5, #48	; 0x30
 800820c:	fb05 4303 	mla	r3, r5, r3, r4
			p_msg_in, element_infos);

	PRINT_DBG("atcc_analyzeCmd returned action = 0x%x", retval)
 8008210:	4c0f      	ldr	r4, [pc, #60]	; (8008250 <atcc_analyzeCmd+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_analyzeCmd)(p_at_ctxt,
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	4798      	blx	r3
	PRINT_DBG("atcc_analyzeCmd returned action = 0x%x", retval)
 8008216:	490f      	ldr	r1, [pc, #60]	; (8008254 <atcc_analyzeCmd+0x50>)
 8008218:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_analyzeCmd)(p_at_ctxt,
 800821a:	4605      	mov	r5, r0
	PRINT_DBG("atcc_analyzeCmd returned action = 0x%x", retval)
 800821c:	4620      	mov	r0, r4
 800821e:	f014 fe4b 	bl	801ceb8 <sprintf>
 8008222:	4620      	mov	r0, r4
 8008224:	f00f fe86 	bl	8017f34 <crs_strlen>
 8008228:	4622      	mov	r2, r4
 800822a:	b283      	uxth	r3, r0
 800822c:	2102      	movs	r1, #2
 800822e:	2001      	movs	r0, #1
 8008230:	f00f febe 	bl	8017fb0 <traceIF_itmPrint>
 8008234:	4620      	mov	r0, r4
 8008236:	f00f fe7d 	bl	8017f34 <crs_strlen>
 800823a:	4622      	mov	r2, r4
 800823c:	b283      	uxth	r3, r0
 800823e:	2102      	movs	r1, #2
 8008240:	2001      	movs	r0, #1
 8008242:	f010 f8db 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 8008246:	4628      	mov	r0, r5
 8008248:	bd38      	pop	{r3, r4, r5, pc}
 800824a:	bf00      	nop
 800824c:	20003534 	.word	0x20003534
 8008250:	20008ef8 	.word	0x20008ef8
 8008254:	08023f75 	.word	0x08023f75

08008258 <atcc_analyzeParam>:
 * @param  p_msg_in Pointer to the received message.
 * @param  element_infos Pointer to the structure with extracted information.
 * @retval at_action_rsp_t Indicates next action.
 */
at_action_rsp_t atcc_analyzeParam(at_context_t *p_at_ctxt,
		const IPC_RxMessage_t *p_msg_in, at_element_info_t *element_infos) {
 8008258:	b538      	push	{r3, r4, r5, lr}
	at_action_rsp_t retval_final;

	retval_final = (*at_custom_func[p_at_ctxt->device_type].f_analyzeParam)(
 800825a:	4c11      	ldr	r4, [pc, #68]	; (80082a0 <atcc_analyzeParam+0x48>)
 800825c:	7803      	ldrb	r3, [r0, #0]
 800825e:	2530      	movs	r5, #48	; 0x30
 8008260:	fb05 4303 	mla	r3, r5, r3, r4
			p_at_ctxt, p_msg_in, element_infos);

	PRINT_DBG("atcc_analyzeParam returned action = 0x%x", retval_final)
 8008264:	4c0f      	ldr	r4, [pc, #60]	; (80082a4 <atcc_analyzeParam+0x4c>)
	retval_final = (*at_custom_func[p_at_ctxt->device_type].f_analyzeParam)(
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	4798      	blx	r3
	PRINT_DBG("atcc_analyzeParam returned action = 0x%x", retval_final)
 800826a:	490f      	ldr	r1, [pc, #60]	; (80082a8 <atcc_analyzeParam+0x50>)
 800826c:	4602      	mov	r2, r0
	retval_final = (*at_custom_func[p_at_ctxt->device_type].f_analyzeParam)(
 800826e:	4605      	mov	r5, r0
	PRINT_DBG("atcc_analyzeParam returned action = 0x%x", retval_final)
 8008270:	4620      	mov	r0, r4
 8008272:	f014 fe21 	bl	801ceb8 <sprintf>
 8008276:	4620      	mov	r0, r4
 8008278:	f00f fe5c 	bl	8017f34 <crs_strlen>
 800827c:	4622      	mov	r2, r4
 800827e:	b283      	uxth	r3, r0
 8008280:	2102      	movs	r1, #2
 8008282:	2001      	movs	r0, #1
 8008284:	f00f fe94 	bl	8017fb0 <traceIF_itmPrint>
 8008288:	4620      	mov	r0, r4
 800828a:	f00f fe53 	bl	8017f34 <crs_strlen>
 800828e:	4622      	mov	r2, r4
 8008290:	b283      	uxth	r3, r0
 8008292:	2102      	movs	r1, #2
 8008294:	2001      	movs	r0, #1
 8008296:	f010 f8b1 	bl	80183fc <traceIF_uartPrint>
	return (retval_final);
}
 800829a:	4628      	mov	r0, r5
 800829c:	bd38      	pop	{r3, r4, r5, pc}
 800829e:	bf00      	nop
 80082a0:	20003534 	.word	0x20003534
 80082a4:	20008ef8 	.word	0x20008ef8
 80082a8:	08023fa7 	.word	0x08023fa7

080082ac <atcc_terminateCmd>:
 * @param  p_at_ctxt Pointer to the modem context.
 * @param  element_infos Pointer to the structure with extracted information.
 * @retval at_action_rsp_t Indicates next action.
 */
at_action_rsp_t atcc_terminateCmd(at_context_t *p_at_ctxt,
		at_element_info_t *element_infos) {
 80082ac:	b538      	push	{r3, r4, r5, lr}
	at_action_rsp_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_terminateCmd)(
 80082ae:	4a11      	ldr	r2, [pc, #68]	; (80082f4 <atcc_terminateCmd+0x48>)
 80082b0:	f810 3b10 	ldrb.w	r3, [r0], #16
 80082b4:	2430      	movs	r4, #48	; 0x30
 80082b6:	fb04 2303 	mla	r3, r4, r3, r2
			&p_at_ctxt->parser, element_infos);

	PRINT_DBG("atcc_terminateCmd returned action = 0x%x", retval)
 80082ba:	4c0f      	ldr	r4, [pc, #60]	; (80082f8 <atcc_terminateCmd+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_terminateCmd)(
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4798      	blx	r3
	PRINT_DBG("atcc_terminateCmd returned action = 0x%x", retval)
 80082c0:	490e      	ldr	r1, [pc, #56]	; (80082fc <atcc_terminateCmd+0x50>)
 80082c2:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_terminateCmd)(
 80082c4:	4605      	mov	r5, r0
	PRINT_DBG("atcc_terminateCmd returned action = 0x%x", retval)
 80082c6:	4620      	mov	r0, r4
 80082c8:	f014 fdf6 	bl	801ceb8 <sprintf>
 80082cc:	4620      	mov	r0, r4
 80082ce:	f00f fe31 	bl	8017f34 <crs_strlen>
 80082d2:	4622      	mov	r2, r4
 80082d4:	b283      	uxth	r3, r0
 80082d6:	2102      	movs	r1, #2
 80082d8:	2001      	movs	r0, #1
 80082da:	f00f fe69 	bl	8017fb0 <traceIF_itmPrint>
 80082de:	4620      	mov	r0, r4
 80082e0:	f00f fe28 	bl	8017f34 <crs_strlen>
 80082e4:	4622      	mov	r2, r4
 80082e6:	b283      	uxth	r3, r0
 80082e8:	2102      	movs	r1, #2
 80082ea:	2001      	movs	r0, #1
 80082ec:	f010 f886 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 80082f0:	4628      	mov	r0, r5
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20003534 	.word	0x20003534
 80082f8:	20008ef8 	.word	0x20008ef8
 80082fc:	08023fdb 	.word	0x08023fdb

08008300 <atcc_get_rsp>:
 * @brief  Call modem function to retrieve modem response to a send command.
 * @param  p_at_ctxt Pointer to the modem context.
 * @param  p_rsp_buf Pointer to the buffer to return the message.
 * @retval at_status_t
 */
at_status_t atcc_get_rsp(at_context_t *p_at_ctxt, at_buf_t *p_rsp_buf) {
 8008300:	b538      	push	{r3, r4, r5, lr}
	at_status_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_rsp)(
 8008302:	4a11      	ldr	r2, [pc, #68]	; (8008348 <atcc_get_rsp+0x48>)
 8008304:	f810 3b10 	ldrb.w	r3, [r0], #16
 8008308:	2430      	movs	r4, #48	; 0x30
 800830a:	fb04 2303 	mla	r3, r4, r3, r2
			&p_at_ctxt->parser, p_rsp_buf);

	PRINT_DBG("atcc_get_rsp returned status = %d", retval)
 800830e:	4c0f      	ldr	r4, [pc, #60]	; (800834c <atcc_get_rsp+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_rsp)(
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	4798      	blx	r3
	PRINT_DBG("atcc_get_rsp returned status = %d", retval)
 8008314:	490e      	ldr	r1, [pc, #56]	; (8008350 <atcc_get_rsp+0x50>)
 8008316:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_rsp)(
 8008318:	4605      	mov	r5, r0
	PRINT_DBG("atcc_get_rsp returned status = %d", retval)
 800831a:	4620      	mov	r0, r4
 800831c:	f014 fdcc 	bl	801ceb8 <sprintf>
 8008320:	4620      	mov	r0, r4
 8008322:	f00f fe07 	bl	8017f34 <crs_strlen>
 8008326:	4622      	mov	r2, r4
 8008328:	b283      	uxth	r3, r0
 800832a:	2102      	movs	r1, #2
 800832c:	2001      	movs	r0, #1
 800832e:	f00f fe3f 	bl	8017fb0 <traceIF_itmPrint>
 8008332:	4620      	mov	r0, r4
 8008334:	f00f fdfe 	bl	8017f34 <crs_strlen>
 8008338:	4622      	mov	r2, r4
 800833a:	b283      	uxth	r3, r0
 800833c:	2102      	movs	r1, #2
 800833e:	2001      	movs	r0, #1
 8008340:	f010 f85c 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 8008344:	4628      	mov	r0, r5
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	20003534 	.word	0x20003534
 800834c:	20008ef8 	.word	0x20008ef8
 8008350:	0802400f 	.word	0x0802400f

08008354 <atcc_get_urc>:
 * @brief  Call modem function to retrieve modem URC.
 * @param  p_at_ctxt Pointer to the modem context.
 * @param  p_rsp_buf Pointer to the buffer to return the message.
 * @retval at_status_t
 */
at_status_t atcc_get_urc(at_context_t *p_at_ctxt, at_buf_t *p_rsp_buf) {
 8008354:	b538      	push	{r3, r4, r5, lr}
	at_status_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_urc)(
 8008356:	4a11      	ldr	r2, [pc, #68]	; (800839c <atcc_get_urc+0x48>)
 8008358:	f810 3b10 	ldrb.w	r3, [r0], #16
 800835c:	2430      	movs	r4, #48	; 0x30
 800835e:	fb04 2303 	mla	r3, r4, r3, r2
			&p_at_ctxt->parser, p_rsp_buf);

	PRINT_DBG("atcc_get_urc returned status = %d", retval)
 8008362:	4c0f      	ldr	r4, [pc, #60]	; (80083a0 <atcc_get_urc+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_urc)(
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	4798      	blx	r3
	PRINT_DBG("atcc_get_urc returned status = %d", retval)
 8008368:	490e      	ldr	r1, [pc, #56]	; (80083a4 <atcc_get_urc+0x50>)
 800836a:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_urc)(
 800836c:	4605      	mov	r5, r0
	PRINT_DBG("atcc_get_urc returned status = %d", retval)
 800836e:	4620      	mov	r0, r4
 8008370:	f014 fda2 	bl	801ceb8 <sprintf>
 8008374:	4620      	mov	r0, r4
 8008376:	f00f fddd 	bl	8017f34 <crs_strlen>
 800837a:	4622      	mov	r2, r4
 800837c:	b283      	uxth	r3, r0
 800837e:	2102      	movs	r1, #2
 8008380:	2001      	movs	r0, #1
 8008382:	f00f fe15 	bl	8017fb0 <traceIF_itmPrint>
 8008386:	4620      	mov	r0, r4
 8008388:	f00f fdd4 	bl	8017f34 <crs_strlen>
 800838c:	4622      	mov	r2, r4
 800838e:	b283      	uxth	r3, r0
 8008390:	2102      	movs	r1, #2
 8008392:	2001      	movs	r0, #1
 8008394:	f010 f832 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 8008398:	4628      	mov	r0, r5
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20003534 	.word	0x20003534
 80083a0:	20008ef8 	.word	0x20008ef8
 80083a4:	0802403c 	.word	0x0802403c

080083a8 <atcc_get_error>:
 * @brief  Call modem function to retrieve modem error.
 * @param  p_at_ctxt Pointer to the modem context.
 * @param  p_rsp_buf Pointer to the buffer to return the message.
 * @retval at_status_t
 */
at_status_t atcc_get_error(at_context_t *p_at_ctxt, at_buf_t *p_rsp_buf) {
 80083a8:	b538      	push	{r3, r4, r5, lr}
	at_status_t retval;

	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_error)(
 80083aa:	4a11      	ldr	r2, [pc, #68]	; (80083f0 <atcc_get_error+0x48>)
 80083ac:	f810 3b10 	ldrb.w	r3, [r0], #16
 80083b0:	2430      	movs	r4, #48	; 0x30
 80083b2:	fb04 2303 	mla	r3, r4, r3, r2
			&p_at_ctxt->parser, p_rsp_buf);

	PRINT_DBG("atcc_get_error returned status = %d", retval)
 80083b6:	4c0f      	ldr	r4, [pc, #60]	; (80083f4 <atcc_get_error+0x4c>)
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_error)(
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	4798      	blx	r3
	PRINT_DBG("atcc_get_error returned status = %d", retval)
 80083bc:	490e      	ldr	r1, [pc, #56]	; (80083f8 <atcc_get_error+0x50>)
 80083be:	4602      	mov	r2, r0
	retval = (*at_custom_func[p_at_ctxt->device_type].f_get_error)(
 80083c0:	4605      	mov	r5, r0
	PRINT_DBG("atcc_get_error returned status = %d", retval)
 80083c2:	4620      	mov	r0, r4
 80083c4:	f014 fd78 	bl	801ceb8 <sprintf>
 80083c8:	4620      	mov	r0, r4
 80083ca:	f00f fdb3 	bl	8017f34 <crs_strlen>
 80083ce:	4622      	mov	r2, r4
 80083d0:	b283      	uxth	r3, r0
 80083d2:	2102      	movs	r1, #2
 80083d4:	2001      	movs	r0, #1
 80083d6:	f00f fdeb 	bl	8017fb0 <traceIF_itmPrint>
 80083da:	4620      	mov	r0, r4
 80083dc:	f00f fdaa 	bl	8017f34 <crs_strlen>
 80083e0:	4622      	mov	r2, r4
 80083e2:	b283      	uxth	r3, r0
 80083e4:	2102      	movs	r1, #2
 80083e6:	2001      	movs	r0, #1
 80083e8:	f010 f808 	bl	80183fc <traceIF_uartPrint>
	return (retval);
}
 80083ec:	4628      	mov	r0, r5
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20003534 	.word	0x20003534
 80083f4:	20008ef8 	.word	0x20008ef8
 80083f8:	08024069 	.word	0x08024069

080083fc <atcc_hw_event>:
void atcc_hw_event(sysctrl_device_type_t deviceType, at_hw_event_t hwEvent,
		GPIO_PinState gstate) {
	/* Do not add traces (called under interrupt if GPIO event)
	 * device type = modem
	 */
	if (deviceType == DEVTYPE_MODEM_CELLULAR) {
 80083fc:	b910      	cbnz	r0, 8008404 <atcc_hw_event+0x8>
		(void) (*at_custom_func[DEVTYPE_MODEM_CELLULAR].f_hw_event)(deviceType,
 80083fe:	4b02      	ldr	r3, [pc, #8]	; (8008408 <atcc_hw_event+0xc>)
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	4718      	bx	r3
				hwEvent, gstate);
	}
}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20003534 	.word	0x20003534

0800840c <atcm_put_IP_address_infos>:
  * @retval none
  */
void atcm_put_IP_address_infos(atcustom_persistent_context_t *p_persistent_ctxt,
                               uint8_t modem_cid,
                               csint_ip_addr_info_t *ip_addr_info)
{
 800840c:	b4f0      	push	{r4, r5, r6, r7}
 800840e:	460d      	mov	r5, r1
 8008410:	2400      	movs	r4, #0
 8008412:	4611      	mov	r1, r2
  uint8_t i = 0U;
  do
  {
    atcustom_modem_cid_table_t *p_tmp;
    p_tmp = &p_persistent_ctxt->modem_cid_table[i];
    if (p_tmp->mdm_cid_value == modem_cid)
 8008414:	2644      	movs	r6, #68	; 0x44
 8008416:	f200 325a 	addw	r2, r0, #858	; 0x35a
 800841a:	fb06 f304 	mul.w	r3, r6, r4
 800841e:	5cd7      	ldrb	r7, [r2, r3]
 8008420:	42af      	cmp	r7, r5
 8008422:	d004      	beq.n	800842e <atcm_put_IP_address_infos+0x22>
                    (void *)ip_addr_info,
                    sizeof(csint_ip_addr_info_t));
      leave_loop = true;
    }
    i++;
  } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8008424:	3401      	adds	r4, #1
 8008426:	2c06      	cmp	r4, #6
 8008428:	d1f7      	bne.n	800841a <atcm_put_IP_address_infos+0xe>

  return;
}
 800842a:	bcf0      	pop	{r4, r5, r6, r7}
 800842c:	4770      	bx	lr
      (void) memcpy((void *)& p_tmp->ip_addr_infos,
 800842e:	f203 335d 	addw	r3, r3, #861	; 0x35d
}
 8008432:	bcf0      	pop	{r4, r5, r6, r7}
      (void) memcpy((void *)& p_tmp->ip_addr_infos,
 8008434:	2241      	movs	r2, #65	; 0x41
 8008436:	4418      	add	r0, r3
 8008438:	f014 bd00 	b.w	801ce3c <memcpy>

0800843c <atcm_get_IP_address_infos>:
  * @retval none
  */
void atcm_get_IP_address_infos(atcustom_persistent_context_t *p_persistent_ctxt,
                               CS_PDN_conf_id_t conf_id,
                               csint_ip_addr_info_t  *ip_addr_info)
{
 800843c:	b4f0      	push	{r4, r5, r6, r7}
 800843e:	4604      	mov	r4, r0
 8008440:	2500      	movs	r5, #0
 8008442:	4610      	mov	r0, r2
  uint8_t i = 0U;
  do
  {
    atcustom_modem_cid_table_t *p_tmp;
    p_tmp = &p_persistent_ctxt->modem_cid_table[i];
    if (p_tmp->affected_config == conf_id)
 8008444:	2644      	movs	r6, #68	; 0x44
 8008446:	f504 7257 	add.w	r2, r4, #860	; 0x35c
 800844a:	fb06 f305 	mul.w	r3, r6, r5
 800844e:	5cd7      	ldrb	r7, [r2, r3]
 8008450:	428f      	cmp	r7, r1
 8008452:	d004      	beq.n	800845e <atcm_get_IP_address_infos+0x22>
                    (void *)& p_tmp->ip_addr_infos,
                    sizeof(csint_ip_addr_info_t));
      leave_loop = true;
    }
    i++;
  } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8008454:	3501      	adds	r5, #1
 8008456:	2d06      	cmp	r5, #6
 8008458:	d1f7      	bne.n	800844a <atcm_get_IP_address_infos+0xe>

  return;
}
 800845a:	bcf0      	pop	{r4, r5, r6, r7}
 800845c:	4770      	bx	lr
                    (void *)& p_tmp->ip_addr_infos,
 800845e:	f203 315d 	addw	r1, r3, #861	; 0x35d
      (void) memcpy((void *)ip_addr_info,
 8008462:	4421      	add	r1, r4
 8008464:	2241      	movs	r2, #65	; 0x41
}
 8008466:	bcf0      	pop	{r4, r5, r6, r7}
      (void) memcpy((void *)ip_addr_info,
 8008468:	f014 bce8 	b.w	801ce3c <memcpy>

0800846c <atcm_get_ip_address_type>:
  * @brief  Get IP Address type
  * @param  p_addr_str
  * @retval CS_IPaddrType_t
  */
CS_IPaddrType_t atcm_get_ip_address_type(AT_CHAR_t *p_addr_str)
{
 800846c:	b510      	push	{r4, lr}
  *                According to 3GP TS27.007, IPv6 can also use IPv4-like dot-notation:
  *                format= a1.a2.a3.a4.a5a.a6.a7.a8.a9.a10.a11.a12a.a13.a14.a15.a16  (where 0<=ax<=255)
  *                (max string size = 63 characters )
  *
  */
  if (p_addr_str != NULL)
 800846e:	4604      	mov	r4, r0
 8008470:	b1e0      	cbz	r0, 80084ac <atcm_get_ip_address_type+0x40>
  {
    uint8_t str_size_cpt = (uint8_t) strlen((const CRC_CHAR_t *)p_addr_str);
 8008472:	f7f7 fecf 	bl	8000214 <strlen>
 8008476:	b2c0      	uxtb	r0, r0
    str_size_cpt = (str_size_cpt > 39U) ? 39U : str_size_cpt;
 8008478:	2827      	cmp	r0, #39	; 0x27
    uint8_t count_dots = 0U;
    uint8_t count_colons = 0U;
 800847a:	f04f 0300 	mov.w	r3, #0
    str_size_cpt = (str_size_cpt > 39U) ? 39U : str_size_cpt;
 800847e:	bf28      	it	cs
 8008480:	2027      	movcs	r0, #39	; 0x27
    const AT_CHAR_t *pTmp = p_addr_str;
 8008482:	3c01      	subs	r4, #1
    uint8_t count_dots = 0U;
 8008484:	461a      	mov	r2, r3

    do
    {
      if (*pTmp == ((AT_CHAR_t)'.'))
 8008486:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800848a:	292e      	cmp	r1, #46	; 0x2e
 800848c:	d10f      	bne.n	80084ae <atcm_get_ip_address_type+0x42>
      {
        count_dots++;
 800848e:	3201      	adds	r2, #1
 8008490:	b2d2      	uxtb	r2, r2
      {
        /* nothing to do - MISRA */
      }
      /* next character */
      pTmp++;
      str_size_cpt--;
 8008492:	3801      	subs	r0, #1
    }  while (str_size_cpt > 0U);
 8008494:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8008498:	d1f5      	bne.n	8008486 <atcm_get_ip_address_type+0x1a>

    /* analyze result */
    if ((count_dots >= 1U) && (count_dots <= 3U))
 800849a:	1e51      	subs	r1, r2, #1
 800849c:	2902      	cmp	r1, #2
 800849e:	d90b      	bls.n	80084b8 <atcm_get_ip_address_type+0x4c>
    {
      retval = CS_IPAT_IPV4;
    }
    else if (((count_colons >= 1U) && (count_colons <= 7U)) ||
 80084a0:	3b01      	subs	r3, #1
 80084a2:	2b06      	cmp	r3, #6
 80084a4:	d90a      	bls.n	80084bc <atcm_get_ip_address_type+0x50>
             (count_dots > 3U))
    {
      retval = CS_IPAT_IPV6;
 80084a6:	2a04      	cmp	r2, #4
 80084a8:	bf28      	it	cs
 80084aa:	2002      	movcs	r0, #2
  {
    retval = CS_IPAT_INVALID;
  }

  return (retval);
}
 80084ac:	bd10      	pop	{r4, pc}
      else if (*pTmp == ((AT_CHAR_t)':'))
 80084ae:	293a      	cmp	r1, #58	; 0x3a
        count_colons++;
 80084b0:	bf04      	itt	eq
 80084b2:	3301      	addeq	r3, #1
 80084b4:	b2db      	uxtbeq	r3, r3
 80084b6:	e7ec      	b.n	8008492 <atcm_get_ip_address_type+0x26>
      retval = CS_IPAT_IPV4;
 80084b8:	2001      	movs	r0, #1
 80084ba:	e7f7      	b.n	80084ac <atcm_get_ip_address_type+0x40>
      retval = CS_IPAT_IPV6;
 80084bc:	2002      	movs	r0, #2
 80084be:	e7f5      	b.n	80084ac <atcm_get_ip_address_type+0x40>

080084c0 <atcm_select_hw_simslot>:
  /* step 1:
  * convert sim slot from "Cellulat Service format" to "SysCtrl format"
  */
  sysctrl_sim_slot_t converted_sim;

  switch (sim)
 80084c0:	2802      	cmp	r0, #2
{
 80084c2:	b508      	push	{r3, lr}
 80084c4:	4601      	mov	r1, r0
 80084c6:	d916      	bls.n	80084f6 <atcm_select_hw_simslot+0x36>
    case CS_STM32_SIM_2:
      converted_sim = SC_STM32_SIM_2;
      break;
    default:
      converted_sim = SC_MODEM_SIM_SOCKET_0;
      PRINT_ERR("Invalid sim slot value, use default one")
 80084c8:	490e      	ldr	r1, [pc, #56]	; (8008504 <atcm_select_hw_simslot+0x44>)
 80084ca:	480f      	ldr	r0, [pc, #60]	; (8008508 <atcm_select_hw_simslot+0x48>)
 80084cc:	f014 fd64 	bl	801cf98 <strcpy>
 80084d0:	480d      	ldr	r0, [pc, #52]	; (8008508 <atcm_select_hw_simslot+0x48>)
 80084d2:	f00f fd2f 	bl	8017f34 <crs_strlen>
 80084d6:	4a0c      	ldr	r2, [pc, #48]	; (8008508 <atcm_select_hw_simslot+0x48>)
 80084d8:	b283      	uxth	r3, r0
 80084da:	2110      	movs	r1, #16
 80084dc:	2001      	movs	r0, #1
 80084de:	f00f fd67 	bl	8017fb0 <traceIF_itmPrint>
 80084e2:	4809      	ldr	r0, [pc, #36]	; (8008508 <atcm_select_hw_simslot+0x48>)
 80084e4:	f00f fd26 	bl	8017f34 <crs_strlen>
 80084e8:	2110      	movs	r1, #16
 80084ea:	b283      	uxth	r3, r0
 80084ec:	4a06      	ldr	r2, [pc, #24]	; (8008508 <atcm_select_hw_simslot+0x48>)
 80084ee:	2001      	movs	r0, #1
 80084f0:	f00f ff84 	bl	80183fc <traceIF_uartPrint>
      converted_sim = SC_MODEM_SIM_SOCKET_0;
 80084f4:	2100      	movs	r1, #0
  }

  /* step 2:
  * call sysctrl interface
  */
  if (SysCtrl_sim_select(DEVTYPE_MODEM_CELLULAR, converted_sim) != SCSTATUS_OK)
 80084f6:	2000      	movs	r0, #0
 80084f8:	f006 fada 	bl	800eab0 <SysCtrl_sim_select>
  {
    retval = ATSTATUS_ERROR;
  }

  return (retval);
}
 80084fc:	3800      	subs	r0, #0
 80084fe:	bf18      	it	ne
 8008500:	2001      	movne	r0, #1
 8008502:	bd08      	pop	{r3, pc}
 8008504:	08024098 	.word	0x08024098
 8008508:	20008ef8 	.word	0x20008ef8

0800850c <atcm_get_cid_current_SID>:
  * @brief  Get conf_ig in current SID context (interpret default if needed)
  * @param  p_modem_ctxt
  * @retval CS_PDN_conf_id_t
  */
CS_PDN_conf_id_t atcm_get_cid_current_SID(atcustom_modem_context_t *p_modem_ctxt)
{
 800850c:	b510      	push	{r4, lr}
  /* get conf_id received for current SID */
  CS_PDN_conf_id_t current_conf_id = p_modem_ctxt->SID_ctxt.pdn_conf_id;
 800850e:	f890 46e1 	ldrb.w	r4, [r0, #1761]	; 0x6e1

  /* if default PDN is required, retrieve corresponding conf_id */
  if (current_conf_id == CS_PDN_CONFIG_DEFAULT)
 8008512:	2c0b      	cmp	r4, #11
 8008514:	d118      	bne.n	8008548 <atcm_get_cid_current_SID+0x3c>
  {
    current_conf_id = p_modem_ctxt->persist.pdn_default_conf_id;
 8008516:	f890 44fe 	ldrb.w	r4, [r0, #1278]	; 0x4fe
    PRINT_DBG("Default PDP context selected (conf_id = %d)", current_conf_id)
 800851a:	490c      	ldr	r1, [pc, #48]	; (800854c <atcm_get_cid_current_SID+0x40>)
 800851c:	480c      	ldr	r0, [pc, #48]	; (8008550 <atcm_get_cid_current_SID+0x44>)
 800851e:	4622      	mov	r2, r4
 8008520:	f014 fcca 	bl	801ceb8 <sprintf>
 8008524:	480a      	ldr	r0, [pc, #40]	; (8008550 <atcm_get_cid_current_SID+0x44>)
 8008526:	f00f fd05 	bl	8017f34 <crs_strlen>
 800852a:	4a09      	ldr	r2, [pc, #36]	; (8008550 <atcm_get_cid_current_SID+0x44>)
 800852c:	b283      	uxth	r3, r0
 800852e:	2102      	movs	r1, #2
 8008530:	2001      	movs	r0, #1
 8008532:	f00f fd3d 	bl	8017fb0 <traceIF_itmPrint>
 8008536:	4806      	ldr	r0, [pc, #24]	; (8008550 <atcm_get_cid_current_SID+0x44>)
 8008538:	f00f fcfc 	bl	8017f34 <crs_strlen>
 800853c:	4a04      	ldr	r2, [pc, #16]	; (8008550 <atcm_get_cid_current_SID+0x44>)
 800853e:	b283      	uxth	r3, r0
 8008540:	2102      	movs	r1, #2
 8008542:	2001      	movs	r0, #1
 8008544:	f00f ff5a 	bl	80183fc <traceIF_uartPrint>
  }

  return (current_conf_id);
}
 8008548:	4620      	mov	r0, r4
 800854a:	bd10      	pop	{r4, pc}
 800854c:	080240d1 	.word	0x080240d1
 8008550:	20008ef8 	.word	0x20008ef8

08008554 <atcm_get_CmdStr>:
  const AT_CHAR_t *retval = ((uint8_t *)"");
  uint16_t i = 0U;
  bool leave_loop = false;

  /* check if this is the invalid cmd id*/
  if (cmd_id != CMD_AT_INVALID)
 8008554:	1c4b      	adds	r3, r1, #1
{
 8008556:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (cmd_id != CMD_AT_INVALID)
 8008558:	d015      	beq.n	8008586 <atcm_get_CmdStr+0x32>
  {
    /* search in LUT the cmd ID */
    do
    {
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 800855a:	6844      	ldr	r4, [r0, #4]
  const AT_CHAR_t *retval = ((uint8_t *)"");
 800855c:	4a0b      	ldr	r2, [pc, #44]	; (800858c <atcm_get_CmdStr+0x38>)
  uint16_t i = 0U;
 800855e:	2300      	movs	r3, #0
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 8008560:	2630      	movs	r6, #48	; 0x30
 8008562:	fb06 f503 	mul.w	r5, r6, r3
 8008566:	1967      	adds	r7, r4, r5
 8008568:	5965      	ldr	r5, [r4, r5]
 800856a:	42a9      	cmp	r1, r5
      {
        retval = (const AT_CHAR_t *)(&p_modem_ctxt->p_modem_LUT[i].cmd_str);
        leave_loop = true;
      }
      i++;
 800856c:	f103 0301 	add.w	r3, r3, #1
        leave_loop = true;
 8008570:	bf0a      	itet	eq
 8008572:	2501      	moveq	r5, #1
 8008574:	2500      	movne	r5, #0
        retval = (const AT_CHAR_t *)(&p_modem_ctxt->p_modem_LUT[i].cmd_str);
 8008576:	1d3a      	addeq	r2, r7, #4
      i++;
 8008578:	b29b      	uxth	r3, r3
    } while ((leave_loop == false) && (i < p_modem_ctxt->modem_LUT_size));
 800857a:	b915      	cbnz	r5, 8008582 <atcm_get_CmdStr+0x2e>
 800857c:	6805      	ldr	r5, [r0, #0]
 800857e:	42ab      	cmp	r3, r5
 8008580:	d3ef      	bcc.n	8008562 <atcm_get_CmdStr+0xe>
  }

  return (retval);
}
 8008582:	4610      	mov	r0, r2
 8008584:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const AT_CHAR_t *retval = ((uint8_t *)"");
 8008586:	4a01      	ldr	r2, [pc, #4]	; (800858c <atcm_get_CmdStr+0x38>)
  return (retval);
 8008588:	e7fb      	b.n	8008582 <atcm_get_CmdStr+0x2e>
 800858a:	bf00      	nop
 800858c:	08028e1b 	.word	0x08028e1b

08008590 <atcm_get_CmdTimeout>:
uint32_t atcm_get_CmdTimeout(const atcustom_modem_context_t *p_modem_ctxt, uint32_t cmd_id)
{
  uint32_t retval = MODEM_DEFAULT_TIMEOUT;

  /* check if this is the invalid cmd id */
  if (cmd_id != CMD_AT_INVALID)
 8008590:	1c4b      	adds	r3, r1, #1
{
 8008592:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (cmd_id != CMD_AT_INVALID)
 8008594:	d016      	beq.n	80085c4 <atcm_get_CmdTimeout+0x34>
    /* search in LUT the cmd ID */
    bool leave_loop = false;
    uint16_t i = 0U;
    do
    {
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 8008596:	6844      	ldr	r4, [r0, #4]
    uint16_t i = 0U;
 8008598:	2300      	movs	r3, #0
  uint32_t retval = MODEM_DEFAULT_TIMEOUT;
 800859a:	f242 7210 	movw	r2, #10000	; 0x2710
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 800859e:	2630      	movs	r6, #48	; 0x30
 80085a0:	fb06 f503 	mul.w	r5, r6, r3
 80085a4:	1967      	adds	r7, r4, r5
 80085a6:	5965      	ldr	r5, [r4, r5]
 80085a8:	42a9      	cmp	r1, r5
      {
        retval = p_modem_ctxt->p_modem_LUT[i].cmd_timeout;
        leave_loop = true;
      }
      i++;
 80085aa:	f103 0301 	add.w	r3, r3, #1
        leave_loop = true;
 80085ae:	bf0a      	itet	eq
 80085b0:	2501      	moveq	r5, #1
 80085b2:	2500      	movne	r5, #0
        retval = p_modem_ctxt->p_modem_LUT[i].cmd_timeout;
 80085b4:	6a7a      	ldreq	r2, [r7, #36]	; 0x24
      i++;
 80085b6:	b29b      	uxth	r3, r3
    } while ((leave_loop == false) && (i < p_modem_ctxt->modem_LUT_size));
 80085b8:	b915      	cbnz	r5, 80085c0 <atcm_get_CmdTimeout+0x30>
 80085ba:	6805      	ldr	r5, [r0, #0]
 80085bc:	42ab      	cmp	r3, r5
 80085be:	d3ef      	bcc.n	80085a0 <atcm_get_CmdTimeout+0x10>
  }

  return (retval);
}
 80085c0:	4610      	mov	r0, r2
 80085c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t retval = MODEM_DEFAULT_TIMEOUT;
 80085c4:	f242 7210 	movw	r2, #10000	; 0x2710
  return (retval);
 80085c8:	e7fa      	b.n	80085c0 <atcm_get_CmdTimeout+0x30>
	...

080085cc <atcm_get_CmdBuildFunc>:
  */
CmdBuildFuncTypeDef atcm_get_CmdBuildFunc(const atcustom_modem_context_t *p_modem_ctxt, uint32_t cmd_id)
{
  CmdBuildFuncTypeDef retval = fCmdBuild_NoParams; /* return default value */

  if (cmd_id != CMD_AT_INVALID)
 80085cc:	1c4b      	adds	r3, r1, #1
{
 80085ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (cmd_id != CMD_AT_INVALID)
 80085d0:	d015      	beq.n	80085fe <atcm_get_CmdBuildFunc+0x32>
    uint16_t i = 0U;
    bool leave_loop = false;
    /* search in LUT the cmd ID */
    do
    {
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 80085d2:	6844      	ldr	r4, [r0, #4]
  CmdBuildFuncTypeDef retval = fCmdBuild_NoParams; /* return default value */
 80085d4:	4a0b      	ldr	r2, [pc, #44]	; (8008604 <atcm_get_CmdBuildFunc+0x38>)
    uint16_t i = 0U;
 80085d6:	2300      	movs	r3, #0
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 80085d8:	2630      	movs	r6, #48	; 0x30
 80085da:	fb06 f503 	mul.w	r5, r6, r3
 80085de:	1967      	adds	r7, r4, r5
 80085e0:	5965      	ldr	r5, [r4, r5]
 80085e2:	42a9      	cmp	r1, r5
      {
        retval = p_modem_ctxt->p_modem_LUT[i].cmd_BuildFunc;
        leave_loop = true;
      }
      i++;
 80085e4:	f103 0301 	add.w	r3, r3, #1
        leave_loop = true;
 80085e8:	bf0a      	itet	eq
 80085ea:	2501      	moveq	r5, #1
 80085ec:	2500      	movne	r5, #0
        retval = p_modem_ctxt->p_modem_LUT[i].cmd_BuildFunc;
 80085ee:	6aba      	ldreq	r2, [r7, #40]	; 0x28
      i++;
 80085f0:	b29b      	uxth	r3, r3
    } while ((leave_loop == false) && (i < p_modem_ctxt->modem_LUT_size));
 80085f2:	b915      	cbnz	r5, 80085fa <atcm_get_CmdBuildFunc+0x2e>
 80085f4:	6805      	ldr	r5, [r0, #0]
 80085f6:	42ab      	cmp	r3, r5
 80085f8:	d3ef      	bcc.n	80085da <atcm_get_CmdBuildFunc+0xe>
  }

  return (retval);
}
 80085fa:	4610      	mov	r0, r2
 80085fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CmdBuildFuncTypeDef retval = fCmdBuild_NoParams; /* return default value */
 80085fe:	4a01      	ldr	r2, [pc, #4]	; (8008604 <atcm_get_CmdBuildFunc+0x38>)
  return (retval);
 8008600:	e7fb      	b.n	80085fa <atcm_get_CmdBuildFunc+0x2e>
 8008602:	bf00      	nop
 8008604:	08009c29 	.word	0x08009c29

08008608 <atcm_get_CmdAnalyzeFunc>:
  */
CmdAnalyzeFuncTypeDef atcm_get_CmdAnalyzeFunc(const atcustom_modem_context_t *p_modem_ctxt, uint32_t cmd_id)
{
  CmdAnalyzeFuncTypeDef retval = fRspAnalyze_None;

  if (cmd_id != CMD_AT_INVALID)
 8008608:	1c4b      	adds	r3, r1, #1
{
 800860a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (cmd_id != CMD_AT_INVALID)
 800860c:	d015      	beq.n	800863a <atcm_get_CmdAnalyzeFunc+0x32>
    /* search in LUT the cmd ID */
    uint16_t i = 0U;
    bool leave_loop = false;
    do
    {
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 800860e:	6844      	ldr	r4, [r0, #4]
  CmdAnalyzeFuncTypeDef retval = fRspAnalyze_None;
 8008610:	4a0b      	ldr	r2, [pc, #44]	; (8008640 <atcm_get_CmdAnalyzeFunc+0x38>)
    uint16_t i = 0U;
 8008612:	2300      	movs	r3, #0
      if (p_modem_ctxt->p_modem_LUT[i].cmd_id == cmd_id)
 8008614:	2630      	movs	r6, #48	; 0x30
 8008616:	fb06 f503 	mul.w	r5, r6, r3
 800861a:	1967      	adds	r7, r4, r5
 800861c:	5965      	ldr	r5, [r4, r5]
 800861e:	428d      	cmp	r5, r1
      {
        retval = p_modem_ctxt->p_modem_LUT[i].rsp_AnalyzeFunc;
        leave_loop = true;
      }
      i++;
 8008620:	f103 0301 	add.w	r3, r3, #1
        leave_loop = true;
 8008624:	bf0a      	itet	eq
 8008626:	2501      	moveq	r5, #1
 8008628:	2500      	movne	r5, #0
        retval = p_modem_ctxt->p_modem_LUT[i].rsp_AnalyzeFunc;
 800862a:	6afa      	ldreq	r2, [r7, #44]	; 0x2c
      i++;
 800862c:	b29b      	uxth	r3, r3
    } while ((leave_loop == false) && (i < p_modem_ctxt->modem_LUT_size));
 800862e:	b915      	cbnz	r5, 8008636 <atcm_get_CmdAnalyzeFunc+0x2e>
 8008630:	6805      	ldr	r5, [r0, #0]
 8008632:	42ab      	cmp	r3, r5
 8008634:	d3ef      	bcc.n	8008616 <atcm_get_CmdAnalyzeFunc+0xe>
  }

  return (retval);
}
 8008636:	4610      	mov	r0, r2
 8008638:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CmdAnalyzeFuncTypeDef retval = fRspAnalyze_None;
 800863a:	4a01      	ldr	r2, [pc, #4]	; (8008640 <atcm_get_CmdAnalyzeFunc+0x38>)
  return (retval);
 800863c:	e7fb      	b.n	8008636 <atcm_get_CmdAnalyzeFunc+0x2e>
 800863e:	bf00      	nop
 8008640:	0800aa19 	.word	0x0800aa19

08008644 <atcm_get_PDPtypeStr>:
  uint16_t i = 0U;
  uint16_t max_array_size = (uint16_t)(sizeof(ACTM_PDP_TYPE_LUT) / sizeof(atcm_pdp_type_LUT_t));
  bool leave_loop = false;
  do
  {
    if (pdp_type == ACTM_PDP_TYPE_LUT[i].pdp_type)
 8008644:	b150      	cbz	r0, 800865c <atcm_get_PDPtypeStr+0x18>
 8008646:	2801      	cmp	r0, #1
 8008648:	d00a      	beq.n	8008660 <atcm_get_PDPtypeStr+0x1c>
 800864a:	2802      	cmp	r0, #2
 800864c:	d00a      	beq.n	8008664 <atcm_get_PDPtypeStr+0x20>
    {
      retval = ((const AT_CHAR_t *)(&ACTM_PDP_TYPE_LUT[i].pdp_type_string));
 800864e:	4b06      	ldr	r3, [pc, #24]	; (8008668 <atcm_get_PDPtypeStr+0x24>)
 8008650:	4a06      	ldr	r2, [pc, #24]	; (800866c <atcm_get_PDPtypeStr+0x28>)
 8008652:	2803      	cmp	r0, #3
 8008654:	bf14      	ite	ne
 8008656:	4618      	movne	r0, r3
 8008658:	4610      	moveq	r0, r2
 800865a:	4770      	bx	lr
 800865c:	4804      	ldr	r0, [pc, #16]	; (8008670 <atcm_get_PDPtypeStr+0x2c>)
 800865e:	4770      	bx	lr
 8008660:	4804      	ldr	r0, [pc, #16]	; (8008674 <atcm_get_PDPtypeStr+0x30>)
 8008662:	4770      	bx	lr
 8008664:	4804      	ldr	r0, [pc, #16]	; (8008678 <atcm_get_PDPtypeStr+0x34>)
    i++;
  } while ((leave_loop == false) && (i < max_array_size));

  /* string no found, return empty string */
  return (retval);
}
 8008666:	4770      	bx	lr
 8008668:	08028e1b 	.word	0x08028e1b
 800866c:	080247c3 	.word	0x080247c3
 8008670:	08024790 	.word	0x08024790
 8008674:	080247a1 	.word	0x080247a1
 8008678:	080247b2 	.word	0x080247b2

0800867c <atcm_program_AT_CMD>:
void atcm_program_AT_CMD(atcustom_modem_context_t *p_modem_ctxt,
                         atparser_context_t *p_atp_ctxt,
                         at_type_t cmd_type,
                         uint32_t cmd_id,
                         atcustom_FinalCmd_t final)
{
 800867c:	b510      	push	{r4, lr}
 800867e:	460c      	mov	r4, r1
 8008680:	4619      	mov	r1, r3
  /* command type */
  p_atp_ctxt->current_atcmd.type = cmd_type;
 8008682:	8122      	strh	r2, [r4, #8]
  /* command id */
  p_atp_ctxt->current_atcmd.id = cmd_id;
  /* is it final command ? */
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 8008684:	f89d 2008 	ldrb.w	r2, [sp, #8]
  p_atp_ctxt->current_atcmd.id = cmd_id;
 8008688:	60e3      	str	r3, [r4, #12]
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 800868a:	1e53      	subs	r3, r2, #1
 800868c:	425a      	negs	r2, r3
 800868e:	415a      	adcs	r2, r3
 8008690:	7122      	strb	r2, [r4, #4]
  /* an answer is expected */
  p_atp_ctxt->answer_expected = CMD_MANDATORY_ANSWER_EXPECTED;
 8008692:	2200      	movs	r2, #0
 8008694:	70e2      	strb	r2, [r4, #3]

  /* set command timeout according to LUT */
  p_atp_ctxt->cmd_timeout =  atcm_get_CmdTimeout(p_modem_ctxt, p_atp_ctxt->current_atcmd.id);
 8008696:	f7ff ff7b 	bl	8008590 <atcm_get_CmdTimeout>
 800869a:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
}
 800869e:	bd10      	pop	{r4, pc}

080086a0 <atcm_program_AT_CMD_ANSWER_OPTIONAL>:
void atcm_program_AT_CMD_ANSWER_OPTIONAL(atcustom_modem_context_t *p_modem_ctxt,
                                         atparser_context_t *p_atp_ctxt,
                                         at_type_t cmd_type,
                                         uint32_t cmd_id,
                                         atcustom_FinalCmd_t final)
{
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	4619      	mov	r1, r3
  /* command type */
  p_atp_ctxt->current_atcmd.type = cmd_type;
 80086a6:	8122      	strh	r2, [r4, #8]
  /* command id */
  p_atp_ctxt->current_atcmd.id = cmd_id;
  /* is it final command ? */
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 80086a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
  p_atp_ctxt->current_atcmd.id = cmd_id;
 80086ac:	60e3      	str	r3, [r4, #12]
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 80086ae:	1e53      	subs	r3, r2, #1
 80086b0:	425a      	negs	r2, r3
 80086b2:	415a      	adcs	r2, r3
 80086b4:	7122      	strb	r2, [r4, #4]
  /* an answer is expected */
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 80086b6:	2201      	movs	r2, #1
 80086b8:	70e2      	strb	r2, [r4, #3]

  /* set command timeout according to LUT */
  p_atp_ctxt->cmd_timeout =  atcm_get_CmdTimeout(p_modem_ctxt, p_atp_ctxt->current_atcmd.id);
 80086ba:	f7ff ff69 	bl	8008590 <atcm_get_CmdTimeout>
 80086be:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
}
 80086c2:	bd10      	pop	{r4, pc}

080086c4 <atcm_program_CMD_TIMEOUT>:
  * @retval none
  */
void atcm_program_CMD_TIMEOUT(atcustom_modem_context_t *p_modem_ctxt,
                              atparser_context_t *p_atp_ctxt,
                              uint32_t new_timeout)
{
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
  if (new_timeout == 0U)
 80086c8:	b91a      	cbnz	r2, 80086d2 <atcm_program_CMD_TIMEOUT+0xe>
  {
    /* set command timeout according to LUT */
    p_atp_ctxt->cmd_timeout =  atcm_get_CmdTimeout(p_modem_ctxt, p_atp_ctxt->current_atcmd.id);
 80086ca:	68c9      	ldr	r1, [r1, #12]
 80086cc:	f7ff ff60 	bl	8008590 <atcm_get_CmdTimeout>
 80086d0:	4602      	mov	r2, r0
 80086d2:	f8c4 2678 	str.w	r2, [r4, #1656]	; 0x678
  }
  else
  {
    p_atp_ctxt->cmd_timeout = new_timeout;
  }
}
 80086d6:	bd10      	pop	{r4, pc}

080086d8 <atcm_program_TEMPO>:
  * @param  final
  * @retval none
  */
void atcm_program_TEMPO(atparser_context_t *p_atp_ctxt, uint32_t tempo_value, atcustom_FinalCmd_t final)
{
  p_atp_ctxt->current_atcmd.type = ATTYPE_NO_CMD;
 80086d8:	2305      	movs	r3, #5
{
 80086da:	b570      	push	{r4, r5, r6, lr}
  p_atp_ctxt->current_atcmd.type = ATTYPE_NO_CMD;
 80086dc:	8103      	strh	r3, [r0, #8]
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
 80086de:	f04f 33ff 	mov.w	r3, #4294967295
 80086e2:	60c3      	str	r3, [r0, #12]
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 80086e4:	1e53      	subs	r3, r2, #1
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
  p_atp_ctxt->cmd_timeout = tempo_value;

  PRINT_INFO("Tempo started (%ld ms)...", tempo_value)
 80086e6:	4c10      	ldr	r4, [pc, #64]	; (8008728 <atcm_program_TEMPO+0x50>)
  p_atp_ctxt->cmd_timeout = tempo_value;
 80086e8:	f8c0 1678 	str.w	r1, [r0, #1656]	; 0x678
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 80086ec:	425a      	negs	r2, r3
 80086ee:	415a      	adcs	r2, r3
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 80086f0:	2501      	movs	r5, #1
  p_atp_ctxt->is_final_cmd = (final == FINAL_CMD) ? 1U : 0U;
 80086f2:	7102      	strb	r2, [r0, #4]
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 80086f4:	70c5      	strb	r5, [r0, #3]
  PRINT_INFO("Tempo started (%ld ms)...", tempo_value)
 80086f6:	460a      	mov	r2, r1
 80086f8:	4620      	mov	r0, r4
 80086fa:	490c      	ldr	r1, [pc, #48]	; (800872c <atcm_program_TEMPO+0x54>)
 80086fc:	f014 fbdc 	bl	801ceb8 <sprintf>
 8008700:	4620      	mov	r0, r4
 8008702:	f00f fc17 	bl	8017f34 <crs_strlen>
 8008706:	4622      	mov	r2, r4
 8008708:	b283      	uxth	r3, r0
 800870a:	4629      	mov	r1, r5
 800870c:	4628      	mov	r0, r5
 800870e:	f00f fc4f 	bl	8017fb0 <traceIF_itmPrint>
 8008712:	4620      	mov	r0, r4
 8008714:	f00f fc0e 	bl	8017f34 <crs_strlen>
 8008718:	4622      	mov	r2, r4
 800871a:	b283      	uxth	r3, r0
 800871c:	4629      	mov	r1, r5
 800871e:	4628      	mov	r0, r5
}
 8008720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  PRINT_INFO("Tempo started (%ld ms)...", tempo_value)
 8008724:	f00f be6a 	b.w	80183fc <traceIF_uartPrint>
 8008728:	20008ef8 	.word	0x20008ef8
 800872c:	08024108 	.word	0x08024108

08008730 <atcm_program_NO_MORE_CMD>:
  * @param  p_atp_ctxt
  * @retval none
  */
void atcm_program_NO_MORE_CMD(atparser_context_t *p_atp_ctxt)
{
  p_atp_ctxt->current_atcmd.type = ATTYPE_NO_CMD;
 8008730:	2305      	movs	r3, #5
 8008732:	8103      	strh	r3, [r0, #8]
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
 8008734:	f04f 33ff 	mov.w	r3, #4294967295
 8008738:	60c3      	str	r3, [r0, #12]
  p_atp_ctxt->is_final_cmd = 1U;
 800873a:	2301      	movs	r3, #1
 800873c:	7103      	strb	r3, [r0, #4]
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 800873e:	70c3      	strb	r3, [r0, #3]
  p_atp_ctxt->cmd_timeout = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	f8c0 3678 	str.w	r3, [r0, #1656]	; 0x678
}
 8008746:	4770      	bx	lr

08008748 <atcm_program_SKIP_CMD>:
  * @param  p_atp_ctxt
  * @retval none
  */
void atcm_program_SKIP_CMD(atparser_context_t *p_atp_ctxt)
{
  p_atp_ctxt->current_atcmd.type = ATTYPE_NO_CMD;
 8008748:	2305      	movs	r3, #5
 800874a:	8103      	strh	r3, [r0, #8]
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
 800874c:	f04f 33ff 	mov.w	r3, #4294967295
 8008750:	60c3      	str	r3, [r0, #12]
  p_atp_ctxt->is_final_cmd = 0U;
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 8008752:	2201      	movs	r2, #1
  p_atp_ctxt->is_final_cmd = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	7103      	strb	r3, [r0, #4]
  p_atp_ctxt->answer_expected = CMD_OPTIONAL_ANSWER_EXPECTED;
 8008758:	70c2      	strb	r2, [r0, #3]
  p_atp_ctxt->cmd_timeout = 0U;
 800875a:	f8c0 3678 	str.w	r3, [r0, #1656]	; 0x678
}
 800875e:	4770      	bx	lr

08008760 <atcm_modem_build_cmd>:
  * @retval at_status_t
  */
at_status_t atcm_modem_build_cmd(atcustom_modem_context_t *p_modem_ctxt,
                                 atparser_context_t *p_atp_ctxt,
                                 uint32_t *p_ATcmdTimeout)
{
 8008760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008764:	460c      	mov	r4, r1
  at_status_t retval = ATSTATUS_OK;

  /* 1- set the commande name (get it from LUT) */
  const AT_CHAR_t *p_cmd_name_string = atcm_get_CmdStr(p_modem_ctxt, p_atp_ctxt->current_atcmd.id);
 8008766:	68c9      	ldr	r1, [r1, #12]
{
 8008768:	4617      	mov	r7, r2
 800876a:	4605      	mov	r5, r0
  const AT_CHAR_t *p_cmd_name_string = atcm_get_CmdStr(p_modem_ctxt, p_atp_ctxt->current_atcmd.id);
 800876c:	f7ff fef2 	bl	8008554 <atcm_get_CmdStr>
 8008770:	9003      	str	r0, [sp, #12]
  uint8_t string_length = (uint8_t) strlen((const CRC_CHAR_t *) p_cmd_name_string);
 8008772:	f7f7 fd4f 	bl	8000214 <strlen>
  (void) memcpy((CRC_CHAR_t *)p_atp_ctxt->current_atcmd.name,
 8008776:	f104 0810 	add.w	r8, r4, #16
 800877a:	b2c6      	uxtb	r6, r0
 800877c:	9903      	ldr	r1, [sp, #12]
 800877e:	4632      	mov	r2, r6
 8008780:	4640      	mov	r0, r8
 8008782:	f014 fb5b 	bl	801ce3c <memcpy>
                p_cmd_name_string,
                string_length);

  PRINT_DBG("<modem custom> build the cmd %s (type=%d, length=%d)",
 8008786:	8923      	ldrh	r3, [r4, #8]
 8008788:	492f      	ldr	r1, [pc, #188]	; (8008848 <atcm_modem_build_cmd+0xe8>)
 800878a:	4830      	ldr	r0, [pc, #192]	; (800884c <atcm_modem_build_cmd+0xec>)
 800878c:	9600      	str	r6, [sp, #0]
 800878e:	4642      	mov	r2, r8
 8008790:	f014 fb92 	bl	801ceb8 <sprintf>
 8008794:	482d      	ldr	r0, [pc, #180]	; (800884c <atcm_modem_build_cmd+0xec>)
 8008796:	f00f fbcd 	bl	8017f34 <crs_strlen>
 800879a:	4a2c      	ldr	r2, [pc, #176]	; (800884c <atcm_modem_build_cmd+0xec>)
 800879c:	b283      	uxth	r3, r0
 800879e:	2102      	movs	r1, #2
 80087a0:	2001      	movs	r0, #1
 80087a2:	f00f fc05 	bl	8017fb0 <traceIF_itmPrint>
 80087a6:	4829      	ldr	r0, [pc, #164]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087a8:	f00f fbc4 	bl	8017f34 <crs_strlen>
 80087ac:	4a27      	ldr	r2, [pc, #156]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087ae:	b283      	uxth	r3, r0
 80087b0:	2102      	movs	r1, #2
 80087b2:	2001      	movs	r0, #1
 80087b4:	f00f fe22 	bl	80183fc <traceIF_uartPrint>
            p_atp_ctxt->current_atcmd.name,
            p_atp_ctxt->current_atcmd.type,
            string_length)

  /* 2- set the command parameters (only for write or execution commands or for data) */
  if ((p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) ||
 80087b8:	8923      	ldrh	r3, [r4, #8]
 80087ba:	1eda      	subs	r2, r3, #3
 80087bc:	2a01      	cmp	r2, #1
 80087be:	d901      	bls.n	80087c4 <atcm_modem_build_cmd+0x64>
      (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) ||
 80087c0:	2b06      	cmp	r3, #6
 80087c2:	d13f      	bne.n	8008844 <atcm_modem_build_cmd+0xe4>
      (p_atp_ctxt->current_atcmd.type == ATTYPE_RAW_CMD))
  {
    retval = (atcm_get_CmdBuildFunc(p_modem_ctxt, p_atp_ctxt->current_atcmd.id))(p_atp_ctxt, p_modem_ctxt);
 80087c4:	68e1      	ldr	r1, [r4, #12]
 80087c6:	4628      	mov	r0, r5
 80087c8:	f7ff ff00 	bl	80085cc <atcm_get_CmdBuildFunc>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4603      	mov	r3, r0
 80087d0:	4620      	mov	r0, r4
 80087d2:	4798      	blx	r3
 80087d4:	4605      	mov	r5, r0
  }

  /* 3- set command timeout (has been set in command programmation) */
  *p_ATcmdTimeout = p_atp_ctxt->cmd_timeout;
 80087d6:	f8d4 2678 	ldr.w	r2, [r4, #1656]	; 0x678
 80087da:	603a      	str	r2, [r7, #0]
  PRINT_DBG("==== CMD TIMEOUT = %ld ====", *p_ATcmdTimeout)
 80087dc:	491c      	ldr	r1, [pc, #112]	; (8008850 <atcm_modem_build_cmd+0xf0>)
 80087de:	481b      	ldr	r0, [pc, #108]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087e0:	f014 fb6a 	bl	801ceb8 <sprintf>
 80087e4:	4819      	ldr	r0, [pc, #100]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087e6:	f00f fba5 	bl	8017f34 <crs_strlen>
 80087ea:	4a18      	ldr	r2, [pc, #96]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087ec:	b283      	uxth	r3, r0
 80087ee:	2102      	movs	r1, #2
 80087f0:	2001      	movs	r0, #1
 80087f2:	f00f fbdd 	bl	8017fb0 <traceIF_itmPrint>
 80087f6:	4815      	ldr	r0, [pc, #84]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087f8:	f00f fb9c 	bl	8017f34 <crs_strlen>
 80087fc:	4a13      	ldr	r2, [pc, #76]	; (800884c <atcm_modem_build_cmd+0xec>)
 80087fe:	b283      	uxth	r3, r0
 8008800:	2102      	movs	r1, #2
 8008802:	2001      	movs	r0, #1
 8008804:	f00f fdfa 	bl	80183fc <traceIF_uartPrint>

  /* increment step in SID treatment */
  p_atp_ctxt->step++;
 8008808:	78a3      	ldrb	r3, [r4, #2]

  PRINT_DBG("atcm_modem_build_cmd returned status = %d", retval)
 800880a:	4912      	ldr	r1, [pc, #72]	; (8008854 <atcm_modem_build_cmd+0xf4>)
 800880c:	480f      	ldr	r0, [pc, #60]	; (800884c <atcm_modem_build_cmd+0xec>)
  p_atp_ctxt->step++;
 800880e:	3301      	adds	r3, #1
 8008810:	70a3      	strb	r3, [r4, #2]
  PRINT_DBG("atcm_modem_build_cmd returned status = %d", retval)
 8008812:	462a      	mov	r2, r5
 8008814:	f014 fb50 	bl	801ceb8 <sprintf>
 8008818:	480c      	ldr	r0, [pc, #48]	; (800884c <atcm_modem_build_cmd+0xec>)
 800881a:	f00f fb8b 	bl	8017f34 <crs_strlen>
 800881e:	4a0b      	ldr	r2, [pc, #44]	; (800884c <atcm_modem_build_cmd+0xec>)
 8008820:	b283      	uxth	r3, r0
 8008822:	2102      	movs	r1, #2
 8008824:	2001      	movs	r0, #1
 8008826:	f00f fbc3 	bl	8017fb0 <traceIF_itmPrint>
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <atcm_modem_build_cmd+0xec>)
 800882c:	f00f fb82 	bl	8017f34 <crs_strlen>
 8008830:	4a06      	ldr	r2, [pc, #24]	; (800884c <atcm_modem_build_cmd+0xec>)
 8008832:	b283      	uxth	r3, r0
 8008834:	2102      	movs	r1, #2
 8008836:	2001      	movs	r0, #1
 8008838:	f00f fde0 	bl	80183fc <traceIF_uartPrint>
  return (retval);
}
 800883c:	4628      	mov	r0, r5
 800883e:	b004      	add	sp, #16
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  at_status_t retval = ATSTATUS_OK;
 8008844:	2500      	movs	r5, #0
 8008846:	e7c6      	b.n	80087d6 <atcm_modem_build_cmd+0x76>
 8008848:	0802412d 	.word	0x0802412d
 800884c:	20008ef8 	.word	0x20008ef8
 8008850:	0802416d 	.word	0x0802416d
 8008854:	08024194 	.word	0x08024194

08008858 <atcm_modem_get_rsp>:
  * @retval at_status_t
  */
at_status_t atcm_modem_get_rsp(atcustom_modem_context_t *p_modem_ctxt,
                               const atparser_context_t *p_atp_ctxt,
                               at_buf_t *p_rsp_buf)
{
 8008858:	b570      	push	{r4, r5, r6, lr}

  /* prepare response for a SID
  *  all common behaviors for SID which are returning data in rsp_buf have to be implemented here
  */

  switch (p_atp_ctxt->current_SID)
 800885a:	880b      	ldrh	r3, [r1, #0]
 800885c:	2b7b      	cmp	r3, #123	; 0x7b
{
 800885e:	b094      	sub	sp, #80	; 0x50
 8008860:	4604      	mov	r4, r0
 8008862:	4615      	mov	r5, r2
  switch (p_atp_ctxt->current_SID)
 8008864:	f000 8088 	beq.w	8008978 <atcm_modem_get_rsp+0x120>
 8008868:	d83d      	bhi.n	80088e6 <atcm_modem_get_rsp+0x8e>
 800886a:	2b6d      	cmp	r3, #109	; 0x6d
 800886c:	d079      	beq.n	8008962 <atcm_modem_get_rsp+0x10a>
 800886e:	d808      	bhi.n	8008882 <atcm_modem_get_rsp+0x2a>
 8008870:	2b69      	cmp	r3, #105	; 0x69
 8008872:	f000 8086 	beq.w	8008982 <atcm_modem_get_rsp+0x12a>
 8008876:	2b6c      	cmp	r3, #108	; 0x6c
 8008878:	f000 8083 	beq.w	8008982 <atcm_modem_get_rsp+0x12a>
  at_status_t retval = ATSTATUS_OK;
 800887c:	2000      	movs	r0, #0
    default:
      break;
  }

  return (retval);
}
 800887e:	b014      	add	sp, #80	; 0x50
 8008880:	bd70      	pop	{r4, r5, r6, pc}
  switch (p_atp_ctxt->current_SID)
 8008882:	2b75      	cmp	r3, #117	; 0x75
 8008884:	d1fa      	bne.n	800887c <atcm_modem_get_rsp+0x24>
      CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(p_modem_ctxt);
 8008886:	f7ff fe41 	bl	800850c <atcm_get_cid_current_SID>
      (void) memset((void *)&ip_addr_info, 0, sizeof(csint_ip_addr_info_t));
 800888a:	2241      	movs	r2, #65	; 0x41
      CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(p_modem_ctxt);
 800888c:	4606      	mov	r6, r0
      (void) memset((void *)&ip_addr_info, 0, sizeof(csint_ip_addr_info_t));
 800888e:	2100      	movs	r1, #0
 8008890:	a802      	add	r0, sp, #8
 8008892:	f014 fae1 	bl	801ce58 <memset>
      atcm_get_IP_address_infos(&p_modem_ctxt->persist, current_conf_id, &ip_addr_info);
 8008896:	aa02      	add	r2, sp, #8
 8008898:	4631      	mov	r1, r6
 800889a:	f104 000c 	add.w	r0, r4, #12
 800889e:	f7ff fdcd 	bl	800843c <atcm_get_IP_address_infos>
      PRINT_DBG("retrieve IP address for cid %d = %s", current_conf_id, ip_addr_info.ip_addr_value)
 80088a2:	4948      	ldr	r1, [pc, #288]	; (80089c4 <atcm_modem_get_rsp+0x16c>)
 80088a4:	4848      	ldr	r0, [pc, #288]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 80088a6:	f10d 0309 	add.w	r3, sp, #9
 80088aa:	4632      	mov	r2, r6
 80088ac:	f014 fb04 	bl	801ceb8 <sprintf>
 80088b0:	4845      	ldr	r0, [pc, #276]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 80088b2:	f00f fb3f 	bl	8017f34 <crs_strlen>
 80088b6:	4a44      	ldr	r2, [pc, #272]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 80088b8:	b283      	uxth	r3, r0
 80088ba:	2102      	movs	r1, #2
 80088bc:	2001      	movs	r0, #1
 80088be:	f00f fb77 	bl	8017fb0 <traceIF_itmPrint>
 80088c2:	4841      	ldr	r0, [pc, #260]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 80088c4:	f00f fb36 	bl	8017f34 <crs_strlen>
 80088c8:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 80088ca:	b283      	uxth	r3, r0
 80088cc:	2102      	movs	r1, #2
 80088ce:	2001      	movs	r0, #1
 80088d0:	f00f fd94 	bl	80183fc <traceIF_uartPrint>
      if (DATAPACK_writeStruct(p_rsp_buf,
 80088d4:	ab02      	add	r3, sp, #8
 80088d6:	2241      	movs	r2, #65	; 0x41
 80088d8:	2127      	movs	r1, #39	; 0x27
 80088da:	4628      	mov	r0, r5
 80088dc:	f7ff fb20 	bl	8007f20 <DATAPACK_writeStruct>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0cc      	beq.n	800887e <atcm_modem_get_rsp+0x26>
 80088e4:	e046      	b.n	8008974 <atcm_modem_get_rsp+0x11c>
  switch (p_atp_ctxt->current_SID)
 80088e6:	2b88      	cmp	r3, #136	; 0x88
 80088e8:	d05b      	beq.n	80089a2 <atcm_modem_get_rsp+0x14a>
 80088ea:	2b8f      	cmp	r3, #143	; 0x8f
 80088ec:	d065      	beq.n	80089ba <atcm_modem_get_rsp+0x162>
 80088ee:	2b7c      	cmp	r3, #124	; 0x7c
 80088f0:	d1c4      	bne.n	800887c <atcm_modem_get_rsp+0x24>
      (void) memset((void *)&rxdata_from, 0, sizeof(csint_socket_rxdata_from_t));
 80088f2:	2244      	movs	r2, #68	; 0x44
 80088f4:	2100      	movs	r1, #0
 80088f6:	a803      	add	r0, sp, #12
 80088f8:	f014 faae 	bl	801ce58 <memset>
                    (void *)p_modem_ctxt->socket_ctxt.socketReceivedata.ip_addr_value,
 80088fc:	f204 718d 	addw	r1, r4, #1933	; 0x78d
      rxdata_from.bytes_received = p_modem_ctxt->socket_ctxt.socketReceivedata.buffer_size;
 8008900:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
 8008904:	9302      	str	r3, [sp, #8]
      (void) memcpy((void *)&rxdata_from.ip_addr_value,
 8008906:	4608      	mov	r0, r1
 8008908:	9101      	str	r1, [sp, #4]
 800890a:	f7f7 fc83 	bl	8000214 <strlen>
 800890e:	9901      	ldr	r1, [sp, #4]
 8008910:	4602      	mov	r2, r0
 8008912:	f10d 000d 	add.w	r0, sp, #13
 8008916:	f014 fa91 	bl	801ce3c <memcpy>
      rxdata_from.remote_port = p_modem_ctxt->socket_ctxt.socketReceivedata.remote_port;
 800891a:	f8b4 37ce 	ldrh.w	r3, [r4, #1998]	; 0x7ce
 800891e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
      if (DATAPACK_writeStruct(p_rsp_buf,
 8008922:	2248      	movs	r2, #72	; 0x48
 8008924:	ab02      	add	r3, sp, #8
 8008926:	211d      	movs	r1, #29
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff faf9 	bl	8007f20 <DATAPACK_writeStruct>
 800892e:	2800      	cmp	r0, #0
 8008930:	d0a5      	beq.n	800887e <atcm_modem_get_rsp+0x26>
        PRINT_ERR("Receive data from problem")
 8008932:	4926      	ldr	r1, [pc, #152]	; (80089cc <atcm_modem_get_rsp+0x174>)
        PRINT_ERR("SIM generic access problem")
 8008934:	4824      	ldr	r0, [pc, #144]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 8008936:	f014 fb2f 	bl	801cf98 <strcpy>
 800893a:	4823      	ldr	r0, [pc, #140]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 800893c:	f00f fafa 	bl	8017f34 <crs_strlen>
 8008940:	4a21      	ldr	r2, [pc, #132]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 8008942:	b283      	uxth	r3, r0
 8008944:	2110      	movs	r1, #16
 8008946:	2001      	movs	r0, #1
 8008948:	f00f fb32 	bl	8017fb0 <traceIF_itmPrint>
 800894c:	481e      	ldr	r0, [pc, #120]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 800894e:	f00f faf1 	bl	8017f34 <crs_strlen>
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <atcm_modem_get_rsp+0x170>)
 8008954:	b283      	uxth	r3, r0
 8008956:	2110      	movs	r1, #16
 8008958:	2001      	movs	r0, #1
 800895a:	f00f fd4f 	bl	80183fc <traceIF_uartPrint>
        retval = ATSTATUS_ERROR;
 800895e:	2001      	movs	r0, #1
 8008960:	e78d      	b.n	800887e <atcm_modem_get_rsp+0x26>
      if (DATAPACK_writeStruct(p_rsp_buf,
 8008962:	f200 637d 	addw	r3, r0, #1661	; 0x67d
 8008966:	2201      	movs	r2, #1
 8008968:	2115      	movs	r1, #21
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff fad8 	bl	8007f20 <DATAPACK_writeStruct>
 8008970:	2800      	cmp	r0, #0
 8008972:	d083      	beq.n	800887c <atcm_modem_get_rsp+0x24>
        PRINT_ERR("Buffer size problem")
 8008974:	4916      	ldr	r1, [pc, #88]	; (80089d0 <atcm_modem_get_rsp+0x178>)
 8008976:	e7dd      	b.n	8008934 <atcm_modem_get_rsp+0xdc>
      if (DATAPACK_writeStruct(p_rsp_buf,
 8008978:	f200 7384 	addw	r3, r0, #1924	; 0x784
 800897c:	2204      	movs	r2, #4
 800897e:	211c      	movs	r1, #28
 8008980:	e7f3      	b.n	800896a <atcm_modem_get_rsp+0x112>
      p_modem_ctxt->SID_ctxt.read_operator_infos.EPS_NetworkRegState = p_modem_ctxt->persist.eps_network_state;
 8008982:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8008984:	f8a4 362a 	strh.w	r3, [r4, #1578]	; 0x62a
      p_modem_ctxt->SID_ctxt.read_operator_infos.GPRS_NetworkRegState = p_modem_ctxt->persist.gprs_network_state;
 8008988:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800898c:	f8a4 362c 	strh.w	r3, [r4, #1580]	; 0x62c
      p_modem_ctxt->SID_ctxt.read_operator_infos.CS_NetworkRegState = p_modem_ctxt->persist.cs_network_state;
 8008990:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8008994:	f8a4 362e 	strh.w	r3, [r4, #1582]	; 0x62e
      if (DATAPACK_writeStruct(p_rsp_buf,
 8008998:	224e      	movs	r2, #78	; 0x4e
 800899a:	f504 63c5 	add.w	r3, r4, #1576	; 0x628
 800899e:	2117      	movs	r1, #23
 80089a0:	e7e3      	b.n	800896a <atcm_modem_get_rsp+0x112>
      if (DATAPACK_writeStruct(p_rsp_buf,
 80089a2:	f500 63d0 	add.w	r3, r0, #1664	; 0x680
 80089a6:	2208      	movs	r2, #8
 80089a8:	212f      	movs	r1, #47	; 0x2f
      if (DATAPACK_writeStruct(p_rsp_buf,
 80089aa:	4628      	mov	r0, r5
 80089ac:	f7ff fab8 	bl	8007f20 <DATAPACK_writeStruct>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f43f af63 	beq.w	800887c <atcm_modem_get_rsp+0x24>
        PRINT_ERR("SIM generic access problem")
 80089b6:	4907      	ldr	r1, [pc, #28]	; (80089d4 <atcm_modem_get_rsp+0x17c>)
 80089b8:	e7bc      	b.n	8008934 <atcm_modem_get_rsp+0xdc>
      if (DATAPACK_writeStruct(p_rsp_buf,
 80089ba:	f200 7344 	addw	r3, r0, #1860	; 0x744
 80089be:	221c      	movs	r2, #28
 80089c0:	2133      	movs	r1, #51	; 0x33
 80089c2:	e7f2      	b.n	80089aa <atcm_modem_get_rsp+0x152>
 80089c4:	08024219 	.word	0x08024219
 80089c8:	20008ef8 	.word	0x20008ef8
 80089cc:	080241ee 	.word	0x080241ee
 80089d0:	080241c9 	.word	0x080241c9
 80089d4:	08024248 	.word	0x08024248

080089d8 <atcm_modem_get_urc>:
  *         ATSTATUS_ERROR if an error occurred
  */
at_status_t atcm_modem_get_urc(atcustom_modem_context_t *p_modem_ctxt,
                               const atparser_context_t *p_atp_ctxt,
                               at_buf_t *p_rsp_buf)
{
 80089d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* prepare response for an URC
  *  all common behaviors for URC have to be implemented here
  */

  /* URC for EPS network registration */
  if (p_modem_ctxt->persist.urc_avail_eps_network_registration == AT_TRUE)
 80089dc:	f890 8014 	ldrb.w	r8, [r0, #20]
{
 80089e0:	4604      	mov	r4, r0
 80089e2:	4616      	mov	r6, r2
  if (p_modem_ctxt->persist.urc_avail_eps_network_registration == AT_TRUE)
 80089e4:	f1b8 0f00 	cmp.w	r8, #0
 80089e8:	d07c      	beq.n	8008ae4 <atcm_modem_get_urc+0x10c>
  {
    PRINT_DBG("urc_avail_eps_network_registration")
 80089ea:	49a4      	ldr	r1, [pc, #656]	; (8008c7c <atcm_modem_get_urc+0x2a4>)
 80089ec:	48a4      	ldr	r0, [pc, #656]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 80089ee:	f014 fad3 	bl	801cf98 <strcpy>
 80089f2:	48a3      	ldr	r0, [pc, #652]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 80089f4:	f00f fa9e 	bl	8017f34 <crs_strlen>
 80089f8:	4aa1      	ldr	r2, [pc, #644]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 80089fa:	b283      	uxth	r3, r0
 80089fc:	2102      	movs	r1, #2
 80089fe:	2001      	movs	r0, #1
 8008a00:	f00f fad6 	bl	8017fb0 <traceIF_itmPrint>
 8008a04:	489e      	ldr	r0, [pc, #632]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008a06:	f00f fa95 	bl	8017f34 <crs_strlen>
 8008a0a:	4a9d      	ldr	r2, [pc, #628]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008a0c:	b283      	uxth	r3, r0
 8008a0e:	2102      	movs	r1, #2
 8008a10:	2001      	movs	r0, #1
 8008a12:	f00f fcf3 	bl	80183fc <traceIF_uartPrint>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008a16:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	2105      	movs	r1, #5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff fa7e 	bl	8007f20 <DATAPACK_writeStruct>
    {
      retval = ATSTATUS_ERROR;
    }

    /* reset flag (systematically to avoid never ending URC) */
    p_modem_ctxt->persist.urc_avail_eps_network_registration = AT_FALSE;
 8008a24:	2300      	movs	r3, #0
  at_status_t retval = ATSTATUS_OK;
 8008a26:	1e05      	subs	r5, r0, #0
 8008a28:	bf18      	it	ne
 8008a2a:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_eps_network_registration = AT_FALSE;
 8008a2c:	7523      	strb	r3, [r4, #20]
    PRINT_INFO("no pending URC")
    retval = ATSTATUS_ERROR;
  }

  /* still some pending URC ? */
  if ((p_modem_ctxt->persist.urc_avail_eps_network_registration == AT_TRUE) ||
 8008a2e:	7d23      	ldrb	r3, [r4, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 83a1 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
 8008a36:	7de3      	ldrb	r3, [r4, #23]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f040 839d 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_gprs_network_registration == AT_TRUE) ||
 8008a3e:	7e23      	ldrb	r3, [r4, #24]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 8399 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_gprs_location_info_lac == AT_TRUE) ||
 8008a46:	7d63      	ldrb	r3, [r4, #21]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f040 8395 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_eps_location_info_tac == AT_TRUE) ||
 8008a4e:	7da3      	ldrb	r3, [r4, #22]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f040 8391 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_eps_location_info_ci == AT_TRUE) ||
 8008a56:	7e63      	ldrb	r3, [r4, #25]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f040 838d 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_gprs_location_info_ci == AT_TRUE) ||
 8008a5e:	7ea3      	ldrb	r3, [r4, #26]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 8389 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_cs_network_registration == AT_TRUE) ||
 8008a66:	7ee3      	ldrb	r3, [r4, #27]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f040 8385 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_cs_location_info_lac == AT_TRUE) ||
 8008a6e:	7f23      	ldrb	r3, [r4, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8381 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_cs_location_info_ci == AT_TRUE) ||
 8008a76:	7f63      	ldrb	r3, [r4, #29]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 837d 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_signal_quality == AT_TRUE) ||
 8008a7e:	7fa3      	ldrb	r3, [r4, #30]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8379 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_socket_data_pending == AT_TRUE) ||
 8008a86:	7fe3      	ldrb	r3, [r4, #31]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 8375 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_socket_closed_by_remote == AT_TRUE) ||
 8008a8e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f040 8370 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_pdn_event == AT_TRUE) ||
 8008a98:	f894 35b4 	ldrb.w	r3, [r4, #1460]	; 0x5b4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 836b 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_ping_rsp == AT_TRUE) ||
 8008aa2:	f894 35c0 	ldrb.w	r3, [r4, #1472]	; 0x5c0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f040 8366 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_lp_status == AT_TRUE) ||
 8008aac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 8361 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_sim_refresh_event == AT_TRUE) ||
 8008ab6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 835c 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_sim_detect_event == AT_TRUE) ||
 8008ac0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 8357 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
      (p_modem_ctxt->persist.urc_avail_sim_state_event == AT_TRUE) ||
 8008aca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 8352 	bne.w	8009178 <atcm_modem_get_urc+0x7a0>
#if defined(USE_COM_MDM)
      (p_modem_ctxt->persist.urc_avail_commdm_event_count != 0U) ||
 8008ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
#endif /* defined(USE_COM_MDM) */
      (p_modem_ctxt->persist.urc_avail_modem_events != CS_MDMEVENT_NONE))
  {
    retval = ATSTATUS_OK_PENDING_URC;
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bf18      	it	ne
 8008ada:	2503      	movne	r5, #3
  }

  return (retval);
}
 8008adc:	4628      	mov	r0, r5
 8008ade:	b002      	add	sp, #8
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (p_modem_ctxt->persist.urc_avail_gprs_network_registration == AT_TRUE)
 8008ae4:	7dc7      	ldrb	r7, [r0, #23]
 8008ae6:	b317      	cbz	r7, 8008b2e <atcm_modem_get_urc+0x156>
    PRINT_DBG("urc_avail_gprs_network_registration")
 8008ae8:	4966      	ldr	r1, [pc, #408]	; (8008c84 <atcm_modem_get_urc+0x2ac>)
 8008aea:	4865      	ldr	r0, [pc, #404]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008aec:	f014 fa54 	bl	801cf98 <strcpy>
 8008af0:	4863      	ldr	r0, [pc, #396]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008af2:	f00f fa1f 	bl	8017f34 <crs_strlen>
 8008af6:	4a62      	ldr	r2, [pc, #392]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008af8:	b283      	uxth	r3, r0
 8008afa:	2102      	movs	r1, #2
 8008afc:	2001      	movs	r0, #1
 8008afe:	f00f fa57 	bl	8017fb0 <traceIF_itmPrint>
 8008b02:	485f      	ldr	r0, [pc, #380]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b04:	f00f fa16 	bl	8017f34 <crs_strlen>
 8008b08:	4a5d      	ldr	r2, [pc, #372]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b0a:	b283      	uxth	r3, r0
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	2001      	movs	r0, #1
 8008b10:	f00f fc74 	bl	80183fc <traceIF_uartPrint>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008b14:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008b18:	2202      	movs	r2, #2
 8008b1a:	2107      	movs	r1, #7
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff f9ff 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008b22:	1e05      	subs	r5, r0, #0
 8008b24:	bf18      	it	ne
 8008b26:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_gprs_network_registration = AT_FALSE;
 8008b28:	f884 8017 	strb.w	r8, [r4, #23]
 8008b2c:	e77f      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_cs_network_registration == AT_TRUE)
 8008b2e:	7e83      	ldrb	r3, [r0, #26]
 8008b30:	b30b      	cbz	r3, 8008b76 <atcm_modem_get_urc+0x19e>
    PRINT_DBG("urc_avail_cs_network_registration")
 8008b32:	4955      	ldr	r1, [pc, #340]	; (8008c88 <atcm_modem_get_urc+0x2b0>)
 8008b34:	4852      	ldr	r0, [pc, #328]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b36:	f014 fa2f 	bl	801cf98 <strcpy>
 8008b3a:	4851      	ldr	r0, [pc, #324]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b3c:	f00f f9fa 	bl	8017f34 <crs_strlen>
 8008b40:	4a4f      	ldr	r2, [pc, #316]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b42:	b283      	uxth	r3, r0
 8008b44:	2102      	movs	r1, #2
 8008b46:	2001      	movs	r0, #1
 8008b48:	f00f fa32 	bl	8017fb0 <traceIF_itmPrint>
 8008b4c:	484c      	ldr	r0, [pc, #304]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b4e:	f00f f9f1 	bl	8017f34 <crs_strlen>
 8008b52:	4a4b      	ldr	r2, [pc, #300]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b54:	b283      	uxth	r3, r0
 8008b56:	2102      	movs	r1, #2
 8008b58:	2001      	movs	r0, #1
 8008b5a:	f00f fc4f 	bl	80183fc <traceIF_uartPrint>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008b5e:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8008b62:	2202      	movs	r2, #2
 8008b64:	2109      	movs	r1, #9
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff f9da 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008b6c:	1e05      	subs	r5, r0, #0
 8008b6e:	bf18      	it	ne
 8008b70:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_cs_network_registration = AT_FALSE;
 8008b72:	76a7      	strb	r7, [r4, #26]
 8008b74:	e75b      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if ((p_modem_ctxt->persist.urc_avail_eps_location_info_tac == AT_TRUE)
 8008b76:	7d43      	ldrb	r3, [r0, #21]
 8008b78:	b913      	cbnz	r3, 8008b80 <atcm_modem_get_urc+0x1a8>
           || (p_modem_ctxt->persist.urc_avail_eps_location_info_ci == AT_TRUE))
 8008b7a:	7d83      	ldrb	r3, [r0, #22]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d03b      	beq.n	8008bf8 <atcm_modem_get_urc+0x220>
    PRINT_DBG("urc_avail_eps_location_info_tac or urc_avail_eps_location_info_ci")
 8008b80:	4942      	ldr	r1, [pc, #264]	; (8008c8c <atcm_modem_get_urc+0x2b4>)
 8008b82:	483f      	ldr	r0, [pc, #252]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b84:	f014 fa08 	bl	801cf98 <strcpy>
 8008b88:	483d      	ldr	r0, [pc, #244]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b8a:	f00f f9d3 	bl	8017f34 <crs_strlen>
 8008b8e:	4a3c      	ldr	r2, [pc, #240]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b90:	b283      	uxth	r3, r0
 8008b92:	2102      	movs	r1, #2
 8008b94:	2001      	movs	r0, #1
 8008b96:	f00f fa0b 	bl	8017fb0 <traceIF_itmPrint>
 8008b9a:	4839      	ldr	r0, [pc, #228]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008b9c:	f00f f9ca 	bl	8017f34 <crs_strlen>
 8008ba0:	4a37      	ldr	r2, [pc, #220]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008ba2:	b283      	uxth	r3, r0
 8008ba4:	2102      	movs	r1, #2
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	f00f fc28 	bl	80183fc <traceIF_uartPrint>
    csint_location_info_t loc_struct = { .ci_updated = CELLULAR_FALSE, .lac_updated = CELLULAR_FALSE, };
 8008bac:	2300      	movs	r3, #0
 8008bae:	e9cd 3300 	strd	r3, r3, [sp]
    if (p_modem_ctxt->persist.urc_avail_eps_location_info_tac == AT_TRUE)
 8008bb2:	7d63      	ldrb	r3, [r4, #21]
 8008bb4:	b12b      	cbz	r3, 8008bc2 <atcm_modem_get_urc+0x1ea>
      loc_struct.lac = p_modem_ctxt->persist.eps_location_info.lac;
 8008bb6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008bb8:	f8ad 3004 	strh.w	r3, [sp, #4]
      loc_struct.lac_updated = CELLULAR_TRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_modem_ctxt->persist.urc_avail_eps_location_info_ci == AT_TRUE)
 8008bc2:	7da3      	ldrb	r3, [r4, #22]
 8008bc4:	b123      	cbz	r3, 8008bd0 <atcm_modem_get_urc+0x1f8>
      loc_struct.ci = p_modem_ctxt->persist.eps_location_info.ci;
 8008bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bc8:	9300      	str	r3, [sp, #0]
      loc_struct.ci_updated = CELLULAR_TRUE;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f88d 3006 	strb.w	r3, [sp, #6]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008bd0:	466b      	mov	r3, sp
 8008bd2:	2208      	movs	r2, #8
 8008bd4:	2106      	movs	r1, #6
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7ff f9a2 	bl	8007f20 <DATAPACK_writeStruct>
    if (p_modem_ctxt->persist.urc_avail_eps_location_info_tac == AT_TRUE)
 8008bdc:	7d63      	ldrb	r3, [r4, #21]
  at_status_t retval = ATSTATUS_OK;
 8008bde:	1e05      	subs	r5, r0, #0
 8008be0:	bf18      	it	ne
 8008be2:	2501      	movne	r5, #1
    if (p_modem_ctxt->persist.urc_avail_eps_location_info_tac == AT_TRUE)
 8008be4:	b10b      	cbz	r3, 8008bea <atcm_modem_get_urc+0x212>
      p_modem_ctxt->persist.urc_avail_eps_location_info_tac = AT_FALSE;
 8008be6:	2300      	movs	r3, #0
 8008be8:	7563      	strb	r3, [r4, #21]
    if (p_modem_ctxt->persist.urc_avail_eps_location_info_ci == AT_TRUE)
 8008bea:	7da3      	ldrb	r3, [r4, #22]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f43f af1e 	beq.w	8008a2e <atcm_modem_get_urc+0x56>
      p_modem_ctxt->persist.urc_avail_eps_location_info_ci = AT_FALSE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75a3      	strb	r3, [r4, #22]
  {
 8008bf6:	e71a      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if ((p_modem_ctxt->persist.urc_avail_gprs_location_info_lac == AT_TRUE)
 8008bf8:	7e03      	ldrb	r3, [r0, #24]
 8008bfa:	b913      	cbnz	r3, 8008c02 <atcm_modem_get_urc+0x22a>
           || (p_modem_ctxt->persist.urc_avail_gprs_location_info_ci == AT_TRUE))
 8008bfc:	7e43      	ldrb	r3, [r0, #25]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d048      	beq.n	8008c94 <atcm_modem_get_urc+0x2bc>
    PRINT_DBG("urc_avail_gprs_location_info_tac or urc_avail_gprs_location_info_ci")
 8008c02:	4923      	ldr	r1, [pc, #140]	; (8008c90 <atcm_modem_get_urc+0x2b8>)
 8008c04:	481e      	ldr	r0, [pc, #120]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008c06:	f014 f9c7 	bl	801cf98 <strcpy>
 8008c0a:	481d      	ldr	r0, [pc, #116]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008c0c:	f00f f992 	bl	8017f34 <crs_strlen>
 8008c10:	4a1b      	ldr	r2, [pc, #108]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008c12:	b283      	uxth	r3, r0
 8008c14:	2102      	movs	r1, #2
 8008c16:	2001      	movs	r0, #1
 8008c18:	f00f f9ca 	bl	8017fb0 <traceIF_itmPrint>
 8008c1c:	4818      	ldr	r0, [pc, #96]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008c1e:	f00f f989 	bl	8017f34 <crs_strlen>
 8008c22:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <atcm_modem_get_urc+0x2a8>)
 8008c24:	b283      	uxth	r3, r0
 8008c26:	2102      	movs	r1, #2
 8008c28:	2001      	movs	r0, #1
 8008c2a:	f00f fbe7 	bl	80183fc <traceIF_uartPrint>
    csint_location_info_t loc_struct = { .ci_updated = CELLULAR_FALSE, .lac_updated = CELLULAR_FALSE, };
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e9cd 3300 	strd	r3, r3, [sp]
    if (p_modem_ctxt->persist.urc_avail_gprs_location_info_lac == AT_TRUE)
 8008c34:	7e23      	ldrb	r3, [r4, #24]
 8008c36:	b12b      	cbz	r3, 8008c44 <atcm_modem_get_urc+0x26c>
      loc_struct.lac = p_modem_ctxt->persist.gprs_location_info.lac;
 8008c38:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8008c3a:	f8ad 3004 	strh.w	r3, [sp, #4]
      loc_struct.lac_updated = CELLULAR_TRUE;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_modem_ctxt->persist.urc_avail_gprs_location_info_ci == AT_TRUE)
 8008c44:	7e63      	ldrb	r3, [r4, #25]
 8008c46:	b123      	cbz	r3, 8008c52 <atcm_modem_get_urc+0x27a>
      loc_struct.ci = p_modem_ctxt->persist.gprs_location_info.ci;
 8008c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c4a:	9300      	str	r3, [sp, #0]
      loc_struct.ci_updated = CELLULAR_TRUE;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f88d 3006 	strb.w	r3, [sp, #6]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008c52:	2208      	movs	r2, #8
 8008c54:	466b      	mov	r3, sp
 8008c56:	4611      	mov	r1, r2
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff f961 	bl	8007f20 <DATAPACK_writeStruct>
    if (p_modem_ctxt->persist.urc_avail_gprs_location_info_lac == AT_TRUE)
 8008c5e:	7e23      	ldrb	r3, [r4, #24]
  at_status_t retval = ATSTATUS_OK;
 8008c60:	1e05      	subs	r5, r0, #0
 8008c62:	bf18      	it	ne
 8008c64:	2501      	movne	r5, #1
    if (p_modem_ctxt->persist.urc_avail_gprs_location_info_lac == AT_TRUE)
 8008c66:	b10b      	cbz	r3, 8008c6c <atcm_modem_get_urc+0x294>
      p_modem_ctxt->persist.urc_avail_gprs_location_info_lac = AT_FALSE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	7623      	strb	r3, [r4, #24]
    if (p_modem_ctxt->persist.urc_avail_gprs_location_info_ci == AT_TRUE)
 8008c6c:	7e63      	ldrb	r3, [r4, #25]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f43f aedd 	beq.w	8008a2e <atcm_modem_get_urc+0x56>
      p_modem_ctxt->persist.urc_avail_gprs_location_info_ci = AT_FALSE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	7663      	strb	r3, [r4, #25]
  {
 8008c78:	e6d9      	b.n	8008a2e <atcm_modem_get_urc+0x56>
 8008c7a:	bf00      	nop
 8008c7c:	08024274 	.word	0x08024274
 8008c80:	20008ef8 	.word	0x20008ef8
 8008c84:	080242a2 	.word	0x080242a2
 8008c88:	080242d1 	.word	0x080242d1
 8008c8c:	080242fe 	.word	0x080242fe
 8008c90:	0802434b 	.word	0x0802434b
  else if ((p_modem_ctxt->persist.urc_avail_cs_location_info_lac == AT_TRUE)
 8008c94:	7ec3      	ldrb	r3, [r0, #27]
 8008c96:	b913      	cbnz	r3, 8008c9e <atcm_modem_get_urc+0x2c6>
           || (p_modem_ctxt->persist.urc_avail_cs_location_info_ci == AT_TRUE))
 8008c98:	7f03      	ldrb	r3, [r0, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03c      	beq.n	8008d18 <atcm_modem_get_urc+0x340>
    PRINT_DBG("urc_avail_cs_location_info_lac or urc_avail_cs_location_info_ci")
 8008c9e:	49b7      	ldr	r1, [pc, #732]	; (8008f7c <atcm_modem_get_urc+0x5a4>)
 8008ca0:	48b7      	ldr	r0, [pc, #732]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ca2:	f014 f979 	bl	801cf98 <strcpy>
 8008ca6:	48b6      	ldr	r0, [pc, #728]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ca8:	f00f f944 	bl	8017f34 <crs_strlen>
 8008cac:	4ab4      	ldr	r2, [pc, #720]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008cae:	b283      	uxth	r3, r0
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	f00f f97c 	bl	8017fb0 <traceIF_itmPrint>
 8008cb8:	48b1      	ldr	r0, [pc, #708]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008cba:	f00f f93b 	bl	8017f34 <crs_strlen>
 8008cbe:	4ab0      	ldr	r2, [pc, #704]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008cc0:	b283      	uxth	r3, r0
 8008cc2:	2102      	movs	r1, #2
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	f00f fb99 	bl	80183fc <traceIF_uartPrint>
    csint_location_info_t loc_struct = { .ci_updated = CELLULAR_FALSE, .lac_updated = CELLULAR_FALSE, };
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e9cd 3300 	strd	r3, r3, [sp]
    if (p_modem_ctxt->persist.urc_avail_cs_location_info_lac == AT_TRUE)
 8008cd0:	7ee3      	ldrb	r3, [r4, #27]
 8008cd2:	b133      	cbz	r3, 8008ce2 <atcm_modem_get_urc+0x30a>
      loc_struct.lac = p_modem_ctxt->persist.cs_location_info.lac;
 8008cd4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008cd8:	f8ad 3004 	strh.w	r3, [sp, #4]
      loc_struct.lac_updated = CELLULAR_TRUE;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_modem_ctxt->persist.urc_avail_cs_location_info_ci == AT_TRUE)
 8008ce2:	7f23      	ldrb	r3, [r4, #28]
 8008ce4:	b123      	cbz	r3, 8008cf0 <atcm_modem_get_urc+0x318>
      loc_struct.ci = p_modem_ctxt->persist.cs_location_info.ci;
 8008ce6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ce8:	9300      	str	r3, [sp, #0]
      loc_struct.ci_updated = CELLULAR_TRUE;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f88d 3006 	strb.w	r3, [sp, #6]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008cf0:	466b      	mov	r3, sp
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	210a      	movs	r1, #10
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff f912 	bl	8007f20 <DATAPACK_writeStruct>
    if (p_modem_ctxt->persist.urc_avail_cs_location_info_lac == AT_TRUE)
 8008cfc:	7ee3      	ldrb	r3, [r4, #27]
  at_status_t retval = ATSTATUS_OK;
 8008cfe:	1e05      	subs	r5, r0, #0
 8008d00:	bf18      	it	ne
 8008d02:	2501      	movne	r5, #1
    if (p_modem_ctxt->persist.urc_avail_cs_location_info_lac == AT_TRUE)
 8008d04:	b10b      	cbz	r3, 8008d0a <atcm_modem_get_urc+0x332>
      p_modem_ctxt->persist.urc_avail_cs_location_info_lac = AT_FALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	76e3      	strb	r3, [r4, #27]
    if (p_modem_ctxt->persist.urc_avail_cs_location_info_ci == AT_TRUE)
 8008d0a:	7f23      	ldrb	r3, [r4, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f43f ae8e 	beq.w	8008a2e <atcm_modem_get_urc+0x56>
      p_modem_ctxt->persist.urc_avail_cs_location_info_ci = AT_FALSE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	7723      	strb	r3, [r4, #28]
  {
 8008d16:	e68a      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_signal_quality == AT_TRUE)
 8008d18:	7f43      	ldrb	r3, [r0, #29]
 8008d1a:	b32b      	cbz	r3, 8008d68 <atcm_modem_get_urc+0x390>
    PRINT_DBG("urc_avail_signal_quality")
 8008d1c:	4999      	ldr	r1, [pc, #612]	; (8008f84 <atcm_modem_get_urc+0x5ac>)
 8008d1e:	4898      	ldr	r0, [pc, #608]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d20:	f014 f93a 	bl	801cf98 <strcpy>
 8008d24:	4896      	ldr	r0, [pc, #600]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d26:	f00f f905 	bl	8017f34 <crs_strlen>
 8008d2a:	4a95      	ldr	r2, [pc, #596]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d2c:	b283      	uxth	r3, r0
 8008d2e:	2102      	movs	r1, #2
 8008d30:	2001      	movs	r0, #1
 8008d32:	f00f f93d 	bl	8017fb0 <traceIF_itmPrint>
 8008d36:	4892      	ldr	r0, [pc, #584]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d38:	f00f f8fc 	bl	8017f34 <crs_strlen>
 8008d3c:	4a90      	ldr	r2, [pc, #576]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d3e:	b283      	uxth	r3, r0
 8008d40:	2102      	movs	r1, #2
 8008d42:	2001      	movs	r0, #1
 8008d44:	f00f fb5a 	bl	80183fc <traceIF_uartPrint>
    signal_quality_struct.rssi = p_modem_ctxt->persist.signal_quality.rssi;
 8008d48:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8008d4c:	f8ad 3000 	strh.w	r3, [sp]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008d50:	2202      	movs	r2, #2
 8008d52:	466b      	mov	r3, sp
 8008d54:	210b      	movs	r1, #11
 8008d56:	4630      	mov	r0, r6
 8008d58:	f7ff f8e2 	bl	8007f20 <DATAPACK_writeStruct>
    p_modem_ctxt->persist.urc_avail_signal_quality = AT_FALSE;
 8008d5c:	2300      	movs	r3, #0
  at_status_t retval = ATSTATUS_OK;
 8008d5e:	1e05      	subs	r5, r0, #0
 8008d60:	bf18      	it	ne
 8008d62:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_signal_quality = AT_FALSE;
 8008d64:	7763      	strb	r3, [r4, #29]
 8008d66:	e662      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_socket_data_pending == AT_TRUE)
 8008d68:	7f83      	ldrb	r3, [r0, #30]
 8008d6a:	b33b      	cbz	r3, 8008dbc <atcm_modem_get_urc+0x3e4>
    PRINT_DBG("urc_avail_socket_data_pending")
 8008d6c:	4986      	ldr	r1, [pc, #536]	; (8008f88 <atcm_modem_get_urc+0x5b0>)
 8008d6e:	4884      	ldr	r0, [pc, #528]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d70:	f014 f912 	bl	801cf98 <strcpy>
 8008d74:	4882      	ldr	r0, [pc, #520]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d76:	f00f f8dd 	bl	8017f34 <crs_strlen>
 8008d7a:	4a81      	ldr	r2, [pc, #516]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d7c:	b283      	uxth	r3, r0
 8008d7e:	2102      	movs	r1, #2
 8008d80:	2001      	movs	r0, #1
 8008d82:	f00f f915 	bl	8017fb0 <traceIF_itmPrint>
 8008d86:	487e      	ldr	r0, [pc, #504]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d88:	f00f f8d4 	bl	8017f34 <crs_strlen>
 8008d8c:	4a7c      	ldr	r2, [pc, #496]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008d8e:	b283      	uxth	r3, r0
 8008d90:	2102      	movs	r1, #2
 8008d92:	2001      	movs	r0, #1
 8008d94:	f00f fb32 	bl	80183fc <traceIF_uartPrint>
    socket_handle_t sockHandle = atcm_socket_get_hdle_urc_data_pending(p_modem_ctxt);
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f005 f8d9 	bl	800df50 <atcm_socket_get_hdle_urc_data_pending>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008d9e:	466b      	mov	r3, sp
    socket_handle_t sockHandle = atcm_socket_get_hdle_urc_data_pending(p_modem_ctxt);
 8008da0:	9000      	str	r0, [sp, #0]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008da2:	2204      	movs	r2, #4
 8008da4:	210d      	movs	r1, #13
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff f8ba 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008dac:	1e05      	subs	r5, r0, #0
    p_modem_ctxt->persist.urc_avail_socket_data_pending = atcm_socket_remaining_urc_data_pending(p_modem_ctxt);
 8008dae:	4620      	mov	r0, r4
  at_status_t retval = ATSTATUS_OK;
 8008db0:	bf18      	it	ne
 8008db2:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_socket_data_pending = atcm_socket_remaining_urc_data_pending(p_modem_ctxt);
 8008db4:	f005 f930 	bl	800e018 <atcm_socket_remaining_urc_data_pending>
 8008db8:	77a0      	strb	r0, [r4, #30]
 8008dba:	e638      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_socket_closed_by_remote == AT_TRUE)
 8008dbc:	7fc3      	ldrb	r3, [r0, #31]
 8008dbe:	b33b      	cbz	r3, 8008e10 <atcm_modem_get_urc+0x438>
    PRINT_DBG("urc_avail_socket_closed_by_remote")
 8008dc0:	4972      	ldr	r1, [pc, #456]	; (8008f8c <atcm_modem_get_urc+0x5b4>)
 8008dc2:	486f      	ldr	r0, [pc, #444]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008dc4:	f014 f8e8 	bl	801cf98 <strcpy>
 8008dc8:	486d      	ldr	r0, [pc, #436]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008dca:	f00f f8b3 	bl	8017f34 <crs_strlen>
 8008dce:	4a6c      	ldr	r2, [pc, #432]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008dd0:	b283      	uxth	r3, r0
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f00f f8eb 	bl	8017fb0 <traceIF_itmPrint>
 8008dda:	4869      	ldr	r0, [pc, #420]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ddc:	f00f f8aa 	bl	8017f34 <crs_strlen>
 8008de0:	4a67      	ldr	r2, [pc, #412]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008de2:	b283      	uxth	r3, r0
 8008de4:	2102      	movs	r1, #2
 8008de6:	2001      	movs	r0, #1
 8008de8:	f00f fb08 	bl	80183fc <traceIF_uartPrint>
    socket_handle_t sockHandle = atcm_socket_get_hdlr_urc_closed_by_remote(p_modem_ctxt);
 8008dec:	4620      	mov	r0, r4
 8008dee:	f005 f8e1 	bl	800dfb4 <atcm_socket_get_hdlr_urc_closed_by_remote>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008df2:	466b      	mov	r3, sp
    socket_handle_t sockHandle = atcm_socket_get_hdlr_urc_closed_by_remote(p_modem_ctxt);
 8008df4:	9000      	str	r0, [sp, #0]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008df6:	2204      	movs	r2, #4
 8008df8:	210e      	movs	r1, #14
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f7ff f890 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008e00:	1e05      	subs	r5, r0, #0
    p_modem_ctxt->persist.urc_avail_socket_closed_by_remote = atcm_socket_remaining_urc_closed_by_remote(p_modem_ctxt);
 8008e02:	4620      	mov	r0, r4
  at_status_t retval = ATSTATUS_OK;
 8008e04:	bf18      	it	ne
 8008e06:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_socket_closed_by_remote = atcm_socket_remaining_urc_closed_by_remote(p_modem_ctxt);
 8008e08:	f005 f92c 	bl	800e064 <atcm_socket_remaining_urc_closed_by_remote>
 8008e0c:	77e0      	strb	r0, [r4, #31]
 8008e0e:	e60e      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_pdn_event == AT_TRUE)
 8008e10:	f890 8020 	ldrb.w	r8, [r0, #32]
 8008e14:	f1b8 0f00 	cmp.w	r8, #0
 8008e18:	d05e      	beq.n	8008ed8 <atcm_modem_get_urc+0x500>
    PRINT_DBG("urc_avail_pdn_event")
 8008e1a:	495d      	ldr	r1, [pc, #372]	; (8008f90 <atcm_modem_get_urc+0x5b8>)
 8008e1c:	4858      	ldr	r0, [pc, #352]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e1e:	f014 f8bb 	bl	801cf98 <strcpy>
 8008e22:	4857      	ldr	r0, [pc, #348]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e24:	f00f f886 	bl	8017f34 <crs_strlen>
 8008e28:	4a55      	ldr	r2, [pc, #340]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e2a:	b283      	uxth	r3, r0
 8008e2c:	2102      	movs	r1, #2
 8008e2e:	2001      	movs	r0, #1
 8008e30:	f00f f8be 	bl	8017fb0 <traceIF_itmPrint>
 8008e34:	4852      	ldr	r0, [pc, #328]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e36:	f00f f87d 	bl	8017f34 <crs_strlen>
 8008e3a:	4a51      	ldr	r2, [pc, #324]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e3c:	b283      	uxth	r3, r0
 8008e3e:	2102      	movs	r1, #2
 8008e40:	2001      	movs	r0, #1
 8008e42:	f00f fadb 	bl	80183fc <traceIF_uartPrint>
    if (p_modem_ctxt->persist.pdn_event.event_origine == CGEV_EVENT_ORIGINE_NW)
 8008e46:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 8008e4a:	2d01      	cmp	r5, #1
 8008e4c:	d12c      	bne.n	8008ea8 <atcm_modem_get_urc+0x4d0>
      switch (p_modem_ctxt->persist.pdn_event.event_type)
 8008e4e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8008e52:	2a0d      	cmp	r2, #13
 8008e54:	d001      	beq.n	8008e5a <atcm_modem_get_urc+0x482>
 8008e56:	2a0f      	cmp	r2, #15
 8008e58:	d10f      	bne.n	8008e7a <atcm_modem_get_urc+0x4a2>
            if (DATAPACK_writeStruct(p_rsp_buf,
 8008e5a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8008e5e:	2204      	movs	r2, #4
 8008e60:	210c      	movs	r1, #12
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff f85c 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008e68:	1e05      	subs	r5, r0, #0
 8008e6a:	bf18      	it	ne
 8008e6c:	2501      	movne	r5, #1
  * @param  p_persistent_ctxt
  * @retval none
  */
void reset_pdn_event(atcustom_persistent_context_t *p_persistent_ctxt)
{
  p_persistent_ctxt->pdn_event.event_origine = CGEV_EVENT_UNDEFINE;
 8008e6e:	4b49      	ldr	r3, [pc, #292]	; (8008f94 <atcm_modem_get_urc+0x5bc>)
 8008e70:	6523      	str	r3, [r4, #80]	; 0x50
    p_modem_ctxt->persist.urc_avail_pdn_event = AT_FALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	f884 3020 	strb.w	r3, [r4, #32]
 8008e78:	e5d9      	b.n	8008a2e <atcm_modem_get_urc+0x56>
          PRINT_INFO("+CGEV URC discarded (NW), type=%d", p_modem_ctxt->persist.pdn_event.event_type)
 8008e7a:	4947      	ldr	r1, [pc, #284]	; (8008f98 <atcm_modem_get_urc+0x5c0>)
 8008e7c:	4840      	ldr	r0, [pc, #256]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e7e:	f014 f81b 	bl	801ceb8 <sprintf>
 8008e82:	483f      	ldr	r0, [pc, #252]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e84:	f00f f856 	bl	8017f34 <crs_strlen>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	b283      	uxth	r3, r0
 8008e8c:	4a3c      	ldr	r2, [pc, #240]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f00f f88e 	bl	8017fb0 <traceIF_itmPrint>
 8008e94:	483a      	ldr	r0, [pc, #232]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e96:	f00f f84d 	bl	8017f34 <crs_strlen>
 8008e9a:	4a39      	ldr	r2, [pc, #228]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008e9c:	b283      	uxth	r3, r0
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f00f faab 	bl	80183fc <traceIF_uartPrint>
          break;
 8008ea6:	e7e2      	b.n	8008e6e <atcm_modem_get_urc+0x496>
      PRINT_INFO("+CGEV URC discarded (ME)")
 8008ea8:	493c      	ldr	r1, [pc, #240]	; (8008f9c <atcm_modem_get_urc+0x5c4>)
 8008eaa:	4835      	ldr	r0, [pc, #212]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008eac:	f014 f874 	bl	801cf98 <strcpy>
 8008eb0:	4833      	ldr	r0, [pc, #204]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008eb2:	f00f f83f 	bl	8017f34 <crs_strlen>
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	b283      	uxth	r3, r0
 8008eba:	4a31      	ldr	r2, [pc, #196]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	f00f f877 	bl	8017fb0 <traceIF_itmPrint>
 8008ec2:	482f      	ldr	r0, [pc, #188]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ec4:	f00f f836 	bl	8017f34 <crs_strlen>
 8008ec8:	2101      	movs	r1, #1
 8008eca:	b283      	uxth	r3, r0
 8008ecc:	4a2c      	ldr	r2, [pc, #176]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ece:	4608      	mov	r0, r1
 8008ed0:	f00f fa94 	bl	80183fc <traceIF_uartPrint>
      retval = ATSTATUS_ERROR;
 8008ed4:	2501      	movs	r5, #1
 8008ed6:	e7ca      	b.n	8008e6e <atcm_modem_get_urc+0x496>
  else if (p_modem_ctxt->persist.urc_avail_ping_rsp == AT_TRUE)
 8008ed8:	f890 75b4 	ldrb.w	r7, [r0, #1460]	; 0x5b4
 8008edc:	b317      	cbz	r7, 8008f24 <atcm_modem_get_urc+0x54c>
    PRINT_DBG("urc_avail_ping_rsp")
 8008ede:	4930      	ldr	r1, [pc, #192]	; (8008fa0 <atcm_modem_get_urc+0x5c8>)
 8008ee0:	4827      	ldr	r0, [pc, #156]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ee2:	f014 f859 	bl	801cf98 <strcpy>
 8008ee6:	4826      	ldr	r0, [pc, #152]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008ee8:	f00f f824 	bl	8017f34 <crs_strlen>
 8008eec:	4a24      	ldr	r2, [pc, #144]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008eee:	b283      	uxth	r3, r0
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	f00f f85c 	bl	8017fb0 <traceIF_itmPrint>
 8008ef8:	4821      	ldr	r0, [pc, #132]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008efa:	f00f f81b 	bl	8017f34 <crs_strlen>
 8008efe:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f00:	b283      	uxth	r3, r0
 8008f02:	2102      	movs	r1, #2
 8008f04:	2001      	movs	r0, #1
 8008f06:	f00f fa79 	bl	80183fc <traceIF_uartPrint>
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008f0a:	f204 5364 	addw	r3, r4, #1380	; 0x564
 8008f0e:	2250      	movs	r2, #80	; 0x50
 8008f10:	2110      	movs	r1, #16
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff f804 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008f18:	1e05      	subs	r5, r0, #0
 8008f1a:	bf18      	it	ne
 8008f1c:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_ping_rsp = AT_FALSE;
 8008f1e:	f884 85b4 	strb.w	r8, [r4, #1460]	; 0x5b4
 8008f22:	e584      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_sim_refresh_event == AT_TRUE)
 8008f24:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	d03c      	beq.n	8008fa8 <atcm_modem_get_urc+0x5d0>
    PRINT_DBG("urc_avail_sim_refresh_event")
 8008f2e:	491d      	ldr	r1, [pc, #116]	; (8008fa4 <atcm_modem_get_urc+0x5cc>)
 8008f30:	4813      	ldr	r0, [pc, #76]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f32:	f014 f831 	bl	801cf98 <strcpy>
 8008f36:	4812      	ldr	r0, [pc, #72]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f38:	f00e fffc 	bl	8017f34 <crs_strlen>
 8008f3c:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f3e:	b283      	uxth	r3, r0
 8008f40:	2102      	movs	r1, #2
 8008f42:	2001      	movs	r0, #1
 8008f44:	f00f f834 	bl	8017fb0 <traceIF_itmPrint>
 8008f48:	480d      	ldr	r0, [pc, #52]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f4a:	f00e fff3 	bl	8017f34 <crs_strlen>
 8008f4e:	4a0c      	ldr	r2, [pc, #48]	; (8008f80 <atcm_modem_get_urc+0x5a8>)
 8008f50:	b283      	uxth	r3, r0
 8008f52:	2102      	movs	r1, #2
 8008f54:	2001      	movs	r0, #1
 8008f56:	f00f fa51 	bl	80183fc <traceIF_uartPrint>
    (void) memcpy((void *)&sim_status_struct,
 8008f5a:	f8b4 35c1 	ldrh.w	r3, [r4, #1473]	; 0x5c1
 8008f5e:	f8ad 3000 	strh.w	r3, [sp]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008f62:	2202      	movs	r2, #2
 8008f64:	466b      	mov	r3, sp
 8008f66:	2112      	movs	r1, #18
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7fe ffd9 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008f6e:	1e05      	subs	r5, r0, #0
 8008f70:	bf18      	it	ne
 8008f72:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_sim_refresh_event = AT_FALSE;
 8008f74:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
 8008f78:	e559      	b.n	8008a2e <atcm_modem_get_urc+0x56>
 8008f7a:	bf00      	nop
 8008f7c:	0802439a 	.word	0x0802439a
 8008f80:	20008ef8 	.word	0x20008ef8
 8008f84:	080243e5 	.word	0x080243e5
 8008f88:	08024409 	.word	0x08024409
 8008f8c:	08024432 	.word	0x08024432
 8008f90:	0802445f 	.word	0x0802445f
 8008f94:	0c000b00 	.word	0x0c000b00
 8008f98:	0802447e 	.word	0x0802447e
 8008f9c:	080244ab 	.word	0x080244ab
 8008fa0:	080244cf 	.word	0x080244cf
 8008fa4:	080244ed 	.word	0x080244ed
  else if (p_modem_ctxt->persist.urc_avail_sim_detect_event == AT_TRUE)
 8008fa8:	f890 7022 	ldrb.w	r7, [r0, #34]	; 0x22
 8008fac:	b32f      	cbz	r7, 8008ffa <atcm_modem_get_urc+0x622>
    PRINT_DBG("urc_avail_sim_detect_event")
 8008fae:	4973      	ldr	r1, [pc, #460]	; (800917c <atcm_modem_get_urc+0x7a4>)
 8008fb0:	4873      	ldr	r0, [pc, #460]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8008fb2:	f013 fff1 	bl	801cf98 <strcpy>
 8008fb6:	4872      	ldr	r0, [pc, #456]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8008fb8:	f00e ffbc 	bl	8017f34 <crs_strlen>
 8008fbc:	4a70      	ldr	r2, [pc, #448]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8008fbe:	b283      	uxth	r3, r0
 8008fc0:	2102      	movs	r1, #2
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	f00e fff4 	bl	8017fb0 <traceIF_itmPrint>
 8008fc8:	486d      	ldr	r0, [pc, #436]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8008fca:	f00e ffb3 	bl	8017f34 <crs_strlen>
 8008fce:	4a6c      	ldr	r2, [pc, #432]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8008fd0:	b283      	uxth	r3, r0
 8008fd2:	2102      	movs	r1, #2
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	f00f fa11 	bl	80183fc <traceIF_uartPrint>
    (void) memcpy((void *)&sim_status_struct,
 8008fda:	f8b4 35c3 	ldrh.w	r3, [r4, #1475]	; 0x5c3
 8008fde:	f8ad 3000 	strh.w	r3, [sp]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	466b      	mov	r3, sp
 8008fe6:	2112      	movs	r1, #18
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7fe ff99 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8008fee:	1e05      	subs	r5, r0, #0
 8008ff0:	bf18      	it	ne
 8008ff2:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_sim_detect_event = AT_FALSE;
 8008ff4:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
 8008ff8:	e519      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_sim_state_event == AT_TRUE)
 8008ffa:	f890 8023 	ldrb.w	r8, [r0, #35]	; 0x23
 8008ffe:	f1b8 0f00 	cmp.w	r8, #0
 8009002:	d025      	beq.n	8009050 <atcm_modem_get_urc+0x678>
    PRINT_DBG("urc_avail_sim_state_event")
 8009004:	495f      	ldr	r1, [pc, #380]	; (8009184 <atcm_modem_get_urc+0x7ac>)
 8009006:	485e      	ldr	r0, [pc, #376]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009008:	f013 ffc6 	bl	801cf98 <strcpy>
 800900c:	485c      	ldr	r0, [pc, #368]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800900e:	f00e ff91 	bl	8017f34 <crs_strlen>
 8009012:	4a5b      	ldr	r2, [pc, #364]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009014:	b283      	uxth	r3, r0
 8009016:	2102      	movs	r1, #2
 8009018:	2001      	movs	r0, #1
 800901a:	f00e ffc9 	bl	8017fb0 <traceIF_itmPrint>
 800901e:	4858      	ldr	r0, [pc, #352]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009020:	f00e ff88 	bl	8017f34 <crs_strlen>
 8009024:	4a56      	ldr	r2, [pc, #344]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009026:	b283      	uxth	r3, r0
 8009028:	2102      	movs	r1, #2
 800902a:	2001      	movs	r0, #1
 800902c:	f00f f9e6 	bl	80183fc <traceIF_uartPrint>
    (void) memcpy((void *)&sim_status_struct,
 8009030:	f8b4 351b 	ldrh.w	r3, [r4, #1307]	; 0x51b
 8009034:	f8ad 3000 	strh.w	r3, [sp]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8009038:	2202      	movs	r2, #2
 800903a:	466b      	mov	r3, sp
 800903c:	2112      	movs	r1, #18
 800903e:	4630      	mov	r0, r6
 8009040:	f7fe ff6e 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 8009044:	1e05      	subs	r5, r0, #0
 8009046:	bf18      	it	ne
 8009048:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_sim_state_event = AT_FALSE;
 800904a:	f884 7023 	strb.w	r7, [r4, #35]	; 0x23
 800904e:	e4ee      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_lp_status == AT_TRUE)
 8009050:	f890 75c0 	ldrb.w	r7, [r0, #1472]	; 0x5c0
 8009054:	b33f      	cbz	r7, 80090a6 <atcm_modem_get_urc+0x6ce>
    PRINT_DBG("urc_avail_lp_status")
 8009056:	494c      	ldr	r1, [pc, #304]	; (8009188 <atcm_modem_get_urc+0x7b0>)
 8009058:	4849      	ldr	r0, [pc, #292]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800905a:	f013 ff9d 	bl	801cf98 <strcpy>
 800905e:	4848      	ldr	r0, [pc, #288]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009060:	f00e ff68 	bl	8017f34 <crs_strlen>
 8009064:	4a46      	ldr	r2, [pc, #280]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009066:	b283      	uxth	r3, r0
 8009068:	2102      	movs	r1, #2
 800906a:	2001      	movs	r0, #1
 800906c:	f00e ffa0 	bl	8017fb0 <traceIF_itmPrint>
 8009070:	4843      	ldr	r0, [pc, #268]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009072:	f00e ff5f 	bl	8017f34 <crs_strlen>
 8009076:	4a42      	ldr	r2, [pc, #264]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009078:	b283      	uxth	r3, r0
 800907a:	2102      	movs	r1, #2
 800907c:	2001      	movs	r0, #1
 800907e:	f00f f9bd 	bl	80183fc <traceIF_uartPrint>
    lp_status_struct.nwk_periodic_TAU = p_modem_ctxt->persist.low_power_status.nwk_periodic_TAU;
 8009082:	f8d4 35b8 	ldr.w	r3, [r4, #1464]	; 0x5b8
 8009086:	9300      	str	r3, [sp, #0]
    lp_status_struct.nwk_active_time = p_modem_ctxt->persist.low_power_status.nwk_active_time;
 8009088:	f8d4 35bc 	ldr.w	r3, [r4, #1468]	; 0x5bc
 800908c:	9301      	str	r3, [sp, #4]
    if (DATAPACK_writeStruct(p_rsp_buf,
 800908e:	2208      	movs	r2, #8
 8009090:	466b      	mov	r3, sp
 8009092:	2111      	movs	r1, #17
 8009094:	4630      	mov	r0, r6
 8009096:	f7fe ff43 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 800909a:	1e05      	subs	r5, r0, #0
 800909c:	bf18      	it	ne
 800909e:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_lp_status = AT_FALSE;
 80090a0:	f884 85c0 	strb.w	r8, [r4, #1472]	; 0x5c0
 80090a4:	e4c3      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_modem_events != CS_MDMEVENT_NONE)
 80090a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80090a8:	b30b      	cbz	r3, 80090ee <atcm_modem_get_urc+0x716>
    PRINT_DBG("urc_avail_modem_events")
 80090aa:	4938      	ldr	r1, [pc, #224]	; (800918c <atcm_modem_get_urc+0x7b4>)
 80090ac:	4834      	ldr	r0, [pc, #208]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090ae:	f013 ff73 	bl	801cf98 <strcpy>
 80090b2:	4833      	ldr	r0, [pc, #204]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090b4:	f00e ff3e 	bl	8017f34 <crs_strlen>
 80090b8:	4a31      	ldr	r2, [pc, #196]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090ba:	b283      	uxth	r3, r0
 80090bc:	2102      	movs	r1, #2
 80090be:	2001      	movs	r0, #1
 80090c0:	f00e ff76 	bl	8017fb0 <traceIF_itmPrint>
 80090c4:	482e      	ldr	r0, [pc, #184]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090c6:	f00e ff35 	bl	8017f34 <crs_strlen>
 80090ca:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090cc:	b283      	uxth	r3, r0
 80090ce:	2102      	movs	r1, #2
 80090d0:	2001      	movs	r0, #1
 80090d2:	f00f f993 	bl	80183fc <traceIF_uartPrint>
    if (DATAPACK_writeStruct(p_rsp_buf,
 80090d6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80090da:	2202      	movs	r2, #2
 80090dc:	210f      	movs	r1, #15
 80090de:	4630      	mov	r0, r6
 80090e0:	f7fe ff1e 	bl	8007f20 <DATAPACK_writeStruct>
  at_status_t retval = ATSTATUS_OK;
 80090e4:	1e05      	subs	r5, r0, #0
 80090e6:	bf18      	it	ne
 80090e8:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_modem_events = CS_MDMEVENT_NONE;
 80090ea:	8527      	strh	r7, [r4, #40]	; 0x28
 80090ec:	e49f      	b.n	8008a2e <atcm_modem_get_urc+0x56>
  else if (p_modem_ctxt->persist.urc_avail_commdm_event_count != 0U)
 80090ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80090f2:	b34b      	cbz	r3, 8009148 <atcm_modem_get_urc+0x770>
    PRINT_INFO("urc_avail_commdm_event")
 80090f4:	4926      	ldr	r1, [pc, #152]	; (8009190 <atcm_modem_get_urc+0x7b8>)
 80090f6:	4822      	ldr	r0, [pc, #136]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090f8:	f013 ff4e 	bl	801cf98 <strcpy>
 80090fc:	4820      	ldr	r0, [pc, #128]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 80090fe:	f00e ff19 	bl	8017f34 <crs_strlen>
 8009102:	2101      	movs	r1, #1
 8009104:	b283      	uxth	r3, r0
 8009106:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009108:	4608      	mov	r0, r1
 800910a:	f00e ff51 	bl	8017fb0 <traceIF_itmPrint>
 800910e:	481c      	ldr	r0, [pc, #112]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009110:	f00e ff10 	bl	8017f34 <crs_strlen>
 8009114:	2101      	movs	r1, #1
 8009116:	b283      	uxth	r3, r0
 8009118:	4a19      	ldr	r2, [pc, #100]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800911a:	4608      	mov	r0, r1
 800911c:	f00f f96e 	bl	80183fc <traceIF_uartPrint>
    comMdmd_event_infos.param1 = p_modem_ctxt->persist.urc_avail_commdm_event_count - 1U;
 8009120:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009124:	3b01      	subs	r3, #1
 8009126:	9300      	str	r3, [sp, #0]
    if (DATAPACK_writeStruct(p_rsp_buf,
 8009128:	2204      	movs	r2, #4
 800912a:	466b      	mov	r3, sp
 800912c:	2134      	movs	r1, #52	; 0x34
 800912e:	4630      	mov	r0, r6
 8009130:	f7fe fef6 	bl	8007f20 <DATAPACK_writeStruct>
    p_modem_ctxt->persist.urc_avail_commdm_event_count--;
 8009134:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  at_status_t retval = ATSTATUS_OK;
 8009138:	1e05      	subs	r5, r0, #0
    p_modem_ctxt->persist.urc_avail_commdm_event_count--;
 800913a:	f103 33ff 	add.w	r3, r3, #4294967295
  at_status_t retval = ATSTATUS_OK;
 800913e:	bf18      	it	ne
 8009140:	2501      	movne	r5, #1
    p_modem_ctxt->persist.urc_avail_commdm_event_count--;
 8009142:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009146:	e472      	b.n	8008a2e <atcm_modem_get_urc+0x56>
    PRINT_INFO("no pending URC")
 8009148:	4912      	ldr	r1, [pc, #72]	; (8009194 <atcm_modem_get_urc+0x7bc>)
 800914a:	480d      	ldr	r0, [pc, #52]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800914c:	f013 ff24 	bl	801cf98 <strcpy>
 8009150:	480b      	ldr	r0, [pc, #44]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009152:	f00e feef 	bl	8017f34 <crs_strlen>
 8009156:	2101      	movs	r1, #1
 8009158:	b283      	uxth	r3, r0
 800915a:	4a09      	ldr	r2, [pc, #36]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800915c:	4608      	mov	r0, r1
 800915e:	f00e ff27 	bl	8017fb0 <traceIF_itmPrint>
 8009162:	4807      	ldr	r0, [pc, #28]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 8009164:	f00e fee6 	bl	8017f34 <crs_strlen>
 8009168:	2101      	movs	r1, #1
 800916a:	b283      	uxth	r3, r0
 800916c:	4a04      	ldr	r2, [pc, #16]	; (8009180 <atcm_modem_get_urc+0x7a8>)
 800916e:	4608      	mov	r0, r1
 8009170:	f00f f944 	bl	80183fc <traceIF_uartPrint>
    retval = ATSTATUS_ERROR;
 8009174:	2501      	movs	r5, #1
 8009176:	e45a      	b.n	8008a2e <atcm_modem_get_urc+0x56>
    retval = ATSTATUS_OK_PENDING_URC;
 8009178:	2503      	movs	r5, #3
 800917a:	e4af      	b.n	8008adc <atcm_modem_get_urc+0x104>
 800917c:	08024514 	.word	0x08024514
 8009180:	20008ef8 	.word	0x20008ef8
 8009184:	0802453a 	.word	0x0802453a
 8009188:	0802455f 	.word	0x0802455f
 800918c:	0802457e 	.word	0x0802457e
 8009190:	080245a0 	.word	0x080245a0
 8009194:	080245c2 	.word	0x080245c2

08009198 <atcm_modem_get_error>:
{
 8009198:	b508      	push	{r3, lr}
 800919a:	4603      	mov	r3, r0
  if (DATAPACK_writeStruct(p_rsp_buf,
 800919c:	f203 7342 	addw	r3, r3, #1858	; 0x742
{
 80091a0:	4610      	mov	r0, r2
  if (DATAPACK_writeStruct(p_rsp_buf,
 80091a2:	212c      	movs	r1, #44	; 0x2c
 80091a4:	2202      	movs	r2, #2
 80091a6:	f7fe febb 	bl	8007f20 <DATAPACK_writeStruct>
 80091aa:	b1b0      	cbz	r0, 80091da <atcm_modem_get_error+0x42>
    PRINT_ERR("Buffer size problem")
 80091ac:	490b      	ldr	r1, [pc, #44]	; (80091dc <atcm_modem_get_error+0x44>)
 80091ae:	480c      	ldr	r0, [pc, #48]	; (80091e0 <atcm_modem_get_error+0x48>)
 80091b0:	f013 fef2 	bl	801cf98 <strcpy>
 80091b4:	480a      	ldr	r0, [pc, #40]	; (80091e0 <atcm_modem_get_error+0x48>)
 80091b6:	f00e febd 	bl	8017f34 <crs_strlen>
 80091ba:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <atcm_modem_get_error+0x48>)
 80091bc:	b283      	uxth	r3, r0
 80091be:	2110      	movs	r1, #16
 80091c0:	2001      	movs	r0, #1
 80091c2:	f00e fef5 	bl	8017fb0 <traceIF_itmPrint>
 80091c6:	4806      	ldr	r0, [pc, #24]	; (80091e0 <atcm_modem_get_error+0x48>)
 80091c8:	f00e feb4 	bl	8017f34 <crs_strlen>
 80091cc:	4a04      	ldr	r2, [pc, #16]	; (80091e0 <atcm_modem_get_error+0x48>)
 80091ce:	b283      	uxth	r3, r0
 80091d0:	2110      	movs	r1, #16
 80091d2:	2001      	movs	r0, #1
 80091d4:	f00f f912 	bl	80183fc <traceIF_uartPrint>
    retval = ATSTATUS_ERROR;
 80091d8:	2001      	movs	r0, #1
}
 80091da:	bd08      	pop	{r3, pc}
 80091dc:	080241c9 	.word	0x080241c9
 80091e0:	20008ef8 	.word	0x20008ef8

080091e4 <atcm_subscribe_net_event>:
{
 80091e4:	b507      	push	{r0, r1, r2, lr}
  CS_UrcEvent_t urcEvent = p_modem_ctxt->SID_ctxt.urcEvent;
 80091e6:	f890 367c 	ldrb.w	r3, [r0, #1660]	; 0x67c
  if ((urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_EPS_LOCATION_INFO))
 80091ea:	1e5a      	subs	r2, r3, #1
 80091ec:	2a01      	cmp	r2, #1
 80091ee:	d81e      	bhi.n	800922e <atcm_subscribe_net_event+0x4a>
    if ((p_modem_ctxt->persist.urc_subscript_eps_networkReg == CELLULAR_FALSE) &&
 80091f0:	7b02      	ldrb	r2, [r0, #12]
 80091f2:	b9aa      	cbnz	r2, 8009220 <atcm_subscribe_net_event+0x3c>
 80091f4:	7b42      	ldrb	r2, [r0, #13]
 80091f6:	b99a      	cbnz	r2, 8009220 <atcm_subscribe_net_event+0x3c>
      if (urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT)
 80091f8:	2b01      	cmp	r3, #1
        p_modem_ctxt->persist.urc_subscript_eps_locationInfo = CELLULAR_TRUE;
 80091fa:	bf16      	itet	ne
 80091fc:	2301      	movne	r3, #1
        p_modem_ctxt->persist.urc_subscript_eps_networkReg = CELLULAR_TRUE;
 80091fe:	7303      	strbeq	r3, [r0, #12]
        p_modem_ctxt->persist.urc_subscript_eps_locationInfo = CELLULAR_TRUE;
 8009200:	7343      	strbne	r3, [r0, #13]
      if (p_modem_ctxt->persist.psm_urc_requested == AT_TRUE)
 8009202:	f890 3517 	ldrb.w	r3, [r0, #1303]	; 0x517
 8009206:	2b00      	cmp	r3, #0
        p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_ENABLE_NETWK_REG_LOC_URC;
 8009208:	bf14      	ite	ne
 800920a:	2304      	movne	r3, #4
 800920c:	2302      	moveq	r3, #2
 800920e:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CEREG, FINAL_CMD);
 8009212:	2301      	movs	r3, #1
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2319      	movs	r3, #25
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CREG, FINAL_CMD);
 8009218:	2203      	movs	r2, #3
 800921a:	f7ff fa2f 	bl	800867c <atcm_program_AT_CMD>
 800921e:	e002      	b.n	8009226 <atcm_subscribe_net_event+0x42>
      atcm_program_NO_MORE_CMD(p_atp_ctxt);
 8009220:	4608      	mov	r0, r1
 8009222:	f7ff fa85 	bl	8008730 <atcm_program_NO_MORE_CMD>
}
 8009226:	2000      	movs	r0, #0
 8009228:	b003      	add	sp, #12
 800922a:	f85d fb04 	ldr.w	pc, [sp], #4
  else if ((urcEvent == CS_URCEVENT_GPRS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_GPRS_LOCATION_INFO))
 800922e:	1eda      	subs	r2, r3, #3
 8009230:	2a01      	cmp	r2, #1
 8009232:	d817      	bhi.n	8009264 <atcm_subscribe_net_event+0x80>
    if ((p_modem_ctxt->persist.urc_subscript_gprs_networkReg == CELLULAR_FALSE) &&
 8009234:	7b82      	ldrb	r2, [r0, #14]
 8009236:	2a00      	cmp	r2, #0
 8009238:	d1f2      	bne.n	8009220 <atcm_subscribe_net_event+0x3c>
 800923a:	7bc2      	ldrb	r2, [r0, #15]
 800923c:	2a00      	cmp	r2, #0
 800923e:	d1ef      	bne.n	8009220 <atcm_subscribe_net_event+0x3c>
      if (urcEvent == CS_URCEVENT_GPRS_NETWORK_REG_STAT)
 8009240:	2b03      	cmp	r3, #3
 8009242:	f04f 0301 	mov.w	r3, #1
        p_modem_ctxt->persist.urc_subscript_gprs_networkReg = CELLULAR_TRUE;
 8009246:	bf0c      	ite	eq
 8009248:	7383      	strbeq	r3, [r0, #14]
        p_modem_ctxt->persist.urc_subscript_gprs_locationInfo = CELLULAR_TRUE;
 800924a:	73c3      	strbne	r3, [r0, #15]
      if (p_modem_ctxt->persist.psm_urc_requested == AT_TRUE)
 800924c:	f890 3517 	ldrb.w	r3, [r0, #1303]	; 0x517
 8009250:	2b00      	cmp	r3, #0
        p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_ENABLE_NETWK_REG_LOC_URC;
 8009252:	bf14      	ite	ne
 8009254:	2304      	movne	r3, #4
 8009256:	2302      	moveq	r3, #2
 8009258:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGREG, FINAL_CMD);
 800925c:	2301      	movs	r3, #1
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	2318      	movs	r3, #24
 8009262:	e7d9      	b.n	8009218 <atcm_subscribe_net_event+0x34>
  else if ((urcEvent == CS_URCEVENT_CS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_CS_LOCATION_INFO))
 8009264:	1f5a      	subs	r2, r3, #5
 8009266:	2a01      	cmp	r2, #1
 8009268:	d8dd      	bhi.n	8009226 <atcm_subscribe_net_event+0x42>
    if ((p_modem_ctxt->persist.urc_subscript_cs_networkReg == CELLULAR_FALSE) &&
 800926a:	7c02      	ldrb	r2, [r0, #16]
 800926c:	2a00      	cmp	r2, #0
 800926e:	d1d7      	bne.n	8009220 <atcm_subscribe_net_event+0x3c>
 8009270:	7c42      	ldrb	r2, [r0, #17]
 8009272:	2a00      	cmp	r2, #0
 8009274:	d1d4      	bne.n	8009220 <atcm_subscribe_net_event+0x3c>
      if (urcEvent == CS_URCEVENT_CS_NETWORK_REG_STAT)
 8009276:	2b05      	cmp	r3, #5
 8009278:	f04f 0301 	mov.w	r3, #1
        p_modem_ctxt->persist.urc_subscript_cs_networkReg = CELLULAR_TRUE;
 800927c:	bf0c      	ite	eq
 800927e:	7403      	strbeq	r3, [r0, #16]
        p_modem_ctxt->persist.urc_subscript_cs_locationInfo = CELLULAR_TRUE;
 8009280:	7443      	strbne	r3, [r0, #17]
      p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_ENABLE_NETWK_REG_LOC_URC;
 8009282:	2302      	movs	r3, #2
 8009284:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CREG, FINAL_CMD);
 8009288:	2301      	movs	r3, #1
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	2317      	movs	r3, #23
 800928e:	e7c3      	b.n	8009218 <atcm_subscribe_net_event+0x34>

08009290 <atcm_unsubscribe_net_event>:
{
 8009290:	b507      	push	{r0, r1, r2, lr}
  CS_UrcEvent_t urcEvent = p_modem_ctxt->SID_ctxt.urcEvent;
 8009292:	f890 367c 	ldrb.w	r3, [r0, #1660]	; 0x67c
  if ((urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_EPS_LOCATION_INFO))
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	2a01      	cmp	r2, #1
 800929a:	d81a      	bhi.n	80092d2 <atcm_unsubscribe_net_event+0x42>
    if (urcEvent == CS_URCEVENT_EPS_NETWORK_REG_STAT)
 800929c:	2b01      	cmp	r3, #1
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	d10b      	bne.n	80092bc <atcm_unsubscribe_net_event+0x2c>
      p_modem_ctxt->persist.urc_subscript_eps_networkReg = CELLULAR_FALSE;
 80092a4:	7303      	strb	r3, [r0, #12]
    if ((p_modem_ctxt->persist.urc_subscript_eps_networkReg == CELLULAR_FALSE) &&
 80092a6:	7b43      	ldrb	r3, [r0, #13]
 80092a8:	b963      	cbnz	r3, 80092c4 <atcm_unsubscribe_net_event+0x34>
      p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_DISABLE_NETWK_REG_URC;
 80092aa:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CEREG, FINAL_CMD);
 80092ae:	2301      	movs	r3, #1
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	2319      	movs	r3, #25
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CREG, FINAL_CMD);
 80092b4:	2203      	movs	r2, #3
 80092b6:	f7ff f9e1 	bl	800867c <atcm_program_AT_CMD>
 80092ba:	e006      	b.n	80092ca <atcm_unsubscribe_net_event+0x3a>
      p_modem_ctxt->persist.urc_subscript_eps_locationInfo = CELLULAR_FALSE;
 80092bc:	7343      	strb	r3, [r0, #13]
    if ((p_modem_ctxt->persist.urc_subscript_eps_networkReg == CELLULAR_FALSE) &&
 80092be:	7b03      	ldrb	r3, [r0, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0f0      	beq.n	80092a6 <atcm_unsubscribe_net_event+0x16>
      atcm_program_NO_MORE_CMD(p_atp_ctxt);
 80092c4:	4608      	mov	r0, r1
 80092c6:	f7ff fa33 	bl	8008730 <atcm_program_NO_MORE_CMD>
}
 80092ca:	2000      	movs	r0, #0
 80092cc:	b003      	add	sp, #12
 80092ce:	f85d fb04 	ldr.w	pc, [sp], #4
  else if ((urcEvent == CS_URCEVENT_GPRS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_GPRS_LOCATION_INFO))
 80092d2:	1eda      	subs	r2, r3, #3
 80092d4:	2a01      	cmp	r2, #1
 80092d6:	d812      	bhi.n	80092fe <atcm_unsubscribe_net_event+0x6e>
    if (urcEvent == CS_URCEVENT_GPRS_NETWORK_REG_STAT)
 80092d8:	2b03      	cmp	r3, #3
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	d109      	bne.n	80092f4 <atcm_unsubscribe_net_event+0x64>
      p_modem_ctxt->persist.urc_subscript_gprs_networkReg = CELLULAR_FALSE;
 80092e0:	7383      	strb	r3, [r0, #14]
    if ((p_modem_ctxt->persist.urc_subscript_gprs_networkReg == CELLULAR_FALSE) &&
 80092e2:	7bc3      	ldrb	r3, [r0, #15]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1ed      	bne.n	80092c4 <atcm_unsubscribe_net_event+0x34>
      p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_DISABLE_NETWK_REG_URC;
 80092e8:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CGREG, FINAL_CMD);
 80092ec:	2301      	movs	r3, #1
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	2318      	movs	r3, #24
 80092f2:	e7df      	b.n	80092b4 <atcm_unsubscribe_net_event+0x24>
      p_modem_ctxt->persist.urc_subscript_gprs_locationInfo = CELLULAR_FALSE;
 80092f4:	73c3      	strb	r3, [r0, #15]
    if ((p_modem_ctxt->persist.urc_subscript_gprs_networkReg == CELLULAR_FALSE) &&
 80092f6:	7b83      	ldrb	r3, [r0, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e3      	bne.n	80092c4 <atcm_unsubscribe_net_event+0x34>
 80092fc:	e7f1      	b.n	80092e2 <atcm_unsubscribe_net_event+0x52>
  else if ((urcEvent == CS_URCEVENT_CS_NETWORK_REG_STAT) || (urcEvent == CS_URCEVENT_CS_LOCATION_INFO))
 80092fe:	1f5a      	subs	r2, r3, #5
 8009300:	2a01      	cmp	r2, #1
 8009302:	d8e2      	bhi.n	80092ca <atcm_unsubscribe_net_event+0x3a>
    if (urcEvent == CS_URCEVENT_CS_NETWORK_REG_STAT)
 8009304:	2b05      	cmp	r3, #5
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	d109      	bne.n	8009320 <atcm_unsubscribe_net_event+0x90>
      p_modem_ctxt->persist.urc_subscript_cs_networkReg = CELLULAR_FALSE;
 800930c:	7403      	strb	r3, [r0, #16]
    if ((p_modem_ctxt->persist.urc_subscript_cs_networkReg == CELLULAR_FALSE) &&
 800930e:	7c43      	ldrb	r3, [r0, #17]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1d7      	bne.n	80092c4 <atcm_unsubscribe_net_event+0x34>
      p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param = CXREG_DISABLE_NETWK_REG_URC;
 8009314:	f880 3762 	strb.w	r3, [r0, #1890]	; 0x762
      atcm_program_AT_CMD(p_modem_ctxt, p_atp_ctxt, ATTYPE_WRITE_CMD, (CMD_ID_t) CMD_AT_CREG, FINAL_CMD);
 8009318:	2301      	movs	r3, #1
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	2317      	movs	r3, #23
 800931e:	e7c9      	b.n	80092b4 <atcm_unsubscribe_net_event+0x24>
      p_modem_ctxt->persist.urc_subscript_cs_locationInfo = CELLULAR_FALSE;
 8009320:	7443      	strb	r3, [r0, #17]
    if ((p_modem_ctxt->persist.urc_subscript_cs_networkReg == CELLULAR_FALSE) &&
 8009322:	7c03      	ldrb	r3, [r0, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f2      	beq.n	800930e <atcm_unsubscribe_net_event+0x7e>
 8009328:	e7cc      	b.n	80092c4 <atcm_unsubscribe_net_event+0x34>

0800932a <atcm_validate_ping_request>:
{
 800932a:	b510      	push	{r4, lr}
  (void) memcpy((void *)&p_modem_ctxt->persist.ping_infos, (void *)&p_modem_ctxt->SID_ctxt.ping_infos,
 800932c:	f500 61dd 	add.w	r1, r0, #1768	; 0x6e8
{
 8009330:	4604      	mov	r4, r0
  (void) memcpy((void *)&p_modem_ctxt->persist.ping_infos, (void *)&p_modem_ctxt->SID_ctxt.ping_infos,
 8009332:	2243      	movs	r2, #67	; 0x43
 8009334:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 8009338:	f013 fd80 	bl	801ce3c <memcpy>
  (void) memset((void *)&p_modem_ctxt->persist.ping_resp_urc, 0, sizeof(CS_Ping_response_t));
 800933c:	2250      	movs	r2, #80	; 0x50
 800933e:	2100      	movs	r1, #0
 8009340:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009344:	f013 fd88 	bl	801ce58 <memset>
  p_modem_ctxt->persist.ping_resp_urc.index = PING_INVALID_INDEX;
 8009348:	23ff      	movs	r3, #255	; 0xff
 800934a:	f884 3564 	strb.w	r3, [r4, #1380]	; 0x564
  p_modem_ctxt->persist.urc_avail_ping_rsp = AT_FALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	f884 35b4 	strb.w	r3, [r4, #1460]	; 0x5b4
}
 8009354:	bd10      	pop	{r4, pc}

08009356 <atcm_modem_event_received>:
  if ((p_modem_ctxt->persist.modem_events_subscript & mdm_evt) != 0U) /* bitmask check */
 8009356:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8009358:	400b      	ands	r3, r1
    p_modem_ctxt->persist.urc_avail_modem_events |= mdm_evt;
 800935a:	bf1f      	itttt	ne
 800935c:	8d03      	ldrhne	r3, [r0, #40]	; 0x28
 800935e:	4319      	orrne	r1, r3
 8009360:	8501      	strhne	r1, [r0, #40]	; 0x28
    event_subscribed = AT_TRUE;
 8009362:	2001      	movne	r0, #1
  at_bool_t event_subscribed = AT_FALSE;
 8009364:	bf08      	it	eq
 8009366:	4618      	moveq	r0, r3
}
 8009368:	4770      	bx	lr
	...

0800936c <atcm_reset_persistent_context>:
{
 800936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PRINT_API("enter reset_persistent_context()")
 8009370:	4951      	ldr	r1, [pc, #324]	; (80094b8 <atcm_reset_persistent_context+0x14c>)
{
 8009372:	4604      	mov	r4, r0
  PRINT_API("enter reset_persistent_context()")
 8009374:	4851      	ldr	r0, [pc, #324]	; (80094bc <atcm_reset_persistent_context+0x150>)
 8009376:	f013 fe0f 	bl	801cf98 <strcpy>
 800937a:	4850      	ldr	r0, [pc, #320]	; (80094bc <atcm_reset_persistent_context+0x150>)
 800937c:	f00e fdda 	bl	8017f34 <crs_strlen>
 8009380:	4a4e      	ldr	r2, [pc, #312]	; (80094bc <atcm_reset_persistent_context+0x150>)
 8009382:	b283      	uxth	r3, r0
 8009384:	2104      	movs	r1, #4
 8009386:	2001      	movs	r0, #1
 8009388:	f00e fe12 	bl	8017fb0 <traceIF_itmPrint>
 800938c:	484b      	ldr	r0, [pc, #300]	; (80094bc <atcm_reset_persistent_context+0x150>)
 800938e:	f00e fdd1 	bl	8017f34 <crs_strlen>
  p_persistent_ctxt->urc_subscript_eps_networkReg = CELLULAR_FALSE;
 8009392:	2500      	movs	r5, #0
  PRINT_API("enter reset_persistent_context()")
 8009394:	4a49      	ldr	r2, [pc, #292]	; (80094bc <atcm_reset_persistent_context+0x150>)
 8009396:	b283      	uxth	r3, r0
 8009398:	2104      	movs	r1, #4
 800939a:	2001      	movs	r0, #1
 800939c:	f00f f82e 	bl	80183fc <traceIF_uartPrint>
  p_persistent_ctxt->urc_subscript_cs_networkReg = CELLULAR_FALSE;
 80093a0:	e9c4 5500 	strd	r5, r5, [r4]
  p_persistent_ctxt->urc_avail_gprs_location_info_lac = AT_FALSE;
 80093a4:	e9c4 5502 	strd	r5, r5, [r4, #8]
  p_persistent_ctxt->urc_avail_pdn_event = AT_FALSE;
 80093a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
  p_persistent_ctxt->pdn_event.event_origine = CGEV_EVENT_UNDEFINE;
 80093ac:	4a44      	ldr	r2, [pc, #272]	; (80094c0 <atcm_reset_persistent_context+0x154>)
  p_persistent_ctxt->urc_avail_commdm_event_count = 0U;
 80093ae:	7625      	strb	r5, [r4, #24]
  p_persistent_ctxt->modem_events_subscript = CS_MDMEVENT_NONE;
 80093b0:	8365      	strh	r5, [r4, #26]
  p_persistent_ctxt->urc_avail_modem_events = CS_MDMEVENT_NONE;
 80093b2:	83a5      	strh	r5, [r4, #28]
  p_persistent_ctxt->pdn_event.event_origine = CGEV_EVENT_UNDEFINE;
 80093b4:	6462      	str	r2, [r4, #68]	; 0x44
  for (uint8_t i = 0U; i < MODEM_MAX_NB_PDP_CTXT; i++)
 80093b6:	f204 365e 	addw	r6, r4, #862	; 0x35e
    p_tmp->pdn_defined = AT_FALSE;
 80093ba:	462f      	mov	r7, r5
 80093bc:	b2eb      	uxtb	r3, r5
    p_tmp->mdm_cid_value = i; /* modem cid value (0 is a reserved value) */
 80093be:	f806 3c04 	strb.w	r3, [r6, #-4]
    p_tmp->pdn_defined = AT_FALSE;
 80093c2:	f806 7c03 	strb.w	r7, [r6, #-3]
    p_tmp->affected_config = atcm_convert_index_to_PDN_conf(i);
 80093c6:	f806 3c02 	strb.w	r3, [r6, #-2]
    p_tmp->ip_addr_infos.ip_addr_type = CS_IPAT_INVALID;
 80093ca:	f806 7c01 	strb.w	r7, [r6, #-1]
    (void) memset((void *)&p_tmp->ip_addr_infos.ip_addr_value, 0, MAX_IP_ADDR_SIZE);
 80093ce:	4630      	mov	r0, r6
 80093d0:	2240      	movs	r2, #64	; 0x40
 80093d2:	2100      	movs	r1, #0
 80093d4:	3501      	adds	r5, #1
 80093d6:	f013 fd3f 	bl	801ce58 <memset>
  for (uint8_t i = 0U; i < MODEM_MAX_NB_PDP_CTXT; i++)
 80093da:	2d06      	cmp	r5, #6
 80093dc:	f106 0644 	add.w	r6, r6, #68	; 0x44
 80093e0:	d1ec      	bne.n	80093bc <atcm_reset_persistent_context+0x50>
 80093e2:	f104 054a 	add.w	r5, r4, #74	; 0x4a
 80093e6:	4626      	mov	r6, r4
 80093e8:	f504 7857 	add.w	r8, r4, #860	; 0x35c
    p_tmp->conf_id = CS_PDN_NOT_DEFINED; /* not used */
 80093ec:	f04f 090c 	mov.w	r9, #12
    p_tmp->apn_present = CELLULAR_TRUE;
 80093f0:	2701      	movs	r7, #1
    p_tmp->conf_id = CS_PDN_NOT_DEFINED; /* not used */
 80093f2:	f805 9c02 	strb.w	r9, [r5, #-2]
    p_tmp->apn_present = CELLULAR_TRUE;
 80093f6:	f805 7c01 	strb.w	r7, [r5, #-1]
    (void) memset((void *)&p_tmp->apn, 0, MAX_APN_SIZE);
 80093fa:	2240      	movs	r2, #64	; 0x40
 80093fc:	2100      	movs	r1, #0
 80093fe:	4628      	mov	r0, r5
 8009400:	f013 fd2a 	bl	801ce58 <memset>
    (void) memset((void *)&p_tmp->pdn_conf, 0, sizeof(CS_PDN_configuration_t));
 8009404:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8009408:	2241      	movs	r2, #65	; 0x41
 800940a:	2100      	movs	r1, #0
 800940c:	3583      	adds	r5, #131	; 0x83
 800940e:	f013 fd23 	bl	801ce58 <memset>
  for (uint8_t i = 0U; i < MODEM_MAX_NB_PDP_CTXT; i++)
 8009412:	4545      	cmp	r5, r8
 8009414:	d1ed      	bne.n	80093f2 <atcm_reset_persistent_context+0x86>
  p_persistent_ctxt->pdn_default_conf_id = CS_PDN_PREDEF_CONFIG;
 8009416:	2300      	movs	r3, #0
 8009418:	f884 34f2 	strb.w	r3, [r4, #1266]	; 0x4f2
  p_predef->conf_id = CS_PDN_PREDEF_CONFIG;
 800941c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  p_predef->apn_present = CELLULAR_TRUE;
 8009420:	f884 7049 	strb.w	r7, [r4, #73]	; 0x49
      if (reserved_user_modem_cid == p_tmp->mdm_cid_value)
 8009424:	f204 305a 	addw	r0, r4, #858	; 0x35a
 8009428:	2544      	movs	r5, #68	; 0x44
 800942a:	fb05 f203 	mul.w	r2, r5, r3
 800942e:	5c81      	ldrb	r1, [r0, r2]
 8009430:	2901      	cmp	r1, #1
 8009432:	d03d      	beq.n	80094b0 <atcm_reset_persistent_context+0x144>
    } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8009434:	3301      	adds	r3, #1
 8009436:	2b06      	cmp	r3, #6
 8009438:	d1f7      	bne.n	800942a <atcm_reset_persistent_context+0xbe>
  p_predef->pdn_conf.pdp_type = CS_PDPTYPE_IP;
 800943a:	2500      	movs	r5, #0
 800943c:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
  (void) memcpy((AT_CHAR_t *)&p_predef->apn, "", sizeof(""));
 8009440:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8009444:	2301      	movs	r3, #1
    p_tmp->socket_connId_value = ((uint8_t)i + 1U); /* socket ID range from 1 to 6,
 8009446:	f886 34f3 	strb.w	r3, [r6, #1267]	; 0x4f3
    p_tmp->socket_connected = AT_FALSE;
 800944a:	3301      	adds	r3, #1
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800944c:	2b07      	cmp	r3, #7
    p_tmp->socket_connected = AT_FALSE;
 800944e:	f886 54f4 	strb.w	r5, [r6, #1268]	; 0x4f4
    p_tmp->socket_data_pending_urc = AT_FALSE;
 8009452:	f886 54f5 	strb.w	r5, [r6, #1269]	; 0x4f5
    p_tmp->socket_closed_pending_urc = AT_FALSE;
 8009456:	f886 54f6 	strb.w	r5, [r6, #1270]	; 0x4f6
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800945a:	f106 0604 	add.w	r6, r6, #4
 800945e:	d1f2      	bne.n	8009446 <atcm_reset_persistent_context+0xda>
  p_persistent_ctxt->sim_selected = CS_MODEM_SIM_SOCKET_0; /* default SIM slot selected */
 8009460:	4b18      	ldr	r3, [pc, #96]	; (80094c4 <atcm_reset_persistent_context+0x158>)
 8009462:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
  (void) memset((void *)&p_persistent_ctxt->ping_infos, 0, sizeof(csint_ping_params_t));
 8009466:	2243      	movs	r2, #67	; 0x43
 8009468:	2100      	movs	r1, #0
  p_persistent_ctxt->psm_urc_requested = AT_FALSE;       /* PSM default value */
 800946a:	f884 550b 	strb.w	r5, [r4, #1291]	; 0x50b
  p_persistent_ctxt->modem_at_ready = AT_FALSE;     /* modem ready to receive AT commands */
 800946e:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
  (void) memset((void *)&p_persistent_ctxt->ping_infos, 0, sizeof(csint_ping_params_t));
 8009472:	f204 5014 	addw	r0, r4, #1300	; 0x514
 8009476:	f013 fcef 	bl	801ce58 <memset>
  (void) memset((void *)&p_persistent_ctxt->ping_resp_urc, 0, sizeof(CS_Ping_response_t));
 800947a:	2250      	movs	r2, #80	; 0x50
 800947c:	2100      	movs	r1, #0
 800947e:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
 8009482:	f013 fce9 	bl	801ce58 <memset>
  p_persistent_ctxt->ping_resp_urc.index = PING_INVALID_INDEX;
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	f884 3558 	strb.w	r3, [r4, #1368]	; 0x558
  p_persistent_ctxt->urc_avail_lp_status = AT_FALSE;
 800948c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009490:	f8c4 35b4 	str.w	r3, [r4, #1460]	; 0x5b4
  p_persistent_ctxt->sim_detect_infos.param1 = CS_SIMINFOS_UNKNOWN;
 8009494:	f44f 7300 	mov.w	r3, #512	; 0x200
  p_persistent_ctxt->urc_avail_ping_rsp = AT_FALSE;
 8009498:	f884 55a8 	strb.w	r5, [r4, #1448]	; 0x5a8
  p_persistent_ctxt->low_power_status.nwk_periodic_TAU = 0U; /* T3412, default value (0U means value not available) */
 800949c:	f8c4 55ac 	str.w	r5, [r4, #1452]	; 0x5ac
  p_persistent_ctxt->low_power_status.nwk_active_time = 0U;  /* T3324, default value (0U means value not available) */
 80094a0:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
  p_persistent_ctxt->sim_detect_infos.param1 = CS_SIMINFOS_UNKNOWN;
 80094a4:	f8a4 35b8 	strh.w	r3, [r4, #1464]	; 0x5b8
  p_persistent_ctxt->sim_state_infos.param1 = CS_SIMINFOS_UNKNOWN;
 80094a8:	f884 55ba 	strb.w	r5, [r4, #1466]	; 0x5ba
}
 80094ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        p_tmp->pdn_defined = AT_TRUE;
 80094b0:	4422      	add	r2, r4
 80094b2:	f882 135b 	strb.w	r1, [r2, #859]	; 0x35b
    } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 80094b6:	e7c0      	b.n	800943a <atcm_reset_persistent_context+0xce>
 80094b8:	080245dc 	.word	0x080245dc
 80094bc:	20008ef8 	.word	0x20008ef8
 80094c0:	0c000b00 	.word	0x0c000b00
 80094c4:	ffff0100 	.word	0xffff0100

080094c8 <atcm_reset_SID_context>:
{
 80094c8:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter reset_SID_context()")
 80094ca:	4d2c      	ldr	r5, [pc, #176]	; (800957c <atcm_reset_SID_context+0xb4>)
 80094cc:	492c      	ldr	r1, [pc, #176]	; (8009580 <atcm_reset_SID_context+0xb8>)
{
 80094ce:	4604      	mov	r4, r0
  PRINT_API("enter reset_SID_context()")
 80094d0:	4628      	mov	r0, r5
 80094d2:	f013 fd61 	bl	801cf98 <strcpy>
 80094d6:	4628      	mov	r0, r5
 80094d8:	f00e fd2c 	bl	8017f34 <crs_strlen>
 80094dc:	462a      	mov	r2, r5
 80094de:	b283      	uxth	r3, r0
 80094e0:	2104      	movs	r1, #4
 80094e2:	2001      	movs	r0, #1
 80094e4:	f00e fd64 	bl	8017fb0 <traceIF_itmPrint>
 80094e8:	4628      	mov	r0, r5
 80094ea:	f00e fd23 	bl	8017f34 <crs_strlen>
 80094ee:	462a      	mov	r2, r5
 80094f0:	b283      	uxth	r3, r0
 80094f2:	2104      	movs	r1, #4
 80094f4:	2001      	movs	r0, #1
 80094f6:	f00e ff81 	bl	80183fc <traceIF_uartPrint>
  (void) memset((void *)&p_sid_ctxt->write_operator_infos, 0, sizeof(CS_OperatorSelector_t));
 80094fa:	2248      	movs	r2, #72	; 0x48
 80094fc:	2100      	movs	r1, #0
 80094fe:	f104 0018 	add.w	r0, r4, #24
 8009502:	f013 fca9 	bl	801ce58 <memset>
  p_sid_ctxt->write_operator_infos.format = CS_ONF_NOT_PRESENT;
 8009506:	2309      	movs	r3, #9
  p_sid_ctxt->modem_init.init = CS_CMI_MINI;
 8009508:	2500      	movs	r5, #0
  p_sid_ctxt->write_operator_infos.format = CS_ONF_NOT_PRESENT;
 800950a:	8363      	strh	r3, [r4, #26]
  (void) memset((void *)&p_sid_ctxt->read_operator_infos, 0, sizeof(CS_RegistrationStatus_t));
 800950c:	224e      	movs	r2, #78	; 0x4e
 800950e:	2100      	movs	r1, #0
 8009510:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8009514:	f013 fca0 	bl	801ce58 <memset>
  (void) memset((void *)&p_sid_ctxt->modem_init.pincode.pincode, 0, sizeof(csint_pinCode_t));
 8009518:	2210      	movs	r2, #16
 800951a:	4629      	mov	r1, r5
  p_sid_ctxt->modem_init.init = CS_CMI_MINI;
 800951c:	7065      	strb	r5, [r4, #1]
  p_sid_ctxt->modem_init.reset = CELLULAR_FALSE;
 800951e:	70a5      	strb	r5, [r4, #2]
  (void) memset((void *)&p_sid_ctxt->modem_init.pincode.pincode, 0, sizeof(csint_pinCode_t));
 8009520:	1ce0      	adds	r0, r4, #3
 8009522:	f013 fc99 	bl	801ce58 <memset>
  p_sid_ctxt->pdn_conf_id = CS_PDN_CONFIG_DEFAULT;
 8009526:	230b      	movs	r3, #11
  (void) memset((void *)&p_sid_ctxt->init_power_config, 0, sizeof(CS_init_power_config_t));
 8009528:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
  p_sid_ctxt->pdn_conf_id = CS_PDN_CONFIG_DEFAULT;
 800952c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
  (void) memset((void *)&p_sid_ctxt->socketSendData_struct, 0, sizeof(csint_socket_data_buffer_t));
 8009530:	2258      	movs	r2, #88	; 0x58
 8009532:	4629      	mov	r1, r5
  p_sid_ctxt->sim_generic_access.bytes_received = 0U;
 8009534:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
  p_sid_ctxt->device_info = NULL;
 8009538:	6165      	str	r5, [r4, #20]
  p_sid_ctxt->dns_request_infos = NULL;
 800953a:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
  p_sid_ctxt->direct_cmd_tx = NULL;
 800953e:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
  (void) memset((void *)&p_sid_ctxt->init_power_config, 0, sizeof(CS_init_power_config_t));
 8009542:	f8c4 516b 	str.w	r5, [r4, #363]	; 0x16b
  (void) memset((void *)&p_sid_ctxt->set_power_config, 0, sizeof(CS_set_power_config_t));
 8009546:	f8c4 516f 	str.w	r5, [r4, #367]	; 0x16f
 800954a:	f8c4 5173 	str.w	r5, [r4, #371]	; 0x173
 800954e:	f8a4 5177 	strh.w	r5, [r4, #375]	; 0x177
  p_sid_ctxt->signal_quality = NULL;
 8009552:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  p_sid_ctxt->urcEvent = CS_URCEVENT_NONE;
 8009556:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
  p_sid_ctxt->cfun_status = CS_CMI_MINI;
 800955a:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
  (void) memset((void *)&p_sid_ctxt->socketSendData_struct, 0, sizeof(csint_socket_data_buffer_t));
 800955e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8009562:	f013 fc79 	bl	801ce58 <memset>
  (void) memset((void *)&p_sid_ctxt->ping_infos, 0, sizeof(csint_ping_params_t));
 8009566:	2243      	movs	r2, #67	; 0x43
 8009568:	4629      	mov	r1, r5
 800956a:	f504 7090 	add.w	r0, r4, #288	; 0x120
 800956e:	f013 fc73 	bl	801ce58 <memset>
  p_sid_ctxt->wakeup_origin = UNKNOWN_WAKEUP;
 8009572:	f884 5179 	strb.w	r5, [r4, #377]	; 0x179
  p_sid_ctxt->error_report.error_type = CSERR_UNKNOWN;
 8009576:	f8a4 517a 	strh.w	r5, [r4, #378]	; 0x17a
}
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	20008ef8 	.word	0x20008ef8
 8009580:	0802460c 	.word	0x0802460c

08009584 <atcm_reset_CMD_context>:
{
 8009584:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter reset_CMD_context()")
 8009586:	4d14      	ldr	r5, [pc, #80]	; (80095d8 <atcm_reset_CMD_context+0x54>)
 8009588:	4914      	ldr	r1, [pc, #80]	; (80095dc <atcm_reset_CMD_context+0x58>)
{
 800958a:	4604      	mov	r4, r0
  PRINT_API("enter reset_CMD_context()")
 800958c:	4628      	mov	r0, r5
 800958e:	f013 fd03 	bl	801cf98 <strcpy>
 8009592:	4628      	mov	r0, r5
 8009594:	f00e fcce 	bl	8017f34 <crs_strlen>
 8009598:	462a      	mov	r2, r5
 800959a:	b283      	uxth	r3, r0
 800959c:	2104      	movs	r1, #4
 800959e:	2001      	movs	r0, #1
 80095a0:	f00e fd06 	bl	8017fb0 <traceIF_itmPrint>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f00e fcc5 	bl	8017f34 <crs_strlen>
 80095aa:	462a      	mov	r2, r5
 80095ac:	b283      	uxth	r3, r0
 80095ae:	2104      	movs	r1, #4
 80095b0:	2001      	movs	r0, #1
 80095b2:	f00e ff23 	bl	80183fc <traceIF_uartPrint>
  p_cmd_ctxt->cgatt_write_cmd_param = CGATT_UNKNOWN;
 80095b6:	2302      	movs	r3, #2
 80095b8:	7063      	strb	r3, [r4, #1]
  p_cmd_ctxt->cxreg_write_cmd_param = CXREG_DISABLE_NETWK_REG_URC;
 80095ba:	2300      	movs	r3, #0
 80095bc:	70a3      	strb	r3, [r4, #2]
  p_cmd_ctxt->pdn_state = PDN_STATE_ACTIVATE;
 80095be:	2301      	movs	r3, #1
 80095c0:	7163      	strb	r3, [r4, #5]
  p_cmd_ctxt->baud_rate = MODEM_UART_BAUDRATE;
 80095c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80095ca:	e9c4 2302 	strd	r2, r3, [r4, #8]
  p_cmd_ctxt->flow_control_cts_rts = AT_FALSE;
 80095ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d2:	8223      	strh	r3, [r4, #16]
}
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20008ef8 	.word	0x20008ef8
 80095dc:	08024635 	.word	0x08024635

080095e0 <atcm_reset_SOCKET_context>:
{
 80095e0:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter atcm_reset_SOCKET_context()")
 80095e2:	4d16      	ldr	r5, [pc, #88]	; (800963c <atcm_reset_SOCKET_context+0x5c>)
 80095e4:	4916      	ldr	r1, [pc, #88]	; (8009640 <atcm_reset_SOCKET_context+0x60>)
{
 80095e6:	4604      	mov	r4, r0
  PRINT_API("enter atcm_reset_SOCKET_context()")
 80095e8:	4628      	mov	r0, r5
 80095ea:	f013 fcd5 	bl	801cf98 <strcpy>
 80095ee:	4628      	mov	r0, r5
 80095f0:	f00e fca0 	bl	8017f34 <crs_strlen>
 80095f4:	462a      	mov	r2, r5
 80095f6:	b283      	uxth	r3, r0
 80095f8:	2104      	movs	r1, #4
 80095fa:	2001      	movs	r0, #1
 80095fc:	f00e fcd8 	bl	8017fb0 <traceIF_itmPrint>
 8009600:	4628      	mov	r0, r5
 8009602:	f00e fc97 	bl	8017f34 <crs_strlen>
 8009606:	462a      	mov	r2, r5
 8009608:	b283      	uxth	r3, r0
  p_modem_ctxt->socket_ctxt.socket_info = NULL;
 800960a:	2500      	movs	r5, #0
  PRINT_API("enter atcm_reset_SOCKET_context()")
 800960c:	2104      	movs	r1, #4
 800960e:	2001      	movs	r0, #1
 8009610:	f00e fef4 	bl	80183fc <traceIF_uartPrint>
  p_modem_ctxt->socket_ctxt.socket_info = NULL;
 8009614:	f8c4 5774 	str.w	r5, [r4, #1908]	; 0x774
  (void) memset((void *)&p_modem_ctxt->socket_ctxt.socketReceivedata, 0, sizeof(csint_socket_data_buffer_t));
 8009618:	2258      	movs	r2, #88	; 0x58
 800961a:	4629      	mov	r1, r5
 800961c:	f504 60ef 	add.w	r0, r4, #1912	; 0x778
 8009620:	f013 fc1a 	bl	801ce58 <memset>
  p_modem_ctxt->socket_ctxt.socket_current_connId = 0U;
 8009624:	f8c4 57d0 	str.w	r5, [r4, #2000]	; 0x7d0
  p_modem_ctxt->socket_ctxt.socket_rx_expected_buf_size = 0U;
 8009628:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
  p_modem_ctxt->socket_ctxt.socket_rx_count_bytes_received = 0U;
 800962c:	f8c4 57d8 	str.w	r5, [r4, #2008]	; 0x7d8
  p_modem_ctxt->socket_ctxt.socket_send_state = SocketSendState_No_Activity;
 8009630:	f8a4 57e0 	strh.w	r5, [r4, #2016]	; 0x7e0
  p_modem_ctxt->socket_ctxt.socket_RxData_state = SocketRxDataState_not_started;
 8009634:	f884 57e2 	strb.w	r5, [r4, #2018]	; 0x7e2
}
 8009638:	bd38      	pop	{r3, r4, r5, pc}
 800963a:	bf00      	nop
 800963c:	20008ef8 	.word	0x20008ef8
 8009640:	0802465e 	.word	0x0802465e

08009644 <atcm_modem_init>:
{
 8009644:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter atcm_modem_init")
 8009646:	4d15      	ldr	r5, [pc, #84]	; (800969c <atcm_modem_init+0x58>)
 8009648:	4915      	ldr	r1, [pc, #84]	; (80096a0 <atcm_modem_init+0x5c>)
{
 800964a:	4604      	mov	r4, r0
  PRINT_API("enter atcm_modem_init")
 800964c:	4628      	mov	r0, r5
 800964e:	f013 fca3 	bl	801cf98 <strcpy>
 8009652:	4628      	mov	r0, r5
 8009654:	f00e fc6e 	bl	8017f34 <crs_strlen>
 8009658:	462a      	mov	r2, r5
 800965a:	b283      	uxth	r3, r0
 800965c:	2104      	movs	r1, #4
 800965e:	2001      	movs	r0, #1
 8009660:	f00e fca6 	bl	8017fb0 <traceIF_itmPrint>
 8009664:	4628      	mov	r0, r5
 8009666:	f00e fc65 	bl	8017f34 <crs_strlen>
 800966a:	462a      	mov	r2, r5
 800966c:	b283      	uxth	r3, r0
 800966e:	2104      	movs	r1, #4
 8009670:	2001      	movs	r0, #1
 8009672:	f00e fec3 	bl	80183fc <traceIF_uartPrint>
  atcm_reset_persistent_context(&p_modem_ctxt->persist);
 8009676:	f104 000c 	add.w	r0, r4, #12
 800967a:	f7ff fe77 	bl	800936c <atcm_reset_persistent_context>
  atcm_reset_SID_context(&p_modem_ctxt->SID_ctxt);
 800967e:	f504 60b9 	add.w	r0, r4, #1480	; 0x5c8
 8009682:	f7ff ff21 	bl	80094c8 <atcm_reset_SID_context>
  atcm_reset_CMD_context(&p_modem_ctxt->CMD_ctxt);
 8009686:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800968a:	f7ff ff7b 	bl	8009584 <atcm_reset_CMD_context>
  atcm_reset_SOCKET_context(p_modem_ctxt);
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff ffa6 	bl	80095e0 <atcm_reset_SOCKET_context>
  p_modem_ctxt->state_SyntaxAutomaton = WAITING_FOR_INIT_CR;
 8009694:	2300      	movs	r3, #0
 8009696:	7223      	strb	r3, [r4, #8]
}
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	20008ef8 	.word	0x20008ef8
 80096a0:	0802468f 	.word	0x0802468f

080096a4 <atcm_modem_reset>:
{
 80096a4:	b538      	push	{r3, r4, r5, lr}
  PRINT_API("enter atcm_modem_reset")
 80096a6:	4d13      	ldr	r5, [pc, #76]	; (80096f4 <atcm_modem_reset+0x50>)
 80096a8:	4913      	ldr	r1, [pc, #76]	; (80096f8 <atcm_modem_reset+0x54>)
{
 80096aa:	4604      	mov	r4, r0
  PRINT_API("enter atcm_modem_reset")
 80096ac:	4628      	mov	r0, r5
 80096ae:	f013 fc73 	bl	801cf98 <strcpy>
 80096b2:	4628      	mov	r0, r5
 80096b4:	f00e fc3e 	bl	8017f34 <crs_strlen>
 80096b8:	462a      	mov	r2, r5
 80096ba:	b283      	uxth	r3, r0
 80096bc:	2104      	movs	r1, #4
 80096be:	2001      	movs	r0, #1
 80096c0:	f00e fc76 	bl	8017fb0 <traceIF_itmPrint>
 80096c4:	4628      	mov	r0, r5
 80096c6:	f00e fc35 	bl	8017f34 <crs_strlen>
 80096ca:	462a      	mov	r2, r5
 80096cc:	b283      	uxth	r3, r0
 80096ce:	2104      	movs	r1, #4
 80096d0:	2001      	movs	r0, #1
 80096d2:	f00e fe93 	bl	80183fc <traceIF_uartPrint>
  atcm_reset_persistent_context(&p_modem_ctxt->persist);
 80096d6:	f104 000c 	add.w	r0, r4, #12
 80096da:	f7ff fe47 	bl	800936c <atcm_reset_persistent_context>
  atcm_reset_CMD_context(&p_modem_ctxt->CMD_ctxt);
 80096de:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 80096e2:	f7ff ff4f 	bl	8009584 <atcm_reset_CMD_context>
  atcm_reset_SOCKET_context(p_modem_ctxt);
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff ff7a 	bl	80095e0 <atcm_reset_SOCKET_context>
  p_modem_ctxt->state_SyntaxAutomaton = WAITING_FOR_INIT_CR;
 80096ec:	2300      	movs	r3, #0
 80096ee:	7223      	strb	r3, [r4, #8]
}
 80096f0:	bd38      	pop	{r3, r4, r5, pc}
 80096f2:	bf00      	nop
 80096f4:	20008ef8 	.word	0x20008ef8
 80096f8:	080246b4 	.word	0x080246b4

080096fc <atcm_searchCmdInLUT>:
{
 80096fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	461c      	mov	r4, r3
  element_infos->cmd_id_received = CMD_AT_INVALID;
 8009702:	f04f 33ff 	mov.w	r3, #4294967295
 8009706:	6063      	str	r3, [r4, #4]
  if (element_infos->str_size == 0U)
 8009708:	89e3      	ldrh	r3, [r4, #14]
{
 800970a:	9200      	str	r2, [sp, #0]
 800970c:	4606      	mov	r6, r0
  if (element_infos->str_size == 0U)
 800970e:	b92b      	cbnz	r3, 800971c <atcm_searchCmdInLUT+0x20>
    element_infos->cmd_id_received = (CMD_ID_t) CMD_AT;
 8009710:	6063      	str	r3, [r4, #4]
    retval = ATSTATUS_OK;
 8009712:	469b      	mov	fp, r3
}
 8009714:	4658      	mov	r0, fp
 8009716:	b003      	add	sp, #12
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            PRINT_DBG("we received LUT#%ld : %s \r\n", (p_modem_ctxt->p_modem_LUT)[i].cmd_id,
 800971c:	4f23      	ldr	r7, [pc, #140]	; (80097ac <atcm_searchCmdInLUT+0xb0>)
    uint16_t i = 0U;
 800971e:	2500      	movs	r5, #0
  at_status_t retval = ATSTATUS_ERROR;
 8009720:	f04f 0b01 	mov.w	fp, #1
      if (strlen((const CRC_CHAR_t *)(p_modem_ctxt->p_modem_LUT)[i].cmd_str) > 0U)
 8009724:	2330      	movs	r3, #48	; 0x30
 8009726:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800972a:	fb03 f905 	mul.w	r9, r3, r5
 800972e:	eb0a 0109 	add.w	r1, sl, r9
 8009732:	790b      	ldrb	r3, [r1, #4]
 8009734:	b383      	cbz	r3, 8009798 <atcm_searchCmdInLUT+0x9c>
        if ((strlen((const CRC_CHAR_t *)(p_modem_ctxt->p_modem_LUT)[i].cmd_str) == element_infos->str_size))
 8009736:	1d0b      	adds	r3, r1, #4
 8009738:	4618      	mov	r0, r3
 800973a:	9301      	str	r3, [sp, #4]
 800973c:	f7f6 fd6a 	bl	8000214 <strlen>
 8009740:	89e1      	ldrh	r1, [r4, #14]
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	4288      	cmp	r0, r1
 8009746:	4602      	mov	r2, r0
 8009748:	d12e      	bne.n	80097a8 <atcm_searchCmdInLUT+0xac>
          if (0 == memcmp((const void *) & (p_msg_in->buffer[element_infos->str_start_idx]),
 800974a:	4619      	mov	r1, r3
 800974c:	8960      	ldrh	r0, [r4, #10]
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	4418      	add	r0, r3
 8009752:	f013 fb65 	bl	801ce20 <memcmp>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	4680      	mov	r8, r0
 800975a:	bb28      	cbnz	r0, 80097a8 <atcm_searchCmdInLUT+0xac>
            PRINT_DBG("we received LUT#%ld : %s \r\n", (p_modem_ctxt->p_modem_LUT)[i].cmd_id,
 800975c:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009760:	4913      	ldr	r1, [pc, #76]	; (80097b0 <atcm_searchCmdInLUT+0xb4>)
 8009762:	4638      	mov	r0, r7
 8009764:	f013 fba8 	bl	801ceb8 <sprintf>
 8009768:	4638      	mov	r0, r7
 800976a:	f00e fbe3 	bl	8017f34 <crs_strlen>
 800976e:	463a      	mov	r2, r7
 8009770:	b283      	uxth	r3, r0
 8009772:	2102      	movs	r1, #2
 8009774:	2001      	movs	r0, #1
 8009776:	f00e fc1b 	bl	8017fb0 <traceIF_itmPrint>
 800977a:	4638      	mov	r0, r7
 800977c:	f00e fbda 	bl	8017f34 <crs_strlen>
 8009780:	463a      	mov	r2, r7
 8009782:	b283      	uxth	r3, r0
 8009784:	2102      	movs	r1, #2
 8009786:	2001      	movs	r0, #1
 8009788:	f00e fe38 	bl	80183fc <traceIF_uartPrint>
            element_infos->cmd_id_received = (p_modem_ctxt->p_modem_LUT)[i].cmd_id;
 800978c:	6873      	ldr	r3, [r6, #4]
 800978e:	f853 3009 	ldr.w	r3, [r3, r9]
 8009792:	6063      	str	r3, [r4, #4]
            retval = ATSTATUS_OK;
 8009794:	46c3      	mov	fp, r8
            leave_loop = true;
 8009796:	2301      	movs	r3, #1
      i++;
 8009798:	3501      	adds	r5, #1
 800979a:	b2ad      	uxth	r5, r5
    } while ((leave_loop == false) && (i < p_modem_ctxt->modem_LUT_size));
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1b9      	bne.n	8009714 <atcm_searchCmdInLUT+0x18>
 80097a0:	6833      	ldr	r3, [r6, #0]
 80097a2:	429d      	cmp	r5, r3
 80097a4:	d3be      	bcc.n	8009724 <atcm_searchCmdInLUT+0x28>
 80097a6:	e7b5      	b.n	8009714 <atcm_searchCmdInLUT+0x18>
 80097a8:	2300      	movs	r3, #0
 80097aa:	e7f5      	b.n	8009798 <atcm_searchCmdInLUT+0x9c>
 80097ac:	20008ef8 	.word	0x20008ef8
 80097b0:	080246da 	.word	0x080246da

080097b4 <atcm_check_text_line_cmd>:
{
 80097b4:	b570      	push	{r4, r5, r6, lr}
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
  switch (p_atp_ctxt->current_atcmd.id)
 80097ba:	69c9      	ldr	r1, [r1, #28]
 80097bc:	290f      	cmp	r1, #15
{
 80097be:	461e      	mov	r6, r3
  switch (p_atp_ctxt->current_atcmd.id)
 80097c0:	d808      	bhi.n	80097d4 <atcm_check_text_line_cmd+0x20>
 80097c2:	290a      	cmp	r1, #10
 80097c4:	d90d      	bls.n	80097e2 <atcm_check_text_line_cmd+0x2e>
 80097c6:	390c      	subs	r1, #12
 80097c8:	2903      	cmp	r1, #3
 80097ca:	d812      	bhi.n	80097f2 <atcm_check_text_line_cmd+0x3e>
 80097cc:	e8df f001 	tbb	[pc, r1]
 80097d0:	31241f1a 	.word	0x31241f1a
 80097d4:	2931      	cmp	r1, #49	; 0x31
 80097d6:	d028      	beq.n	800982a <atcm_check_text_line_cmd+0x76>
 80097d8:	d805      	bhi.n	80097e6 <atcm_check_text_line_cmd+0x32>
 80097da:	2921      	cmp	r1, #33	; 0x21
 80097dc:	d02e      	beq.n	800983c <atcm_check_text_line_cmd+0x88>
 80097de:	2930      	cmp	r1, #48	; 0x30
 80097e0:	d01f      	beq.n	8009822 <atcm_check_text_line_cmd+0x6e>
 80097e2:	2000      	movs	r0, #0
 80097e4:	e00d      	b.n	8009802 <atcm_check_text_line_cmd+0x4e>
 80097e6:	2932      	cmp	r1, #50	; 0x32
 80097e8:	d1fb      	bne.n	80097e2 <atcm_check_text_line_cmd+0x2e>
      if (fRspAnalyze_IFC(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 80097ea:	4621      	mov	r1, r4
 80097ec:	f004 faba 	bl	800dd64 <fRspAnalyze_IFC>
 80097f0:	e003      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_CGMI(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 80097f2:	4633      	mov	r3, r6
 80097f4:	4621      	mov	r1, r4
 80097f6:	f001 fb4b 	bl	800ae90 <fRspAnalyze_CGMI>
 80097fa:	2804      	cmp	r0, #4
  at_action_rsp_t retval = ATACTION_RSP_ERROR;
 80097fc:	bf0c      	ite	eq
 80097fe:	2004      	moveq	r0, #4
        retval = ATACTION_RSP_INTERMEDIATE;
 8009800:	2008      	movne	r0, #8
}
 8009802:	bd70      	pop	{r4, r5, r6, pc}
      if (fRspAnalyze_CGMM(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 8009804:	4633      	mov	r3, r6
 8009806:	4621      	mov	r1, r4
 8009808:	f001 fb8e 	bl	800af28 <fRspAnalyze_CGMM>
 800980c:	e7f5      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_CGMR(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 800980e:	4633      	mov	r3, r6
 8009810:	4621      	mov	r1, r4
 8009812:	f001 fbd5 	bl	800afc0 <fRspAnalyze_CGMR>
 8009816:	e7f0      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_CGSN(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 8009818:	4633      	mov	r3, r6
 800981a:	4621      	mov	r1, r4
 800981c:	f001 fc1c 	bl	800b058 <fRspAnalyze_CGSN>
 8009820:	e7eb      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_GSN(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 8009822:	4621      	mov	r1, r4
 8009824:	f004 f9e4 	bl	800dbf0 <fRspAnalyze_GSN>
 8009828:	e7e7      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_IPR(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 800982a:	4621      	mov	r1, r4
 800982c:	f004 fa2c 	bl	800dc88 <fRspAnalyze_IPR>
 8009830:	e7e3      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_CIMI(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 8009832:	4633      	mov	r3, r6
 8009834:	4621      	mov	r1, r4
 8009836:	f001 fd17 	bl	800b268 <fRspAnalyze_CIMI>
 800983a:	e7de      	b.n	80097fa <atcm_check_text_line_cmd+0x46>
      if (fRspAnalyze_CGPADDR(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos) != ATACTION_RSP_ERROR)
 800983c:	4621      	mov	r1, r4
 800983e:	f003 fddb 	bl	800d3f8 <fRspAnalyze_CGPADDR>
 8009842:	e7da      	b.n	80097fa <atcm_check_text_line_cmd+0x46>

08009844 <atcm_retrieve_SID_parameters>:
{
 8009844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (p_atp_ctxt->step == 0U)
 8009846:	788c      	ldrb	r4, [r1, #2]
{
 8009848:	4605      	mov	r5, r0
 800984a:	4608      	mov	r0, r1
  if (p_atp_ctxt->step == 0U)
 800984c:	2c00      	cmp	r4, #0
 800984e:	f040 8138 	bne.w	8009ac2 <atcm_retrieve_SID_parameters+0x27e>
    switch (p_atp_ctxt->current_SID)
 8009852:	880a      	ldrh	r2, [r1, #0]
 8009854:	f1a2 0364 	sub.w	r3, r2, #100	; 0x64
 8009858:	2b2b      	cmp	r3, #43	; 0x2b
 800985a:	f200 811b 	bhi.w	8009a94 <atcm_retrieve_SID_parameters+0x250>
 800985e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009862:	00fb      	.short	0x00fb
 8009864:	00fb00fb 	.word	0x00fb00fb
 8009868:	003f003a 	.word	0x003f003a
 800986c:	0050004b 	.word	0x0050004b
 8009870:	00fb0050 	.word	0x00fb0050
 8009874:	004700fb 	.word	0x004700fb
 8009878:	00fb0066 	.word	0x00fb0066
 800987c:	006b00fb 	.word	0x006b00fb
 8009880:	00fb00fb 	.word	0x00fb00fb
 8009884:	007000b6 	.word	0x007000b6
 8009888:	011900b1 	.word	0x011900b1
 800988c:	00590055 	.word	0x00590055
 8009890:	005e005e 	.word	0x005e005e
 8009894:	00fb0055 	.word	0x00fb0055
 8009898:	006100fb 	.word	0x006100fb
 800989c:	002c00cc 	.word	0x002c00cc
 80098a0:	00d500bb 	.word	0x00d500bb
 80098a4:	00e300d0 	.word	0x00e300d0
 80098a8:	00ec00e7 	.word	0x00ec00e7
 80098ac:	00f600f1 	.word	0x00f600f1
 80098b0:	00fb00fb 	.word	0x00fb00fb
 80098b4:	010f00fb 	.word	0x010f00fb
 80098b8:	0114      	.short	0x0114
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80098ba:	f505 63b9 	add.w	r3, r5, #1480	; 0x5c8
 80098be:	2201      	movs	r2, #1
 80098c0:	2128      	movs	r1, #40	; 0x28
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80098c2:	f8d0 067c 	ldr.w	r0, [r0, #1660]	; 0x67c
 80098c6:	f7fe fbaf 	bl	8008028 <DATAPACK_readStruct>
  at_status_t retval = ATSTATUS_OK;
 80098ca:	1e04      	subs	r4, r0, #0
 80098cc:	bf18      	it	ne
 80098ce:	2401      	movne	r4, #1
}
 80098d0:	4620      	mov	r0, r4
 80098d2:	b003      	add	sp, #12
 80098d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80098d6:	f205 53c9 	addw	r3, r5, #1481	; 0x5c9
 80098da:	2212      	movs	r2, #18
 80098dc:	2114      	movs	r1, #20
 80098de:	e7f0      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 80098e0:	f205 52dc 	addw	r2, r5, #1500	; 0x5dc
 80098e4:	2119      	movs	r1, #25
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 80098e6:	f8d0 067c 	ldr.w	r0, [r0, #1660]	; 0x67c
 80098ea:	f7fe fb71 	bl	8007fd0 <DATAPACK_readPtr>
 80098ee:	e7ec      	b.n	80098ca <atcm_retrieve_SID_parameters+0x86>
 80098f0:	f505 62cf 	add.w	r2, r5, #1656	; 0x678
 80098f4:	211f      	movs	r1, #31
 80098f6:	e7f6      	b.n	80098e6 <atcm_retrieve_SID_parameters+0xa2>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80098f8:	f505 63bc 	add.w	r3, r5, #1504	; 0x5e0
 80098fc:	2248      	movs	r2, #72	; 0x48
 80098fe:	2116      	movs	r1, #22
 8009900:	e7df      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009902:	f205 637c 	addw	r3, r5, #1660	; 0x67c
 8009906:	2201      	movs	r2, #1
 8009908:	2118      	movs	r1, #24
 800990a:	e7da      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 800990c:	f205 7274 	addw	r2, r5, #1908	; 0x774
 8009910:	211a      	movs	r1, #26
 8009912:	e7e8      	b.n	80098e6 <atcm_retrieve_SID_parameters+0xa2>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009914:	f505 63d1 	add.w	r3, r5, #1672	; 0x688
        if (DATAPACK_readStruct(p_atp_ctxt->p_cmd_input,
 8009918:	2258      	movs	r2, #88	; 0x58
 800991a:	211b      	movs	r1, #27
 800991c:	e7d1      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
 800991e:	f505 63ef 	add.w	r3, r5, #1912	; 0x778
 8009922:	e7f9      	b.n	8009918 <atcm_retrieve_SID_parameters+0xd4>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009924:	f505 63dc 	add.w	r3, r5, #1760	; 0x6e0
 8009928:	2201      	movs	r2, #1
 800992a:	2122      	movs	r1, #34	; 0x22
 800992c:	e7c9      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 800992e:	f205 63e1 	addw	r3, r5, #1761	; 0x6e1
 8009932:	2201      	movs	r2, #1
 8009934:	2123      	movs	r1, #35	; 0x23
 8009936:	e7c4      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009938:	f205 63e1 	addw	r3, r5, #1761	; 0x6e1
 800993c:	2201      	movs	r2, #1
 800993e:	2124      	movs	r1, #36	; 0x24
 8009940:	e7bf      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 8009942:	f8d0 067c 	ldr.w	r0, [r0, #1660]	; 0x67c
 8009946:	aa01      	add	r2, sp, #4
 8009948:	2125      	movs	r1, #37	; 0x25
 800994a:	f7fe fb41 	bl	8007fd0 <DATAPACK_readPtr>
 800994e:	4604      	mov	r4, r0
 8009950:	2800      	cmp	r0, #0
 8009952:	d14a      	bne.n	80099ea <atcm_retrieve_SID_parameters+0x1a6>
          (void) memcpy((void *)&p_modem_ctxt->persist.pdp_ctxt_infos[ptr_pdn_infos->conf_id],
 8009954:	9e01      	ldr	r6, [sp, #4]
 8009956:	7830      	ldrb	r0, [r6, #0]
 8009958:	2283      	movs	r2, #131	; 0x83
 800995a:	fb02 5000 	mla	r0, r2, r0, r5
 800995e:	4631      	mov	r1, r6
 8009960:	3054      	adds	r0, #84	; 0x54
 8009962:	f013 fa6b 	bl	801ce3c <memcpy>
          p_modem_ctxt->SID_ctxt.pdn_conf_id = ptr_pdn_infos->conf_id;
 8009966:	7832      	ldrb	r2, [r6, #0]
 8009968:	f885 26e1 	strb.w	r2, [r5, #1761]	; 0x6e1
  if ((conf_id == CS_PDN_USER_CONFIG_1) ||
 800996c:	1e53      	subs	r3, r2, #1
 800996e:	2b04      	cmp	r3, #4
 8009970:	d811      	bhi.n	8009996 <atcm_retrieve_SID_parameters+0x152>
 8009972:	4623      	mov	r3, r4
      if (conf_id == p_tmp->affected_config)
 8009974:	f505 715a 	add.w	r1, r5, #872	; 0x368
 8009978:	2644      	movs	r6, #68	; 0x44
 800997a:	fb06 f003 	mul.w	r0, r6, r3
 800997e:	5c0f      	ldrb	r7, [r1, r0]
 8009980:	4297      	cmp	r7, r2
 8009982:	d003      	beq.n	800998c <atcm_retrieve_SID_parameters+0x148>
    } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8009984:	3301      	adds	r3, #1
 8009986:	2b06      	cmp	r3, #6
 8009988:	d1f7      	bne.n	800997a <atcm_retrieve_SID_parameters+0x136>
 800998a:	e7a1      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
        p_tmp->pdn_defined = AT_TRUE;
 800998c:	4428      	add	r0, r5
 800998e:	2301      	movs	r3, #1
 8009990:	f880 3367 	strb.w	r3, [r0, #871]	; 0x367
    } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8009994:	e79c      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
    PRINT_ERR("Trying to affect a non-valid modem CID")
 8009996:	494c      	ldr	r1, [pc, #304]	; (8009ac8 <atcm_retrieve_SID_parameters+0x284>)
 8009998:	484c      	ldr	r0, [pc, #304]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 800999a:	f013 fafd 	bl	801cf98 <strcpy>
 800999e:	484b      	ldr	r0, [pc, #300]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 80099a0:	f00e fac8 	bl	8017f34 <crs_strlen>
 80099a4:	4a49      	ldr	r2, [pc, #292]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 80099a6:	b283      	uxth	r3, r0
 80099a8:	2110      	movs	r1, #16
 80099aa:	2001      	movs	r0, #1
 80099ac:	f00e fb00 	bl	8017fb0 <traceIF_itmPrint>
 80099b0:	4846      	ldr	r0, [pc, #280]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 80099b2:	f00e fabf 	bl	8017f34 <crs_strlen>
 80099b6:	4a45      	ldr	r2, [pc, #276]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 80099b8:	b283      	uxth	r3, r0
 80099ba:	2110      	movs	r1, #16
        PRINT_DBG("No data to unpack for SID %d", p_atp_ctxt->current_SID)
 80099bc:	2001      	movs	r0, #1
 80099be:	f00e fd1d 	bl	80183fc <traceIF_uartPrint>
        break;
 80099c2:	e785      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80099c4:	f205 43fe 	addw	r3, r5, #1278	; 0x4fe
 80099c8:	2201      	movs	r2, #1
 80099ca:	2126      	movs	r1, #38	; 0x26
 80099cc:	e779      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 80099ce:	f205 63e1 	addw	r3, r5, #1761	; 0x6e1
 80099d2:	2201      	movs	r2, #1
 80099d4:	2127      	movs	r1, #39	; 0x27
 80099d6:	e774      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 80099d8:	f8d0 067c 	ldr.w	r0, [r0, #1660]	; 0x67c
 80099dc:	f205 62e4 	addw	r2, r5, #1764	; 0x6e4
 80099e0:	2129      	movs	r1, #41	; 0x29
 80099e2:	f7fe faf5 	bl	8007fd0 <DATAPACK_readPtr>
 80099e6:	4604      	mov	r4, r0
 80099e8:	b108      	cbz	r0, 80099ee <atcm_retrieve_SID_parameters+0x1aa>
        retval = ATSTATUS_ERROR;
 80099ea:	2401      	movs	r4, #1
        break;
 80099ec:	e770      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
          p_modem_ctxt->SID_ctxt.pdn_conf_id = p_modem_ctxt->SID_ctxt.dns_request_infos->conf_id;
 80099ee:	f8d5 36e4 	ldr.w	r3, [r5, #1764]	; 0x6e4
 80099f2:	781b      	ldrb	r3, [r3, #0]
          p_modem_ctxt->SID_ctxt.pdn_conf_id = p_modem_ctxt->SID_ctxt.ping_infos.conf_id;
 80099f4:	f885 36e1 	strb.w	r3, [r5, #1761]	; 0x6e1
 80099f8:	e76a      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 80099fa:	f205 72dc 	addw	r2, r5, #2012	; 0x7dc
 80099fe:	211e      	movs	r1, #30
 8009a00:	e771      	b.n	80098e6 <atcm_retrieve_SID_parameters+0xa2>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a02:	f105 0326 	add.w	r3, r5, #38	; 0x26
 8009a06:	2202      	movs	r2, #2
 8009a08:	212b      	movs	r1, #43	; 0x2b
 8009a0a:	e75a      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a0c:	f8d0 067c 	ldr.w	r0, [r0, #1660]	; 0x67c
 8009a10:	f505 63dd 	add.w	r3, r5, #1768	; 0x6e8
 8009a14:	2243      	movs	r2, #67	; 0x43
 8009a16:	212a      	movs	r1, #42	; 0x2a
 8009a18:	f7fe fb06 	bl	8008028 <DATAPACK_readStruct>
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d1e3      	bne.n	80099ea <atcm_retrieve_SID_parameters+0x1a6>
          p_modem_ctxt->SID_ctxt.pdn_conf_id = p_modem_ctxt->SID_ctxt.ping_infos.conf_id;
 8009a22:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009a26:	e7e5      	b.n	80099f4 <atcm_retrieve_SID_parameters+0x1b0>
        if (DATAPACK_readPtr(p_atp_ctxt->p_cmd_input,
 8009a28:	f205 722c 	addw	r2, r5, #1836	; 0x72c
 8009a2c:	212d      	movs	r1, #45	; 0x2d
 8009a2e:	e75a      	b.n	80098e6 <atcm_retrieve_SID_parameters+0xa2>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a30:	f205 531c 	addw	r3, r5, #1308	; 0x51c
 8009a34:	2201      	movs	r2, #1
 8009a36:	212e      	movs	r1, #46	; 0x2e
 8009a38:	e743      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a3a:	f505 63d0 	add.w	r3, r5, #1664	; 0x680
 8009a3e:	2208      	movs	r2, #8
 8009a40:	212f      	movs	r1, #47	; 0x2f
 8009a42:	e73e      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a44:	f505 63e6 	add.w	r3, r5, #1840	; 0x730
 8009a48:	2207      	movs	r2, #7
 8009a4a:	2130      	movs	r1, #48	; 0x30
 8009a4c:	e739      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a4e:	f205 7337 	addw	r3, r5, #1847	; 0x737
 8009a52:	220a      	movs	r2, #10
 8009a54:	2131      	movs	r1, #49	; 0x31
 8009a56:	e734      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        PRINT_DBG("No data to unpack for SID %d", p_atp_ctxt->current_SID)
 8009a58:	491d      	ldr	r1, [pc, #116]	; (8009ad0 <atcm_retrieve_SID_parameters+0x28c>)
 8009a5a:	481c      	ldr	r0, [pc, #112]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a5c:	f013 fa2c 	bl	801ceb8 <sprintf>
 8009a60:	481a      	ldr	r0, [pc, #104]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a62:	f00e fa67 	bl	8017f34 <crs_strlen>
 8009a66:	4a19      	ldr	r2, [pc, #100]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a68:	b283      	uxth	r3, r0
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	f00e fa9f 	bl	8017fb0 <traceIF_itmPrint>
 8009a72:	4816      	ldr	r0, [pc, #88]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a74:	f00e fa5e 	bl	8017f34 <crs_strlen>
 8009a78:	4a14      	ldr	r2, [pc, #80]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a7a:	b283      	uxth	r3, r0
 8009a7c:	2102      	movs	r1, #2
 8009a7e:	e79d      	b.n	80099bc <atcm_retrieve_SID_parameters+0x178>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a80:	f205 7341 	addw	r3, r5, #1857	; 0x741
 8009a84:	2201      	movs	r2, #1
 8009a86:	2132      	movs	r1, #50	; 0x32
 8009a88:	e71b      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        if (DATAPACK_readStruct((uint8_t *)p_atp_ctxt->p_cmd_input,
 8009a8a:	f205 7344 	addw	r3, r5, #1860	; 0x744
 8009a8e:	221c      	movs	r2, #28
 8009a90:	2133      	movs	r1, #51	; 0x33
 8009a92:	e716      	b.n	80098c2 <atcm_retrieve_SID_parameters+0x7e>
        PRINT_ERR("Missing treatment for SID %d", p_atp_ctxt->current_SID)
 8009a94:	490f      	ldr	r1, [pc, #60]	; (8009ad4 <atcm_retrieve_SID_parameters+0x290>)
 8009a96:	480d      	ldr	r0, [pc, #52]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a98:	f013 fa0e 	bl	801ceb8 <sprintf>
 8009a9c:	480b      	ldr	r0, [pc, #44]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009a9e:	f00e fa49 	bl	8017f34 <crs_strlen>
 8009aa2:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009aa4:	b283      	uxth	r3, r0
 8009aa6:	2110      	movs	r1, #16
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	f00e fa81 	bl	8017fb0 <traceIF_itmPrint>
 8009aae:	4807      	ldr	r0, [pc, #28]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009ab0:	f00e fa40 	bl	8017f34 <crs_strlen>
 8009ab4:	4a05      	ldr	r2, [pc, #20]	; (8009acc <atcm_retrieve_SID_parameters+0x288>)
 8009ab6:	b283      	uxth	r3, r0
 8009ab8:	2110      	movs	r1, #16
 8009aba:	2001      	movs	r0, #1
 8009abc:	f00e fc9e 	bl	80183fc <traceIF_uartPrint>
 8009ac0:	e793      	b.n	80099ea <atcm_retrieve_SID_parameters+0x1a6>
  at_status_t retval = ATSTATUS_OK;
 8009ac2:	2400      	movs	r4, #0
 8009ac4:	e704      	b.n	80098d0 <atcm_retrieve_SID_parameters+0x8c>
 8009ac6:	bf00      	nop
 8009ac8:	08024701 	.word	0x08024701
 8009acc:	20008ef8 	.word	0x20008ef8
 8009ad0:	08024739 	.word	0x08024739
 8009ad4:	08024761 	.word	0x08024761

08009ad8 <atcm_get_affected_modem_cid>:
  if (conf_id == CS_PDN_CONFIG_DEFAULT)
 8009ad8:	290b      	cmp	r1, #11
{
 8009ada:	b538      	push	{r3, r4, r5, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
  if (conf_id == CS_PDN_CONFIG_DEFAULT)
 8009ae0:	d118      	bne.n	8009b14 <atcm_get_affected_modem_cid+0x3c>
    current_conf_id = p_persistent_ctxt->pdn_default_conf_id;
 8009ae2:	f890 54f2 	ldrb.w	r5, [r0, #1266]	; 0x4f2
    PRINT_DBG("Default PDP context selected (conf_id = %d)", current_conf_id)
 8009ae6:	4913      	ldr	r1, [pc, #76]	; (8009b34 <atcm_get_affected_modem_cid+0x5c>)
 8009ae8:	4813      	ldr	r0, [pc, #76]	; (8009b38 <atcm_get_affected_modem_cid+0x60>)
 8009aea:	462a      	mov	r2, r5
 8009aec:	f013 f9e4 	bl	801ceb8 <sprintf>
 8009af0:	4811      	ldr	r0, [pc, #68]	; (8009b38 <atcm_get_affected_modem_cid+0x60>)
 8009af2:	f00e fa1f 	bl	8017f34 <crs_strlen>
 8009af6:	4a10      	ldr	r2, [pc, #64]	; (8009b38 <atcm_get_affected_modem_cid+0x60>)
 8009af8:	b283      	uxth	r3, r0
 8009afa:	2102      	movs	r1, #2
 8009afc:	2001      	movs	r0, #1
 8009afe:	f00e fa57 	bl	8017fb0 <traceIF_itmPrint>
 8009b02:	480d      	ldr	r0, [pc, #52]	; (8009b38 <atcm_get_affected_modem_cid+0x60>)
 8009b04:	f00e fa16 	bl	8017f34 <crs_strlen>
 8009b08:	4a0b      	ldr	r2, [pc, #44]	; (8009b38 <atcm_get_affected_modem_cid+0x60>)
 8009b0a:	b283      	uxth	r3, r0
 8009b0c:	2102      	movs	r1, #2
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f00e fc74 	bl	80183fc <traceIF_uartPrint>
  uint8_t i = 0U;
 8009b14:	4620      	mov	r0, r4
 8009b16:	f504 73cc 	add.w	r3, r4, #408	; 0x198
    if (p_tmp->affected_config == current_conf_id)
 8009b1a:	f890 235c 	ldrb.w	r2, [r0, #860]	; 0x35c
 8009b1e:	42aa      	cmp	r2, r5
 8009b20:	d102      	bne.n	8009b28 <atcm_get_affected_modem_cid+0x50>
      retval = p_tmp->mdm_cid_value;
 8009b22:	f890 035a 	ldrb.w	r0, [r0, #858]	; 0x35a
}
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
  } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8009b28:	3044      	adds	r0, #68	; 0x44
 8009b2a:	4298      	cmp	r0, r3
 8009b2c:	d1f5      	bne.n	8009b1a <atcm_get_affected_modem_cid+0x42>
 8009b2e:	2001      	movs	r0, #1
 8009b30:	e7f9      	b.n	8009b26 <atcm_get_affected_modem_cid+0x4e>
 8009b32:	bf00      	nop
 8009b34:	080240d1 	.word	0x080240d1
 8009b38:	20008ef8 	.word	0x20008ef8

08009b3c <atcm_get_configID_for_modem_cid>:
  uint8_t i = 0U;
 8009b3c:	f500 73cc 	add.w	r3, r0, #408	; 0x198
    if (p_tmp->mdm_cid_value == modem_cid)
 8009b40:	f890 235a 	ldrb.w	r2, [r0, #858]	; 0x35a
 8009b44:	428a      	cmp	r2, r1
 8009b46:	d102      	bne.n	8009b4e <atcm_get_configID_for_modem_cid+0x12>
      retval = p_tmp->affected_config;
 8009b48:	f890 035c 	ldrb.w	r0, [r0, #860]	; 0x35c
  } while ((leave_loop == false) && (i < MODEM_MAX_NB_PDP_CTXT));
 8009b4c:	4770      	bx	lr
 8009b4e:	3044      	adds	r0, #68	; 0x44
 8009b50:	4298      	cmp	r0, r3
 8009b52:	d1f5      	bne.n	8009b40 <atcm_get_configID_for_modem_cid+0x4>
 8009b54:	200c      	movs	r0, #12
}
 8009b56:	4770      	bx	lr

08009b58 <atcm_convert_index_to_PDN_conf>:
}
 8009b58:	2805      	cmp	r0, #5
 8009b5a:	bf88      	it	hi
 8009b5c:	200c      	movhi	r0, #12
 8009b5e:	4770      	bx	lr

08009b60 <reset_pdn_event>:
  p_persistent_ctxt->pdn_event.event_origine = CGEV_EVENT_UNDEFINE;
 8009b60:	4b01      	ldr	r3, [pc, #4]	; (8009b68 <reset_pdn_event+0x8>)
 8009b62:	6443      	str	r3, [r0, #68]	; 0x44
  p_persistent_ctxt->pdn_event.event_scope   = CGEV_EVENT_SCOPE_GLOBAL;
  p_persistent_ctxt->pdn_event.event_type    = CGEV_EVENT_UNDEFINE;
  p_persistent_ctxt->pdn_event.conf_id       = CS_PDN_NOT_DEFINED;
}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	0c000b00 	.word	0x0c000b00

08009b6c <atcm_set_error_report>:
 */
void atcm_set_error_report(csint_error_type_t err_type, atcustom_modem_context_t *p_modem_ctxt)
{
  p_modem_ctxt->SID_ctxt.error_report.error_type = err_type;

  switch (err_type)
 8009b6c:	2801      	cmp	r0, #1
  {
    case CSERR_SIM:
      p_modem_ctxt->SID_ctxt.error_report.sim_state = p_modem_ctxt->persist.sim_state;
 8009b6e:	bf08      	it	eq
 8009b70:	f891 351b 	ldrbeq.w	r3, [r1, #1307]	; 0x51b
  p_modem_ctxt->SID_ctxt.error_report.error_type = err_type;
 8009b74:	f881 0742 	strb.w	r0, [r1, #1858]	; 0x742
      p_modem_ctxt->SID_ctxt.error_report.sim_state = p_modem_ctxt->persist.sim_state;
 8009b78:	bf08      	it	eq
 8009b7a:	f881 3743 	strbeq.w	r3, [r1, #1859]	; 0x743

    default:
      /* nothing to do*/
      break;
  }
}
 8009b7e:	4770      	bx	lr

08009b80 <display_clear_network_state>:
#if (USE_TRACE_ATCUSTOM_MODEM == 1U) /* to avoid warning when no traces */
	/* Commands Look-up table for AT+QCFG */
	static const AT_CHAR_t NETWORK_TYPE_LUT[4][16] = { { "(unknown)" },
			{ "(CS)" }, { "(GPRS)" }, { "(EPS)" }, };

	switch (state) {
 8009b80:	4a1c      	ldr	r2, [pc, #112]	; (8009bf4 <display_clear_network_state+0x74>)
 8009b82:	3801      	subs	r0, #1
		uint8_t network_type) {
 8009b84:	b510      	push	{r4, lr}
 8009b86:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8009b8a:	2809      	cmp	r0, #9
 8009b8c:	d806      	bhi.n	8009b9c <display_clear_network_state+0x1c>
 8009b8e:	e8df f000 	tbb	[pc, r0]
 8009b92:	1f1d      	.short	0x1f1d
 8009b94:	27252321 	.word	0x27252321
 8009b98:	2f2d2b29 	.word	0x2f2d2b29
	case CS_NRS_NOT_REGISTERED_NOT_SEARCHING :
		/* Trace only */
		PRINT_INFO("NetworkState %s = NOT_REGISTERED_NOT_SEARCHING",
 8009b9c:	4916      	ldr	r1, [pc, #88]	; (8009bf8 <display_clear_network_state+0x78>)
		PRINT_INFO("NetworkState %s = REGISTERED_CFSB_NP_HOME_NETWORK",
				NETWORK_TYPE_LUT[network_type])
		break;
	case CS_NRS_REGISTERED_CFSB_NP_ROAMING :
		/* Trace only */
		PRINT_INFO("NetworkState %s = REGISTERED_CFSB_NP_ROAMING",
 8009b9e:	4817      	ldr	r0, [pc, #92]	; (8009bfc <display_clear_network_state+0x7c>)
 8009ba0:	f013 f98a 	bl	801ceb8 <sprintf>
 8009ba4:	4815      	ldr	r0, [pc, #84]	; (8009bfc <display_clear_network_state+0x7c>)
 8009ba6:	f00e f9c5 	bl	8017f34 <crs_strlen>
 8009baa:	2101      	movs	r1, #1
 8009bac:	b283      	uxth	r3, r0
 8009bae:	4a13      	ldr	r2, [pc, #76]	; (8009bfc <display_clear_network_state+0x7c>)
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	f00e f9fd 	bl	8017fb0 <traceIF_itmPrint>
 8009bb6:	4811      	ldr	r0, [pc, #68]	; (8009bfc <display_clear_network_state+0x7c>)
 8009bb8:	f00e f9bc 	bl	8017f34 <crs_strlen>
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	b283      	uxth	r3, r0
	}
#else /* USE_TRACE_ATCUSTOM_MODEM == 0U */
  UNUSED(state);
  UNUSED(network_type);
#endif /* USE_TRACE_ATCUSTOM_MODEM == 1U */
}
 8009bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINT_INFO("NetworkState %s = REGISTERED_CFSB_NP_ROAMING",
 8009bc4:	4a0d      	ldr	r2, [pc, #52]	; (8009bfc <display_clear_network_state+0x7c>)
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	f00e bc18 	b.w	80183fc <traceIF_uartPrint>
		PRINT_INFO("NetworkState %s = REGISTERED_HOME_NETWORK",
 8009bcc:	490c      	ldr	r1, [pc, #48]	; (8009c00 <display_clear_network_state+0x80>)
 8009bce:	e7e6      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = NOT_REGISTERED_SEARCHING",
 8009bd0:	490c      	ldr	r1, [pc, #48]	; (8009c04 <display_clear_network_state+0x84>)
 8009bd2:	e7e4      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTRATION_DENIED",
 8009bd4:	490c      	ldr	r1, [pc, #48]	; (8009c08 <display_clear_network_state+0x88>)
 8009bd6:	e7e2      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = UNKNOWN", NETWORK_TYPE_LUT[network_type])
 8009bd8:	490c      	ldr	r1, [pc, #48]	; (8009c0c <display_clear_network_state+0x8c>)
 8009bda:	e7e0      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTERED_ROAMING",
 8009bdc:	490c      	ldr	r1, [pc, #48]	; (8009c10 <display_clear_network_state+0x90>)
 8009bde:	e7de      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTERED_SMS_ONLY_HOME_NETWORK",
 8009be0:	490c      	ldr	r1, [pc, #48]	; (8009c14 <display_clear_network_state+0x94>)
 8009be2:	e7dc      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTERED_SMS_ONLY_ROAMING",
 8009be4:	490c      	ldr	r1, [pc, #48]	; (8009c18 <display_clear_network_state+0x98>)
 8009be6:	e7da      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = EMERGENCY_ONLY",
 8009be8:	490c      	ldr	r1, [pc, #48]	; (8009c1c <display_clear_network_state+0x9c>)
 8009bea:	e7d8      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTERED_CFSB_NP_HOME_NETWORK",
 8009bec:	490c      	ldr	r1, [pc, #48]	; (8009c20 <display_clear_network_state+0xa0>)
 8009bee:	e7d6      	b.n	8009b9e <display_clear_network_state+0x1e>
		PRINT_INFO("NetworkState %s = REGISTERED_CFSB_NP_ROAMING",
 8009bf0:	490c      	ldr	r1, [pc, #48]	; (8009c24 <display_clear_network_state+0xa4>)
 8009bf2:	e7d4      	b.n	8009b9e <display_clear_network_state+0x1e>
 8009bf4:	08026bd8 	.word	0x08026bd8
 8009bf8:	080247d3 	.word	0x080247d3
 8009bfc:	20008ef8 	.word	0x20008ef8
 8009c00:	0802480d 	.word	0x0802480d
 8009c04:	08024842 	.word	0x08024842
 8009c08:	08024878 	.word	0x08024878
 8009c0c:	080248a9 	.word	0x080248a9
 8009c10:	080248ce 	.word	0x080248ce
 8009c14:	080248fe 	.word	0x080248fe
 8009c18:	0802493c 	.word	0x0802493c
 8009c1c:	08024975 	.word	0x08024975
 8009c20:	080249a1 	.word	0x080249a1
 8009c24:	080249de 	.word	0x080249de

08009c28 <fCmdBuild_NoParams>:

/* Functions Definition ------------------------------------------------------*/

/* ==========================  Build 3GPP TS 27.007 commands ========================== */
at_status_t fCmdBuild_NoParams(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009c28:	b510      	push	{r4, lr}
	UNUSED(p_atp_ctxt);
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	/* Command as no parameters - STUB function */
	PRINT_API("enter fCmdBuild_NoParams()")
 8009c2a:	4c0c      	ldr	r4, [pc, #48]	; (8009c5c <fCmdBuild_NoParams+0x34>)
 8009c2c:	490c      	ldr	r1, [pc, #48]	; (8009c60 <fCmdBuild_NoParams+0x38>)
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f013 f9b2 	bl	801cf98 <strcpy>
 8009c34:	4620      	mov	r0, r4
 8009c36:	f00e f97d 	bl	8017f34 <crs_strlen>
 8009c3a:	4622      	mov	r2, r4
 8009c3c:	b283      	uxth	r3, r0
 8009c3e:	2104      	movs	r1, #4
 8009c40:	2001      	movs	r0, #1
 8009c42:	f00e f9b5 	bl	8017fb0 <traceIF_itmPrint>
 8009c46:	4620      	mov	r0, r4
 8009c48:	f00e f974 	bl	8017f34 <crs_strlen>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	b283      	uxth	r3, r0
 8009c50:	2104      	movs	r1, #4
 8009c52:	2001      	movs	r0, #1
 8009c54:	f00e fbd2 	bl	80183fc <traceIF_uartPrint>

	return (retval);
}
 8009c58:	2000      	movs	r0, #0
 8009c5a:	bd10      	pop	{r4, pc}
 8009c5c:	20008ef8 	.word	0x20008ef8
 8009c60:	08024a16 	.word	0x08024a16

08009c64 <fCmdBuild_CMEE>:
	}
	return (retval);
}

at_status_t fCmdBuild_CMEE(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CMEE()")
 8009c6a:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <fCmdBuild_CMEE+0x4c>)
 8009c6c:	4911      	ldr	r1, [pc, #68]	; (8009cb4 <fCmdBuild_CMEE+0x50>)
 8009c6e:	f013 f993 	bl	801cf98 <strcpy>
 8009c72:	480f      	ldr	r0, [pc, #60]	; (8009cb0 <fCmdBuild_CMEE+0x4c>)
 8009c74:	f00e f95e 	bl	8017f34 <crs_strlen>
 8009c78:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <fCmdBuild_CMEE+0x4c>)
 8009c7a:	b283      	uxth	r3, r0
 8009c7c:	2104      	movs	r1, #4
 8009c7e:	2001      	movs	r0, #1
 8009c80:	f00e f996 	bl	8017fb0 <traceIF_itmPrint>
 8009c84:	480a      	ldr	r0, [pc, #40]	; (8009cb0 <fCmdBuild_CMEE+0x4c>)
 8009c86:	f00e f955 	bl	8017f34 <crs_strlen>
 8009c8a:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <fCmdBuild_CMEE+0x4c>)
 8009c8c:	b283      	uxth	r3, r0
 8009c8e:	2104      	movs	r1, #4
 8009c90:	2001      	movs	r0, #1
 8009c92:	f00e fbb3 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009c96:	8923      	ldrh	r3, [r4, #8]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d106      	bne.n	8009caa <fCmdBuild_CMEE+0x46>
		/* AT+CMEE=<n> where <n>:
		 * 0: <err> result code disabled and ERROR used
		 * 1: <err> result code enabled and numeric <ERR> values used
		 * 2: <err> result code enabled and verbose <ERR> values used
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 8009c9c:	f895 251d 	ldrb.w	r2, [r5, #1309]	; 0x51d
 8009ca0:	4905      	ldr	r1, [pc, #20]	; (8009cb8 <fCmdBuild_CMEE+0x54>)
 8009ca2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009ca6:	f013 f907 	bl	801ceb8 <sprintf>
				p_modem_ctxt->persist.cmee_level);
	}
	return (retval);
}
 8009caa:	2000      	movs	r0, #0
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	20008ef8 	.word	0x20008ef8
 8009cb4:	08024a66 	.word	0x08024a66
 8009cb8:	08024dac 	.word	0x08024dac

08009cbc <fCmdBuild_CPIN>:

at_status_t fCmdBuild_CPIN(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	460c      	mov	r4, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CPIN()")
 8009cc2:	481d      	ldr	r0, [pc, #116]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009cc4:	491d      	ldr	r1, [pc, #116]	; (8009d3c <fCmdBuild_CPIN+0x80>)
 8009cc6:	f013 f967 	bl	801cf98 <strcpy>
 8009cca:	481b      	ldr	r0, [pc, #108]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009ccc:	f00e f932 	bl	8017f34 <crs_strlen>
 8009cd0:	4a19      	ldr	r2, [pc, #100]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009cd2:	b283      	uxth	r3, r0
 8009cd4:	2104      	movs	r1, #4
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	f00e f96a 	bl	8017fb0 <traceIF_itmPrint>
 8009cdc:	4816      	ldr	r0, [pc, #88]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009cde:	f00e f929 	bl	8017f34 <crs_strlen>
 8009ce2:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009ce4:	b283      	uxth	r3, r0
 8009ce6:	2104      	movs	r1, #4
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f00e fb87 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009cee:	892b      	ldrh	r3, [r5, #8]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d11e      	bne.n	8009d32 <fCmdBuild_CPIN+0x76>
		PRINT_DBG("pin code= %s",
 8009cf4:	f204 54cb 	addw	r4, r4, #1483	; 0x5cb
 8009cf8:	4911      	ldr	r1, [pc, #68]	; (8009d40 <fCmdBuild_CPIN+0x84>)
 8009cfa:	480f      	ldr	r0, [pc, #60]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	f013 f8db 	bl	801ceb8 <sprintf>
 8009d02:	480d      	ldr	r0, [pc, #52]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009d04:	f00e f916 	bl	8017f34 <crs_strlen>
 8009d08:	4a0b      	ldr	r2, [pc, #44]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009d0a:	b283      	uxth	r3, r0
 8009d0c:	2102      	movs	r1, #2
 8009d0e:	2001      	movs	r0, #1
 8009d10:	f00e f94e 	bl	8017fb0 <traceIF_itmPrint>
 8009d14:	4808      	ldr	r0, [pc, #32]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009d16:	f00e f90d 	bl	8017f34 <crs_strlen>
 8009d1a:	4a07      	ldr	r2, [pc, #28]	; (8009d38 <fCmdBuild_CPIN+0x7c>)
 8009d1c:	b283      	uxth	r3, r0
 8009d1e:	2102      	movs	r1, #2
 8009d20:	2001      	movs	r0, #1
 8009d22:	f00e fb6b 	bl	80183fc <traceIF_uartPrint>
				p_modem_ctxt->SID_ctxt.modem_init.pincode.pincode)

		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "\"%s\"",
 8009d26:	4907      	ldr	r1, [pc, #28]	; (8009d44 <fCmdBuild_CPIN+0x88>)
 8009d28:	4622      	mov	r2, r4
 8009d2a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8009d2e:	f013 f8c3 	bl	801ceb8 <sprintf>
				p_modem_ctxt->SID_ctxt.modem_init.pincode.pincode);
	}
	return (retval);
}
 8009d32:	2000      	movs	r0, #0
 8009d34:	bd38      	pop	{r3, r4, r5, pc}
 8009d36:	bf00      	nop
 8009d38:	20008ef8 	.word	0x20008ef8
 8009d3c:	08024a8c 	.word	0x08024a8c
 8009d40:	08024ab2 	.word	0x08024ab2
 8009d44:	08024f24 	.word	0x08024f24

08009d48 <fCmdBuild_CFUN>:

at_status_t fCmdBuild_CFUN(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CFUN()")
 8009d4e:	4819      	ldr	r0, [pc, #100]	; (8009db4 <fCmdBuild_CFUN+0x6c>)
 8009d50:	4919      	ldr	r1, [pc, #100]	; (8009db8 <fCmdBuild_CFUN+0x70>)
 8009d52:	f013 f921 	bl	801cf98 <strcpy>
 8009d56:	4817      	ldr	r0, [pc, #92]	; (8009db4 <fCmdBuild_CFUN+0x6c>)
 8009d58:	f00e f8ec 	bl	8017f34 <crs_strlen>
 8009d5c:	4a15      	ldr	r2, [pc, #84]	; (8009db4 <fCmdBuild_CFUN+0x6c>)
 8009d5e:	b283      	uxth	r3, r0
 8009d60:	2104      	movs	r1, #4
 8009d62:	2001      	movs	r0, #1
 8009d64:	f00e f924 	bl	8017fb0 <traceIF_itmPrint>
 8009d68:	4812      	ldr	r0, [pc, #72]	; (8009db4 <fCmdBuild_CFUN+0x6c>)
 8009d6a:	f00e f8e3 	bl	8017f34 <crs_strlen>
 8009d6e:	4a11      	ldr	r2, [pc, #68]	; (8009db4 <fCmdBuild_CFUN+0x6c>)
 8009d70:	b283      	uxth	r3, r0
 8009d72:	2104      	movs	r1, #4
 8009d74:	2001      	movs	r0, #1
 8009d76:	f00e fb41 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009d7a:	8923      	ldrh	r3, [r4, #8]
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d111      	bne.n	8009da4 <fCmdBuild_CFUN+0x5c>
		if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_INIT_MODEM) {
 8009d80:	4620      	mov	r0, r4
 8009d82:	f830 3b30 	ldrh.w	r3, [r0], #48
 8009d86:	2b67      	cmp	r3, #103	; 0x67
 8009d88:	d10e      	bne.n	8009da8 <fCmdBuild_CFUN+0x60>
			 *  0: do not reset modem before setting <fun> parameter
			 *  1: reset modem before setting <fun> parameter
			 */

			/* convert cellular service paramaters to Modem format */
			if (modemInit_struct->init == CS_CMI_FULL) {
 8009d8a:	f895 25c9 	ldrb.w	r2, [r5, #1481]	; 0x5c9
 8009d8e:	2a01      	cmp	r2, #1
 8009d90:	d003      	beq.n	8009d9a <fCmdBuild_CFUN+0x52>
				fun = 1U;
			} else if (modemInit_struct->init == CS_CMI_SIM_ONLY) {
				fun = 4U;
			} else {
				fun = 0U; /* default value, if CS_CMI_MINI */
 8009d92:	2a02      	cmp	r2, #2
 8009d94:	bf0c      	ite	eq
 8009d96:	2204      	moveq	r2, #4
 8009d98:	2200      	movne	r2, #0
			}

			(modemInit_struct->reset == CELLULAR_TRUE) ?
					(rst = 1U) : (rst = 0U);
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 8009d9a:	f895 35ca 	ldrb.w	r3, [r5, #1482]	; 0x5ca
 8009d9e:	4907      	ldr	r1, [pc, #28]	; (8009dbc <fCmdBuild_CFUN+0x74>)
 8009da0:	f013 f88a 	bl	801ceb8 <sprintf>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
					"%d,0", p_modem_ctxt->CMD_ctxt.cfun_value);
		}
	}
	return (retval);
}
 8009da4:	2000      	movs	r0, #0
 8009da6:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 8009da8:	f895 2771 	ldrb.w	r2, [r5, #1905]	; 0x771
 8009dac:	4904      	ldr	r1, [pc, #16]	; (8009dc0 <fCmdBuild_CFUN+0x78>)
 8009dae:	f013 f883 	bl	801ceb8 <sprintf>
 8009db2:	e7f7      	b.n	8009da4 <fCmdBuild_CFUN+0x5c>
 8009db4:	20008ef8 	.word	0x20008ef8
 8009db8:	08024aca 	.word	0x08024aca
 8009dbc:	08024af0 	.word	0x08024af0
 8009dc0:	08024af6 	.word	0x08024af6

08009dc4 <fCmdBuild_COPS>:

at_status_t fCmdBuild_COPS(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	460e      	mov	r6, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_COPS()")
 8009dca:	4836      	ldr	r0, [pc, #216]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009dcc:	4936      	ldr	r1, [pc, #216]	; (8009ea8 <fCmdBuild_COPS+0xe4>)
 8009dce:	f013 f8e3 	bl	801cf98 <strcpy>
 8009dd2:	4834      	ldr	r0, [pc, #208]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009dd4:	f00e f8ae 	bl	8017f34 <crs_strlen>
 8009dd8:	4a32      	ldr	r2, [pc, #200]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009dda:	b283      	uxth	r3, r0
 8009ddc:	2104      	movs	r1, #4
 8009dde:	2001      	movs	r0, #1
 8009de0:	f00e f8e6 	bl	8017fb0 <traceIF_itmPrint>
 8009de4:	482f      	ldr	r0, [pc, #188]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009de6:	f00e f8a5 	bl	8017f34 <crs_strlen>
 8009dea:	4a2e      	ldr	r2, [pc, #184]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009dec:	b283      	uxth	r3, r0
 8009dee:	2104      	movs	r1, #4
 8009df0:	2001      	movs	r0, #1
 8009df2:	f00e fb03 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009df6:	8923      	ldrh	r3, [r4, #8]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d110      	bne.n	8009e1e <fCmdBuild_COPS+0x5a>
		CS_OperatorSelector_t *operatorSelect =
				&(p_modem_ctxt->SID_ctxt.write_operator_infos);

		if (operatorSelect->mode == CS_NRM_AUTO) {
 8009dfc:	f8b6 75e0 	ldrh.w	r7, [r6, #1504]	; 0x5e0
 8009e00:	b987      	cbnz	r7, 8009e24 <fCmdBuild_COPS+0x60>
			if (operatorSelect->AcT_present == CELLULAR_FALSE) {
 8009e02:	f896 5624 	ldrb.w	r5, [r6, #1572]	; 0x624
 8009e06:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009e0a:	b91d      	cbnz	r5, 8009e14 <fCmdBuild_COPS+0x50>
				/* no specific Access Technology is requested */
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 8009e0c:	4927      	ldr	r1, [pc, #156]	; (8009eac <fCmdBuild_COPS+0xe8>)
			} else {
				/* <oper> is not present */
				retval = ATSTATUS_ERROR;
			}
		} else if (operatorSelect->mode == CS_NRM_DEREGISTER) {
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "2");
 8009e0e:	f013 f8c3 	bl	801cf98 <strcpy>
 8009e12:	e004      	b.n	8009e1e <fCmdBuild_COPS+0x5a>
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 8009e14:	f8b6 2626 	ldrh.w	r2, [r6, #1574]	; 0x626
 8009e18:	4925      	ldr	r1, [pc, #148]	; (8009eb0 <fCmdBuild_COPS+0xec>)
 8009e1a:	f013 f84d 	bl	801ceb8 <sprintf>
	at_status_t retval = ATSTATUS_OK;
 8009e1e:	2000      	movs	r0, #0
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
		}
	}

	return (retval);
}
 8009e20:	b003      	add	sp, #12
 8009e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((operatorSelect->mode == CS_NRM_MANUAL )
 8009e24:	2f01      	cmp	r7, #1
 8009e26:	d001      	beq.n	8009e2c <fCmdBuild_COPS+0x68>
				|| (operatorSelect->mode == CS_NRM_MANUAL_THEN_AUTO )) {
 8009e28:	2f04      	cmp	r7, #4
 8009e2a:	d119      	bne.n	8009e60 <fCmdBuild_COPS+0x9c>
			if (operatorSelect->format != CS_ONF_NOT_PRESENT) {
 8009e2c:	f8b6 35e2 	ldrh.w	r3, [r6, #1506]	; 0x5e2
 8009e30:	2b09      	cmp	r3, #9
 8009e32:	d034      	beq.n	8009e9e <fCmdBuild_COPS+0xda>
				if (operatorSelect->AcT_present == CELLULAR_FALSE) {
 8009e34:	f896 5624 	ldrb.w	r5, [r6, #1572]	; 0x624
 8009e38:	f206 52e4 	addw	r2, r6, #1508	; 0x5e4
 8009e3c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009e40:	b92d      	cbnz	r5, 8009e4e <fCmdBuild_COPS+0x8a>
					(void) sprintf(
 8009e42:	9200      	str	r2, [sp, #0]
 8009e44:	491b      	ldr	r1, [pc, #108]	; (8009eb4 <fCmdBuild_COPS+0xf0>)
 8009e46:	463a      	mov	r2, r7
 8009e48:	f013 f836 	bl	801ceb8 <sprintf>
 8009e4c:	e7e7      	b.n	8009e1e <fCmdBuild_COPS+0x5a>
					(void) sprintf(
 8009e4e:	f8b6 1626 	ldrh.w	r1, [r6, #1574]	; 0x626
 8009e52:	e9cd 2100 	strd	r2, r1, [sp]
 8009e56:	4918      	ldr	r1, [pc, #96]	; (8009eb8 <fCmdBuild_COPS+0xf4>)
 8009e58:	463a      	mov	r2, r7
 8009e5a:	f013 f82d 	bl	801ceb8 <sprintf>
 8009e5e:	e7de      	b.n	8009e1e <fCmdBuild_COPS+0x5a>
		} else if (operatorSelect->mode == CS_NRM_DEREGISTER) {
 8009e60:	2f02      	cmp	r7, #2
 8009e62:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8009e66:	d102      	bne.n	8009e6e <fCmdBuild_COPS+0xaa>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "2");
 8009e68:	4914      	ldr	r1, [pc, #80]	; (8009ebc <fCmdBuild_COPS+0xf8>)
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	e7cf      	b.n	8009e0e <fCmdBuild_COPS+0x4a>
			PRINT_ERR("invalid mode value for +COPS")
 8009e6e:	4914      	ldr	r1, [pc, #80]	; (8009ec0 <fCmdBuild_COPS+0xfc>)
 8009e70:	480c      	ldr	r0, [pc, #48]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009e72:	f013 f891 	bl	801cf98 <strcpy>
 8009e76:	480b      	ldr	r0, [pc, #44]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009e78:	f00e f85c 	bl	8017f34 <crs_strlen>
 8009e7c:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009e7e:	b283      	uxth	r3, r0
 8009e80:	2110      	movs	r1, #16
 8009e82:	2001      	movs	r0, #1
 8009e84:	f00e f894 	bl	8017fb0 <traceIF_itmPrint>
 8009e88:	4806      	ldr	r0, [pc, #24]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009e8a:	f00e f853 	bl	8017f34 <crs_strlen>
 8009e8e:	2110      	movs	r1, #16
 8009e90:	b283      	uxth	r3, r0
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <fCmdBuild_COPS+0xe0>)
 8009e94:	2001      	movs	r0, #1
 8009e96:	f00e fab1 	bl	80183fc <traceIF_uartPrint>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 8009e9a:	4904      	ldr	r1, [pc, #16]	; (8009eac <fCmdBuild_COPS+0xe8>)
 8009e9c:	e7e5      	b.n	8009e6a <fCmdBuild_COPS+0xa6>
				retval = ATSTATUS_ERROR;
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	e7be      	b.n	8009e20 <fCmdBuild_COPS+0x5c>
 8009ea2:	bf00      	nop
 8009ea4:	20008ef8 	.word	0x20008ef8
 8009ea8:	08024afb 	.word	0x08024afb
 8009eac:	08024e97 	.word	0x08024e97
 8009eb0:	08024b21 	.word	0x08024b21
 8009eb4:	08024b28 	.word	0x08024b28
 8009eb8:	08024b33 	.word	0x08024b33
 8009ebc:	08024e9b 	.word	0x08024e9b
 8009ec0:	08024b41 	.word	0x08024b41

08009ec4 <fCmdBuild_CGATT>:

at_status_t fCmdBuild_CGATT(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGATT()")
 8009eca:	4822      	ldr	r0, [pc, #136]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009ecc:	4922      	ldr	r1, [pc, #136]	; (8009f58 <fCmdBuild_CGATT+0x94>)
 8009ece:	f013 f863 	bl	801cf98 <strcpy>
 8009ed2:	4820      	ldr	r0, [pc, #128]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009ed4:	f00e f82e 	bl	8017f34 <crs_strlen>
 8009ed8:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009eda:	b283      	uxth	r3, r0
 8009edc:	2104      	movs	r1, #4
 8009ede:	2001      	movs	r0, #1
 8009ee0:	f00e f866 	bl	8017fb0 <traceIF_itmPrint>
 8009ee4:	481b      	ldr	r0, [pc, #108]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009ee6:	f00e f825 	bl	8017f34 <crs_strlen>
 8009eea:	4a1a      	ldr	r2, [pc, #104]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009eec:	b283      	uxth	r3, r0
 8009eee:	2104      	movs	r1, #4
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	f00e fa83 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009ef6:	8923      	ldrh	r3, [r4, #8]
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d10b      	bne.n	8009f14 <fCmdBuild_CGATT+0x50>
		/* if cgatt set by user or if in ATTACH sequence */
		if ((p_modem_ctxt->CMD_ctxt.cgatt_write_cmd_param == CGATT_ATTACHED)
 8009efc:	f895 2761 	ldrb.w	r2, [r5, #1889]	; 0x761
 8009f00:	2a01      	cmp	r2, #1
 8009f02:	d002      	beq.n	8009f0a <fCmdBuild_CGATT+0x46>
				|| (p_atp_ctxt->current_SID == (at_msg_t) SID_ATTACH_PS_DOMAIN)) {
 8009f04:	8823      	ldrh	r3, [r4, #0]
 8009f06:	2b70      	cmp	r3, #112	; 0x70
 8009f08:	d106      	bne.n	8009f18 <fCmdBuild_CGATT+0x54>
			/* request attach */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "1");
 8009f0a:	4914      	ldr	r1, [pc, #80]	; (8009f5c <fCmdBuild_CGATT+0x98>)
		}
		/* if cgatt set by user or if in DETACH sequence */
		else if ((p_modem_ctxt->CMD_ctxt.cgatt_write_cmd_param == CGATT_DETACHED)
				|| (p_atp_ctxt->current_SID == (at_msg_t) SID_DETACH_PS_DOMAIN)) {
			/* request detach */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 8009f0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009f10:	f013 f842 	bl	801cf98 <strcpy>
	at_status_t retval = ATSTATUS_OK;
 8009f14:	2000      	movs	r0, #0
 8009f16:	e01b      	b.n	8009f50 <fCmdBuild_CGATT+0x8c>
		else if ((p_modem_ctxt->CMD_ctxt.cgatt_write_cmd_param == CGATT_DETACHED)
 8009f18:	b10a      	cbz	r2, 8009f1e <fCmdBuild_CGATT+0x5a>
				|| (p_atp_ctxt->current_SID == (at_msg_t) SID_DETACH_PS_DOMAIN)) {
 8009f1a:	2b71      	cmp	r3, #113	; 0x71
 8009f1c:	d101      	bne.n	8009f22 <fCmdBuild_CGATT+0x5e>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 8009f1e:	4910      	ldr	r1, [pc, #64]	; (8009f60 <fCmdBuild_CGATT+0x9c>)
 8009f20:	e7f4      	b.n	8009f0c <fCmdBuild_CGATT+0x48>
		}
		/* not in ATTACH or DETACH sequence and cgatt_write_cmd_param not set by user: error ! */
		else {
			PRINT_ERR("CGATT state parameter not set")
 8009f22:	4910      	ldr	r1, [pc, #64]	; (8009f64 <fCmdBuild_CGATT+0xa0>)
 8009f24:	480b      	ldr	r0, [pc, #44]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009f26:	f013 f837 	bl	801cf98 <strcpy>
 8009f2a:	480a      	ldr	r0, [pc, #40]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009f2c:	f00e f802 	bl	8017f34 <crs_strlen>
 8009f30:	4a08      	ldr	r2, [pc, #32]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009f32:	b283      	uxth	r3, r0
 8009f34:	2110      	movs	r1, #16
 8009f36:	2001      	movs	r0, #1
 8009f38:	f00e f83a 	bl	8017fb0 <traceIF_itmPrint>
 8009f3c:	4805      	ldr	r0, [pc, #20]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009f3e:	f00d fff9 	bl	8017f34 <crs_strlen>
 8009f42:	4a04      	ldr	r2, [pc, #16]	; (8009f54 <fCmdBuild_CGATT+0x90>)
 8009f44:	b283      	uxth	r3, r0
 8009f46:	2110      	movs	r1, #16
 8009f48:	2001      	movs	r0, #1
 8009f4a:	f00e fa57 	bl	80183fc <traceIF_uartPrint>
			retval = ATSTATUS_ERROR;
 8009f4e:	2001      	movs	r0, #1
		}
	}

	return (retval);
}
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20008ef8 	.word	0x20008ef8
 8009f58:	08024b6f 	.word	0x08024b6f
 8009f5c:	08029a68 	.word	0x08029a68
 8009f60:	08024e97 	.word	0x08024e97
 8009f64:	08024b96 	.word	0x08024b96

08009f68 <fCmdBuild_CREG>:

at_status_t fCmdBuild_CREG(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CREG()")
 8009f6e:	4816      	ldr	r0, [pc, #88]	; (8009fc8 <fCmdBuild_CREG+0x60>)
 8009f70:	4916      	ldr	r1, [pc, #88]	; (8009fcc <fCmdBuild_CREG+0x64>)
 8009f72:	f013 f811 	bl	801cf98 <strcpy>
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <fCmdBuild_CREG+0x60>)
 8009f78:	f00d ffdc 	bl	8017f34 <crs_strlen>
 8009f7c:	4a12      	ldr	r2, [pc, #72]	; (8009fc8 <fCmdBuild_CREG+0x60>)
 8009f7e:	b283      	uxth	r3, r0
 8009f80:	2104      	movs	r1, #4
 8009f82:	2001      	movs	r0, #1
 8009f84:	f00e f814 	bl	8017fb0 <traceIF_itmPrint>
 8009f88:	480f      	ldr	r0, [pc, #60]	; (8009fc8 <fCmdBuild_CREG+0x60>)
 8009f8a:	f00d ffd3 	bl	8017f34 <crs_strlen>
 8009f8e:	4a0e      	ldr	r2, [pc, #56]	; (8009fc8 <fCmdBuild_CREG+0x60>)
 8009f90:	b283      	uxth	r3, r0
 8009f92:	2104      	movs	r1, #4
 8009f94:	2001      	movs	r0, #1
 8009f96:	f00e fa31 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 8009f9a:	8923      	ldrh	r3, [r4, #8]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10e      	bne.n	8009fbe <fCmdBuild_CREG+0x56>
		if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_SUSBCRIBE_NET_EVENT) {
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f830 3b30 	ldrh.w	r3, [r0], #48
 8009fa6:	2b6a      	cmp	r3, #106	; 0x6a
 8009fa8:	d104      	bne.n	8009fb4 <fCmdBuild_CREG+0x4c>
			/* always request all notif with +CREG:2, will be sorted at cellular service level */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 8009faa:	2202      	movs	r2, #2
				== (at_msg_t) SID_CS_UNSUSBCRIBE_NET_EVENT) {
			/* disable notifications */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
		} else {
			/* for other SID, use param value set by user */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 8009fac:	4908      	ldr	r1, [pc, #32]	; (8009fd0 <fCmdBuild_CREG+0x68>)
 8009fae:	f012 ff83 	bl	801ceb8 <sprintf>
 8009fb2:	e004      	b.n	8009fbe <fCmdBuild_CREG+0x56>
		} else if (p_atp_ctxt->current_SID
 8009fb4:	2b6b      	cmp	r3, #107	; 0x6b
 8009fb6:	d104      	bne.n	8009fc2 <fCmdBuild_CREG+0x5a>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 8009fb8:	4906      	ldr	r1, [pc, #24]	; (8009fd4 <fCmdBuild_CREG+0x6c>)
 8009fba:	f012 ffed 	bl	801cf98 <strcpy>
					(uint8_t) p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param);
		}
	}

	return (retval);
}
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 8009fc2:	f895 2762 	ldrb.w	r2, [r5, #1890]	; 0x762
 8009fc6:	e7f1      	b.n	8009fac <fCmdBuild_CREG+0x44>
 8009fc8:	20008ef8 	.word	0x20008ef8
 8009fcc:	08024bc5 	.word	0x08024bc5
 8009fd0:	08024dac 	.word	0x08024dac
 8009fd4:	08024e97 	.word	0x08024e97

08009fd8 <fCmdBuild_CGREG>:

at_status_t fCmdBuild_CGREG(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGREG()")
 8009fde:	4819      	ldr	r0, [pc, #100]	; (800a044 <fCmdBuild_CGREG+0x6c>)
 8009fe0:	4919      	ldr	r1, [pc, #100]	; (800a048 <fCmdBuild_CGREG+0x70>)
 8009fe2:	f012 ffd9 	bl	801cf98 <strcpy>
 8009fe6:	4817      	ldr	r0, [pc, #92]	; (800a044 <fCmdBuild_CGREG+0x6c>)
 8009fe8:	f00d ffa4 	bl	8017f34 <crs_strlen>
 8009fec:	4a15      	ldr	r2, [pc, #84]	; (800a044 <fCmdBuild_CGREG+0x6c>)
 8009fee:	b283      	uxth	r3, r0
 8009ff0:	2104      	movs	r1, #4
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f00d ffdc 	bl	8017fb0 <traceIF_itmPrint>
 8009ff8:	4812      	ldr	r0, [pc, #72]	; (800a044 <fCmdBuild_CGREG+0x6c>)
 8009ffa:	f00d ff9b 	bl	8017f34 <crs_strlen>
 8009ffe:	4a11      	ldr	r2, [pc, #68]	; (800a044 <fCmdBuild_CGREG+0x6c>)
 800a000:	b283      	uxth	r3, r0
 800a002:	2104      	movs	r1, #4
 800a004:	2001      	movs	r0, #1
 800a006:	f00e f9f9 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a00a:	8923      	ldrh	r3, [r4, #8]
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d113      	bne.n	800a038 <fCmdBuild_CGREG+0x60>
		if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_SUSBCRIBE_NET_EVENT) {
 800a010:	4620      	mov	r0, r4
 800a012:	f830 3b30 	ldrh.w	r3, [r0], #48
 800a016:	2b6a      	cmp	r3, #106	; 0x6a
 800a018:	d109      	bne.n	800a02e <fCmdBuild_CGREG+0x56>
			atcustom_CxREG_n_t param_value;
			if (p_modem_ctxt->persist.psm_urc_requested == AT_TRUE) {
 800a01a:	f895 3517 	ldrb.w	r3, [r5, #1303]	; 0x517
 800a01e:	2b00      	cmp	r3, #0
				param_value = CXREG_ENABLE_PSM_NETWK_REG_LOC_URC;
			} else {
				param_value = CXREG_ENABLE_NETWK_REG_LOC_URC;
			}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a020:	bf14      	ite	ne
 800a022:	2204      	movne	r2, #4
 800a024:	2202      	moveq	r2, #2
				== (at_msg_t) SID_CS_UNSUSBCRIBE_NET_EVENT) {
			/* disable notifications */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
		} else {
			/* for other SID, use param value set by user */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a026:	4909      	ldr	r1, [pc, #36]	; (800a04c <fCmdBuild_CGREG+0x74>)
 800a028:	f012 ff46 	bl	801ceb8 <sprintf>
 800a02c:	e004      	b.n	800a038 <fCmdBuild_CGREG+0x60>
		} else if (p_atp_ctxt->current_SID
 800a02e:	2b6b      	cmp	r3, #107	; 0x6b
 800a030:	d104      	bne.n	800a03c <fCmdBuild_CGREG+0x64>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a032:	4907      	ldr	r1, [pc, #28]	; (800a050 <fCmdBuild_CGREG+0x78>)
 800a034:	f012 ffb0 	bl	801cf98 <strcpy>
					(uint8_t) p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param);
		}
	}

	return (retval);
}
 800a038:	2000      	movs	r0, #0
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a03c:	f895 2762 	ldrb.w	r2, [r5, #1890]	; 0x762
 800a040:	e7f1      	b.n	800a026 <fCmdBuild_CGREG+0x4e>
 800a042:	bf00      	nop
 800a044:	20008ef8 	.word	0x20008ef8
 800a048:	08024beb 	.word	0x08024beb
 800a04c:	08024dac 	.word	0x08024dac
 800a050:	08024e97 	.word	0x08024e97

0800a054 <fCmdBuild_CEREG>:

at_status_t fCmdBuild_CEREG(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CEREG()")
 800a05a:	4819      	ldr	r0, [pc, #100]	; (800a0c0 <fCmdBuild_CEREG+0x6c>)
 800a05c:	4919      	ldr	r1, [pc, #100]	; (800a0c4 <fCmdBuild_CEREG+0x70>)
 800a05e:	f012 ff9b 	bl	801cf98 <strcpy>
 800a062:	4817      	ldr	r0, [pc, #92]	; (800a0c0 <fCmdBuild_CEREG+0x6c>)
 800a064:	f00d ff66 	bl	8017f34 <crs_strlen>
 800a068:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <fCmdBuild_CEREG+0x6c>)
 800a06a:	b283      	uxth	r3, r0
 800a06c:	2104      	movs	r1, #4
 800a06e:	2001      	movs	r0, #1
 800a070:	f00d ff9e 	bl	8017fb0 <traceIF_itmPrint>
 800a074:	4812      	ldr	r0, [pc, #72]	; (800a0c0 <fCmdBuild_CEREG+0x6c>)
 800a076:	f00d ff5d 	bl	8017f34 <crs_strlen>
 800a07a:	4a11      	ldr	r2, [pc, #68]	; (800a0c0 <fCmdBuild_CEREG+0x6c>)
 800a07c:	b283      	uxth	r3, r0
 800a07e:	2104      	movs	r1, #4
 800a080:	2001      	movs	r0, #1
 800a082:	f00e f9bb 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a086:	8923      	ldrh	r3, [r4, #8]
 800a088:	2b03      	cmp	r3, #3
 800a08a:	d113      	bne.n	800a0b4 <fCmdBuild_CEREG+0x60>
		if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_SUSBCRIBE_NET_EVENT) {
 800a08c:	4620      	mov	r0, r4
 800a08e:	f830 3b30 	ldrh.w	r3, [r0], #48
 800a092:	2b6a      	cmp	r3, #106	; 0x6a
 800a094:	d109      	bne.n	800a0aa <fCmdBuild_CEREG+0x56>
			atcustom_CxREG_n_t param_value;
			if (p_modem_ctxt->persist.psm_urc_requested == AT_TRUE) {
 800a096:	f895 3517 	ldrb.w	r3, [r5, #1303]	; 0x517
 800a09a:	2b00      	cmp	r3, #0
				param_value = CXREG_ENABLE_PSM_NETWK_REG_LOC_URC;
			} else {
				param_value = CXREG_ENABLE_NETWK_REG_LOC_URC;
			}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a09c:	bf14      	ite	ne
 800a09e:	2204      	movne	r2, #4
 800a0a0:	2202      	moveq	r2, #2
				== (at_msg_t) SID_CS_UNSUSBCRIBE_NET_EVENT) {
			/* disable notifications */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
		} else {
			/* for other SID, use param value set by user */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a0a2:	4909      	ldr	r1, [pc, #36]	; (800a0c8 <fCmdBuild_CEREG+0x74>)
 800a0a4:	f012 ff08 	bl	801ceb8 <sprintf>
 800a0a8:	e004      	b.n	800a0b4 <fCmdBuild_CEREG+0x60>
		} else if (p_atp_ctxt->current_SID
 800a0aa:	2b6b      	cmp	r3, #107	; 0x6b
 800a0ac:	d104      	bne.n	800a0b8 <fCmdBuild_CEREG+0x64>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a0ae:	4907      	ldr	r1, [pc, #28]	; (800a0cc <fCmdBuild_CEREG+0x78>)
 800a0b0:	f012 ff72 	bl	801cf98 <strcpy>
					(uint8_t) p_modem_ctxt->CMD_ctxt.cxreg_write_cmd_param);
		}
	}

	return (retval);
}
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a0b8:	f895 2762 	ldrb.w	r2, [r5, #1890]	; 0x762
 800a0bc:	e7f1      	b.n	800a0a2 <fCmdBuild_CEREG+0x4e>
 800a0be:	bf00      	nop
 800a0c0:	20008ef8 	.word	0x20008ef8
 800a0c4:	08024c12 	.word	0x08024c12
 800a0c8:	08024dac 	.word	0x08024dac
 800a0cc:	08024e97 	.word	0x08024e97

0800a0d0 <fCmdBuild_CGEREP>:

at_status_t fCmdBuild_CGEREP(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a0d0:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGEREP()")
 800a0d2:	4914      	ldr	r1, [pc, #80]	; (800a124 <fCmdBuild_CGEREP+0x54>)
		atcustom_modem_context_t *p_modem_ctxt) {
 800a0d4:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_CGEREP()")
 800a0d6:	4814      	ldr	r0, [pc, #80]	; (800a128 <fCmdBuild_CGEREP+0x58>)
 800a0d8:	f012 ff5e 	bl	801cf98 <strcpy>
 800a0dc:	4812      	ldr	r0, [pc, #72]	; (800a128 <fCmdBuild_CGEREP+0x58>)
 800a0de:	f00d ff29 	bl	8017f34 <crs_strlen>
 800a0e2:	4a11      	ldr	r2, [pc, #68]	; (800a128 <fCmdBuild_CGEREP+0x58>)
 800a0e4:	b283      	uxth	r3, r0
 800a0e6:	2104      	movs	r1, #4
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	f00d ff61 	bl	8017fb0 <traceIF_itmPrint>
 800a0ee:	480e      	ldr	r0, [pc, #56]	; (800a128 <fCmdBuild_CGEREP+0x58>)
 800a0f0:	f00d ff20 	bl	8017f34 <crs_strlen>
 800a0f4:	4a0c      	ldr	r2, [pc, #48]	; (800a128 <fCmdBuild_CGEREP+0x58>)
 800a0f6:	b283      	uxth	r3, r0
 800a0f8:	2104      	movs	r1, #4
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f00e f97e 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a100:	8923      	ldrh	r3, [r4, #8]
 800a102:	2b03      	cmp	r3, #3
 800a104:	d107      	bne.n	800a116 <fCmdBuild_CGEREP+0x46>
		 *         = 1: URC are discsarded when link is reserved (data on) and forwared otherwise
		 *         = 2: URC are buffered when link is reserved and send when link freed, and forwared otherwise
		 *  <bfr>  = 0: MT buffer of URC is cleared when <mode> 1 or 2 is entered
		 *         = 1: MT buffer of URC is flushed to TE when <mode> 1 or 2 is entered
		 */
		if (p_atp_ctxt->current_SID == (at_msg_t) SID_CS_REGISTER_PDN_EVENT) {
 800a106:	8823      	ldrh	r3, [r4, #0]
 800a108:	2b73      	cmp	r3, #115	; 0x73
 800a10a:	d106      	bne.n	800a11a <fCmdBuild_CGEREP+0x4a>
			/* enable notification (hard-coded value 1,0) */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <fCmdBuild_CGEREP+0x5c>)
					"1,0");
		} else if (p_atp_ctxt->current_SID
				== (at_msg_t) SID_CS_DEREGISTER_PDN_EVENT) {
			/* disable notifications */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a10e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a112:	f012 ff41 	bl	801cf98 <strcpy>
			/* nothing to do */
		}
	}

	return (retval);
}
 800a116:	2000      	movs	r0, #0
 800a118:	bd10      	pop	{r4, pc}
		} else if (p_atp_ctxt->current_SID
 800a11a:	2b74      	cmp	r3, #116	; 0x74
 800a11c:	d1fb      	bne.n	800a116 <fCmdBuild_CGEREP+0x46>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a11e:	4904      	ldr	r1, [pc, #16]	; (800a130 <fCmdBuild_CGEREP+0x60>)
 800a120:	e7f5      	b.n	800a10e <fCmdBuild_CGEREP+0x3e>
 800a122:	bf00      	nop
 800a124:	08024c39 	.word	0x08024c39
 800a128:	20008ef8 	.word	0x20008ef8
 800a12c:	08024c61 	.word	0x08024c61
 800a130:	08024e97 	.word	0x08024e97

0800a134 <fCmdBuild_CGDCONT>:
/****** Ashu Moved the default empty string to "iot.swir" *******/
#define APN_EMPTY_STRING "iot.swir"

/****** Ashu Modification Ends *********/
at_status_t fCmdBuild_CGDCONT(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a138:	4606      	mov	r6, r0
 800a13a:	4688      	mov	r8, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGDCONT()")
 800a13c:	483a      	ldr	r0, [pc, #232]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a13e:	493b      	ldr	r1, [pc, #236]	; (800a22c <fCmdBuild_CGDCONT+0xf8>)
 800a140:	f012 ff2a 	bl	801cf98 <strcpy>
 800a144:	4838      	ldr	r0, [pc, #224]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a146:	f00d fef5 	bl	8017f34 <crs_strlen>
 800a14a:	4a37      	ldr	r2, [pc, #220]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a14c:	b283      	uxth	r3, r0
 800a14e:	2104      	movs	r1, #4
 800a150:	2001      	movs	r0, #1
 800a152:	f00d ff2d 	bl	8017fb0 <traceIF_itmPrint>
 800a156:	4834      	ldr	r0, [pc, #208]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a158:	f00d feec 	bl	8017f34 <crs_strlen>
 800a15c:	4a32      	ldr	r2, [pc, #200]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a15e:	b283      	uxth	r3, r0
 800a160:	2104      	movs	r1, #4
 800a162:	2001      	movs	r0, #1
 800a164:	f00e f94a 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a168:	8933      	ldrh	r3, [r6, #8]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d13d      	bne.n	800a1ea <fCmdBuild_CGDCONT+0xb6>
		CS_CHAR_t *p_apn;
		CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(
 800a16e:	4640      	mov	r0, r8
 800a170:	f7fe f9cc 	bl	800850c <atcm_get_cid_current_SID>
 800a174:	4604      	mov	r4, r0
				p_modem_ctxt);
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a176:	4601      	mov	r1, r0
 800a178:	f108 000c 	add.w	r0, r8, #12
 800a17c:	f7ff fcac 	bl	8009ad8 <atcm_get_affected_modem_cid>
				current_conf_id);
		PRINT_INFO("user cid = %d, modem cid = %d", (uint8_t )current_conf_id,
 800a180:	492b      	ldr	r1, [pc, #172]	; (800a230 <fCmdBuild_CGDCONT+0xfc>)
 800a182:	4603      	mov	r3, r0
 800a184:	4622      	mov	r2, r4
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a186:	4607      	mov	r7, r0
		PRINT_INFO("user cid = %d, modem cid = %d", (uint8_t )current_conf_id,
 800a188:	4827      	ldr	r0, [pc, #156]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a18a:	f012 fe95 	bl	801ceb8 <sprintf>
 800a18e:	4826      	ldr	r0, [pc, #152]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a190:	f00d fed0 	bl	8017f34 <crs_strlen>
 800a194:	2101      	movs	r1, #1
 800a196:	b283      	uxth	r3, r0
 800a198:	4a23      	ldr	r2, [pc, #140]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a19a:	4608      	mov	r0, r1
 800a19c:	f00d ff08 	bl	8017fb0 <traceIF_itmPrint>
 800a1a0:	4821      	ldr	r0, [pc, #132]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a1a2:	f00d fec7 	bl	8017f34 <crs_strlen>
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	b283      	uxth	r3, r0
 800a1aa:	4a1f      	ldr	r2, [pc, #124]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	f00e f925 	bl	80183fc <traceIF_uartPrint>
				modem_cid)

		/* build command */
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].apn_present
 800a1b2:	2383      	movs	r3, #131	; 0x83
 800a1b4:	fb03 f504 	mul.w	r5, r3, r4
 800a1b8:	eb08 0205 	add.w	r2, r8, r5
 800a1bc:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800a1c0:	b1aa      	cbz	r2, 800a1ee <fCmdBuild_CGDCONT+0xba>
				== CELLULAR_TRUE) {
			/* use the APN explicitly providedby user */
			p_apn =
 800a1c2:	3556      	adds	r5, #86	; 0x56
 800a1c4:	4445      	add	r5, r8
			 */
			p_apn = (CS_CHAR_t*) &APN_EMPTY_STRING;
		}

		/* check if this PDP context has been defined */
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a1c6:	fb03 8104 	mla	r1, r3, r4, r8
 800a1ca:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 800a1ce:	2b0c      	cmp	r3, #12
 800a1d0:	d00f      	beq.n	800a1f2 <fCmdBuild_CGDCONT+0xbe>
				!= CS_PDN_NOT_DEFINED) {
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a1d2:	f891 0096 	ldrb.w	r0, [r1, #150]	; 0x96
 800a1d6:	f7fe fa35 	bl	8008644 <atcm_get_PDPtypeStr>
 800a1da:	4916      	ldr	r1, [pc, #88]	; (800a234 <fCmdBuild_CGDCONT+0x100>)
 800a1dc:	9500      	str	r5, [sp, #0]
 800a1de:	4603      	mov	r3, r0
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800a1e6:	f012 fe67 	bl	801ceb8 <sprintf>
	at_status_t retval = ATSTATUS_OK;
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e019      	b.n	800a222 <fCmdBuild_CGDCONT+0xee>
			p_apn = (CS_CHAR_t*) &APN_EMPTY_STRING;
 800a1ee:	4d12      	ldr	r5, [pc, #72]	; (800a238 <fCmdBuild_CGDCONT+0x104>)
 800a1f0:	e7e9      	b.n	800a1c6 <fCmdBuild_CGDCONT+0x92>
					"%d,\"%s\",\"%s\"", modem_cid,
					atcm_get_PDPtypeStr(
							p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].pdn_conf.pdp_type),
					p_apn);
		} else {
			PRINT_ERR("PDP context not defined for conf_id %d", current_conf_id)
 800a1f2:	4912      	ldr	r1, [pc, #72]	; (800a23c <fCmdBuild_CGDCONT+0x108>)
 800a1f4:	480c      	ldr	r0, [pc, #48]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	f012 fe5e 	bl	801ceb8 <sprintf>
 800a1fc:	480a      	ldr	r0, [pc, #40]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a1fe:	f00d fe99 	bl	8017f34 <crs_strlen>
 800a202:	4a09      	ldr	r2, [pc, #36]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a204:	b283      	uxth	r3, r0
 800a206:	2110      	movs	r1, #16
 800a208:	2001      	movs	r0, #1
 800a20a:	f00d fed1 	bl	8017fb0 <traceIF_itmPrint>
 800a20e:	4806      	ldr	r0, [pc, #24]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a210:	f00d fe90 	bl	8017f34 <crs_strlen>
 800a214:	4a04      	ldr	r2, [pc, #16]	; (800a228 <fCmdBuild_CGDCONT+0xf4>)
 800a216:	b283      	uxth	r3, r0
 800a218:	2110      	movs	r1, #16
 800a21a:	2001      	movs	r0, #1
 800a21c:	f00e f8ee 	bl	80183fc <traceIF_uartPrint>
			retval = ATSTATUS_ERROR;
 800a220:	2001      	movs	r0, #1
		}
	}

	return (retval);
}
 800a222:	b002      	add	sp, #8
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	20008ef8 	.word	0x20008ef8
 800a22c:	08024c6e 	.word	0x08024c6e
 800a230:	08024c97 	.word	0x08024c97
 800a234:	08024cc0 	.word	0x08024cc0
 800a238:	08024c65 	.word	0x08024c65
 800a23c:	08024ccd 	.word	0x08024ccd

0800a240 <fCmdBuild_CGACT>:

at_status_t fCmdBuild_CGACT(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	460c      	mov	r4, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGACT()")
 800a246:	4827      	ldr	r0, [pc, #156]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a248:	4927      	ldr	r1, [pc, #156]	; (800a2e8 <fCmdBuild_CGACT+0xa8>)
 800a24a:	f012 fea5 	bl	801cf98 <strcpy>
 800a24e:	4825      	ldr	r0, [pc, #148]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a250:	f00d fe70 	bl	8017f34 <crs_strlen>
 800a254:	4a23      	ldr	r2, [pc, #140]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a256:	b283      	uxth	r3, r0
 800a258:	2104      	movs	r1, #4
 800a25a:	2001      	movs	r0, #1
 800a25c:	f00d fea8 	bl	8017fb0 <traceIF_itmPrint>
 800a260:	4820      	ldr	r0, [pc, #128]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a262:	f00d fe67 	bl	8017f34 <crs_strlen>
 800a266:	4a1f      	ldr	r2, [pc, #124]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a268:	b283      	uxth	r3, r0
 800a26a:	2104      	movs	r1, #4
 800a26c:	2001      	movs	r0, #1
 800a26e:	f00e f8c5 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a272:	892b      	ldrh	r3, [r5, #8]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d132      	bne.n	800a2de <fCmdBuild_CGACT+0x9e>
		CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(
 800a278:	4620      	mov	r0, r4
 800a27a:	f7fe f947 	bl	800850c <atcm_get_cid_current_SID>
				p_modem_ctxt);
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a27e:	4601      	mov	r1, r0
 800a280:	9001      	str	r0, [sp, #4]
 800a282:	f104 000c 	add.w	r0, r4, #12
 800a286:	f7ff fc27 	bl	8009ad8 <atcm_get_affected_modem_cid>
				current_conf_id);

		/* check if this PDP context has been defined */
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a28a:	9a01      	ldr	r2, [sp, #4]
 800a28c:	2383      	movs	r3, #131	; 0x83
 800a28e:	fb03 4302 	mla	r3, r3, r2, r4
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a292:	4606      	mov	r6, r0
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a294:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a298:	2b0c      	cmp	r3, #12
 800a29a:	d115      	bne.n	800a2c8 <fCmdBuild_CGACT+0x88>
				== CS_PDN_NOT_DEFINED) {
			/* Trace only */
			PRINT_INFO(
 800a29c:	4913      	ldr	r1, [pc, #76]	; (800a2ec <fCmdBuild_CGACT+0xac>)
 800a29e:	4811      	ldr	r0, [pc, #68]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a2a0:	f012 fe0a 	bl	801ceb8 <sprintf>
 800a2a4:	480f      	ldr	r0, [pc, #60]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a2a6:	f00d fe45 	bl	8017f34 <crs_strlen>
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	b283      	uxth	r3, r0
 800a2ae:	4a0d      	ldr	r2, [pc, #52]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	f00d fe7d 	bl	8017fb0 <traceIF_itmPrint>
 800a2b6:	480b      	ldr	r0, [pc, #44]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a2b8:	f00d fe3c 	bl	8017f34 <crs_strlen>
 800a2bc:	2101      	movs	r1, #1
 800a2be:	b283      	uxth	r3, r0
 800a2c0:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <fCmdBuild_CGACT+0xa4>)
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	f00e f89a 	bl	80183fc <traceIF_uartPrint>

		/* PDP context activate or deactivate
		 *  3GPP TS 27.007
		 *  AT+CGACT=[<state>[,<cid>[,<cid>[,...]]]]
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d,%d",
 800a2c8:	f894 2765 	ldrb.w	r2, [r4, #1893]	; 0x765
 800a2cc:	1e51      	subs	r1, r2, #1
 800a2ce:	424a      	negs	r2, r1
 800a2d0:	414a      	adcs	r2, r1
 800a2d2:	4633      	mov	r3, r6
 800a2d4:	4906      	ldr	r1, [pc, #24]	; (800a2f0 <fCmdBuild_CGACT+0xb0>)
 800a2d6:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a2da:	f012 fded 	bl	801ceb8 <sprintf>
				((p_modem_ctxt->CMD_ctxt.pdn_state == PDN_STATE_ACTIVATE) ?
						1 : 0), modem_cid);
	}

	return (retval);
}
 800a2de:	2000      	movs	r0, #0
 800a2e0:	b002      	add	sp, #8
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	20008ef8 	.word	0x20008ef8
 800a2e8:	08024d05 	.word	0x08024d05
 800a2ec:	08024d2c 	.word	0x08024d2c
 800a2f0:	08024af0 	.word	0x08024af0

0800a2f4 <fCmdBuild_CGDATA>:

	return (retval);
}

at_status_t fCmdBuild_CGDATA(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a2f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	460c      	mov	r4, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGDATA()")
 800a2fa:	4825      	ldr	r0, [pc, #148]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a2fc:	4925      	ldr	r1, [pc, #148]	; (800a394 <fCmdBuild_CGDATA+0xa0>)
 800a2fe:	f012 fe4b 	bl	801cf98 <strcpy>
 800a302:	4823      	ldr	r0, [pc, #140]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a304:	f00d fe16 	bl	8017f34 <crs_strlen>
 800a308:	4a21      	ldr	r2, [pc, #132]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a30a:	b283      	uxth	r3, r0
 800a30c:	2104      	movs	r1, #4
 800a30e:	2001      	movs	r0, #1
 800a310:	f00d fe4e 	bl	8017fb0 <traceIF_itmPrint>
 800a314:	481e      	ldr	r0, [pc, #120]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a316:	f00d fe0d 	bl	8017f34 <crs_strlen>
 800a31a:	4a1d      	ldr	r2, [pc, #116]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a31c:	b283      	uxth	r3, r0
 800a31e:	2104      	movs	r1, #4
 800a320:	2001      	movs	r0, #1
 800a322:	f00e f86b 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a326:	892b      	ldrh	r3, [r5, #8]
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d12d      	bne.n	800a388 <fCmdBuild_CGDATA+0x94>
		CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7fe f8ed 	bl	800850c <atcm_get_cid_current_SID>
				p_modem_ctxt);
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a332:	4601      	mov	r1, r0
 800a334:	9001      	str	r0, [sp, #4]
 800a336:	f104 000c 	add.w	r0, r4, #12
 800a33a:	f7ff fbcd 	bl	8009ad8 <atcm_get_affected_modem_cid>
				current_conf_id);

		/* check if this PDP context has been defined */
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a33e:	9a01      	ldr	r2, [sp, #4]
 800a340:	2183      	movs	r1, #131	; 0x83
 800a342:	fb01 4402 	mla	r4, r1, r2, r4
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a346:	4606      	mov	r6, r0
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a348:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a34c:	2b0c      	cmp	r3, #12
 800a34e:	d115      	bne.n	800a37c <fCmdBuild_CGDATA+0x88>
				== CS_PDN_NOT_DEFINED) {
			/* Trace only */
			PRINT_INFO(
 800a350:	4911      	ldr	r1, [pc, #68]	; (800a398 <fCmdBuild_CGDATA+0xa4>)
 800a352:	480f      	ldr	r0, [pc, #60]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a354:	f012 fdb0 	bl	801ceb8 <sprintf>
 800a358:	480d      	ldr	r0, [pc, #52]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a35a:	f00d fdeb 	bl	8017f34 <crs_strlen>
 800a35e:	2101      	movs	r1, #1
 800a360:	b283      	uxth	r3, r0
 800a362:	4a0b      	ldr	r2, [pc, #44]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a364:	4608      	mov	r0, r1
 800a366:	f00d fe23 	bl	8017fb0 <traceIF_itmPrint>
 800a36a:	4809      	ldr	r0, [pc, #36]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a36c:	f00d fde2 	bl	8017f34 <crs_strlen>
 800a370:	2101      	movs	r1, #1
 800a372:	b283      	uxth	r3, r0
 800a374:	4a06      	ldr	r2, [pc, #24]	; (800a390 <fCmdBuild_CGDATA+0x9c>)
 800a376:	4608      	mov	r0, r1
 800a378:	f00e f840 	bl	80183fc <traceIF_uartPrint>

		/* Enter data state
		 *  3GPP TS 27.007
		 *  AT+CGDATA[=<L2P>[,<cid>[,<cid>[,...]]]]
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a37c:	4907      	ldr	r1, [pc, #28]	; (800a39c <fCmdBuild_CGDATA+0xa8>)
 800a37e:	4632      	mov	r2, r6
 800a380:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a384:	f012 fd98 	bl	801ceb8 <sprintf>
				"\"PPP\",%d", modem_cid);
	}

	return (retval);
}
 800a388:	2000      	movs	r0, #0
 800a38a:	b002      	add	sp, #8
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	bf00      	nop
 800a390:	20008ef8 	.word	0x20008ef8
 800a394:	08024d7e 	.word	0x08024d7e
 800a398:	08024d2c 	.word	0x08024d2c
 800a39c:	08024da6 	.word	0x08024da6

0800a3a0 <fCmdBuild_CGPADDR>:

at_status_t fCmdBuild_CGPADDR(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a3a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	460c      	mov	r4, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CGPADDR()")
 800a3a6:	4825      	ldr	r0, [pc, #148]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a3a8:	4925      	ldr	r1, [pc, #148]	; (800a440 <fCmdBuild_CGPADDR+0xa0>)
 800a3aa:	f012 fdf5 	bl	801cf98 <strcpy>
 800a3ae:	4823      	ldr	r0, [pc, #140]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a3b0:	f00d fdc0 	bl	8017f34 <crs_strlen>
 800a3b4:	4a21      	ldr	r2, [pc, #132]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a3b6:	b283      	uxth	r3, r0
 800a3b8:	2104      	movs	r1, #4
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	f00d fdf8 	bl	8017fb0 <traceIF_itmPrint>
 800a3c0:	481e      	ldr	r0, [pc, #120]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a3c2:	f00d fdb7 	bl	8017f34 <crs_strlen>
 800a3c6:	4a1d      	ldr	r2, [pc, #116]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a3c8:	b283      	uxth	r3, r0
 800a3ca:	2104      	movs	r1, #4
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	f00e f815 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a3d2:	892b      	ldrh	r3, [r5, #8]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d12d      	bne.n	800a434 <fCmdBuild_CGPADDR+0x94>
		CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7fe f897 	bl	800850c <atcm_get_cid_current_SID>
				p_modem_ctxt);
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a3de:	4601      	mov	r1, r0
 800a3e0:	9001      	str	r0, [sp, #4]
 800a3e2:	f104 000c 	add.w	r0, r4, #12
 800a3e6:	f7ff fb77 	bl	8009ad8 <atcm_get_affected_modem_cid>
				current_conf_id);

		/* check if this PDP context has been defined */
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a3ea:	9a01      	ldr	r2, [sp, #4]
 800a3ec:	2183      	movs	r1, #131	; 0x83
 800a3ee:	fb01 4402 	mla	r4, r1, r2, r4
		uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist,
 800a3f2:	4606      	mov	r6, r0
		if (p_modem_ctxt->persist.pdp_ctxt_infos[current_conf_id].conf_id
 800a3f4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	d115      	bne.n	800a428 <fCmdBuild_CGPADDR+0x88>
				== CS_PDN_NOT_DEFINED) {
			/* Trace only */
			PRINT_INFO(
 800a3fc:	4911      	ldr	r1, [pc, #68]	; (800a444 <fCmdBuild_CGPADDR+0xa4>)
 800a3fe:	480f      	ldr	r0, [pc, #60]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a400:	f012 fd5a 	bl	801ceb8 <sprintf>
 800a404:	480d      	ldr	r0, [pc, #52]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a406:	f00d fd95 	bl	8017f34 <crs_strlen>
 800a40a:	2101      	movs	r1, #1
 800a40c:	b283      	uxth	r3, r0
 800a40e:	4a0b      	ldr	r2, [pc, #44]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a410:	4608      	mov	r0, r1
 800a412:	f00d fdcd 	bl	8017fb0 <traceIF_itmPrint>
 800a416:	4809      	ldr	r0, [pc, #36]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a418:	f00d fd8c 	bl	8017f34 <crs_strlen>
 800a41c:	2101      	movs	r1, #1
 800a41e:	b283      	uxth	r3, r0
 800a420:	4a06      	ldr	r2, [pc, #24]	; (800a43c <fCmdBuild_CGPADDR+0x9c>)
 800a422:	4608      	mov	r0, r1
 800a424:	f00d ffea 	bl	80183fc <traceIF_uartPrint>
		 *  3GPP TS 27.007
		 *  AT+CGPADDR[=<cid>[,<cid>[,...]]]
		 *
		 *  implemenation: we only request address for 1 cid (if more cid required, call it again)
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%d",
 800a428:	4907      	ldr	r1, [pc, #28]	; (800a448 <fCmdBuild_CGPADDR+0xa8>)
 800a42a:	4632      	mov	r2, r6
 800a42c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a430:	f012 fd42 	bl	801ceb8 <sprintf>
				modem_cid);
	}

	return (retval);
}
 800a434:	2000      	movs	r0, #0
 800a436:	b002      	add	sp, #8
 800a438:	bd70      	pop	{r4, r5, r6, pc}
 800a43a:	bf00      	nop
 800a43c:	20008ef8 	.word	0x20008ef8
 800a440:	08024daf 	.word	0x08024daf
 800a444:	08024d2c 	.word	0x08024d2c
 800a448:	08024dac 	.word	0x08024dac

0800a44c <fCmdBuild_ATE>:
	}
	return (retval);
}

at_status_t fCmdBuild_ATE(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_ATE()")
 800a452:	4812      	ldr	r0, [pc, #72]	; (800a49c <fCmdBuild_ATE+0x50>)
 800a454:	4912      	ldr	r1, [pc, #72]	; (800a4a0 <fCmdBuild_ATE+0x54>)
 800a456:	f012 fd9f 	bl	801cf98 <strcpy>
 800a45a:	4810      	ldr	r0, [pc, #64]	; (800a49c <fCmdBuild_ATE+0x50>)
 800a45c:	f00d fd6a 	bl	8017f34 <crs_strlen>
 800a460:	4a0e      	ldr	r2, [pc, #56]	; (800a49c <fCmdBuild_ATE+0x50>)
 800a462:	b283      	uxth	r3, r0
 800a464:	2104      	movs	r1, #4
 800a466:	2001      	movs	r0, #1
 800a468:	f00d fda2 	bl	8017fb0 <traceIF_itmPrint>
 800a46c:	480b      	ldr	r0, [pc, #44]	; (800a49c <fCmdBuild_ATE+0x50>)
 800a46e:	f00d fd61 	bl	8017f34 <crs_strlen>
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <fCmdBuild_ATE+0x50>)
 800a474:	b283      	uxth	r3, r0
 800a476:	2104      	movs	r1, #4
 800a478:	2001      	movs	r0, #1
 800a47a:	f00d ffbf 	bl	80183fc <traceIF_uartPrint>

	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800a47e:	8923      	ldrh	r3, [r4, #8]
 800a480:	2b04      	cmp	r3, #4
 800a482:	d107      	bne.n	800a494 <fCmdBuild_ATE+0x48>
		/* echo mode ON or OFF */
		if (p_modem_ctxt->CMD_ctxt.command_echo == AT_TRUE) {
 800a484:	f895 3763 	ldrb.w	r3, [r5, #1891]	; 0x763
 800a488:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a48c:	b123      	cbz	r3, 800a498 <fCmdBuild_ATE+0x4c>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "1");
 800a48e:	4905      	ldr	r1, [pc, #20]	; (800a4a4 <fCmdBuild_ATE+0x58>)
		} else {
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a490:	f012 fd82 	bl	801cf98 <strcpy>
		}
	}
	return (retval);
}
 800a494:	2000      	movs	r0, #0
 800a496:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a498:	4903      	ldr	r1, [pc, #12]	; (800a4a8 <fCmdBuild_ATE+0x5c>)
 800a49a:	e7f9      	b.n	800a490 <fCmdBuild_ATE+0x44>
 800a49c:	20008ef8 	.word	0x20008ef8
 800a4a0:	08024dd8 	.word	0x08024dd8
 800a4a4:	08029a68 	.word	0x08029a68
 800a4a8:	08024e97 	.word	0x08024e97

0800a4ac <fCmdBuild_ATV>:

at_status_t fCmdBuild_ATV(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_ATV()")
 800a4b2:	4812      	ldr	r0, [pc, #72]	; (800a4fc <fCmdBuild_ATV+0x50>)
 800a4b4:	4912      	ldr	r1, [pc, #72]	; (800a500 <fCmdBuild_ATV+0x54>)
 800a4b6:	f012 fd6f 	bl	801cf98 <strcpy>
 800a4ba:	4810      	ldr	r0, [pc, #64]	; (800a4fc <fCmdBuild_ATV+0x50>)
 800a4bc:	f00d fd3a 	bl	8017f34 <crs_strlen>
 800a4c0:	4a0e      	ldr	r2, [pc, #56]	; (800a4fc <fCmdBuild_ATV+0x50>)
 800a4c2:	b283      	uxth	r3, r0
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	f00d fd72 	bl	8017fb0 <traceIF_itmPrint>
 800a4cc:	480b      	ldr	r0, [pc, #44]	; (800a4fc <fCmdBuild_ATV+0x50>)
 800a4ce:	f00d fd31 	bl	8017f34 <crs_strlen>
 800a4d2:	4a0a      	ldr	r2, [pc, #40]	; (800a4fc <fCmdBuild_ATV+0x50>)
 800a4d4:	b283      	uxth	r3, r0
 800a4d6:	2104      	movs	r1, #4
 800a4d8:	2001      	movs	r0, #1
 800a4da:	f00d ff8f 	bl	80183fc <traceIF_uartPrint>

	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800a4de:	8923      	ldrh	r3, [r4, #8]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d107      	bne.n	800a4f4 <fCmdBuild_ATV+0x48>
		/* echo mode ON or OFF */
		if (p_modem_ctxt->CMD_ctxt.dce_full_resp_format == AT_TRUE) {
 800a4e4:	f895 3764 	ldrb.w	r3, [r5, #1892]	; 0x764
 800a4e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a4ec:	b123      	cbz	r3, 800a4f8 <fCmdBuild_ATV+0x4c>
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "1");
 800a4ee:	4905      	ldr	r1, [pc, #20]	; (800a504 <fCmdBuild_ATV+0x58>)
		} else {
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a4f0:	f012 fd52 	bl	801cf98 <strcpy>
		}
	}
	return (retval);
}
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a4f8:	4903      	ldr	r1, [pc, #12]	; (800a508 <fCmdBuild_ATV+0x5c>)
 800a4fa:	e7f9      	b.n	800a4f0 <fCmdBuild_ATV+0x44>
 800a4fc:	20008ef8 	.word	0x20008ef8
 800a500:	08024dfd 	.word	0x08024dfd
 800a504:	08029a68 	.word	0x08029a68
 800a508:	08024e97 	.word	0x08024e97

0800a50c <fCmdBuild_ATX>:

at_status_t fCmdBuild_ATX(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a50c:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_ATX()")
 800a50e:	4910      	ldr	r1, [pc, #64]	; (800a550 <fCmdBuild_ATX+0x44>)
		atcustom_modem_context_t *p_modem_ctxt) {
 800a510:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_ATX()")
 800a512:	4810      	ldr	r0, [pc, #64]	; (800a554 <fCmdBuild_ATX+0x48>)
 800a514:	f012 fd40 	bl	801cf98 <strcpy>
 800a518:	480e      	ldr	r0, [pc, #56]	; (800a554 <fCmdBuild_ATX+0x48>)
 800a51a:	f00d fd0b 	bl	8017f34 <crs_strlen>
 800a51e:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <fCmdBuild_ATX+0x48>)
 800a520:	b283      	uxth	r3, r0
 800a522:	2104      	movs	r1, #4
 800a524:	2001      	movs	r0, #1
 800a526:	f00d fd43 	bl	8017fb0 <traceIF_itmPrint>
 800a52a:	480a      	ldr	r0, [pc, #40]	; (800a554 <fCmdBuild_ATX+0x48>)
 800a52c:	f00d fd02 	bl	8017f34 <crs_strlen>
 800a530:	4a08      	ldr	r2, [pc, #32]	; (800a554 <fCmdBuild_ATX+0x48>)
 800a532:	b283      	uxth	r3, r0
 800a534:	2104      	movs	r1, #4
 800a536:	2001      	movs	r0, #1
 800a538:	f00d ff60 	bl	80183fc <traceIF_uartPrint>

	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800a53c:	8923      	ldrh	r3, [r4, #8]
 800a53e:	2b04      	cmp	r3, #4
 800a540:	d104      	bne.n	800a54c <fCmdBuild_ATX+0x40>
		/* CONNECT Result code and monitor call progress
		 *  for the moment, ATX0 to return result code only, dial tone and busy detection are both disabled
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a542:	4905      	ldr	r1, [pc, #20]	; (800a558 <fCmdBuild_ATX+0x4c>)
 800a544:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a548:	f012 fd26 	bl	801cf98 <strcpy>
	}
	return (retval);
}
 800a54c:	2000      	movs	r0, #0
 800a54e:	bd10      	pop	{r4, pc}
 800a550:	08024e22 	.word	0x08024e22
 800a554:	20008ef8 	.word	0x20008ef8
 800a558:	08024e97 	.word	0x08024e97

0800a55c <fCmdBuild_IPR>:
	}
	return (retval);
}

at_status_t fCmdBuild_IPR(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_IPR()")
 800a562:	4811      	ldr	r0, [pc, #68]	; (800a5a8 <fCmdBuild_IPR+0x4c>)
 800a564:	4911      	ldr	r1, [pc, #68]	; (800a5ac <fCmdBuild_IPR+0x50>)
 800a566:	f012 fd17 	bl	801cf98 <strcpy>
 800a56a:	480f      	ldr	r0, [pc, #60]	; (800a5a8 <fCmdBuild_IPR+0x4c>)
 800a56c:	f00d fce2 	bl	8017f34 <crs_strlen>
 800a570:	4a0d      	ldr	r2, [pc, #52]	; (800a5a8 <fCmdBuild_IPR+0x4c>)
 800a572:	b283      	uxth	r3, r0
 800a574:	2104      	movs	r1, #4
 800a576:	2001      	movs	r0, #1
 800a578:	f00d fd1a 	bl	8017fb0 <traceIF_itmPrint>
 800a57c:	480a      	ldr	r0, [pc, #40]	; (800a5a8 <fCmdBuild_IPR+0x4c>)
 800a57e:	f00d fcd9 	bl	8017f34 <crs_strlen>
 800a582:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <fCmdBuild_IPR+0x4c>)
 800a584:	b283      	uxth	r3, r0
 800a586:	2104      	movs	r1, #4
 800a588:	2001      	movs	r0, #1
 800a58a:	f00d ff37 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a58e:	8923      	ldrh	r3, [r4, #8]
 800a590:	2b03      	cmp	r3, #3
 800a592:	d106      	bne.n	800a5a2 <fCmdBuild_IPR+0x46>
		/* set baud rate */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%ld",
 800a594:	f8d5 276c 	ldr.w	r2, [r5, #1900]	; 0x76c
 800a598:	4905      	ldr	r1, [pc, #20]	; (800a5b0 <fCmdBuild_IPR+0x54>)
 800a59a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a59e:	f012 fc8b 	bl	801ceb8 <sprintf>
				p_modem_ctxt->CMD_ctxt.baud_rate);
	}
	return (retval);
}
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20008ef8 	.word	0x20008ef8
 800a5ac:	08024e47 	.word	0x08024e47
 800a5b0:	08024e6c 	.word	0x08024e6c

0800a5b4 <fCmdBuild_IFC>:

at_status_t fCmdBuild_IFC(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_IFC()")
 800a5ba:	4812      	ldr	r0, [pc, #72]	; (800a604 <fCmdBuild_IFC+0x50>)
 800a5bc:	4912      	ldr	r1, [pc, #72]	; (800a608 <fCmdBuild_IFC+0x54>)
 800a5be:	f012 fceb 	bl	801cf98 <strcpy>
 800a5c2:	4810      	ldr	r0, [pc, #64]	; (800a604 <fCmdBuild_IFC+0x50>)
 800a5c4:	f00d fcb6 	bl	8017f34 <crs_strlen>
 800a5c8:	4a0e      	ldr	r2, [pc, #56]	; (800a604 <fCmdBuild_IFC+0x50>)
 800a5ca:	b283      	uxth	r3, r0
 800a5cc:	2104      	movs	r1, #4
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	f00d fcee 	bl	8017fb0 <traceIF_itmPrint>
 800a5d4:	480b      	ldr	r0, [pc, #44]	; (800a604 <fCmdBuild_IFC+0x50>)
 800a5d6:	f00d fcad 	bl	8017f34 <crs_strlen>
 800a5da:	4a0a      	ldr	r2, [pc, #40]	; (800a604 <fCmdBuild_IFC+0x50>)
 800a5dc:	b283      	uxth	r3, r0
 800a5de:	2104      	movs	r1, #4
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f00d ff0b 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a5e6:	8923      	ldrh	r3, [r4, #8]
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d107      	bne.n	800a5fc <fCmdBuild_IFC+0x48>
		/* set flow control */
		if (p_modem_ctxt->CMD_ctxt.flow_control_cts_rts == AT_FALSE) {
 800a5ec:	f895 3770 	ldrb.w	r3, [r5, #1904]	; 0x770
 800a5f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a5f4:	b923      	cbnz	r3, 800a600 <fCmdBuild_IFC+0x4c>
			/* No flow control */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a5f6:	4905      	ldr	r1, [pc, #20]	; (800a60c <fCmdBuild_IFC+0x58>)
					"0,0");
		} else {
			/* CTS/RTS activated */
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a5f8:	f012 fcce 	bl	801cf98 <strcpy>
					"2,2");
		}
	}
	return (retval);
}
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
			(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a600:	4903      	ldr	r1, [pc, #12]	; (800a610 <fCmdBuild_IFC+0x5c>)
 800a602:	e7f9      	b.n	800a5f8 <fCmdBuild_IFC+0x44>
 800a604:	20008ef8 	.word	0x20008ef8
 800a608:	08024e70 	.word	0x08024e70
 800a60c:	08024e95 	.word	0x08024e95
 800a610:	08024e99 	.word	0x08024e99

0800a614 <fCmdBuild_ESCAPE_CMD>:

at_status_t fCmdBuild_ESCAPE_CMD(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a614:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_ESCAPE_CMD()")
 800a616:	4914      	ldr	r1, [pc, #80]	; (800a668 <fCmdBuild_ESCAPE_CMD+0x54>)
		atcustom_modem_context_t *p_modem_ctxt) {
 800a618:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_ESCAPE_CMD()")
 800a61a:	4814      	ldr	r0, [pc, #80]	; (800a66c <fCmdBuild_ESCAPE_CMD+0x58>)
 800a61c:	f012 fcbc 	bl	801cf98 <strcpy>
 800a620:	4812      	ldr	r0, [pc, #72]	; (800a66c <fCmdBuild_ESCAPE_CMD+0x58>)
 800a622:	f00d fc87 	bl	8017f34 <crs_strlen>
 800a626:	4a11      	ldr	r2, [pc, #68]	; (800a66c <fCmdBuild_ESCAPE_CMD+0x58>)
 800a628:	b283      	uxth	r3, r0
 800a62a:	2104      	movs	r1, #4
 800a62c:	2001      	movs	r0, #1
 800a62e:	f00d fcbf 	bl	8017fb0 <traceIF_itmPrint>
 800a632:	480e      	ldr	r0, [pc, #56]	; (800a66c <fCmdBuild_ESCAPE_CMD+0x58>)
 800a634:	f00d fc7e 	bl	8017f34 <crs_strlen>
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <fCmdBuild_ESCAPE_CMD+0x58>)
 800a63a:	b283      	uxth	r3, r0
 800a63c:	2104      	movs	r1, #4
 800a63e:	2001      	movs	r0, #1
 800a640:	f00d fedc 	bl	80183fc <traceIF_uartPrint>

	/* only for RAW command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_RAW_CMD) {
 800a644:	8923      	ldrh	r3, [r4, #8]
 800a646:	2b06      	cmp	r3, #6
 800a648:	d10c      	bne.n	800a664 <fCmdBuild_ESCAPE_CMD+0x50>
		/* set escape sequence (as define in custom modem specific) */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "%s",
 800a64a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800a64e:	f104 0110 	add.w	r1, r4, #16
 800a652:	4618      	mov	r0, r3
 800a654:	f012 fca0 	bl	801cf98 <strcpy>
				p_atp_ctxt->current_atcmd.name);
		/* set raw command size */
		p_atp_ctxt->current_atcmd.raw_cmd_size = strlen(
 800a658:	f7f5 fddc 	bl	8000214 <strlen>
 800a65c:	f8c4 0670 	str.w	r0, [r4, #1648]	; 0x670
	at_status_t retval = ATSTATUS_OK;
 800a660:	2000      	movs	r0, #0
				(CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params);
	} else {
		retval = ATSTATUS_ERROR;
	}
	return (retval);
}
 800a662:	bd10      	pop	{r4, pc}
		retval = ATSTATUS_ERROR;
 800a664:	2001      	movs	r0, #1
 800a666:	e7fc      	b.n	800a662 <fCmdBuild_ESCAPE_CMD+0x4e>
 800a668:	08024e9d 	.word	0x08024e9d
 800a66c:	20008ef8 	.word	0x20008ef8

0800a670 <fCmdBuild_AT_AND_D>:

at_status_t fCmdBuild_AT_AND_D(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a670:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_AT_AND_D()")
 800a672:	4910      	ldr	r1, [pc, #64]	; (800a6b4 <fCmdBuild_AT_AND_D+0x44>)
		atcustom_modem_context_t *p_modem_ctxt) {
 800a674:	4604      	mov	r4, r0
	PRINT_API("enter fCmdBuild_AT_AND_D()")
 800a676:	4810      	ldr	r0, [pc, #64]	; (800a6b8 <fCmdBuild_AT_AND_D+0x48>)
 800a678:	f012 fc8e 	bl	801cf98 <strcpy>
 800a67c:	480e      	ldr	r0, [pc, #56]	; (800a6b8 <fCmdBuild_AT_AND_D+0x48>)
 800a67e:	f00d fc59 	bl	8017f34 <crs_strlen>
 800a682:	4a0d      	ldr	r2, [pc, #52]	; (800a6b8 <fCmdBuild_AT_AND_D+0x48>)
 800a684:	b283      	uxth	r3, r0
 800a686:	2104      	movs	r1, #4
 800a688:	2001      	movs	r0, #1
 800a68a:	f00d fc91 	bl	8017fb0 <traceIF_itmPrint>
 800a68e:	480a      	ldr	r0, [pc, #40]	; (800a6b8 <fCmdBuild_AT_AND_D+0x48>)
 800a690:	f00d fc50 	bl	8017f34 <crs_strlen>
 800a694:	4a08      	ldr	r2, [pc, #32]	; (800a6b8 <fCmdBuild_AT_AND_D+0x48>)
 800a696:	b283      	uxth	r3, r0
 800a698:	2104      	movs	r1, #4
 800a69a:	2001      	movs	r0, #1
 800a69c:	f00d feae 	bl	80183fc <traceIF_uartPrint>

	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800a6a0:	8923      	ldrh	r3, [r4, #8]
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d104      	bne.n	800a6b0 <fCmdBuild_AT_AND_D+0x40>
		/* Set DTR function mode  (cf V.25ter)
		 * hard-coded to 0
		 */
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params, "0");
 800a6a6:	4905      	ldr	r1, [pc, #20]	; (800a6bc <fCmdBuild_AT_AND_D+0x4c>)
 800a6a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a6ac:	f012 fc74 	bl	801cf98 <strcpy>
	}

	return (retval);
}
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	bd10      	pop	{r4, pc}
 800a6b4:	08024ec9 	.word	0x08024ec9
 800a6b8:	20008ef8 	.word	0x20008ef8
 800a6bc:	08024e97 	.word	0x08024e97

0800a6c0 <fCmdBuild_CPSMS>:


at_status_t fCmdBuild_CPSMS(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	b08e      	sub	sp, #56	; 0x38
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CPSMS()")
 800a6c6:	4847      	ldr	r0, [pc, #284]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
		atcustom_modem_context_t *p_modem_ctxt) {
 800a6c8:	460d      	mov	r5, r1
	PRINT_API("enter fCmdBuild_CPSMS()")
 800a6ca:	4947      	ldr	r1, [pc, #284]	; (800a7e8 <fCmdBuild_CPSMS+0x128>)
 800a6cc:	f012 fc64 	bl	801cf98 <strcpy>
 800a6d0:	4844      	ldr	r0, [pc, #272]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a6d2:	f00d fc2f 	bl	8017f34 <crs_strlen>
 800a6d6:	4a43      	ldr	r2, [pc, #268]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a6d8:	b283      	uxth	r3, r0
 800a6da:	2104      	movs	r1, #4
 800a6dc:	2001      	movs	r0, #1
 800a6de:	f00d fc67 	bl	8017fb0 <traceIF_itmPrint>
 800a6e2:	4840      	ldr	r0, [pc, #256]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a6e4:	f00d fc26 	bl	8017f34 <crs_strlen>
 800a6e8:	4a3e      	ldr	r2, [pc, #248]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a6ea:	b283      	uxth	r3, r0
 800a6ec:	2104      	movs	r1, #4
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f00d fe84 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a6f4:	8923      	ldrh	r3, [r4, #8]
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d15c      	bne.n	800a7b4 <fCmdBuild_CPSMS+0xf4>

		/* buffers used to convert values to binary string (size = number of bits + 1 for end string character) */
		CS_PSM_params_t *p_psm_params =
				&(p_modem_ctxt->SID_ctxt.set_power_config.psm);
		uint8_t mode;
		uint8_t req_periodic_rau[9] = { 0U };
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
		uint8_t req_gprs_ready_time[9] = { 0U };
 800a700:	e9cd 3305 	strd	r3, r3, [sp, #20]
		uint8_t req_periodic_tau[9] = { 0U };
 800a704:	e9cd 3308 	strd	r3, r3, [sp, #32]
		uint8_t req_active_time[9] = { 0U };
 800a708:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
		uint8_t req_periodic_rau[9] = { 0U };
 800a70c:	f88d 3010 	strb.w	r3, [sp, #16]
		uint8_t req_gprs_ready_time[9] = { 0U };
 800a710:	f88d 301c 	strb.w	r3, [sp, #28]
		uint8_t req_periodic_tau[9] = { 0U };
 800a714:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		uint8_t req_active_time[9] = { 0U };
 800a718:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34

		(void) ATutil_convert_uint8_to_binary_string(
 800a71c:	2209      	movs	r2, #9
 800a71e:	ab02      	add	r3, sp, #8
 800a720:	2108      	movs	r1, #8
 800a722:	f895 073a 	ldrb.w	r0, [r5, #1850]	; 0x73a
 800a726:	f004 f877 	bl	800e818 <ATutil_convert_uint8_to_binary_string>
				(uint32_t) p_psm_params->req_periodic_RAU, (uint8_t) 8U,
				(uint8_t) sizeof(req_periodic_rau), &req_periodic_rau[0]);
		(void) ATutil_convert_uint8_to_binary_string(
 800a72a:	ab05      	add	r3, sp, #20
 800a72c:	2209      	movs	r2, #9
 800a72e:	2108      	movs	r1, #8
 800a730:	f895 073b 	ldrb.w	r0, [r5, #1851]	; 0x73b
 800a734:	f004 f870 	bl	800e818 <ATutil_convert_uint8_to_binary_string>
				(uint32_t) p_psm_params->req_GPRS_READY_timer, (uint8_t) 8U,
				(uint8_t) sizeof(req_gprs_ready_time), &req_gprs_ready_time[0]);
		(void) ATutil_convert_uint8_to_binary_string(
				(uint32_t) p_psm_params->req_periodic_TAU, (uint8_t) 8U,
				(uint8_t) sizeof(req_periodic_tau), &req_periodic_tau[0]);
		(void) ATutil_convert_uint8_to_binary_string(
 800a738:	ae0b      	add	r6, sp, #44	; 0x2c
		(void) ATutil_convert_uint8_to_binary_string(
 800a73a:	ab08      	add	r3, sp, #32
 800a73c:	2209      	movs	r2, #9
 800a73e:	2108      	movs	r1, #8
 800a740:	f895 073c 	ldrb.w	r0, [r5, #1852]	; 0x73c
 800a744:	f004 f868 	bl	800e818 <ATutil_convert_uint8_to_binary_string>
		(void) ATutil_convert_uint8_to_binary_string(
 800a748:	4633      	mov	r3, r6
 800a74a:	f895 073d 	ldrb.w	r0, [r5, #1853]	; 0x73d
 800a74e:	2209      	movs	r2, #9
 800a750:	2108      	movs	r1, #8
 800a752:	f004 f861 	bl	800e818 <ATutil_convert_uint8_to_binary_string>
				(uint32_t) p_psm_params->req_active_time, (uint8_t) 8U,
				(uint8_t) sizeof(req_active_time), &req_active_time[0]);

		if (p_modem_ctxt->SID_ctxt.set_power_config.psm_present == CELLULAR_TRUE) {
 800a756:	f895 3737 	ldrb.w	r3, [r5, #1847]	; 0x737
 800a75a:	b18b      	cbz	r3, 800a780 <fCmdBuild_CPSMS+0xc0>
			if (p_modem_ctxt->SID_ctxt.set_power_config.psm_mode
 800a75c:	f895 2739 	ldrb.w	r2, [r5, #1849]	; 0x739
 800a760:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a764:	b92a      	cbnz	r2, 800a772 <fCmdBuild_CPSMS+0xb2>
					== PSM_MODE_DISABLE) {
				/* PSM disabled */
				mode = 0U;

				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a766:	4921      	ldr	r1, [pc, #132]	; (800a7ec <fCmdBuild_CPSMS+0x12c>)
 800a768:	f012 fba6 	bl	801ceb8 <sprintf>
	at_status_t retval = ATSTATUS_OK;
 800a76c:	2000      	movs	r0, #0
		PRINT_ERR("invalid pointer to PSM parameters")
		retval = ATSTATUS_ERROR;
	}

	return (retval);
}
 800a76e:	b00e      	add	sp, #56	; 0x38
 800a770:	bd70      	pop	{r4, r5, r6, pc}
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a772:	491f      	ldr	r1, [pc, #124]	; (800a7f0 <fCmdBuild_CPSMS+0x130>)
 800a774:	9600      	str	r6, [sp, #0]
 800a776:	ab08      	add	r3, sp, #32
 800a778:	2201      	movs	r2, #1
 800a77a:	f012 fb9d 	bl	801ceb8 <sprintf>
 800a77e:	e7f5      	b.n	800a76c <fCmdBuild_CPSMS+0xac>
			PRINT_INFO("No PSM parameters available, command skipped")
 800a780:	491c      	ldr	r1, [pc, #112]	; (800a7f4 <fCmdBuild_CPSMS+0x134>)
 800a782:	4818      	ldr	r0, [pc, #96]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a784:	f012 fc08 	bl	801cf98 <strcpy>
 800a788:	4816      	ldr	r0, [pc, #88]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a78a:	f00d fbd3 	bl	8017f34 <crs_strlen>
 800a78e:	2101      	movs	r1, #1
 800a790:	b283      	uxth	r3, r0
 800a792:	4a14      	ldr	r2, [pc, #80]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a794:	4608      	mov	r0, r1
 800a796:	f00d fc0b 	bl	8017fb0 <traceIF_itmPrint>
 800a79a:	4812      	ldr	r0, [pc, #72]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a79c:	f00d fbca 	bl	8017f34 <crs_strlen>
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	b283      	uxth	r3, r0
 800a7a4:	4a0f      	ldr	r2, [pc, #60]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	f00d fe28 	bl	80183fc <traceIF_uartPrint>
			atcm_program_SKIP_CMD(p_atp_ctxt);
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f7fd ffcb 	bl	8008748 <atcm_program_SKIP_CMD>
 800a7b2:	e7db      	b.n	800a76c <fCmdBuild_CPSMS+0xac>
		PRINT_ERR("invalid pointer to PSM parameters")
 800a7b4:	4910      	ldr	r1, [pc, #64]	; (800a7f8 <fCmdBuild_CPSMS+0x138>)
 800a7b6:	480b      	ldr	r0, [pc, #44]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7b8:	f012 fbee 	bl	801cf98 <strcpy>
 800a7bc:	4809      	ldr	r0, [pc, #36]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7be:	f00d fbb9 	bl	8017f34 <crs_strlen>
 800a7c2:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7c4:	b283      	uxth	r3, r0
 800a7c6:	2110      	movs	r1, #16
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f00d fbf1 	bl	8017fb0 <traceIF_itmPrint>
 800a7ce:	4805      	ldr	r0, [pc, #20]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7d0:	f00d fbb0 	bl	8017f34 <crs_strlen>
 800a7d4:	4a03      	ldr	r2, [pc, #12]	; (800a7e4 <fCmdBuild_CPSMS+0x124>)
 800a7d6:	b283      	uxth	r3, r0
 800a7d8:	2110      	movs	r1, #16
 800a7da:	2001      	movs	r0, #1
 800a7dc:	f00d fe0e 	bl	80183fc <traceIF_uartPrint>
		retval = ATSTATUS_ERROR;
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	e7c4      	b.n	800a76e <fCmdBuild_CPSMS+0xae>
 800a7e4:	20008ef8 	.word	0x20008ef8
 800a7e8:	08024ef3 	.word	0x08024ef3
 800a7ec:	08024dac 	.word	0x08024dac
 800a7f0:	08024f1a 	.word	0x08024f1a
 800a7f4:	08024f29 	.word	0x08024f29
 800a7f8:	08024f61 	.word	0x08024f61

0800a7fc <fCmdBuild_CEDRXS>:

at_status_t fCmdBuild_CEDRXS(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a7fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a7fe:	4604      	mov	r4, r0
 800a800:	460e      	mov	r6, r1
	UNUSED(p_modem_ctxt);

	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CEDRXS()")
 800a802:	4839      	ldr	r0, [pc, #228]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a804:	4939      	ldr	r1, [pc, #228]	; (800a8ec <fCmdBuild_CEDRXS+0xf0>)
 800a806:	f012 fbc7 	bl	801cf98 <strcpy>
 800a80a:	4837      	ldr	r0, [pc, #220]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a80c:	f00d fb92 	bl	8017f34 <crs_strlen>
 800a810:	4a35      	ldr	r2, [pc, #212]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a812:	b283      	uxth	r3, r0
 800a814:	2104      	movs	r1, #4
 800a816:	2001      	movs	r0, #1
 800a818:	f00d fbca 	bl	8017fb0 <traceIF_itmPrint>
 800a81c:	4832      	ldr	r0, [pc, #200]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a81e:	f00d fb89 	bl	8017f34 <crs_strlen>
 800a822:	4a31      	ldr	r2, [pc, #196]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a824:	b283      	uxth	r3, r0
 800a826:	2104      	movs	r1, #4
 800a828:	2001      	movs	r0, #1
 800a82a:	f00d fde7 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a82e:	8923      	ldrh	r3, [r4, #8]
 800a830:	2b03      	cmp	r3, #3
 800a832:	d141      	bne.n	800a8b8 <fCmdBuild_CEDRXS+0xbc>
		 * exple:
		 * AT+CEDRX=1,5,�0000�
		 * Set the requested e-I-DRX value to 5.12 second
		 */

		if (p_modem_ctxt->SID_ctxt.set_power_config.edrx_present
 800a834:	f896 5738 	ldrb.w	r5, [r6, #1848]	; 0x738
 800a838:	b325      	cbz	r5, 800a884 <fCmdBuild_CEDRXS+0x88>
				== CELLULAR_TRUE) {
			uint8_t edrx_req_value[5] = { 0 };
 800a83a:	2300      	movs	r3, #0
			(void) ATutil_convert_uint8_to_binary_string(
 800a83c:	ad02      	add	r5, sp, #8
			uint8_t edrx_req_value[5] = { 0 };
 800a83e:	9302      	str	r3, [sp, #8]
 800a840:	f88d 300c 	strb.w	r3, [sp, #12]
			(void) ATutil_convert_uint8_to_binary_string(
 800a844:	2205      	movs	r2, #5
 800a846:	f896 0740 	ldrb.w	r0, [r6, #1856]	; 0x740
 800a84a:	462b      	mov	r3, r5
 800a84c:	2104      	movs	r1, #4
 800a84e:	f003 ffe3 	bl	800e818 <ATutil_convert_uint8_to_binary_string>
					(uint32_t) p_modem_ctxt->SID_ctxt.set_power_config.edrx.req_value,
					(uint8_t) 4U, (uint8_t) sizeof(edrx_req_value),
					&edrx_req_value[0]);

			if (p_modem_ctxt->SID_ctxt.set_power_config.edrx_mode
 800a852:	f896 273e 	ldrb.w	r2, [r6, #1854]	; 0x73e
 800a856:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a85a:	b92a      	cbnz	r2, 800a868 <fCmdBuild_CEDRXS+0x6c>
					== EDRX_MODE_DISABLE) {
				/* eDRX disabled */
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a85c:	4924      	ldr	r1, [pc, #144]	; (800a8f0 <fCmdBuild_CEDRXS+0xf4>)
						"0");
			} else if (p_modem_ctxt->SID_ctxt.set_power_config.edrx_mode
					== EDRX_MODE_DISABLE_AND_RESET) {
				/* eDRX disabled */
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a85e:	f012 fb9b 	bl	801cf98 <strcpy>
	at_status_t retval = ATSTATUS_OK;
 800a862:	2000      	movs	r0, #0
		PRINT_ERR("invalid pointer to EDRX parameters")
		retval = ATSTATUS_ERROR;
	}

	return (retval);
}
 800a864:	b004      	add	sp, #16
 800a866:	bd70      	pop	{r4, r5, r6, pc}
			} else if (p_modem_ctxt->SID_ctxt.set_power_config.edrx_mode
 800a868:	2a03      	cmp	r2, #3
 800a86a:	d101      	bne.n	800a870 <fCmdBuild_CEDRXS+0x74>
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a86c:	4921      	ldr	r1, [pc, #132]	; (800a8f4 <fCmdBuild_CEDRXS+0xf8>)
 800a86e:	e7f6      	b.n	800a85e <fCmdBuild_CEDRXS+0x62>
				edrx_mode =
 800a870:	2a02      	cmp	r2, #2
				(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a872:	f896 373f 	ldrb.w	r3, [r6, #1855]	; 0x73f
 800a876:	4920      	ldr	r1, [pc, #128]	; (800a8f8 <fCmdBuild_CEDRXS+0xfc>)
 800a878:	9500      	str	r5, [sp, #0]
 800a87a:	bf18      	it	ne
 800a87c:	2201      	movne	r2, #1
 800a87e:	f012 fb1b 	bl	801ceb8 <sprintf>
 800a882:	e7ee      	b.n	800a862 <fCmdBuild_CEDRXS+0x66>
			PRINT_INFO("No EDRX parameters available, command skipped")
 800a884:	491d      	ldr	r1, [pc, #116]	; (800a8fc <fCmdBuild_CEDRXS+0x100>)
 800a886:	4818      	ldr	r0, [pc, #96]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a888:	f012 fb86 	bl	801cf98 <strcpy>
 800a88c:	4816      	ldr	r0, [pc, #88]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a88e:	f00d fb51 	bl	8017f34 <crs_strlen>
 800a892:	2101      	movs	r1, #1
 800a894:	b283      	uxth	r3, r0
 800a896:	4a14      	ldr	r2, [pc, #80]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a898:	4608      	mov	r0, r1
 800a89a:	f00d fb89 	bl	8017fb0 <traceIF_itmPrint>
 800a89e:	4812      	ldr	r0, [pc, #72]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8a0:	f00d fb48 	bl	8017f34 <crs_strlen>
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	b283      	uxth	r3, r0
 800a8a8:	4a0f      	ldr	r2, [pc, #60]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8aa:	4608      	mov	r0, r1
 800a8ac:	f00d fda6 	bl	80183fc <traceIF_uartPrint>
			atcm_program_SKIP_CMD(p_atp_ctxt);
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7fd ff49 	bl	8008748 <atcm_program_SKIP_CMD>
 800a8b6:	e7d4      	b.n	800a862 <fCmdBuild_CEDRXS+0x66>
		PRINT_ERR("invalid pointer to EDRX parameters")
 800a8b8:	4911      	ldr	r1, [pc, #68]	; (800a900 <fCmdBuild_CEDRXS+0x104>)
 800a8ba:	480b      	ldr	r0, [pc, #44]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8bc:	f012 fb6c 	bl	801cf98 <strcpy>
 800a8c0:	4809      	ldr	r0, [pc, #36]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8c2:	f00d fb37 	bl	8017f34 <crs_strlen>
 800a8c6:	4a08      	ldr	r2, [pc, #32]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8c8:	b283      	uxth	r3, r0
 800a8ca:	2110      	movs	r1, #16
 800a8cc:	2001      	movs	r0, #1
 800a8ce:	f00d fb6f 	bl	8017fb0 <traceIF_itmPrint>
 800a8d2:	4805      	ldr	r0, [pc, #20]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8d4:	f00d fb2e 	bl	8017f34 <crs_strlen>
 800a8d8:	4a03      	ldr	r2, [pc, #12]	; (800a8e8 <fCmdBuild_CEDRXS+0xec>)
 800a8da:	b283      	uxth	r3, r0
 800a8dc:	2110      	movs	r1, #16
 800a8de:	2001      	movs	r0, #1
 800a8e0:	f00d fd8c 	bl	80183fc <traceIF_uartPrint>
		retval = ATSTATUS_ERROR;
 800a8e4:	2001      	movs	r0, #1
 800a8e6:	e7bd      	b.n	800a864 <fCmdBuild_CEDRXS+0x68>
 800a8e8:	20008ef8 	.word	0x20008ef8
 800a8ec:	08024f94 	.word	0x08024f94
 800a8f0:	08024e97 	.word	0x08024e97
 800a8f4:	08029d2f 	.word	0x08029d2f
 800a8f8:	08024b28 	.word	0x08024b28
 800a8fc:	08024fbc 	.word	0x08024fbc
 800a900:	08024ff5 	.word	0x08024ff5

0800a904 <fCmdBuild_CSIM>:

at_status_t fCmdBuild_CSIM(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_CSIM()")
 800a90a:	4814      	ldr	r0, [pc, #80]	; (800a95c <fCmdBuild_CSIM+0x58>)
 800a90c:	4914      	ldr	r1, [pc, #80]	; (800a960 <fCmdBuild_CSIM+0x5c>)
 800a90e:	f012 fb43 	bl	801cf98 <strcpy>
 800a912:	4812      	ldr	r0, [pc, #72]	; (800a95c <fCmdBuild_CSIM+0x58>)
 800a914:	f00d fb0e 	bl	8017f34 <crs_strlen>
 800a918:	4a10      	ldr	r2, [pc, #64]	; (800a95c <fCmdBuild_CSIM+0x58>)
 800a91a:	b283      	uxth	r3, r0
 800a91c:	2104      	movs	r1, #4
 800a91e:	2001      	movs	r0, #1
 800a920:	f00d fb46 	bl	8017fb0 <traceIF_itmPrint>
 800a924:	480d      	ldr	r0, [pc, #52]	; (800a95c <fCmdBuild_CSIM+0x58>)
 800a926:	f00d fb05 	bl	8017f34 <crs_strlen>
 800a92a:	4a0c      	ldr	r2, [pc, #48]	; (800a95c <fCmdBuild_CSIM+0x58>)
 800a92c:	b283      	uxth	r3, r0
 800a92e:	2104      	movs	r1, #4
 800a930:	2001      	movs	r0, #1
 800a932:	f00d fd63 	bl	80183fc <traceIF_uartPrint>

	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800a936:	8923      	ldrh	r3, [r4, #8]
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d10b      	bne.n	800a954 <fCmdBuild_CSIM+0x50>
		 * AT+CSIM=AT+CSIM=24,"00A4040C07A0000000871002"
		 * Send the command under ""
		 */
		uint16_t length;
		length =
				(uint16_t) p_modem_ctxt->SID_ctxt.sim_generic_access.data->cmd_str_size;
 800a93c:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a940:	4908      	ldr	r1, [pc, #32]	; (800a964 <fCmdBuild_CSIM+0x60>)
				(uint16_t) p_modem_ctxt->SID_ctxt.sim_generic_access.data->cmd_str_size;
 800a942:	689a      	ldr	r2, [r3, #8]
		(void) sprintf((CRC_CHAR_t*) p_atp_ctxt->current_atcmd.params,
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a94c:	b213      	sxth	r3, r2
 800a94e:	b292      	uxth	r2, r2
 800a950:	f012 fab2 	bl	801ceb8 <sprintf>
				"%d,\"%.*s\"", length, (int16_t) length,
				(const CS_CHAR_t*) p_modem_ctxt->SID_ctxt.sim_generic_access.data->p_cmd_str);
	}

	return (retval);
}
 800a954:	2000      	movs	r0, #0
 800a956:	b003      	add	sp, #12
 800a958:	bd30      	pop	{r4, r5, pc}
 800a95a:	bf00      	nop
 800a95c:	20008ef8 	.word	0x20008ef8
 800a960:	08025029 	.word	0x08025029
 800a964:	0802504f 	.word	0x0802504f

0800a968 <fCmdBuild_DIRECT_CMD>:

at_status_t fCmdBuild_DIRECT_CMD(atparser_context_t *p_atp_ctxt,
		atcustom_modem_context_t *p_modem_ctxt) {
 800a968:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	460d      	mov	r5, r1
	at_status_t retval = ATSTATUS_OK;
	PRINT_API("enter fCmdBuild_DIRECT_CMD()")
 800a96e:	4827      	ldr	r0, [pc, #156]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a970:	4927      	ldr	r1, [pc, #156]	; (800aa10 <fCmdBuild_DIRECT_CMD+0xa8>)
 800a972:	f012 fb11 	bl	801cf98 <strcpy>
 800a976:	4825      	ldr	r0, [pc, #148]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a978:	f00d fadc 	bl	8017f34 <crs_strlen>
 800a97c:	4a23      	ldr	r2, [pc, #140]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a97e:	b283      	uxth	r3, r0
 800a980:	2104      	movs	r1, #4
 800a982:	2001      	movs	r0, #1
 800a984:	f00d fb14 	bl	8017fb0 <traceIF_itmPrint>
 800a988:	4820      	ldr	r0, [pc, #128]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a98a:	f00d fad3 	bl	8017f34 <crs_strlen>
 800a98e:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a990:	b283      	uxth	r3, r0
 800a992:	2104      	movs	r1, #4
 800a994:	2001      	movs	r0, #1
 800a996:	f00d fd31 	bl	80183fc <traceIF_uartPrint>

	/* only for RAW command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_RAW_CMD) {
 800a99a:	8923      	ldrh	r3, [r4, #8]
 800a99c:	2b06      	cmp	r3, #6
 800a99e:	d11a      	bne.n	800a9d6 <fCmdBuild_DIRECT_CMD+0x6e>
		if (p_modem_ctxt->SID_ctxt.direct_cmd_tx->cmd_size != 0U) {
 800a9a0:	f8d5 172c 	ldr.w	r1, [r5, #1836]	; 0x72c
 800a9a4:	f8b1 5076 	ldrh.w	r5, [r1, #118]	; 0x76
 800a9a8:	b1bd      	cbz	r5, 800a9da <fCmdBuild_DIRECT_CMD+0x72>
			uint32_t str_size = p_modem_ctxt->SID_ctxt.direct_cmd_tx->cmd_size;
			(void) memcpy((void*) p_atp_ctxt->current_atcmd.params,
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800a9b0:	f012 fa44 	bl	801ce3c <memcpy>
					(const CS_CHAR_t*) p_modem_ctxt->SID_ctxt.direct_cmd_tx->cmd_str,
					str_size);

			/* add termination characters */
			uint32_t endstr_size = strlen((CRC_CHAR_t*) &p_atp_ctxt->endstr);
 800a9b4:	f204 6174 	addw	r1, r4, #1652	; 0x674
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	9101      	str	r1, [sp, #4]
 800a9bc:	f7f5 fc2a 	bl	8000214 <strlen>
 800a9c0:	4606      	mov	r6, r0
			(void) memcpy((void*) &p_atp_ctxt->current_atcmd.params[str_size],
 800a9c2:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800a9c6:	9901      	ldr	r1, [sp, #4]
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	4420      	add	r0, r4
					p_atp_ctxt->endstr, endstr_size);

			/* set raw command size */
			p_atp_ctxt->current_atcmd.raw_cmd_size = str_size + endstr_size;
 800a9cc:	4435      	add	r5, r6
			(void) memcpy((void*) &p_atp_ctxt->current_atcmd.params[str_size],
 800a9ce:	f012 fa35 	bl	801ce3c <memcpy>
			p_atp_ctxt->current_atcmd.raw_cmd_size = str_size + endstr_size;
 800a9d2:	f8c4 5670 	str.w	r5, [r4, #1648]	; 0x670
	at_status_t retval = ATSTATUS_OK;
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	e016      	b.n	800aa08 <fCmdBuild_DIRECT_CMD+0xa0>
		} else {
			PRINT_ERR("ERROR, send buffer is empty")
 800a9da:	490e      	ldr	r1, [pc, #56]	; (800aa14 <fCmdBuild_DIRECT_CMD+0xac>)
 800a9dc:	480b      	ldr	r0, [pc, #44]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a9de:	f012 fadb 	bl	801cf98 <strcpy>
 800a9e2:	480a      	ldr	r0, [pc, #40]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a9e4:	f00d faa6 	bl	8017f34 <crs_strlen>
 800a9e8:	4a08      	ldr	r2, [pc, #32]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a9ea:	b283      	uxth	r3, r0
 800a9ec:	2110      	movs	r1, #16
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f00d fade 	bl	8017fb0 <traceIF_itmPrint>
 800a9f4:	4805      	ldr	r0, [pc, #20]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a9f6:	f00d fa9d 	bl	8017f34 <crs_strlen>
 800a9fa:	4a04      	ldr	r2, [pc, #16]	; (800aa0c <fCmdBuild_DIRECT_CMD+0xa4>)
 800a9fc:	b283      	uxth	r3, r0
 800a9fe:	2110      	movs	r1, #16
 800aa00:	2001      	movs	r0, #1
 800aa02:	f00d fcfb 	bl	80183fc <traceIF_uartPrint>
			retval = ATSTATUS_ERROR;
 800aa06:	2001      	movs	r0, #1
		}
	}
	return (retval);
}
 800aa08:	b002      	add	sp, #8
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}
 800aa0c:	20008ef8 	.word	0x20008ef8
 800aa10:	08025059 	.word	0x08025059
 800aa14:	08025085 	.word	0x08025085

0800aa18 <fRspAnalyze_None>:

/* ==========================  Analyze 3GPP TS 27.007 commands ========================== */
at_action_rsp_t fRspAnalyze_None(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800aa18:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);
	UNUSED(p_msg_in);
	UNUSED(element_infos);

	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_None()")
 800aa1a:	4c0c      	ldr	r4, [pc, #48]	; (800aa4c <fRspAnalyze_None+0x34>)
 800aa1c:	490c      	ldr	r1, [pc, #48]	; (800aa50 <fRspAnalyze_None+0x38>)
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f012 faba 	bl	801cf98 <strcpy>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f00d fa85 	bl	8017f34 <crs_strlen>
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	b283      	uxth	r3, r0
 800aa2e:	2104      	movs	r1, #4
 800aa30:	2001      	movs	r0, #1
 800aa32:	f00d fabd 	bl	8017fb0 <traceIF_itmPrint>
 800aa36:	4620      	mov	r0, r4
 800aa38:	f00d fa7c 	bl	8017f34 <crs_strlen>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	b283      	uxth	r3, r0
 800aa40:	2104      	movs	r1, #4
 800aa42:	2001      	movs	r0, #1
 800aa44:	f00d fcda 	bl	80183fc <traceIF_uartPrint>

	/* no parameters expected */

	return (retval);
}
 800aa48:	2010      	movs	r0, #16
 800aa4a:	bd10      	pop	{r4, pc}
 800aa4c:	20008ef8 	.word	0x20008ef8
 800aa50:	080250b2 	.word	0x080250b2

0800aa54 <fRspAnalyze_CmeErr>:
	return (retval);
}

at_action_rsp_t fRspAnalyze_CmeErr(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa58:	4680      	mov	r8, r0
 800aa5a:	b08b      	sub	sp, #44	; 0x2c
	const atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	/*UNUSED(p_msg_in);*/
	/*UNUSED(element_infos);*/

	at_action_rsp_t retval = ATACTION_RSP_ERROR;
	PRINT_API("enter fRspAnalyze_CmeErr()")
 800aa5c:	48ac      	ldr	r0, [pc, #688]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
				PRINT_DBG("CME ERROR parameter received:")
 800aa5e:	f8df a300 	ldr.w	sl, [pc, #768]	; 800ad60 <fRspAnalyze_CmeErr+0x30c>
 800aa62:	4dab      	ldr	r5, [pc, #684]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
				if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800aa64:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 800ad64 <fRspAnalyze_CmeErr+0x310>
		at_element_info_t *element_infos) {
 800aa68:	460c      	mov	r4, r1
	PRINT_API("enter fRspAnalyze_CmeErr()")
 800aa6a:	49aa      	ldr	r1, [pc, #680]	; (800ad14 <fRspAnalyze_CmeErr+0x2c0>)
		at_element_info_t *element_infos) {
 800aa6c:	4617      	mov	r7, r2
 800aa6e:	461e      	mov	r6, r3
	PRINT_API("enter fRspAnalyze_CmeErr()")
 800aa70:	f012 fa92 	bl	801cf98 <strcpy>
 800aa74:	48a6      	ldr	r0, [pc, #664]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aa76:	f00d fa5d 	bl	8017f34 <crs_strlen>
 800aa7a:	4aa5      	ldr	r2, [pc, #660]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aa7c:	b283      	uxth	r3, r0
 800aa7e:	2104      	movs	r1, #4
 800aa80:	2001      	movs	r0, #1
 800aa82:	f00d fa95 	bl	8017fb0 <traceIF_itmPrint>
 800aa86:	48a2      	ldr	r0, [pc, #648]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aa88:	f00d fa54 	bl	8017f34 <crs_strlen>
 800aa8c:	4aa0      	ldr	r2, [pc, #640]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aa8e:	b283      	uxth	r3, r0
 800aa90:	2104      	movs	r1, #4
 800aa92:	2001      	movs	r0, #1
 800aa94:	f00d fcb2 	bl	80183fc <traceIF_uartPrint>
	PRINT_API("enter analyze_CmeError()")
 800aa98:	499f      	ldr	r1, [pc, #636]	; (800ad18 <fRspAnalyze_CmeErr+0x2c4>)
 800aa9a:	489d      	ldr	r0, [pc, #628]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aa9c:	f012 fa7c 	bl	801cf98 <strcpy>
 800aaa0:	489b      	ldr	r0, [pc, #620]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aaa2:	f00d fa47 	bl	8017f34 <crs_strlen>
 800aaa6:	4a9a      	ldr	r2, [pc, #616]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aaa8:	b283      	uxth	r3, r0
 800aaaa:	2104      	movs	r1, #4
 800aaac:	2001      	movs	r0, #1
 800aaae:	f00d fa7f 	bl	8017fb0 <traceIF_itmPrint>
 800aab2:	4897      	ldr	r0, [pc, #604]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aab4:	f00d fa3e 	bl	8017f34 <crs_strlen>
 800aab8:	4a95      	ldr	r2, [pc, #596]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aaba:	b283      	uxth	r3, r0
 800aabc:	2104      	movs	r1, #4
 800aabe:	2001      	movs	r0, #1
 800aac0:	f00d fc9c 	bl	80183fc <traceIF_uartPrint>
	START_PARAM_LOOP()
 800aac4:	4632      	mov	r2, r6
 800aac6:	4639      	mov	r1, r7
 800aac8:	4640      	mov	r0, r8
 800aaca:	f7fd fb4f 	bl	800816c <atcc_extractElement>
 800aace:	89f3      	ldrh	r3, [r6, #14]
 800aad0:	9001      	str	r0, [sp, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d041      	beq.n	800ab5a <fRspAnalyze_CmeErr+0x106>
			if (element_infos->param_rank == 2U) {
 800aad6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800aada:	f1b9 0f02 	cmp.w	r9, #2
 800aade:	d13c      	bne.n	800ab5a <fRspAnalyze_CmeErr+0x106>
				AT_CHAR_t line[32] = { 0U };
 800aae0:	221c      	movs	r2, #28
 800aae2:	2100      	movs	r1, #0
 800aae4:	a803      	add	r0, sp, #12
 800aae6:	9102      	str	r1, [sp, #8]
 800aae8:	f012 f9b6 	bl	801ce58 <memset>
				PRINT_DBG("CME ERROR parameter received:")
 800aaec:	4651      	mov	r1, sl
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f012 fa52 	bl	801cf98 <strcpy>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f00d fa1d 	bl	8017f34 <crs_strlen>
 800aafa:	462a      	mov	r2, r5
 800aafc:	b283      	uxth	r3, r0
 800aafe:	4649      	mov	r1, r9
 800ab00:	2001      	movs	r0, #1
 800ab02:	f00d fa55 	bl	8017fb0 <traceIF_itmPrint>
 800ab06:	4628      	mov	r0, r5
 800ab08:	f00d fa14 	bl	8017f34 <crs_strlen>
 800ab0c:	462a      	mov	r2, r5
 800ab0e:	b283      	uxth	r3, r0
 800ab10:	4649      	mov	r1, r9
 800ab12:	2001      	movs	r0, #1
 800ab14:	f00d fc72 	bl	80183fc <traceIF_uartPrint>
				PRINT_BUF(
 800ab18:	8972      	ldrh	r2, [r6, #10]
 800ab1a:	89f3      	ldrh	r3, [r6, #14]
 800ab1c:	443a      	add	r2, r7
 800ab1e:	4649      	mov	r1, r9
 800ab20:	2001      	movs	r0, #1
 800ab22:	f00d fc89 	bl	8018438 <traceIF_BufCharPrint>
				if (element_infos->str_size <= 32U) {
 800ab26:	89f2      	ldrh	r2, [r6, #14]
 800ab28:	2a20      	cmp	r2, #32
 800ab2a:	d830      	bhi.n	800ab8e <fRspAnalyze_CmeErr+0x13a>
							(const void*) &(p_msg_in->buffer[element_infos->str_start_idx]),
 800ab2c:	8971      	ldrh	r1, [r6, #10]
					(void) memcpy((void*) &line[0],
 800ab2e:	a802      	add	r0, sp, #8
 800ab30:	4439      	add	r1, r7
 800ab32:	f012 f983 	bl	801ce3c <memcpy>
				ATutil_convertStringToUpperCase(&line[0], 32U);
 800ab36:	2120      	movs	r1, #32
 800ab38:	a802      	add	r0, sp, #8
 800ab3a:	f003 fe5e 	bl	800e7fa <ATutil_convertStringToUpperCase>
				if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800ab3e:	4659      	mov	r1, fp
 800ab40:	a802      	add	r0, sp, #8
 800ab42:	f012 fa56 	bl	801cff2 <strstr>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d038      	beq.n	800abbc <fRspAnalyze_CmeErr+0x168>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ab4a:	f44f 7300 	mov.w	r3, #512	; 0x200
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ab4e:	f8a4 351a 	strh.w	r3, [r4, #1306]	; 0x51a
					atcm_set_error_report(CSERR_SIM, p_modem_ctxt);
 800ab52:	4621      	mov	r1, r4
 800ab54:	2001      	movs	r0, #1
 800ab56:	f7ff f809 	bl	8009b6c <atcm_set_error_report>
			}END_PARAM_LOOP()
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d0b1      	beq.n	800aac4 <fRspAnalyze_CmeErr+0x70>

	/* Analyze CME error to report it to upper layers */
	(void) analyze_CmeError(p_at_ctxt, p_modem_ctxt, p_msg_in, element_infos);

	/* specific treatments for +CME ERROR, depending of current command */
	switch (p_atp_ctxt->current_atcmd.id) {
 800ab60:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800ab64:	2a15      	cmp	r2, #21
 800ab66:	d871      	bhi.n	800ac4c <fRspAnalyze_CmeErr+0x1f8>
 800ab68:	2a0a      	cmp	r2, #10
 800ab6a:	d972      	bls.n	800ac52 <fRspAnalyze_CmeErr+0x1fe>
 800ab6c:	f1a2 030b 	sub.w	r3, r2, #11
 800ab70:	2b0a      	cmp	r3, #10
 800ab72:	d86e      	bhi.n	800ac52 <fRspAnalyze_CmeErr+0x1fe>
 800ab74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ab78:	011300f8 	.word	0x011300f8
 800ab7c:	00720115 	.word	0x00720115
 800ab80:	006d00c9 	.word	0x006d00c9
 800ab84:	011b006d 	.word	0x011b006d
 800ab88:	006d006d 	.word	0x006d006d
 800ab8c:	0117      	.short	0x0117
					PRINT_ERR("line exceed maximum size, line ignored...")
 800ab8e:	4963      	ldr	r1, [pc, #396]	; (800ad1c <fRspAnalyze_CmeErr+0x2c8>)
 800ab90:	4628      	mov	r0, r5
 800ab92:	f012 fa01 	bl	801cf98 <strcpy>
 800ab96:	4628      	mov	r0, r5
 800ab98:	f00d f9cc 	bl	8017f34 <crs_strlen>
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	b283      	uxth	r3, r0
 800aba0:	2110      	movs	r1, #16
 800aba2:	2001      	movs	r0, #1
 800aba4:	f00d fa04 	bl	8017fb0 <traceIF_itmPrint>
 800aba8:	4628      	mov	r0, r5
 800abaa:	f00d f9c3 	bl	8017f34 <crs_strlen>
 800abae:	462a      	mov	r2, r5
 800abb0:	b283      	uxth	r3, r0
 800abb2:	2110      	movs	r1, #16
 800abb4:	2001      	movs	r0, #1
 800abb6:	f00d fc21 	bl	80183fc <traceIF_uartPrint>
 800abba:	e7bc      	b.n	800ab36 <fRspAnalyze_CmeErr+0xe2>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800abbc:	4958      	ldr	r1, [pc, #352]	; (800ad20 <fRspAnalyze_CmeErr+0x2cc>)
 800abbe:	a802      	add	r0, sp, #8
 800abc0:	f012 fa17 	bl	801cff2 <strstr>
 800abc4:	b110      	cbz	r0, 800abcc <fRspAnalyze_CmeErr+0x178>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800abc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800abca:	e7c0      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800abcc:	4955      	ldr	r1, [pc, #340]	; (800ad24 <fRspAnalyze_CmeErr+0x2d0>)
 800abce:	a802      	add	r0, sp, #8
 800abd0:	f012 fa0f 	bl	801cff2 <strstr>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d1f6      	bne.n	800abc6 <fRspAnalyze_CmeErr+0x172>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800abd8:	4953      	ldr	r1, [pc, #332]	; (800ad28 <fRspAnalyze_CmeErr+0x2d4>)
 800abda:	a802      	add	r0, sp, #8
 800abdc:	f012 fa09 	bl	801cff2 <strstr>
 800abe0:	b110      	cbz	r0, 800abe8 <fRspAnalyze_CmeErr+0x194>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800abe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abe6:	e7b2      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800abe8:	4950      	ldr	r1, [pc, #320]	; (800ad2c <fRspAnalyze_CmeErr+0x2d8>)
 800abea:	a802      	add	r0, sp, #8
 800abec:	f012 fa01 	bl	801cff2 <strstr>
 800abf0:	b110      	cbz	r0, 800abf8 <fRspAnalyze_CmeErr+0x1a4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800abf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf6:	e7aa      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800abf8:	494d      	ldr	r1, [pc, #308]	; (800ad30 <fRspAnalyze_CmeErr+0x2dc>)
 800abfa:	a802      	add	r0, sp, #8
 800abfc:	f012 f9f9 	bl	801cff2 <strstr>
 800ac00:	b110      	cbz	r0, 800ac08 <fRspAnalyze_CmeErr+0x1b4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac02:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac06:	e7a2      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800ac08:	494a      	ldr	r1, [pc, #296]	; (800ad34 <fRspAnalyze_CmeErr+0x2e0>)
 800ac0a:	a802      	add	r0, sp, #8
 800ac0c:	f012 f9f1 	bl	801cff2 <strstr>
 800ac10:	b110      	cbz	r0, 800ac18 <fRspAnalyze_CmeErr+0x1c4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac12:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800ac16:	e79a      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800ac18:	4947      	ldr	r1, [pc, #284]	; (800ad38 <fRspAnalyze_CmeErr+0x2e4>)
 800ac1a:	a802      	add	r0, sp, #8
 800ac1c:	f012 f9e9 	bl	801cff2 <strstr>
 800ac20:	b110      	cbz	r0, 800ac28 <fRspAnalyze_CmeErr+0x1d4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac22:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ac26:	e792      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800ac28:	4944      	ldr	r1, [pc, #272]	; (800ad3c <fRspAnalyze_CmeErr+0x2e8>)
 800ac2a:	a802      	add	r0, sp, #8
 800ac2c:	f012 f9e1 	bl	801cff2 <strstr>
 800ac30:	b110      	cbz	r0, 800ac38 <fRspAnalyze_CmeErr+0x1e4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800ac36:	e78a      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
				} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800ac38:	4941      	ldr	r1, [pc, #260]	; (800ad40 <fRspAnalyze_CmeErr+0x2ec>)
 800ac3a:	a802      	add	r0, sp, #8
 800ac3c:	f012 f9d9 	bl	801cff2 <strstr>
 800ac40:	b110      	cbz	r0, 800ac48 <fRspAnalyze_CmeErr+0x1f4>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac42:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800ac46:	e782      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
					p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e780      	b.n	800ab4e <fRspAnalyze_CmeErr+0xfa>
	switch (p_atp_ctxt->current_atcmd.id) {
 800ac4c:	2a30      	cmp	r2, #48	; 0x30
 800ac4e:	f000 80ac 	beq.w	800adaa <fRspAnalyze_CmeErr+0x356>
		 * case ?:
		 * etc...
		 */

	default:
		PRINT_DBG("Modem Error for cmd (id=%ld)", p_atp_ctxt->current_atcmd.id)
 800ac52:	493c      	ldr	r1, [pc, #240]	; (800ad44 <fRspAnalyze_CmeErr+0x2f0>)
 800ac54:	482e      	ldr	r0, [pc, #184]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac56:	f012 f92f 	bl	801ceb8 <sprintf>
 800ac5a:	e03e      	b.n	800acda <fRspAnalyze_CmeErr+0x286>
		if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param == CGSN_SN) {
 800ac5c:	f894 5760 	ldrb.w	r5, [r4, #1888]	; 0x760
 800ac60:	b9a5      	cbnz	r5, 800ac8c <fRspAnalyze_CmeErr+0x238>
			PRINT_DBG("Modem Error for CGSN_SN, use unitialized value")
 800ac62:	4939      	ldr	r1, [pc, #228]	; (800ad48 <fRspAnalyze_CmeErr+0x2f4>)
		PRINT_DBG("Modem Error for CGMR, use unitialized value")
 800ac64:	482a      	ldr	r0, [pc, #168]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac66:	f012 f997 	bl	801cf98 <strcpy>
 800ac6a:	4829      	ldr	r0, [pc, #164]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac6c:	f00d f962 	bl	8017f34 <crs_strlen>
 800ac70:	4a27      	ldr	r2, [pc, #156]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac72:	b283      	uxth	r3, r0
 800ac74:	2102      	movs	r1, #2
 800ac76:	2001      	movs	r0, #1
 800ac78:	f00d f99a 	bl	8017fb0 <traceIF_itmPrint>
 800ac7c:	4824      	ldr	r0, [pc, #144]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac7e:	f00d f959 	bl	8017f34 <crs_strlen>
 800ac82:	4a23      	ldr	r2, [pc, #140]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac84:	b283      	uxth	r3, r0
 800ac86:	2102      	movs	r1, #2
 800ac88:	2001      	movs	r0, #1
 800ac8a:	e015      	b.n	800acb8 <fRspAnalyze_CmeErr+0x264>
		} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param == CGSN_IMEI) {
 800ac8c:	2d01      	cmp	r5, #1
 800ac8e:	d11e      	bne.n	800acce <fRspAnalyze_CmeErr+0x27a>
			PRINT_DBG("Modem Error for CGSN_IMEI, use unitialized value")
 800ac90:	492e      	ldr	r1, [pc, #184]	; (800ad4c <fRspAnalyze_CmeErr+0x2f8>)
 800ac92:	481f      	ldr	r0, [pc, #124]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac94:	f012 f980 	bl	801cf98 <strcpy>
 800ac98:	481d      	ldr	r0, [pc, #116]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ac9a:	f00d f94b 	bl	8017f34 <crs_strlen>
 800ac9e:	4a1c      	ldr	r2, [pc, #112]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800aca0:	b283      	uxth	r3, r0
 800aca2:	2102      	movs	r1, #2
 800aca4:	4628      	mov	r0, r5
 800aca6:	f00d f983 	bl	8017fb0 <traceIF_itmPrint>
 800acaa:	4819      	ldr	r0, [pc, #100]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acac:	f00d f942 	bl	8017f34 <crs_strlen>
 800acb0:	4a17      	ldr	r2, [pc, #92]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acb2:	b283      	uxth	r3, r0
 800acb4:	2102      	movs	r1, #2
 800acb6:	4628      	mov	r0, r5
 800acb8:	f00d fba0 	bl	80183fc <traceIF_uartPrint>
			(void) memset((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.imei),
 800acbc:	f8d4 05dc 	ldr.w	r0, [r4, #1500]	; 0x5dc
 800acc0:	2240      	movs	r2, #64	; 0x40
 800acc2:	2100      	movs	r1, #0
 800acc4:	3002      	adds	r0, #2
 800acc6:	f012 f8c7 	bl	801ce58 <memset>
		retval = ATACTION_RSP_ERROR;
 800acca:	2004      	movs	r0, #4
		break;
 800accc:	e086      	b.n	800addc <fRspAnalyze_CmeErr+0x388>
		} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param == CGSN_IMEISV) {
 800acce:	2d02      	cmp	r5, #2
 800acd0:	d116      	bne.n	800ad00 <fRspAnalyze_CmeErr+0x2ac>
			PRINT_DBG(
 800acd2:	491f      	ldr	r1, [pc, #124]	; (800ad50 <fRspAnalyze_CmeErr+0x2fc>)
			PRINT_DBG("Modem Error for CGSN, unexpected parameter")
 800acd4:	480e      	ldr	r0, [pc, #56]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acd6:	f012 f95f 	bl	801cf98 <strcpy>
		PRINT_DBG("Modem Error for cmd (id=%ld)", p_atp_ctxt->current_atcmd.id)
 800acda:	480d      	ldr	r0, [pc, #52]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acdc:	f00d f92a 	bl	8017f34 <crs_strlen>
 800ace0:	4a0b      	ldr	r2, [pc, #44]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800ace2:	b283      	uxth	r3, r0
 800ace4:	2102      	movs	r1, #2
 800ace6:	2001      	movs	r0, #1
 800ace8:	f00d f962 	bl	8017fb0 <traceIF_itmPrint>
 800acec:	4808      	ldr	r0, [pc, #32]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acee:	f00d f921 	bl	8017f34 <crs_strlen>
 800acf2:	4a07      	ldr	r2, [pc, #28]	; (800ad10 <fRspAnalyze_CmeErr+0x2bc>)
 800acf4:	b283      	uxth	r3, r0
 800acf6:	2102      	movs	r1, #2
 800acf8:	2001      	movs	r0, #1
 800acfa:	f00d fb7f 	bl	80183fc <traceIF_uartPrint>
 800acfe:	e7e4      	b.n	800acca <fRspAnalyze_CmeErr+0x276>
		} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param == CGSN_SVN) {
 800ad00:	2d03      	cmp	r5, #3
			PRINT_DBG(
 800ad02:	bf0c      	ite	eq
 800ad04:	4913      	ldreq	r1, [pc, #76]	; (800ad54 <fRspAnalyze_CmeErr+0x300>)
			PRINT_DBG("Modem Error for CGSN, unexpected parameter")
 800ad06:	4914      	ldrne	r1, [pc, #80]	; (800ad58 <fRspAnalyze_CmeErr+0x304>)
 800ad08:	e7e4      	b.n	800acd4 <fRspAnalyze_CmeErr+0x280>
		PRINT_DBG("Modem Error for CIMI, use unitialized value")
 800ad0a:	4914      	ldr	r1, [pc, #80]	; (800ad5c <fRspAnalyze_CmeErr+0x308>)
 800ad0c:	e7aa      	b.n	800ac64 <fRspAnalyze_CmeErr+0x210>
 800ad0e:	bf00      	nop
 800ad10:	20008ef8 	.word	0x20008ef8
 800ad14:	080250da 	.word	0x080250da
 800ad18:	08025104 	.word	0x08025104
 800ad1c:	08025155 	.word	0x08025155
 800ad20:	080251a1 	.word	0x080251a1
 800ad24:	080251b3 	.word	0x080251b3
 800ad28:	080251c4 	.word	0x080251c4
 800ad2c:	080251d5 	.word	0x080251d5
 800ad30:	080251e1 	.word	0x080251e1
 800ad34:	080251ea 	.word	0x080251ea
 800ad38:	080251f4 	.word	0x080251f4
 800ad3c:	08025207 	.word	0x08025207
 800ad40:	08025219 	.word	0x08025219
 800ad44:	080254e7 	.word	0x080254e7
 800ad48:	0802522b 	.word	0x0802522b
 800ad4c:	08025265 	.word	0x08025265
 800ad50:	080252a1 	.word	0x080252a1
 800ad54:	080252f2 	.word	0x080252f2
 800ad58:	08025340 	.word	0x08025340
 800ad5c:	08025376 	.word	0x08025376
 800ad60:	0802512c 	.word	0x0802512c
 800ad64:	08025190 	.word	0x08025190
		PRINT_DBG("Modem Error for CGMI, use unitialized value")
 800ad68:	491e      	ldr	r1, [pc, #120]	; (800ade4 <fRspAnalyze_CmeErr+0x390>)
		PRINT_DBG("Modem Error for CGMM, use unitialized value")
 800ad6a:	481f      	ldr	r0, [pc, #124]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800ad6c:	f012 f914 	bl	801cf98 <strcpy>
 800ad70:	481d      	ldr	r0, [pc, #116]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800ad72:	f00d f8df 	bl	8017f34 <crs_strlen>
 800ad76:	4a1c      	ldr	r2, [pc, #112]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800ad78:	b283      	uxth	r3, r0
 800ad7a:	2102      	movs	r1, #2
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	f00d f917 	bl	8017fb0 <traceIF_itmPrint>
 800ad82:	4819      	ldr	r0, [pc, #100]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800ad84:	f00d f8d6 	bl	8017f34 <crs_strlen>
 800ad88:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800ad8a:	b283      	uxth	r3, r0
 800ad8c:	2102      	movs	r1, #2
 800ad8e:	2001      	movs	r0, #1
 800ad90:	f00d fb34 	bl	80183fc <traceIF_uartPrint>
		(void) memset((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.model), 0,
 800ad94:	f8d4 05dc 	ldr.w	r0, [r4, #1500]	; 0x5dc
 800ad98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad9c:	e791      	b.n	800acc2 <fRspAnalyze_CmeErr+0x26e>
		PRINT_DBG("Modem Error for CGMM, use unitialized value")
 800ad9e:	4913      	ldr	r1, [pc, #76]	; (800adec <fRspAnalyze_CmeErr+0x398>)
 800ada0:	e7e3      	b.n	800ad6a <fRspAnalyze_CmeErr+0x316>
		PRINT_DBG("Modem Error for CGMR, use unitialized value")
 800ada2:	4913      	ldr	r1, [pc, #76]	; (800adf0 <fRspAnalyze_CmeErr+0x39c>)
 800ada4:	e75e      	b.n	800ac64 <fRspAnalyze_CmeErr+0x210>
		PRINT_DBG("Modem Error for CNUM, use unitialized value")
 800ada6:	4913      	ldr	r1, [pc, #76]	; (800adf4 <fRspAnalyze_CmeErr+0x3a0>)
 800ada8:	e75c      	b.n	800ac64 <fRspAnalyze_CmeErr+0x210>
		PRINT_DBG("Modem Error for GSN, use unitialized value")
 800adaa:	4913      	ldr	r1, [pc, #76]	; (800adf8 <fRspAnalyze_CmeErr+0x3a4>)
 800adac:	e75a      	b.n	800ac64 <fRspAnalyze_CmeErr+0x210>
		PRINT_DBG("Analyze Modem Error for CPIN")
 800adae:	4913      	ldr	r1, [pc, #76]	; (800adfc <fRspAnalyze_CmeErr+0x3a8>)
 800adb0:	480d      	ldr	r0, [pc, #52]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800adb2:	f012 f8f1 	bl	801cf98 <strcpy>
 800adb6:	480c      	ldr	r0, [pc, #48]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800adb8:	f00d f8bc 	bl	8017f34 <crs_strlen>
 800adbc:	4a0a      	ldr	r2, [pc, #40]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800adbe:	b283      	uxth	r3, r0
 800adc0:	2102      	movs	r1, #2
 800adc2:	2001      	movs	r0, #1
 800adc4:	f00d f8f4 	bl	8017fb0 <traceIF_itmPrint>
 800adc8:	4807      	ldr	r0, [pc, #28]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800adca:	f00d f8b3 	bl	8017f34 <crs_strlen>
 800adce:	4a06      	ldr	r2, [pc, #24]	; (800ade8 <fRspAnalyze_CmeErr+0x394>)
 800add0:	b283      	uxth	r3, r0
 800add2:	2102      	movs	r1, #2
 800add4:	2001      	movs	r0, #1
 800add6:	f00d fb11 	bl	80183fc <traceIF_uartPrint>
		retval = ATACTION_RSP_FRC_END;
 800adda:	2001      	movs	r0, #1
	}

	return (retval);
}
 800addc:	b00b      	add	sp, #44	; 0x2c
 800adde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade2:	bf00      	nop
 800ade4:	080253ad 	.word	0x080253ad
 800ade8:	20008ef8 	.word	0x20008ef8
 800adec:	080253e4 	.word	0x080253e4
 800adf0:	0802541b 	.word	0x0802541b
 800adf4:	08025452 	.word	0x08025452
 800adf8:	08025489 	.word	0x08025489
 800adfc:	080254bf 	.word	0x080254bf

0800ae00 <fRspAnalyze_Error>:
		at_element_info_t *element_infos) {
 800ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT_API("enter fRspAnalyze_Error()")
 800ae04:	4c11      	ldr	r4, [pc, #68]	; (800ae4c <fRspAnalyze_Error+0x4c>)
		at_element_info_t *element_infos) {
 800ae06:	4605      	mov	r5, r0
 800ae08:	460e      	mov	r6, r1
	PRINT_API("enter fRspAnalyze_Error()")
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4910      	ldr	r1, [pc, #64]	; (800ae50 <fRspAnalyze_Error+0x50>)
		at_element_info_t *element_infos) {
 800ae0e:	4617      	mov	r7, r2
 800ae10:	4698      	mov	r8, r3
	PRINT_API("enter fRspAnalyze_Error()")
 800ae12:	f012 f8c1 	bl	801cf98 <strcpy>
 800ae16:	4620      	mov	r0, r4
 800ae18:	f00d f88c 	bl	8017f34 <crs_strlen>
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	b283      	uxth	r3, r0
 800ae20:	2104      	movs	r1, #4
 800ae22:	2001      	movs	r0, #1
 800ae24:	f00d f8c4 	bl	8017fb0 <traceIF_itmPrint>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f00d f883 	bl	8017f34 <crs_strlen>
 800ae2e:	4622      	mov	r2, r4
 800ae30:	b283      	uxth	r3, r0
 800ae32:	2104      	movs	r1, #4
 800ae34:	2001      	movs	r0, #1
 800ae36:	f00d fae1 	bl	80183fc <traceIF_uartPrint>
	retval = fRspAnalyze_CmeErr(p_at_ctxt, p_modem_ctxt, p_msg_in,
 800ae3a:	4643      	mov	r3, r8
 800ae3c:	463a      	mov	r2, r7
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
}
 800ae42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	retval = fRspAnalyze_CmeErr(p_at_ctxt, p_modem_ctxt, p_msg_in,
 800ae46:	f7ff be05 	b.w	800aa54 <fRspAnalyze_CmeErr>
 800ae4a:	bf00      	nop
 800ae4c:	20008ef8 	.word	0x20008ef8
 800ae50:	0802550f 	.word	0x0802550f

0800ae54 <fRspAnalyze_CmsErr>:

at_action_rsp_t fRspAnalyze_CmsErr(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800ae54:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);
	UNUSED(p_msg_in);
	UNUSED(element_infos);

	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CmsErr()")
 800ae56:	4c0c      	ldr	r4, [pc, #48]	; (800ae88 <fRspAnalyze_CmsErr+0x34>)
 800ae58:	490c      	ldr	r1, [pc, #48]	; (800ae8c <fRspAnalyze_CmsErr+0x38>)
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f012 f89c 	bl	801cf98 <strcpy>
 800ae60:	4620      	mov	r0, r4
 800ae62:	f00d f867 	bl	8017f34 <crs_strlen>
 800ae66:	4622      	mov	r2, r4
 800ae68:	b283      	uxth	r3, r0
 800ae6a:	2104      	movs	r1, #4
 800ae6c:	2001      	movs	r0, #1
 800ae6e:	f00d f89f 	bl	8017fb0 <traceIF_itmPrint>
 800ae72:	4620      	mov	r0, r4
 800ae74:	f00d f85e 	bl	8017f34 <crs_strlen>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	b283      	uxth	r3, r0
 800ae7c:	2104      	movs	r1, #4
 800ae7e:	2001      	movs	r0, #1
 800ae80:	f00d fabc 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CMS ERROR */
	/* Not implemented */

	return (retval);
}
 800ae84:	2010      	movs	r0, #16
 800ae86:	bd10      	pop	{r4, pc}
 800ae88:	20008ef8 	.word	0x20008ef8
 800ae8c:	08025538 	.word	0x08025538

0800ae90 <fRspAnalyze_CGMI>:

at_action_rsp_t fRspAnalyze_CGMI(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	4607      	mov	r7, r0
 800ae94:	460e      	mov	r6, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGMI()")
 800ae96:	4821      	ldr	r0, [pc, #132]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800ae98:	4921      	ldr	r1, [pc, #132]	; (800af20 <fRspAnalyze_CGMI+0x90>)
		at_element_info_t *element_infos) {
 800ae9a:	4615      	mov	r5, r2
 800ae9c:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGMI()")
 800ae9e:	f012 f87b 	bl	801cf98 <strcpy>
 800aea2:	481e      	ldr	r0, [pc, #120]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aea4:	f00d f846 	bl	8017f34 <crs_strlen>
 800aea8:	4a1c      	ldr	r2, [pc, #112]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aeaa:	b283      	uxth	r3, r0
 800aeac:	2104      	movs	r1, #4
 800aeae:	2001      	movs	r0, #1
 800aeb0:	f00d f87e 	bl	8017fb0 <traceIF_itmPrint>
 800aeb4:	4819      	ldr	r0, [pc, #100]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aeb6:	f00d f83d 	bl	8017f34 <crs_strlen>
 800aeba:	4a18      	ldr	r2, [pc, #96]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aebc:	b283      	uxth	r3, r0
 800aebe:	2104      	movs	r1, #4
 800aec0:	2001      	movs	r0, #1
 800aec2:	f00d fa9b 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CGMI */
	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800aec6:	8b3b      	ldrh	r3, [r7, #24]
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d124      	bne.n	800af16 <fRspAnalyze_CGMI+0x86>
		PRINT_DBG("Manufacturer name:")
 800aecc:	4915      	ldr	r1, [pc, #84]	; (800af24 <fRspAnalyze_CGMI+0x94>)
 800aece:	4813      	ldr	r0, [pc, #76]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aed0:	f012 f862 	bl	801cf98 <strcpy>
 800aed4:	4811      	ldr	r0, [pc, #68]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aed6:	f00d f82d 	bl	8017f34 <crs_strlen>
 800aeda:	4a10      	ldr	r2, [pc, #64]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aedc:	b283      	uxth	r3, r0
 800aede:	2102      	movs	r1, #2
 800aee0:	2001      	movs	r0, #1
 800aee2:	f00d f865 	bl	8017fb0 <traceIF_itmPrint>
 800aee6:	480d      	ldr	r0, [pc, #52]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aee8:	f00d f824 	bl	8017f34 <crs_strlen>
 800aeec:	4a0b      	ldr	r2, [pc, #44]	; (800af1c <fRspAnalyze_CGMI+0x8c>)
 800aeee:	b283      	uxth	r3, r0
 800aef0:	2102      	movs	r1, #2
 800aef2:	2001      	movs	r0, #1
 800aef4:	f00d fa82 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800aef8:	8962      	ldrh	r2, [r4, #10]
 800aefa:	89e3      	ldrh	r3, [r4, #14]
 800aefc:	442a      	add	r2, r5
 800aefe:	2102      	movs	r1, #2
 800af00:	2001      	movs	r0, #1
 800af02:	f00d fa99 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy(
 800af06:	f8d6 05dc 	ldr.w	r0, [r6, #1500]	; 0x5dc
				(void*) &(p_modem_ctxt->SID_ctxt.device_info->u.manufacturer_name),
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800af0a:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy(
 800af0c:	89e2      	ldrh	r2, [r4, #14]
 800af0e:	4429      	add	r1, r5
 800af10:	3002      	adds	r0, #2
 800af12:	f011 ff93 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800af16:	2010      	movs	r0, #16
 800af18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20008ef8 	.word	0x20008ef8
 800af20:	08025562 	.word	0x08025562
 800af24:	0802558a 	.word	0x0802558a

0800af28 <fRspAnalyze_CGMM>:

at_action_rsp_t fRspAnalyze_CGMM(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	4607      	mov	r7, r0
 800af2c:	460e      	mov	r6, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGMM()")
 800af2e:	4821      	ldr	r0, [pc, #132]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af30:	4921      	ldr	r1, [pc, #132]	; (800afb8 <fRspAnalyze_CGMM+0x90>)
		at_element_info_t *element_infos) {
 800af32:	4615      	mov	r5, r2
 800af34:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGMM()")
 800af36:	f012 f82f 	bl	801cf98 <strcpy>
 800af3a:	481e      	ldr	r0, [pc, #120]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af3c:	f00c fffa 	bl	8017f34 <crs_strlen>
 800af40:	4a1c      	ldr	r2, [pc, #112]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af42:	b283      	uxth	r3, r0
 800af44:	2104      	movs	r1, #4
 800af46:	2001      	movs	r0, #1
 800af48:	f00d f832 	bl	8017fb0 <traceIF_itmPrint>
 800af4c:	4819      	ldr	r0, [pc, #100]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af4e:	f00c fff1 	bl	8017f34 <crs_strlen>
 800af52:	4a18      	ldr	r2, [pc, #96]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af54:	b283      	uxth	r3, r0
 800af56:	2104      	movs	r1, #4
 800af58:	2001      	movs	r0, #1
 800af5a:	f00d fa4f 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CGMM */
	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800af5e:	8b3b      	ldrh	r3, [r7, #24]
 800af60:	2b04      	cmp	r3, #4
 800af62:	d124      	bne.n	800afae <fRspAnalyze_CGMM+0x86>
		PRINT_DBG("Model:")
 800af64:	4915      	ldr	r1, [pc, #84]	; (800afbc <fRspAnalyze_CGMM+0x94>)
 800af66:	4813      	ldr	r0, [pc, #76]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af68:	f012 f816 	bl	801cf98 <strcpy>
 800af6c:	4811      	ldr	r0, [pc, #68]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af6e:	f00c ffe1 	bl	8017f34 <crs_strlen>
 800af72:	4a10      	ldr	r2, [pc, #64]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af74:	b283      	uxth	r3, r0
 800af76:	2102      	movs	r1, #2
 800af78:	2001      	movs	r0, #1
 800af7a:	f00d f819 	bl	8017fb0 <traceIF_itmPrint>
 800af7e:	480d      	ldr	r0, [pc, #52]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af80:	f00c ffd8 	bl	8017f34 <crs_strlen>
 800af84:	4a0b      	ldr	r2, [pc, #44]	; (800afb4 <fRspAnalyze_CGMM+0x8c>)
 800af86:	b283      	uxth	r3, r0
 800af88:	2102      	movs	r1, #2
 800af8a:	2001      	movs	r0, #1
 800af8c:	f00d fa36 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800af90:	8962      	ldrh	r2, [r4, #10]
 800af92:	89e3      	ldrh	r3, [r4, #14]
 800af94:	442a      	add	r2, r5
 800af96:	2102      	movs	r1, #2
 800af98:	2001      	movs	r0, #1
 800af9a:	f00d fa4d 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.model),
 800af9e:	f8d6 05dc 	ldr.w	r0, [r6, #1500]	; 0x5dc
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800afa2:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.model),
 800afa4:	89e2      	ldrh	r2, [r4, #14]
 800afa6:	4429      	add	r1, r5
 800afa8:	3002      	adds	r0, #2
 800afaa:	f011 ff47 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800afae:	2010      	movs	r0, #16
 800afb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20008ef8 	.word	0x20008ef8
 800afb8:	080255a8 	.word	0x080255a8
 800afbc:	080255d0 	.word	0x080255d0

0800afc0 <fRspAnalyze_CGMR>:

at_action_rsp_t fRspAnalyze_CGMR(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	4607      	mov	r7, r0
 800afc4:	460e      	mov	r6, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGMR()")
 800afc6:	4821      	ldr	r0, [pc, #132]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800afc8:	4921      	ldr	r1, [pc, #132]	; (800b050 <fRspAnalyze_CGMR+0x90>)
		at_element_info_t *element_infos) {
 800afca:	4615      	mov	r5, r2
 800afcc:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGMR()")
 800afce:	f011 ffe3 	bl	801cf98 <strcpy>
 800afd2:	481e      	ldr	r0, [pc, #120]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800afd4:	f00c ffae 	bl	8017f34 <crs_strlen>
 800afd8:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800afda:	b283      	uxth	r3, r0
 800afdc:	2104      	movs	r1, #4
 800afde:	2001      	movs	r0, #1
 800afe0:	f00c ffe6 	bl	8017fb0 <traceIF_itmPrint>
 800afe4:	4819      	ldr	r0, [pc, #100]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800afe6:	f00c ffa5 	bl	8017f34 <crs_strlen>
 800afea:	4a18      	ldr	r2, [pc, #96]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800afec:	b283      	uxth	r3, r0
 800afee:	2104      	movs	r1, #4
 800aff0:	2001      	movs	r0, #1
 800aff2:	f00d fa03 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CGMR */
	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800aff6:	8b3b      	ldrh	r3, [r7, #24]
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d124      	bne.n	800b046 <fRspAnalyze_CGMR+0x86>
		PRINT_DBG("Revision:")
 800affc:	4915      	ldr	r1, [pc, #84]	; (800b054 <fRspAnalyze_CGMR+0x94>)
 800affe:	4813      	ldr	r0, [pc, #76]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800b000:	f011 ffca 	bl	801cf98 <strcpy>
 800b004:	4811      	ldr	r0, [pc, #68]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800b006:	f00c ff95 	bl	8017f34 <crs_strlen>
 800b00a:	4a10      	ldr	r2, [pc, #64]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800b00c:	b283      	uxth	r3, r0
 800b00e:	2102      	movs	r1, #2
 800b010:	2001      	movs	r0, #1
 800b012:	f00c ffcd 	bl	8017fb0 <traceIF_itmPrint>
 800b016:	480d      	ldr	r0, [pc, #52]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800b018:	f00c ff8c 	bl	8017f34 <crs_strlen>
 800b01c:	4a0b      	ldr	r2, [pc, #44]	; (800b04c <fRspAnalyze_CGMR+0x8c>)
 800b01e:	b283      	uxth	r3, r0
 800b020:	2102      	movs	r1, #2
 800b022:	2001      	movs	r0, #1
 800b024:	f00d f9ea 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800b028:	8962      	ldrh	r2, [r4, #10]
 800b02a:	89e3      	ldrh	r3, [r4, #14]
 800b02c:	442a      	add	r2, r5
 800b02e:	2102      	movs	r1, #2
 800b030:	2001      	movs	r0, #1
 800b032:	f00d fa01 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.revision),
 800b036:	f8d6 05dc 	ldr.w	r0, [r6, #1500]	; 0x5dc
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800b03a:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.revision),
 800b03c:	89e2      	ldrh	r2, [r4, #14]
 800b03e:	4429      	add	r1, r5
 800b040:	3002      	adds	r0, #2
 800b042:	f011 fefb 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800b046:	2010      	movs	r0, #16
 800b048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04a:	bf00      	nop
 800b04c:	20008ef8 	.word	0x20008ef8
 800b050:	080255e2 	.word	0x080255e2
 800b054:	0802560a 	.word	0x0802560a

0800b058 <fRspAnalyze_CGSN>:

at_action_rsp_t fRspAnalyze_CGSN(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	4682      	mov	sl, r0
 800b05e:	b093      	sub	sp, #76	; 0x4c
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGSN()")
 800b060:	487b      	ldr	r0, [pc, #492]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
		at_element_info_t *element_infos) {
 800b062:	4689      	mov	r9, r1
	PRINT_API("enter fRspAnalyze_CGSN()")
 800b064:	497b      	ldr	r1, [pc, #492]	; (800b254 <fRspAnalyze_CGSN+0x1fc>)
		at_element_info_t *element_infos) {
 800b066:	4616      	mov	r6, r2
 800b068:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGSN()")
 800b06a:	f011 ff95 	bl	801cf98 <strcpy>
 800b06e:	4878      	ldr	r0, [pc, #480]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b070:	f00c ff60 	bl	8017f34 <crs_strlen>
 800b074:	4a76      	ldr	r2, [pc, #472]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b076:	b283      	uxth	r3, r0
 800b078:	2104      	movs	r1, #4
 800b07a:	2001      	movs	r0, #1
 800b07c:	f00c ff98 	bl	8017fb0 <traceIF_itmPrint>
 800b080:	4873      	ldr	r0, [pc, #460]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b082:	f00c ff57 	bl	8017f34 <crs_strlen>
 800b086:	4a72      	ldr	r2, [pc, #456]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b088:	b283      	uxth	r3, r0
 800b08a:	2104      	movs	r1, #4
 800b08c:	2001      	movs	r0, #1
 800b08e:	f00d f9b5 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CGSN */
	/* only for write command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800b092:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 800b096:	2b03      	cmp	r3, #3
 800b098:	d13a      	bne.n	800b110 <fRspAnalyze_CGSN+0xb8>
								(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size)
					} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param
							== CGSN_SVN) {
						/* SVN */
						PRINT_DBG("SVN (NOT USED):")
 800b09a:	4d6d      	ldr	r5, [pc, #436]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
						PRINT_DBG("IMEISV (NOT USED):")
 800b09c:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 800b264 <fRspAnalyze_CGSN+0x20c>
		START_PARAM_LOOP()
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	f7fd f861 	bl	800816c <atcc_extractElement>
 800b0aa:	89e3      	ldrh	r3, [r4, #14]
 800b0ac:	9001      	str	r0, [sp, #4]
 800b0ae:	b363      	cbz	r3, 800b10a <fRspAnalyze_CGSN+0xb2>
				if (element_infos->param_rank == 2U) {
 800b0b0:	8927      	ldrh	r7, [r4, #8]
 800b0b2:	2f02      	cmp	r7, #2
 800b0b4:	d129      	bne.n	800b10a <fRspAnalyze_CGSN+0xb2>
					if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param
 800b0b6:	f899 8760 	ldrb.w	r8, [r9, #1888]	; 0x760
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	d154      	bne.n	800b16a <fRspAnalyze_CGSN+0x112>
						PRINT_DBG("Serial Number:")
 800b0c0:	4965      	ldr	r1, [pc, #404]	; (800b258 <fRspAnalyze_CGSN+0x200>)
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f011 ff68 	bl	801cf98 <strcpy>
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f00c ff33 	bl	8017f34 <crs_strlen>
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	b283      	uxth	r3, r0
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f00c ff6b 	bl	8017fb0 <traceIF_itmPrint>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f00c ff2a 	bl	8017f34 <crs_strlen>
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	b283      	uxth	r3, r0
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	2001      	movs	r0, #1
 800b0e8:	f00d f988 	bl	80183fc <traceIF_uartPrint>
						PRINT_BUF(
 800b0ec:	8962      	ldrh	r2, [r4, #10]
 800b0ee:	89e3      	ldrh	r3, [r4, #14]
 800b0f0:	4432      	add	r2, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	f00d f99f 	bl	8018438 <traceIF_BufCharPrint>
								(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800b0fa:	8961      	ldrh	r1, [r4, #10]
						(void) memcpy(
 800b0fc:	f8d9 05dc 	ldr.w	r0, [r9, #1500]	; 0x5dc
 800b100:	89e2      	ldrh	r2, [r4, #14]
 800b102:	4431      	add	r1, r6
						(void) memcpy(
 800b104:	3002      	adds	r0, #2
 800b106:	f011 fe99 	bl	801ce3c <memcpy>
								(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size)
					} else {
						/* nothing to do */
					}
				}END_PARAM_LOOP()
 800b10a:	9b01      	ldr	r3, [sp, #4]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d0c7      	beq.n	800b0a0 <fRspAnalyze_CGSN+0x48>
	}

	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800b110:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 800b114:	2b04      	cmp	r3, #4
 800b116:	d124      	bne.n	800b162 <fRspAnalyze_CGSN+0x10a>
		PRINT_DBG("Serial Number:")
 800b118:	494f      	ldr	r1, [pc, #316]	; (800b258 <fRspAnalyze_CGSN+0x200>)
 800b11a:	484d      	ldr	r0, [pc, #308]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b11c:	f011 ff3c 	bl	801cf98 <strcpy>
 800b120:	484b      	ldr	r0, [pc, #300]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b122:	f00c ff07 	bl	8017f34 <crs_strlen>
 800b126:	4a4a      	ldr	r2, [pc, #296]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b128:	b283      	uxth	r3, r0
 800b12a:	2102      	movs	r1, #2
 800b12c:	2001      	movs	r0, #1
 800b12e:	f00c ff3f 	bl	8017fb0 <traceIF_itmPrint>
 800b132:	4847      	ldr	r0, [pc, #284]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b134:	f00c fefe 	bl	8017f34 <crs_strlen>
 800b138:	4a45      	ldr	r2, [pc, #276]	; (800b250 <fRspAnalyze_CGSN+0x1f8>)
 800b13a:	b283      	uxth	r3, r0
 800b13c:	2102      	movs	r1, #2
 800b13e:	2001      	movs	r0, #1
 800b140:	f00d f95c 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800b144:	8962      	ldrh	r2, [r4, #10]
 800b146:	89e3      	ldrh	r3, [r4, #14]
 800b148:	4432      	add	r2, r6
 800b14a:	2102      	movs	r1, #2
 800b14c:	2001      	movs	r0, #1
 800b14e:	f00d f973 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy(
 800b152:	f8d9 05dc 	ldr.w	r0, [r9, #1500]	; 0x5dc
				(void*) &(p_modem_ctxt->SID_ctxt.device_info->u.serial_number),
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800b156:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy(
 800b158:	89e2      	ldrh	r2, [r4, #14]
 800b15a:	4431      	add	r1, r6
 800b15c:	3002      	adds	r0, #2
 800b15e:	f011 fe6d 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800b162:	2010      	movs	r0, #16
 800b164:	b013      	add	sp, #76	; 0x4c
 800b166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param
 800b16a:	f1b8 0f01 	cmp.w	r8, #1
 800b16e:	d12e      	bne.n	800b1ce <fRspAnalyze_CGSN+0x176>
						PRINT_DBG("IMEI:")
 800b170:	493a      	ldr	r1, [pc, #232]	; (800b25c <fRspAnalyze_CGSN+0x204>)
 800b172:	4628      	mov	r0, r5
 800b174:	f011 ff10 	bl	801cf98 <strcpy>
 800b178:	4628      	mov	r0, r5
 800b17a:	f00c fedb 	bl	8017f34 <crs_strlen>
 800b17e:	462a      	mov	r2, r5
 800b180:	b283      	uxth	r3, r0
 800b182:	4639      	mov	r1, r7
 800b184:	4640      	mov	r0, r8
 800b186:	f00c ff13 	bl	8017fb0 <traceIF_itmPrint>
 800b18a:	4628      	mov	r0, r5
 800b18c:	f00c fed2 	bl	8017f34 <crs_strlen>
 800b190:	462a      	mov	r2, r5
 800b192:	b283      	uxth	r3, r0
 800b194:	4639      	mov	r1, r7
 800b196:	4640      	mov	r0, r8
 800b198:	f00d f930 	bl	80183fc <traceIF_uartPrint>
						PRINT_BUF(
 800b19c:	8962      	ldrh	r2, [r4, #10]
 800b19e:	89e3      	ldrh	r3, [r4, #14]
 800b1a0:	4432      	add	r2, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	f00d f947 	bl	8018438 <traceIF_BufCharPrint>
						uint8_t tmp_array[MAX_SIZE_IMEI] = { 0 };
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	223c      	movs	r2, #60	; 0x3c
 800b1ae:	a803      	add	r0, sp, #12
 800b1b0:	9102      	str	r1, [sp, #8]
 800b1b2:	f011 fe51 	bl	801ce58 <memset>
								ATutil_remove_quotes(
 800b1b6:	89e3      	ldrh	r3, [r4, #14]
 800b1b8:	8960      	ldrh	r0, [r4, #10]
 800b1ba:	aa02      	add	r2, sp, #8
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4430      	add	r0, r6
 800b1c0:	f003 fb40 	bl	800e844 <ATutil_remove_quotes>
						(void) memcpy(
 800b1c4:	a902      	add	r1, sp, #8
								ATutil_remove_quotes(
 800b1c6:	4602      	mov	r2, r0
						(void) memcpy(
 800b1c8:	f8d9 05dc 	ldr.w	r0, [r9, #1500]	; 0x5dc
 800b1cc:	e79a      	b.n	800b104 <fRspAnalyze_CGSN+0xac>
					} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param
 800b1ce:	f1b8 0f02 	cmp.w	r8, #2
 800b1d2:	d11d      	bne.n	800b210 <fRspAnalyze_CGSN+0x1b8>
						PRINT_DBG("IMEISV (NOT USED):")
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f011 fede 	bl	801cf98 <strcpy>
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f00c fea9 	bl	8017f34 <crs_strlen>
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	b283      	uxth	r3, r0
 800b1e6:	4641      	mov	r1, r8
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	f00c fee1 	bl	8017fb0 <traceIF_itmPrint>
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f00c fea0 	bl	8017f34 <crs_strlen>
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	b283      	uxth	r3, r0
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	f00d f8fe 	bl	80183fc <traceIF_uartPrint>
						PRINT_BUF(
 800b200:	8962      	ldrh	r2, [r4, #10]
 800b202:	89e3      	ldrh	r3, [r4, #14]
 800b204:	4432      	add	r2, r6
 800b206:	4641      	mov	r1, r8
						PRINT_BUF(
 800b208:	2001      	movs	r0, #1
 800b20a:	f00d f915 	bl	8018438 <traceIF_BufCharPrint>
 800b20e:	e77c      	b.n	800b10a <fRspAnalyze_CGSN+0xb2>
					} else if (p_modem_ctxt->CMD_ctxt.cgsn_write_cmd_param
 800b210:	f1b8 0f03 	cmp.w	r8, #3
 800b214:	f47f af79 	bne.w	800b10a <fRspAnalyze_CGSN+0xb2>
						PRINT_DBG("SVN (NOT USED):")
 800b218:	4911      	ldr	r1, [pc, #68]	; (800b260 <fRspAnalyze_CGSN+0x208>)
 800b21a:	4628      	mov	r0, r5
 800b21c:	f011 febc 	bl	801cf98 <strcpy>
 800b220:	4628      	mov	r0, r5
 800b222:	f00c fe87 	bl	8017f34 <crs_strlen>
 800b226:	462a      	mov	r2, r5
 800b228:	b283      	uxth	r3, r0
 800b22a:	4639      	mov	r1, r7
 800b22c:	2001      	movs	r0, #1
 800b22e:	f00c febf 	bl	8017fb0 <traceIF_itmPrint>
 800b232:	4628      	mov	r0, r5
 800b234:	f00c fe7e 	bl	8017f34 <crs_strlen>
 800b238:	462a      	mov	r2, r5
 800b23a:	b283      	uxth	r3, r0
 800b23c:	4639      	mov	r1, r7
 800b23e:	2001      	movs	r0, #1
 800b240:	f00d f8dc 	bl	80183fc <traceIF_uartPrint>
						PRINT_BUF(
 800b244:	8962      	ldrh	r2, [r4, #10]
 800b246:	89e3      	ldrh	r3, [r4, #14]
 800b248:	4432      	add	r2, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	e7dc      	b.n	800b208 <fRspAnalyze_CGSN+0x1b0>
 800b24e:	bf00      	nop
 800b250:	20008ef8 	.word	0x20008ef8
 800b254:	0802561f 	.word	0x0802561f
 800b258:	08025647 	.word	0x08025647
 800b25c:	08025661 	.word	0x08025661
 800b260:	08025690 	.word	0x08025690
 800b264:	08025672 	.word	0x08025672

0800b268 <fRspAnalyze_CIMI>:

at_action_rsp_t fRspAnalyze_CIMI(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	4607      	mov	r7, r0
 800b26c:	460e      	mov	r6, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CIMI()")
 800b26e:	4821      	ldr	r0, [pc, #132]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b270:	4921      	ldr	r1, [pc, #132]	; (800b2f8 <fRspAnalyze_CIMI+0x90>)
		at_element_info_t *element_infos) {
 800b272:	4615      	mov	r5, r2
 800b274:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CIMI()")
 800b276:	f011 fe8f 	bl	801cf98 <strcpy>
 800b27a:	481e      	ldr	r0, [pc, #120]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b27c:	f00c fe5a 	bl	8017f34 <crs_strlen>
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b282:	b283      	uxth	r3, r0
 800b284:	2104      	movs	r1, #4
 800b286:	2001      	movs	r0, #1
 800b288:	f00c fe92 	bl	8017fb0 <traceIF_itmPrint>
 800b28c:	4819      	ldr	r0, [pc, #100]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b28e:	f00c fe51 	bl	8017f34 <crs_strlen>
 800b292:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b294:	b283      	uxth	r3, r0
 800b296:	2104      	movs	r1, #4
 800b298:	2001      	movs	r0, #1
 800b29a:	f00d f8af 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +CIMI */
	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800b29e:	8b3b      	ldrh	r3, [r7, #24]
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d124      	bne.n	800b2ee <fRspAnalyze_CIMI+0x86>
		PRINT_DBG("IMSI:")
 800b2a4:	4915      	ldr	r1, [pc, #84]	; (800b2fc <fRspAnalyze_CIMI+0x94>)
 800b2a6:	4813      	ldr	r0, [pc, #76]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b2a8:	f011 fe76 	bl	801cf98 <strcpy>
 800b2ac:	4811      	ldr	r0, [pc, #68]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b2ae:	f00c fe41 	bl	8017f34 <crs_strlen>
 800b2b2:	4a10      	ldr	r2, [pc, #64]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b2b4:	b283      	uxth	r3, r0
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	f00c fe79 	bl	8017fb0 <traceIF_itmPrint>
 800b2be:	480d      	ldr	r0, [pc, #52]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b2c0:	f00c fe38 	bl	8017f34 <crs_strlen>
 800b2c4:	4a0b      	ldr	r2, [pc, #44]	; (800b2f4 <fRspAnalyze_CIMI+0x8c>)
 800b2c6:	b283      	uxth	r3, r0
 800b2c8:	2102      	movs	r1, #2
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	f00d f896 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800b2d0:	8962      	ldrh	r2, [r4, #10]
 800b2d2:	89e3      	ldrh	r3, [r4, #14]
 800b2d4:	442a      	add	r2, r5
 800b2d6:	2102      	movs	r1, #2
 800b2d8:	2001      	movs	r0, #1
 800b2da:	f00d f8ad 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.imsi),
 800b2de:	f8d6 05dc 	ldr.w	r0, [r6, #1500]	; 0x5dc
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800b2e2:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.imsi),
 800b2e4:	89e2      	ldrh	r2, [r4, #14]
 800b2e6:	4429      	add	r1, r5
 800b2e8:	3002      	adds	r0, #2
 800b2ea:	f011 fda7 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800b2ee:	2010      	movs	r0, #16
 800b2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20008ef8 	.word	0x20008ef8
 800b2f8:	080256ab 	.word	0x080256ab
 800b2fc:	080256d3 	.word	0x080256d3

0800b300 <fRspAnalyze_CEER>:

at_action_rsp_t fRspAnalyze_CEER(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b300:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);
	UNUSED(p_msg_in);
	UNUSED(element_infos);

	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CEER()")
 800b302:	4c0c      	ldr	r4, [pc, #48]	; (800b334 <fRspAnalyze_CEER+0x34>)
 800b304:	490c      	ldr	r1, [pc, #48]	; (800b338 <fRspAnalyze_CEER+0x38>)
 800b306:	4620      	mov	r0, r4
 800b308:	f011 fe46 	bl	801cf98 <strcpy>
 800b30c:	4620      	mov	r0, r4
 800b30e:	f00c fe11 	bl	8017f34 <crs_strlen>
 800b312:	4622      	mov	r2, r4
 800b314:	b283      	uxth	r3, r0
 800b316:	2104      	movs	r1, #4
 800b318:	2001      	movs	r0, #1
 800b31a:	f00c fe49 	bl	8017fb0 <traceIF_itmPrint>
 800b31e:	4620      	mov	r0, r4
 800b320:	f00c fe08 	bl	8017f34 <crs_strlen>
 800b324:	4622      	mov	r2, r4
 800b326:	b283      	uxth	r3, r0
 800b328:	2104      	movs	r1, #4
 800b32a:	2001      	movs	r0, #1
 800b32c:	f00d f866 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for CEER */

	return (retval);
}
 800b330:	2010      	movs	r0, #16
 800b332:	bd10      	pop	{r4, pc}
 800b334:	20008ef8 	.word	0x20008ef8
 800b338:	080256e4 	.word	0x080256e4

0800b33c <fRspAnalyze_CPIN>:

at_action_rsp_t fRspAnalyze_CPIN(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	4682      	mov	sl, r0
 800b342:	b08b      	sub	sp, #44	; 0x2c
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CPIN()")
 800b344:	4894      	ldr	r0, [pc, #592]	; (800b598 <fRspAnalyze_CPIN+0x25c>)

	/* analyze parameters for CPIN */
	START_PARAM_LOOP()
			if (element_infos->param_rank == 2U) {
				AT_CHAR_t line[32] = { 0U };
				PRINT_DBG("CPIN parameter received:")
 800b346:	4c94      	ldr	r4, [pc, #592]	; (800b598 <fRspAnalyze_CPIN+0x25c>)
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
						p_modem_ctxt->persist.sim_state = CS_SIMSTATE_UNKNOWN;
						atcm_set_error_report(CSERR_SIM, p_modem_ctxt);
					}
				} else {
					PRINT_ERR("line exceed maximum size, line ignored...")
 800b348:	f8df b280 	ldr.w	fp, [pc, #640]	; 800b5cc <fRspAnalyze_CPIN+0x290>
		at_element_info_t *element_infos) {
 800b34c:	460d      	mov	r5, r1
	PRINT_API("enter fRspAnalyze_CPIN()")
 800b34e:	4993      	ldr	r1, [pc, #588]	; (800b59c <fRspAnalyze_CPIN+0x260>)
		at_element_info_t *element_infos) {
 800b350:	4690      	mov	r8, r2
 800b352:	461f      	mov	r7, r3
	PRINT_API("enter fRspAnalyze_CPIN()")
 800b354:	f011 fe20 	bl	801cf98 <strcpy>
 800b358:	488f      	ldr	r0, [pc, #572]	; (800b598 <fRspAnalyze_CPIN+0x25c>)
 800b35a:	f00c fdeb 	bl	8017f34 <crs_strlen>
 800b35e:	4a8e      	ldr	r2, [pc, #568]	; (800b598 <fRspAnalyze_CPIN+0x25c>)
 800b360:	b283      	uxth	r3, r0
 800b362:	2104      	movs	r1, #4
 800b364:	2001      	movs	r0, #1
 800b366:	f00c fe23 	bl	8017fb0 <traceIF_itmPrint>
 800b36a:	488b      	ldr	r0, [pc, #556]	; (800b598 <fRspAnalyze_CPIN+0x25c>)
 800b36c:	f00c fde2 	bl	8017f34 <crs_strlen>
 800b370:	4a89      	ldr	r2, [pc, #548]	; (800b598 <fRspAnalyze_CPIN+0x25c>)
 800b372:	b283      	uxth	r3, r0
 800b374:	2104      	movs	r1, #4
 800b376:	2001      	movs	r0, #1
 800b378:	f00d f840 	bl	80183fc <traceIF_uartPrint>
	START_PARAM_LOOP()
 800b37c:	463a      	mov	r2, r7
 800b37e:	4641      	mov	r1, r8
 800b380:	4650      	mov	r0, sl
 800b382:	f7fc fef3 	bl	800816c <atcc_extractElement>
 800b386:	89fb      	ldrh	r3, [r7, #14]
 800b388:	9001      	str	r0, [sp, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d051      	beq.n	800b432 <fRspAnalyze_CPIN+0xf6>
			if (element_infos->param_rank == 2U) {
 800b38e:	893e      	ldrh	r6, [r7, #8]
 800b390:	2e02      	cmp	r6, #2
 800b392:	d14e      	bne.n	800b432 <fRspAnalyze_CPIN+0xf6>
				AT_CHAR_t line[32] = { 0U };
 800b394:	221c      	movs	r2, #28
 800b396:	2100      	movs	r1, #0
 800b398:	a803      	add	r0, sp, #12
 800b39a:	9102      	str	r1, [sp, #8]
 800b39c:	f011 fd5c 	bl	801ce58 <memset>
				PRINT_DBG("CPIN parameter received:")
 800b3a0:	497f      	ldr	r1, [pc, #508]	; (800b5a0 <fRspAnalyze_CPIN+0x264>)
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f011 fdf8 	bl	801cf98 <strcpy>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f00c fdc3 	bl	8017f34 <crs_strlen>
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	b283      	uxth	r3, r0
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	f00c fdfb 	bl	8017fb0 <traceIF_itmPrint>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f00c fdba 	bl	8017f34 <crs_strlen>
 800b3c0:	4622      	mov	r2, r4
 800b3c2:	b283      	uxth	r3, r0
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	f00d f818 	bl	80183fc <traceIF_uartPrint>
				PRINT_BUF(
 800b3cc:	897a      	ldrh	r2, [r7, #10]
 800b3ce:	89fb      	ldrh	r3, [r7, #14]
 800b3d0:	4442      	add	r2, r8
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	f00d f82f 	bl	8018438 <traceIF_BufCharPrint>
				if (element_infos->str_size <= 32U) {
 800b3da:	89fa      	ldrh	r2, [r7, #14]
 800b3dc:	2a20      	cmp	r2, #32
 800b3de:	f200 80c4 	bhi.w	800b56a <fRspAnalyze_CPIN+0x22e>
							(const void*) &(p_msg_in->buffer[element_infos->str_start_idx]),
 800b3e2:	8979      	ldrh	r1, [r7, #10]
					(void) memcpy((void*) &line[0],
 800b3e4:	a802      	add	r0, sp, #8
 800b3e6:	4441      	add	r1, r8
 800b3e8:	f011 fd28 	bl	801ce3c <memcpy>
					if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800b3ec:	496d      	ldr	r1, [pc, #436]	; (800b5a4 <fRspAnalyze_CPIN+0x268>)
 800b3ee:	a802      	add	r0, sp, #8
 800b3f0:	f011 fdff 	bl	801cff2 <strstr>
 800b3f4:	b320      	cbz	r0, 800b440 <fRspAnalyze_CPIN+0x104>
						PRINT_DBG("waiting for SIM PIN")
 800b3f6:	496c      	ldr	r1, [pc, #432]	; (800b5a8 <fRspAnalyze_CPIN+0x26c>)
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f011 fdcd 	bl	801cf98 <strcpy>
 800b3fe:	4620      	mov	r0, r4
 800b400:	f00c fd98 	bl	8017f34 <crs_strlen>
 800b404:	4622      	mov	r2, r4
 800b406:	b283      	uxth	r3, r0
 800b408:	4631      	mov	r1, r6
 800b40a:	2001      	movs	r0, #1
 800b40c:	f00c fdd0 	bl	8017fb0 <traceIF_itmPrint>
 800b410:	4620      	mov	r0, r4
 800b412:	f00c fd8f 	bl	8017f34 <crs_strlen>
 800b416:	4622      	mov	r2, r4
 800b418:	b283      	uxth	r3, r0
 800b41a:	4631      	mov	r1, r6
 800b41c:	2001      	movs	r0, #1
 800b41e:	f00c ffed 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800b422:	f44f 63c0 	mov.w	r3, #1536	; 0x600
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800b426:	f8a5 351a 	strh.w	r3, [r5, #1306]	; 0x51a
						atcm_set_error_report(CSERR_SIM, p_modem_ctxt);
 800b42a:	4629      	mov	r1, r5
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7fe fb9d 	bl	8009b6c <atcm_set_error_report>
					retval = ATACTION_RSP_IGNORED;
				}

			}END_PARAM_LOOP()
 800b432:	9b01      	ldr	r3, [sp, #4]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d0a1      	beq.n	800b37c <fRspAnalyze_CPIN+0x40>
	return (retval);
}
 800b438:	2010      	movs	r0, #16
 800b43a:	b00b      	add	sp, #44	; 0x2c
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800b440:	495a      	ldr	r1, [pc, #360]	; (800b5ac <fRspAnalyze_CPIN+0x270>)
 800b442:	a802      	add	r0, sp, #8
 800b444:	f011 fdd5 	bl	801cff2 <strstr>
 800b448:	b1c0      	cbz	r0, 800b47c <fRspAnalyze_CPIN+0x140>
						PRINT_DBG("waiting for SIM PUK")
 800b44a:	4959      	ldr	r1, [pc, #356]	; (800b5b0 <fRspAnalyze_CPIN+0x274>)
 800b44c:	4620      	mov	r0, r4
 800b44e:	f011 fda3 	bl	801cf98 <strcpy>
 800b452:	4620      	mov	r0, r4
 800b454:	f00c fd6e 	bl	8017f34 <crs_strlen>
 800b458:	4622      	mov	r2, r4
 800b45a:	b283      	uxth	r3, r0
 800b45c:	2102      	movs	r1, #2
 800b45e:	2001      	movs	r0, #1
 800b460:	f00c fda6 	bl	8017fb0 <traceIF_itmPrint>
 800b464:	4620      	mov	r0, r4
 800b466:	f00c fd65 	bl	8017f34 <crs_strlen>
 800b46a:	4622      	mov	r2, r4
 800b46c:	b283      	uxth	r3, r0
 800b46e:	2102      	movs	r1, #2
 800b470:	2001      	movs	r0, #1
 800b472:	f00c ffc3 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800b476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b47a:	e7d4      	b.n	800b426 <fRspAnalyze_CPIN+0xea>
					} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800b47c:	494d      	ldr	r1, [pc, #308]	; (800b5b4 <fRspAnalyze_CPIN+0x278>)
 800b47e:	a802      	add	r0, sp, #8
 800b480:	f011 fdb7 	bl	801cff2 <strstr>
 800b484:	b1c0      	cbz	r0, 800b4b8 <fRspAnalyze_CPIN+0x17c>
						PRINT_DBG("waiting for SIM PUK2")
 800b486:	494c      	ldr	r1, [pc, #304]	; (800b5b8 <fRspAnalyze_CPIN+0x27c>)
 800b488:	4620      	mov	r0, r4
 800b48a:	f011 fd85 	bl	801cf98 <strcpy>
 800b48e:	4620      	mov	r0, r4
 800b490:	f00c fd50 	bl	8017f34 <crs_strlen>
 800b494:	4622      	mov	r2, r4
 800b496:	b283      	uxth	r3, r0
 800b498:	4631      	mov	r1, r6
 800b49a:	2001      	movs	r0, #1
 800b49c:	f00c fd88 	bl	8017fb0 <traceIF_itmPrint>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f00c fd47 	bl	8017f34 <crs_strlen>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	b283      	uxth	r3, r0
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	f00c ffa5 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800b4b2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b4b6:	e7b6      	b.n	800b426 <fRspAnalyze_CPIN+0xea>
					} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800b4b8:	4940      	ldr	r1, [pc, #256]	; (800b5bc <fRspAnalyze_CPIN+0x280>)
 800b4ba:	a802      	add	r0, sp, #8
 800b4bc:	f011 fd99 	bl	801cff2 <strstr>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d1c2      	bne.n	800b44a <fRspAnalyze_CPIN+0x10e>
					} else if ((AT_CHAR_t*) strstr((const CRC_CHAR_t*) &line[0],
 800b4c4:	493e      	ldr	r1, [pc, #248]	; (800b5c0 <fRspAnalyze_CPIN+0x284>)
 800b4c6:	a802      	add	r0, sp, #8
 800b4c8:	f011 fd93 	bl	801cff2 <strstr>
 800b4cc:	4681      	mov	r9, r0
 800b4ce:	b398      	cbz	r0, 800b538 <fRspAnalyze_CPIN+0x1fc>
						PRINT_DBG("CPIN READY")
 800b4d0:	493c      	ldr	r1, [pc, #240]	; (800b5c4 <fRspAnalyze_CPIN+0x288>)
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f011 fd60 	bl	801cf98 <strcpy>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f00c fd2b 	bl	8017f34 <crs_strlen>
 800b4de:	4622      	mov	r2, r4
 800b4e0:	b283      	uxth	r3, r0
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	2001      	movs	r0, #1
 800b4e6:	f00c fd63 	bl	8017fb0 <traceIF_itmPrint>
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f00c fd22 	bl	8017f34 <crs_strlen>
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	b283      	uxth	r3, r0
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	f00c ff80 	bl	80183fc <traceIF_uartPrint>
						PRINT_INFO("CPIN READY")
 800b4fc:	4931      	ldr	r1, [pc, #196]	; (800b5c4 <fRspAnalyze_CPIN+0x288>)
 800b4fe:	4620      	mov	r0, r4
 800b500:	f011 fd4a 	bl	801cf98 <strcpy>
 800b504:	4620      	mov	r0, r4
 800b506:	f00c fd15 	bl	8017f34 <crs_strlen>
 800b50a:	2101      	movs	r1, #1
 800b50c:	b283      	uxth	r3, r0
 800b50e:	4622      	mov	r2, r4
 800b510:	4608      	mov	r0, r1
 800b512:	f00c fd4d 	bl	8017fb0 <traceIF_itmPrint>
 800b516:	4620      	mov	r0, r4
 800b518:	f00c fd0c 	bl	8017f34 <crs_strlen>
 800b51c:	2101      	movs	r1, #1
 800b51e:	b283      	uxth	r3, r0
 800b520:	4622      	mov	r2, r4
 800b522:	4608      	mov	r0, r1
 800b524:	f00c ff6a 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->persist.modem_sim_ready = AT_TRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	f885 3519 	strb.w	r3, [r5, #1305]	; 0x519
						p_modem_ctxt->persist.sim_pin_code_ready = AT_TRUE;
 800b52e:	f240 1301 	movw	r3, #257	; 0x101
 800b532:	f8a5 351a 	strh.w	r3, [r5, #1306]	; 0x51a
 800b536:	e77c      	b.n	800b432 <fRspAnalyze_CPIN+0xf6>
						PRINT_ERR("UNEXPECTED CPIN STATE")
 800b538:	4923      	ldr	r1, [pc, #140]	; (800b5c8 <fRspAnalyze_CPIN+0x28c>)
 800b53a:	4620      	mov	r0, r4
 800b53c:	f011 fd2c 	bl	801cf98 <strcpy>
 800b540:	4620      	mov	r0, r4
 800b542:	f00c fcf7 	bl	8017f34 <crs_strlen>
 800b546:	4622      	mov	r2, r4
 800b548:	b283      	uxth	r3, r0
 800b54a:	2110      	movs	r1, #16
 800b54c:	2001      	movs	r0, #1
 800b54e:	f00c fd2f 	bl	8017fb0 <traceIF_itmPrint>
 800b552:	4620      	mov	r0, r4
 800b554:	f00c fcee 	bl	8017f34 <crs_strlen>
 800b558:	4622      	mov	r2, r4
 800b55a:	b283      	uxth	r3, r0
 800b55c:	2110      	movs	r1, #16
 800b55e:	2001      	movs	r0, #1
 800b560:	f00c ff4c 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->persist.sim_pin_code_ready = AT_FALSE;
 800b564:	f8a5 951a 	strh.w	r9, [r5, #1306]	; 0x51a
						atcm_set_error_report(CSERR_SIM, p_modem_ctxt);
 800b568:	e75f      	b.n	800b42a <fRspAnalyze_CPIN+0xee>
					PRINT_ERR("line exceed maximum size, line ignored...")
 800b56a:	4659      	mov	r1, fp
 800b56c:	4620      	mov	r0, r4
 800b56e:	f011 fd13 	bl	801cf98 <strcpy>
 800b572:	4620      	mov	r0, r4
 800b574:	f00c fcde 	bl	8017f34 <crs_strlen>
 800b578:	4622      	mov	r2, r4
 800b57a:	b283      	uxth	r3, r0
 800b57c:	2110      	movs	r1, #16
 800b57e:	2001      	movs	r0, #1
 800b580:	f00c fd16 	bl	8017fb0 <traceIF_itmPrint>
 800b584:	4620      	mov	r0, r4
 800b586:	f00c fcd5 	bl	8017f34 <crs_strlen>
 800b58a:	4622      	mov	r2, r4
 800b58c:	b283      	uxth	r3, r0
 800b58e:	2110      	movs	r1, #16
 800b590:	2001      	movs	r0, #1
 800b592:	f00c ff33 	bl	80183fc <traceIF_uartPrint>
					retval = ATACTION_RSP_IGNORED;
 800b596:	e74c      	b.n	800b432 <fRspAnalyze_CPIN+0xf6>
 800b598:	20008ef8 	.word	0x20008ef8
 800b59c:	0802570c 	.word	0x0802570c
 800b5a0:	08025734 	.word	0x08025734
 800b5a4:	08025758 	.word	0x08025758
 800b5a8:	08025760 	.word	0x08025760
 800b5ac:	0802577f 	.word	0x0802577f
 800b5b0:	08025787 	.word	0x08025787
 800b5b4:	080257a6 	.word	0x080257a6
 800b5b8:	080257af 	.word	0x080257af
 800b5bc:	080257cf 	.word	0x080257cf
 800b5c0:	0802aa44 	.word	0x0802aa44
 800b5c4:	080257d8 	.word	0x080257d8
 800b5c8:	080257ee 	.word	0x080257ee
 800b5cc:	08025155 	.word	0x08025155

0800b5d0 <fRspAnalyze_COPS>:
	return (retval);
}

at_action_rsp_t fRspAnalyze_COPS(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	460d      	mov	r5, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_COPS()")
 800b5d8:	48b2      	ldr	r0, [pc, #712]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b5da:	49b3      	ldr	r1, [pc, #716]	; (800b8a8 <fRspAnalyze_COPS+0x2d8>)
		at_element_info_t *element_infos) {
 800b5dc:	4617      	mov	r7, r2
 800b5de:	461e      	mov	r6, r3
	PRINT_API("enter fRspAnalyze_COPS()")
 800b5e0:	f011 fcda 	bl	801cf98 <strcpy>
 800b5e4:	48af      	ldr	r0, [pc, #700]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b5e6:	f00c fca5 	bl	8017f34 <crs_strlen>
 800b5ea:	4aae      	ldr	r2, [pc, #696]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b5ec:	b283      	uxth	r3, r0
 800b5ee:	2104      	movs	r1, #4
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f00c fcdd 	bl	8017fb0 <traceIF_itmPrint>
 800b5f6:	48ab      	ldr	r0, [pc, #684]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b5f8:	f00c fc9c 	bl	8017f34 <crs_strlen>
 800b5fc:	4aa9      	ldr	r2, [pc, #676]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b5fe:	b283      	uxth	r3, r0
 800b600:	2104      	movs	r1, #4
 800b602:	2001      	movs	r0, #1
 800b604:	f00c fefa 	bl	80183fc <traceIF_uartPrint>
	 *  2/ answer to COPS test command
	 *     +COPS: [list of supported (<stat>,long alphanumeric <oper>,
	 *            short alphanumeric <oper>,numeric <oper>[,<AcT>])s]
	 *            [,,(list ofsupported <mode>s),(list of supported <format>s)]
	 */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800b608:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d13a      	bne.n	800b686 <fRspAnalyze_COPS+0xb6>
					default:
						PRINT_ERR("invalid AcT value")
						break;
					}

					PRINT_DBG("+COPS: Access technology = %ld", AcT)
 800b610:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 800b8d0 <fRspAnalyze_COPS+0x300>
 800b614:	4ca3      	ldr	r4, [pc, #652]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
						PRINT_ERR("invalid AcT value")
 800b616:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800b8d4 <fRspAnalyze_COPS+0x304>
		START_PARAM_LOOP()
 800b61a:	4639      	mov	r1, r7
 800b61c:	4632      	mov	r2, r6
 800b61e:	4648      	mov	r0, r9
 800b620:	f7fc fda4 	bl	800816c <atcc_extractElement>
 800b624:	89f1      	ldrh	r1, [r6, #14]
 800b626:	9001      	str	r0, [sp, #4]
 800b628:	b351      	cbz	r1, 800b680 <fRspAnalyze_COPS+0xb0>
				if (element_infos->param_rank == 2U) {
 800b62a:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 800b62e:	f1b8 0f02 	cmp.w	r8, #2
 800b632:	d147      	bne.n	800b6c4 <fRspAnalyze_COPS+0xf4>
					uint32_t mode = ATutil_convertStringToInt(
 800b634:	8970      	ldrh	r0, [r6, #10]
 800b636:	4438      	add	r0, r7
 800b638:	f003 f86a 	bl	800e710 <ATutil_convertStringToInt>
					switch (mode) {
 800b63c:	2804      	cmp	r0, #4
 800b63e:	d829      	bhi.n	800b694 <fRspAnalyze_COPS+0xc4>
 800b640:	e8df f000 	tbb	[pc, r0]
 800b644:	2824033e 	.word	0x2824033e
 800b648:	26          	.byte	0x26
 800b649:	00          	.byte	0x00
						p_modem_ctxt->SID_ctxt.read_operator_infos.mode =
 800b64a:	2301      	movs	r3, #1
						p_modem_ctxt->SID_ctxt.read_operator_infos.mode =
 800b64c:	f8a5 3628 	strh.w	r3, [r5, #1576]	; 0x628
					PRINT_DBG("+COPS: mode = %d",
 800b650:	f8b5 2628 	ldrh.w	r2, [r5, #1576]	; 0x628
 800b654:	4995      	ldr	r1, [pc, #596]	; (800b8ac <fRspAnalyze_COPS+0x2dc>)
					PRINT_DBG("+COPS: Access technology = %ld", AcT)
 800b656:	4620      	mov	r0, r4
 800b658:	f011 fc2e 	bl	801ceb8 <sprintf>
 800b65c:	4620      	mov	r0, r4
 800b65e:	f00c fc69 	bl	8017f34 <crs_strlen>
 800b662:	4622      	mov	r2, r4
 800b664:	b283      	uxth	r3, r0
 800b666:	2102      	movs	r1, #2
 800b668:	2001      	movs	r0, #1
 800b66a:	f00c fca1 	bl	8017fb0 <traceIF_itmPrint>
 800b66e:	4620      	mov	r0, r4
 800b670:	f00c fc60 	bl	8017f34 <crs_strlen>
 800b674:	4622      	mov	r2, r4
 800b676:	b283      	uxth	r3, r0
 800b678:	2102      	movs	r1, #2
 800b67a:	2001      	movs	r0, #1
 800b67c:	f00c febe 	bl	80183fc <traceIF_uartPrint>

				} else {
					/* parameters ignored */
				}END_PARAM_LOOP()
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d0c9      	beq.n	800b61a <fRspAnalyze_COPS+0x4a>
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
 800b686:	f04f 0810 	mov.w	r8, #16
 800b68a:	e079      	b.n	800b780 <fRspAnalyze_COPS+0x1b0>
						p_modem_ctxt->SID_ctxt.read_operator_infos.mode =
 800b68c:	2302      	movs	r3, #2
 800b68e:	e7dd      	b.n	800b64c <fRspAnalyze_COPS+0x7c>
						p_modem_ctxt->SID_ctxt.read_operator_infos.mode =
 800b690:	2304      	movs	r3, #4
 800b692:	e7db      	b.n	800b64c <fRspAnalyze_COPS+0x7c>
						PRINT_ERR("invalid mode value in +COPS")
 800b694:	4986      	ldr	r1, [pc, #536]	; (800b8b0 <fRspAnalyze_COPS+0x2e0>)
 800b696:	4620      	mov	r0, r4
 800b698:	f011 fc7e 	bl	801cf98 <strcpy>
 800b69c:	4620      	mov	r0, r4
 800b69e:	f00c fc49 	bl	8017f34 <crs_strlen>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	b283      	uxth	r3, r0
 800b6a6:	2110      	movs	r1, #16
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	f00c fc81 	bl	8017fb0 <traceIF_itmPrint>
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f00c fc40 	bl	8017f34 <crs_strlen>
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	b283      	uxth	r3, r0
 800b6b8:	2110      	movs	r1, #16
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	f00c fe9e 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->SID_ctxt.read_operator_infos.mode =
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e7c3      	b.n	800b64c <fRspAnalyze_COPS+0x7c>
				} else if (element_infos->param_rank == 3U) {
 800b6c4:	f1b8 0f03 	cmp.w	r8, #3
 800b6c8:	d12e      	bne.n	800b728 <fRspAnalyze_COPS+0x158>
					uint32_t format = ATutil_convertStringToInt(
 800b6ca:	8970      	ldrh	r0, [r6, #10]
 800b6cc:	4438      	add	r0, r7
 800b6ce:	f003 f81f 	bl	800e710 <ATutil_convertStringToInt>
					p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b6d2:	f8b5 3630 	ldrh.w	r3, [r5, #1584]	; 0x630
					switch (format) {
 800b6d6:	2801      	cmp	r0, #1
					p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b6d8:	f043 0301 	orr.w	r3, r3, #1
 800b6dc:	f8a5 3630 	strh.w	r3, [r5, #1584]	; 0x630
					switch (format) {
 800b6e0:	d002      	beq.n	800b6e8 <fRspAnalyze_COPS+0x118>
 800b6e2:	2802      	cmp	r0, #2
 800b6e4:	d000      	beq.n	800b6e8 <fRspAnalyze_COPS+0x118>
 800b6e6:	b928      	cbnz	r0, 800b6f4 <fRspAnalyze_COPS+0x124>
						p_modem_ctxt->SID_ctxt.read_operator_infos.format =
 800b6e8:	f8a5 0632 	strh.w	r0, [r5, #1586]	; 0x632
					PRINT_DBG("+COPS: format = %d",
 800b6ec:	f8b5 2632 	ldrh.w	r2, [r5, #1586]	; 0x632
 800b6f0:	4970      	ldr	r1, [pc, #448]	; (800b8b4 <fRspAnalyze_COPS+0x2e4>)
 800b6f2:	e7b0      	b.n	800b656 <fRspAnalyze_COPS+0x86>
						PRINT_ERR("invalid format value")
 800b6f4:	4970      	ldr	r1, [pc, #448]	; (800b8b8 <fRspAnalyze_COPS+0x2e8>)
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f011 fc4e 	bl	801cf98 <strcpy>
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f00c fc19 	bl	8017f34 <crs_strlen>
 800b702:	4622      	mov	r2, r4
 800b704:	b283      	uxth	r3, r0
 800b706:	2110      	movs	r1, #16
 800b708:	2001      	movs	r0, #1
 800b70a:	f00c fc51 	bl	8017fb0 <traceIF_itmPrint>
 800b70e:	4620      	mov	r0, r4
 800b710:	f00c fc10 	bl	8017f34 <crs_strlen>
 800b714:	4622      	mov	r2, r4
 800b716:	b283      	uxth	r3, r0
 800b718:	2110      	movs	r1, #16
 800b71a:	2001      	movs	r0, #1
 800b71c:	f00c fe6e 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->SID_ctxt.read_operator_infos.format =
 800b720:	2309      	movs	r3, #9
 800b722:	f8a5 3632 	strh.w	r3, [r5, #1586]	; 0x632
						break;
 800b726:	e7e1      	b.n	800b6ec <fRspAnalyze_COPS+0x11c>
				} else if (element_infos->param_rank == 4U) {
 800b728:	f1b8 0f04 	cmp.w	r8, #4
 800b72c:	d146      	bne.n	800b7bc <fRspAnalyze_COPS+0x1ec>
					if (element_infos->str_size <= MAX_SIZE_OPERATOR_NAME) {
 800b72e:	2940      	cmp	r1, #64	; 0x40
 800b730:	d810      	bhi.n	800b754 <fRspAnalyze_COPS+0x184>
						p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b732:	f8b5 3630 	ldrh.w	r3, [r5, #1584]	; 0x630
								(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800b736:	8970      	ldrh	r0, [r6, #10]
						p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b738:	f043 0302 	orr.w	r3, r3, #2
 800b73c:	f8a5 3630 	strh.w	r3, [r5, #1584]	; 0x630
								(void*) &(p_modem_ctxt->SID_ctxt.read_operator_infos.operator_name[0]),
 800b740:	f205 6334 	addw	r3, r5, #1588	; 0x634
						(void) memcpy(
 800b744:	460a      	mov	r2, r1
 800b746:	1839      	adds	r1, r7, r0
 800b748:	4618      	mov	r0, r3
 800b74a:	f011 fb77 	bl	801ce3c <memcpy>
						PRINT_DBG("+COPS: operator name = %s",
 800b74e:	495b      	ldr	r1, [pc, #364]	; (800b8bc <fRspAnalyze_COPS+0x2ec>)
 800b750:	4602      	mov	r2, r0
 800b752:	e780      	b.n	800b656 <fRspAnalyze_COPS+0x86>
						PRINT_ERR("error, operator name too long")
 800b754:	495a      	ldr	r1, [pc, #360]	; (800b8c0 <fRspAnalyze_COPS+0x2f0>)
 800b756:	4853      	ldr	r0, [pc, #332]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b758:	f011 fc1e 	bl	801cf98 <strcpy>
 800b75c:	4851      	ldr	r0, [pc, #324]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b75e:	f00c fbe9 	bl	8017f34 <crs_strlen>
 800b762:	4a50      	ldr	r2, [pc, #320]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b764:	b283      	uxth	r3, r0
 800b766:	2110      	movs	r1, #16
 800b768:	2001      	movs	r0, #1
 800b76a:	f00c fc21 	bl	8017fb0 <traceIF_itmPrint>
 800b76e:	484d      	ldr	r0, [pc, #308]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b770:	f00c fbe0 	bl	8017f34 <crs_strlen>
 800b774:	4a4b      	ldr	r2, [pc, #300]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b776:	b283      	uxth	r3, r0
 800b778:	2110      	movs	r1, #16
 800b77a:	2001      	movs	r0, #1
 800b77c:	f00c fe3e 	bl	80183fc <traceIF_uartPrint>
	}

	if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800b780:	f8b9 4018 	ldrh.w	r4, [r9, #24]
 800b784:	2c01      	cmp	r4, #1
 800b786:	d115      	bne.n	800b7b4 <fRspAnalyze_COPS+0x1e4>
		PRINT_DBG("+COPS for test cmd NOT IMPLEMENTED")
 800b788:	494e      	ldr	r1, [pc, #312]	; (800b8c4 <fRspAnalyze_COPS+0x2f4>)
 800b78a:	4846      	ldr	r0, [pc, #280]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b78c:	f011 fc04 	bl	801cf98 <strcpy>
 800b790:	4844      	ldr	r0, [pc, #272]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b792:	f00c fbcf 	bl	8017f34 <crs_strlen>
 800b796:	4a43      	ldr	r2, [pc, #268]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b798:	b283      	uxth	r3, r0
 800b79a:	2102      	movs	r1, #2
 800b79c:	4620      	mov	r0, r4
 800b79e:	f00c fc07 	bl	8017fb0 <traceIF_itmPrint>
 800b7a2:	4840      	ldr	r0, [pc, #256]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b7a4:	f00c fbc6 	bl	8017f34 <crs_strlen>
 800b7a8:	4a3e      	ldr	r2, [pc, #248]	; (800b8a4 <fRspAnalyze_COPS+0x2d4>)
 800b7aa:	b283      	uxth	r3, r0
 800b7ac:	2102      	movs	r1, #2
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f00c fe24 	bl	80183fc <traceIF_uartPrint>
	}

	return (retval);
}
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	b003      	add	sp, #12
 800b7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				} else if (element_infos->param_rank == 5U) {
 800b7bc:	f1b8 0f05 	cmp.w	r8, #5
 800b7c0:	f47f af5e 	bne.w	800b680 <fRspAnalyze_COPS+0xb0>
					p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b7c4:	f8b5 3630 	ldrh.w	r3, [r5, #1584]	; 0x630
					uint32_t AcT = ATutil_convertStringToInt(
 800b7c8:	8970      	ldrh	r0, [r6, #10]
					p_modem_ctxt->SID_ctxt.read_operator_infos.optional_fields_presence |=
 800b7ca:	f043 0304 	orr.w	r3, r3, #4
 800b7ce:	f8a5 3630 	strh.w	r3, [r5, #1584]	; 0x630
					uint32_t AcT = ATutil_convertStringToInt(
 800b7d2:	4438      	add	r0, r7
 800b7d4:	f002 ff9c 	bl	800e710 <ATutil_convertStringToInt>
 800b7d8:	4680      	mov	r8, r0
					switch (AcT) {
 800b7da:	2809      	cmp	r0, #9
 800b7dc:	d84a      	bhi.n	800b874 <fRspAnalyze_COPS+0x2a4>
 800b7de:	e8df f000 	tbb	[pc, r0]
 800b7e2:	0b05      	.short	0x0b05
 800b7e4:	13110f0d 	.word	0x13110f0d
 800b7e8:	312f1715 	.word	0x312f1715
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b7ec:	2300      	movs	r3, #0
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b7ee:	f8a5 3674 	strh.w	r3, [r5, #1652]	; 0x674
					PRINT_DBG("+COPS: Access technology = %ld", AcT)
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	4651      	mov	r1, sl
 800b7f6:	e72e      	b.n	800b656 <fRspAnalyze_COPS+0x86>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e7f8      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e7f6      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b800:	2303      	movs	r3, #3
 800b802:	e7f4      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b804:	2304      	movs	r3, #4
 800b806:	e7f2      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b808:	2305      	movs	r3, #5
 800b80a:	e7f0      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b80c:	2306      	movs	r3, #6
 800b80e:	e7ee      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						PRINT_DBG(">>> Access Technology : LTE Cat.M1 <<<")
 800b810:	492d      	ldr	r1, [pc, #180]	; (800b8c8 <fRspAnalyze_COPS+0x2f8>)
 800b812:	4620      	mov	r0, r4
 800b814:	f011 fbc0 	bl	801cf98 <strcpy>
 800b818:	4620      	mov	r0, r4
 800b81a:	f00c fb8b 	bl	8017f34 <crs_strlen>
 800b81e:	4622      	mov	r2, r4
 800b820:	b283      	uxth	r3, r0
 800b822:	2102      	movs	r1, #2
 800b824:	2001      	movs	r0, #1
 800b826:	f00c fbc3 	bl	8017fb0 <traceIF_itmPrint>
 800b82a:	4620      	mov	r0, r4
 800b82c:	f00c fb82 	bl	8017f34 <crs_strlen>
 800b830:	4622      	mov	r2, r4
 800b832:	b283      	uxth	r3, r0
 800b834:	2102      	movs	r1, #2
 800b836:	2001      	movs	r0, #1
 800b838:	f00c fde0 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b83c:	2307      	movs	r3, #7
 800b83e:	e7d6      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b840:	2308      	movs	r3, #8
 800b842:	e7d4      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						PRINT_DBG(">>> Access Technology : LTE Cat.NB1 <<<")
 800b844:	4921      	ldr	r1, [pc, #132]	; (800b8cc <fRspAnalyze_COPS+0x2fc>)
 800b846:	4620      	mov	r0, r4
 800b848:	f011 fba6 	bl	801cf98 <strcpy>
 800b84c:	4620      	mov	r0, r4
 800b84e:	f00c fb71 	bl	8017f34 <crs_strlen>
 800b852:	4622      	mov	r2, r4
 800b854:	b283      	uxth	r3, r0
 800b856:	2102      	movs	r1, #2
 800b858:	2001      	movs	r0, #1
 800b85a:	f00c fba9 	bl	8017fb0 <traceIF_itmPrint>
 800b85e:	4620      	mov	r0, r4
 800b860:	f00c fb68 	bl	8017f34 <crs_strlen>
 800b864:	4622      	mov	r2, r4
 800b866:	b283      	uxth	r3, r0
 800b868:	2102      	movs	r1, #2
 800b86a:	2001      	movs	r0, #1
 800b86c:	f00c fdc6 	bl	80183fc <traceIF_uartPrint>
						p_modem_ctxt->SID_ctxt.read_operator_infos.AcT =
 800b870:	2309      	movs	r3, #9
 800b872:	e7bc      	b.n	800b7ee <fRspAnalyze_COPS+0x21e>
						PRINT_ERR("invalid AcT value")
 800b874:	4659      	mov	r1, fp
 800b876:	4620      	mov	r0, r4
 800b878:	f011 fb8e 	bl	801cf98 <strcpy>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f00c fb59 	bl	8017f34 <crs_strlen>
 800b882:	4622      	mov	r2, r4
 800b884:	b283      	uxth	r3, r0
 800b886:	2110      	movs	r1, #16
 800b888:	2001      	movs	r0, #1
 800b88a:	f00c fb91 	bl	8017fb0 <traceIF_itmPrint>
 800b88e:	4620      	mov	r0, r4
 800b890:	f00c fb50 	bl	8017f34 <crs_strlen>
 800b894:	4622      	mov	r2, r4
 800b896:	b283      	uxth	r3, r0
 800b898:	2110      	movs	r1, #16
 800b89a:	2001      	movs	r0, #1
 800b89c:	f00c fdae 	bl	80183fc <traceIF_uartPrint>
						break;
 800b8a0:	e7a7      	b.n	800b7f2 <fRspAnalyze_COPS+0x222>
 800b8a2:	bf00      	nop
 800b8a4:	20008ef8 	.word	0x20008ef8
 800b8a8:	08025815 	.word	0x08025815
 800b8ac:	0802586a 	.word	0x0802586a
 800b8b0:	0802583d 	.word	0x0802583d
 800b8b4:	080258ac 	.word	0x080258ac
 800b8b8:	08025886 	.word	0x08025886
 800b8bc:	080258ca 	.word	0x080258ca
 800b8c0:	080258ef 	.word	0x080258ef
 800b8c4:	080259d0 	.word	0x080259d0
 800b8c8:	0802591e 	.word	0x0802591e
 800b8cc:	08025950 	.word	0x08025950
 800b8d0:	080259a6 	.word	0x080259a6
 800b8d4:	08025983 	.word	0x08025983

0800b8d8 <fRspAnalyze_CNUM>:

at_action_rsp_t fRspAnalyze_CNUM(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b8d8:	b510      	push	{r4, lr}
	UNUSED(p_modem_ctxt);
	UNUSED(p_msg_in);
	UNUSED(element_infos);

	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fCmdBuild_CNUM()")
 800b8da:	4c17      	ldr	r4, [pc, #92]	; (800b938 <fRspAnalyze_CNUM+0x60>)
 800b8dc:	4917      	ldr	r1, [pc, #92]	; (800b93c <fRspAnalyze_CNUM+0x64>)
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f011 fb5a 	bl	801cf98 <strcpy>
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f00c fb25 	bl	8017f34 <crs_strlen>
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	b283      	uxth	r3, r0
 800b8ee:	2104      	movs	r1, #4
 800b8f0:	2001      	movs	r0, #1
 800b8f2:	f00c fb5d 	bl	8017fb0 <traceIF_itmPrint>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f00c fb1c 	bl	8017f34 <crs_strlen>
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	b283      	uxth	r3, r0
 800b900:	2104      	movs	r1, #4
 800b902:	2001      	movs	r0, #1
 800b904:	f00c fd7a 	bl	80183fc <traceIF_uartPrint>

	PRINT_DBG("+CNUM cmd NOT IMPLEMENTED")
 800b908:	490d      	ldr	r1, [pc, #52]	; (800b940 <fRspAnalyze_CNUM+0x68>)
 800b90a:	4620      	mov	r0, r4
 800b90c:	f011 fb44 	bl	801cf98 <strcpy>
 800b910:	4620      	mov	r0, r4
 800b912:	f00c fb0f 	bl	8017f34 <crs_strlen>
 800b916:	4622      	mov	r2, r4
 800b918:	b283      	uxth	r3, r0
 800b91a:	2102      	movs	r1, #2
 800b91c:	2001      	movs	r0, #1
 800b91e:	f00c fb47 	bl	8017fb0 <traceIF_itmPrint>
 800b922:	4620      	mov	r0, r4
 800b924:	f00c fb06 	bl	8017f34 <crs_strlen>
 800b928:	4622      	mov	r2, r4
 800b92a:	b283      	uxth	r3, r0
 800b92c:	2102      	movs	r1, #2
 800b92e:	2001      	movs	r0, #1
 800b930:	f00c fd64 	bl	80183fc <traceIF_uartPrint>

	return (retval);
}
 800b934:	2010      	movs	r0, #16
 800b936:	bd10      	pop	{r4, pc}
 800b938:	20008ef8 	.word	0x20008ef8
 800b93c:	080259fe 	.word	0x080259fe
 800b940:	08025a24 	.word	0x08025a24

0800b944 <fRspAnalyze_CGATT>:

at_action_rsp_t fRspAnalyze_CGATT(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800b944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	4605      	mov	r5, r0
 800b94a:	4689      	mov	r9, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGATT()")
 800b94c:	4834      	ldr	r0, [pc, #208]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b94e:	4935      	ldr	r1, [pc, #212]	; (800ba24 <fRspAnalyze_CGATT+0xe0>)
		at_element_info_t *element_infos) {
 800b950:	4617      	mov	r7, r2
 800b952:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGATT()")
 800b954:	f011 fb20 	bl	801cf98 <strcpy>
 800b958:	4831      	ldr	r0, [pc, #196]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b95a:	f00c faeb 	bl	8017f34 <crs_strlen>
 800b95e:	4a30      	ldr	r2, [pc, #192]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b960:	b283      	uxth	r3, r0
 800b962:	2104      	movs	r1, #4
 800b964:	2001      	movs	r0, #1
 800b966:	f00c fb23 	bl	8017fb0 <traceIF_itmPrint>
 800b96a:	482d      	ldr	r0, [pc, #180]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b96c:	f00c fae2 	bl	8017f34 <crs_strlen>
 800b970:	4a2b      	ldr	r2, [pc, #172]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b972:	b283      	uxth	r3, r0
 800b974:	2104      	movs	r1, #4
 800b976:	2001      	movs	r0, #1
 800b978:	f00c fd40 	bl	80183fc <traceIF_uartPrint>
	 *  1/ answer to CGATT read command
	 *     +CGATT: <state>
	 *  2/ answer to CGATT test command
	 *     +CGATT: (list of supported <state>s)
	 */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800b97c:	8b2b      	ldrh	r3, [r5, #24]
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d131      	bne.n	800b9e6 <fRspAnalyze_CGATT+0xa2>
					uint32_t attach = ATutil_convertStringToInt(
							&p_msg_in->buffer[element_infos->str_start_idx],
							element_infos->str_size);
					p_modem_ctxt->SID_ctxt.attach_status =
							(attach == 1U) ? CS_PS_ATTACHED : CS_PS_DETACHED;
					PRINT_DBG("attach status = %d",
 800b982:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 800ba2c <fRspAnalyze_CGATT+0xe8>
 800b986:	4e26      	ldr	r6, [pc, #152]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
		START_PARAM_LOOP()
 800b988:	4639      	mov	r1, r7
 800b98a:	4622      	mov	r2, r4
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7fc fbed 	bl	800816c <atcc_extractElement>
 800b992:	89e1      	ldrh	r1, [r4, #14]
 800b994:	4680      	mov	r8, r0
 800b996:	b319      	cbz	r1, 800b9e0 <fRspAnalyze_CGATT+0x9c>
				if (element_infos->param_rank == 2U) {
 800b998:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800b99c:	f1ba 0f02 	cmp.w	sl, #2
 800b9a0:	d11e      	bne.n	800b9e0 <fRspAnalyze_CGATT+0x9c>
					uint32_t attach = ATutil_convertStringToInt(
 800b9a2:	8960      	ldrh	r0, [r4, #10]
 800b9a4:	4438      	add	r0, r7
 800b9a6:	f002 feb3 	bl	800e710 <ATutil_convertStringToInt>
							(attach == 1U) ? CS_PS_ATTACHED : CS_PS_DETACHED;
 800b9aa:	1e43      	subs	r3, r0, #1
 800b9ac:	425a      	negs	r2, r3
 800b9ae:	415a      	adcs	r2, r3
					p_modem_ctxt->SID_ctxt.attach_status =
 800b9b0:	f889 267d 	strb.w	r2, [r9, #1661]	; 0x67d
					PRINT_DBG("attach status = %d",
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f011 fa7e 	bl	801ceb8 <sprintf>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f00c fab9 	bl	8017f34 <crs_strlen>
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	b283      	uxth	r3, r0
 800b9c6:	4651      	mov	r1, sl
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	f00c faf1 	bl	8017fb0 <traceIF_itmPrint>
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f00c fab0 	bl	8017f34 <crs_strlen>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	b283      	uxth	r3, r0
 800b9d8:	4651      	mov	r1, sl
 800b9da:	2001      	movs	r0, #1
 800b9dc:	f00c fd0e 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->SID_ctxt.attach_status)
				}END_PARAM_LOOP()
 800b9e0:	f1b8 0f01 	cmp.w	r8, #1
 800b9e4:	d0d0      	beq.n	800b988 <fRspAnalyze_CGATT+0x44>
	}

	if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800b9e6:	8b2c      	ldrh	r4, [r5, #24]
 800b9e8:	2c01      	cmp	r4, #1
 800b9ea:	d115      	bne.n	800ba18 <fRspAnalyze_CGATT+0xd4>
		PRINT_DBG("+CGATT for test cmd NOT IMPLEMENTED")
 800b9ec:	490e      	ldr	r1, [pc, #56]	; (800ba28 <fRspAnalyze_CGATT+0xe4>)
 800b9ee:	480c      	ldr	r0, [pc, #48]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b9f0:	f011 fad2 	bl	801cf98 <strcpy>
 800b9f4:	480a      	ldr	r0, [pc, #40]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b9f6:	f00c fa9d 	bl	8017f34 <crs_strlen>
 800b9fa:	4a09      	ldr	r2, [pc, #36]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800b9fc:	b283      	uxth	r3, r0
 800b9fe:	2102      	movs	r1, #2
 800ba00:	4620      	mov	r0, r4
 800ba02:	f00c fad5 	bl	8017fb0 <traceIF_itmPrint>
 800ba06:	4806      	ldr	r0, [pc, #24]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800ba08:	f00c fa94 	bl	8017f34 <crs_strlen>
 800ba0c:	4a04      	ldr	r2, [pc, #16]	; (800ba20 <fRspAnalyze_CGATT+0xdc>)
 800ba0e:	b283      	uxth	r3, r0
 800ba10:	2102      	movs	r1, #2
 800ba12:	4620      	mov	r0, r4
 800ba14:	f00c fcf2 	bl	80183fc <traceIF_uartPrint>
	}

	return (retval);
}
 800ba18:	2010      	movs	r0, #16
 800ba1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	bf00      	nop
 800ba20:	20008ef8 	.word	0x20008ef8
 800ba24:	08025a49 	.word	0x08025a49
 800ba28:	08025a90 	.word	0x08025a90
 800ba2c:	08025a72 	.word	0x08025a72

0800ba30 <fRspAnalyze_CREG>:

at_action_rsp_t fRspAnalyze_CREG(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	4682      	mov	sl, r0
 800ba36:	b085      	sub	sp, #20
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CREG()")
 800ba38:	4872      	ldr	r0, [pc, #456]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
		at_element_info_t *element_infos) {
 800ba3a:	460f      	mov	r7, r1
	PRINT_API("enter fRspAnalyze_CREG()")
 800ba3c:	4972      	ldr	r1, [pc, #456]	; (800bc08 <fRspAnalyze_CREG+0x1d8>)
		at_element_info_t *element_infos) {
 800ba3e:	4616      	mov	r6, r2
 800ba40:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CREG()")
 800ba42:	f011 faa9 	bl	801cf98 <strcpy>
 800ba46:	486f      	ldr	r0, [pc, #444]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba48:	f00c fa74 	bl	8017f34 <crs_strlen>
 800ba4c:	4a6d      	ldr	r2, [pc, #436]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba4e:	b283      	uxth	r3, r0
 800ba50:	2104      	movs	r1, #4
 800ba52:	2001      	movs	r0, #1
 800ba54:	f00c faac 	bl	8017fb0 <traceIF_itmPrint>
 800ba58:	486a      	ldr	r0, [pc, #424]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba5a:	f00c fa6b 	bl	8017f34 <crs_strlen>
 800ba5e:	4a69      	ldr	r2, [pc, #420]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba60:	b283      	uxth	r3, r0
 800ba62:	2104      	movs	r1, #4
 800ba64:	2001      	movs	r0, #1
 800ba66:	f00c fcc9 	bl	80183fc <traceIF_uartPrint>
	PRINT_DBG("current cmd = %ld", p_atp_ctxt->current_atcmd.id)
 800ba6a:	f8da 201c 	ldr.w	r2, [sl, #28]
 800ba6e:	4967      	ldr	r1, [pc, #412]	; (800bc0c <fRspAnalyze_CREG+0x1dc>)
 800ba70:	4864      	ldr	r0, [pc, #400]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba72:	f011 fa21 	bl	801ceb8 <sprintf>
 800ba76:	4863      	ldr	r0, [pc, #396]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba78:	f00c fa5c 	bl	8017f34 <crs_strlen>
 800ba7c:	4a61      	ldr	r2, [pc, #388]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba7e:	b283      	uxth	r3, r0
 800ba80:	2102      	movs	r1, #2
 800ba82:	2001      	movs	r0, #1
 800ba84:	f00c fa94 	bl	8017fb0 <traceIF_itmPrint>
 800ba88:	485e      	ldr	r0, [pc, #376]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba8a:	f00c fa53 	bl	8017f34 <crs_strlen>
 800ba8e:	4a5d      	ldr	r2, [pc, #372]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
 800ba90:	b283      	uxth	r3, r0
 800ba92:	2102      	movs	r1, #2
 800ba94:	2001      	movs	r0, #1
 800ba96:	f00c fcb1 	bl	80183fc <traceIF_uartPrint>
	 *  2/ answer to CREG test command
	 *     +CREG: (list of supported <n>s)
	 *  3/ URC:
	 *     +CREG: <stat>[,[<lac>],[<ci>],[<AcT>]]
	 */
	if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT_CREG) {
 800ba9a:	f8da 301c 	ldr.w	r3, [sl, #28]
 800ba9e:	2b17      	cmp	r3, #23
 800baa0:	f000 80be 	beq.w	800bc20 <fRspAnalyze_CREG+0x1f0>
					p_modem_ctxt->persist.cs_location_info.ci = (uint32_t) ci;
					PRINT_INFO("+CREG URC: ci=%ld =0x%lx", ci, ci)
				}
				if (element_infos->param_rank == 5U) {
					/* param traced only */
					PRINT_DBG("+CREG URC: act=%ld",
 800baa4:	f8df b174 	ldr.w	fp, [pc, #372]	; 800bc1c <fRspAnalyze_CREG+0x1ec>
 800baa8:	4d56      	ldr	r5, [pc, #344]	; (800bc04 <fRspAnalyze_CREG+0x1d4>)
		START_PARAM_LOOP()
 800baaa:	4631      	mov	r1, r6
 800baac:	4622      	mov	r2, r4
 800baae:	4650      	mov	r0, sl
 800bab0:	f7fc fb5c 	bl	800816c <atcc_extractElement>
 800bab4:	89e1      	ldrh	r1, [r4, #14]
 800bab6:	9001      	str	r0, [sp, #4]
 800bab8:	2900      	cmp	r1, #0
 800baba:	f000 809d 	beq.w	800bbf8 <fRspAnalyze_CREG+0x1c8>
				if (element_infos->param_rank == 2U) {
 800babe:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800bac2:	f1b9 0f02 	cmp.w	r9, #2
 800bac6:	d12b      	bne.n	800bb20 <fRspAnalyze_CREG+0xf0>
					uint32_t stat = ATutil_convertStringToInt(
 800bac8:	8960      	ldrh	r0, [r4, #10]
 800baca:	4430      	add	r0, r6
 800bacc:	f002 fe20 	bl	800e710 <ATutil_convertStringToInt>
					p_modem_ctxt->persist.urc_avail_cs_network_registration =
 800bad0:	280b      	cmp	r0, #11
					uint32_t stat = ATutil_convertStringToInt(
 800bad2:	4602      	mov	r2, r0
					p_modem_ctxt->persist.urc_avail_cs_network_registration =
 800bad4:	f04f 0801 	mov.w	r8, #1
 800bad8:	bf28      	it	cs
 800bada:	2004      	movcs	r0, #4
 800badc:	b280      	uxth	r0, r0
	display_clear_network_state(retval, network_type);
 800bade:	4641      	mov	r1, r8
					p_modem_ctxt->persist.urc_avail_cs_network_registration =
 800bae0:	f887 801a 	strb.w	r8, [r7, #26]
 800bae4:	9203      	str	r2, [sp, #12]
	display_clear_network_state(retval, network_type);
 800bae6:	9002      	str	r0, [sp, #8]
 800bae8:	f7fe f84a 	bl	8009b80 <display_clear_network_state>
					p_modem_ctxt->persist.cs_network_state =
 800baec:	9802      	ldr	r0, [sp, #8]
					PRINT_DBG("+CREG URC: stat=%ld", stat)
 800baee:	9a03      	ldr	r2, [sp, #12]
 800baf0:	4947      	ldr	r1, [pc, #284]	; (800bc10 <fRspAnalyze_CREG+0x1e0>)
					p_modem_ctxt->persist.cs_network_state =
 800baf2:	f8a7 004c 	strh.w	r0, [r7, #76]	; 0x4c
					PRINT_DBG("+CREG URC: stat=%ld", stat)
 800baf6:	4628      	mov	r0, r5
 800baf8:	f011 f9de 	bl	801ceb8 <sprintf>
 800bafc:	4628      	mov	r0, r5
 800bafe:	f00c fa19 	bl	8017f34 <crs_strlen>
 800bb02:	462a      	mov	r2, r5
 800bb04:	b283      	uxth	r3, r0
 800bb06:	4649      	mov	r1, r9
 800bb08:	4640      	mov	r0, r8
 800bb0a:	f00c fa51 	bl	8017fb0 <traceIF_itmPrint>
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f00c fa10 	bl	8017f34 <crs_strlen>
 800bb14:	462a      	mov	r2, r5
 800bb16:	b283      	uxth	r3, r0
 800bb18:	4649      	mov	r1, r9
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f00c fc6e 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 3U) {
 800bb20:	8923      	ldrh	r3, [r4, #8]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d123      	bne.n	800bb6e <fRspAnalyze_CREG+0x13e>
					uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800bb26:	8960      	ldrh	r0, [r4, #10]
 800bb28:	89e1      	ldrh	r1, [r4, #14]
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	4430      	add	r0, r6
 800bb2e:	f002 fea2 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_cs_location_info_lac =
 800bb32:	f04f 0801 	mov.w	r8, #1
					uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800bb36:	4603      	mov	r3, r0
					PRINT_INFO("+CREG URC: lac=%ld =0x%lx", lac, lac)
 800bb38:	4602      	mov	r2, r0
 800bb3a:	4936      	ldr	r1, [pc, #216]	; (800bc14 <fRspAnalyze_CREG+0x1e4>)
					p_modem_ctxt->persist.cs_location_info.lac = (uint16_t) lac;
 800bb3c:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
					p_modem_ctxt->persist.urc_avail_cs_location_info_lac =
 800bb40:	f887 801b 	strb.w	r8, [r7, #27]
					PRINT_INFO("+CREG URC: lac=%ld =0x%lx", lac, lac)
 800bb44:	4628      	mov	r0, r5
 800bb46:	f011 f9b7 	bl	801ceb8 <sprintf>
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f00c f9f2 	bl	8017f34 <crs_strlen>
 800bb50:	462a      	mov	r2, r5
 800bb52:	b283      	uxth	r3, r0
 800bb54:	4641      	mov	r1, r8
 800bb56:	4640      	mov	r0, r8
 800bb58:	f00c fa2a 	bl	8017fb0 <traceIF_itmPrint>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f00c f9e9 	bl	8017f34 <crs_strlen>
 800bb62:	462a      	mov	r2, r5
 800bb64:	b283      	uxth	r3, r0
 800bb66:	4641      	mov	r1, r8
 800bb68:	4640      	mov	r0, r8
 800bb6a:	f00c fc47 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 4U) {
 800bb6e:	8923      	ldrh	r3, [r4, #8]
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	d122      	bne.n	800bbba <fRspAnalyze_CREG+0x18a>
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bb74:	8960      	ldrh	r0, [r4, #10]
 800bb76:	89e1      	ldrh	r1, [r4, #14]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	4430      	add	r0, r6
 800bb7c:	f002 fe7b 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_cs_location_info_ci =
 800bb80:	f04f 0801 	mov.w	r8, #1
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bb84:	4603      	mov	r3, r0
					PRINT_INFO("+CREG URC: ci=%ld =0x%lx", ci, ci)
 800bb86:	4602      	mov	r2, r0
 800bb88:	4923      	ldr	r1, [pc, #140]	; (800bc18 <fRspAnalyze_CREG+0x1e8>)
					p_modem_ctxt->persist.cs_location_info.ci = (uint32_t) ci;
 800bb8a:	6478      	str	r0, [r7, #68]	; 0x44
					p_modem_ctxt->persist.urc_avail_cs_location_info_ci =
 800bb8c:	f887 801c 	strb.w	r8, [r7, #28]
					PRINT_INFO("+CREG URC: ci=%ld =0x%lx", ci, ci)
 800bb90:	4628      	mov	r0, r5
 800bb92:	f011 f991 	bl	801ceb8 <sprintf>
 800bb96:	4628      	mov	r0, r5
 800bb98:	f00c f9cc 	bl	8017f34 <crs_strlen>
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	b283      	uxth	r3, r0
 800bba0:	4641      	mov	r1, r8
 800bba2:	4640      	mov	r0, r8
 800bba4:	f00c fa04 	bl	8017fb0 <traceIF_itmPrint>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f00c f9c3 	bl	8017f34 <crs_strlen>
 800bbae:	462a      	mov	r2, r5
 800bbb0:	b283      	uxth	r3, r0
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	f00c fc21 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 5U) {
 800bbba:	8923      	ldrh	r3, [r4, #8]
 800bbbc:	2b05      	cmp	r3, #5
 800bbbe:	d11b      	bne.n	800bbf8 <fRspAnalyze_CREG+0x1c8>
					PRINT_DBG("+CREG URC: act=%ld",
 800bbc0:	8960      	ldrh	r0, [r4, #10]
 800bbc2:	89e1      	ldrh	r1, [r4, #14]
 800bbc4:	4430      	add	r0, r6
 800bbc6:	f002 fda3 	bl	800e710 <ATutil_convertStringToInt>
 800bbca:	4659      	mov	r1, fp
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f011 f972 	bl	801ceb8 <sprintf>
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f00c f9ad 	bl	8017f34 <crs_strlen>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	b283      	uxth	r3, r0
 800bbde:	2102      	movs	r1, #2
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f00c f9e5 	bl	8017fb0 <traceIF_itmPrint>
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f00c f9a4 	bl	8017f34 <crs_strlen>
 800bbec:	462a      	mov	r2, r5
 800bbee:	b283      	uxth	r3, r0
 800bbf0:	2102      	movs	r1, #2
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	f00c fc02 	bl	80183fc <traceIF_uartPrint>
							ATutil_convertStringToInt(
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size))
				}END_PARAM_LOOP()
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	f040 80d6 	bne.w	800bdac <fRspAnalyze_CREG+0x37c>
 800bc00:	e753      	b.n	800baaa <fRspAnalyze_CREG+0x7a>
 800bc02:	bf00      	nop
 800bc04:	20008ef8 	.word	0x20008ef8
 800bc08:	08025abf 	.word	0x08025abf
 800bc0c:	08025ae7 	.word	0x08025ae7
 800bc10:	08025bc0 	.word	0x08025bc0
 800bc14:	08025bdf 	.word	0x08025bdf
 800bc18:	08025c04 	.word	0x08025c04
 800bc1c:	08025c28 	.word	0x08025c28
		if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800bc20:	f8ba 5018 	ldrh.w	r5, [sl, #24]
 800bc24:	2d02      	cmp	r5, #2
 800bc26:	f040 80c5 	bne.w	800bdb4 <fRspAnalyze_CREG+0x384>
						PRINT_DBG("+CREG: act=%ld",
 800bc2a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800bdfc <fRspAnalyze_CREG+0x3cc>
 800bc2e:	4d6e      	ldr	r5, [pc, #440]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
						PRINT_INFO("+CREG: ci=%ld =0x%lx", ci, ci)
 800bc30:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 800be00 <fRspAnalyze_CREG+0x3d0>
			START_PARAM_LOOP()
 800bc34:	4631      	mov	r1, r6
 800bc36:	4622      	mov	r2, r4
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f7fc fa97 	bl	800816c <atcc_extractElement>
 800bc3e:	89e1      	ldrh	r1, [r4, #14]
 800bc40:	9001      	str	r0, [sp, #4]
 800bc42:	2900      	cmp	r1, #0
 800bc44:	f000 80ae 	beq.w	800bda4 <fRspAnalyze_CREG+0x374>
					if (element_infos->param_rank == 2U) {
 800bc48:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800bc4c:	f1b9 0f02 	cmp.w	r9, #2
 800bc50:	d11a      	bne.n	800bc88 <fRspAnalyze_CREG+0x258>
						PRINT_DBG("+CREG: n=%ld",
 800bc52:	8960      	ldrh	r0, [r4, #10]
 800bc54:	4430      	add	r0, r6
 800bc56:	f002 fd5b 	bl	800e710 <ATutil_convertStringToInt>
 800bc5a:	4964      	ldr	r1, [pc, #400]	; (800bdec <fRspAnalyze_CREG+0x3bc>)
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f011 f92a 	bl	801ceb8 <sprintf>
 800bc64:	4628      	mov	r0, r5
 800bc66:	f00c f965 	bl	8017f34 <crs_strlen>
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	b283      	uxth	r3, r0
 800bc6e:	4649      	mov	r1, r9
 800bc70:	2001      	movs	r0, #1
 800bc72:	f00c f99d 	bl	8017fb0 <traceIF_itmPrint>
 800bc76:	4628      	mov	r0, r5
 800bc78:	f00c f95c 	bl	8017f34 <crs_strlen>
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	b283      	uxth	r3, r0
 800bc80:	4649      	mov	r1, r9
 800bc82:	2001      	movs	r0, #1
 800bc84:	f00c fbba 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 3U) {
 800bc88:	8923      	ldrh	r3, [r4, #8]
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d127      	bne.n	800bcde <fRspAnalyze_CREG+0x2ae>
						uint32_t stat = ATutil_convertStringToInt(
 800bc8e:	8960      	ldrh	r0, [r4, #10]
 800bc90:	89e1      	ldrh	r1, [r4, #14]
 800bc92:	4430      	add	r0, r6
 800bc94:	f002 fd3c 	bl	800e710 <ATutil_convertStringToInt>
 800bc98:	280b      	cmp	r0, #11
 800bc9a:	4681      	mov	r9, r0
 800bc9c:	bf28      	it	cs
 800bc9e:	2004      	movcs	r0, #4
 800bca0:	b280      	uxth	r0, r0
	display_clear_network_state(retval, network_type);
 800bca2:	2101      	movs	r1, #1
 800bca4:	9002      	str	r0, [sp, #8]
 800bca6:	f7fd ff6b 	bl	8009b80 <display_clear_network_state>
						p_modem_ctxt->persist.cs_network_state =
 800bcaa:	9802      	ldr	r0, [sp, #8]
						PRINT_DBG("+CREG: stat=%ld", stat)
 800bcac:	4950      	ldr	r1, [pc, #320]	; (800bdf0 <fRspAnalyze_CREG+0x3c0>)
						p_modem_ctxt->persist.cs_network_state =
 800bcae:	f8a7 004c 	strh.w	r0, [r7, #76]	; 0x4c
						PRINT_DBG("+CREG: stat=%ld", stat)
 800bcb2:	464a      	mov	r2, r9
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f011 f8ff 	bl	801ceb8 <sprintf>
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f00c f93a 	bl	8017f34 <crs_strlen>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	b283      	uxth	r3, r0
 800bcc4:	2102      	movs	r1, #2
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	f00c f972 	bl	8017fb0 <traceIF_itmPrint>
 800bccc:	4628      	mov	r0, r5
 800bcce:	f00c f931 	bl	8017f34 <crs_strlen>
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	b283      	uxth	r3, r0
 800bcd6:	2102      	movs	r1, #2
 800bcd8:	2001      	movs	r0, #1
 800bcda:	f00c fb8f 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 4U) {
 800bcde:	8922      	ldrh	r2, [r4, #8]
 800bce0:	2a04      	cmp	r2, #4
 800bce2:	d11e      	bne.n	800bd22 <fRspAnalyze_CREG+0x2f2>
						uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800bce4:	8960      	ldrh	r0, [r4, #10]
 800bce6:	89e1      	ldrh	r1, [r4, #14]
 800bce8:	4430      	add	r0, r6
 800bcea:	f002 fdc4 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CREG: lac=%ld =0x%lx", lac, lac)
 800bcee:	4941      	ldr	r1, [pc, #260]	; (800bdf4 <fRspAnalyze_CREG+0x3c4>)
								(uint16_t) lac;
 800bcf0:	f8a7 0048 	strh.w	r0, [r7, #72]	; 0x48
						uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800bcf4:	4603      	mov	r3, r0
						PRINT_INFO("+CREG: lac=%ld =0x%lx", lac, lac)
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f011 f8dd 	bl	801ceb8 <sprintf>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f00c f918 	bl	8017f34 <crs_strlen>
 800bd04:	2101      	movs	r1, #1
 800bd06:	b283      	uxth	r3, r0
 800bd08:	462a      	mov	r2, r5
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	f00c f950 	bl	8017fb0 <traceIF_itmPrint>
 800bd10:	4628      	mov	r0, r5
 800bd12:	f00c f90f 	bl	8017f34 <crs_strlen>
 800bd16:	2101      	movs	r1, #1
 800bd18:	b283      	uxth	r3, r0
 800bd1a:	462a      	mov	r2, r5
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	f00c fb6d 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 5U) {
 800bd22:	8923      	ldrh	r3, [r4, #8]
 800bd24:	2b05      	cmp	r3, #5
 800bd26:	d11e      	bne.n	800bd66 <fRspAnalyze_CREG+0x336>
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bd28:	8960      	ldrh	r0, [r4, #10]
 800bd2a:	89e1      	ldrh	r1, [r4, #14]
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	4430      	add	r0, r6
 800bd30:	f002 fda1 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CREG: ci=%ld =0x%lx", ci, ci)
 800bd34:	4659      	mov	r1, fp
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bd36:	4603      	mov	r3, r0
						PRINT_INFO("+CREG: ci=%ld =0x%lx", ci, ci)
 800bd38:	4602      	mov	r2, r0
						p_modem_ctxt->persist.cs_location_info.ci =
 800bd3a:	6478      	str	r0, [r7, #68]	; 0x44
						PRINT_INFO("+CREG: ci=%ld =0x%lx", ci, ci)
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f011 f8bb 	bl	801ceb8 <sprintf>
 800bd42:	4628      	mov	r0, r5
 800bd44:	f00c f8f6 	bl	8017f34 <crs_strlen>
 800bd48:	2101      	movs	r1, #1
 800bd4a:	b283      	uxth	r3, r0
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	4608      	mov	r0, r1
 800bd50:	f00c f92e 	bl	8017fb0 <traceIF_itmPrint>
 800bd54:	4628      	mov	r0, r5
 800bd56:	f00c f8ed 	bl	8017f34 <crs_strlen>
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	b283      	uxth	r3, r0
 800bd5e:	462a      	mov	r2, r5
 800bd60:	4608      	mov	r0, r1
 800bd62:	f00c fb4b 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 6U) {
 800bd66:	8923      	ldrh	r3, [r4, #8]
 800bd68:	2b06      	cmp	r3, #6
 800bd6a:	d11b      	bne.n	800bda4 <fRspAnalyze_CREG+0x374>
						PRINT_DBG("+CREG: act=%ld",
 800bd6c:	8960      	ldrh	r0, [r4, #10]
 800bd6e:	89e1      	ldrh	r1, [r4, #14]
 800bd70:	4430      	add	r0, r6
 800bd72:	f002 fccd 	bl	800e710 <ATutil_convertStringToInt>
 800bd76:	4641      	mov	r1, r8
 800bd78:	4602      	mov	r2, r0
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f011 f89c 	bl	801ceb8 <sprintf>
 800bd80:	4628      	mov	r0, r5
 800bd82:	f00c f8d7 	bl	8017f34 <crs_strlen>
 800bd86:	462a      	mov	r2, r5
 800bd88:	b283      	uxth	r3, r0
 800bd8a:	2102      	movs	r1, #2
 800bd8c:	2001      	movs	r0, #1
 800bd8e:	f00c f90f 	bl	8017fb0 <traceIF_itmPrint>
 800bd92:	4628      	mov	r0, r5
 800bd94:	f00c f8ce 	bl	8017f34 <crs_strlen>
 800bd98:	462a      	mov	r2, r5
 800bd9a:	b283      	uxth	r3, r0
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	2001      	movs	r0, #1
 800bda0:	f00c fb2c 	bl	80183fc <traceIF_uartPrint>
				END_PARAM_LOOP()
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	f43f af44 	beq.w	800bc34 <fRspAnalyze_CREG+0x204>
	}

	return (retval);
}
 800bdac:	2010      	movs	r0, #16
 800bdae:	b005      	add	sp, #20
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800bdb4:	2d01      	cmp	r5, #1
 800bdb6:	d1f9      	bne.n	800bdac <fRspAnalyze_CREG+0x37c>
			PRINT_DBG("+CREG for test cmd NOT IMPLEMENTED")
 800bdb8:	490f      	ldr	r1, [pc, #60]	; (800bdf8 <fRspAnalyze_CREG+0x3c8>)
 800bdba:	480b      	ldr	r0, [pc, #44]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
 800bdbc:	f011 f8ec 	bl	801cf98 <strcpy>
 800bdc0:	4809      	ldr	r0, [pc, #36]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
 800bdc2:	f00c f8b7 	bl	8017f34 <crs_strlen>
 800bdc6:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
 800bdc8:	b283      	uxth	r3, r0
 800bdca:	2102      	movs	r1, #2
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f00c f8ef 	bl	8017fb0 <traceIF_itmPrint>
 800bdd2:	4805      	ldr	r0, [pc, #20]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
 800bdd4:	f00c f8ae 	bl	8017f34 <crs_strlen>
 800bdd8:	4a03      	ldr	r2, [pc, #12]	; (800bde8 <fRspAnalyze_CREG+0x3b8>)
 800bdda:	b283      	uxth	r3, r0
 800bddc:	2102      	movs	r1, #2
 800bdde:	4628      	mov	r0, r5
 800bde0:	f00c fb0c 	bl	80183fc <traceIF_uartPrint>
 800bde4:	e7e2      	b.n	800bdac <fRspAnalyze_CREG+0x37c>
 800bde6:	bf00      	nop
 800bde8:	20008ef8 	.word	0x20008ef8
 800bdec:	08025b04 	.word	0x08025b04
 800bdf0:	08025b1c 	.word	0x08025b1c
 800bdf4:	08025b37 	.word	0x08025b37
 800bdf8:	08025b92 	.word	0x08025b92
 800bdfc:	08025b78 	.word	0x08025b78
 800be00:	08025b58 	.word	0x08025b58

0800be04 <fRspAnalyze_CGREG>:

at_action_rsp_t fRspAnalyze_CGREG(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4682      	mov	sl, r0
 800be0a:	b085      	sub	sp, #20
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGREG()")
 800be0c:	48ce      	ldr	r0, [pc, #824]	; (800c148 <fRspAnalyze_CGREG+0x344>)
		at_element_info_t *element_infos) {
 800be0e:	460f      	mov	r7, r1
	PRINT_API("enter fRspAnalyze_CGREG()")
 800be10:	49ce      	ldr	r1, [pc, #824]	; (800c14c <fRspAnalyze_CGREG+0x348>)
		at_element_info_t *element_infos) {
 800be12:	4616      	mov	r6, r2
 800be14:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CGREG()")
 800be16:	f011 f8bf 	bl	801cf98 <strcpy>
 800be1a:	48cb      	ldr	r0, [pc, #812]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be1c:	f00c f88a 	bl	8017f34 <crs_strlen>
 800be20:	4ac9      	ldr	r2, [pc, #804]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be22:	b283      	uxth	r3, r0
 800be24:	2104      	movs	r1, #4
 800be26:	2001      	movs	r0, #1
 800be28:	f00c f8c2 	bl	8017fb0 <traceIF_itmPrint>
 800be2c:	48c6      	ldr	r0, [pc, #792]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be2e:	f00c f881 	bl	8017f34 <crs_strlen>
 800be32:	4ac5      	ldr	r2, [pc, #788]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be34:	b283      	uxth	r3, r0
 800be36:	2104      	movs	r1, #4
 800be38:	2001      	movs	r0, #1
 800be3a:	f00c fadf 	bl	80183fc <traceIF_uartPrint>
	PRINT_DBG("current cmd = %ld", p_atp_ctxt->current_atcmd.id)
 800be3e:	f8da 201c 	ldr.w	r2, [sl, #28]
 800be42:	49c3      	ldr	r1, [pc, #780]	; (800c150 <fRspAnalyze_CGREG+0x34c>)
 800be44:	48c0      	ldr	r0, [pc, #768]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be46:	f011 f837 	bl	801ceb8 <sprintf>
 800be4a:	48bf      	ldr	r0, [pc, #764]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be4c:	f00c f872 	bl	8017f34 <crs_strlen>
 800be50:	4abd      	ldr	r2, [pc, #756]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be52:	b283      	uxth	r3, r0
 800be54:	2102      	movs	r1, #2
 800be56:	2001      	movs	r0, #1
 800be58:	f00c f8aa 	bl	8017fb0 <traceIF_itmPrint>
 800be5c:	48ba      	ldr	r0, [pc, #744]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be5e:	f00c f869 	bl	8017f34 <crs_strlen>
 800be62:	4ab9      	ldr	r2, [pc, #740]	; (800c148 <fRspAnalyze_CGREG+0x344>)
 800be64:	b283      	uxth	r3, r0
 800be66:	2102      	movs	r1, #2
 800be68:	2001      	movs	r0, #1
 800be6a:	f00c fac7 	bl	80183fc <traceIF_uartPrint>
	 *  2/ answer to CGREG test command
	 *     +CGREG: (list of supported <n>s)
	 *  3/ URC:
	 *     +CGREG: <stat>[,[<lac>],[<ci>],[<AcT>],[<rac>]]
	 */
	if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT_CGREG) {
 800be6e:	f8da 301c 	ldr.w	r3, [sl, #28]
 800be72:	2b18      	cmp	r3, #24
 800be74:	f000 8187 	beq.w	800c186 <fRspAnalyze_CGREG+0x382>
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size, 8))
				}
				if (element_infos->param_rank == 11U) {
					/* gprs_ready_timer */
					PRINT_INFO("+CGREG URC: gprs_ready_timer= 0x%lx",
 800be78:	f8df b2fc 	ldr.w	fp, [pc, #764]	; 800c178 <fRspAnalyze_CGREG+0x374>
 800be7c:	4db2      	ldr	r5, [pc, #712]	; (800c148 <fRspAnalyze_CGREG+0x344>)
		START_PARAM_LOOP()
 800be7e:	4631      	mov	r1, r6
 800be80:	4622      	mov	r2, r4
 800be82:	4650      	mov	r0, sl
 800be84:	f7fc f972 	bl	800816c <atcc_extractElement>
 800be88:	89e1      	ldrh	r1, [r4, #14]
 800be8a:	9001      	str	r0, [sp, #4]
 800be8c:	2900      	cmp	r1, #0
 800be8e:	f000 8175 	beq.w	800c17c <fRspAnalyze_CGREG+0x378>
				if (element_infos->param_rank == 2U) {
 800be92:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800be96:	f1b8 0f02 	cmp.w	r8, #2
 800be9a:	d12b      	bne.n	800bef4 <fRspAnalyze_CGREG+0xf0>
					uint32_t stat = ATutil_convertStringToInt(
 800be9c:	8960      	ldrh	r0, [r4, #10]
 800be9e:	4430      	add	r0, r6
 800bea0:	f002 fc36 	bl	800e710 <ATutil_convertStringToInt>
					p_modem_ctxt->persist.urc_avail_gprs_network_registration =
 800bea4:	280b      	cmp	r0, #11
					uint32_t stat = ATutil_convertStringToInt(
 800bea6:	4602      	mov	r2, r0
					p_modem_ctxt->persist.urc_avail_gprs_network_registration =
 800bea8:	f04f 0901 	mov.w	r9, #1
 800beac:	bf28      	it	cs
 800beae:	2004      	movcs	r0, #4
 800beb0:	b280      	uxth	r0, r0
	display_clear_network_state(retval, network_type);
 800beb2:	4641      	mov	r1, r8
					p_modem_ctxt->persist.urc_avail_gprs_network_registration =
 800beb4:	f887 9017 	strb.w	r9, [r7, #23]
 800beb8:	9203      	str	r2, [sp, #12]
	display_clear_network_state(retval, network_type);
 800beba:	9002      	str	r0, [sp, #8]
 800bebc:	f7fd fe60 	bl	8009b80 <display_clear_network_state>
					p_modem_ctxt->persist.gprs_network_state =
 800bec0:	9802      	ldr	r0, [sp, #8]
					PRINT_DBG("+CGREG URC: stat=%ld", stat)
 800bec2:	9a03      	ldr	r2, [sp, #12]
 800bec4:	49a3      	ldr	r1, [pc, #652]	; (800c154 <fRspAnalyze_CGREG+0x350>)
					p_modem_ctxt->persist.gprs_network_state =
 800bec6:	f8a7 0040 	strh.w	r0, [r7, #64]	; 0x40
					PRINT_DBG("+CGREG URC: stat=%ld", stat)
 800beca:	4628      	mov	r0, r5
 800becc:	f010 fff4 	bl	801ceb8 <sprintf>
 800bed0:	4628      	mov	r0, r5
 800bed2:	f00c f82f 	bl	8017f34 <crs_strlen>
 800bed6:	462a      	mov	r2, r5
 800bed8:	b283      	uxth	r3, r0
 800beda:	4641      	mov	r1, r8
 800bedc:	4648      	mov	r0, r9
 800bede:	f00c f867 	bl	8017fb0 <traceIF_itmPrint>
 800bee2:	4628      	mov	r0, r5
 800bee4:	f00c f826 	bl	8017f34 <crs_strlen>
 800bee8:	462a      	mov	r2, r5
 800beea:	b283      	uxth	r3, r0
 800beec:	4641      	mov	r1, r8
 800beee:	4648      	mov	r0, r9
 800bef0:	f00c fa84 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 3U) {
 800bef4:	8923      	ldrh	r3, [r4, #8]
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d122      	bne.n	800bf40 <fRspAnalyze_CGREG+0x13c>
					uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800befa:	8960      	ldrh	r0, [r4, #10]
 800befc:	89e1      	ldrh	r1, [r4, #14]
 800befe:	2204      	movs	r2, #4
 800bf00:	4430      	add	r0, r6
 800bf02:	f002 fcb8 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_gprs_location_info_lac =
 800bf06:	f04f 0801 	mov.w	r8, #1
					uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800bf0a:	4603      	mov	r3, r0
					PRINT_INFO("+CGREG URC: lac=%ld =0x%lx", lac, lac)
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	4992      	ldr	r1, [pc, #584]	; (800c158 <fRspAnalyze_CGREG+0x354>)
							(uint16_t) lac;
 800bf10:	87b8      	strh	r0, [r7, #60]	; 0x3c
					p_modem_ctxt->persist.urc_avail_gprs_location_info_lac =
 800bf12:	f887 8018 	strb.w	r8, [r7, #24]
					PRINT_INFO("+CGREG URC: lac=%ld =0x%lx", lac, lac)
 800bf16:	4628      	mov	r0, r5
 800bf18:	f010 ffce 	bl	801ceb8 <sprintf>
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f00c f809 	bl	8017f34 <crs_strlen>
 800bf22:	462a      	mov	r2, r5
 800bf24:	b283      	uxth	r3, r0
 800bf26:	4641      	mov	r1, r8
 800bf28:	4640      	mov	r0, r8
 800bf2a:	f00c f841 	bl	8017fb0 <traceIF_itmPrint>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f00c f800 	bl	8017f34 <crs_strlen>
 800bf34:	462a      	mov	r2, r5
 800bf36:	b283      	uxth	r3, r0
 800bf38:	4641      	mov	r1, r8
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	f00c fa5e 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 4U) {
 800bf40:	8923      	ldrh	r3, [r4, #8]
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d122      	bne.n	800bf8c <fRspAnalyze_CGREG+0x188>
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bf46:	8960      	ldrh	r0, [r4, #10]
 800bf48:	89e1      	ldrh	r1, [r4, #14]
 800bf4a:	2208      	movs	r2, #8
 800bf4c:	4430      	add	r0, r6
 800bf4e:	f002 fc92 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_gprs_location_info_ci =
 800bf52:	f04f 0801 	mov.w	r8, #1
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800bf56:	4603      	mov	r3, r0
					PRINT_INFO("+CGREG URC: ci=%ld =0x%lx", ci, ci)
 800bf58:	4602      	mov	r2, r0
 800bf5a:	4980      	ldr	r1, [pc, #512]	; (800c15c <fRspAnalyze_CGREG+0x358>)
					p_modem_ctxt->persist.gprs_location_info.ci = (uint32_t) ci;
 800bf5c:	63b8      	str	r0, [r7, #56]	; 0x38
					p_modem_ctxt->persist.urc_avail_gprs_location_info_ci =
 800bf5e:	f887 8019 	strb.w	r8, [r7, #25]
					PRINT_INFO("+CGREG URC: ci=%ld =0x%lx", ci, ci)
 800bf62:	4628      	mov	r0, r5
 800bf64:	f010 ffa8 	bl	801ceb8 <sprintf>
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f00b ffe3 	bl	8017f34 <crs_strlen>
 800bf6e:	462a      	mov	r2, r5
 800bf70:	b283      	uxth	r3, r0
 800bf72:	4641      	mov	r1, r8
 800bf74:	4640      	mov	r0, r8
 800bf76:	f00c f81b 	bl	8017fb0 <traceIF_itmPrint>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f00b ffda 	bl	8017f34 <crs_strlen>
 800bf80:	462a      	mov	r2, r5
 800bf82:	b283      	uxth	r3, r0
 800bf84:	4641      	mov	r1, r8
 800bf86:	4640      	mov	r0, r8
 800bf88:	f00c fa38 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 5U) {
 800bf8c:	8923      	ldrh	r3, [r4, #8]
 800bf8e:	2b05      	cmp	r3, #5
 800bf90:	d11b      	bne.n	800bfca <fRspAnalyze_CGREG+0x1c6>
					PRINT_DBG("+CGREG URC: act=%ld",
 800bf92:	8960      	ldrh	r0, [r4, #10]
 800bf94:	89e1      	ldrh	r1, [r4, #14]
 800bf96:	4430      	add	r0, r6
 800bf98:	f002 fbba 	bl	800e710 <ATutil_convertStringToInt>
 800bf9c:	4970      	ldr	r1, [pc, #448]	; (800c160 <fRspAnalyze_CGREG+0x35c>)
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f010 ff89 	bl	801ceb8 <sprintf>
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f00b ffc4 	bl	8017f34 <crs_strlen>
 800bfac:	462a      	mov	r2, r5
 800bfae:	b283      	uxth	r3, r0
 800bfb0:	2102      	movs	r1, #2
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	f00b fffc 	bl	8017fb0 <traceIF_itmPrint>
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f00b ffbb 	bl	8017f34 <crs_strlen>
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	b283      	uxth	r3, r0
 800bfc2:	2102      	movs	r1, #2
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f00c fa19 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 6U) {
 800bfca:	8923      	ldrh	r3, [r4, #8]
 800bfcc:	2b06      	cmp	r3, #6
 800bfce:	d11c      	bne.n	800c00a <fRspAnalyze_CGREG+0x206>
					PRINT_DBG("+CGREG URC: rac=%ld",
 800bfd0:	8960      	ldrh	r0, [r4, #10]
 800bfd2:	89e1      	ldrh	r1, [r4, #14]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	4430      	add	r0, r6
 800bfd8:	f002 fc4d 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
 800bfdc:	4961      	ldr	r1, [pc, #388]	; (800c164 <fRspAnalyze_CGREG+0x360>)
 800bfde:	4602      	mov	r2, r0
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f010 ff69 	bl	801ceb8 <sprintf>
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f00b ffa4 	bl	8017f34 <crs_strlen>
 800bfec:	462a      	mov	r2, r5
 800bfee:	b283      	uxth	r3, r0
 800bff0:	2102      	movs	r1, #2
 800bff2:	2001      	movs	r0, #1
 800bff4:	f00b ffdc 	bl	8017fb0 <traceIF_itmPrint>
 800bff8:	4628      	mov	r0, r5
 800bffa:	f00b ff9b 	bl	8017f34 <crs_strlen>
 800bffe:	462a      	mov	r2, r5
 800c000:	b283      	uxth	r3, r0
 800c002:	2102      	movs	r1, #2
 800c004:	2001      	movs	r0, #1
 800c006:	f00c f9f9 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 7U) {
 800c00a:	8923      	ldrh	r3, [r4, #8]
 800c00c:	2b07      	cmp	r3, #7
 800c00e:	d11b      	bne.n	800c048 <fRspAnalyze_CGREG+0x244>
					PRINT_DBG("+CGREG URC: cause_type=%ld",
 800c010:	8960      	ldrh	r0, [r4, #10]
 800c012:	89e1      	ldrh	r1, [r4, #14]
 800c014:	4430      	add	r0, r6
 800c016:	f002 fb7b 	bl	800e710 <ATutil_convertStringToInt>
 800c01a:	4953      	ldr	r1, [pc, #332]	; (800c168 <fRspAnalyze_CGREG+0x364>)
 800c01c:	4602      	mov	r2, r0
 800c01e:	4628      	mov	r0, r5
 800c020:	f010 ff4a 	bl	801ceb8 <sprintf>
 800c024:	4628      	mov	r0, r5
 800c026:	f00b ff85 	bl	8017f34 <crs_strlen>
 800c02a:	462a      	mov	r2, r5
 800c02c:	b283      	uxth	r3, r0
 800c02e:	2102      	movs	r1, #2
 800c030:	2001      	movs	r0, #1
 800c032:	f00b ffbd 	bl	8017fb0 <traceIF_itmPrint>
 800c036:	4628      	mov	r0, r5
 800c038:	f00b ff7c 	bl	8017f34 <crs_strlen>
 800c03c:	462a      	mov	r2, r5
 800c03e:	b283      	uxth	r3, r0
 800c040:	2102      	movs	r1, #2
 800c042:	2001      	movs	r0, #1
 800c044:	f00c f9da 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 8U) {
 800c048:	8923      	ldrh	r3, [r4, #8]
 800c04a:	2b08      	cmp	r3, #8
 800c04c:	d11b      	bne.n	800c086 <fRspAnalyze_CGREG+0x282>
					PRINT_DBG("+CGREG URC: reject_cause=%ld",
 800c04e:	8960      	ldrh	r0, [r4, #10]
 800c050:	89e1      	ldrh	r1, [r4, #14]
 800c052:	4430      	add	r0, r6
 800c054:	f002 fb5c 	bl	800e710 <ATutil_convertStringToInt>
 800c058:	4944      	ldr	r1, [pc, #272]	; (800c16c <fRspAnalyze_CGREG+0x368>)
 800c05a:	4602      	mov	r2, r0
 800c05c:	4628      	mov	r0, r5
 800c05e:	f010 ff2b 	bl	801ceb8 <sprintf>
 800c062:	4628      	mov	r0, r5
 800c064:	f00b ff66 	bl	8017f34 <crs_strlen>
 800c068:	462a      	mov	r2, r5
 800c06a:	b283      	uxth	r3, r0
 800c06c:	2102      	movs	r1, #2
 800c06e:	2001      	movs	r0, #1
 800c070:	f00b ff9e 	bl	8017fb0 <traceIF_itmPrint>
 800c074:	4628      	mov	r0, r5
 800c076:	f00b ff5d 	bl	8017f34 <crs_strlen>
 800c07a:	462a      	mov	r2, r5
 800c07c:	b283      	uxth	r3, r0
 800c07e:	2102      	movs	r1, #2
 800c080:	2001      	movs	r0, #1
 800c082:	f00c f9bb 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 9U) {
 800c086:	8923      	ldrh	r3, [r4, #8]
 800c088:	2b09      	cmp	r3, #9
 800c08a:	d11c      	bne.n	800c0c6 <fRspAnalyze_CGREG+0x2c2>
					PRINT_INFO("+CGREG URC: active_time= 0x%lx",
 800c08c:	8960      	ldrh	r0, [r4, #10]
 800c08e:	89e1      	ldrh	r1, [r4, #14]
 800c090:	2208      	movs	r2, #8
 800c092:	4430      	add	r0, r6
 800c094:	f002 fc0b 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c098:	4935      	ldr	r1, [pc, #212]	; (800c170 <fRspAnalyze_CGREG+0x36c>)
 800c09a:	4602      	mov	r2, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	f010 ff0b 	bl	801ceb8 <sprintf>
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	f00b ff46 	bl	8017f34 <crs_strlen>
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	b283      	uxth	r3, r0
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4608      	mov	r0, r1
 800c0b0:	f00b ff7e 	bl	8017fb0 <traceIF_itmPrint>
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f00b ff3d 	bl	8017f34 <crs_strlen>
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	b283      	uxth	r3, r0
 800c0be:	462a      	mov	r2, r5
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	f00c f99b 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 10U) {
 800c0c6:	8923      	ldrh	r3, [r4, #8]
 800c0c8:	2b0a      	cmp	r3, #10
 800c0ca:	d11c      	bne.n	800c106 <fRspAnalyze_CGREG+0x302>
					PRINT_INFO("+CGREG URC: periodic_rau= 0x%lx",
 800c0cc:	8960      	ldrh	r0, [r4, #10]
 800c0ce:	89e1      	ldrh	r1, [r4, #14]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	4430      	add	r0, r6
 800c0d4:	f002 fbeb 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c0d8:	4926      	ldr	r1, [pc, #152]	; (800c174 <fRspAnalyze_CGREG+0x370>)
 800c0da:	4602      	mov	r2, r0
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f010 feeb 	bl	801ceb8 <sprintf>
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f00b ff26 	bl	8017f34 <crs_strlen>
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	b283      	uxth	r3, r0
 800c0ec:	462a      	mov	r2, r5
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	f00b ff5e 	bl	8017fb0 <traceIF_itmPrint>
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f00b ff1d 	bl	8017f34 <crs_strlen>
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	b283      	uxth	r3, r0
 800c0fe:	462a      	mov	r2, r5
 800c100:	4608      	mov	r0, r1
 800c102:	f00c f97b 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 11U) {
 800c106:	8923      	ldrh	r3, [r4, #8]
 800c108:	2b0b      	cmp	r3, #11
 800c10a:	d137      	bne.n	800c17c <fRspAnalyze_CGREG+0x378>
					PRINT_INFO("+CGREG URC: gprs_ready_timer= 0x%lx",
 800c10c:	8960      	ldrh	r0, [r4, #10]
 800c10e:	89e1      	ldrh	r1, [r4, #14]
 800c110:	2208      	movs	r2, #8
 800c112:	4430      	add	r0, r6
 800c114:	f002 fbcb 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c118:	4659      	mov	r1, fp
 800c11a:	4602      	mov	r2, r0
 800c11c:	4628      	mov	r0, r5
 800c11e:	f010 fecb 	bl	801ceb8 <sprintf>
 800c122:	4628      	mov	r0, r5
 800c124:	f00b ff06 	bl	8017f34 <crs_strlen>
 800c128:	2101      	movs	r1, #1
 800c12a:	b283      	uxth	r3, r0
 800c12c:	462a      	mov	r2, r5
 800c12e:	4608      	mov	r0, r1
 800c130:	f00b ff3e 	bl	8017fb0 <traceIF_itmPrint>
 800c134:	4628      	mov	r0, r5
 800c136:	f00b fefd 	bl	8017f34 <crs_strlen>
 800c13a:	2101      	movs	r1, #1
 800c13c:	b283      	uxth	r3, r0
 800c13e:	462a      	mov	r2, r5
 800c140:	4608      	mov	r0, r1
 800c142:	f00c f95b 	bl	80183fc <traceIF_uartPrint>
 800c146:	e019      	b.n	800c17c <fRspAnalyze_CGREG+0x378>
 800c148:	20008ef8 	.word	0x20008ef8
 800c14c:	08025c46 	.word	0x08025c46
 800c150:	08025ae7 	.word	0x08025ae7
 800c154:	08025e0b 	.word	0x08025e0b
 800c158:	08025e2b 	.word	0x08025e2b
 800c15c:	08025e51 	.word	0x08025e51
 800c160:	08025e76 	.word	0x08025e76
 800c164:	08025e95 	.word	0x08025e95
 800c168:	08025eb4 	.word	0x08025eb4
 800c16c:	08025eda 	.word	0x08025eda
 800c170:	08025f02 	.word	0x08025f02
 800c174:	08025f2c 	.word	0x08025f2c
 800c178:	08025f57 	.word	0x08025f57
							ATutil_extract_bin_value_from_quotes(
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size, 8))
				}END_PARAM_LOOP()
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	f040 8183 	bne.w	800c48a <fRspAnalyze_CGREG+0x686>
 800c184:	e67b      	b.n	800be7e <fRspAnalyze_CGREG+0x7a>
		if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800c186:	f8ba 5018 	ldrh.w	r5, [sl, #24]
 800c18a:	2d02      	cmp	r5, #2
 800c18c:	f040 8181 	bne.w	800c492 <fRspAnalyze_CGREG+0x68e>
						PRINT_INFO("+CGREG: gprs_ready_timer= 0x%lx",
 800c190:	f8df 835c 	ldr.w	r8, [pc, #860]	; 800c4f0 <fRspAnalyze_CGREG+0x6ec>
 800c194:	4dcb      	ldr	r5, [pc, #812]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
						PRINT_INFO("+CGREG: periodic_rau= 0x%lx",
 800c196:	f8df b35c 	ldr.w	fp, [pc, #860]	; 800c4f4 <fRspAnalyze_CGREG+0x6f0>
			START_PARAM_LOOP()
 800c19a:	4631      	mov	r1, r6
 800c19c:	4622      	mov	r2, r4
 800c19e:	4650      	mov	r0, sl
 800c1a0:	f7fb ffe4 	bl	800816c <atcc_extractElement>
 800c1a4:	89e1      	ldrh	r1, [r4, #14]
 800c1a6:	9001      	str	r0, [sp, #4]
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	f000 816a 	beq.w	800c482 <fRspAnalyze_CGREG+0x67e>
					if (element_infos->param_rank == 2U) {
 800c1ae:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800c1b2:	f1b9 0f02 	cmp.w	r9, #2
 800c1b6:	d11a      	bne.n	800c1ee <fRspAnalyze_CGREG+0x3ea>
						PRINT_DBG("+CGREG: n=%ld",
 800c1b8:	8960      	ldrh	r0, [r4, #10]
 800c1ba:	4430      	add	r0, r6
 800c1bc:	f002 faa8 	bl	800e710 <ATutil_convertStringToInt>
 800c1c0:	49c1      	ldr	r1, [pc, #772]	; (800c4c8 <fRspAnalyze_CGREG+0x6c4>)
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f010 fe77 	bl	801ceb8 <sprintf>
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f00b feb2 	bl	8017f34 <crs_strlen>
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	b283      	uxth	r3, r0
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	f00b feea 	bl	8017fb0 <traceIF_itmPrint>
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f00b fea9 	bl	8017f34 <crs_strlen>
 800c1e2:	462a      	mov	r2, r5
 800c1e4:	b283      	uxth	r3, r0
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	f00c f907 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 3U) {
 800c1ee:	8923      	ldrh	r3, [r4, #8]
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d127      	bne.n	800c244 <fRspAnalyze_CGREG+0x440>
						uint32_t stat = ATutil_convertStringToInt(
 800c1f4:	8960      	ldrh	r0, [r4, #10]
 800c1f6:	89e1      	ldrh	r1, [r4, #14]
 800c1f8:	4430      	add	r0, r6
 800c1fa:	f002 fa89 	bl	800e710 <ATutil_convertStringToInt>
 800c1fe:	280b      	cmp	r0, #11
 800c200:	4681      	mov	r9, r0
 800c202:	bf28      	it	cs
 800c204:	2004      	movcs	r0, #4
 800c206:	b280      	uxth	r0, r0
	display_clear_network_state(retval, network_type);
 800c208:	2102      	movs	r1, #2
 800c20a:	9002      	str	r0, [sp, #8]
 800c20c:	f7fd fcb8 	bl	8009b80 <display_clear_network_state>
						p_modem_ctxt->persist.gprs_network_state =
 800c210:	9802      	ldr	r0, [sp, #8]
						PRINT_DBG("+CGREG: stat=%ld", stat)
 800c212:	49ae      	ldr	r1, [pc, #696]	; (800c4cc <fRspAnalyze_CGREG+0x6c8>)
						p_modem_ctxt->persist.gprs_network_state =
 800c214:	f8a7 0040 	strh.w	r0, [r7, #64]	; 0x40
						PRINT_DBG("+CGREG: stat=%ld", stat)
 800c218:	464a      	mov	r2, r9
 800c21a:	4628      	mov	r0, r5
 800c21c:	f010 fe4c 	bl	801ceb8 <sprintf>
 800c220:	4628      	mov	r0, r5
 800c222:	f00b fe87 	bl	8017f34 <crs_strlen>
 800c226:	462a      	mov	r2, r5
 800c228:	b283      	uxth	r3, r0
 800c22a:	2102      	movs	r1, #2
 800c22c:	2001      	movs	r0, #1
 800c22e:	f00b febf 	bl	8017fb0 <traceIF_itmPrint>
 800c232:	4628      	mov	r0, r5
 800c234:	f00b fe7e 	bl	8017f34 <crs_strlen>
 800c238:	462a      	mov	r2, r5
 800c23a:	b283      	uxth	r3, r0
 800c23c:	2102      	movs	r1, #2
 800c23e:	2001      	movs	r0, #1
 800c240:	f00c f8dc 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 4U) {
 800c244:	8922      	ldrh	r2, [r4, #8]
 800c246:	2a04      	cmp	r2, #4
 800c248:	d11d      	bne.n	800c286 <fRspAnalyze_CGREG+0x482>
						uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800c24a:	8960      	ldrh	r0, [r4, #10]
 800c24c:	89e1      	ldrh	r1, [r4, #14]
 800c24e:	4430      	add	r0, r6
 800c250:	f002 fb11 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CGREG: lac=%ld =0x%lx", lac, lac)
 800c254:	499e      	ldr	r1, [pc, #632]	; (800c4d0 <fRspAnalyze_CGREG+0x6cc>)
								(uint16_t) lac;
 800c256:	87b8      	strh	r0, [r7, #60]	; 0x3c
						uint32_t lac = ATutil_extract_hex_value_from_quotes(
 800c258:	4603      	mov	r3, r0
						PRINT_INFO("+CGREG: lac=%ld =0x%lx", lac, lac)
 800c25a:	4602      	mov	r2, r0
 800c25c:	4628      	mov	r0, r5
 800c25e:	f010 fe2b 	bl	801ceb8 <sprintf>
 800c262:	4628      	mov	r0, r5
 800c264:	f00b fe66 	bl	8017f34 <crs_strlen>
 800c268:	2101      	movs	r1, #1
 800c26a:	b283      	uxth	r3, r0
 800c26c:	462a      	mov	r2, r5
 800c26e:	4608      	mov	r0, r1
 800c270:	f00b fe9e 	bl	8017fb0 <traceIF_itmPrint>
 800c274:	4628      	mov	r0, r5
 800c276:	f00b fe5d 	bl	8017f34 <crs_strlen>
 800c27a:	2101      	movs	r1, #1
 800c27c:	b283      	uxth	r3, r0
 800c27e:	462a      	mov	r2, r5
 800c280:	4608      	mov	r0, r1
 800c282:	f00c f8bb 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 5U) {
 800c286:	8923      	ldrh	r3, [r4, #8]
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d11e      	bne.n	800c2ca <fRspAnalyze_CGREG+0x4c6>
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c28c:	8960      	ldrh	r0, [r4, #10]
 800c28e:	89e1      	ldrh	r1, [r4, #14]
 800c290:	2208      	movs	r2, #8
 800c292:	4430      	add	r0, r6
 800c294:	f002 faef 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CGREG: ci=%ld =0x%lx", ci, ci)
 800c298:	498e      	ldr	r1, [pc, #568]	; (800c4d4 <fRspAnalyze_CGREG+0x6d0>)
						p_modem_ctxt->persist.gprs_location_info.ci =
 800c29a:	63b8      	str	r0, [r7, #56]	; 0x38
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c29c:	4603      	mov	r3, r0
						PRINT_INFO("+CGREG: ci=%ld =0x%lx", ci, ci)
 800c29e:	4602      	mov	r2, r0
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f010 fe09 	bl	801ceb8 <sprintf>
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f00b fe44 	bl	8017f34 <crs_strlen>
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	b283      	uxth	r3, r0
 800c2b0:	462a      	mov	r2, r5
 800c2b2:	4608      	mov	r0, r1
 800c2b4:	f00b fe7c 	bl	8017fb0 <traceIF_itmPrint>
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f00b fe3b 	bl	8017f34 <crs_strlen>
 800c2be:	2101      	movs	r1, #1
 800c2c0:	b283      	uxth	r3, r0
 800c2c2:	462a      	mov	r2, r5
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	f00c f899 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 6U) {
 800c2ca:	8923      	ldrh	r3, [r4, #8]
 800c2cc:	2b06      	cmp	r3, #6
 800c2ce:	d11b      	bne.n	800c308 <fRspAnalyze_CGREG+0x504>
						PRINT_DBG("+CGREG: act=%ld",
 800c2d0:	8960      	ldrh	r0, [r4, #10]
 800c2d2:	89e1      	ldrh	r1, [r4, #14]
 800c2d4:	4430      	add	r0, r6
 800c2d6:	f002 fa1b 	bl	800e710 <ATutil_convertStringToInt>
 800c2da:	497f      	ldr	r1, [pc, #508]	; (800c4d8 <fRspAnalyze_CGREG+0x6d4>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f010 fdea 	bl	801ceb8 <sprintf>
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f00b fe25 	bl	8017f34 <crs_strlen>
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	b283      	uxth	r3, r0
 800c2ee:	2102      	movs	r1, #2
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	f00b fe5d 	bl	8017fb0 <traceIF_itmPrint>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f00b fe1c 	bl	8017f34 <crs_strlen>
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	b283      	uxth	r3, r0
 800c300:	2102      	movs	r1, #2
 800c302:	2001      	movs	r0, #1
 800c304:	f00c f87a 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 7U) {
 800c308:	8923      	ldrh	r3, [r4, #8]
 800c30a:	2b07      	cmp	r3, #7
 800c30c:	d11b      	bne.n	800c346 <fRspAnalyze_CGREG+0x542>
						PRINT_DBG("+CGREG: rac=%ld",
 800c30e:	8960      	ldrh	r0, [r4, #10]
 800c310:	89e1      	ldrh	r1, [r4, #14]
 800c312:	4430      	add	r0, r6
 800c314:	f002 f9fc 	bl	800e710 <ATutil_convertStringToInt>
 800c318:	4970      	ldr	r1, [pc, #448]	; (800c4dc <fRspAnalyze_CGREG+0x6d8>)
 800c31a:	4602      	mov	r2, r0
 800c31c:	4628      	mov	r0, r5
 800c31e:	f010 fdcb 	bl	801ceb8 <sprintf>
 800c322:	4628      	mov	r0, r5
 800c324:	f00b fe06 	bl	8017f34 <crs_strlen>
 800c328:	462a      	mov	r2, r5
 800c32a:	b283      	uxth	r3, r0
 800c32c:	2102      	movs	r1, #2
 800c32e:	2001      	movs	r0, #1
 800c330:	f00b fe3e 	bl	8017fb0 <traceIF_itmPrint>
 800c334:	4628      	mov	r0, r5
 800c336:	f00b fdfd 	bl	8017f34 <crs_strlen>
 800c33a:	462a      	mov	r2, r5
 800c33c:	b283      	uxth	r3, r0
 800c33e:	2102      	movs	r1, #2
 800c340:	2001      	movs	r0, #1
 800c342:	f00c f85b 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 8U) {
 800c346:	8923      	ldrh	r3, [r4, #8]
 800c348:	2b08      	cmp	r3, #8
 800c34a:	d11b      	bne.n	800c384 <fRspAnalyze_CGREG+0x580>
						PRINT_DBG("+CGREG: cause_type=%ld",
 800c34c:	8960      	ldrh	r0, [r4, #10]
 800c34e:	89e1      	ldrh	r1, [r4, #14]
 800c350:	4430      	add	r0, r6
 800c352:	f002 f9dd 	bl	800e710 <ATutil_convertStringToInt>
 800c356:	4962      	ldr	r1, [pc, #392]	; (800c4e0 <fRspAnalyze_CGREG+0x6dc>)
 800c358:	4602      	mov	r2, r0
 800c35a:	4628      	mov	r0, r5
 800c35c:	f010 fdac 	bl	801ceb8 <sprintf>
 800c360:	4628      	mov	r0, r5
 800c362:	f00b fde7 	bl	8017f34 <crs_strlen>
 800c366:	462a      	mov	r2, r5
 800c368:	b283      	uxth	r3, r0
 800c36a:	2102      	movs	r1, #2
 800c36c:	2001      	movs	r0, #1
 800c36e:	f00b fe1f 	bl	8017fb0 <traceIF_itmPrint>
 800c372:	4628      	mov	r0, r5
 800c374:	f00b fdde 	bl	8017f34 <crs_strlen>
 800c378:	462a      	mov	r2, r5
 800c37a:	b283      	uxth	r3, r0
 800c37c:	2102      	movs	r1, #2
 800c37e:	2001      	movs	r0, #1
 800c380:	f00c f83c 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 9U) {
 800c384:	8923      	ldrh	r3, [r4, #8]
 800c386:	2b09      	cmp	r3, #9
 800c388:	d11b      	bne.n	800c3c2 <fRspAnalyze_CGREG+0x5be>
						PRINT_DBG("+CGREG: reject_cause=%ld",
 800c38a:	8960      	ldrh	r0, [r4, #10]
 800c38c:	89e1      	ldrh	r1, [r4, #14]
 800c38e:	4430      	add	r0, r6
 800c390:	f002 f9be 	bl	800e710 <ATutil_convertStringToInt>
 800c394:	4953      	ldr	r1, [pc, #332]	; (800c4e4 <fRspAnalyze_CGREG+0x6e0>)
 800c396:	4602      	mov	r2, r0
 800c398:	4628      	mov	r0, r5
 800c39a:	f010 fd8d 	bl	801ceb8 <sprintf>
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f00b fdc8 	bl	8017f34 <crs_strlen>
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	b283      	uxth	r3, r0
 800c3a8:	2102      	movs	r1, #2
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	f00b fe00 	bl	8017fb0 <traceIF_itmPrint>
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	f00b fdbf 	bl	8017f34 <crs_strlen>
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	b283      	uxth	r3, r0
 800c3ba:	2102      	movs	r1, #2
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f00c f81d 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 10U) {
 800c3c2:	8923      	ldrh	r3, [r4, #8]
 800c3c4:	2b0a      	cmp	r3, #10
 800c3c6:	d11c      	bne.n	800c402 <fRspAnalyze_CGREG+0x5fe>
						PRINT_INFO("+CGREG: active_time= 0x%lx)",
 800c3c8:	8960      	ldrh	r0, [r4, #10]
 800c3ca:	89e1      	ldrh	r1, [r4, #14]
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	4430      	add	r0, r6
 800c3d0:	f002 fa6d 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c3d4:	4944      	ldr	r1, [pc, #272]	; (800c4e8 <fRspAnalyze_CGREG+0x6e4>)
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f010 fd6d 	bl	801ceb8 <sprintf>
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f00b fda8 	bl	8017f34 <crs_strlen>
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	b283      	uxth	r3, r0
 800c3e8:	462a      	mov	r2, r5
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	f00b fde0 	bl	8017fb0 <traceIF_itmPrint>
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	f00b fd9f 	bl	8017f34 <crs_strlen>
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	b283      	uxth	r3, r0
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	f00b fffd 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 11U) {
 800c402:	8923      	ldrh	r3, [r4, #8]
 800c404:	2b0b      	cmp	r3, #11
 800c406:	d11c      	bne.n	800c442 <fRspAnalyze_CGREG+0x63e>
						PRINT_INFO("+CGREG: periodic_rau= 0x%lx",
 800c408:	8960      	ldrh	r0, [r4, #10]
 800c40a:	89e1      	ldrh	r1, [r4, #14]
 800c40c:	2208      	movs	r2, #8
 800c40e:	4430      	add	r0, r6
 800c410:	f002 fa4d 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c414:	4659      	mov	r1, fp
 800c416:	4602      	mov	r2, r0
 800c418:	4628      	mov	r0, r5
 800c41a:	f010 fd4d 	bl	801ceb8 <sprintf>
 800c41e:	4628      	mov	r0, r5
 800c420:	f00b fd88 	bl	8017f34 <crs_strlen>
 800c424:	2101      	movs	r1, #1
 800c426:	b283      	uxth	r3, r0
 800c428:	462a      	mov	r2, r5
 800c42a:	4608      	mov	r0, r1
 800c42c:	f00b fdc0 	bl	8017fb0 <traceIF_itmPrint>
 800c430:	4628      	mov	r0, r5
 800c432:	f00b fd7f 	bl	8017f34 <crs_strlen>
 800c436:	2101      	movs	r1, #1
 800c438:	b283      	uxth	r3, r0
 800c43a:	462a      	mov	r2, r5
 800c43c:	4608      	mov	r0, r1
 800c43e:	f00b ffdd 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 12U) {
 800c442:	8923      	ldrh	r3, [r4, #8]
 800c444:	2b0c      	cmp	r3, #12
 800c446:	d11c      	bne.n	800c482 <fRspAnalyze_CGREG+0x67e>
						PRINT_INFO("+CGREG: gprs_ready_timer= 0x%lx",
 800c448:	8960      	ldrh	r0, [r4, #10]
 800c44a:	89e1      	ldrh	r1, [r4, #14]
 800c44c:	2208      	movs	r2, #8
 800c44e:	4430      	add	r0, r6
 800c450:	f002 fa2d 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c454:	4641      	mov	r1, r8
 800c456:	4602      	mov	r2, r0
 800c458:	4628      	mov	r0, r5
 800c45a:	f010 fd2d 	bl	801ceb8 <sprintf>
 800c45e:	4628      	mov	r0, r5
 800c460:	f00b fd68 	bl	8017f34 <crs_strlen>
 800c464:	2101      	movs	r1, #1
 800c466:	b283      	uxth	r3, r0
 800c468:	462a      	mov	r2, r5
 800c46a:	4608      	mov	r0, r1
 800c46c:	f00b fda0 	bl	8017fb0 <traceIF_itmPrint>
 800c470:	4628      	mov	r0, r5
 800c472:	f00b fd5f 	bl	8017f34 <crs_strlen>
 800c476:	2101      	movs	r1, #1
 800c478:	b283      	uxth	r3, r0
 800c47a:	462a      	mov	r2, r5
 800c47c:	4608      	mov	r0, r1
 800c47e:	f00b ffbd 	bl	80183fc <traceIF_uartPrint>
					}END_PARAM_LOOP()
 800c482:	9b01      	ldr	r3, [sp, #4]
 800c484:	2b01      	cmp	r3, #1
 800c486:	f43f ae88 	beq.w	800c19a <fRspAnalyze_CGREG+0x396>
	}

	return (retval);

}
 800c48a:	2010      	movs	r0, #16
 800c48c:	b005      	add	sp, #20
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800c492:	2d01      	cmp	r5, #1
 800c494:	d1f9      	bne.n	800c48a <fRspAnalyze_CGREG+0x686>
			PRINT_DBG("+CGREG for test cmd NOT IMPLEMENTED")
 800c496:	4915      	ldr	r1, [pc, #84]	; (800c4ec <fRspAnalyze_CGREG+0x6e8>)
 800c498:	480a      	ldr	r0, [pc, #40]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
 800c49a:	f010 fd7d 	bl	801cf98 <strcpy>
 800c49e:	4809      	ldr	r0, [pc, #36]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
 800c4a0:	f00b fd48 	bl	8017f34 <crs_strlen>
 800c4a4:	4a07      	ldr	r2, [pc, #28]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
 800c4a6:	b283      	uxth	r3, r0
 800c4a8:	2102      	movs	r1, #2
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f00b fd80 	bl	8017fb0 <traceIF_itmPrint>
 800c4b0:	4804      	ldr	r0, [pc, #16]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
 800c4b2:	f00b fd3f 	bl	8017f34 <crs_strlen>
 800c4b6:	4a03      	ldr	r2, [pc, #12]	; (800c4c4 <fRspAnalyze_CGREG+0x6c0>)
 800c4b8:	b283      	uxth	r3, r0
 800c4ba:	2102      	movs	r1, #2
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f00b ff9d 	bl	80183fc <traceIF_uartPrint>
 800c4c2:	e7e2      	b.n	800c48a <fRspAnalyze_CGREG+0x686>
 800c4c4:	20008ef8 	.word	0x20008ef8
 800c4c8:	08025c6f 	.word	0x08025c6f
 800c4cc:	08025c88 	.word	0x08025c88
 800c4d0:	08025ca4 	.word	0x08025ca4
 800c4d4:	08025cc6 	.word	0x08025cc6
 800c4d8:	08025ce7 	.word	0x08025ce7
 800c4dc:	08025d02 	.word	0x08025d02
 800c4e0:	08025d1d 	.word	0x08025d1d
 800c4e4:	08025d3f 	.word	0x08025d3f
 800c4e8:	08025d63 	.word	0x08025d63
 800c4ec:	08025ddc 	.word	0x08025ddc
 800c4f0:	08025db1 	.word	0x08025db1
 800c4f4:	08025d8a 	.word	0x08025d8a

0800c4f8 <fRspAnalyze_CEREG>:

at_action_rsp_t fRspAnalyze_CEREG(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	460e      	mov	r6, r1
 800c500:	9001      	str	r0, [sp, #4]
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CEREG()")
 800c502:	49d0      	ldr	r1, [pc, #832]	; (800c844 <fRspAnalyze_CEREG+0x34c>)
 800c504:	48d0      	ldr	r0, [pc, #832]	; (800c848 <fRspAnalyze_CEREG+0x350>)
		at_element_info_t *element_infos) {
 800c506:	4617      	mov	r7, r2
 800c508:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CEREG()")
 800c50a:	f010 fd45 	bl	801cf98 <strcpy>
 800c50e:	48ce      	ldr	r0, [pc, #824]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c510:	f00b fd10 	bl	8017f34 <crs_strlen>
 800c514:	4acc      	ldr	r2, [pc, #816]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c516:	b283      	uxth	r3, r0
 800c518:	2104      	movs	r1, #4
 800c51a:	2001      	movs	r0, #1
 800c51c:	f00b fd48 	bl	8017fb0 <traceIF_itmPrint>
 800c520:	48c9      	ldr	r0, [pc, #804]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c522:	f00b fd07 	bl	8017f34 <crs_strlen>
 800c526:	4ac8      	ldr	r2, [pc, #800]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c528:	b283      	uxth	r3, r0
 800c52a:	2104      	movs	r1, #4
 800c52c:	2001      	movs	r0, #1
 800c52e:	f00b ff65 	bl	80183fc <traceIF_uartPrint>
	PRINT_DBG("current cmd = %ld", p_atp_ctxt->current_atcmd.id)
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	49c5      	ldr	r1, [pc, #788]	; (800c84c <fRspAnalyze_CEREG+0x354>)
 800c536:	69da      	ldr	r2, [r3, #28]
 800c538:	48c3      	ldr	r0, [pc, #780]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c53a:	f010 fcbd 	bl	801ceb8 <sprintf>
 800c53e:	48c2      	ldr	r0, [pc, #776]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c540:	f00b fcf8 	bl	8017f34 <crs_strlen>
 800c544:	4ac0      	ldr	r2, [pc, #768]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c546:	b283      	uxth	r3, r0
 800c548:	2102      	movs	r1, #2
 800c54a:	2001      	movs	r0, #1
 800c54c:	f00b fd30 	bl	8017fb0 <traceIF_itmPrint>
 800c550:	48bd      	ldr	r0, [pc, #756]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c552:	f00b fcef 	bl	8017f34 <crs_strlen>
 800c556:	4abc      	ldr	r2, [pc, #752]	; (800c848 <fRspAnalyze_CEREG+0x350>)
 800c558:	b283      	uxth	r3, r0
 800c55a:	2102      	movs	r1, #2
 800c55c:	2001      	movs	r0, #1
 800c55e:	f00b ff4d 	bl	80183fc <traceIF_uartPrint>
	 *  2/ answer to CEREG test command
	 *    +CEREG: (list of supported <n>s)
	 *  3/ URC:
	 *    +CEREG: <stat>[,[<tac>],[<ci>],[<AcT>]]
	 */
	if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT_CEREG) {
 800c562:	9b01      	ldr	r3, [sp, #4]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	2b19      	cmp	r3, #25
 800c568:	f000 818f 	beq.w	800c88a <fRspAnalyze_CEREG+0x392>
						p_modem_ctxt->persist.low_power_status.nwk_periodic_TAU =
								t3412_value;
						p_modem_ctxt->persist.urc_avail_lp_status = AT_TRUE;
						PRINT_INFO("New T3412 value detected")
					}
					PRINT_INFO("+CEREG URC: periodic_tau= %ld sec [0x%lx]",
 800c56c:	4db6      	ldr	r5, [pc, #728]	; (800c848 <fRspAnalyze_CEREG+0x350>)
						PRINT_INFO("New T3412 value detected")
 800c56e:	f8df a304 	ldr.w	sl, [pc, #772]	; 800c874 <fRspAnalyze_CEREG+0x37c>
		START_PARAM_LOOP()
 800c572:	9801      	ldr	r0, [sp, #4]
 800c574:	4639      	mov	r1, r7
 800c576:	4622      	mov	r2, r4
 800c578:	f7fb fdf8 	bl	800816c <atcc_extractElement>
 800c57c:	89e1      	ldrh	r1, [r4, #14]
 800c57e:	9002      	str	r0, [sp, #8]
 800c580:	2900      	cmp	r1, #0
 800c582:	f000 817d 	beq.w	800c880 <fRspAnalyze_CEREG+0x388>
				if (element_infos->param_rank == 2U) {
 800c586:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800c58a:	f1b9 0f02 	cmp.w	r9, #2
 800c58e:	d129      	bne.n	800c5e4 <fRspAnalyze_CEREG+0xec>
					uint32_t stat = ATutil_convertStringToInt(
 800c590:	8960      	ldrh	r0, [r4, #10]
 800c592:	4438      	add	r0, r7
 800c594:	f002 f8bc 	bl	800e710 <ATutil_convertStringToInt>
					p_modem_ctxt->persist.urc_avail_eps_network_registration =
 800c598:	280b      	cmp	r0, #11
					uint32_t stat = ATutil_convertStringToInt(
 800c59a:	4683      	mov	fp, r0
					p_modem_ctxt->persist.urc_avail_eps_network_registration =
 800c59c:	f04f 0801 	mov.w	r8, #1
 800c5a0:	bf28      	it	cs
 800c5a2:	2004      	movcs	r0, #4
 800c5a4:	b280      	uxth	r0, r0
	display_clear_network_state(retval, network_type);
 800c5a6:	2103      	movs	r1, #3
					p_modem_ctxt->persist.urc_avail_eps_network_registration =
 800c5a8:	f886 8014 	strb.w	r8, [r6, #20]
	display_clear_network_state(retval, network_type);
 800c5ac:	9003      	str	r0, [sp, #12]
 800c5ae:	f7fd fae7 	bl	8009b80 <display_clear_network_state>
					p_modem_ctxt->persist.eps_network_state =
 800c5b2:	9803      	ldr	r0, [sp, #12]
					PRINT_DBG("+CEREG URC: stat=%ld", stat)
 800c5b4:	49a6      	ldr	r1, [pc, #664]	; (800c850 <fRspAnalyze_CEREG+0x358>)
					p_modem_ctxt->persist.eps_network_state =
 800c5b6:	86b0      	strh	r0, [r6, #52]	; 0x34
					PRINT_DBG("+CEREG URC: stat=%ld", stat)
 800c5b8:	465a      	mov	r2, fp
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f010 fc7c 	bl	801ceb8 <sprintf>
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f00b fcb7 	bl	8017f34 <crs_strlen>
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	b283      	uxth	r3, r0
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	f00b fcef 	bl	8017fb0 <traceIF_itmPrint>
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f00b fcae 	bl	8017f34 <crs_strlen>
 800c5d8:	462a      	mov	r2, r5
 800c5da:	b283      	uxth	r3, r0
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4640      	mov	r0, r8
 800c5e0:	f00b ff0c 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 3U) {
 800c5e4:	8923      	ldrh	r3, [r4, #8]
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d122      	bne.n	800c630 <fRspAnalyze_CEREG+0x138>
					uint32_t tac = ATutil_extract_hex_value_from_quotes(
 800c5ea:	8960      	ldrh	r0, [r4, #10]
 800c5ec:	89e1      	ldrh	r1, [r4, #14]
 800c5ee:	2204      	movs	r2, #4
 800c5f0:	4438      	add	r0, r7
 800c5f2:	f002 f940 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_eps_location_info_tac =
 800c5f6:	f04f 0801 	mov.w	r8, #1
					uint32_t tac = ATutil_extract_hex_value_from_quotes(
 800c5fa:	4603      	mov	r3, r0
					PRINT_INFO("+CEREG URC: tac=%ld =0x%lx", tac, tac)
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	4995      	ldr	r1, [pc, #596]	; (800c854 <fRspAnalyze_CEREG+0x35c>)
							(uint16_t) tac;
 800c600:	8630      	strh	r0, [r6, #48]	; 0x30
					p_modem_ctxt->persist.urc_avail_eps_location_info_tac =
 800c602:	f886 8015 	strb.w	r8, [r6, #21]
					PRINT_INFO("+CEREG URC: tac=%ld =0x%lx", tac, tac)
 800c606:	4628      	mov	r0, r5
 800c608:	f010 fc56 	bl	801ceb8 <sprintf>
 800c60c:	4628      	mov	r0, r5
 800c60e:	f00b fc91 	bl	8017f34 <crs_strlen>
 800c612:	462a      	mov	r2, r5
 800c614:	b283      	uxth	r3, r0
 800c616:	4641      	mov	r1, r8
 800c618:	4640      	mov	r0, r8
 800c61a:	f00b fcc9 	bl	8017fb0 <traceIF_itmPrint>
 800c61e:	4628      	mov	r0, r5
 800c620:	f00b fc88 	bl	8017f34 <crs_strlen>
 800c624:	462a      	mov	r2, r5
 800c626:	b283      	uxth	r3, r0
 800c628:	4641      	mov	r1, r8
 800c62a:	4640      	mov	r0, r8
 800c62c:	f00b fee6 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 4U) {
 800c630:	8923      	ldrh	r3, [r4, #8]
 800c632:	2b04      	cmp	r3, #4
 800c634:	d122      	bne.n	800c67c <fRspAnalyze_CEREG+0x184>
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c636:	8960      	ldrh	r0, [r4, #10]
 800c638:	89e1      	ldrh	r1, [r4, #14]
 800c63a:	2208      	movs	r2, #8
 800c63c:	4438      	add	r0, r7
 800c63e:	f002 f91a 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
					p_modem_ctxt->persist.urc_avail_eps_location_info_ci =
 800c642:	f04f 0801 	mov.w	r8, #1
					uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c646:	4603      	mov	r3, r0
					PRINT_INFO("+CEREG URC: ci=%ld =0x%lx", ci, ci)
 800c648:	4602      	mov	r2, r0
 800c64a:	4983      	ldr	r1, [pc, #524]	; (800c858 <fRspAnalyze_CEREG+0x360>)
					p_modem_ctxt->persist.eps_location_info.ci = (uint32_t) ci;
 800c64c:	62f0      	str	r0, [r6, #44]	; 0x2c
					p_modem_ctxt->persist.urc_avail_eps_location_info_ci =
 800c64e:	f886 8016 	strb.w	r8, [r6, #22]
					PRINT_INFO("+CEREG URC: ci=%ld =0x%lx", ci, ci)
 800c652:	4628      	mov	r0, r5
 800c654:	f010 fc30 	bl	801ceb8 <sprintf>
 800c658:	4628      	mov	r0, r5
 800c65a:	f00b fc6b 	bl	8017f34 <crs_strlen>
 800c65e:	462a      	mov	r2, r5
 800c660:	b283      	uxth	r3, r0
 800c662:	4641      	mov	r1, r8
 800c664:	4640      	mov	r0, r8
 800c666:	f00b fca3 	bl	8017fb0 <traceIF_itmPrint>
 800c66a:	4628      	mov	r0, r5
 800c66c:	f00b fc62 	bl	8017f34 <crs_strlen>
 800c670:	462a      	mov	r2, r5
 800c672:	b283      	uxth	r3, r0
 800c674:	4641      	mov	r1, r8
 800c676:	4640      	mov	r0, r8
 800c678:	f00b fec0 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 5U) {
 800c67c:	8923      	ldrh	r3, [r4, #8]
 800c67e:	2b05      	cmp	r3, #5
 800c680:	d11b      	bne.n	800c6ba <fRspAnalyze_CEREG+0x1c2>
					PRINT_DBG("+CEREG URC: act=%ld",
 800c682:	8960      	ldrh	r0, [r4, #10]
 800c684:	89e1      	ldrh	r1, [r4, #14]
 800c686:	4438      	add	r0, r7
 800c688:	f002 f842 	bl	800e710 <ATutil_convertStringToInt>
 800c68c:	4973      	ldr	r1, [pc, #460]	; (800c85c <fRspAnalyze_CEREG+0x364>)
 800c68e:	4602      	mov	r2, r0
 800c690:	4628      	mov	r0, r5
 800c692:	f010 fc11 	bl	801ceb8 <sprintf>
 800c696:	4628      	mov	r0, r5
 800c698:	f00b fc4c 	bl	8017f34 <crs_strlen>
 800c69c:	462a      	mov	r2, r5
 800c69e:	b283      	uxth	r3, r0
 800c6a0:	2102      	movs	r1, #2
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	f00b fc84 	bl	8017fb0 <traceIF_itmPrint>
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f00b fc43 	bl	8017f34 <crs_strlen>
 800c6ae:	462a      	mov	r2, r5
 800c6b0:	b283      	uxth	r3, r0
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f00b fea1 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 6U) {
 800c6ba:	8923      	ldrh	r3, [r4, #8]
 800c6bc:	2b06      	cmp	r3, #6
 800c6be:	d11b      	bne.n	800c6f8 <fRspAnalyze_CEREG+0x200>
					PRINT_DBG("+CEREG URC: cause_type=%ld",
 800c6c0:	8960      	ldrh	r0, [r4, #10]
 800c6c2:	89e1      	ldrh	r1, [r4, #14]
 800c6c4:	4438      	add	r0, r7
 800c6c6:	f002 f823 	bl	800e710 <ATutil_convertStringToInt>
 800c6ca:	4965      	ldr	r1, [pc, #404]	; (800c860 <fRspAnalyze_CEREG+0x368>)
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f010 fbf2 	bl	801ceb8 <sprintf>
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f00b fc2d 	bl	8017f34 <crs_strlen>
 800c6da:	462a      	mov	r2, r5
 800c6dc:	b283      	uxth	r3, r0
 800c6de:	2102      	movs	r1, #2
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f00b fc65 	bl	8017fb0 <traceIF_itmPrint>
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f00b fc24 	bl	8017f34 <crs_strlen>
 800c6ec:	462a      	mov	r2, r5
 800c6ee:	b283      	uxth	r3, r0
 800c6f0:	2102      	movs	r1, #2
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	f00b fe82 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 7U) {
 800c6f8:	8923      	ldrh	r3, [r4, #8]
 800c6fa:	2b07      	cmp	r3, #7
 800c6fc:	d11b      	bne.n	800c736 <fRspAnalyze_CEREG+0x23e>
					PRINT_DBG("+CEREG URC: reject_cause=%ld",
 800c6fe:	8960      	ldrh	r0, [r4, #10]
 800c700:	89e1      	ldrh	r1, [r4, #14]
 800c702:	4438      	add	r0, r7
 800c704:	f002 f804 	bl	800e710 <ATutil_convertStringToInt>
 800c708:	4956      	ldr	r1, [pc, #344]	; (800c864 <fRspAnalyze_CEREG+0x36c>)
 800c70a:	4602      	mov	r2, r0
 800c70c:	4628      	mov	r0, r5
 800c70e:	f010 fbd3 	bl	801ceb8 <sprintf>
 800c712:	4628      	mov	r0, r5
 800c714:	f00b fc0e 	bl	8017f34 <crs_strlen>
 800c718:	462a      	mov	r2, r5
 800c71a:	b283      	uxth	r3, r0
 800c71c:	2102      	movs	r1, #2
 800c71e:	2001      	movs	r0, #1
 800c720:	f00b fc46 	bl	8017fb0 <traceIF_itmPrint>
 800c724:	4628      	mov	r0, r5
 800c726:	f00b fc05 	bl	8017f34 <crs_strlen>
 800c72a:	462a      	mov	r2, r5
 800c72c:	b283      	uxth	r3, r0
 800c72e:	2102      	movs	r1, #2
 800c730:	2001      	movs	r0, #1
 800c732:	f00b fe63 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 8U) {
 800c736:	8922      	ldrh	r2, [r4, #8]
 800c738:	2a08      	cmp	r2, #8
 800c73a:	d140      	bne.n	800c7be <fRspAnalyze_CEREG+0x2c6>
					uint32_t t3324_bin = ATutil_extract_bin_value_from_quotes(
 800c73c:	8960      	ldrh	r0, [r4, #10]
 800c73e:	89e1      	ldrh	r1, [r4, #14]
 800c740:	4438      	add	r0, r7
 800c742:	f002 f8b4 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c746:	4683      	mov	fp, r0
					uint32_t t3324_value = ATutil_convert_T3324_to_seconds(
 800c748:	f002 f8da 	bl	800e900 <ATutil_convert_T3324_to_seconds>
					if (t3324_value
 800c74c:	f8d6 35bc 	ldr.w	r3, [r6, #1468]	; 0x5bc
 800c750:	4283      	cmp	r3, r0
					uint32_t t3324_value = ATutil_convert_T3324_to_seconds(
 800c752:	4680      	mov	r8, r0
					if (t3324_value
 800c754:	d01b      	beq.n	800c78e <fRspAnalyze_CEREG+0x296>
						p_modem_ctxt->persist.urc_avail_lp_status = AT_TRUE;
 800c756:	f04f 0901 	mov.w	r9, #1
						PRINT_INFO("New T3324 value detected")
 800c75a:	4943      	ldr	r1, [pc, #268]	; (800c868 <fRspAnalyze_CEREG+0x370>)
						p_modem_ctxt->persist.low_power_status.nwk_active_time =
 800c75c:	f8c6 05bc 	str.w	r0, [r6, #1468]	; 0x5bc
						p_modem_ctxt->persist.urc_avail_lp_status = AT_TRUE;
 800c760:	f886 95c0 	strb.w	r9, [r6, #1472]	; 0x5c0
						PRINT_INFO("New T3324 value detected")
 800c764:	4628      	mov	r0, r5
 800c766:	f010 fc17 	bl	801cf98 <strcpy>
 800c76a:	4628      	mov	r0, r5
 800c76c:	f00b fbe2 	bl	8017f34 <crs_strlen>
 800c770:	462a      	mov	r2, r5
 800c772:	b283      	uxth	r3, r0
 800c774:	4649      	mov	r1, r9
 800c776:	4648      	mov	r0, r9
 800c778:	f00b fc1a 	bl	8017fb0 <traceIF_itmPrint>
 800c77c:	4628      	mov	r0, r5
 800c77e:	f00b fbd9 	bl	8017f34 <crs_strlen>
 800c782:	462a      	mov	r2, r5
 800c784:	b283      	uxth	r3, r0
 800c786:	4649      	mov	r1, r9
 800c788:	4648      	mov	r0, r9
 800c78a:	f00b fe37 	bl	80183fc <traceIF_uartPrint>
					PRINT_INFO("+CEREG URC: active_time= %ld sec [0x%lx]",
 800c78e:	4937      	ldr	r1, [pc, #220]	; (800c86c <fRspAnalyze_CEREG+0x374>)
 800c790:	465b      	mov	r3, fp
 800c792:	4642      	mov	r2, r8
 800c794:	4628      	mov	r0, r5
 800c796:	f010 fb8f 	bl	801ceb8 <sprintf>
 800c79a:	4628      	mov	r0, r5
 800c79c:	f00b fbca 	bl	8017f34 <crs_strlen>
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	b283      	uxth	r3, r0
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4608      	mov	r0, r1
 800c7a8:	f00b fc02 	bl	8017fb0 <traceIF_itmPrint>
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f00b fbc1 	bl	8017f34 <crs_strlen>
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	b283      	uxth	r3, r0
 800c7b6:	462a      	mov	r2, r5
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	f00b fe1f 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 9U) {
 800c7be:	8923      	ldrh	r3, [r4, #8]
 800c7c0:	2b09      	cmp	r3, #9
 800c7c2:	d15d      	bne.n	800c880 <fRspAnalyze_CEREG+0x388>
					uint32_t t3412_bin = ATutil_extract_bin_value_from_quotes(
 800c7c4:	8960      	ldrh	r0, [r4, #10]
 800c7c6:	89e1      	ldrh	r1, [r4, #14]
 800c7c8:	2208      	movs	r2, #8
 800c7ca:	4438      	add	r0, r7
 800c7cc:	f002 f86f 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800c7d0:	4683      	mov	fp, r0
					uint32_t t3412_value = ATutil_convert_T3412_to_seconds(
 800c7d2:	f002 f889 	bl	800e8e8 <ATutil_convert_T3412_to_seconds>
					if (t3412_value
 800c7d6:	f8d6 35b8 	ldr.w	r3, [r6, #1464]	; 0x5b8
 800c7da:	4283      	cmp	r3, r0
					uint32_t t3412_value = ATutil_convert_T3412_to_seconds(
 800c7dc:	4680      	mov	r8, r0
					if (t3412_value
 800c7de:	d01b      	beq.n	800c818 <fRspAnalyze_CEREG+0x320>
						p_modem_ctxt->persist.urc_avail_lp_status = AT_TRUE;
 800c7e0:	f04f 0901 	mov.w	r9, #1
						PRINT_INFO("New T3412 value detected")
 800c7e4:	4651      	mov	r1, sl
						p_modem_ctxt->persist.low_power_status.nwk_periodic_TAU =
 800c7e6:	f8c6 05b8 	str.w	r0, [r6, #1464]	; 0x5b8
						p_modem_ctxt->persist.urc_avail_lp_status = AT_TRUE;
 800c7ea:	f886 95c0 	strb.w	r9, [r6, #1472]	; 0x5c0
						PRINT_INFO("New T3412 value detected")
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f010 fbd2 	bl	801cf98 <strcpy>
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f00b fb9d 	bl	8017f34 <crs_strlen>
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	b283      	uxth	r3, r0
 800c7fe:	4649      	mov	r1, r9
 800c800:	4648      	mov	r0, r9
 800c802:	f00b fbd5 	bl	8017fb0 <traceIF_itmPrint>
 800c806:	4628      	mov	r0, r5
 800c808:	f00b fb94 	bl	8017f34 <crs_strlen>
 800c80c:	462a      	mov	r2, r5
 800c80e:	b283      	uxth	r3, r0
 800c810:	4649      	mov	r1, r9
 800c812:	4648      	mov	r0, r9
 800c814:	f00b fdf2 	bl	80183fc <traceIF_uartPrint>
					PRINT_INFO("+CEREG URC: periodic_tau= %ld sec [0x%lx]",
 800c818:	4915      	ldr	r1, [pc, #84]	; (800c870 <fRspAnalyze_CEREG+0x378>)
 800c81a:	465b      	mov	r3, fp
 800c81c:	4642      	mov	r2, r8
 800c81e:	4628      	mov	r0, r5
 800c820:	f010 fb4a 	bl	801ceb8 <sprintf>
 800c824:	4628      	mov	r0, r5
 800c826:	f00b fb85 	bl	8017f34 <crs_strlen>
 800c82a:	2101      	movs	r1, #1
 800c82c:	b283      	uxth	r3, r0
 800c82e:	462a      	mov	r2, r5
 800c830:	4608      	mov	r0, r1
 800c832:	f00b fbbd 	bl	8017fb0 <traceIF_itmPrint>
 800c836:	4628      	mov	r0, r5
 800c838:	f00b fb7c 	bl	8017f34 <crs_strlen>
 800c83c:	2101      	movs	r1, #1
 800c83e:	b283      	uxth	r3, r0
 800c840:	e01a      	b.n	800c878 <fRspAnalyze_CEREG+0x380>
 800c842:	bf00      	nop
 800c844:	08025f86 	.word	0x08025f86
 800c848:	20008ef8 	.word	0x20008ef8
 800c84c:	08025ae7 	.word	0x08025ae7
 800c850:	08026160 	.word	0x08026160
 800c854:	08026180 	.word	0x08026180
 800c858:	080261a6 	.word	0x080261a6
 800c85c:	080261cb 	.word	0x080261cb
 800c860:	080261ea 	.word	0x080261ea
 800c864:	08026210 	.word	0x08026210
 800c868:	08026088 	.word	0x08026088
 800c86c:	08026238 	.word	0x08026238
 800c870:	0802626c 	.word	0x0802626c
 800c874:	080260dc 	.word	0x080260dc
 800c878:	462a      	mov	r2, r5
 800c87a:	4608      	mov	r0, r1
 800c87c:	f00b fdbe 	bl	80183fc <traceIF_uartPrint>
							t3412_value, t3412_bin)
				}END_PARAM_LOOP()
 800c880:	9b02      	ldr	r3, [sp, #8]
 800c882:	2b01      	cmp	r3, #1
 800c884:	f040 810a 	bne.w	800ca9c <fRspAnalyze_CEREG+0x5a4>
 800c888:	e673      	b.n	800c572 <fRspAnalyze_CEREG+0x7a>
		if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800c88a:	9b01      	ldr	r3, [sp, #4]
 800c88c:	8b1d      	ldrh	r5, [r3, #24]
 800c88e:	2d02      	cmp	r5, #2
 800c890:	f040 81e4 	bne.w	800cc5c <fRspAnalyze_CEREG+0x764>
							PRINT_INFO("+CEREG: periodic_tau= %ld sec [0x%lx]",
 800c894:	4d83      	ldr	r5, [pc, #524]	; (800caa4 <fRspAnalyze_CEREG+0x5ac>)
			uint32_t n_val = 0U;
 800c896:	f04f 0b00 	mov.w	fp, #0
			START_PARAM_LOOP()
 800c89a:	4639      	mov	r1, r7
 800c89c:	9801      	ldr	r0, [sp, #4]
 800c89e:	4622      	mov	r2, r4
 800c8a0:	f7fb fc64 	bl	800816c <atcc_extractElement>
 800c8a4:	89e1      	ldrh	r1, [r4, #14]
 800c8a6:	9002      	str	r0, [sp, #8]
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	f000 80f3 	beq.w	800ca94 <fRspAnalyze_CEREG+0x59c>
					if (element_infos->param_rank == 2U) {
 800c8ae:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800c8b2:	f1b8 0f02 	cmp.w	r8, #2
 800c8b6:	d11b      	bne.n	800c8f0 <fRspAnalyze_CEREG+0x3f8>
						n_val = ATutil_convertStringToInt(
 800c8b8:	8960      	ldrh	r0, [r4, #10]
 800c8ba:	4438      	add	r0, r7
 800c8bc:	f001 ff28 	bl	800e710 <ATutil_convertStringToInt>
						PRINT_DBG("+CEREG: n=%ld", n_val)
 800c8c0:	4979      	ldr	r1, [pc, #484]	; (800caa8 <fRspAnalyze_CEREG+0x5b0>)
 800c8c2:	4602      	mov	r2, r0
						n_val = ATutil_convertStringToInt(
 800c8c4:	4683      	mov	fp, r0
						PRINT_DBG("+CEREG: n=%ld", n_val)
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f010 faf6 	bl	801ceb8 <sprintf>
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f00b fb31 	bl	8017f34 <crs_strlen>
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	b283      	uxth	r3, r0
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f00b fb69 	bl	8017fb0 <traceIF_itmPrint>
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f00b fb28 	bl	8017f34 <crs_strlen>
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	b283      	uxth	r3, r0
 800c8e8:	4641      	mov	r1, r8
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	f00b fd86 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 3U) {
 800c8f0:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800c8f4:	f1b9 0f03 	cmp.w	r9, #3
 800c8f8:	d129      	bne.n	800c94e <fRspAnalyze_CEREG+0x456>
						uint32_t stat = ATutil_convertStringToInt(
 800c8fa:	8960      	ldrh	r0, [r4, #10]
 800c8fc:	89e1      	ldrh	r1, [r4, #14]
 800c8fe:	4438      	add	r0, r7
 800c900:	f001 ff06 	bl	800e710 <ATutil_convertStringToInt>
 800c904:	280b      	cmp	r0, #11
 800c906:	bf34      	ite	cc
 800c908:	4682      	movcc	sl, r0
 800c90a:	f04f 0a04 	movcs.w	sl, #4
 800c90e:	fa1f fa8a 	uxth.w	sl, sl
 800c912:	4680      	mov	r8, r0
	display_clear_network_state(retval, network_type);
 800c914:	4649      	mov	r1, r9
 800c916:	4650      	mov	r0, sl
 800c918:	f7fd f932 	bl	8009b80 <display_clear_network_state>
						PRINT_DBG("+CEREG: stat=%ld", stat)
 800c91c:	4963      	ldr	r1, [pc, #396]	; (800caac <fRspAnalyze_CEREG+0x5b4>)
						p_modem_ctxt->persist.eps_network_state =
 800c91e:	f8a6 a034 	strh.w	sl, [r6, #52]	; 0x34
						PRINT_DBG("+CEREG: stat=%ld", stat)
 800c922:	4642      	mov	r2, r8
 800c924:	4628      	mov	r0, r5
 800c926:	f010 fac7 	bl	801ceb8 <sprintf>
 800c92a:	4628      	mov	r0, r5
 800c92c:	f00b fb02 	bl	8017f34 <crs_strlen>
 800c930:	462a      	mov	r2, r5
 800c932:	b283      	uxth	r3, r0
 800c934:	2102      	movs	r1, #2
 800c936:	2001      	movs	r0, #1
 800c938:	f00b fb3a 	bl	8017fb0 <traceIF_itmPrint>
 800c93c:	4628      	mov	r0, r5
 800c93e:	f00b faf9 	bl	8017f34 <crs_strlen>
 800c942:	462a      	mov	r2, r5
 800c944:	b283      	uxth	r3, r0
 800c946:	2102      	movs	r1, #2
 800c948:	2001      	movs	r0, #1
 800c94a:	f00b fd57 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 4U) {
 800c94e:	8922      	ldrh	r2, [r4, #8]
 800c950:	2a04      	cmp	r2, #4
 800c952:	d11d      	bne.n	800c990 <fRspAnalyze_CEREG+0x498>
						uint32_t tac = ATutil_extract_hex_value_from_quotes(
 800c954:	8960      	ldrh	r0, [r4, #10]
 800c956:	89e1      	ldrh	r1, [r4, #14]
 800c958:	4438      	add	r0, r7
 800c95a:	f001 ff8c 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CEREG: tac=%ld =0x%lx", tac, tac)
 800c95e:	4954      	ldr	r1, [pc, #336]	; (800cab0 <fRspAnalyze_CEREG+0x5b8>)
								(uint16_t) tac;
 800c960:	8630      	strh	r0, [r6, #48]	; 0x30
						uint32_t tac = ATutil_extract_hex_value_from_quotes(
 800c962:	4603      	mov	r3, r0
						PRINT_INFO("+CEREG: tac=%ld =0x%lx", tac, tac)
 800c964:	4602      	mov	r2, r0
 800c966:	4628      	mov	r0, r5
 800c968:	f010 faa6 	bl	801ceb8 <sprintf>
 800c96c:	4628      	mov	r0, r5
 800c96e:	f00b fae1 	bl	8017f34 <crs_strlen>
 800c972:	2101      	movs	r1, #1
 800c974:	b283      	uxth	r3, r0
 800c976:	462a      	mov	r2, r5
 800c978:	4608      	mov	r0, r1
 800c97a:	f00b fb19 	bl	8017fb0 <traceIF_itmPrint>
 800c97e:	4628      	mov	r0, r5
 800c980:	f00b fad8 	bl	8017f34 <crs_strlen>
 800c984:	2101      	movs	r1, #1
 800c986:	b283      	uxth	r3, r0
 800c988:	462a      	mov	r2, r5
 800c98a:	4608      	mov	r0, r1
 800c98c:	f00b fd36 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 5U) {
 800c990:	8923      	ldrh	r3, [r4, #8]
 800c992:	2b05      	cmp	r3, #5
 800c994:	d11e      	bne.n	800c9d4 <fRspAnalyze_CEREG+0x4dc>
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c996:	8960      	ldrh	r0, [r4, #10]
 800c998:	89e1      	ldrh	r1, [r4, #14]
 800c99a:	2208      	movs	r2, #8
 800c99c:	4438      	add	r0, r7
 800c99e:	f001 ff6a 	bl	800e876 <ATutil_extract_hex_value_from_quotes>
						PRINT_INFO("+CEREG: ci=%ld =0x%lx", ci, ci)
 800c9a2:	4944      	ldr	r1, [pc, #272]	; (800cab4 <fRspAnalyze_CEREG+0x5bc>)
						p_modem_ctxt->persist.eps_location_info.ci =
 800c9a4:	62f0      	str	r0, [r6, #44]	; 0x2c
						uint32_t ci = ATutil_extract_hex_value_from_quotes(
 800c9a6:	4603      	mov	r3, r0
						PRINT_INFO("+CEREG: ci=%ld =0x%lx", ci, ci)
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f010 fa84 	bl	801ceb8 <sprintf>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f00b fabf 	bl	8017f34 <crs_strlen>
 800c9b6:	2101      	movs	r1, #1
 800c9b8:	b283      	uxth	r3, r0
 800c9ba:	462a      	mov	r2, r5
 800c9bc:	4608      	mov	r0, r1
 800c9be:	f00b faf7 	bl	8017fb0 <traceIF_itmPrint>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f00b fab6 	bl	8017f34 <crs_strlen>
 800c9c8:	2101      	movs	r1, #1
 800c9ca:	b283      	uxth	r3, r0
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	f00b fd14 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 6U) {
 800c9d4:	8923      	ldrh	r3, [r4, #8]
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d11b      	bne.n	800ca12 <fRspAnalyze_CEREG+0x51a>
						PRINT_INFO("+CEREG: act=%ld",
 800c9da:	8960      	ldrh	r0, [r4, #10]
 800c9dc:	89e1      	ldrh	r1, [r4, #14]
 800c9de:	4438      	add	r0, r7
 800c9e0:	f001 fe96 	bl	800e710 <ATutil_convertStringToInt>
 800c9e4:	4934      	ldr	r1, [pc, #208]	; (800cab8 <fRspAnalyze_CEREG+0x5c0>)
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f010 fa65 	bl	801ceb8 <sprintf>
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f00b faa0 	bl	8017f34 <crs_strlen>
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	b283      	uxth	r3, r0
 800c9f8:	462a      	mov	r2, r5
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	f00b fad8 	bl	8017fb0 <traceIF_itmPrint>
 800ca00:	4628      	mov	r0, r5
 800ca02:	f00b fa97 	bl	8017f34 <crs_strlen>
 800ca06:	2101      	movs	r1, #1
 800ca08:	b283      	uxth	r3, r0
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	f00b fcf5 	bl	80183fc <traceIF_uartPrint>
					if (n_val <= 3U) {
 800ca12:	f1bb 0f03 	cmp.w	fp, #3
 800ca16:	d855      	bhi.n	800cac4 <fRspAnalyze_CEREG+0x5cc>
						if (element_infos->param_rank == 7U) {
 800ca18:	8923      	ldrh	r3, [r4, #8]
 800ca1a:	2b07      	cmp	r3, #7
 800ca1c:	d11b      	bne.n	800ca56 <fRspAnalyze_CEREG+0x55e>
							PRINT_DBG("+CEREG: cause_type=%ld",
 800ca1e:	8960      	ldrh	r0, [r4, #10]
 800ca20:	89e1      	ldrh	r1, [r4, #14]
 800ca22:	4438      	add	r0, r7
 800ca24:	f001 fe74 	bl	800e710 <ATutil_convertStringToInt>
 800ca28:	4924      	ldr	r1, [pc, #144]	; (800cabc <fRspAnalyze_CEREG+0x5c4>)
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f010 fa43 	bl	801ceb8 <sprintf>
 800ca32:	4628      	mov	r0, r5
 800ca34:	f00b fa7e 	bl	8017f34 <crs_strlen>
 800ca38:	462a      	mov	r2, r5
 800ca3a:	b283      	uxth	r3, r0
 800ca3c:	2102      	movs	r1, #2
 800ca3e:	2001      	movs	r0, #1
 800ca40:	f00b fab6 	bl	8017fb0 <traceIF_itmPrint>
 800ca44:	4628      	mov	r0, r5
 800ca46:	f00b fa75 	bl	8017f34 <crs_strlen>
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	b283      	uxth	r3, r0
 800ca4e:	2102      	movs	r1, #2
 800ca50:	2001      	movs	r0, #1
 800ca52:	f00b fcd3 	bl	80183fc <traceIF_uartPrint>
						if (element_infos->param_rank == 8U) {
 800ca56:	8923      	ldrh	r3, [r4, #8]
 800ca58:	2b08      	cmp	r3, #8
 800ca5a:	d11b      	bne.n	800ca94 <fRspAnalyze_CEREG+0x59c>
							PRINT_DBG("+CEREG: reject_cause=%ld",
 800ca5c:	8960      	ldrh	r0, [r4, #10]
 800ca5e:	89e1      	ldrh	r1, [r4, #14]
 800ca60:	4438      	add	r0, r7
 800ca62:	f001 fe55 	bl	800e710 <ATutil_convertStringToInt>
 800ca66:	4916      	ldr	r1, [pc, #88]	; (800cac0 <fRspAnalyze_CEREG+0x5c8>)
 800ca68:	4602      	mov	r2, r0
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f010 fa24 	bl	801ceb8 <sprintf>
 800ca70:	4628      	mov	r0, r5
 800ca72:	f00b fa5f 	bl	8017f34 <crs_strlen>
 800ca76:	462a      	mov	r2, r5
 800ca78:	b283      	uxth	r3, r0
 800ca7a:	2102      	movs	r1, #2
 800ca7c:	2001      	movs	r0, #1
 800ca7e:	f00b fa97 	bl	8017fb0 <traceIF_itmPrint>
 800ca82:	4628      	mov	r0, r5
 800ca84:	f00b fa56 	bl	8017f34 <crs_strlen>
 800ca88:	462a      	mov	r2, r5
 800ca8a:	b283      	uxth	r3, r0
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	2001      	movs	r0, #1
							PRINT_INFO("+CEREG: periodic_tau= %ld sec [0x%lx]",
 800ca90:	f00b fcb4 	bl	80183fc <traceIF_uartPrint>
					}END_PARAM_LOOP()
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	f43f aeff 	beq.w	800c89a <fRspAnalyze_CEREG+0x3a2>
	}

	return (retval);
}
 800ca9c:	2010      	movs	r0, #16
 800ca9e:	b005      	add	sp, #20
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	20008ef8 	.word	0x20008ef8
 800caa8:	08025faf 	.word	0x08025faf
 800caac:	08025fc8 	.word	0x08025fc8
 800cab0:	08025fe4 	.word	0x08025fe4
 800cab4:	08026006 	.word	0x08026006
 800cab8:	08026027 	.word	0x08026027
 800cabc:	08026042 	.word	0x08026042
 800cac0:	08026064 	.word	0x08026064
					} else if ((n_val == 4U) || (n_val == 5U)) {
 800cac4:	f1ab 0304 	sub.w	r3, fp, #4
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d8e3      	bhi.n	800ca94 <fRspAnalyze_CEREG+0x59c>
						if (element_infos->param_rank == 7U) {
 800cacc:	8923      	ldrh	r3, [r4, #8]
 800cace:	2b07      	cmp	r3, #7
 800cad0:	d11b      	bne.n	800cb0a <fRspAnalyze_CEREG+0x612>
							PRINT_DBG("+CEREG: cause_type=%ld",
 800cad2:	8960      	ldrh	r0, [r4, #10]
 800cad4:	89e1      	ldrh	r1, [r4, #14]
 800cad6:	4438      	add	r0, r7
 800cad8:	f001 fe1a 	bl	800e710 <ATutil_convertStringToInt>
 800cadc:	496c      	ldr	r1, [pc, #432]	; (800cc90 <fRspAnalyze_CEREG+0x798>)
 800cade:	4602      	mov	r2, r0
 800cae0:	4628      	mov	r0, r5
 800cae2:	f010 f9e9 	bl	801ceb8 <sprintf>
 800cae6:	4628      	mov	r0, r5
 800cae8:	f00b fa24 	bl	8017f34 <crs_strlen>
 800caec:	462a      	mov	r2, r5
 800caee:	b283      	uxth	r3, r0
 800caf0:	2102      	movs	r1, #2
 800caf2:	2001      	movs	r0, #1
 800caf4:	f00b fa5c 	bl	8017fb0 <traceIF_itmPrint>
 800caf8:	4628      	mov	r0, r5
 800cafa:	f00b fa1b 	bl	8017f34 <crs_strlen>
 800cafe:	462a      	mov	r2, r5
 800cb00:	b283      	uxth	r3, r0
 800cb02:	2102      	movs	r1, #2
 800cb04:	2001      	movs	r0, #1
 800cb06:	f00b fc79 	bl	80183fc <traceIF_uartPrint>
						if (element_infos->param_rank == 8U) {
 800cb0a:	8923      	ldrh	r3, [r4, #8]
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d11b      	bne.n	800cb48 <fRspAnalyze_CEREG+0x650>
							PRINT_DBG("+CEREG: reject_cause=%ld",
 800cb10:	8960      	ldrh	r0, [r4, #10]
 800cb12:	89e1      	ldrh	r1, [r4, #14]
 800cb14:	4438      	add	r0, r7
 800cb16:	f001 fdfb 	bl	800e710 <ATutil_convertStringToInt>
 800cb1a:	495e      	ldr	r1, [pc, #376]	; (800cc94 <fRspAnalyze_CEREG+0x79c>)
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f010 f9ca 	bl	801ceb8 <sprintf>
 800cb24:	4628      	mov	r0, r5
 800cb26:	f00b fa05 	bl	8017f34 <crs_strlen>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	b283      	uxth	r3, r0
 800cb2e:	2102      	movs	r1, #2
 800cb30:	2001      	movs	r0, #1
 800cb32:	f00b fa3d 	bl	8017fb0 <traceIF_itmPrint>
 800cb36:	4628      	mov	r0, r5
 800cb38:	f00b f9fc 	bl	8017f34 <crs_strlen>
 800cb3c:	462a      	mov	r2, r5
 800cb3e:	b283      	uxth	r3, r0
 800cb40:	2102      	movs	r1, #2
 800cb42:	2001      	movs	r0, #1
 800cb44:	f00b fc5a 	bl	80183fc <traceIF_uartPrint>
						if (element_infos->param_rank == 9U) {
 800cb48:	8923      	ldrh	r3, [r4, #8]
 800cb4a:	2b09      	cmp	r3, #9
 800cb4c:	d141      	bne.n	800cbd2 <fRspAnalyze_CEREG+0x6da>
									ATutil_extract_bin_value_from_quotes(
 800cb4e:	8960      	ldrh	r0, [r4, #10]
 800cb50:	89e1      	ldrh	r1, [r4, #14]
 800cb52:	2208      	movs	r2, #8
 800cb54:	4438      	add	r0, r7
 800cb56:	f001 feaa 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800cb5a:	4682      	mov	sl, r0
									ATutil_convert_T3324_to_seconds(t3324_bin);
 800cb5c:	f001 fed0 	bl	800e900 <ATutil_convert_T3324_to_seconds>
							if (t3324_value
 800cb60:	f8d6 35bc 	ldr.w	r3, [r6, #1468]	; 0x5bc
 800cb64:	4283      	cmp	r3, r0
									ATutil_convert_T3324_to_seconds(t3324_bin);
 800cb66:	4680      	mov	r8, r0
							if (t3324_value
 800cb68:	d01b      	beq.n	800cba2 <fRspAnalyze_CEREG+0x6aa>
								p_modem_ctxt->persist.urc_avail_lp_status =
 800cb6a:	f04f 0901 	mov.w	r9, #1
								PRINT_INFO("New T3324 value detected")
 800cb6e:	494a      	ldr	r1, [pc, #296]	; (800cc98 <fRspAnalyze_CEREG+0x7a0>)
								p_modem_ctxt->persist.low_power_status.nwk_active_time =
 800cb70:	f8c6 05bc 	str.w	r0, [r6, #1468]	; 0x5bc
								p_modem_ctxt->persist.urc_avail_lp_status =
 800cb74:	f886 95c0 	strb.w	r9, [r6, #1472]	; 0x5c0
								PRINT_INFO("New T3324 value detected")
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f010 fa0d 	bl	801cf98 <strcpy>
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f00b f9d8 	bl	8017f34 <crs_strlen>
 800cb84:	462a      	mov	r2, r5
 800cb86:	b283      	uxth	r3, r0
 800cb88:	4649      	mov	r1, r9
 800cb8a:	4648      	mov	r0, r9
 800cb8c:	f00b fa10 	bl	8017fb0 <traceIF_itmPrint>
 800cb90:	4628      	mov	r0, r5
 800cb92:	f00b f9cf 	bl	8017f34 <crs_strlen>
 800cb96:	462a      	mov	r2, r5
 800cb98:	b283      	uxth	r3, r0
 800cb9a:	4649      	mov	r1, r9
 800cb9c:	4648      	mov	r0, r9
 800cb9e:	f00b fc2d 	bl	80183fc <traceIF_uartPrint>
							PRINT_INFO("+CEREG: active_time= %ld sec [0x%lx]",
 800cba2:	493e      	ldr	r1, [pc, #248]	; (800cc9c <fRspAnalyze_CEREG+0x7a4>)
 800cba4:	4653      	mov	r3, sl
 800cba6:	4642      	mov	r2, r8
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f010 f985 	bl	801ceb8 <sprintf>
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f00b f9c0 	bl	8017f34 <crs_strlen>
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	b283      	uxth	r3, r0
 800cbb8:	462a      	mov	r2, r5
 800cbba:	4608      	mov	r0, r1
 800cbbc:	f00b f9f8 	bl	8017fb0 <traceIF_itmPrint>
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f00b f9b7 	bl	8017f34 <crs_strlen>
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	b283      	uxth	r3, r0
 800cbca:	462a      	mov	r2, r5
 800cbcc:	4608      	mov	r0, r1
 800cbce:	f00b fc15 	bl	80183fc <traceIF_uartPrint>
						if (element_infos->param_rank == 10U) {
 800cbd2:	8923      	ldrh	r3, [r4, #8]
 800cbd4:	2b0a      	cmp	r3, #10
 800cbd6:	f47f af5d 	bne.w	800ca94 <fRspAnalyze_CEREG+0x59c>
									ATutil_extract_bin_value_from_quotes(
 800cbda:	8960      	ldrh	r0, [r4, #10]
 800cbdc:	89e1      	ldrh	r1, [r4, #14]
 800cbde:	2208      	movs	r2, #8
 800cbe0:	4438      	add	r0, r7
 800cbe2:	f001 fe64 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800cbe6:	4682      	mov	sl, r0
									ATutil_convert_T3412_to_seconds(t3412_bin);
 800cbe8:	f001 fe7e 	bl	800e8e8 <ATutil_convert_T3412_to_seconds>
							if (t3412_value
 800cbec:	f8d6 35b8 	ldr.w	r3, [r6, #1464]	; 0x5b8
 800cbf0:	4283      	cmp	r3, r0
									ATutil_convert_T3412_to_seconds(t3412_bin);
 800cbf2:	4680      	mov	r8, r0
							if (t3412_value
 800cbf4:	d01b      	beq.n	800cc2e <fRspAnalyze_CEREG+0x736>
								p_modem_ctxt->persist.urc_avail_lp_status =
 800cbf6:	f04f 0901 	mov.w	r9, #1
								PRINT_INFO("New T3412 value detected")
 800cbfa:	4929      	ldr	r1, [pc, #164]	; (800cca0 <fRspAnalyze_CEREG+0x7a8>)
								p_modem_ctxt->persist.low_power_status.nwk_periodic_TAU =
 800cbfc:	f8c6 05b8 	str.w	r0, [r6, #1464]	; 0x5b8
								p_modem_ctxt->persist.urc_avail_lp_status =
 800cc00:	f886 95c0 	strb.w	r9, [r6, #1472]	; 0x5c0
								PRINT_INFO("New T3412 value detected")
 800cc04:	4628      	mov	r0, r5
 800cc06:	f010 f9c7 	bl	801cf98 <strcpy>
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f00b f992 	bl	8017f34 <crs_strlen>
 800cc10:	462a      	mov	r2, r5
 800cc12:	b283      	uxth	r3, r0
 800cc14:	4649      	mov	r1, r9
 800cc16:	4648      	mov	r0, r9
 800cc18:	f00b f9ca 	bl	8017fb0 <traceIF_itmPrint>
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f00b f989 	bl	8017f34 <crs_strlen>
 800cc22:	462a      	mov	r2, r5
 800cc24:	b283      	uxth	r3, r0
 800cc26:	4649      	mov	r1, r9
 800cc28:	4648      	mov	r0, r9
 800cc2a:	f00b fbe7 	bl	80183fc <traceIF_uartPrint>
							PRINT_INFO("+CEREG: periodic_tau= %ld sec [0x%lx]",
 800cc2e:	491d      	ldr	r1, [pc, #116]	; (800cca4 <fRspAnalyze_CEREG+0x7ac>)
 800cc30:	4653      	mov	r3, sl
 800cc32:	4642      	mov	r2, r8
 800cc34:	4628      	mov	r0, r5
 800cc36:	f010 f93f 	bl	801ceb8 <sprintf>
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f00b f97a 	bl	8017f34 <crs_strlen>
 800cc40:	2101      	movs	r1, #1
 800cc42:	b283      	uxth	r3, r0
 800cc44:	462a      	mov	r2, r5
 800cc46:	4608      	mov	r0, r1
 800cc48:	f00b f9b2 	bl	8017fb0 <traceIF_itmPrint>
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f00b f971 	bl	8017f34 <crs_strlen>
 800cc52:	2101      	movs	r1, #1
 800cc54:	b283      	uxth	r3, r0
 800cc56:	462a      	mov	r2, r5
 800cc58:	4608      	mov	r0, r1
 800cc5a:	e719      	b.n	800ca90 <fRspAnalyze_CEREG+0x598>
		else if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800cc5c:	2d01      	cmp	r5, #1
 800cc5e:	f47f af1d 	bne.w	800ca9c <fRspAnalyze_CEREG+0x5a4>
			PRINT_DBG("+CEREG for test cmd NOT IMPLEMENTED")
 800cc62:	4911      	ldr	r1, [pc, #68]	; (800cca8 <fRspAnalyze_CEREG+0x7b0>)
 800cc64:	4811      	ldr	r0, [pc, #68]	; (800ccac <fRspAnalyze_CEREG+0x7b4>)
 800cc66:	f010 f997 	bl	801cf98 <strcpy>
 800cc6a:	4810      	ldr	r0, [pc, #64]	; (800ccac <fRspAnalyze_CEREG+0x7b4>)
 800cc6c:	f00b f962 	bl	8017f34 <crs_strlen>
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <fRspAnalyze_CEREG+0x7b4>)
 800cc72:	b283      	uxth	r3, r0
 800cc74:	2102      	movs	r1, #2
 800cc76:	4628      	mov	r0, r5
 800cc78:	f00b f99a 	bl	8017fb0 <traceIF_itmPrint>
 800cc7c:	480b      	ldr	r0, [pc, #44]	; (800ccac <fRspAnalyze_CEREG+0x7b4>)
 800cc7e:	f00b f959 	bl	8017f34 <crs_strlen>
 800cc82:	4a0a      	ldr	r2, [pc, #40]	; (800ccac <fRspAnalyze_CEREG+0x7b4>)
 800cc84:	b283      	uxth	r3, r0
 800cc86:	2102      	movs	r1, #2
 800cc88:	4628      	mov	r0, r5
 800cc8a:	f00b fbb7 	bl	80183fc <traceIF_uartPrint>
 800cc8e:	e705      	b.n	800ca9c <fRspAnalyze_CEREG+0x5a4>
 800cc90:	08026042 	.word	0x08026042
 800cc94:	08026064 	.word	0x08026064
 800cc98:	08026088 	.word	0x08026088
 800cc9c:	080260ac 	.word	0x080260ac
 800cca0:	080260dc 	.word	0x080260dc
 800cca4:	08026100 	.word	0x08026100
 800cca8:	08026131 	.word	0x08026131
 800ccac:	20008ef8 	.word	0x20008ef8

0800ccb0 <fRspAnalyze_CGEV>:

at_action_rsp_t fRspAnalyze_CGEV(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	ed2d 8b02 	vpush	{d8}
 800ccb8:	b099      	sub	sp, #100	; 0x64
 800ccba:	ee08 0a10 	vmov	s16, r0
 800ccbe:	460d      	mov	r5, r1
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGEV()")
 800ccc0:	48c2      	ldr	r0, [pc, #776]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
 800ccc2:	49c3      	ldr	r1, [pc, #780]	; (800cfd0 <fRspAnalyze_CGEV+0x320>)
		at_element_info_t *element_infos) {
 800ccc4:	9203      	str	r2, [sp, #12]
 800ccc6:	461e      	mov	r6, r3
	PRINT_API("enter fRspAnalyze_CGEV()")
 800ccc8:	f010 f966 	bl	801cf98 <strcpy>
 800cccc:	48bf      	ldr	r0, [pc, #764]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
				} else {
					PRINT_DBG("+CGEV parameter rank %d ignored",
							element_infos->param_rank)
				}
			} else {
				PRINT_DBG("+CGEV parameter rank %d ignored",
 800ccce:	f8df a350 	ldr.w	sl, [pc, #848]	; 800d020 <fRspAnalyze_CGEV+0x370>
 800ccd2:	4cbe      	ldr	r4, [pc, #760]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
	PRINT_API("enter fRspAnalyze_CGEV()")
 800ccd4:	f00b f92e 	bl	8017f34 <crs_strlen>
 800ccd8:	4abc      	ldr	r2, [pc, #752]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
 800ccda:	b283      	uxth	r3, r0
 800ccdc:	2104      	movs	r1, #4
 800ccde:	2001      	movs	r0, #1
 800cce0:	f00b f966 	bl	8017fb0 <traceIF_itmPrint>
 800cce4:	48b9      	ldr	r0, [pc, #740]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
 800cce6:	f00b f925 	bl	8017f34 <crs_strlen>
 800ccea:	4ab8      	ldr	r2, [pc, #736]	; (800cfcc <fRspAnalyze_CGEV+0x31c>)
 800ccec:	b283      	uxth	r3, r0
 800ccee:	2104      	movs	r1, #4
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	f00b fb83 	bl	80183fc <traceIF_uartPrint>
	START_PARAM_LOOP()
 800ccf6:	9903      	ldr	r1, [sp, #12]
 800ccf8:	ee18 0a10 	vmov	r0, s16
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	f7fb fa35 	bl	800816c <atcc_extractElement>
 800cd02:	f8b6 800e 	ldrh.w	r8, [r6, #14]
 800cd06:	9004      	str	r0, [sp, #16]
 800cd08:	f1b8 0f00 	cmp.w	r8, #0
 800cd0c:	d028      	beq.n	800cd60 <fRspAnalyze_CGEV+0xb0>
			if (element_infos->param_rank == 2U) {
 800cd0e:	8932      	ldrh	r2, [r6, #8]
 800cd10:	2a02      	cmp	r2, #2
 800cd12:	f040 81fa 	bne.w	800d10a <fRspAnalyze_CGEV+0x45a>
				if (p_modem_ctxt->persist.urc_avail_pdn_event != AT_TRUE) {
 800cd16:	f895 7020 	ldrb.w	r7, [r5, #32]
 800cd1a:	2f00      	cmp	r7, #0
 800cd1c:	f040 81d9 	bne.w	800d0d2 <fRspAnalyze_CGEV+0x422>
					reset_pdn_event(&p_modem_ctxt->persist);
 800cd20:	f105 090c 	add.w	r9, r5, #12
 800cd24:	4648      	mov	r0, r9
 800cd26:	f7fc ff1b 	bl	8009b60 <reset_pdn_event>
					uint8_t copy_params[MAX_CGEV_PARAM_SIZE] = { 0 };
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	221c      	movs	r2, #28
 800cd2e:	a808      	add	r0, sp, #32
 800cd30:	9707      	str	r7, [sp, #28]
 800cd32:	f010 f891 	bl	801ce58 <memset>
					size_t size_mini = ATC_GET_MINIMUM_SIZE(
 800cd36:	89f2      	ldrh	r2, [r6, #14]
					(void) memcpy((void*) copy_params,
 800cd38:	9b03      	ldr	r3, [sp, #12]
							(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800cd3a:	8971      	ldrh	r1, [r6, #10]
						} else if (0 == strcmp((CRC_CHAR_t*) found, "ME")) {
 800cd3c:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 800d024 <fRspAnalyze_CGEV+0x374>
					(void) memcpy((void*) copy_params,
 800cd40:	2a20      	cmp	r2, #32
 800cd42:	4419      	add	r1, r3
 800cd44:	bf28      	it	cs
 800cd46:	2220      	movcs	r2, #32
 800cd48:	a807      	add	r0, sp, #28
 800cd4a:	f010 f877 	bl	801ce3c <memcpy>
					found = (AT_CHAR_t*) strtok((CRC_CHAR_t*) copy_params, " ");
 800cd4e:	49a1      	ldr	r1, [pc, #644]	; (800cfd4 <fRspAnalyze_CGEV+0x324>)
 800cd50:	a807      	add	r0, sp, #28
 800cd52:	f010 f965 	bl	801d020 <strtok>
 800cd56:	4607      	mov	r7, r0
					while (found != NULL) {
 800cd58:	b93f      	cbnz	r7, 800cd6a <fRspAnalyze_CGEV+0xba>
					p_modem_ctxt->persist.urc_avail_pdn_event = AT_TRUE;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f885 3020 	strb.w	r3, [r5, #32]
						element_infos->param_rank)
			}END_PARAM_LOOP()
 800cd60:	9b04      	ldr	r3, [sp, #16]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d0c7      	beq.n	800ccf6 <fRspAnalyze_CGEV+0x46>
 800cd66:	2010      	movs	r0, #16
 800cd68:	e1ca      	b.n	800d100 <fRspAnalyze_CGEV+0x450>
						if (0 == strcmp((CRC_CHAR_t*) found, "NW")) {
 800cd6a:	499b      	ldr	r1, [pc, #620]	; (800cfd8 <fRspAnalyze_CGEV+0x328>)
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7f3 fa47 	bl	8000200 <strcmp>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d139      	bne.n	800cdea <fRspAnalyze_CGEV+0x13a>
							PRINT_DBG("<NW>")
 800cd76:	4999      	ldr	r1, [pc, #612]	; (800cfdc <fRspAnalyze_CGEV+0x32c>)
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f010 f90d 	bl	801cf98 <strcpy>
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f00b f8d8 	bl	8017f34 <crs_strlen>
 800cd84:	4622      	mov	r2, r4
 800cd86:	b283      	uxth	r3, r0
 800cd88:	2102      	movs	r1, #2
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	f00b f910 	bl	8017fb0 <traceIF_itmPrint>
 800cd90:	4620      	mov	r0, r4
 800cd92:	f00b f8cf 	bl	8017f34 <crs_strlen>
 800cd96:	4622      	mov	r2, r4
 800cd98:	b283      	uxth	r3, r0
 800cd9a:	2102      	movs	r1, #2
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f00b fb2d 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_origine =
 800cda2:	2301      	movs	r3, #1
							p_modem_ctxt->persist.pdn_event.event_origine =
 800cda4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
						PRINT_DBG("(%d) ---> %s", strlen((CRC_CHAR_t* )found),
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f7f3 fa33 	bl	8000214 <strlen>
 800cdae:	463b      	mov	r3, r7
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	498b      	ldr	r1, [pc, #556]	; (800cfe0 <fRspAnalyze_CGEV+0x330>)
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f010 f87f 	bl	801ceb8 <sprintf>
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f00b f8ba 	bl	8017f34 <crs_strlen>
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	b283      	uxth	r3, r0
 800cdc4:	2102      	movs	r1, #2
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f00b f8f2 	bl	8017fb0 <traceIF_itmPrint>
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f00b f8b1 	bl	8017f34 <crs_strlen>
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	b283      	uxth	r3, r0
 800cdd6:	2102      	movs	r1, #2
 800cdd8:	2001      	movs	r0, #1
 800cdda:	f00b fb0f 	bl	80183fc <traceIF_uartPrint>
						found = (AT_CHAR_t*) strtok(NULL, " ");
 800cdde:	497d      	ldr	r1, [pc, #500]	; (800cfd4 <fRspAnalyze_CGEV+0x324>)
 800cde0:	2000      	movs	r0, #0
 800cde2:	f010 f91d 	bl	801d020 <strtok>
 800cde6:	4607      	mov	r7, r0
 800cde8:	e7b6      	b.n	800cd58 <fRspAnalyze_CGEV+0xa8>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "ME")) {
 800cdea:	4659      	mov	r1, fp
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7f3 fa07 	bl	8000200 <strcmp>
 800cdf2:	b9b8      	cbnz	r0, 800ce24 <fRspAnalyze_CGEV+0x174>
							PRINT_DBG("<ME>")
 800cdf4:	497b      	ldr	r1, [pc, #492]	; (800cfe4 <fRspAnalyze_CGEV+0x334>)
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f010 f8ce 	bl	801cf98 <strcpy>
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f00b f899 	bl	8017f34 <crs_strlen>
 800ce02:	4622      	mov	r2, r4
 800ce04:	b283      	uxth	r3, r0
 800ce06:	2102      	movs	r1, #2
 800ce08:	2001      	movs	r0, #1
 800ce0a:	f00b f8d1 	bl	8017fb0 <traceIF_itmPrint>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f00b f890 	bl	8017f34 <crs_strlen>
 800ce14:	4622      	mov	r2, r4
 800ce16:	b283      	uxth	r3, r0
 800ce18:	2102      	movs	r1, #2
 800ce1a:	2001      	movs	r0, #1
 800ce1c:	f00b faee 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_origine =
 800ce20:	2302      	movs	r3, #2
 800ce22:	e7bf      	b.n	800cda4 <fRspAnalyze_CGEV+0xf4>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "PDN")) {
 800ce24:	4970      	ldr	r1, [pc, #448]	; (800cfe8 <fRspAnalyze_CGEV+0x338>)
 800ce26:	4638      	mov	r0, r7
 800ce28:	f7f3 f9ea 	bl	8000200 <strcmp>
 800ce2c:	b9c8      	cbnz	r0, 800ce62 <fRspAnalyze_CGEV+0x1b2>
							PRINT_DBG("<PDN>")
 800ce2e:	496f      	ldr	r1, [pc, #444]	; (800cfec <fRspAnalyze_CGEV+0x33c>)
 800ce30:	4620      	mov	r0, r4
 800ce32:	f010 f8b1 	bl	801cf98 <strcpy>
 800ce36:	4620      	mov	r0, r4
 800ce38:	f00b f87c 	bl	8017f34 <crs_strlen>
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	b283      	uxth	r3, r0
 800ce40:	2102      	movs	r1, #2
 800ce42:	2001      	movs	r0, #1
 800ce44:	f00b f8b4 	bl	8017fb0 <traceIF_itmPrint>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f00b f873 	bl	8017f34 <crs_strlen>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	b283      	uxth	r3, r0
 800ce52:	2102      	movs	r1, #2
 800ce54:	2001      	movs	r0, #1
 800ce56:	f00b fad1 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_scope =
 800ce5a:	230a      	movs	r3, #10
 800ce5c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
 800ce60:	e7a2      	b.n	800cda8 <fRspAnalyze_CGEV+0xf8>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "ACT")) {
 800ce62:	4963      	ldr	r1, [pc, #396]	; (800cff0 <fRspAnalyze_CGEV+0x340>)
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7f3 f9cb 	bl	8000200 <strcmp>
 800ce6a:	b9c8      	cbnz	r0, 800cea0 <fRspAnalyze_CGEV+0x1f0>
							PRINT_DBG("<ACT>")
 800ce6c:	4961      	ldr	r1, [pc, #388]	; (800cff4 <fRspAnalyze_CGEV+0x344>)
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f010 f892 	bl	801cf98 <strcpy>
 800ce74:	4620      	mov	r0, r4
 800ce76:	f00b f85d 	bl	8017f34 <crs_strlen>
 800ce7a:	4622      	mov	r2, r4
 800ce7c:	b283      	uxth	r3, r0
 800ce7e:	2102      	movs	r1, #2
 800ce80:	2001      	movs	r0, #1
 800ce82:	f00b f895 	bl	8017fb0 <traceIF_itmPrint>
 800ce86:	4620      	mov	r0, r4
 800ce88:	f00b f854 	bl	8017f34 <crs_strlen>
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	b283      	uxth	r3, r0
 800ce90:	2102      	movs	r1, #2
 800ce92:	2001      	movs	r0, #1
 800ce94:	f00b fab2 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800ce98:	230c      	movs	r3, #12
							p_modem_ctxt->persist.pdn_event.event_type =
 800ce9a:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
 800ce9e:	e783      	b.n	800cda8 <fRspAnalyze_CGEV+0xf8>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "DEACT")) {
 800cea0:	4955      	ldr	r1, [pc, #340]	; (800cff8 <fRspAnalyze_CGEV+0x348>)
 800cea2:	4638      	mov	r0, r7
 800cea4:	f7f3 f9ac 	bl	8000200 <strcmp>
 800cea8:	b9b8      	cbnz	r0, 800ceda <fRspAnalyze_CGEV+0x22a>
							PRINT_DBG("<DEACT>")
 800ceaa:	4954      	ldr	r1, [pc, #336]	; (800cffc <fRspAnalyze_CGEV+0x34c>)
 800ceac:	4620      	mov	r0, r4
 800ceae:	f010 f873 	bl	801cf98 <strcpy>
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f00b f83e 	bl	8017f34 <crs_strlen>
 800ceb8:	4622      	mov	r2, r4
 800ceba:	b283      	uxth	r3, r0
 800cebc:	2102      	movs	r1, #2
 800cebe:	2001      	movs	r0, #1
 800cec0:	f00b f876 	bl	8017fb0 <traceIF_itmPrint>
 800cec4:	4620      	mov	r0, r4
 800cec6:	f00b f835 	bl	8017f34 <crs_strlen>
 800ceca:	4622      	mov	r2, r4
 800cecc:	b283      	uxth	r3, r0
 800cece:	2102      	movs	r1, #2
 800ced0:	2001      	movs	r0, #1
 800ced2:	f00b fa93 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800ced6:	230d      	movs	r3, #13
 800ced8:	e7df      	b.n	800ce9a <fRspAnalyze_CGEV+0x1ea>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "REJECT")) {
 800ceda:	4949      	ldr	r1, [pc, #292]	; (800d000 <fRspAnalyze_CGEV+0x350>)
 800cedc:	4638      	mov	r0, r7
 800cede:	f7f3 f98f 	bl	8000200 <strcmp>
 800cee2:	b9b8      	cbnz	r0, 800cf14 <fRspAnalyze_CGEV+0x264>
							PRINT_DBG("<REJECT>")
 800cee4:	4947      	ldr	r1, [pc, #284]	; (800d004 <fRspAnalyze_CGEV+0x354>)
 800cee6:	4620      	mov	r0, r4
 800cee8:	f010 f856 	bl	801cf98 <strcpy>
 800ceec:	4620      	mov	r0, r4
 800ceee:	f00b f821 	bl	8017f34 <crs_strlen>
 800cef2:	4622      	mov	r2, r4
 800cef4:	b283      	uxth	r3, r0
 800cef6:	2102      	movs	r1, #2
 800cef8:	2001      	movs	r0, #1
 800cefa:	f00b f859 	bl	8017fb0 <traceIF_itmPrint>
 800cefe:	4620      	mov	r0, r4
 800cf00:	f00b f818 	bl	8017f34 <crs_strlen>
 800cf04:	4622      	mov	r2, r4
 800cf06:	b283      	uxth	r3, r0
 800cf08:	2102      	movs	r1, #2
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	f00b fa76 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800cf10:	230e      	movs	r3, #14
 800cf12:	e7c2      	b.n	800ce9a <fRspAnalyze_CGEV+0x1ea>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "DETACH")) {
 800cf14:	493c      	ldr	r1, [pc, #240]	; (800d008 <fRspAnalyze_CGEV+0x358>)
 800cf16:	4638      	mov	r0, r7
 800cf18:	f7f3 f972 	bl	8000200 <strcmp>
 800cf1c:	b9d0      	cbnz	r0, 800cf54 <fRspAnalyze_CGEV+0x2a4>
							PRINT_DBG("<DETACH>")
 800cf1e:	493b      	ldr	r1, [pc, #236]	; (800d00c <fRspAnalyze_CGEV+0x35c>)
 800cf20:	4620      	mov	r0, r4
 800cf22:	f010 f839 	bl	801cf98 <strcpy>
 800cf26:	4620      	mov	r0, r4
 800cf28:	f00b f804 	bl	8017f34 <crs_strlen>
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	b283      	uxth	r3, r0
 800cf30:	2102      	movs	r1, #2
 800cf32:	2001      	movs	r0, #1
 800cf34:	f00b f83c 	bl	8017fb0 <traceIF_itmPrint>
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f00a fffb 	bl	8017f34 <crs_strlen>
 800cf3e:	4622      	mov	r2, r4
 800cf40:	b283      	uxth	r3, r0
 800cf42:	2102      	movs	r1, #2
 800cf44:	2001      	movs	r0, #1
 800cf46:	f00b fa59 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800cf4a:	f640 530f 	movw	r3, #3343	; 0xd0f
 800cf4e:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
 800cf52:	e729      	b.n	800cda8 <fRspAnalyze_CGEV+0xf8>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "CLASS")) {
 800cf54:	492e      	ldr	r1, [pc, #184]	; (800d010 <fRspAnalyze_CGEV+0x360>)
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7f3 f952 	bl	8000200 <strcmp>
 800cf5c:	b9b8      	cbnz	r0, 800cf8e <fRspAnalyze_CGEV+0x2de>
							PRINT_DBG("<CLASS>")
 800cf5e:	492d      	ldr	r1, [pc, #180]	; (800d014 <fRspAnalyze_CGEV+0x364>)
 800cf60:	4620      	mov	r0, r4
 800cf62:	f010 f819 	bl	801cf98 <strcpy>
 800cf66:	4620      	mov	r0, r4
 800cf68:	f00a ffe4 	bl	8017f34 <crs_strlen>
 800cf6c:	4622      	mov	r2, r4
 800cf6e:	b283      	uxth	r3, r0
 800cf70:	2102      	movs	r1, #2
 800cf72:	2001      	movs	r0, #1
 800cf74:	f00b f81c 	bl	8017fb0 <traceIF_itmPrint>
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f00a ffdb 	bl	8017f34 <crs_strlen>
 800cf7e:	4622      	mov	r2, r4
 800cf80:	b283      	uxth	r3, r0
 800cf82:	2102      	movs	r1, #2
 800cf84:	2001      	movs	r0, #1
 800cf86:	f00b fa39 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800cf8a:	2310      	movs	r3, #16
 800cf8c:	e785      	b.n	800ce9a <fRspAnalyze_CGEV+0x1ea>
						} else if (0 == strcmp((CRC_CHAR_t*) found, "MODIFY")) {
 800cf8e:	4922      	ldr	r1, [pc, #136]	; (800d018 <fRspAnalyze_CGEV+0x368>)
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7f3 f935 	bl	8000200 <strcmp>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d146      	bne.n	800d028 <fRspAnalyze_CGEV+0x378>
							PRINT_DBG("<MODIFY>")
 800cf9a:	4920      	ldr	r1, [pc, #128]	; (800d01c <fRspAnalyze_CGEV+0x36c>)
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f00f fffb 	bl	801cf98 <strcpy>
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f00a ffc6 	bl	8017f34 <crs_strlen>
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	b283      	uxth	r3, r0
 800cfac:	2102      	movs	r1, #2
 800cfae:	2001      	movs	r0, #1
 800cfb0:	f00a fffe 	bl	8017fb0 <traceIF_itmPrint>
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f00a ffbd 	bl	8017f34 <crs_strlen>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	b283      	uxth	r3, r0
 800cfbe:	2102      	movs	r1, #2
 800cfc0:	2001      	movs	r0, #1
 800cfc2:	f00b fa1b 	bl	80183fc <traceIF_uartPrint>
							p_modem_ctxt->persist.pdn_event.event_type =
 800cfc6:	2311      	movs	r3, #17
 800cfc8:	e767      	b.n	800ce9a <fRspAnalyze_CGEV+0x1ea>
 800cfca:	bf00      	nop
 800cfcc:	20008ef8 	.word	0x20008ef8
 800cfd0:	080262a1 	.word	0x080262a1
 800cfd4:	08026da8 	.word	0x08026da8
 800cfd8:	080262c9 	.word	0x080262c9
 800cfdc:	080262cc 	.word	0x080262cc
 800cfe0:	08026442 	.word	0x08026442
 800cfe4:	080262df 	.word	0x080262df
 800cfe8:	080262ef 	.word	0x080262ef
 800cfec:	080262f3 	.word	0x080262f3
 800cff0:	08026317 	.word	0x08026317
 800cff4:	08026304 	.word	0x08026304
 800cff8:	08026315 	.word	0x08026315
 800cffc:	0802631b 	.word	0x0802631b
 800d000:	0802632e 	.word	0x0802632e
 800d004:	08026335 	.word	0x08026335
 800d008:	08026349 	.word	0x08026349
 800d00c:	08026350 	.word	0x08026350
 800d010:	08026364 	.word	0x08026364
 800d014:	0802636a 	.word	0x0802636a
 800d018:	0802637d 	.word	0x0802637d
 800d01c:	08026384 	.word	0x08026384
 800d020:	08026517 	.word	0x08026517
 800d024:	080262dc 	.word	0x080262dc
							if (p_modem_ctxt->persist.pdn_event.event_origine
 800d028:	f895 8050 	ldrb.w	r8, [r5, #80]	; 0x50
 800d02c:	f1b8 0f01 	cmp.w	r8, #1
 800d030:	d14a      	bne.n	800d0c8 <fRspAnalyze_CGEV+0x418>
								if (p_modem_ctxt->persist.pdn_event.event_type
 800d032:	f895 2052 	ldrb.w	r2, [r5, #82]	; 0x52
 800d036:	2a0f      	cmp	r2, #15
 800d038:	d116      	bne.n	800d068 <fRspAnalyze_CGEV+0x3b8>
									PRINT_ERR(
 800d03a:	498a      	ldr	r1, [pc, #552]	; (800d264 <fRspAnalyze_CGEV+0x5b4>)
 800d03c:	4620      	mov	r0, r4
 800d03e:	f00f ffab 	bl	801cf98 <strcpy>
 800d042:	4620      	mov	r0, r4
 800d044:	f00a ff76 	bl	8017f34 <crs_strlen>
 800d048:	4622      	mov	r2, r4
 800d04a:	b283      	uxth	r3, r0
 800d04c:	2110      	movs	r1, #16
 800d04e:	4640      	mov	r0, r8
 800d050:	f00a ffae 	bl	8017fb0 <traceIF_itmPrint>
 800d054:	4620      	mov	r0, r4
 800d056:	f00a ff6d 	bl	8017f34 <crs_strlen>
 800d05a:	4622      	mov	r2, r4
 800d05c:	b283      	uxth	r3, r0
 800d05e:	2110      	movs	r1, #16
								PRINT_DBG("ME events ignored")
 800d060:	2001      	movs	r0, #1
 800d062:	f00b f9cb 	bl	80183fc <traceIF_uartPrint>
 800d066:	e69f      	b.n	800cda8 <fRspAnalyze_CGEV+0xf8>
								} else if (p_modem_ctxt->persist.pdn_event.event_type
 800d068:	2a0d      	cmp	r2, #13
 800d06a:	d128      	bne.n	800d0be <fRspAnalyze_CGEV+0x40e>
									if (p_modem_ctxt->persist.pdn_event.event_scope
 800d06c:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 800d070:	2b0a      	cmp	r3, #10
 800d072:	f47f ae99 	bne.w	800cda8 <fRspAnalyze_CGEV+0xf8>
 800d076:	4638      	mov	r0, r7
 800d078:	f7f3 f8cc 	bl	8000214 <strlen>
												ATutil_convertStringToInt(
 800d07c:	b281      	uxth	r1, r0
 800d07e:	4638      	mov	r0, r7
 800d080:	f001 fb46 	bl	800e710 <ATutil_convertStringToInt>
												atcm_get_configID_for_modem_cid(
 800d084:	b2c1      	uxtb	r1, r0
 800d086:	9005      	str	r0, [sp, #20]
 800d088:	4648      	mov	r0, r9
 800d08a:	f7fc fd57 	bl	8009b3c <atcm_get_configID_for_modem_cid>
										PRINT_DBG(
 800d08e:	9a05      	ldr	r2, [sp, #20]
										p_modem_ctxt->persist.pdn_event.conf_id =
 800d090:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
												atcm_get_configID_for_modem_cid(
 800d094:	4603      	mov	r3, r0
										PRINT_DBG(
 800d096:	4974      	ldr	r1, [pc, #464]	; (800d268 <fRspAnalyze_CGEV+0x5b8>)
 800d098:	4620      	mov	r0, r4
 800d09a:	f00f ff0d 	bl	801ceb8 <sprintf>
								PRINT_DBG("ME events ignored")
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f00a ff48 	bl	8017f34 <crs_strlen>
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	b283      	uxth	r3, r0
 800d0a8:	2102      	movs	r1, #2
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	f00a ff80 	bl	8017fb0 <traceIF_itmPrint>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f00a ff3f 	bl	8017f34 <crs_strlen>
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	b283      	uxth	r3, r0
 800d0ba:	2102      	movs	r1, #2
 800d0bc:	e7d0      	b.n	800d060 <fRspAnalyze_CGEV+0x3b0>
									PRINT_DBG("event type (= %d) ignored",
 800d0be:	496b      	ldr	r1, [pc, #428]	; (800d26c <fRspAnalyze_CGEV+0x5bc>)
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f00f fef9 	bl	801ceb8 <sprintf>
 800d0c6:	e7ea      	b.n	800d09e <fRspAnalyze_CGEV+0x3ee>
								PRINT_DBG("ME events ignored")
 800d0c8:	4969      	ldr	r1, [pc, #420]	; (800d270 <fRspAnalyze_CGEV+0x5c0>)
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f00f ff64 	bl	801cf98 <strcpy>
 800d0d0:	e7e5      	b.n	800d09e <fRspAnalyze_CGEV+0x3ee>
					PRINT_ERR(
 800d0d2:	4968      	ldr	r1, [pc, #416]	; (800d274 <fRspAnalyze_CGEV+0x5c4>)
 800d0d4:	4868      	ldr	r0, [pc, #416]	; (800d278 <fRspAnalyze_CGEV+0x5c8>)
 800d0d6:	f00f ff5f 	bl	801cf98 <strcpy>
 800d0da:	4867      	ldr	r0, [pc, #412]	; (800d278 <fRspAnalyze_CGEV+0x5c8>)
 800d0dc:	f00a ff2a 	bl	8017f34 <crs_strlen>
 800d0e0:	4a65      	ldr	r2, [pc, #404]	; (800d278 <fRspAnalyze_CGEV+0x5c8>)
 800d0e2:	b283      	uxth	r3, r0
 800d0e4:	2110      	movs	r1, #16
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	f00a ff62 	bl	8017fb0 <traceIF_itmPrint>
 800d0ec:	4862      	ldr	r0, [pc, #392]	; (800d278 <fRspAnalyze_CGEV+0x5c8>)
 800d0ee:	f00a ff21 	bl	8017f34 <crs_strlen>
 800d0f2:	4a61      	ldr	r2, [pc, #388]	; (800d278 <fRspAnalyze_CGEV+0x5c8>)
 800d0f4:	b283      	uxth	r3, r0
 800d0f6:	2110      	movs	r1, #16
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	f00b f97f 	bl	80183fc <traceIF_uartPrint>
 800d0fe:	2004      	movs	r0, #4

	return (retval);
}
 800d100:	b019      	add	sp, #100	; 0x64
 800d102:	ecbd 8b02 	vpop	{d8}
 800d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (element_infos->param_rank == 3U) {
 800d10a:	2a03      	cmp	r2, #3
 800d10c:	f040 808a 	bne.w	800d224 <fRspAnalyze_CGEV+0x574>
						&& (p_modem_ctxt->persist.pdn_event.event_type
 800d110:	6d2b      	ldr	r3, [r5, #80]	; 0x50
				if ((p_modem_ctxt->persist.pdn_event.event_origine
 800d112:	495a      	ldr	r1, [pc, #360]	; (800d27c <fRspAnalyze_CGEV+0x5cc>)
						&& (p_modem_ctxt->persist.pdn_event.event_type
 800d114:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
				if ((p_modem_ctxt->persist.pdn_event.event_origine
 800d118:	428b      	cmp	r3, r1
 800d11a:	f040 808c 	bne.w	800d236 <fRspAnalyze_CGEV+0x586>
					(void) memset((void*) &ip_addr_info, 0,
 800d11e:	2241      	movs	r2, #65	; 0x41
 800d120:	2100      	movs	r1, #0
 800d122:	a807      	add	r0, sp, #28
 800d124:	f00f fe98 	bl	801ce58 <memset>
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
 800d128:	9b03      	ldr	r3, [sp, #12]
							(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800d12a:	8971      	ldrh	r1, [r6, #10]
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
 800d12c:	4642      	mov	r2, r8
 800d12e:	4419      	add	r1, r3
					ip_addr_info.ip_addr_type = CS_IPAT_INVALID;
 800d130:	2700      	movs	r7, #0
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
 800d132:	f10d 001d 	add.w	r0, sp, #29
					ip_addr_info.ip_addr_type = CS_IPAT_INVALID;
 800d136:	f88d 701c 	strb.w	r7, [sp, #28]
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
 800d13a:	f00f fe7f 	bl	801ce3c <memcpy>
					PRINT_DBG("<PDP_addr>=%s",
 800d13e:	4950      	ldr	r1, [pc, #320]	; (800d280 <fRspAnalyze_CGEV+0x5d0>)
 800d140:	f10d 021d 	add.w	r2, sp, #29
 800d144:	4620      	mov	r0, r4
 800d146:	f00f feb7 	bl	801ceb8 <sprintf>
 800d14a:	4620      	mov	r0, r4
 800d14c:	f00a fef2 	bl	8017f34 <crs_strlen>
 800d150:	4622      	mov	r2, r4
 800d152:	b283      	uxth	r3, r0
 800d154:	2102      	movs	r1, #2
 800d156:	2001      	movs	r0, #1
 800d158:	f00a ff2a 	bl	8017fb0 <traceIF_itmPrint>
 800d15c:	4620      	mov	r0, r4
 800d15e:	f00a fee9 	bl	8017f34 <crs_strlen>
 800d162:	4622      	mov	r2, r4
 800d164:	b283      	uxth	r3, r0
 800d166:	2102      	movs	r1, #2
 800d168:	2001      	movs	r0, #1
 800d16a:	f00b f947 	bl	80183fc <traceIF_uartPrint>
	for (uint8_t loop = 0U; loop < MODEM_MAX_NB_PDP_CTXT; loop++) {
 800d16e:	f205 396a 	addw	r9, r5, #874	; 0x36a
	CS_PDN_conf_id_t user_cid = CS_PDN_NOT_DEFINED;
 800d172:	f04f 080c 	mov.w	r8, #12
		PRINT_DBG("[Compare ip addr with user cid=%d]: <%s> vs <%s>", loop,
 800d176:	4943      	ldr	r1, [pc, #268]	; (800d284 <fRspAnalyze_CGEV+0x5d4>)
 800d178:	f8cd 9000 	str.w	r9, [sp]
 800d17c:	f10d 031d 	add.w	r3, sp, #29
 800d180:	463a      	mov	r2, r7
 800d182:	4620      	mov	r0, r4
 800d184:	f00f fe98 	bl	801ceb8 <sprintf>
 800d188:	4620      	mov	r0, r4
 800d18a:	f00a fed3 	bl	8017f34 <crs_strlen>
 800d18e:	4622      	mov	r2, r4
 800d190:	b283      	uxth	r3, r0
 800d192:	2102      	movs	r1, #2
 800d194:	2001      	movs	r0, #1
 800d196:	f00a ff0b 	bl	8017fb0 <traceIF_itmPrint>
 800d19a:	4620      	mov	r0, r4
 800d19c:	f00a feca 	bl	8017f34 <crs_strlen>
 800d1a0:	4622      	mov	r2, r4
 800d1a2:	b283      	uxth	r3, r0
 800d1a4:	2102      	movs	r1, #2
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	f00b f928 	bl	80183fc <traceIF_uartPrint>
		size1 = (uint8_t) strlen((CRC_CHAR_t*) &ip_addr_struct->ip_addr_value);
 800d1ac:	f10d 001d 	add.w	r0, sp, #29
 800d1b0:	f7f3 f830 	bl	8000214 <strlen>
 800d1b4:	9005      	str	r0, [sp, #20]
		size2 = (uint8_t) strlen(
 800d1b6:	4648      	mov	r0, r9
 800d1b8:	f7f3 f82c 	bl	8000214 <strlen>
		minsize = (size1 < size2) ? size1 : size2;
 800d1bc:	9a05      	ldr	r2, [sp, #20]
 800d1be:	b2c0      	uxtb	r0, r0
 800d1c0:	b2d2      	uxtb	r2, r2
 800d1c2:	4282      	cmp	r2, r0
 800d1c4:	bf28      	it	cs
 800d1c6:	4602      	movcs	r2, r0
				== memcmp((AT_CHAR_t*) &ip_addr_struct->ip_addr_value[0],
 800d1c8:	4649      	mov	r1, r9
 800d1ca:	f10d 001d 	add.w	r0, sp, #29
 800d1ce:	fa5f fb87 	uxtb.w	fp, r7
 800d1d2:	9205      	str	r2, [sp, #20]
 800d1d4:	f00f fe24 	bl	801ce20 <memcmp>
		if ((0
 800d1d8:	b9e0      	cbnz	r0, 800d214 <fRspAnalyze_CGEV+0x564>
						(size_t) minsize)) && (minsize != 0U)) {
 800d1da:	9a05      	ldr	r2, [sp, #20]
 800d1dc:	b1d2      	cbz	r2, 800d214 <fRspAnalyze_CGEV+0x564>
			user_cid = atcm_convert_index_to_PDN_conf(loop);
 800d1de:	4658      	mov	r0, fp
 800d1e0:	f7fc fcba 	bl	8009b58 <atcm_convert_index_to_PDN_conf>
			PRINT_DBG("Found matching user cid=%d", user_cid)
 800d1e4:	4928      	ldr	r1, [pc, #160]	; (800d288 <fRspAnalyze_CGEV+0x5d8>)
 800d1e6:	4602      	mov	r2, r0
			user_cid = atcm_convert_index_to_PDN_conf(loop);
 800d1e8:	4680      	mov	r8, r0
			PRINT_DBG("Found matching user cid=%d", user_cid)
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f00f fe64 	bl	801ceb8 <sprintf>
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f00a fe9f 	bl	8017f34 <crs_strlen>
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	b283      	uxth	r3, r0
 800d1fa:	2102      	movs	r1, #2
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	f00a fed7 	bl	8017fb0 <traceIF_itmPrint>
 800d202:	4620      	mov	r0, r4
 800d204:	f00a fe96 	bl	8017f34 <crs_strlen>
 800d208:	4622      	mov	r2, r4
 800d20a:	b283      	uxth	r3, r0
 800d20c:	2102      	movs	r1, #2
 800d20e:	2001      	movs	r0, #1
 800d210:	f00b f8f4 	bl	80183fc <traceIF_uartPrint>
	for (uint8_t loop = 0U; loop < MODEM_MAX_NB_PDP_CTXT; loop++) {
 800d214:	3701      	adds	r7, #1
 800d216:	2f06      	cmp	r7, #6
 800d218:	f109 0944 	add.w	r9, r9, #68	; 0x44
 800d21c:	d1ab      	bne.n	800d176 <fRspAnalyze_CGEV+0x4c6>
					p_modem_ctxt->persist.pdn_event.conf_id =
 800d21e:	f885 8053 	strb.w	r8, [r5, #83]	; 0x53
 800d222:	e59d      	b.n	800cd60 <fRspAnalyze_CGEV+0xb0>
			} else if (element_infos->param_rank == 4U) {
 800d224:	2a04      	cmp	r2, #4
 800d226:	d106      	bne.n	800d236 <fRspAnalyze_CGEV+0x586>
						&& (p_modem_ctxt->persist.pdn_event.event_type
 800d228:	6d2b      	ldr	r3, [r5, #80]	; 0x50
				if ((p_modem_ctxt->persist.pdn_event.event_origine
 800d22a:	4914      	ldr	r1, [pc, #80]	; (800d27c <fRspAnalyze_CGEV+0x5cc>)
						&& (p_modem_ctxt->persist.pdn_event.event_type
 800d22c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
				if ((p_modem_ctxt->persist.pdn_event.event_origine
 800d230:	428b      	cmp	r3, r1
 800d232:	f43f ad95 	beq.w	800cd60 <fRspAnalyze_CGEV+0xb0>
				PRINT_DBG("+CGEV parameter rank %d ignored",
 800d236:	4651      	mov	r1, sl
 800d238:	4620      	mov	r0, r4
 800d23a:	f00f fe3d 	bl	801ceb8 <sprintf>
 800d23e:	4620      	mov	r0, r4
 800d240:	f00a fe78 	bl	8017f34 <crs_strlen>
 800d244:	4622      	mov	r2, r4
 800d246:	b283      	uxth	r3, r0
 800d248:	2102      	movs	r1, #2
 800d24a:	2001      	movs	r0, #1
 800d24c:	f00a feb0 	bl	8017fb0 <traceIF_itmPrint>
 800d250:	4620      	mov	r0, r4
 800d252:	f00a fe6f 	bl	8017f34 <crs_strlen>
 800d256:	4622      	mov	r2, r4
 800d258:	b283      	uxth	r3, r0
 800d25a:	2102      	movs	r1, #2
 800d25c:	2001      	movs	r0, #1
 800d25e:	f00b f8cd 	bl	80183fc <traceIF_uartPrint>
 800d262:	e57d      	b.n	800cd60 <fRspAnalyze_CGEV+0xb0>
 800d264:	08026398 	.word	0x08026398
 800d268:	080263ce 	.word	0x080263ce
 800d26c:	08026400 	.word	0x08026400
 800d270:	08026425 	.word	0x08026425
 800d274:	0802645a 	.word	0x0802645a
 800d278:	20008ef8 	.word	0x20008ef8
 800d27c:	000d0001 	.word	0x000d0001
 800d280:	0802649c 	.word	0x0802649c
 800d284:	080264b5 	.word	0x080264b5
 800d288:	080264f1 	.word	0x080264f1

0800d28c <fRspAnalyze_CSQ>:

at_action_rsp_t fRspAnalyze_CSQ(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	4688      	mov	r8, r1
 800d292:	9000      	str	r0, [sp, #0]
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CSQ()")
 800d294:	4954      	ldr	r1, [pc, #336]	; (800d3e8 <fRspAnalyze_CSQ+0x15c>)
 800d296:	4855      	ldr	r0, [pc, #340]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
		at_element_info_t *element_infos) {
 800d298:	4616      	mov	r6, r2
 800d29a:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CSQ()")
 800d29c:	f00f fe7c 	bl	801cf98 <strcpy>
 800d2a0:	4852      	ldr	r0, [pc, #328]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
 800d2a2:	f00a fe47 	bl	8017f34 <crs_strlen>
 800d2a6:	4a51      	ldr	r2, [pc, #324]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
 800d2a8:	b283      	uxth	r3, r0
 800d2aa:	2104      	movs	r1, #4
 800d2ac:	2001      	movs	r0, #1
 800d2ae:	f00a fe7f 	bl	8017fb0 <traceIF_itmPrint>
 800d2b2:	484e      	ldr	r0, [pc, #312]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
 800d2b4:	f00a fe3e 	bl	8017f34 <crs_strlen>
 800d2b8:	4a4c      	ldr	r2, [pc, #304]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
 800d2ba:	b283      	uxth	r3, r0
 800d2bc:	2104      	movs	r1, #4
 800d2be:	2001      	movs	r0, #1
 800d2c0:	f00b f89c 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for CSQ */
	/* for EXECUTION COMMAND only  */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	8b1b      	ldrh	r3, [r3, #24]
 800d2c8:	2b04      	cmp	r3, #4
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
 800d2ca:	f04f 0910 	mov.w	r9, #16
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800d2ce:	f040 8087 	bne.w	800d3e0 <fRspAnalyze_CSQ+0x154>
				}
				if (element_infos->param_rank == 3U) {
					uint32_t ber = ATutil_convertStringToInt(
							&p_msg_in->buffer[element_infos->str_start_idx],
							element_infos->str_size);
					PRINT_DBG("+CSQ ber=%ld", ber)
 800d2d2:	4c46      	ldr	r4, [pc, #280]	; (800d3ec <fRspAnalyze_CSQ+0x160>)
					PRINT_DBG("+CSQ rssi=%ld", rssi)
 800d2d4:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800d3f4 <fRspAnalyze_CSQ+0x168>
		START_PARAM_LOOP()
 800d2d8:	9800      	ldr	r0, [sp, #0]
 800d2da:	4631      	mov	r1, r6
 800d2dc:	462a      	mov	r2, r5
 800d2de:	f7fa ff45 	bl	800816c <atcc_extractElement>
 800d2e2:	89e9      	ldrh	r1, [r5, #14]
 800d2e4:	9001      	str	r0, [sp, #4]
 800d2e6:	2900      	cmp	r1, #0
 800d2e8:	d076      	beq.n	800d3d8 <fRspAnalyze_CSQ+0x14c>
				if (element_infos->param_rank == 2U) {
 800d2ea:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800d2ee:	f1ba 0f02 	cmp.w	sl, #2
 800d2f2:	d135      	bne.n	800d360 <fRspAnalyze_CSQ+0xd4>
					uint32_t rssi = ATutil_convertStringToInt(
 800d2f4:	8968      	ldrh	r0, [r5, #10]
 800d2f6:	4430      	add	r0, r6
 800d2f8:	f001 fa0a 	bl	800e710 <ATutil_convertStringToInt>
					PRINT_DBG("+CSQ rssi=%ld", rssi)
 800d2fc:	4659      	mov	r1, fp
 800d2fe:	4602      	mov	r2, r0
					uint32_t rssi = ATutil_convertStringToInt(
 800d300:	4607      	mov	r7, r0
					PRINT_DBG("+CSQ rssi=%ld", rssi)
 800d302:	4620      	mov	r0, r4
 800d304:	f00f fdd8 	bl	801ceb8 <sprintf>
 800d308:	4620      	mov	r0, r4
 800d30a:	f00a fe13 	bl	8017f34 <crs_strlen>
 800d30e:	4622      	mov	r2, r4
 800d310:	b283      	uxth	r3, r0
 800d312:	4651      	mov	r1, sl
 800d314:	2001      	movs	r0, #1
 800d316:	f00a fe4b 	bl	8017fb0 <traceIF_itmPrint>
 800d31a:	4620      	mov	r0, r4
 800d31c:	f00a fe0a 	bl	8017f34 <crs_strlen>
 800d320:	4622      	mov	r2, r4
 800d322:	b283      	uxth	r3, r0
 800d324:	4651      	mov	r1, sl
 800d326:	2001      	movs	r0, #1
 800d328:	f00b f868 	bl	80183fc <traceIF_uartPrint>
					PRINT_INFO("+CSQ rssi=%ld", rssi)
 800d32c:	463a      	mov	r2, r7
 800d32e:	4659      	mov	r1, fp
 800d330:	4620      	mov	r0, r4
 800d332:	f00f fdc1 	bl	801ceb8 <sprintf>
 800d336:	4620      	mov	r0, r4
 800d338:	f00a fdfc 	bl	8017f34 <crs_strlen>
 800d33c:	2101      	movs	r1, #1
 800d33e:	b283      	uxth	r3, r0
 800d340:	4622      	mov	r2, r4
 800d342:	4608      	mov	r0, r1
 800d344:	f00a fe34 	bl	8017fb0 <traceIF_itmPrint>
 800d348:	4620      	mov	r0, r4
 800d34a:	f00a fdf3 	bl	8017f34 <crs_strlen>
 800d34e:	2101      	movs	r1, #1
 800d350:	b283      	uxth	r3, r0
 800d352:	4622      	mov	r2, r4
 800d354:	4608      	mov	r0, r1
 800d356:	f00b f851 	bl	80183fc <traceIF_uartPrint>
					p_modem_ctxt->SID_ctxt.signal_quality->rssi =
 800d35a:	f8d8 3678 	ldr.w	r3, [r8, #1656]	; 0x678
							(uint8_t) rssi;
 800d35e:	701f      	strb	r7, [r3, #0]
				if (element_infos->param_rank == 3U) {
 800d360:	892b      	ldrh	r3, [r5, #8]
 800d362:	2b03      	cmp	r3, #3
 800d364:	d138      	bne.n	800d3d8 <fRspAnalyze_CSQ+0x14c>
					uint32_t ber = ATutil_convertStringToInt(
 800d366:	8968      	ldrh	r0, [r5, #10]
 800d368:	89e9      	ldrh	r1, [r5, #14]
 800d36a:	4430      	add	r0, r6
 800d36c:	f001 f9d0 	bl	800e710 <ATutil_convertStringToInt>
					PRINT_DBG("+CSQ ber=%ld", ber)
 800d370:	491f      	ldr	r1, [pc, #124]	; (800d3f0 <fRspAnalyze_CSQ+0x164>)
 800d372:	4602      	mov	r2, r0
					uint32_t ber = ATutil_convertStringToInt(
 800d374:	4607      	mov	r7, r0
					PRINT_DBG("+CSQ ber=%ld", ber)
 800d376:	4620      	mov	r0, r4
 800d378:	f00f fd9e 	bl	801ceb8 <sprintf>
 800d37c:	4620      	mov	r0, r4
 800d37e:	f00a fdd9 	bl	8017f34 <crs_strlen>
 800d382:	4622      	mov	r2, r4
 800d384:	b283      	uxth	r3, r0
 800d386:	2102      	movs	r1, #2
 800d388:	2001      	movs	r0, #1
 800d38a:	f00a fe11 	bl	8017fb0 <traceIF_itmPrint>
 800d38e:	4620      	mov	r0, r4
 800d390:	f00a fdd0 	bl	8017f34 <crs_strlen>
 800d394:	4622      	mov	r2, r4
 800d396:	b283      	uxth	r3, r0
 800d398:	2102      	movs	r1, #2
 800d39a:	2001      	movs	r0, #1
 800d39c:	f00b f82e 	bl	80183fc <traceIF_uartPrint>
					PRINT_INFO("+CSQ ber=%ld", ber)
 800d3a0:	4913      	ldr	r1, [pc, #76]	; (800d3f0 <fRspAnalyze_CSQ+0x164>)
 800d3a2:	463a      	mov	r2, r7
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f00f fd87 	bl	801ceb8 <sprintf>
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f00a fdc2 	bl	8017f34 <crs_strlen>
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	b283      	uxth	r3, r0
 800d3b4:	4622      	mov	r2, r4
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	f00a fdfa 	bl	8017fb0 <traceIF_itmPrint>
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f00a fdb9 	bl	8017f34 <crs_strlen>
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	b283      	uxth	r3, r0
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4608      	mov	r0, r1
 800d3ca:	f00b f817 	bl	80183fc <traceIF_uartPrint>
					p_modem_ctxt->SID_ctxt.signal_quality->ber = (uint8_t) ber;
 800d3ce:	f8d8 3678 	ldr.w	r3, [r8, #1656]	; 0x678
					/******Ashu Modification******/
					//As CSQ shall be enough to know if we have some signal strength or not(to check antenna presence)
					retval = ATACTION_RSP_FRC_END;
 800d3d2:	f04f 0901 	mov.w	r9, #1
					p_modem_ctxt->SID_ctxt.signal_quality->ber = (uint8_t) ber;
 800d3d6:	705f      	strb	r7, [r3, #1]
					/******Ashu Modification******/
				}END_PARAM_LOOP()
 800d3d8:	9b01      	ldr	r3, [sp, #4]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	f43f af7c 	beq.w	800d2d8 <fRspAnalyze_CSQ+0x4c>
	}

	return (retval);
}
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	b003      	add	sp, #12
 800d3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e8:	08026542 	.word	0x08026542
 800d3ec:	20008ef8 	.word	0x20008ef8
 800d3f0:	08026582 	.word	0x08026582
 800d3f4:	08026569 	.word	0x08026569

0800d3f8 <fRspAnalyze_CGPADDR>:

at_action_rsp_t fRspAnalyze_CGPADDR(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	4680      	mov	r8, r0
 800d3fe:	b09d      	sub	sp, #116	; 0x74
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CGPADDR()")
 800d400:	4878      	ldr	r0, [pc, #480]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)
		at_element_info_t *element_infos) {
 800d402:	460e      	mov	r6, r1
	PRINT_API("enter fRspAnalyze_CGPADDR()")
 800d404:	4978      	ldr	r1, [pc, #480]	; (800d5e8 <fRspAnalyze_CGPADDR+0x1f0>)
		at_element_info_t *element_infos) {
 800d406:	4691      	mov	r9, r2
 800d408:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CGPADDR()")
 800d40a:	f00f fdc5 	bl	801cf98 <strcpy>
 800d40e:	4875      	ldr	r0, [pc, #468]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)
 800d410:	f00a fd90 	bl	8017f34 <crs_strlen>
 800d414:	4a73      	ldr	r2, [pc, #460]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)
 800d416:	b283      	uxth	r3, r0
 800d418:	2104      	movs	r1, #4
 800d41a:	2001      	movs	r0, #1
 800d41c:	f00a fdc8 	bl	8017fb0 <traceIF_itmPrint>
 800d420:	4870      	ldr	r0, [pc, #448]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)
 800d422:	f00a fd87 	bl	8017f34 <crs_strlen>
 800d426:	4a6f      	ldr	r2, [pc, #444]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)
 800d428:	b283      	uxth	r3, r0
 800d42a:	2104      	movs	r1, #4
 800d42c:	2001      	movs	r0, #1
 800d42e:	f00a ffe5 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for CGPADDR */
	/* for WRITE COMMAND only  */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800d432:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 800d436:	2b03      	cmp	r3, #3
 800d438:	d147      	bne.n	800d4ca <fRspAnalyze_CGPADDR+0xd2>
		 *         format = a1.a2.a3.a4 for IPv4
		 *         format = a1.a2.a3.a4.a5a.a6.a7.a8.a9.a10.a11.a12a.a13.a14.a15.a16 for IPv6
		 */

		START_PARAM_LOOP()
				PRINT_DBG("+CGPADDR param_rank = %d", element_infos->param_rank)
 800d43a:	4c6a      	ldr	r4, [pc, #424]	; (800d5e4 <fRspAnalyze_CGPADDR+0x1ec>)

					/* retrive IP address value */
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
							(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
							(size_t) element_infos->str_size);
					PRINT_DBG("+CGPADDR addr=%s",
 800d43c:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800d600 <fRspAnalyze_CGPADDR+0x208>
		START_PARAM_LOOP()
 800d440:	462a      	mov	r2, r5
 800d442:	4649      	mov	r1, r9
 800d444:	4640      	mov	r0, r8
 800d446:	f7fa fe91 	bl	800816c <atcc_extractElement>
 800d44a:	89eb      	ldrh	r3, [r5, #14]
 800d44c:	9001      	str	r0, [sp, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d038      	beq.n	800d4c4 <fRspAnalyze_CGPADDR+0xcc>
				PRINT_DBG("+CGPADDR param_rank = %d", element_infos->param_rank)
 800d452:	892a      	ldrh	r2, [r5, #8]
 800d454:	4965      	ldr	r1, [pc, #404]	; (800d5ec <fRspAnalyze_CGPADDR+0x1f4>)
 800d456:	4620      	mov	r0, r4
 800d458:	f00f fd2e 	bl	801ceb8 <sprintf>
 800d45c:	4620      	mov	r0, r4
 800d45e:	f00a fd69 	bl	8017f34 <crs_strlen>
 800d462:	4622      	mov	r2, r4
 800d464:	b283      	uxth	r3, r0
 800d466:	2102      	movs	r1, #2
 800d468:	2001      	movs	r0, #1
 800d46a:	f00a fda1 	bl	8017fb0 <traceIF_itmPrint>
 800d46e:	4620      	mov	r0, r4
 800d470:	f00a fd60 	bl	8017f34 <crs_strlen>
 800d474:	4622      	mov	r2, r4
 800d476:	b283      	uxth	r3, r0
 800d478:	2102      	movs	r1, #2
 800d47a:	2001      	movs	r0, #1
 800d47c:	f00a ffbe 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 2U) {
 800d480:	892f      	ldrh	r7, [r5, #8]
 800d482:	2f02      	cmp	r7, #2
 800d484:	d125      	bne.n	800d4d2 <fRspAnalyze_CGPADDR+0xda>
					uint32_t modem_cid = ATutil_convertStringToInt(
 800d486:	8968      	ldrh	r0, [r5, #10]
 800d488:	89e9      	ldrh	r1, [r5, #14]
 800d48a:	4448      	add	r0, r9
 800d48c:	f001 f940 	bl	800e710 <ATutil_convertStringToInt>
					PRINT_DBG("+CGPADDR cid=%ld", modem_cid)
 800d490:	4957      	ldr	r1, [pc, #348]	; (800d5f0 <fRspAnalyze_CGPADDR+0x1f8>)
 800d492:	4602      	mov	r2, r0
					uint32_t modem_cid = ATutil_convertStringToInt(
 800d494:	4682      	mov	sl, r0
					PRINT_DBG("+CGPADDR cid=%ld", modem_cid)
 800d496:	4620      	mov	r0, r4
 800d498:	f00f fd0e 	bl	801ceb8 <sprintf>
 800d49c:	4620      	mov	r0, r4
 800d49e:	f00a fd49 	bl	8017f34 <crs_strlen>
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	b283      	uxth	r3, r0
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	2001      	movs	r0, #1
 800d4aa:	f00a fd81 	bl	8017fb0 <traceIF_itmPrint>
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f00a fd40 	bl	8017f34 <crs_strlen>
 800d4b4:	4622      	mov	r2, r4
 800d4b6:	b283      	uxth	r3, r0
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	f00a ff9e 	bl	80183fc <traceIF_uartPrint>
					p_modem_ctxt->CMD_ctxt.modem_cid = modem_cid;
 800d4c0:	f8c6 a768 	str.w	sl, [r6, #1896]	; 0x768
								(uint8_t) p_modem_ctxt->CMD_ctxt.modem_cid,
								&ip_addr_info);
					}
				} else {
					/* parameters ignored */
				}END_PARAM_LOOP()
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d0ba      	beq.n	800d440 <fRspAnalyze_CGPADDR+0x48>
	}

	return (retval);
}
 800d4ca:	2010      	movs	r0, #16
 800d4cc:	b01d      	add	sp, #116	; 0x74
 800d4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				} else if ((element_infos->param_rank == 3U)
 800d4d2:	3f03      	subs	r7, #3
 800d4d4:	2f01      	cmp	r7, #1
 800d4d6:	d8f5      	bhi.n	800d4c4 <fRspAnalyze_CGPADDR+0xcc>
					(void) memset((void*) &ip_addr_info, 0,
 800d4d8:	2241      	movs	r2, #65	; 0x41
 800d4da:	2100      	movs	r1, #0
 800d4dc:	a80b      	add	r0, sp, #44	; 0x2c
 800d4de:	f00f fcbb 	bl	801ce58 <memset>
							(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800d4e2:	8969      	ldrh	r1, [r5, #10]
					(void) memcpy((void*) &(ip_addr_info.ip_addr_value),
 800d4e4:	89ea      	ldrh	r2, [r5, #14]
 800d4e6:	4449      	add	r1, r9
 800d4e8:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800d4ec:	f00f fca6 	bl	801ce3c <memcpy>
					PRINT_DBG("+CGPADDR addr=%s",
 800d4f0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 800d4f4:	4659      	mov	r1, fp
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f00f fcde 	bl	801ceb8 <sprintf>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f00a fd19 	bl	8017f34 <crs_strlen>
 800d502:	4622      	mov	r2, r4
 800d504:	b283      	uxth	r3, r0
 800d506:	2102      	movs	r1, #2
 800d508:	2001      	movs	r0, #1
 800d50a:	f00a fd51 	bl	8017fb0 <traceIF_itmPrint>
 800d50e:	4620      	mov	r0, r4
 800d510:	f00a fd10 	bl	8017f34 <crs_strlen>
 800d514:	4622      	mov	r2, r4
 800d516:	b283      	uxth	r3, r0
 800d518:	2102      	movs	r1, #2
 800d51a:	2001      	movs	r0, #1
 800d51c:	f00a ff6e 	bl	80183fc <traceIF_uartPrint>
					AT_CHAR_t line[32] = {0};
 800d520:	2100      	movs	r1, #0
 800d522:	221c      	movs	r2, #28
 800d524:	a804      	add	r0, sp, #16
 800d526:	9103      	str	r1, [sp, #12]
 800d528:	f00f fc96 	bl	801ce58 <memset>
					(void) memcpy((void *)&line[0],&ip_addr_info.ip_addr_value,strlen((const CRC_CHAR_t *)ip_addr_info.ip_addr_value));
 800d52c:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800d530:	f7f2 fe70 	bl	8000214 <strlen>
 800d534:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 800d538:	4602      	mov	r2, r0
 800d53a:	a803      	add	r0, sp, #12
 800d53c:	f00f fc7e 	bl	801ce3c <memcpy>
					if ((AT_CHAR_t *) strcmp((const CRC_CHAR_t *)&line[0], "0.0.0.0") != NULL)
 800d540:	492c      	ldr	r1, [pc, #176]	; (800d5f4 <fRspAnalyze_CGPADDR+0x1fc>)
 800d542:	a803      	add	r0, sp, #12
 800d544:	f7f2 fe5c 	bl	8000200 <strcmp>
 800d548:	b3b0      	cbz	r0, 800d5b8 <fRspAnalyze_CGPADDR+0x1c0>
						if ((p_atp_ctxt->current_SID == (at_msg_t) SID_CS_ACTIVATE_PDN))
 800d54a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800d54e:	2b6f      	cmp	r3, #111	; 0x6f
 800d550:	d121      	bne.n	800d596 <fRspAnalyze_CGPADDR+0x19e>
							CS_PDN_conf_id_t current_conf_id = atcm_get_cid_current_SID(p_modem_ctxt);
 800d552:	4630      	mov	r0, r6
 800d554:	f7fa ffda 	bl	800850c <atcm_get_cid_current_SID>
 800d558:	4601      	mov	r1, r0
							uint8_t modem_cid = atcm_get_affected_modem_cid(&p_modem_ctxt->persist, current_conf_id);
 800d55a:	f106 000c 	add.w	r0, r6, #12
 800d55e:	f7fc fabb 	bl	8009ad8 <atcm_get_affected_modem_cid>
							if (p_modem_ctxt->CMD_ctxt.modem_cid == modem_cid)
 800d562:	f8d6 2768 	ldr.w	r2, [r6, #1896]	; 0x768
 800d566:	4282      	cmp	r2, r0
 800d568:	d115      	bne.n	800d596 <fRspAnalyze_CGPADDR+0x19e>
								PRINT_DBG("Modem CID to activate (%d) is already activated", modem_cid)
 800d56a:	4923      	ldr	r1, [pc, #140]	; (800d5f8 <fRspAnalyze_CGPADDR+0x200>)
 800d56c:	4620      	mov	r0, r4
 800d56e:	f00f fca3 	bl	801ceb8 <sprintf>
 800d572:	4620      	mov	r0, r4
 800d574:	f00a fcde 	bl	8017f34 <crs_strlen>
 800d578:	4622      	mov	r2, r4
 800d57a:	b283      	uxth	r3, r0
 800d57c:	2102      	movs	r1, #2
 800d57e:	2001      	movs	r0, #1
 800d580:	f00a fd16 	bl	8017fb0 <traceIF_itmPrint>
 800d584:	4620      	mov	r0, r4
 800d586:	f00a fcd5 	bl	8017f34 <crs_strlen>
 800d58a:	4622      	mov	r2, r4
 800d58c:	b283      	uxth	r3, r0
 800d58e:	2102      	movs	r1, #2
 800d590:	2001      	movs	r0, #1
						PRINT_INFO("Ip Address field is Null,thereby no active data path to exchange, Activation command required")
 800d592:	f00a ff33 	bl	80183fc <traceIF_uartPrint>
					ip_addr_info.ip_addr_type = atcm_get_ip_address_type(
 800d596:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 800d59a:	f7fa ff67 	bl	800846c <atcm_get_ip_address_type>
					if (element_infos->param_rank == 3U) {
 800d59e:	892b      	ldrh	r3, [r5, #8]
					ip_addr_info.ip_addr_type = atcm_get_ip_address_type(
 800d5a0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
					if (element_infos->param_rank == 3U) {
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d18d      	bne.n	800d4c4 <fRspAnalyze_CGPADDR+0xcc>
						atcm_put_IP_address_infos(&p_modem_ctxt->persist,
 800d5a8:	f896 1768 	ldrb.w	r1, [r6, #1896]	; 0x768
 800d5ac:	aa0b      	add	r2, sp, #44	; 0x2c
 800d5ae:	f106 000c 	add.w	r0, r6, #12
 800d5b2:	f7fa ff2b 	bl	800840c <atcm_put_IP_address_infos>
 800d5b6:	e785      	b.n	800d4c4 <fRspAnalyze_CGPADDR+0xcc>
						PRINT_INFO("Ip Address field is Null,thereby no active data path to exchange, Activation command required")
 800d5b8:	4910      	ldr	r1, [pc, #64]	; (800d5fc <fRspAnalyze_CGPADDR+0x204>)
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f00f fcec 	bl	801cf98 <strcpy>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f00a fcb7 	bl	8017f34 <crs_strlen>
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	b283      	uxth	r3, r0
 800d5ca:	4622      	mov	r2, r4
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	f00a fcef 	bl	8017fb0 <traceIF_itmPrint>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f00a fcae 	bl	8017f34 <crs_strlen>
 800d5d8:	2101      	movs	r1, #1
 800d5da:	b283      	uxth	r3, r0
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4608      	mov	r0, r1
 800d5e0:	e7d7      	b.n	800d592 <fRspAnalyze_CGPADDR+0x19a>
 800d5e2:	bf00      	nop
 800d5e4:	20008ef8 	.word	0x20008ef8
 800d5e8:	0802659a 	.word	0x0802659a
 800d5ec:	080265c5 	.word	0x080265c5
 800d5f0:	080265e9 	.word	0x080265e9
 800d5f4:	08022361 	.word	0x08022361
 800d5f8:	08026621 	.word	0x08026621
 800d5fc:	0802665c 	.word	0x0802665c
 800d600:	08026605 	.word	0x08026605

0800d604 <fRspAnalyze_CPSMS>:

at_action_rsp_t fRspAnalyze_CPSMS(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UNUSED(p_modem_ctxt);
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CPSMS()")
 800d608:	4948      	ldr	r1, [pc, #288]	; (800d72c <fRspAnalyze_CPSMS+0x128>)
		at_element_info_t *element_infos) {
 800d60a:	4607      	mov	r7, r0
	PRINT_API("enter fRspAnalyze_CPSMS()")
 800d60c:	4848      	ldr	r0, [pc, #288]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
		at_element_info_t *element_infos) {
 800d60e:	4616      	mov	r6, r2
 800d610:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CPSMS()")
 800d612:	f00f fcc1 	bl	801cf98 <strcpy>
 800d616:	4846      	ldr	r0, [pc, #280]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
 800d618:	f00a fc8c 	bl	8017f34 <crs_strlen>
 800d61c:	4a44      	ldr	r2, [pc, #272]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
 800d61e:	b283      	uxth	r3, r0
 800d620:	2104      	movs	r1, #4
 800d622:	2001      	movs	r0, #1
 800d624:	f00a fcc4 	bl	8017fb0 <traceIF_itmPrint>
 800d628:	4841      	ldr	r0, [pc, #260]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
 800d62a:	f00a fc83 	bl	8017f34 <crs_strlen>
 800d62e:	4a40      	ldr	r2, [pc, #256]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
 800d630:	b283      	uxth	r3, r0
 800d632:	2104      	movs	r1, #4
 800d634:	2001      	movs	r0, #1
 800d636:	f00a fee1 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for CPSMS */
	/* for READ COMMAND only  */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800d63a:	8b3b      	ldrh	r3, [r7, #24]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d145      	bne.n	800d6cc <fRspAnalyze_CPSMS+0xc8>
		 *  format: +CPSMS: <mode>,[<Requested_Periodic-RAU>],[<Requested_GPRS-READYtimer>],
		 [<Requested_Periodic-TAU>],[<Requested_Active-Time>]
		 */

		START_PARAM_LOOP()
				PRINT_DBG("+CPSMS param_rank = %d", element_infos->param_rank)
 800d640:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800d744 <fRspAnalyze_CPSMS+0x140>
 800d644:	4c3a      	ldr	r4, [pc, #232]	; (800d730 <fRspAnalyze_CPSMS+0x12c>)
							ATutil_extract_bin_value_from_quotes(
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size, 8))
				} else if (element_infos->param_rank == 6U) {
					/* req_active_time */
					PRINT_INFO("+CPSMS: req_active_time= 0x%lx",
 800d646:	f8df a100 	ldr.w	sl, [pc, #256]	; 800d748 <fRspAnalyze_CPSMS+0x144>
		START_PARAM_LOOP()
 800d64a:	462a      	mov	r2, r5
 800d64c:	4631      	mov	r1, r6
 800d64e:	4638      	mov	r0, r7
 800d650:	f7fa fd8c 	bl	800816c <atcc_extractElement>
 800d654:	89eb      	ldrh	r3, [r5, #14]
 800d656:	4680      	mov	r8, r0
 800d658:	b3ab      	cbz	r3, 800d6c6 <fRspAnalyze_CPSMS+0xc2>
				PRINT_DBG("+CPSMS param_rank = %d", element_infos->param_rank)
 800d65a:	892a      	ldrh	r2, [r5, #8]
 800d65c:	4649      	mov	r1, r9
 800d65e:	4620      	mov	r0, r4
 800d660:	f00f fc2a 	bl	801ceb8 <sprintf>
 800d664:	4620      	mov	r0, r4
 800d666:	f00a fc65 	bl	8017f34 <crs_strlen>
 800d66a:	4622      	mov	r2, r4
 800d66c:	b283      	uxth	r3, r0
 800d66e:	2102      	movs	r1, #2
 800d670:	2001      	movs	r0, #1
 800d672:	f00a fc9d 	bl	8017fb0 <traceIF_itmPrint>
 800d676:	4620      	mov	r0, r4
 800d678:	f00a fc5c 	bl	8017f34 <crs_strlen>
 800d67c:	4622      	mov	r2, r4
 800d67e:	b283      	uxth	r3, r0
 800d680:	2102      	movs	r1, #2
 800d682:	2001      	movs	r0, #1
 800d684:	f00a feba 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 2U) {
 800d688:	892b      	ldrh	r3, [r5, #8]
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d121      	bne.n	800d6d2 <fRspAnalyze_CPSMS+0xce>
					PRINT_INFO("+CPSMS: mode= %ld",
 800d68e:	8968      	ldrh	r0, [r5, #10]
 800d690:	89e9      	ldrh	r1, [r5, #14]
 800d692:	4430      	add	r0, r6
 800d694:	f001 f83c 	bl	800e710 <ATutil_convertStringToInt>
 800d698:	4926      	ldr	r1, [pc, #152]	; (800d734 <fRspAnalyze_CPSMS+0x130>)
 800d69a:	4602      	mov	r2, r0
					PRINT_INFO("+CPSMS: req_active_time= 0x%lx",
 800d69c:	4620      	mov	r0, r4
 800d69e:	f00f fc0b 	bl	801ceb8 <sprintf>
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f00a fc46 	bl	8017f34 <crs_strlen>
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	b283      	uxth	r3, r0
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	4608      	mov	r0, r1
 800d6b0:	f00a fc7e 	bl	8017fb0 <traceIF_itmPrint>
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f00a fc3d 	bl	8017f34 <crs_strlen>
 800d6ba:	2101      	movs	r1, #1
 800d6bc:	b283      	uxth	r3, r0
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4608      	mov	r0, r1
 800d6c2:	f00a fe9b 	bl	80183fc <traceIF_uartPrint>
							ATutil_extract_bin_value_from_quotes(
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size, 8))
				} else {
					/* parameters ignored */
				}END_PARAM_LOOP()
 800d6c6:	f1b8 0f01 	cmp.w	r8, #1
 800d6ca:	d0be      	beq.n	800d64a <fRspAnalyze_CPSMS+0x46>
	}

	return (retval);
}
 800d6cc:	2010      	movs	r0, #16
 800d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				} else if (element_infos->param_rank == 3U) {
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d108      	bne.n	800d6e8 <fRspAnalyze_CPSMS+0xe4>
					PRINT_INFO("+CPSMS: req_periodic_rau= 0x%lx",
 800d6d6:	8968      	ldrh	r0, [r5, #10]
 800d6d8:	89e9      	ldrh	r1, [r5, #14]
 800d6da:	2208      	movs	r2, #8
 800d6dc:	4430      	add	r0, r6
 800d6de:	f001 f8e6 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d6e2:	4915      	ldr	r1, [pc, #84]	; (800d738 <fRspAnalyze_CPSMS+0x134>)
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	e7d9      	b.n	800d69c <fRspAnalyze_CPSMS+0x98>
				} else if (element_infos->param_rank == 4U) {
 800d6e8:	2b04      	cmp	r3, #4
 800d6ea:	d108      	bne.n	800d6fe <fRspAnalyze_CPSMS+0xfa>
					PRINT_INFO("+CPSMS: req_gprs_ready_timer= 0x%lx",
 800d6ec:	8968      	ldrh	r0, [r5, #10]
 800d6ee:	89e9      	ldrh	r1, [r5, #14]
 800d6f0:	2208      	movs	r2, #8
 800d6f2:	4430      	add	r0, r6
 800d6f4:	f001 f8db 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d6f8:	4910      	ldr	r1, [pc, #64]	; (800d73c <fRspAnalyze_CPSMS+0x138>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	e7ce      	b.n	800d69c <fRspAnalyze_CPSMS+0x98>
				} else if (element_infos->param_rank == 5U) {
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	d108      	bne.n	800d714 <fRspAnalyze_CPSMS+0x110>
					PRINT_INFO("+CPSMS: req_periodic_tau= 0x%lx",
 800d702:	8968      	ldrh	r0, [r5, #10]
 800d704:	89e9      	ldrh	r1, [r5, #14]
 800d706:	2208      	movs	r2, #8
 800d708:	4430      	add	r0, r6
 800d70a:	f001 f8d0 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d70e:	490c      	ldr	r1, [pc, #48]	; (800d740 <fRspAnalyze_CPSMS+0x13c>)
 800d710:	4602      	mov	r2, r0
 800d712:	e7c3      	b.n	800d69c <fRspAnalyze_CPSMS+0x98>
				} else if (element_infos->param_rank == 6U) {
 800d714:	2b06      	cmp	r3, #6
 800d716:	d1d6      	bne.n	800d6c6 <fRspAnalyze_CPSMS+0xc2>
					PRINT_INFO("+CPSMS: req_active_time= 0x%lx",
 800d718:	8968      	ldrh	r0, [r5, #10]
 800d71a:	89e9      	ldrh	r1, [r5, #14]
 800d71c:	2208      	movs	r2, #8
 800d71e:	4430      	add	r0, r6
 800d720:	f001 f8c5 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d724:	4651      	mov	r1, sl
 800d726:	4602      	mov	r2, r0
 800d728:	e7b8      	b.n	800d69c <fRspAnalyze_CPSMS+0x98>
 800d72a:	bf00      	nop
 800d72c:	080266c5 	.word	0x080266c5
 800d730:	20008ef8 	.word	0x20008ef8
 800d734:	08026710 	.word	0x08026710
 800d738:	0802672d 	.word	0x0802672d
 800d73c:	08026758 	.word	0x08026758
 800d740:	08026787 	.word	0x08026787
 800d744:	080266ee 	.word	0x080266ee
 800d748:	080267b2 	.word	0x080267b2

0800d74c <fRspAnalyze_CEDRXS>:

at_action_rsp_t fRspAnalyze_CEDRXS(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d74c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UNUSED(p_modem_ctxt);
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CEDRXS()")
 800d750:	4944      	ldr	r1, [pc, #272]	; (800d864 <fRspAnalyze_CEDRXS+0x118>)
		at_element_info_t *element_infos) {
 800d752:	4606      	mov	r6, r0
	PRINT_API("enter fRspAnalyze_CEDRXS()")
 800d754:	4844      	ldr	r0, [pc, #272]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
		at_element_info_t *element_infos) {
 800d756:	4617      	mov	r7, r2
 800d758:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CEDRXS()")
 800d75a:	f00f fc1d 	bl	801cf98 <strcpy>
 800d75e:	4842      	ldr	r0, [pc, #264]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
 800d760:	f00a fbe8 	bl	8017f34 <crs_strlen>
 800d764:	4a40      	ldr	r2, [pc, #256]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
 800d766:	b283      	uxth	r3, r0
 800d768:	2104      	movs	r1, #4
 800d76a:	2001      	movs	r0, #1
 800d76c:	f00a fc20 	bl	8017fb0 <traceIF_itmPrint>
 800d770:	483d      	ldr	r0, [pc, #244]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
 800d772:	f00a fbdf 	bl	8017f34 <crs_strlen>
 800d776:	4a3c      	ldr	r2, [pc, #240]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
 800d778:	b283      	uxth	r3, r0
 800d77a:	2104      	movs	r1, #4
 800d77c:	2001      	movs	r0, #1
 800d77e:	f00a fe3d 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for CEDRXS */
	if (p_atp_ctxt->current_atcmd.id == (CMD_ID_t) CMD_AT_CEDRXS) {
 800d782:	69f3      	ldr	r3, [r6, #28]
 800d784:	2b23      	cmp	r3, #35	; 0x23
 800d786:	d14a      	bne.n	800d81e <fRspAnalyze_CEDRXS+0xd2>
		/* for READ COMMAND only  */
		if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800d788:	8b33      	ldrh	r3, [r6, #24]
 800d78a:	2b02      	cmp	r3, #2
 800d78c:	d147      	bne.n	800d81e <fRspAnalyze_CEDRXS+0xd2>
			 *  format: +CEDRXS: <AcT-type>,<Requested_eDRX_value>
			 *                   [<CR><LF>+CEDRXS:<AcT-type>,<Requested_eDRX_value>[...]]]
			 */

			START_PARAM_LOOP()
					PRINT_DBG("+CEDRXS param_rank = %d",
 800d78e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 800d870 <fRspAnalyze_CEDRXS+0x124>
 800d792:	4c35      	ldr	r4, [pc, #212]	; (800d868 <fRspAnalyze_CEDRXS+0x11c>)
								ATutil_convertStringToInt(
										&p_msg_in->buffer[element_infos->str_start_idx],
										element_infos->str_size))
					} else if (element_infos->param_rank == 3U) {
						/* req_edrx_value */
						PRINT_INFO("+CEDRXS: req_edrx_value= 0x%lx",
 800d794:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 800d874 <fRspAnalyze_CEDRXS+0x128>
			START_PARAM_LOOP()
 800d798:	462a      	mov	r2, r5
 800d79a:	4639      	mov	r1, r7
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7fa fce5 	bl	800816c <atcc_extractElement>
 800d7a2:	89eb      	ldrh	r3, [r5, #14]
 800d7a4:	4681      	mov	r9, r0
 800d7a6:	b3bb      	cbz	r3, 800d818 <fRspAnalyze_CEDRXS+0xcc>
					PRINT_DBG("+CEDRXS param_rank = %d",
 800d7a8:	892a      	ldrh	r2, [r5, #8]
 800d7aa:	4651      	mov	r1, sl
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f00f fb83 	bl	801ceb8 <sprintf>
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f00a fbbe 	bl	8017f34 <crs_strlen>
 800d7b8:	4622      	mov	r2, r4
 800d7ba:	b283      	uxth	r3, r0
 800d7bc:	2102      	movs	r1, #2
 800d7be:	2001      	movs	r0, #1
 800d7c0:	f00a fbf6 	bl	8017fb0 <traceIF_itmPrint>
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f00a fbb5 	bl	8017f34 <crs_strlen>
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	b283      	uxth	r3, r0
 800d7ce:	2102      	movs	r1, #2
 800d7d0:	2001      	movs	r0, #1
 800d7d2:	f00a fe13 	bl	80183fc <traceIF_uartPrint>
					if (element_infos->param_rank == 2U) {
 800d7d6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d7da:	f1b8 0f02 	cmp.w	r8, #2
 800d7de:	d121      	bne.n	800d824 <fRspAnalyze_CEDRXS+0xd8>
						PRINT_DBG("+CEDRXS: act_type= %ld",
 800d7e0:	8968      	ldrh	r0, [r5, #10]
 800d7e2:	89e9      	ldrh	r1, [r5, #14]
 800d7e4:	4438      	add	r0, r7
 800d7e6:	f000 ff93 	bl	800e710 <ATutil_convertStringToInt>
 800d7ea:	4920      	ldr	r1, [pc, #128]	; (800d86c <fRspAnalyze_CEDRXS+0x120>)
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f00f fb62 	bl	801ceb8 <sprintf>
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f00a fb9d 	bl	8017f34 <crs_strlen>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	b283      	uxth	r3, r0
 800d7fe:	4641      	mov	r1, r8
 800d800:	2001      	movs	r0, #1
 800d802:	f00a fbd5 	bl	8017fb0 <traceIF_itmPrint>
 800d806:	4620      	mov	r0, r4
 800d808:	f00a fb94 	bl	8017f34 <crs_strlen>
 800d80c:	4622      	mov	r2, r4
 800d80e:	b283      	uxth	r3, r0
 800d810:	4641      	mov	r1, r8
 800d812:	2001      	movs	r0, #1
						PRINT_INFO("+CEDRXS: req_edrx_value= 0x%lx",
 800d814:	f00a fdf2 	bl	80183fc <traceIF_uartPrint>
								ATutil_extract_bin_value_from_quotes(
										&p_msg_in->buffer[element_infos->str_start_idx],
										element_infos->str_size, 4))
					} else {
						/* parameters ignored */
					}END_PARAM_LOOP()
 800d818:	f1b9 0f01 	cmp.w	r9, #1
 800d81c:	d0bc      	beq.n	800d798 <fRspAnalyze_CEDRXS+0x4c>
		}
	}

	return (retval);
}
 800d81e:	2010      	movs	r0, #16
 800d820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					} else if (element_infos->param_rank == 3U) {
 800d824:	f1b8 0f03 	cmp.w	r8, #3
 800d828:	d1f6      	bne.n	800d818 <fRspAnalyze_CEDRXS+0xcc>
						PRINT_INFO("+CEDRXS: req_edrx_value= 0x%lx",
 800d82a:	8968      	ldrh	r0, [r5, #10]
 800d82c:	89e9      	ldrh	r1, [r5, #14]
 800d82e:	2204      	movs	r2, #4
 800d830:	4438      	add	r0, r7
 800d832:	f001 f83c 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d836:	4659      	mov	r1, fp
 800d838:	4602      	mov	r2, r0
 800d83a:	4620      	mov	r0, r4
 800d83c:	f00f fb3c 	bl	801ceb8 <sprintf>
 800d840:	4620      	mov	r0, r4
 800d842:	f00a fb77 	bl	8017f34 <crs_strlen>
 800d846:	2101      	movs	r1, #1
 800d848:	b283      	uxth	r3, r0
 800d84a:	4622      	mov	r2, r4
 800d84c:	4608      	mov	r0, r1
 800d84e:	f00a fbaf 	bl	8017fb0 <traceIF_itmPrint>
 800d852:	4620      	mov	r0, r4
 800d854:	f00a fb6e 	bl	8017f34 <crs_strlen>
 800d858:	2101      	movs	r1, #1
 800d85a:	b283      	uxth	r3, r0
 800d85c:	4622      	mov	r2, r4
 800d85e:	4608      	mov	r0, r1
 800d860:	e7d8      	b.n	800d814 <fRspAnalyze_CEDRXS+0xc8>
 800d862:	bf00      	nop
 800d864:	080267dc 	.word	0x080267dc
 800d868:	20008ef8 	.word	0x20008ef8
 800d86c:	08026829 	.word	0x08026829
 800d870:	08026806 	.word	0x08026806
 800d874:	0802684b 	.word	0x0802684b

0800d878 <fRspAnalyze_CEDRXP>:

at_action_rsp_t fRspAnalyze_CEDRXP(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UNUSED(p_modem_ctxt);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CEDRXP()")
 800d87c:	494a      	ldr	r1, [pc, #296]	; (800d9a8 <fRspAnalyze_CEDRXP+0x130>)
	 *  format: +CEDRXP: <AcT-type>[,<Requested_eDRX_value>[,<NW-provided_eDRX_value>[,<Paging_time_window>]]]
	 *
	 */

	START_PARAM_LOOP()
			PRINT_DBG("+CEDRXS param_rank = %d", element_infos->param_rank)
 800d87e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800d9bc <fRspAnalyze_CEDRXP+0x144>
 800d882:	4c4a      	ldr	r4, [pc, #296]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
						ATutil_extract_bin_value_from_quotes(
								&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size, 4))
			} else if (element_infos->param_rank == 5U) {
				/* paging_time_window */
				PRINT_INFO("+CEDRXP URC: paging_time_window= 0x%lx",
 800d884:	f8df b138 	ldr.w	fp, [pc, #312]	; 800d9c0 <fRspAnalyze_CEDRXP+0x148>
		at_element_info_t *element_infos) {
 800d888:	4681      	mov	r9, r0
	PRINT_API("enter fRspAnalyze_CEDRXP()")
 800d88a:	4848      	ldr	r0, [pc, #288]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
		at_element_info_t *element_infos) {
 800d88c:	4616      	mov	r6, r2
 800d88e:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CEDRXP()")
 800d890:	f00f fb82 	bl	801cf98 <strcpy>
 800d894:	4845      	ldr	r0, [pc, #276]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
 800d896:	f00a fb4d 	bl	8017f34 <crs_strlen>
 800d89a:	4a44      	ldr	r2, [pc, #272]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
 800d89c:	b283      	uxth	r3, r0
 800d89e:	2104      	movs	r1, #4
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	f00a fb85 	bl	8017fb0 <traceIF_itmPrint>
 800d8a6:	4841      	ldr	r0, [pc, #260]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
 800d8a8:	f00a fb44 	bl	8017f34 <crs_strlen>
 800d8ac:	4a3f      	ldr	r2, [pc, #252]	; (800d9ac <fRspAnalyze_CEDRXP+0x134>)
 800d8ae:	b283      	uxth	r3, r0
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	f00a fda2 	bl	80183fc <traceIF_uartPrint>
	START_PARAM_LOOP()
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	4648      	mov	r0, r9
 800d8be:	f7fa fc55 	bl	800816c <atcc_extractElement>
 800d8c2:	89eb      	ldrh	r3, [r5, #14]
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	b3ab      	cbz	r3, 800d934 <fRspAnalyze_CEDRXP+0xbc>
			PRINT_DBG("+CEDRXS param_rank = %d", element_infos->param_rank)
 800d8c8:	892a      	ldrh	r2, [r5, #8]
 800d8ca:	4651      	mov	r1, sl
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f00f faf3 	bl	801ceb8 <sprintf>
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f00a fb2e 	bl	8017f34 <crs_strlen>
 800d8d8:	4622      	mov	r2, r4
 800d8da:	b283      	uxth	r3, r0
 800d8dc:	2102      	movs	r1, #2
 800d8de:	2001      	movs	r0, #1
 800d8e0:	f00a fb66 	bl	8017fb0 <traceIF_itmPrint>
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f00a fb25 	bl	8017f34 <crs_strlen>
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	b283      	uxth	r3, r0
 800d8ee:	2102      	movs	r1, #2
 800d8f0:	2001      	movs	r0, #1
 800d8f2:	f00a fd83 	bl	80183fc <traceIF_uartPrint>
			if (element_infos->param_rank == 2U) {
 800d8f6:	892f      	ldrh	r7, [r5, #8]
 800d8f8:	2f02      	cmp	r7, #2
 800d8fa:	d121      	bne.n	800d940 <fRspAnalyze_CEDRXP+0xc8>
				PRINT_DBG("+CEDRXP URC: act_type= %ld",
 800d8fc:	8968      	ldrh	r0, [r5, #10]
 800d8fe:	89e9      	ldrh	r1, [r5, #14]
 800d900:	4430      	add	r0, r6
 800d902:	f000 ff05 	bl	800e710 <ATutil_convertStringToInt>
 800d906:	492a      	ldr	r1, [pc, #168]	; (800d9b0 <fRspAnalyze_CEDRXP+0x138>)
 800d908:	4602      	mov	r2, r0
 800d90a:	4620      	mov	r0, r4
 800d90c:	f00f fad4 	bl	801ceb8 <sprintf>
 800d910:	4620      	mov	r0, r4
 800d912:	f00a fb0f 	bl	8017f34 <crs_strlen>
 800d916:	4622      	mov	r2, r4
 800d918:	b283      	uxth	r3, r0
 800d91a:	4639      	mov	r1, r7
 800d91c:	2001      	movs	r0, #1
 800d91e:	f00a fb47 	bl	8017fb0 <traceIF_itmPrint>
 800d922:	4620      	mov	r0, r4
 800d924:	f00a fb06 	bl	8017f34 <crs_strlen>
 800d928:	4622      	mov	r2, r4
 800d92a:	b283      	uxth	r3, r0
 800d92c:	4639      	mov	r1, r7
 800d92e:	2001      	movs	r0, #1
				PRINT_INFO("+CEDRXP URC: paging_time_window= 0x%lx",
 800d930:	f00a fd64 	bl	80183fc <traceIF_uartPrint>
						ATutil_extract_bin_value_from_quotes(
								&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size, 4))
			} else {
				/* parameters ignored */
			}END_PARAM_LOOP()
 800d934:	f1b8 0f01 	cmp.w	r8, #1
 800d938:	d0be      	beq.n	800d8b8 <fRspAnalyze_CEDRXP+0x40>

	return (retval);
}
 800d93a:	2010      	movs	r0, #16
 800d93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (element_infos->param_rank == 3U) {
 800d940:	2f03      	cmp	r7, #3
 800d942:	d11b      	bne.n	800d97c <fRspAnalyze_CEDRXP+0x104>
				PRINT_INFO("+CEDRXP URC: req_edrx_value= 0x%lx",
 800d944:	8968      	ldrh	r0, [r5, #10]
 800d946:	89e9      	ldrh	r1, [r5, #14]
 800d948:	2204      	movs	r2, #4
 800d94a:	4430      	add	r0, r6
 800d94c:	f000 ffaf 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d950:	4918      	ldr	r1, [pc, #96]	; (800d9b4 <fRspAnalyze_CEDRXP+0x13c>)
 800d952:	4602      	mov	r2, r0
				PRINT_INFO("+CEDRXP URC: paging_time_window= 0x%lx",
 800d954:	4620      	mov	r0, r4
 800d956:	f00f faaf 	bl	801ceb8 <sprintf>
 800d95a:	4620      	mov	r0, r4
 800d95c:	f00a faea 	bl	8017f34 <crs_strlen>
 800d960:	2101      	movs	r1, #1
 800d962:	b283      	uxth	r3, r0
 800d964:	4622      	mov	r2, r4
 800d966:	4608      	mov	r0, r1
 800d968:	f00a fb22 	bl	8017fb0 <traceIF_itmPrint>
 800d96c:	4620      	mov	r0, r4
 800d96e:	f00a fae1 	bl	8017f34 <crs_strlen>
 800d972:	2101      	movs	r1, #1
 800d974:	b283      	uxth	r3, r0
 800d976:	4622      	mov	r2, r4
 800d978:	4608      	mov	r0, r1
 800d97a:	e7d9      	b.n	800d930 <fRspAnalyze_CEDRXP+0xb8>
			} else if (element_infos->param_rank == 4U) {
 800d97c:	2f04      	cmp	r7, #4
 800d97e:	d108      	bne.n	800d992 <fRspAnalyze_CEDRXP+0x11a>
				PRINT_INFO("+CEDRXP URC: nw_provided_edrx_value= 0x%lx",
 800d980:	8968      	ldrh	r0, [r5, #10]
 800d982:	89e9      	ldrh	r1, [r5, #14]
 800d984:	463a      	mov	r2, r7
 800d986:	4430      	add	r0, r6
 800d988:	f000 ff91 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d98c:	490a      	ldr	r1, [pc, #40]	; (800d9b8 <fRspAnalyze_CEDRXP+0x140>)
 800d98e:	4602      	mov	r2, r0
 800d990:	e7e0      	b.n	800d954 <fRspAnalyze_CEDRXP+0xdc>
			} else if (element_infos->param_rank == 5U) {
 800d992:	2f05      	cmp	r7, #5
 800d994:	d1ce      	bne.n	800d934 <fRspAnalyze_CEDRXP+0xbc>
				PRINT_INFO("+CEDRXP URC: paging_time_window= 0x%lx",
 800d996:	8968      	ldrh	r0, [r5, #10]
 800d998:	89e9      	ldrh	r1, [r5, #14]
 800d99a:	2204      	movs	r2, #4
 800d99c:	4430      	add	r0, r6
 800d99e:	f000 ff86 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	e7d5      	b.n	800d954 <fRspAnalyze_CEDRXP+0xdc>
 800d9a8:	08026875 	.word	0x08026875
 800d9ac:	20008ef8 	.word	0x20008ef8
 800d9b0:	0802689f 	.word	0x0802689f
 800d9b4:	080268c5 	.word	0x080268c5
 800d9b8:	080268f3 	.word	0x080268f3
 800d9bc:	08026806 	.word	0x08026806
 800d9c0:	08026929 	.word	0x08026929

0800d9c4 <fRspAnalyze_CEDRXRDP>:

at_action_rsp_t fRspAnalyze_CEDRXRDP(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800d9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	UNUSED(p_modem_ctxt);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CEDRXRDP()")
 800d9c8:	494a      	ldr	r1, [pc, #296]	; (800daf4 <fRspAnalyze_CEDRXRDP+0x130>)
	 *  format: +CEDRXRDP: <AcT-type>[,<Requested_eDRX_value>[,<NW-provided_eDRX_value>[,<Paging_time_window>]]]
	 *
	 */

	START_PARAM_LOOP()
			PRINT_DBG("+CEDRXDP param_rank = %d", element_infos->param_rank)
 800d9ca:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800db08 <fRspAnalyze_CEDRXRDP+0x144>
 800d9ce:	4c4a      	ldr	r4, [pc, #296]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
						ATutil_extract_bin_value_from_quotes(
								&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size, 4))
			} else if (element_infos->param_rank == 5U) {
				/* paging_time_window */
				PRINT_INFO("+CEDRXRDP: paging_time_window= 0x%lx",
 800d9d0:	f8df b138 	ldr.w	fp, [pc, #312]	; 800db0c <fRspAnalyze_CEDRXRDP+0x148>
		at_element_info_t *element_infos) {
 800d9d4:	4681      	mov	r9, r0
	PRINT_API("enter fRspAnalyze_CEDRXRDP()")
 800d9d6:	4848      	ldr	r0, [pc, #288]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
		at_element_info_t *element_infos) {
 800d9d8:	4616      	mov	r6, r2
 800d9da:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_CEDRXRDP()")
 800d9dc:	f00f fadc 	bl	801cf98 <strcpy>
 800d9e0:	4845      	ldr	r0, [pc, #276]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
 800d9e2:	f00a faa7 	bl	8017f34 <crs_strlen>
 800d9e6:	4a44      	ldr	r2, [pc, #272]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
 800d9e8:	b283      	uxth	r3, r0
 800d9ea:	2104      	movs	r1, #4
 800d9ec:	2001      	movs	r0, #1
 800d9ee:	f00a fadf 	bl	8017fb0 <traceIF_itmPrint>
 800d9f2:	4841      	ldr	r0, [pc, #260]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
 800d9f4:	f00a fa9e 	bl	8017f34 <crs_strlen>
 800d9f8:	4a3f      	ldr	r2, [pc, #252]	; (800daf8 <fRspAnalyze_CEDRXRDP+0x134>)
 800d9fa:	b283      	uxth	r3, r0
 800d9fc:	2104      	movs	r1, #4
 800d9fe:	2001      	movs	r0, #1
 800da00:	f00a fcfc 	bl	80183fc <traceIF_uartPrint>
	START_PARAM_LOOP()
 800da04:	462a      	mov	r2, r5
 800da06:	4631      	mov	r1, r6
 800da08:	4648      	mov	r0, r9
 800da0a:	f7fa fbaf 	bl	800816c <atcc_extractElement>
 800da0e:	89eb      	ldrh	r3, [r5, #14]
 800da10:	4680      	mov	r8, r0
 800da12:	b3ab      	cbz	r3, 800da80 <fRspAnalyze_CEDRXRDP+0xbc>
			PRINT_DBG("+CEDRXDP param_rank = %d", element_infos->param_rank)
 800da14:	892a      	ldrh	r2, [r5, #8]
 800da16:	4651      	mov	r1, sl
 800da18:	4620      	mov	r0, r4
 800da1a:	f00f fa4d 	bl	801ceb8 <sprintf>
 800da1e:	4620      	mov	r0, r4
 800da20:	f00a fa88 	bl	8017f34 <crs_strlen>
 800da24:	4622      	mov	r2, r4
 800da26:	b283      	uxth	r3, r0
 800da28:	2102      	movs	r1, #2
 800da2a:	2001      	movs	r0, #1
 800da2c:	f00a fac0 	bl	8017fb0 <traceIF_itmPrint>
 800da30:	4620      	mov	r0, r4
 800da32:	f00a fa7f 	bl	8017f34 <crs_strlen>
 800da36:	4622      	mov	r2, r4
 800da38:	b283      	uxth	r3, r0
 800da3a:	2102      	movs	r1, #2
 800da3c:	2001      	movs	r0, #1
 800da3e:	f00a fcdd 	bl	80183fc <traceIF_uartPrint>
			if (element_infos->param_rank == 2U) {
 800da42:	892f      	ldrh	r7, [r5, #8]
 800da44:	2f02      	cmp	r7, #2
 800da46:	d121      	bne.n	800da8c <fRspAnalyze_CEDRXRDP+0xc8>
				PRINT_DBG("+CEDRXRDP: act_type= %ld",
 800da48:	8968      	ldrh	r0, [r5, #10]
 800da4a:	89e9      	ldrh	r1, [r5, #14]
 800da4c:	4430      	add	r0, r6
 800da4e:	f000 fe5f 	bl	800e710 <ATutil_convertStringToInt>
 800da52:	492a      	ldr	r1, [pc, #168]	; (800dafc <fRspAnalyze_CEDRXRDP+0x138>)
 800da54:	4602      	mov	r2, r0
 800da56:	4620      	mov	r0, r4
 800da58:	f00f fa2e 	bl	801ceb8 <sprintf>
 800da5c:	4620      	mov	r0, r4
 800da5e:	f00a fa69 	bl	8017f34 <crs_strlen>
 800da62:	4622      	mov	r2, r4
 800da64:	b283      	uxth	r3, r0
 800da66:	4639      	mov	r1, r7
 800da68:	2001      	movs	r0, #1
 800da6a:	f00a faa1 	bl	8017fb0 <traceIF_itmPrint>
 800da6e:	4620      	mov	r0, r4
 800da70:	f00a fa60 	bl	8017f34 <crs_strlen>
 800da74:	4622      	mov	r2, r4
 800da76:	b283      	uxth	r3, r0
 800da78:	4639      	mov	r1, r7
 800da7a:	2001      	movs	r0, #1
				PRINT_INFO("+CEDRXRDP: paging_time_window= 0x%lx",
 800da7c:	f00a fcbe 	bl	80183fc <traceIF_uartPrint>
						ATutil_extract_bin_value_from_quotes(
								&p_msg_in->buffer[element_infos->str_start_idx],
								element_infos->str_size, 4))
			} else {
				/* parameters ignored */
			}END_PARAM_LOOP()
 800da80:	f1b8 0f01 	cmp.w	r8, #1
 800da84:	d0be      	beq.n	800da04 <fRspAnalyze_CEDRXRDP+0x40>

	return (retval);
}
 800da86:	2010      	movs	r0, #16
 800da88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (element_infos->param_rank == 3U) {
 800da8c:	2f03      	cmp	r7, #3
 800da8e:	d11b      	bne.n	800dac8 <fRspAnalyze_CEDRXRDP+0x104>
				PRINT_INFO("+CEDRXRDP: req_edrx_value= 0x%lx",
 800da90:	8968      	ldrh	r0, [r5, #10]
 800da92:	89e9      	ldrh	r1, [r5, #14]
 800da94:	2204      	movs	r2, #4
 800da96:	4430      	add	r0, r6
 800da98:	f000 ff09 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800da9c:	4918      	ldr	r1, [pc, #96]	; (800db00 <fRspAnalyze_CEDRXRDP+0x13c>)
 800da9e:	4602      	mov	r2, r0
				PRINT_INFO("+CEDRXRDP: paging_time_window= 0x%lx",
 800daa0:	4620      	mov	r0, r4
 800daa2:	f00f fa09 	bl	801ceb8 <sprintf>
 800daa6:	4620      	mov	r0, r4
 800daa8:	f00a fa44 	bl	8017f34 <crs_strlen>
 800daac:	2101      	movs	r1, #1
 800daae:	b283      	uxth	r3, r0
 800dab0:	4622      	mov	r2, r4
 800dab2:	4608      	mov	r0, r1
 800dab4:	f00a fa7c 	bl	8017fb0 <traceIF_itmPrint>
 800dab8:	4620      	mov	r0, r4
 800daba:	f00a fa3b 	bl	8017f34 <crs_strlen>
 800dabe:	2101      	movs	r1, #1
 800dac0:	b283      	uxth	r3, r0
 800dac2:	4622      	mov	r2, r4
 800dac4:	4608      	mov	r0, r1
 800dac6:	e7d9      	b.n	800da7c <fRspAnalyze_CEDRXRDP+0xb8>
			} else if (element_infos->param_rank == 4U) {
 800dac8:	2f04      	cmp	r7, #4
 800daca:	d108      	bne.n	800dade <fRspAnalyze_CEDRXRDP+0x11a>
				PRINT_INFO("+CEDRXRDP: nw_provided_edrx_value= 0x%lx",
 800dacc:	8968      	ldrh	r0, [r5, #10]
 800dace:	89e9      	ldrh	r1, [r5, #14]
 800dad0:	463a      	mov	r2, r7
 800dad2:	4430      	add	r0, r6
 800dad4:	f000 feeb 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800dad8:	490a      	ldr	r1, [pc, #40]	; (800db04 <fRspAnalyze_CEDRXRDP+0x140>)
 800dada:	4602      	mov	r2, r0
 800dadc:	e7e0      	b.n	800daa0 <fRspAnalyze_CEDRXRDP+0xdc>
			} else if (element_infos->param_rank == 5U) {
 800dade:	2f05      	cmp	r7, #5
 800dae0:	d1ce      	bne.n	800da80 <fRspAnalyze_CEDRXRDP+0xbc>
				PRINT_INFO("+CEDRXRDP: paging_time_window= 0x%lx",
 800dae2:	8968      	ldrh	r0, [r5, #10]
 800dae4:	89e9      	ldrh	r1, [r5, #14]
 800dae6:	2204      	movs	r2, #4
 800dae8:	4430      	add	r0, r6
 800daea:	f000 fee0 	bl	800e8ae <ATutil_extract_bin_value_from_quotes>
 800daee:	4659      	mov	r1, fp
 800daf0:	4602      	mov	r2, r0
 800daf2:	e7d5      	b.n	800daa0 <fRspAnalyze_CEDRXRDP+0xdc>
 800daf4:	0802695b 	.word	0x0802695b
 800daf8:	20008ef8 	.word	0x20008ef8
 800dafc:	080269ab 	.word	0x080269ab
 800db00:	080269cf 	.word	0x080269cf
 800db04:	080269fb 	.word	0x080269fb
 800db08:	08026987 	.word	0x08026987
 800db0c:	08026a2f 	.word	0x08026a2f

0800db10 <fRspAnalyze_CSIM>:

at_action_rsp_t fRspAnalyze_CSIM(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800db10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	4607      	mov	r7, r0
 800db16:	460d      	mov	r5, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_CSIM()")
 800db18:	4832      	ldr	r0, [pc, #200]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db1a:	4933      	ldr	r1, [pc, #204]	; (800dbe8 <fRspAnalyze_CSIM+0xd8>)
		at_element_info_t *element_infos) {
 800db1c:	4690      	mov	r8, r2
 800db1e:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_CSIM()")
 800db20:	f00f fa3a 	bl	801cf98 <strcpy>
 800db24:	482f      	ldr	r0, [pc, #188]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db26:	f00a fa05 	bl	8017f34 <crs_strlen>
 800db2a:	4a2e      	ldr	r2, [pc, #184]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db2c:	b283      	uxth	r3, r0
 800db2e:	2104      	movs	r1, #4
 800db30:	2001      	movs	r0, #1
 800db32:	f00a fa3d 	bl	8017fb0 <traceIF_itmPrint>
 800db36:	482b      	ldr	r0, [pc, #172]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db38:	f00a f9fc 	bl	8017f34 <crs_strlen>
 800db3c:	4a29      	ldr	r2, [pc, #164]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db3e:	b283      	uxth	r3, r0
 800db40:	2104      	movs	r1, #4
 800db42:	2001      	movs	r0, #1
 800db44:	f00a fc5a 	bl	80183fc <traceIF_uartPrint>
	/* analyze parameters for +CSIM
	 *  answer to CSIM write command
	 *     +CSIM: <length>,<response>
	 */

	if (p_atp_ctxt->current_atcmd.type == ATTYPE_WRITE_CMD) {
 800db48:	8b3b      	ldrh	r3, [r7, #24]
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d115      	bne.n	800db7a <fRspAnalyze_CSIM+0x6a>
							(size_t) length_to_copy);

					/* Last byte is always set to '\0' */
					p_end =
							(uint8_t*) &p_modem_ctxt->SID_ctxt.sim_generic_access.data->p_rsp_str[length_to_copy];
					*p_end = (uint8_t) '\0';
 800db4e:	f04f 0a00 	mov.w	sl, #0
		START_PARAM_LOOP()
 800db52:	4641      	mov	r1, r8
 800db54:	4622      	mov	r2, r4
 800db56:	4638      	mov	r0, r7
 800db58:	f7fa fb08 	bl	800816c <atcc_extractElement>
 800db5c:	89e1      	ldrh	r1, [r4, #14]
 800db5e:	4681      	mov	r9, r0
 800db60:	b141      	cbz	r1, 800db74 <fRspAnalyze_CSIM+0x64>
				if (element_infos->param_rank == 2U) {
 800db62:	8923      	ldrh	r3, [r4, #8]
 800db64:	2b02      	cmp	r3, #2
 800db66:	d124      	bne.n	800dbb2 <fRspAnalyze_CSIM+0xa2>
					uint32_t rsp_length = ATutil_convertStringToInt(
 800db68:	8960      	ldrh	r0, [r4, #10]
 800db6a:	4440      	add	r0, r8
 800db6c:	f000 fdd0 	bl	800e710 <ATutil_convertStringToInt>
					p_modem_ctxt->SID_ctxt.sim_generic_access.bytes_received =
 800db70:	f8c5 0684 	str.w	r0, [r5, #1668]	; 0x684

				} else {
					/* parameters ignored */
				}

			END_PARAM_LOOP()
 800db74:	f1b9 0f01 	cmp.w	r9, #1
 800db78:	d0eb      	beq.n	800db52 <fRspAnalyze_CSIM+0x42>
	}

	if (p_atp_ctxt->current_atcmd.type == ATTYPE_TEST_CMD) {
 800db7a:	8b3c      	ldrh	r4, [r7, #24]
 800db7c:	2c01      	cmp	r4, #1
 800db7e:	d115      	bne.n	800dbac <fRspAnalyze_CSIM+0x9c>
		PRINT_DBG("+CSIM for test cmd NOT IMPLEMENTED")
 800db80:	491a      	ldr	r1, [pc, #104]	; (800dbec <fRspAnalyze_CSIM+0xdc>)
 800db82:	4818      	ldr	r0, [pc, #96]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db84:	f00f fa08 	bl	801cf98 <strcpy>
 800db88:	4816      	ldr	r0, [pc, #88]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db8a:	f00a f9d3 	bl	8017f34 <crs_strlen>
 800db8e:	4a15      	ldr	r2, [pc, #84]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db90:	b283      	uxth	r3, r0
 800db92:	2102      	movs	r1, #2
 800db94:	4620      	mov	r0, r4
 800db96:	f00a fa0b 	bl	8017fb0 <traceIF_itmPrint>
 800db9a:	4812      	ldr	r0, [pc, #72]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800db9c:	f00a f9ca 	bl	8017f34 <crs_strlen>
 800dba0:	4a10      	ldr	r2, [pc, #64]	; (800dbe4 <fRspAnalyze_CSIM+0xd4>)
 800dba2:	b283      	uxth	r3, r0
 800dba4:	2102      	movs	r1, #2
 800dba6:	4620      	mov	r0, r4
 800dba8:	f00a fc28 	bl	80183fc <traceIF_uartPrint>
	}

	return (retval);
}
 800dbac:	2010      	movs	r0, #16
 800dbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				} else if (element_infos->param_rank == 3U) {
 800dbb2:	2b03      	cmp	r3, #3
 800dbb4:	d1de      	bne.n	800db74 <fRspAnalyze_CSIM+0x64>
							ATC_GET_MINIMUM_SIZE(
 800dbb6:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
					length_to_copy =
 800dbba:	f8d5 2684 	ldr.w	r2, [r5, #1668]	; 0x684
							ATC_GET_MINIMUM_SIZE(
 800dbbe:	68de      	ldr	r6, [r3, #12]
							(const CS_CHAR_t*) &p_msg_in->buffer[element_infos->str_start_idx
 800dbc0:	8961      	ldrh	r1, [r4, #10]
					(void) memcpy(
 800dbc2:	6858      	ldr	r0, [r3, #4]
							ATC_GET_MINIMUM_SIZE(
 800dbc4:	3e01      	subs	r6, #1
					length_to_copy =
 800dbc6:	4296      	cmp	r6, r2
 800dbc8:	bf28      	it	cs
 800dbca:	4616      	movcs	r6, r2
									+ 1U], /* skip '"' */
 800dbcc:	3101      	adds	r1, #1
					(void) memcpy(
 800dbce:	4632      	mov	r2, r6
 800dbd0:	4441      	add	r1, r8
 800dbd2:	f00f f933 	bl	801ce3c <memcpy>
							(uint8_t*) &p_modem_ctxt->SID_ctxt.sim_generic_access.data->p_rsp_str[length_to_copy];
 800dbd6:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
					*p_end = (uint8_t) '\0';
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f803 a006 	strb.w	sl, [r3, r6]
 800dbe0:	e7c8      	b.n	800db74 <fRspAnalyze_CSIM+0x64>
 800dbe2:	bf00      	nop
 800dbe4:	20008ef8 	.word	0x20008ef8
 800dbe8:	08026a5f 	.word	0x08026a5f
 800dbec:	08026a87 	.word	0x08026a87

0800dbf0 <fRspAnalyze_GSN>:
/* ==========================  Analyze V.25ter commands ========================== */
at_action_rsp_t fRspAnalyze_GSN(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800dbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	460e      	mov	r6, r1
	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_GSN()")
 800dbf6:	4821      	ldr	r0, [pc, #132]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dbf8:	4921      	ldr	r1, [pc, #132]	; (800dc80 <fRspAnalyze_GSN+0x90>)
		at_element_info_t *element_infos) {
 800dbfa:	4615      	mov	r5, r2
 800dbfc:	461c      	mov	r4, r3
	PRINT_API("enter fRspAnalyze_GSN()")
 800dbfe:	f00f f9cb 	bl	801cf98 <strcpy>
 800dc02:	481e      	ldr	r0, [pc, #120]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc04:	f00a f996 	bl	8017f34 <crs_strlen>
 800dc08:	4a1c      	ldr	r2, [pc, #112]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc0a:	b283      	uxth	r3, r0
 800dc0c:	2104      	movs	r1, #4
 800dc0e:	2001      	movs	r0, #1
 800dc10:	f00a f9ce 	bl	8017fb0 <traceIF_itmPrint>
 800dc14:	4819      	ldr	r0, [pc, #100]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc16:	f00a f98d 	bl	8017f34 <crs_strlen>
 800dc1a:	4a18      	ldr	r2, [pc, #96]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc1c:	b283      	uxth	r3, r0
 800dc1e:	2104      	movs	r1, #4
 800dc20:	2001      	movs	r0, #1
 800dc22:	f00a fbeb 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +GSN */
	/* only for execution command, set parameters */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_EXECUTION_CMD) {
 800dc26:	8b3b      	ldrh	r3, [r7, #24]
 800dc28:	2b04      	cmp	r3, #4
 800dc2a:	d124      	bne.n	800dc76 <fRspAnalyze_GSN+0x86>
		PRINT_DBG("IMEI:")
 800dc2c:	4915      	ldr	r1, [pc, #84]	; (800dc84 <fRspAnalyze_GSN+0x94>)
 800dc2e:	4813      	ldr	r0, [pc, #76]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc30:	f00f f9b2 	bl	801cf98 <strcpy>
 800dc34:	4811      	ldr	r0, [pc, #68]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc36:	f00a f97d 	bl	8017f34 <crs_strlen>
 800dc3a:	4a10      	ldr	r2, [pc, #64]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc3c:	b283      	uxth	r3, r0
 800dc3e:	2102      	movs	r1, #2
 800dc40:	2001      	movs	r0, #1
 800dc42:	f00a f9b5 	bl	8017fb0 <traceIF_itmPrint>
 800dc46:	480d      	ldr	r0, [pc, #52]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc48:	f00a f974 	bl	8017f34 <crs_strlen>
 800dc4c:	4a0b      	ldr	r2, [pc, #44]	; (800dc7c <fRspAnalyze_GSN+0x8c>)
 800dc4e:	b283      	uxth	r3, r0
 800dc50:	2102      	movs	r1, #2
 800dc52:	2001      	movs	r0, #1
 800dc54:	f00a fbd2 	bl	80183fc <traceIF_uartPrint>
		PRINT_BUF(
 800dc58:	8962      	ldrh	r2, [r4, #10]
 800dc5a:	89e3      	ldrh	r3, [r4, #14]
 800dc5c:	442a      	add	r2, r5
 800dc5e:	2102      	movs	r1, #2
 800dc60:	2001      	movs	r0, #1
 800dc62:	f00a fbe9 	bl	8018438 <traceIF_BufCharPrint>
				(const uint8_t* )&p_msg_in->buffer[element_infos->str_start_idx],
				element_infos->str_size)

		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.imei),
 800dc66:	f8d6 05dc 	ldr.w	r0, [r6, #1500]	; 0x5dc
				(const void*) &p_msg_in->buffer[element_infos->str_start_idx],
 800dc6a:	8961      	ldrh	r1, [r4, #10]
		(void) memcpy((void*) &(p_modem_ctxt->SID_ctxt.device_info->u.imei),
 800dc6c:	89e2      	ldrh	r2, [r4, #14]
 800dc6e:	4429      	add	r1, r5
 800dc70:	3002      	adds	r0, #2
 800dc72:	f00f f8e3 	bl	801ce3c <memcpy>
				(size_t) element_infos->str_size);
	}

	return (retval);
}
 800dc76:	2010      	movs	r0, #16
 800dc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20008ef8 	.word	0x20008ef8
 800dc80:	08026ab5 	.word	0x08026ab5
 800dc84:	08025661 	.word	0x08025661

0800dc88 <fRspAnalyze_IPR>:

at_action_rsp_t fRspAnalyze_IPR(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800dc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  UNUSED(p_msg_in); /* for MISRA-2012 */
#endif /* USE_TRACE_ATCUSTOM_MODEM */

	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_IPR()")
 800dc8c:	4931      	ldr	r1, [pc, #196]	; (800dd54 <fRspAnalyze_IPR+0xcc>)
		at_element_info_t *element_infos) {
 800dc8e:	4606      	mov	r6, r0
	PRINT_API("enter fRspAnalyze_IPR()")
 800dc90:	4831      	ldr	r0, [pc, #196]	; (800dd58 <fRspAnalyze_IPR+0xd0>)
		at_element_info_t *element_infos) {
 800dc92:	4617      	mov	r7, r2
 800dc94:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_IPR()")
 800dc96:	f00f f97f 	bl	801cf98 <strcpy>
 800dc9a:	482f      	ldr	r0, [pc, #188]	; (800dd58 <fRspAnalyze_IPR+0xd0>)
 800dc9c:	f00a f94a 	bl	8017f34 <crs_strlen>
 800dca0:	4a2d      	ldr	r2, [pc, #180]	; (800dd58 <fRspAnalyze_IPR+0xd0>)
 800dca2:	b283      	uxth	r3, r0
 800dca4:	2104      	movs	r1, #4
 800dca6:	2001      	movs	r0, #1
 800dca8:	f00a f982 	bl	8017fb0 <traceIF_itmPrint>
 800dcac:	482a      	ldr	r0, [pc, #168]	; (800dd58 <fRspAnalyze_IPR+0xd0>)
 800dcae:	f00a f941 	bl	8017f34 <crs_strlen>
 800dcb2:	4a29      	ldr	r2, [pc, #164]	; (800dd58 <fRspAnalyze_IPR+0xd0>)
 800dcb4:	b283      	uxth	r3, r0
 800dcb6:	2104      	movs	r1, #4
 800dcb8:	2001      	movs	r0, #1
 800dcba:	f00a fb9f 	bl	80183fc <traceIF_uartPrint>

	/* analyze parameters for +IPR */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800dcbe:	8b33      	ldrh	r3, [r6, #24]
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d144      	bne.n	800dd4e <fRspAnalyze_IPR+0xc6>
		START_PARAM_LOOP()
				PRINT_DBG("BAUD RATE:")
 800dcc4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800dd5c <fRspAnalyze_IPR+0xd4>
 800dcc8:	4c23      	ldr	r4, [pc, #140]	; (800dd58 <fRspAnalyze_IPR+0xd0>)

				if (element_infos->param_rank == 2U) {
					/* param trace only */
					PRINT_INFO("+IPR baud rate=%ld",
 800dcca:	f8df a094 	ldr.w	sl, [pc, #148]	; 800dd60 <fRspAnalyze_IPR+0xd8>
		START_PARAM_LOOP()
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f7fa fa4a 	bl	800816c <atcc_extractElement>
 800dcd8:	89eb      	ldrh	r3, [r5, #14]
 800dcda:	4680      	mov	r8, r0
 800dcdc:	b3a3      	cbz	r3, 800dd48 <fRspAnalyze_IPR+0xc0>
				PRINT_DBG("BAUD RATE:")
 800dcde:	4649      	mov	r1, r9
 800dce0:	4620      	mov	r0, r4
 800dce2:	f00f f959 	bl	801cf98 <strcpy>
 800dce6:	4620      	mov	r0, r4
 800dce8:	f00a f924 	bl	8017f34 <crs_strlen>
 800dcec:	4622      	mov	r2, r4
 800dcee:	b283      	uxth	r3, r0
 800dcf0:	2102      	movs	r1, #2
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	f00a f95c 	bl	8017fb0 <traceIF_itmPrint>
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f00a f91b 	bl	8017f34 <crs_strlen>
 800dcfe:	4622      	mov	r2, r4
 800dd00:	b283      	uxth	r3, r0
 800dd02:	2102      	movs	r1, #2
 800dd04:	2001      	movs	r0, #1
 800dd06:	f00a fb79 	bl	80183fc <traceIF_uartPrint>
				if (element_infos->param_rank == 2U) {
 800dd0a:	892b      	ldrh	r3, [r5, #8]
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d11b      	bne.n	800dd48 <fRspAnalyze_IPR+0xc0>
					PRINT_INFO("+IPR baud rate=%ld",
 800dd10:	8968      	ldrh	r0, [r5, #10]
 800dd12:	89e9      	ldrh	r1, [r5, #14]
 800dd14:	4438      	add	r0, r7
 800dd16:	f000 fcfb 	bl	800e710 <ATutil_convertStringToInt>
 800dd1a:	4651      	mov	r1, sl
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f00f f8ca 	bl	801ceb8 <sprintf>
 800dd24:	4620      	mov	r0, r4
 800dd26:	f00a f905 	bl	8017f34 <crs_strlen>
 800dd2a:	2101      	movs	r1, #1
 800dd2c:	b283      	uxth	r3, r0
 800dd2e:	4622      	mov	r2, r4
 800dd30:	4608      	mov	r0, r1
 800dd32:	f00a f93d 	bl	8017fb0 <traceIF_itmPrint>
 800dd36:	4620      	mov	r0, r4
 800dd38:	f00a f8fc 	bl	8017f34 <crs_strlen>
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	b283      	uxth	r3, r0
 800dd40:	4622      	mov	r2, r4
 800dd42:	4608      	mov	r0, r1
 800dd44:	f00a fb5a 	bl	80183fc <traceIF_uartPrint>
							ATutil_convertStringToInt(
									&p_msg_in->buffer[element_infos->str_start_idx],
									element_infos->str_size))
				}END_PARAM_LOOP()
 800dd48:	f1b8 0f01 	cmp.w	r8, #1
 800dd4c:	d0bf      	beq.n	800dcce <fRspAnalyze_IPR+0x46>
	}

	return (retval);
}
 800dd4e:	2010      	movs	r0, #16
 800dd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd54:	08026adc 	.word	0x08026adc
 800dd58:	20008ef8 	.word	0x20008ef8
 800dd5c:	08026b03 	.word	0x08026b03
 800dd60:	08026b19 	.word	0x08026b19

0800dd64 <fRspAnalyze_IFC>:

at_action_rsp_t fRspAnalyze_IFC(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800dd64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd68:	4681      	mov	r9, r0
 800dd6a:	460e      	mov	r6, r1
  UNUSED(p_msg_in); /* for MISRA-2012 */
#endif /* USE_TRACE_ATCUSTOM_MODEM */

	atparser_context_t *p_atp_ctxt = &(p_at_ctxt->parser);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_IFC()")
 800dd6c:	4840      	ldr	r0, [pc, #256]	; (800de70 <fRspAnalyze_IFC+0x10c>)
 800dd6e:	4941      	ldr	r1, [pc, #260]	; (800de74 <fRspAnalyze_IFC+0x110>)
		at_element_info_t *element_infos) {
 800dd70:	4690      	mov	r8, r2
 800dd72:	461d      	mov	r5, r3
	PRINT_API("enter fRspAnalyze_IFC()")
 800dd74:	f00f f910 	bl	801cf98 <strcpy>
 800dd78:	483d      	ldr	r0, [pc, #244]	; (800de70 <fRspAnalyze_IFC+0x10c>)
 800dd7a:	f00a f8db 	bl	8017f34 <crs_strlen>
 800dd7e:	4a3c      	ldr	r2, [pc, #240]	; (800de70 <fRspAnalyze_IFC+0x10c>)
 800dd80:	b283      	uxth	r3, r0
 800dd82:	2104      	movs	r1, #4
 800dd84:	2001      	movs	r0, #1
 800dd86:	f00a f913 	bl	8017fb0 <traceIF_itmPrint>
 800dd8a:	4839      	ldr	r0, [pc, #228]	; (800de70 <fRspAnalyze_IFC+0x10c>)
 800dd8c:	f00a f8d2 	bl	8017f34 <crs_strlen>
 800dd90:	4a37      	ldr	r2, [pc, #220]	; (800de70 <fRspAnalyze_IFC+0x10c>)
 800dd92:	b283      	uxth	r3, r0
 800dd94:	2104      	movs	r1, #4
 800dd96:	2001      	movs	r0, #1
 800dd98:	f00a fb30 	bl	80183fc <traceIF_uartPrint>

	/* initialize RTS and CTS with invalid values */
	p_modem_ctxt->persist.flowCtrl_RTS = 0xFF;
 800dd9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dda0:	f8a6 351e 	strh.w	r3, [r6, #1310]	; 0x51e
	p_modem_ctxt->persist.flowCtrl_CTS = 0xFF;

	/* analyze parameters for +IFC */
	if (p_atp_ctxt->current_atcmd.type == ATTYPE_READ_CMD) {
 800dda4:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d15d      	bne.n	800de68 <fRspAnalyze_IFC+0x104>
				if (element_infos->param_rank == 3U) {
					/* dte_by_dce flow control: 0:None 2= CTS flow control */
					uint32_t cts_fc = ATutil_convertStringToInt(
							&p_msg_in->buffer[element_infos->str_start_idx],
							element_infos->str_size);
					PRINT_DBG("+IFC: CTS flow control=%ld", cts_fc)
 800ddac:	4c30      	ldr	r4, [pc, #192]	; (800de70 <fRspAnalyze_IFC+0x10c>)
					PRINT_DBG("+IFC: RTS flow control=%ld", rts_fc)
 800ddae:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800de7c <fRspAnalyze_IFC+0x118>
		START_PARAM_LOOP()
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	462a      	mov	r2, r5
 800ddb6:	4648      	mov	r0, r9
 800ddb8:	f7fa f9d8 	bl	800816c <atcc_extractElement>
 800ddbc:	89e9      	ldrh	r1, [r5, #14]
 800ddbe:	9001      	str	r0, [sp, #4]
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	d04e      	beq.n	800de62 <fRspAnalyze_IFC+0xfe>
				if (element_infos->param_rank == 2U) {
 800ddc4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ddc8:	f1ba 0f02 	cmp.w	sl, #2
 800ddcc:	d122      	bne.n	800de14 <fRspAnalyze_IFC+0xb0>
					uint32_t rts_fc = ATutil_convertStringToInt(
 800ddce:	8968      	ldrh	r0, [r5, #10]
 800ddd0:	4440      	add	r0, r8
 800ddd2:	f000 fc9d 	bl	800e710 <ATutil_convertStringToInt>
					PRINT_DBG("+IFC: RTS flow control=%ld", rts_fc)
 800ddd6:	4659      	mov	r1, fp
 800ddd8:	4602      	mov	r2, r0
					uint32_t rts_fc = ATutil_convertStringToInt(
 800ddda:	4607      	mov	r7, r0
					PRINT_DBG("+IFC: RTS flow control=%ld", rts_fc)
 800dddc:	4620      	mov	r0, r4
 800ddde:	f00f f86b 	bl	801ceb8 <sprintf>
 800dde2:	4620      	mov	r0, r4
 800dde4:	f00a f8a6 	bl	8017f34 <crs_strlen>
 800dde8:	4622      	mov	r2, r4
 800ddea:	b283      	uxth	r3, r0
 800ddec:	4651      	mov	r1, sl
 800ddee:	2001      	movs	r0, #1
 800ddf0:	f00a f8de 	bl	8017fb0 <traceIF_itmPrint>
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f00a f89d 	bl	8017f34 <crs_strlen>
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	b283      	uxth	r3, r0
 800ddfe:	4651      	mov	r1, sl
 800de00:	2001      	movs	r0, #1
 800de02:	f00a fafb 	bl	80183fc <traceIF_uartPrint>
					if (rts_fc == 2U) {
 800de06:	2f02      	cmp	r7, #2
 800de08:	d102      	bne.n	800de10 <fRspAnalyze_IFC+0xac>
						p_modem_ctxt->persist.flowCtrl_RTS = 0U;
 800de0a:	f886 751e 	strb.w	r7, [r6, #1310]	; 0x51e
 800de0e:	e001      	b.n	800de14 <fRspAnalyze_IFC+0xb0>
					} else if (rts_fc == 0U) {
 800de10:	2f00      	cmp	r7, #0
 800de12:	d0fa      	beq.n	800de0a <fRspAnalyze_IFC+0xa6>
				if (element_infos->param_rank == 3U) {
 800de14:	892b      	ldrh	r3, [r5, #8]
 800de16:	2b03      	cmp	r3, #3
 800de18:	d123      	bne.n	800de62 <fRspAnalyze_IFC+0xfe>
					uint32_t cts_fc = ATutil_convertStringToInt(
 800de1a:	8968      	ldrh	r0, [r5, #10]
 800de1c:	89e9      	ldrh	r1, [r5, #14]
 800de1e:	4440      	add	r0, r8
 800de20:	f000 fc76 	bl	800e710 <ATutil_convertStringToInt>
					PRINT_DBG("+IFC: CTS flow control=%ld", cts_fc)
 800de24:	4914      	ldr	r1, [pc, #80]	; (800de78 <fRspAnalyze_IFC+0x114>)
 800de26:	4602      	mov	r2, r0
					uint32_t cts_fc = ATutil_convertStringToInt(
 800de28:	4607      	mov	r7, r0
					PRINT_DBG("+IFC: CTS flow control=%ld", cts_fc)
 800de2a:	4620      	mov	r0, r4
 800de2c:	f00f f844 	bl	801ceb8 <sprintf>
 800de30:	4620      	mov	r0, r4
 800de32:	f00a f87f 	bl	8017f34 <crs_strlen>
 800de36:	4622      	mov	r2, r4
 800de38:	b283      	uxth	r3, r0
 800de3a:	2102      	movs	r1, #2
 800de3c:	2001      	movs	r0, #1
 800de3e:	f00a f8b7 	bl	8017fb0 <traceIF_itmPrint>
 800de42:	4620      	mov	r0, r4
 800de44:	f00a f876 	bl	8017f34 <crs_strlen>
 800de48:	4622      	mov	r2, r4
 800de4a:	b283      	uxth	r3, r0
 800de4c:	2102      	movs	r1, #2
 800de4e:	2001      	movs	r0, #1
 800de50:	f00a fad4 	bl	80183fc <traceIF_uartPrint>
					if (cts_fc == 2U) {
 800de54:	2f02      	cmp	r7, #2
 800de56:	d102      	bne.n	800de5e <fRspAnalyze_IFC+0xfa>
						p_modem_ctxt->persist.flowCtrl_CTS = 2U;
					} else if (cts_fc == 0U) {
						p_modem_ctxt->persist.flowCtrl_CTS = 0U;
 800de58:	f886 751f 	strb.w	r7, [r6, #1311]	; 0x51f
 800de5c:	e001      	b.n	800de62 <fRspAnalyze_IFC+0xfe>
					} else if (cts_fc == 0U) {
 800de5e:	2f00      	cmp	r7, #0
 800de60:	d0fa      	beq.n	800de58 <fRspAnalyze_IFC+0xf4>
					} else { /* keep 0xFF */
					}
				}END_PARAM_LOOP()
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d0a4      	beq.n	800ddb2 <fRspAnalyze_IFC+0x4e>
	}

	return (retval);
}
 800de68:	2010      	movs	r0, #16
 800de6a:	b003      	add	sp, #12
 800de6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de70:	20008ef8 	.word	0x20008ef8
 800de74:	08026b37 	.word	0x08026b37
 800de78:	08026b84 	.word	0x08026b84
 800de7c:	08026b5e 	.word	0x08026b5e

0800de80 <fRspAnalyze_DIRECT_CMD>:

at_action_rsp_t fRspAnalyze_DIRECT_CMD(at_context_t *p_at_ctxt,
		atcustom_modem_context_t *p_modem_ctxt, const IPC_RxMessage_t *p_msg_in,
		at_element_info_t *element_infos) {
 800de80:	b510      	push	{r4, lr}
	UNUSED(p_at_ctxt);
	UNUSED(p_modem_ctxt);
	UNUSED(p_msg_in);
	UNUSED(element_infos);
	at_action_rsp_t retval = ATACTION_RSP_IGNORED;
	PRINT_API("enter fRspAnalyze_DIRECT_CMD()")
 800de82:	4c0c      	ldr	r4, [pc, #48]	; (800deb4 <fRspAnalyze_DIRECT_CMD+0x34>)
 800de84:	490c      	ldr	r1, [pc, #48]	; (800deb8 <fRspAnalyze_DIRECT_CMD+0x38>)
 800de86:	4620      	mov	r0, r4
 800de88:	f00f f886 	bl	801cf98 <strcpy>
 800de8c:	4620      	mov	r0, r4
 800de8e:	f00a f851 	bl	8017f34 <crs_strlen>
 800de92:	4622      	mov	r2, r4
 800de94:	b283      	uxth	r3, r0
 800de96:	2104      	movs	r1, #4
 800de98:	2001      	movs	r0, #1
 800de9a:	f00a f889 	bl	8017fb0 <traceIF_itmPrint>
 800de9e:	4620      	mov	r0, r4
 800dea0:	f00a f848 	bl	8017f34 <crs_strlen>
 800dea4:	4622      	mov	r2, r4
 800dea6:	b283      	uxth	r3, r0
 800dea8:	2104      	movs	r1, #4
 800deaa:	2001      	movs	r0, #1
 800deac:	f00a faa6 	bl	80183fc <traceIF_uartPrint>

	/* NOT IMPLEMENTED YET */

	return (retval);
}
 800deb0:	2010      	movs	r0, #16
 800deb2:	bd10      	pop	{r4, pc}
 800deb4:	20008ef8 	.word	0x20008ef8
 800deb8:	08026baa 	.word	0x08026baa

0800debc <atcm_socket_release_modem_cid>:
  */
at_status_t atcm_socket_release_modem_cid(atcustom_modem_context_t *p_modem_ctxt, socket_handle_t sockHandle)
{
  at_status_t retval;

  if (sockHandle == CS_INVALID_SOCKET_HANDLE)
 800debc:	1c4b      	adds	r3, r1, #1
{
 800debe:	b513      	push	{r0, r1, r4, lr}
 800dec0:	460a      	mov	r2, r1
  if (sockHandle == CS_INVALID_SOCKET_HANDLE)
 800dec2:	d118      	bne.n	800def6 <atcm_socket_release_modem_cid+0x3a>
  {
    PRINT_INFO("socket handle %ld not valid", sockHandle)
 800dec4:	491f      	ldr	r1, [pc, #124]	; (800df44 <atcm_socket_release_modem_cid+0x88>)
 800dec6:	4820      	ldr	r0, [pc, #128]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800dec8:	f00e fff6 	bl	801ceb8 <sprintf>
 800decc:	481e      	ldr	r0, [pc, #120]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800dece:	f00a f831 	bl	8017f34 <crs_strlen>
 800ded2:	2101      	movs	r1, #1
 800ded4:	b283      	uxth	r3, r0
 800ded6:	4a1c      	ldr	r2, [pc, #112]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800ded8:	4608      	mov	r0, r1
 800deda:	f00a f869 	bl	8017fb0 <traceIF_itmPrint>
 800dede:	481a      	ldr	r0, [pc, #104]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800dee0:	f00a f828 	bl	8017f34 <crs_strlen>
 800dee4:	2101      	movs	r1, #1
 800dee6:	b283      	uxth	r3, r0
 800dee8:	4a17      	ldr	r2, [pc, #92]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800deea:	4608      	mov	r0, r1
 800deec:	f00a fa86 	bl	80183fc <traceIF_uartPrint>
    retval = ATSTATUS_ERROR;
 800def0:	2001      	movs	r0, #1
    p_modem_ctxt->persist.socket[sockHandle].socket_closed_pending_urc = AT_FALSE;
    retval = ATSTATUS_OK;
  }

  return (retval);
}
 800def2:	b002      	add	sp, #8
 800def4:	bd10      	pop	{r4, pc}
    if ((p_modem_ctxt->persist.socket[sockHandle].socket_data_pending_urc == AT_TRUE) ||
 800def6:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 800defa:	f894 3501 	ldrb.w	r3, [r4, #1281]	; 0x501
 800defe:	f894 1502 	ldrb.w	r1, [r4, #1282]	; 0x502
 800df02:	b903      	cbnz	r3, 800df06 <atcm_socket_release_modem_cid+0x4a>
 800df04:	b1b1      	cbz	r1, 800df34 <atcm_socket_release_modem_cid+0x78>
      PRINT_INFO("Warning, there was pending URC for socket handle %ld: (%d)data pending urc,(%d) closed by remote urc",
 800df06:	9100      	str	r1, [sp, #0]
 800df08:	480f      	ldr	r0, [pc, #60]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800df0a:	4910      	ldr	r1, [pc, #64]	; (800df4c <atcm_socket_release_modem_cid+0x90>)
 800df0c:	f00e ffd4 	bl	801ceb8 <sprintf>
 800df10:	480d      	ldr	r0, [pc, #52]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800df12:	f00a f80f 	bl	8017f34 <crs_strlen>
 800df16:	2101      	movs	r1, #1
 800df18:	b283      	uxth	r3, r0
 800df1a:	4a0b      	ldr	r2, [pc, #44]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800df1c:	4608      	mov	r0, r1
 800df1e:	f00a f847 	bl	8017fb0 <traceIF_itmPrint>
 800df22:	4809      	ldr	r0, [pc, #36]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800df24:	f00a f806 	bl	8017f34 <crs_strlen>
 800df28:	2101      	movs	r1, #1
 800df2a:	b283      	uxth	r3, r0
 800df2c:	4a06      	ldr	r2, [pc, #24]	; (800df48 <atcm_socket_release_modem_cid+0x8c>)
 800df2e:	4608      	mov	r0, r1
 800df30:	f00a fa64 	bl	80183fc <traceIF_uartPrint>
    p_modem_ctxt->persist.socket[sockHandle].socket_connected = AT_FALSE;
 800df34:	2000      	movs	r0, #0
 800df36:	f884 0500 	strb.w	r0, [r4, #1280]	; 0x500
    p_modem_ctxt->persist.socket[sockHandle].socket_data_pending_urc = AT_FALSE;
 800df3a:	f884 0501 	strb.w	r0, [r4, #1281]	; 0x501
    p_modem_ctxt->persist.socket[sockHandle].socket_closed_pending_urc = AT_FALSE;
 800df3e:	f884 0502 	strb.w	r0, [r4, #1282]	; 0x502
    retval = ATSTATUS_OK;
 800df42:	e7d6      	b.n	800def2 <atcm_socket_release_modem_cid+0x36>
 800df44:	08026c18 	.word	0x08026c18
 800df48:	20008ef8 	.word	0x20008ef8
 800df4c:	08026c3f 	.word	0x08026c3f

0800df50 <atcm_socket_get_hdle_urc_data_pending>:
/**
  * @brief  This function returns the socket handle of "socket data received" URC
  *         and clears it
  */
socket_handle_t atcm_socket_get_hdle_urc_data_pending(atcustom_modem_context_t *p_modem_ctxt)
{
 800df50:	b510      	push	{r4, lr}
  socket_handle_t sockHandle = CS_INVALID_SOCKET_HANDLE;

  PRINT_API("enter atcm_socket_get_hdle_urc_data_pending")
 800df52:	4916      	ldr	r1, [pc, #88]	; (800dfac <atcm_socket_get_hdle_urc_data_pending+0x5c>)
{
 800df54:	4604      	mov	r4, r0
  PRINT_API("enter atcm_socket_get_hdle_urc_data_pending")
 800df56:	4816      	ldr	r0, [pc, #88]	; (800dfb0 <atcm_socket_get_hdle_urc_data_pending+0x60>)
 800df58:	f00f f81e 	bl	801cf98 <strcpy>
 800df5c:	4814      	ldr	r0, [pc, #80]	; (800dfb0 <atcm_socket_get_hdle_urc_data_pending+0x60>)
 800df5e:	f009 ffe9 	bl	8017f34 <crs_strlen>
 800df62:	4a13      	ldr	r2, [pc, #76]	; (800dfb0 <atcm_socket_get_hdle_urc_data_pending+0x60>)
 800df64:	b283      	uxth	r3, r0
 800df66:	2104      	movs	r1, #4
 800df68:	2001      	movs	r0, #1
 800df6a:	f00a f821 	bl	8017fb0 <traceIF_itmPrint>
 800df6e:	4810      	ldr	r0, [pc, #64]	; (800dfb0 <atcm_socket_get_hdle_urc_data_pending+0x60>)
 800df70:	f009 ffe0 	bl	8017f34 <crs_strlen>
 800df74:	4a0e      	ldr	r2, [pc, #56]	; (800dfb0 <atcm_socket_get_hdle_urc_data_pending+0x60>)
 800df76:	b283      	uxth	r3, r0
 800df78:	2104      	movs	r1, #4
 800df7a:	2001      	movs	r0, #1
 800df7c:	f00a fa3e 	bl	80183fc <traceIF_uartPrint>
 800df80:	2300      	movs	r3, #0

  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
  {
    atcustom_persistent_SOCKET_context_t *p_tmp;
    p_tmp = &p_modem_ctxt->persist.socket[i];
    if (p_tmp->socket_data_pending_urc == AT_TRUE)
 800df82:	f204 5201 	addw	r2, r4, #1281	; 0x501
    p_tmp = &p_modem_ctxt->persist.socket[i];
 800df86:	4618      	mov	r0, r3
    if (p_tmp->socket_data_pending_urc == AT_TRUE)
 800df88:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800df8c:	b133      	cbz	r3, 800df9c <atcm_socket_get_hdle_urc_data_pending+0x4c>
    {
      sockHandle = (socket_handle_t)i;
      /* clear this URC */
      p_tmp->socket_data_pending_urc = AT_FALSE;
 800df8e:	f500 739f 	add.w	r3, r0, #318	; 0x13e
 800df92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800df96:	2300      	movs	r3, #0
 800df98:	7263      	strb	r3, [r4, #9]
      break;
    }
  }

  return (sockHandle);
}
 800df9a:	bd10      	pop	{r4, pc}
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800df9c:	2805      	cmp	r0, #5
 800df9e:	f100 0301 	add.w	r3, r0, #1
 800dfa2:	d1f0      	bne.n	800df86 <atcm_socket_get_hdle_urc_data_pending+0x36>
  socket_handle_t sockHandle = CS_INVALID_SOCKET_HANDLE;
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295
  return (sockHandle);
 800dfa8:	e7f7      	b.n	800df9a <atcm_socket_get_hdle_urc_data_pending+0x4a>
 800dfaa:	bf00      	nop
 800dfac:	08026caf 	.word	0x08026caf
 800dfb0:	20008ef8 	.word	0x20008ef8

0800dfb4 <atcm_socket_get_hdlr_urc_closed_by_remote>:
/**
  * @brief  This function returns the socket handle of "socket closed by remote" URC
  *         and clears it
  */
socket_handle_t atcm_socket_get_hdlr_urc_closed_by_remote(atcustom_modem_context_t *p_modem_ctxt)
{
 800dfb4:	b510      	push	{r4, lr}
  socket_handle_t sockHandle = CS_INVALID_SOCKET_HANDLE;

  PRINT_API("enter atcm_socket_get_hdlr_urc_closed_by_remote")
 800dfb6:	4916      	ldr	r1, [pc, #88]	; (800e010 <atcm_socket_get_hdlr_urc_closed_by_remote+0x5c>)
{
 800dfb8:	4604      	mov	r4, r0
  PRINT_API("enter atcm_socket_get_hdlr_urc_closed_by_remote")
 800dfba:	4816      	ldr	r0, [pc, #88]	; (800e014 <atcm_socket_get_hdlr_urc_closed_by_remote+0x60>)
 800dfbc:	f00e ffec 	bl	801cf98 <strcpy>
 800dfc0:	4814      	ldr	r0, [pc, #80]	; (800e014 <atcm_socket_get_hdlr_urc_closed_by_remote+0x60>)
 800dfc2:	f009 ffb7 	bl	8017f34 <crs_strlen>
 800dfc6:	4a13      	ldr	r2, [pc, #76]	; (800e014 <atcm_socket_get_hdlr_urc_closed_by_remote+0x60>)
 800dfc8:	b283      	uxth	r3, r0
 800dfca:	2104      	movs	r1, #4
 800dfcc:	2001      	movs	r0, #1
 800dfce:	f009 ffef 	bl	8017fb0 <traceIF_itmPrint>
 800dfd2:	4810      	ldr	r0, [pc, #64]	; (800e014 <atcm_socket_get_hdlr_urc_closed_by_remote+0x60>)
 800dfd4:	f009 ffae 	bl	8017f34 <crs_strlen>
 800dfd8:	4a0e      	ldr	r2, [pc, #56]	; (800e014 <atcm_socket_get_hdlr_urc_closed_by_remote+0x60>)
 800dfda:	b283      	uxth	r3, r0
 800dfdc:	2104      	movs	r1, #4
 800dfde:	2001      	movs	r0, #1
 800dfe0:	f00a fa0c 	bl	80183fc <traceIF_uartPrint>
 800dfe4:	2300      	movs	r3, #0

  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
  {
    atcustom_persistent_SOCKET_context_t *p_tmp;
    p_tmp = &p_modem_ctxt->persist.socket[i];
    if (p_tmp->socket_closed_pending_urc == AT_TRUE)
 800dfe6:	f204 5202 	addw	r2, r4, #1282	; 0x502
    p_tmp = &p_modem_ctxt->persist.socket[i];
 800dfea:	4618      	mov	r0, r3
    if (p_tmp->socket_closed_pending_urc == AT_TRUE)
 800dfec:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800dff0:	b133      	cbz	r3, 800e000 <atcm_socket_get_hdlr_urc_closed_by_remote+0x4c>
    {
      sockHandle = (socket_handle_t)i;
      /* clear this URC */
      p_tmp->socket_closed_pending_urc = AT_FALSE;
 800dff2:	f500 739f 	add.w	r3, r0, #318	; 0x13e
 800dff6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dffa:	2300      	movs	r3, #0
 800dffc:	72a3      	strb	r3, [r4, #10]
      break;
    }
  }

  return (sockHandle);
}
 800dffe:	bd10      	pop	{r4, pc}
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800e000:	2805      	cmp	r0, #5
 800e002:	f100 0301 	add.w	r3, r0, #1
 800e006:	d1f0      	bne.n	800dfea <atcm_socket_get_hdlr_urc_closed_by_remote+0x36>
  socket_handle_t sockHandle = CS_INVALID_SOCKET_HANDLE;
 800e008:	f04f 30ff 	mov.w	r0, #4294967295
  return (sockHandle);
 800e00c:	e7f7      	b.n	800dffe <atcm_socket_get_hdlr_urc_closed_by_remote+0x4a>
 800e00e:	bf00      	nop
 800e010:	08026cea 	.word	0x08026cea
 800e014:	20008ef8 	.word	0x20008ef8

0800e018 <atcm_socket_remaining_urc_data_pending>:

/**
  * @brief  This function returns if there are pending "socket data received" URC
  */
at_bool_t atcm_socket_remaining_urc_data_pending(const atcustom_modem_context_t *p_modem_ctxt)
{
 800e018:	b510      	push	{r4, lr}
  PRINT_API("enter atcm_socket_remaining_urc_data_pending")
 800e01a:	4910      	ldr	r1, [pc, #64]	; (800e05c <atcm_socket_remaining_urc_data_pending+0x44>)
{
 800e01c:	4604      	mov	r4, r0
  PRINT_API("enter atcm_socket_remaining_urc_data_pending")
 800e01e:	4810      	ldr	r0, [pc, #64]	; (800e060 <atcm_socket_remaining_urc_data_pending+0x48>)
 800e020:	f00e ffba 	bl	801cf98 <strcpy>
 800e024:	480e      	ldr	r0, [pc, #56]	; (800e060 <atcm_socket_remaining_urc_data_pending+0x48>)
 800e026:	f009 ff85 	bl	8017f34 <crs_strlen>
 800e02a:	4a0d      	ldr	r2, [pc, #52]	; (800e060 <atcm_socket_remaining_urc_data_pending+0x48>)
 800e02c:	b283      	uxth	r3, r0
 800e02e:	2104      	movs	r1, #4
 800e030:	2001      	movs	r0, #1
 800e032:	f009 ffbd 	bl	8017fb0 <traceIF_itmPrint>
 800e036:	480a      	ldr	r0, [pc, #40]	; (800e060 <atcm_socket_remaining_urc_data_pending+0x48>)
 800e038:	f009 ff7c 	bl	8017f34 <crs_strlen>
 800e03c:	4a08      	ldr	r2, [pc, #32]	; (800e060 <atcm_socket_remaining_urc_data_pending+0x48>)
 800e03e:	b283      	uxth	r3, r0
 800e040:	2104      	movs	r1, #4
 800e042:	2001      	movs	r0, #1
 800e044:	f00a f9da 	bl	80183fc <traceIF_uartPrint>
  at_bool_t remain = AT_FALSE;

  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800e048:	4623      	mov	r3, r4
 800e04a:	f104 0218 	add.w	r2, r4, #24
  {
    const atcustom_persistent_SOCKET_context_t *p_tmp;
    p_tmp = &p_modem_ctxt->persist.socket[i];
    if (p_tmp->socket_data_pending_urc == AT_TRUE)
 800e04e:	f893 0501 	ldrb.w	r0, [r3, #1281]	; 0x501
 800e052:	b910      	cbnz	r0, 800e05a <atcm_socket_remaining_urc_data_pending+0x42>
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800e054:	3304      	adds	r3, #4
 800e056:	4293      	cmp	r3, r2
 800e058:	d1f9      	bne.n	800e04e <atcm_socket_remaining_urc_data_pending+0x36>
      break;
    }
  }

  return (remain);
}
 800e05a:	bd10      	pop	{r4, pc}
 800e05c:	08026d29 	.word	0x08026d29
 800e060:	20008ef8 	.word	0x20008ef8

0800e064 <atcm_socket_remaining_urc_closed_by_remote>:

/**
  * @brief  This function returns if there are pending "socket closed by remote" URC
  */
at_bool_t atcm_socket_remaining_urc_closed_by_remote(const atcustom_modem_context_t *p_modem_ctxt)
{
 800e064:	b510      	push	{r4, lr}
  PRINT_API("enter atcm_socket_remaining_urc_closed_by_remote")
 800e066:	4910      	ldr	r1, [pc, #64]	; (800e0a8 <atcm_socket_remaining_urc_closed_by_remote+0x44>)
{
 800e068:	4604      	mov	r4, r0
  PRINT_API("enter atcm_socket_remaining_urc_closed_by_remote")
 800e06a:	4810      	ldr	r0, [pc, #64]	; (800e0ac <atcm_socket_remaining_urc_closed_by_remote+0x48>)
 800e06c:	f00e ff94 	bl	801cf98 <strcpy>
 800e070:	480e      	ldr	r0, [pc, #56]	; (800e0ac <atcm_socket_remaining_urc_closed_by_remote+0x48>)
 800e072:	f009 ff5f 	bl	8017f34 <crs_strlen>
 800e076:	4a0d      	ldr	r2, [pc, #52]	; (800e0ac <atcm_socket_remaining_urc_closed_by_remote+0x48>)
 800e078:	b283      	uxth	r3, r0
 800e07a:	2104      	movs	r1, #4
 800e07c:	2001      	movs	r0, #1
 800e07e:	f009 ff97 	bl	8017fb0 <traceIF_itmPrint>
 800e082:	480a      	ldr	r0, [pc, #40]	; (800e0ac <atcm_socket_remaining_urc_closed_by_remote+0x48>)
 800e084:	f009 ff56 	bl	8017f34 <crs_strlen>
 800e088:	4a08      	ldr	r2, [pc, #32]	; (800e0ac <atcm_socket_remaining_urc_closed_by_remote+0x48>)
 800e08a:	b283      	uxth	r3, r0
 800e08c:	2104      	movs	r1, #4
 800e08e:	2001      	movs	r0, #1
 800e090:	f00a f9b4 	bl	80183fc <traceIF_uartPrint>

  at_bool_t remain = AT_FALSE;

  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800e094:	4623      	mov	r3, r4
 800e096:	f104 0218 	add.w	r2, r4, #24
  {
    const atcustom_persistent_SOCKET_context_t *p_tmp;
    p_tmp = &p_modem_ctxt->persist.socket[i];
    if (p_tmp->socket_closed_pending_urc == AT_TRUE)
 800e09a:	f893 0502 	ldrb.w	r0, [r3, #1282]	; 0x502
 800e09e:	b910      	cbnz	r0, 800e0a6 <atcm_socket_remaining_urc_closed_by_remote+0x42>
  for (uint8_t i = 0U; i < CELLULAR_MAX_SOCKETS; i++)
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d1f9      	bne.n	800e09a <atcm_socket_remaining_urc_closed_by_remote+0x36>
      break;
    }
  }

  return (remain);
}
 800e0a6:	bd10      	pop	{r4, pc}
 800e0a8:	08026d65 	.word	0x08026d65
 800e0ac:	20008ef8 	.word	0x20008ef8

0800e0b0 <reset_current_command>:

  p_atp_ctxt->p_cmd_input = NULL;
}

static void reset_current_command(atparser_context_t *p_atp_ctxt)
{
 800e0b0:	b538      	push	{r3, r4, r5, lr}
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
  p_atp_ctxt->current_atcmd.type = ATTYPE_UNKNOWN_CMD;
 800e0b2:	2500      	movs	r5, #0
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
 800e0b4:	f04f 33ff 	mov.w	r3, #4294967295
{
 800e0b8:	4604      	mov	r4, r0
  p_atp_ctxt->current_atcmd.id = CMD_AT_INVALID;
 800e0ba:	60c3      	str	r3, [r0, #12]
  p_atp_ctxt->current_atcmd.type = ATTYPE_UNKNOWN_CMD;
 800e0bc:	8105      	strh	r5, [r0, #8]
  (void) memset((void *)&p_atp_ctxt->current_atcmd.name[0], 0, sizeof(uint8_t) * (ATCMD_MAX_NAME_SIZE));
 800e0be:	2220      	movs	r2, #32
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	3010      	adds	r0, #16
 800e0c4:	f00e fec8 	bl	801ce58 <memset>
  (void) memset((void *)&p_atp_ctxt->current_atcmd.params[0], 0, sizeof(uint8_t) * (ATCMD_MAX_CMD_SIZE));
 800e0c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800e0d2:	f00e fec1 	bl	801ce58 <memset>
  p_atp_ctxt->current_atcmd.raw_cmd_size = 0U;
 800e0d6:	f8c4 5670 	str.w	r5, [r4, #1648]	; 0x670
}
 800e0da:	bd38      	pop	{r3, r4, r5, pc}

0800e0dc <reset_parser_context>:
{
 800e0dc:	b538      	push	{r3, r4, r5, lr}
  p_atp_ctxt->current_SID = SID_INVALID;
 800e0de:	2500      	movs	r5, #0
{
 800e0e0:	4604      	mov	r4, r0
  p_atp_ctxt->is_final_cmd = 1U;
 800e0e2:	2301      	movs	r3, #1
  p_atp_ctxt->current_SID = SID_INVALID;
 800e0e4:	6005      	str	r5, [r0, #0]
  p_atp_ctxt->is_final_cmd = 1U;
 800e0e6:	7103      	strb	r3, [r0, #4]
  p_atp_ctxt->cmd_timeout = 0U;
 800e0e8:	f8c0 5678 	str.w	r5, [r0, #1656]	; 0x678
  reset_current_command(p_atp_ctxt);
 800e0ec:	f7ff ffe0 	bl	800e0b0 <reset_current_command>
  p_atp_ctxt->p_cmd_input = NULL;
 800e0f0:	f8c4 567c 	str.w	r5, [r4, #1660]	; 0x67c
}
 800e0f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e0f8 <display_buffer>:

static void display_buffer(const at_context_t *p_at_ctxt, const uint8_t *p_buf, uint16_t buf_size, uint8_t is_TX_buf)
{
 800e0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fc:	4607      	mov	r7, r0
 800e0fe:	460e      	mov	r6, r1
#if (USE_TRACE_ATPARSER == 0U)
  UNUSED(p_buf); /* for MISRA-2012 */
#endif /* USE_TRACE_ATPARSER */

  /* print header */
  PRINT_INDENT()
 800e100:	4834      	ldr	r0, [pc, #208]	; (800e1d4 <display_buffer+0xdc>)
 800e102:	4935      	ldr	r1, [pc, #212]	; (800e1d8 <display_buffer+0xe0>)
{
 800e104:	461d      	mov	r5, r3
 800e106:	4614      	mov	r4, r2
  PRINT_INDENT()
 800e108:	f00e ff46 	bl	801cf98 <strcpy>
 800e10c:	4831      	ldr	r0, [pc, #196]	; (800e1d4 <display_buffer+0xdc>)
 800e10e:	f009 ff11 	bl	8017f34 <crs_strlen>
 800e112:	2101      	movs	r1, #1
 800e114:	b283      	uxth	r3, r0
 800e116:	4a2f      	ldr	r2, [pc, #188]	; (800e1d4 <display_buffer+0xdc>)
 800e118:	4608      	mov	r0, r1
 800e11a:	f009 ff49 	bl	8017fb0 <traceIF_itmPrint>
 800e11e:	482d      	ldr	r0, [pc, #180]	; (800e1d4 <display_buffer+0xdc>)
 800e120:	f009 ff08 	bl	8017f34 <crs_strlen>
 800e124:	2101      	movs	r1, #1
 800e126:	b283      	uxth	r3, r0
 800e128:	4a2a      	ldr	r2, [pc, #168]	; (800e1d4 <display_buffer+0xdc>)
 800e12a:	4608      	mov	r0, r1
 800e12c:	f00a f966 	bl	80183fc <traceIF_uartPrint>
  if (is_TX_buf == 1U)
 800e130:	2d01      	cmp	r5, #1
 800e132:	d137      	bne.n	800e1a4 <display_buffer+0xac>
  {
    /* TX buffer */
    if (buf_size > 0U)
 800e134:	2c00      	cmp	r4, #0
 800e136:	d036      	beq.n	800e1a6 <display_buffer+0xae>
    {
      PRINT_INFO("*** SEND (size=%d) ***", buf_size)
 800e138:	4928      	ldr	r1, [pc, #160]	; (800e1dc <display_buffer+0xe4>)
 800e13a:	4826      	ldr	r0, [pc, #152]	; (800e1d4 <display_buffer+0xdc>)
 800e13c:	4622      	mov	r2, r4
 800e13e:	f00e febb 	bl	801ceb8 <sprintf>
 800e142:	4824      	ldr	r0, [pc, #144]	; (800e1d4 <display_buffer+0xdc>)
 800e144:	f009 fef6 	bl	8017f34 <crs_strlen>
 800e148:	4a22      	ldr	r2, [pc, #136]	; (800e1d4 <display_buffer+0xdc>)
 800e14a:	b283      	uxth	r3, r0
 800e14c:	4629      	mov	r1, r5
 800e14e:	4628      	mov	r0, r5
 800e150:	f009 ff2e 	bl	8017fb0 <traceIF_itmPrint>
 800e154:	481f      	ldr	r0, [pc, #124]	; (800e1d4 <display_buffer+0xdc>)
 800e156:	f009 feed 	bl	8017f34 <crs_strlen>
 800e15a:	4a1e      	ldr	r2, [pc, #120]	; (800e1d4 <display_buffer+0xdc>)
 800e15c:	b283      	uxth	r3, r0
 800e15e:	4629      	mov	r1, r5
 800e160:	4628      	mov	r0, r5
 800e162:	f00a f94b 	bl	80183fc <traceIF_uartPrint>
      /* only RAW buffers are printed it in hexa */
      if ((p_at_ctxt->parser.current_atcmd.type == ATTYPE_RAW_CMD) &&
 800e166:	8b3b      	ldrh	r3, [r7, #24]
 800e168:	2b06      	cmp	r3, #6
 800e16a:	d128      	bne.n	800e1be <display_buffer+0xc6>
  /* PRINT_INDENT() */

  if (buf_size != 0U)
  {
#if (FILTER_SOCKET_TRACES == 1U)
    if (buf_size > FILTER_DEFAULT_LENGH)
 800e16c:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
          (p_at_ctxt->parser.current_atcmd.id != (CMD_ID_t) CMD_AT_DIRECT_CMD))
 800e170:	69fb      	ldr	r3, [r7, #28]
    if (buf_size > FILTER_DEFAULT_LENGH)
 800e172:	d91a      	bls.n	800e1aa <display_buffer+0xb2>
    {
      PRINT_INFO(" Big frame (display deactivated) ")
 800e174:	491a      	ldr	r1, [pc, #104]	; (800e1e0 <display_buffer+0xe8>)
 800e176:	4817      	ldr	r0, [pc, #92]	; (800e1d4 <display_buffer+0xdc>)
 800e178:	f00e ff0e 	bl	801cf98 <strcpy>
 800e17c:	4815      	ldr	r0, [pc, #84]	; (800e1d4 <display_buffer+0xdc>)
 800e17e:	f009 fed9 	bl	8017f34 <crs_strlen>
 800e182:	2101      	movs	r1, #1
 800e184:	b283      	uxth	r3, r0
 800e186:	4a13      	ldr	r2, [pc, #76]	; (800e1d4 <display_buffer+0xdc>)
 800e188:	4608      	mov	r0, r1
 800e18a:	f009 ff11 	bl	8017fb0 <traceIF_itmPrint>
 800e18e:	4811      	ldr	r0, [pc, #68]	; (800e1d4 <display_buffer+0xdc>)
 800e190:	f009 fed0 	bl	8017f34 <crs_strlen>
 800e194:	2101      	movs	r1, #1
 800e196:	b283      	uxth	r3, r0
    {
      PRINT_BUF((const CRC_CHAR_t *)p_buf, buf_size)
    }
#endif /* FILTER_SOCKET_TRACES */
  }
}
 800e198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      PRINT_INFO(" Big frame (display deactivated) ")
 800e19c:	4a0d      	ldr	r2, [pc, #52]	; (800e1d4 <display_buffer+0xdc>)
 800e19e:	4608      	mov	r0, r1
 800e1a0:	f00a b92c 	b.w	80183fc <traceIF_uartPrint>
  if (buf_size != 0U)
 800e1a4:	b95c      	cbnz	r4, 800e1be <display_buffer+0xc6>
}
 800e1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (print_in_hexa == 1U)
 800e1aa:	2b34      	cmp	r3, #52	; 0x34
 800e1ac:	d00a      	beq.n	800e1c4 <display_buffer+0xcc>
        PRINT_BUF_HEXA((const uint8_t *)p_buf, buf_size)
 800e1ae:	4623      	mov	r3, r4
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	4628      	mov	r0, r5
}
 800e1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        PRINT_BUF_HEXA((const uint8_t *)p_buf, buf_size)
 800e1ba:	f00a b9a9 	b.w	8018510 <traceIF_BufHexPrint>
    if (buf_size > FILTER_DEFAULT_LENGH)
 800e1be:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800e1c2:	d8d7      	bhi.n	800e174 <display_buffer+0x7c>
        PRINT_BUF((const uint8_t *)p_buf, buf_size)
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	4632      	mov	r2, r6
 800e1ca:	4608      	mov	r0, r1
}
 800e1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        PRINT_BUF((const uint8_t *)p_buf, buf_size)
 800e1d0:	f00a b932 	b.w	8018438 <traceIF_BufCharPrint>
 800e1d4:	20008ef8 	.word	0x20008ef8
 800e1d8:	08026da5 	.word	0x08026da5
 800e1dc:	08026daa 	.word	0x08026daa
 800e1e0:	08026dcc 	.word	0x08026dcc

0800e1e4 <write_data2buffer>:
{
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	9e04      	ldr	r6, [sp, #16]
 800e1e8:	461d      	mov	r5, r3
  if ((str_size > 0U) && (str_size < *p_remaining_size))
 800e1ea:	4614      	mov	r4, r2
 800e1ec:	b172      	cbz	r2, 800e20c <write_data2buffer+0x28>
 800e1ee:	8833      	ldrh	r3, [r6, #0]
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d90b      	bls.n	800e20c <write_data2buffer+0x28>
    (void) memcpy((void *) &p_ATcmdBuf[*p_cmd_total_length],
 800e1f4:	882b      	ldrh	r3, [r5, #0]
 800e1f6:	4418      	add	r0, r3
 800e1f8:	f00e fe20 	bl	801ce3c <memcpy>
    *p_cmd_total_length += str_size;
 800e1fc:	882b      	ldrh	r3, [r5, #0]
 800e1fe:	4423      	add	r3, r4
 800e200:	802b      	strh	r3, [r5, #0]
    *p_remaining_size -= str_size;
 800e202:	8832      	ldrh	r2, [r6, #0]
 800e204:	1b14      	subs	r4, r2, r4
 800e206:	8034      	strh	r4, [r6, #0]
 800e208:	2001      	movs	r0, #1
}
 800e20a:	bd70      	pop	{r4, r5, r6, pc}
    retval = false;
 800e20c:	2000      	movs	r0, #0
 800e20e:	e7fc      	b.n	800e20a <write_data2buffer+0x26>

0800e210 <ATParser_initParsers>:
  return (atcc_initParsers(device_type));
 800e210:	f7f9 bf42 	b.w	8008098 <atcc_initParsers>

0800e214 <ATParser_init>:
{
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4604      	mov	r4, r0
  reset_parser_context(&p_at_ctxt->parser);
 800e218:	3010      	adds	r0, #16
{
 800e21a:	460d      	mov	r5, r1
  reset_parser_context(&p_at_ctxt->parser);
 800e21c:	f7ff ff5e 	bl	800e0dc <reset_parser_context>
  *p_checkEndOfMsgCallback = atcc_checkEndOfMsgCallback(p_at_ctxt);
 800e220:	4620      	mov	r0, r4
 800e222:	f7f9 ff6f 	bl	8008104 <atcc_checkEndOfMsgCallback>
 800e226:	6028      	str	r0, [r5, #0]
  (void) memset((AT_CHAR_t *)p_at_ctxt->parser.endstr, 0, AT_CMD_MAX_END_STR_SIZE);
 800e228:	f204 6084 	addw	r0, r4, #1668	; 0x684
 800e22c:	2300      	movs	r3, #0
 800e22e:	f8a4 3684 	strh.w	r3, [r4, #1668]	; 0x684
  (void) sprintf((CRC_CHAR_t *)p_at_ctxt->parser.endstr, "\r");
 800e232:	4904      	ldr	r1, [pc, #16]	; (800e244 <ATParser_init+0x30>)
  (void) memset((AT_CHAR_t *)p_at_ctxt->parser.endstr, 0, AT_CMD_MAX_END_STR_SIZE);
 800e234:	7083      	strb	r3, [r0, #2]
  (void) sprintf((CRC_CHAR_t *)p_at_ctxt->parser.endstr, "\r");
 800e236:	f00e feaf 	bl	801cf98 <strcpy>
  atcc_init(p_at_ctxt);
 800e23a:	4620      	mov	r0, r4
}
 800e23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  atcc_init(p_at_ctxt);
 800e240:	f7f9 bf56 	b.w	80080f0 <atcc_init>
 800e244:	080246ff 	.word	0x080246ff

0800e248 <ATParser_process_request>:
{
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	4604      	mov	r4, r0
 800e24c:	460d      	mov	r5, r1
 800e24e:	4616      	mov	r6, r2
  reset_parser_context(&p_at_ctxt->parser);
 800e250:	3010      	adds	r0, #16
 800e252:	f7ff ff43 	bl	800e0dc <reset_parser_context>
  p_at_ctxt->parser.p_cmd_input = p_cmd_buf;
 800e256:	f8c4 668c 	str.w	r6, [r4, #1676]	; 0x68c
  p_at_ctxt->parser.current_SID = msg_id;
 800e25a:	8225      	strh	r5, [r4, #16]
}
 800e25c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e260 <ATParser_get_ATcmd>:
{
 800e260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e264:	461f      	mov	r7, r3
 800e266:	b086      	sub	sp, #24
  *p_ATcmdSize = 0U;
 800e268:	2300      	movs	r3, #0
{
 800e26a:	4604      	mov	r4, r0
  *p_ATcmdSize = 0U;
 800e26c:	803b      	strh	r3, [r7, #0]
  reset_current_command(&p_at_ctxt->parser);
 800e26e:	3010      	adds	r0, #16
{
 800e270:	460d      	mov	r5, r1
 800e272:	4616      	mov	r6, r2
  reset_current_command(&p_at_ctxt->parser);
 800e274:	f7ff ff1c 	bl	800e0b0 <reset_current_command>
  if (atcc_getCmd(p_at_ctxt, p_ATcmdTimeout) != ATSTATUS_OK)
 800e278:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e27a:	4620      	mov	r0, r4
 800e27c:	f7f9 ff4c 	bl	8008118 <atcc_getCmd>
 800e280:	2800      	cmp	r0, #0
 800e282:	d16f      	bne.n	800e364 <ATParser_get_ATcmd+0x104>
    if (p_at_ctxt->parser.current_atcmd.id != CMD_AT_INVALID)
 800e284:	69e3      	ldr	r3, [r4, #28]
 800e286:	3301      	adds	r3, #1
 800e288:	d051      	beq.n	800e32e <ATParser_get_ATcmd+0xce>
  at_type_t cmd_type = p_at_ctxt->parser.current_atcmd.type;
 800e28a:	8b21      	ldrh	r1, [r4, #24]
  if ((cmd_type == ATTYPE_TEST_CMD) ||
 800e28c:	1e4b      	subs	r3, r1, #1
 800e28e:	2b03      	cmp	r3, #3
 800e290:	f200 809a 	bhi.w	800e3c8 <ATParser_get_ATcmd+0x168>
    str_size = CMD_FORMAT[cmd_type].cmd_prefix_size;
 800e294:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800e4b4 <ATParser_get_ATcmd+0x254>
    uint16_t remaining_size = ATcmdBuf_maxSize;
 800e298:	f8ad 6016 	strh.w	r6, [sp, #22]
 800e29c:	2614      	movs	r6, #20
 800e29e:	434e      	muls	r6, r1
    str_size = CMD_FORMAT[cmd_type].cmd_prefix_size;
 800e2a0:	eb0a 0906 	add.w	r9, sl, r6
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e2a4:	f10d 0816 	add.w	r8, sp, #22
 800e2a8:	f8b9 2008 	ldrh.w	r2, [r9, #8]
    cmd_total_length = 0;
 800e2ac:	f8ad 0014 	strh.w	r0, [sp, #20]
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e2b0:	ab05      	add	r3, sp, #20
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f8cd 8000 	str.w	r8, [sp]
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f7ff ff93 	bl	800e1e4 <write_data2buffer>
    p_str = p_at_ctxt->parser.current_atcmd.name;
 800e2be:	f104 0120 	add.w	r1, r4, #32
    str_size = (uint16_t) strlen((CRC_CHAR_t *) &p_at_ctxt->parser.current_atcmd.name);
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	9103      	str	r1, [sp, #12]
 800e2c6:	f7f1 ffa5 	bl	8000214 <strlen>
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e2ca:	9903      	ldr	r1, [sp, #12]
 800e2cc:	f8cd 8000 	str.w	r8, [sp]
 800e2d0:	b282      	uxth	r2, r0
 800e2d2:	ab05      	add	r3, sp, #20
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	f7ff ff85 	bl	800e1e4 <write_data2buffer>
    p_str = &CMD_FORMAT[cmd_type].cmd_separator[0];
 800e2da:	f106 010a 	add.w	r1, r6, #10
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e2de:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800e2e2:	f8cd 8000 	str.w	r8, [sp]
 800e2e6:	ab05      	add	r3, sp, #20
 800e2e8:	4451      	add	r1, sl
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f7ff ff7a 	bl	800e1e4 <write_data2buffer>
    p_str = p_at_ctxt->parser.current_atcmd.params;
 800e2f0:	f104 0140 	add.w	r1, r4, #64	; 0x40
    str_size = (uint16_t) strlen((CRC_CHAR_t *) &p_at_ctxt->parser.current_atcmd.params);
 800e2f4:	4608      	mov	r0, r1
 800e2f6:	9103      	str	r1, [sp, #12]
 800e2f8:	f7f1 ff8c 	bl	8000214 <strlen>
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e2fc:	ab05      	add	r3, sp, #20
 800e2fe:	b282      	uxth	r2, r0
 800e300:	9903      	ldr	r1, [sp, #12]
 800e302:	f8cd 8000 	str.w	r8, [sp]
 800e306:	4628      	mov	r0, r5
 800e308:	f7ff ff6c 	bl	800e1e4 <write_data2buffer>
    p_str = p_at_ctxt->parser.endstr;
 800e30c:	f204 6184 	addw	r1, r4, #1668	; 0x684
    str_size = (uint16_t) strlen((CRC_CHAR_t *) &p_at_ctxt->parser.endstr);
 800e310:	4608      	mov	r0, r1
 800e312:	9103      	str	r1, [sp, #12]
 800e314:	f7f1 ff7e 	bl	8000214 <strlen>
    (void) write_data2buffer(p_ATcmdBuf, p_str, str_size, &cmd_total_length, &remaining_size);
 800e318:	9903      	ldr	r1, [sp, #12]
 800e31a:	f8cd 8000 	str.w	r8, [sp]
 800e31e:	b282      	uxth	r2, r0
 800e320:	ab05      	add	r3, sp, #20
 800e322:	4628      	mov	r0, r5
 800e324:	f7ff ff5e 	bl	800e1e4 <write_data2buffer>
  return (cmd_total_length);
 800e328:	f8bd 3014 	ldrh.w	r3, [sp, #20]
      *p_ATcmdSize = build_command(p_at_ctxt, p_ATcmdBuf, ATcmdBuf_maxSize);
 800e32c:	803b      	strh	r3, [r7, #0]
    if (p_at_ctxt->parser.answer_expected == CMD_MANDATORY_ANSWER_EXPECTED)
 800e32e:	7ce3      	ldrb	r3, [r4, #19]
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 80a1 	beq.w	800e478 <ATParser_get_ATcmd+0x218>
    else if (p_at_ctxt->parser.answer_expected == CMD_OPTIONAL_ANSWER_EXPECTED)
 800e336:	2b01      	cmp	r3, #1
 800e338:	f000 80ac 	beq.w	800e494 <ATParser_get_ATcmd+0x234>
      PRINT_ERR("Invalid answer_expected value")
 800e33c:	4956      	ldr	r1, [pc, #344]	; (800e498 <ATParser_get_ATcmd+0x238>)
 800e33e:	4857      	ldr	r0, [pc, #348]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e340:	f00e fe2a 	bl	801cf98 <strcpy>
 800e344:	4855      	ldr	r0, [pc, #340]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e346:	f009 fdf5 	bl	8017f34 <crs_strlen>
 800e34a:	4a54      	ldr	r2, [pc, #336]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e34c:	b283      	uxth	r3, r0
 800e34e:	2110      	movs	r1, #16
 800e350:	2001      	movs	r0, #1
 800e352:	f009 fe2d 	bl	8017fb0 <traceIF_itmPrint>
 800e356:	4851      	ldr	r0, [pc, #324]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e358:	f009 fdec 	bl	8017f34 <crs_strlen>
 800e35c:	4a4f      	ldr	r2, [pc, #316]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e35e:	b283      	uxth	r3, r0
 800e360:	2110      	movs	r1, #16
 800e362:	e012      	b.n	800e38a <ATParser_get_ATcmd+0x12a>
    PRINT_DBG("parser f_getCmd error")
 800e364:	494e      	ldr	r1, [pc, #312]	; (800e4a0 <ATParser_get_ATcmd+0x240>)
 800e366:	484d      	ldr	r0, [pc, #308]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e368:	f00e fe16 	bl	801cf98 <strcpy>
 800e36c:	484b      	ldr	r0, [pc, #300]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e36e:	f009 fde1 	bl	8017f34 <crs_strlen>
 800e372:	4a4a      	ldr	r2, [pc, #296]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e374:	b283      	uxth	r3, r0
 800e376:	2102      	movs	r1, #2
 800e378:	2001      	movs	r0, #1
 800e37a:	f009 fe19 	bl	8017fb0 <traceIF_itmPrint>
 800e37e:	4847      	ldr	r0, [pc, #284]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e380:	f009 fdd8 	bl	8017f34 <crs_strlen>
 800e384:	4a45      	ldr	r2, [pc, #276]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e386:	b283      	uxth	r3, r0
 800e388:	2102      	movs	r1, #2
      PRINT_ERR("Invalid answer_expected value")
 800e38a:	2001      	movs	r0, #1
 800e38c:	f00a f836 	bl	80183fc <traceIF_uartPrint>
      action = ATACTION_SEND_ERROR;
 800e390:	2604      	movs	r6, #4
  PRINT_DBG("ATParser_get_ATcmd returned action = 0x%x", action)
 800e392:	4632      	mov	r2, r6
 800e394:	4943      	ldr	r1, [pc, #268]	; (800e4a4 <ATParser_get_ATcmd+0x244>)
 800e396:	4841      	ldr	r0, [pc, #260]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e398:	f00e fd8e 	bl	801ceb8 <sprintf>
 800e39c:	483f      	ldr	r0, [pc, #252]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e39e:	f009 fdc9 	bl	8017f34 <crs_strlen>
 800e3a2:	4a3e      	ldr	r2, [pc, #248]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3a4:	b283      	uxth	r3, r0
 800e3a6:	2102      	movs	r1, #2
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	f009 fe01 	bl	8017fb0 <traceIF_itmPrint>
 800e3ae:	483b      	ldr	r0, [pc, #236]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3b0:	f009 fdc0 	bl	8017f34 <crs_strlen>
 800e3b4:	4a39      	ldr	r2, [pc, #228]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3b6:	b283      	uxth	r3, r0
 800e3b8:	2102      	movs	r1, #2
 800e3ba:	2001      	movs	r0, #1
 800e3bc:	f00a f81e 	bl	80183fc <traceIF_uartPrint>
}
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	b006      	add	sp, #24
 800e3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (cmd_type == ATTYPE_RAW_CMD)
 800e3c8:	2906      	cmp	r1, #6
 800e3ca:	d126      	bne.n	800e41a <ATParser_get_ATcmd+0x1ba>
    if ((p_at_ctxt->parser.current_atcmd.raw_cmd_size != 0U)
 800e3cc:	f8d4 2680 	ldr.w	r2, [r4, #1664]	; 0x680
 800e3d0:	b15a      	cbz	r2, 800e3ea <ATParser_get_ATcmd+0x18a>
        && (p_at_ctxt->parser.current_atcmd.raw_cmd_size <= ATcmdBuf_maxSize))
 800e3d2:	42b2      	cmp	r2, r6
 800e3d4:	d809      	bhi.n	800e3ea <ATParser_get_ATcmd+0x18a>
      (void) memcpy((void *)p_ATcmdBuf,
 800e3d6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f00e fd2e 	bl	801ce3c <memcpy>
      cmd_total_length = (uint16_t)p_at_ctxt->parser.current_atcmd.raw_cmd_size;
 800e3e0:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
      cmd_total_length = 0U;
 800e3e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3e8:	e79e      	b.n	800e328 <ATParser_get_ATcmd+0xc8>
      PRINT_ERR("Error with RAW command size = %ld", p_at_ctxt->parser.current_atcmd.raw_cmd_size)
 800e3ea:	492f      	ldr	r1, [pc, #188]	; (800e4a8 <ATParser_get_ATcmd+0x248>)
 800e3ec:	482b      	ldr	r0, [pc, #172]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3ee:	f00e fd63 	bl	801ceb8 <sprintf>
 800e3f2:	482a      	ldr	r0, [pc, #168]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3f4:	f009 fd9e 	bl	8017f34 <crs_strlen>
 800e3f8:	4a28      	ldr	r2, [pc, #160]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e3fa:	b283      	uxth	r3, r0
 800e3fc:	2110      	movs	r1, #16
 800e3fe:	2001      	movs	r0, #1
 800e400:	f009 fdd6 	bl	8017fb0 <traceIF_itmPrint>
 800e404:	4825      	ldr	r0, [pc, #148]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e406:	f009 fd95 	bl	8017f34 <crs_strlen>
 800e40a:	4a24      	ldr	r2, [pc, #144]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e40c:	b283      	uxth	r3, r0
 800e40e:	2110      	movs	r1, #16
 800e410:	2001      	movs	r0, #1
 800e412:	f009 fff3 	bl	80183fc <traceIF_uartPrint>
      cmd_total_length = 0U;
 800e416:	2300      	movs	r3, #0
 800e418:	e7e4      	b.n	800e3e4 <ATParser_get_ATcmd+0x184>
  else if (cmd_type == ATTYPE_NO_CMD)
 800e41a:	2905      	cmp	r1, #5
    cmd_total_length = 0U;
 800e41c:	f8ad 0014 	strh.w	r0, [sp, #20]
  else if (cmd_type == ATTYPE_NO_CMD)
 800e420:	d116      	bne.n	800e450 <ATParser_get_ATcmd+0x1f0>
    PRINT_DBG("no command to send")
 800e422:	4922      	ldr	r1, [pc, #136]	; (800e4ac <ATParser_get_ATcmd+0x24c>)
 800e424:	481d      	ldr	r0, [pc, #116]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e426:	f00e fdb7 	bl	801cf98 <strcpy>
 800e42a:	481c      	ldr	r0, [pc, #112]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e42c:	f009 fd82 	bl	8017f34 <crs_strlen>
 800e430:	4a1a      	ldr	r2, [pc, #104]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e432:	b283      	uxth	r3, r0
 800e434:	2102      	movs	r1, #2
 800e436:	2001      	movs	r0, #1
 800e438:	f009 fdba 	bl	8017fb0 <traceIF_itmPrint>
 800e43c:	4817      	ldr	r0, [pc, #92]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e43e:	f009 fd79 	bl	8017f34 <crs_strlen>
 800e442:	4a16      	ldr	r2, [pc, #88]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e444:	b283      	uxth	r3, r0
 800e446:	2102      	movs	r1, #2
    PRINT_ERR("invalid command type")
 800e448:	2001      	movs	r0, #1
 800e44a:	f009 ffd7 	bl	80183fc <traceIF_uartPrint>
 800e44e:	e76b      	b.n	800e328 <ATParser_get_ATcmd+0xc8>
 800e450:	4917      	ldr	r1, [pc, #92]	; (800e4b0 <ATParser_get_ATcmd+0x250>)
 800e452:	4812      	ldr	r0, [pc, #72]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e454:	f00e fda0 	bl	801cf98 <strcpy>
 800e458:	4810      	ldr	r0, [pc, #64]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e45a:	f009 fd6b 	bl	8017f34 <crs_strlen>
 800e45e:	4a0f      	ldr	r2, [pc, #60]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e460:	b283      	uxth	r3, r0
 800e462:	2110      	movs	r1, #16
 800e464:	2001      	movs	r0, #1
 800e466:	f009 fda3 	bl	8017fb0 <traceIF_itmPrint>
 800e46a:	480c      	ldr	r0, [pc, #48]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e46c:	f009 fd62 	bl	8017f34 <crs_strlen>
 800e470:	4a0a      	ldr	r2, [pc, #40]	; (800e49c <ATParser_get_ATcmd+0x23c>)
 800e472:	b283      	uxth	r3, r0
 800e474:	2110      	movs	r1, #16
 800e476:	e7e7      	b.n	800e448 <ATParser_get_ATcmd+0x1e8>
      action |= ATACTION_SEND_WAIT_MANDATORY_RSP;
 800e478:	2601      	movs	r6, #1
    if (p_at_ctxt->parser.is_final_cmd == 1U)
 800e47a:	7d23      	ldrb	r3, [r4, #20]
    display_buffer(p_at_ctxt,
 800e47c:	883a      	ldrh	r2, [r7, #0]
    if (p_at_ctxt->parser.is_final_cmd == 1U)
 800e47e:	2b01      	cmp	r3, #1
    display_buffer(p_at_ctxt,
 800e480:	4629      	mov	r1, r5
 800e482:	f04f 0301 	mov.w	r3, #1
 800e486:	4620      	mov	r0, r4
      action |= ATACTION_SEND_FLAG_LAST_CMD;
 800e488:	bf08      	it	eq
 800e48a:	f446 4600 	orreq.w	r6, r6, #32768	; 0x8000
    display_buffer(p_at_ctxt,
 800e48e:	f7ff fe33 	bl	800e0f8 <display_buffer>
 800e492:	e77e      	b.n	800e392 <ATParser_get_ATcmd+0x132>
      action |= ATACTION_SEND_TEMPO;
 800e494:	2602      	movs	r6, #2
 800e496:	e7f0      	b.n	800e47a <ATParser_get_ATcmd+0x21a>
 800e498:	08026e91 	.word	0x08026e91
 800e49c:	20008ef8 	.word	0x20008ef8
 800e4a0:	08026df9 	.word	0x08026df9
 800e4a4:	08026ec0 	.word	0x08026ec0
 800e4a8:	08026e1a 	.word	0x08026e1a
 800e4ac:	08026e4d 	.word	0x08026e4d
 800e4b0:	08026e6b 	.word	0x08026e6b
 800e4b4:	08026fc0 	.word	0x08026fc0

0800e4b8 <ATParser_parse_rsp>:
{
 800e4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  at_element_info_t element_infos = { .current_parse_idx = 0, .cmd_id_received = CMD_AT_INVALID, .param_rank = 0U,
 800e4bc:	2300      	movs	r3, #0
{
 800e4be:	b087      	sub	sp, #28
  at_element_info_t element_infos = { .current_parse_idx = 0, .cmd_id_received = CMD_AT_INVALID, .param_rank = 0U,
 800e4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
{
 800e4c8:	4606      	mov	r6, r0
  display_buffer(p_at_ctxt,
 800e4ca:	f8b1 27d0 	ldrh.w	r2, [r1, #2000]	; 0x7d0
  at_element_info_t element_infos = { .current_parse_idx = 0, .cmd_id_received = CMD_AT_INVALID, .param_rank = 0U,
 800e4ce:	f8ad 3008 	strh.w	r3, [sp, #8]
{
 800e4d2:	460d      	mov	r5, r1
  at_element_info_t element_infos = { .current_parse_idx = 0, .cmd_id_received = CMD_AT_INVALID, .param_rank = 0U,
 800e4d4:	9305      	str	r3, [sp, #20]
  display_buffer(p_at_ctxt,
 800e4d6:	f7ff fe0f 	bl	800e0f8 <display_buffer>
  msg_end = atcc_extractElement(p_at_ctxt, p_message, &element_infos);
 800e4da:	aa02      	add	r2, sp, #8
 800e4dc:	4629      	mov	r1, r5
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7f9 fe44 	bl	800816c <atcc_extractElement>
  cmd_retval = atcc_analyzeCmd(p_at_ctxt, p_message, &element_infos);
 800e4e4:	aa02      	add	r2, sp, #8
  msg_end = atcc_extractElement(p_at_ctxt, p_message, &element_infos);
 800e4e6:	4680      	mov	r8, r0
  cmd_retval = atcc_analyzeCmd(p_at_ctxt, p_message, &element_infos);
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7f9 fe8a 	bl	8008204 <atcc_analyzeCmd>
  PRINT_DBG("analyzeCmd retval = %d (DATA mode=%d) msg_end = %d", clean_retval, data_mode, (msg_end == ATENDMSG_YES))
 800e4f0:	fab8 f388 	clz	r3, r8
  clean_retval = (at_action_rsp_t)(cmd_retval & ~(at_action_rsp_t)ATACTION_RSP_FLAG_DATA_MODE);
 800e4f4:	f3c0 040e 	ubfx	r4, r0, #0, #15
  data_mode = (((uint16_t)cmd_retval & (uint16_t)ATACTION_RSP_FLAG_DATA_MODE) != 0U) ? (uint16_t)1U : (uint16_t)0U;
 800e4f8:	f3c0 37cf 	ubfx	r7, r0, #15, #16
  PRINT_DBG("analyzeCmd retval = %d (DATA mode=%d) msg_end = %d", clean_retval, data_mode, (msg_end == ATENDMSG_YES))
 800e4fc:	095b      	lsrs	r3, r3, #5
 800e4fe:	4945      	ldr	r1, [pc, #276]	; (800e614 <ATParser_parse_rsp+0x15c>)
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	4622      	mov	r2, r4
 800e504:	463b      	mov	r3, r7
  cmd_retval = atcc_analyzeCmd(p_at_ctxt, p_message, &element_infos);
 800e506:	4681      	mov	r9, r0
  PRINT_DBG("analyzeCmd retval = %d (DATA mode=%d) msg_end = %d", clean_retval, data_mode, (msg_end == ATENDMSG_YES))
 800e508:	4843      	ldr	r0, [pc, #268]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e50a:	f00e fcd5 	bl	801ceb8 <sprintf>
 800e50e:	4842      	ldr	r0, [pc, #264]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e510:	f009 fd10 	bl	8017f34 <crs_strlen>
 800e514:	4a40      	ldr	r2, [pc, #256]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e516:	b283      	uxth	r3, r0
 800e518:	2102      	movs	r1, #2
 800e51a:	2001      	movs	r0, #1
 800e51c:	f009 fd48 	bl	8017fb0 <traceIF_itmPrint>
 800e520:	483d      	ldr	r0, [pc, #244]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e522:	f009 fd07 	bl	8017f34 <crs_strlen>
 800e526:	4a3c      	ldr	r2, [pc, #240]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e528:	b283      	uxth	r3, r0
 800e52a:	2102      	movs	r1, #2
 800e52c:	2001      	movs	r0, #1
 800e52e:	f009 ff65 	bl	80183fc <traceIF_uartPrint>
  if ((msg_end != ATENDMSG_YES) && (cmd_retval != ATACTION_RSP_ERROR))
 800e532:	f1b8 0f00 	cmp.w	r8, #0
 800e536:	d039      	beq.n	800e5ac <ATParser_parse_rsp+0xf4>
 800e538:	f1b9 0f04 	cmp.w	r9, #4
 800e53c:	d04f      	beq.n	800e5de <ATParser_parse_rsp+0x126>
    PRINT_DBG("proceed to params")
 800e53e:	4937      	ldr	r1, [pc, #220]	; (800e61c <ATParser_parse_rsp+0x164>)
 800e540:	4835      	ldr	r0, [pc, #212]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e542:	f00e fd29 	bl	801cf98 <strcpy>
 800e546:	4834      	ldr	r0, [pc, #208]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e548:	f009 fcf4 	bl	8017f34 <crs_strlen>
 800e54c:	4a32      	ldr	r2, [pc, #200]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e54e:	b283      	uxth	r3, r0
 800e550:	2102      	movs	r1, #2
 800e552:	2001      	movs	r0, #1
 800e554:	f009 fd2c 	bl	8017fb0 <traceIF_itmPrint>
 800e558:	482f      	ldr	r0, [pc, #188]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e55a:	f009 fceb 	bl	8017f34 <crs_strlen>
 800e55e:	4a2e      	ldr	r2, [pc, #184]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e560:	b283      	uxth	r3, r0
 800e562:	2102      	movs	r1, #2
 800e564:	2001      	movs	r0, #1
 800e566:	f009 ff49 	bl	80183fc <traceIF_uartPrint>
    param_retval = atcc_analyzeParam(p_at_ctxt, p_message, &element_infos);
 800e56a:	4629      	mov	r1, r5
 800e56c:	aa02      	add	r2, sp, #8
 800e56e:	4630      	mov	r0, r6
 800e570:	f7f9 fe72 	bl	8008258 <atcc_analyzeParam>
    if (param_retval != ATACTION_RSP_IGNORED)
 800e574:	2810      	cmp	r0, #16
    param_retval = atcc_analyzeParam(p_at_ctxt, p_message, &element_infos);
 800e576:	4605      	mov	r5, r0
    if (param_retval != ATACTION_RSP_IGNORED)
 800e578:	d018      	beq.n	800e5ac <ATParser_parse_rsp+0xf4>
      PRINT_DBG("action modified by analysis of params: %d to %d", cmd_retval, param_retval)
 800e57a:	4603      	mov	r3, r0
 800e57c:	4928      	ldr	r1, [pc, #160]	; (800e620 <ATParser_parse_rsp+0x168>)
 800e57e:	4826      	ldr	r0, [pc, #152]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e580:	464a      	mov	r2, r9
 800e582:	f00e fc99 	bl	801ceb8 <sprintf>
 800e586:	4824      	ldr	r0, [pc, #144]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e588:	f009 fcd4 	bl	8017f34 <crs_strlen>
 800e58c:	4a22      	ldr	r2, [pc, #136]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e58e:	b283      	uxth	r3, r0
 800e590:	2102      	movs	r1, #2
 800e592:	2001      	movs	r0, #1
 800e594:	f009 fd0c 	bl	8017fb0 <traceIF_itmPrint>
 800e598:	481f      	ldr	r0, [pc, #124]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e59a:	f009 fccb 	bl	8017f34 <crs_strlen>
 800e59e:	4a1e      	ldr	r2, [pc, #120]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e5a0:	b283      	uxth	r3, r0
 800e5a2:	2102      	movs	r1, #2
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	f009 ff29 	bl	80183fc <traceIF_uartPrint>
 800e5aa:	462c      	mov	r4, r5
  if (clean_retval == ATACTION_RSP_FRC_END)
 800e5ac:	2c01      	cmp	r4, #1
 800e5ae:	d10f      	bne.n	800e5d0 <ATParser_parse_rsp+0x118>
    final_retval = atcc_terminateCmd(p_at_ctxt, &element_infos);
 800e5b0:	a902      	add	r1, sp, #8
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7f9 fe7a 	bl	80082ac <atcc_terminateCmd>
    if (final_retval == ATACTION_RSP_ERROR)
 800e5b8:	2804      	cmp	r0, #4
    final_retval = atcc_terminateCmd(p_at_ctxt, &element_infos);
 800e5ba:	4604      	mov	r4, r0
    if (final_retval == ATACTION_RSP_ERROR)
 800e5bc:	d004      	beq.n	800e5c8 <ATParser_parse_rsp+0x110>
    else if (p_at_ctxt->parser.is_final_cmd == 0U)
 800e5be:	7d33      	ldrb	r3, [r6, #20]
      clean_retval = ATACTION_RSP_FRC_CONTINUE;
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bf14      	ite	ne
 800e5c4:	2401      	movne	r4, #1
 800e5c6:	2402      	moveq	r4, #2
    reset_current_command(&p_at_ctxt->parser);
 800e5c8:	f106 0010 	add.w	r0, r6, #16
 800e5cc:	f7ff fd70 	bl	800e0b0 <reset_current_command>
  if (data_mode == 1U)
 800e5d0:	2f01      	cmp	r7, #1
    cmd_retval = (at_action_rsp_t)(clean_retval | ATACTION_RSP_FLAG_DATA_MODE);
 800e5d2:	bf02      	ittt	eq
 800e5d4:	ea6f 4444 	mvneq.w	r4, r4, lsl #17
 800e5d8:	ea6f 4454 	mvneq.w	r4, r4, lsr #17
 800e5dc:	b2a4      	uxtheq	r4, r4
  PRINT_DBG("ATParser_parse_rsp returned action = 0x%x", cmd_retval)
 800e5de:	4622      	mov	r2, r4
 800e5e0:	4910      	ldr	r1, [pc, #64]	; (800e624 <ATParser_parse_rsp+0x16c>)
 800e5e2:	480d      	ldr	r0, [pc, #52]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e5e4:	f00e fc68 	bl	801ceb8 <sprintf>
 800e5e8:	480b      	ldr	r0, [pc, #44]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e5ea:	f009 fca3 	bl	8017f34 <crs_strlen>
 800e5ee:	4a0a      	ldr	r2, [pc, #40]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e5f0:	b283      	uxth	r3, r0
 800e5f2:	2102      	movs	r1, #2
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	f009 fcdb 	bl	8017fb0 <traceIF_itmPrint>
 800e5fa:	4807      	ldr	r0, [pc, #28]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e5fc:	f009 fc9a 	bl	8017f34 <crs_strlen>
 800e600:	4a05      	ldr	r2, [pc, #20]	; (800e618 <ATParser_parse_rsp+0x160>)
 800e602:	b283      	uxth	r3, r0
 800e604:	2102      	movs	r1, #2
 800e606:	2001      	movs	r0, #1
 800e608:	f009 fef8 	bl	80183fc <traceIF_uartPrint>
}
 800e60c:	4620      	mov	r0, r4
 800e60e:	b007      	add	sp, #28
 800e610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e614:	08026ef5 	.word	0x08026ef5
 800e618:	20008ef8 	.word	0x20008ef8
 800e61c:	08026f33 	.word	0x08026f33
 800e620:	08026f50 	.word	0x08026f50
 800e624:	08026f8b 	.word	0x08026f8b

0800e628 <ATParser_get_rsp>:
{
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4605      	mov	r5, r0
  retval = atcc_get_rsp(p_at_ctxt, p_rsp_buf);
 800e62c:	f7f9 fe68 	bl	8008300 <atcc_get_rsp>
 800e630:	4604      	mov	r4, r0
  reset_parser_context(&p_at_ctxt->parser);
 800e632:	f105 0010 	add.w	r0, r5, #16
 800e636:	f7ff fd51 	bl	800e0dc <reset_parser_context>
}
 800e63a:	4620      	mov	r0, r4
 800e63c:	bd38      	pop	{r3, r4, r5, pc}

0800e63e <ATParser_get_urc>:
  retval = atcc_get_urc(p_at_ctxt, p_rsp_buf);
 800e63e:	f7f9 be89 	b.w	8008354 <atcc_get_urc>

0800e642 <ATParser_get_error>:
  retval = atcc_get_error(p_at_ctxt, p_rsp_buf);
 800e642:	f7f9 beb1 	b.w	80083a8 <atcc_get_error>

0800e646 <ATParser_abort_request>:
  reset_parser_context(&p_at_ctxt->parser);
 800e646:	3010      	adds	r0, #16
 800e648:	f7ff bd48 	b.w	800e0dc <reset_parser_context>

0800e64c <ATutil_ipow>:
uint32_t ATutil_ipow(uint32_t base, uint16_t exp) {
	uint16_t local_exp = exp;
	uint32_t local_base = base;

	/* implementation of power function */
	uint32_t result = 1U;
 800e64c:	2301      	movs	r3, #1
	while (local_exp != 0U) {
 800e64e:	b909      	cbnz	r1, 800e654 <ATutil_ipow+0x8>
		local_exp >>= 1;
		local_base *= local_base;
	}

	return result;
}
 800e650:	4618      	mov	r0, r3
 800e652:	4770      	bx	lr
		if ((local_exp & 1U) != 0U) {
 800e654:	07ca      	lsls	r2, r1, #31
			result *= local_base;
 800e656:	bf48      	it	mi
 800e658:	4343      	mulmi	r3, r0
		local_exp >>= 1;
 800e65a:	0849      	lsrs	r1, r1, #1
		local_base *= local_base;
 800e65c:	4340      	muls	r0, r0
 800e65e:	e7f6      	b.n	800e64e <ATutil_ipow+0x2>

0800e660 <ATutil_convertHexaStringToInt32>:
	 * implicit input string format from "W" to "WWWWXXXX"
	 * where X,Y,W and Z are characters from '0' to 'F'
	 */

	/* auto-detect if 0x is present */
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e660:	2902      	cmp	r1, #2
uint32_t ATutil_convertHexaStringToInt32(const uint8_t *p_string, uint16_t size) {
 800e662:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	4688      	mov	r8, r1
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e668:	d913      	bls.n	800e692 <ATutil_convertHexaStringToInt32+0x32>
 800e66a:	7843      	ldrb	r3, [r0, #1]
	{
		/* 0x is present */
		nb_digit_ignored = 2U;
 800e66c:	2b78      	cmp	r3, #120	; 0x78
 800e66e:	bf14      	ite	ne
 800e670:	2500      	movne	r5, #0
 800e672:	2502      	moveq	r5, #2
		/* 0x is not present */
		nb_digit_ignored = 0U;
	}

	/* if 0x is present, we can skip it */
	str_size_to_convert = size - nb_digit_ignored;
 800e674:	eba8 0305 	sub.w	r3, r8, r5

	/* check maximum string size */
	if (str_size_to_convert <= MAX_32BITS_STRING_SIZE) {
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b08      	cmp	r3, #8
 800e67c:	d846      	bhi.n	800e70c <ATutil_convertHexaStringToInt32+0xac>
	uint16_t loop = 0U;
 800e67e:	2400      	movs	r4, #0
 800e680:	eb00 0905 	add.w	r9, r0, r5
		/* convert string to hexa value */
		for (idx = nb_digit_ignored; idx < size; idx++) {
 800e684:	46aa      	mov	sl, r5
	uint32_t conv_nbr = 0U; /* returned value = converted numder (0 if an error occurs) */
 800e686:	4627      	mov	r7, r4
		for (idx = nb_digit_ignored; idx < size; idx++) {
 800e688:	45c2      	cmp	sl, r8
 800e68a:	d304      	bcc.n	800e696 <ATutil_convertHexaStringToInt32+0x36>
			}
		}
	}

	return (conv_nbr);
}
 800e68c:	4638      	mov	r0, r7
 800e68e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nb_digit_ignored = 0U;
 800e692:	2500      	movs	r5, #0
 800e694:	e7ee      	b.n	800e674 <ATutil_convertHexaStringToInt32+0x14>
			if ((p_string[idx] >= 48U) && (p_string[idx] <= 57U)) {
 800e696:	f819 6b01 	ldrb.w	r6, [r9], #1
 800e69a:	f1a6 0b30 	sub.w	fp, r6, #48	; 0x30
 800e69e:	fa5f f38b 	uxtb.w	r3, fp
 800e6a2:	2b09      	cmp	r3, #9
 800e6a4:	d80f      	bhi.n	800e6c6 <ATutil_convertHexaStringToInt32+0x66>
				loop++;
 800e6a6:	3401      	adds	r4, #1
 800e6a8:	b2a4      	uxth	r4, r4
								* ATutil_ipow(16U,
 800e6aa:	eba8 0105 	sub.w	r1, r8, r5
 800e6ae:	1b09      	subs	r1, r1, r4
 800e6b0:	b289      	uxth	r1, r1
 800e6b2:	2010      	movs	r0, #16
 800e6b4:	f7ff ffca 	bl	800e64c <ATutil_ipow>
				conv_nbr = conv_nbr
 800e6b8:	fb00 770b 	mla	r7, r0, fp, r7
		for (idx = nb_digit_ignored; idx < size; idx++) {
 800e6bc:	f10a 0a01 	add.w	sl, sl, #1
 800e6c0:	fa1f fa8a 	uxth.w	sl, sl
 800e6c4:	e7e0      	b.n	800e688 <ATutil_convertHexaStringToInt32+0x28>
			} else if ((p_string[idx] >= 97U) && (p_string[idx] <= 102U)) {
 800e6c6:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800e6ca:	2b05      	cmp	r3, #5
 800e6cc:	d80c      	bhi.n	800e6e8 <ATutil_convertHexaStringToInt32+0x88>
				loop++;
 800e6ce:	3401      	adds	r4, #1
 800e6d0:	b2a4      	uxth	r4, r4
								* ATutil_ipow(16U,
 800e6d2:	eba8 0105 	sub.w	r1, r8, r5
 800e6d6:	1b09      	subs	r1, r1, r4
 800e6d8:	b289      	uxth	r1, r1
 800e6da:	2010      	movs	r0, #16
 800e6dc:	f7ff ffb6 	bl	800e64c <ATutil_ipow>
						+ (((uint32_t) p_string[idx] - 97U + 10U)
 800e6e0:	3e57      	subs	r6, #87	; 0x57
				conv_nbr = conv_nbr
 800e6e2:	fb00 7706 	mla	r7, r0, r6, r7
 800e6e6:	e7e9      	b.n	800e6bc <ATutil_convertHexaStringToInt32+0x5c>
			} else if ((p_string[idx] >= 65U) && (p_string[idx] <= 70U)) {
 800e6e8:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800e6ec:	2b05      	cmp	r3, #5
 800e6ee:	d80a      	bhi.n	800e706 <ATutil_convertHexaStringToInt32+0xa6>
				loop++;
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	b2a4      	uxth	r4, r4
								* ATutil_ipow(16U,
 800e6f4:	eba8 0105 	sub.w	r1, r8, r5
 800e6f8:	1b09      	subs	r1, r1, r4
 800e6fa:	b289      	uxth	r1, r1
 800e6fc:	2010      	movs	r0, #16
 800e6fe:	f7ff ffa5 	bl	800e64c <ATutil_ipow>
						+ (((uint32_t) p_string[idx] - 65U + 10U)
 800e702:	3e37      	subs	r6, #55	; 0x37
 800e704:	e7ed      	b.n	800e6e2 <ATutil_convertHexaStringToInt32+0x82>
				nb_digit_ignored++;
 800e706:	3501      	adds	r5, #1
 800e708:	b2ad      	uxth	r5, r5
 800e70a:	e7d7      	b.n	800e6bc <ATutil_convertHexaStringToInt32+0x5c>
	uint32_t conv_nbr = 0U; /* returned value = converted numder (0 if an error occurs) */
 800e70c:	2700      	movs	r7, #0
	return (conv_nbr);
 800e70e:	e7bd      	b.n	800e68c <ATutil_convertHexaStringToInt32+0x2c>

0800e710 <ATutil_convertStringToInt>:
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e710:	2902      	cmp	r1, #2
uint32_t ATutil_convertStringToInt(const uint8_t *p_string, uint16_t size) {
 800e712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e716:	4604      	mov	r4, r0
 800e718:	4688      	mov	r8, r1
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e71a:	d902      	bls.n	800e722 <ATutil_convertStringToInt+0x12>
 800e71c:	7843      	ldrb	r3, [r0, #1]
 800e71e:	2b78      	cmp	r3, #120	; 0x78
 800e720:	d009      	beq.n	800e736 <ATutil_convertStringToInt+0x26>
uint32_t ATutil_convertStringToInt(const uint8_t *p_string, uint16_t size) {
 800e722:	2700      	movs	r7, #0
 800e724:	eb04 0a08 	add.w	sl, r4, r8
 800e728:	463d      	mov	r5, r7
 800e72a:	46b9      	mov	r9, r7
		for (idx = 0U; idx < size; idx++) {
 800e72c:	45a2      	cmp	sl, r4
 800e72e:	d106      	bne.n	800e73e <ATutil_convertStringToInt+0x2e>
}
 800e730:	4648      	mov	r0, r9
 800e732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conv_nbr = ATutil_convertHexaStringToInt32(p_string, size);
 800e73a:	f7ff bf91 	b.w	800e660 <ATutil_convertHexaStringToInt32>
			if ((p_string[idx] >= 48U) && (p_string[idx] <= 57U)) {
 800e73e:	f814 6b01 	ldrb.w	r6, [r4], #1
 800e742:	3e30      	subs	r6, #48	; 0x30
 800e744:	b2f3      	uxtb	r3, r6
 800e746:	2b09      	cmp	r3, #9
 800e748:	d80b      	bhi.n	800e762 <ATutil_convertStringToInt+0x52>
				loop++;
 800e74a:	3701      	adds	r7, #1
 800e74c:	b2bf      	uxth	r7, r7
								* ATutil_ipow(10U,
 800e74e:	eba8 0305 	sub.w	r3, r8, r5
 800e752:	1bdb      	subs	r3, r3, r7
 800e754:	b299      	uxth	r1, r3
 800e756:	200a      	movs	r0, #10
 800e758:	f7ff ff78 	bl	800e64c <ATutil_ipow>
				conv_nbr = conv_nbr
 800e75c:	fb00 9906 	mla	r9, r0, r6, r9
 800e760:	e7e4      	b.n	800e72c <ATutil_convertStringToInt+0x1c>
				nb_digit_ignored++;
 800e762:	3501      	adds	r5, #1
 800e764:	b2ad      	uxth	r5, r5
		for (idx = 0U; idx < size; idx++) {
 800e766:	e7e1      	b.n	800e72c <ATutil_convertStringToInt+0x1c>

0800e768 <ATutil_convertHexaStringToInt64>:

uint8_t ATutil_convertHexaStringToInt64(const uint8_t *p_string, uint16_t size,
		uint32_t *high_part_value, uint32_t *low_part_value) {
 800e768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* init decoded values */
	*high_part_value = 0U;
	*low_part_value = 0U;

	/* auto-detect if 0x is present */
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e76c:	2902      	cmp	r1, #2
	*high_part_value = 0U;
 800e76e:	f04f 0500 	mov.w	r5, #0
 800e772:	6015      	str	r5, [r2, #0]
		uint32_t *high_part_value, uint32_t *low_part_value) {
 800e774:	4606      	mov	r6, r0
 800e776:	4691      	mov	r9, r2
 800e778:	461f      	mov	r7, r3
	*low_part_value = 0U;
 800e77a:	601d      	str	r5, [r3, #0]
	if ((size > 2U) && (p_string[1] == 120U)) /* ASCII value 120 = 'x' */
 800e77c:	d920      	bls.n	800e7c0 <ATutil_convertHexaStringToInt64+0x58>
 800e77e:	7843      	ldrb	r3, [r0, #1]
 800e780:	2b78      	cmp	r3, #120	; 0x78
	{
		/* 0x is present */
		nb_digit_ignored = 2U;
 800e782:	bf14      	ite	ne
 800e784:	46a8      	movne	r8, r5
 800e786:	f04f 0802 	moveq.w	r8, #2
		/* 0x is not present */
		nb_digit_ignored = 0U;
	}

	/* if 0x is present, we can skip it */
	str_size_to_convert = size - nb_digit_ignored;
 800e78a:	eba1 0108 	sub.w	r1, r1, r8
 800e78e:	b28c      	uxth	r4, r1

	/* check maximum string size */
	if (str_size_to_convert > MAX_64BITS_STRING_SIZE) {
 800e790:	2c10      	cmp	r4, #16
 800e792:	d819      	bhi.n	800e7c8 <ATutil_convertHexaStringToInt64+0x60>
		/* conversion error */
		retval = 0U;
	} else {
		if (str_size_to_convert > 8U) {
 800e794:	2c08      	cmp	r4, #8
 800e796:	d915      	bls.n	800e7c4 <ATutil_convertHexaStringToInt64+0x5c>
			high_part_size = str_size_to_convert - 8U;
 800e798:	f1a4 0008 	sub.w	r0, r4, #8
 800e79c:	b285      	uxth	r5, r0
			/* convert upper part if exists */
			*high_part_value = ATutil_convertHexaStringToInt32(
 800e79e:	4629      	mov	r1, r5
 800e7a0:	eb06 0008 	add.w	r0, r6, r8
 800e7a4:	f7ff ff5c 	bl	800e660 <ATutil_convertHexaStringToInt32>
 800e7a8:	f8c9 0000 	str.w	r0, [r9]
		} else {
			high_part_size = 0U;
		}

		/* convert lower part */
		low_part_size = str_size_to_convert - high_part_size;
 800e7ac:	1b64      	subs	r4, r4, r5
		*low_part_value = ATutil_convertHexaStringToInt32(
				(const uint8_t*) (p_string + nb_digit_ignored + high_part_size),
 800e7ae:	4445      	add	r5, r8
		*low_part_value = ATutil_convertHexaStringToInt32(
 800e7b0:	b2a1      	uxth	r1, r4
 800e7b2:	1970      	adds	r0, r6, r5
 800e7b4:	f7ff ff54 	bl	800e660 <ATutil_convertHexaStringToInt32>
 800e7b8:	6038      	str	r0, [r7, #0]
				low_part_size);

		/* string successfully converted */
		retval = 1U;
 800e7ba:	2001      	movs	r0, #1
	}

	return (retval);
}
 800e7bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		nb_digit_ignored = 0U;
 800e7c0:	46a8      	mov	r8, r5
 800e7c2:	e7e2      	b.n	800e78a <ATutil_convertHexaStringToInt64+0x22>
			high_part_size = 0U;
 800e7c4:	2500      	movs	r5, #0
 800e7c6:	e7f1      	b.n	800e7ac <ATutil_convertHexaStringToInt64+0x44>
		retval = 0U;
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	e7f7      	b.n	800e7bc <ATutil_convertHexaStringToInt64+0x54>

0800e7cc <ATutil_convertBinStringToInt32>:

uint32_t ATutil_convertBinStringToInt32(const uint8_t *p_string, uint16_t size) {
 800e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t conv_nbr = 0U; /* returned value = converted numder (returns 0 if an error occurs) */

	for (uint16_t i = 0; i < size; i++) {
 800e7ce:	2400      	movs	r4, #0
uint32_t ATutil_convertBinStringToInt32(const uint8_t *p_string, uint16_t size) {
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	1846      	adds	r6, r0, r1
	uint32_t conv_nbr = 0U; /* returned value = converted numder (returns 0 if an error occurs) */
 800e7d4:	4627      	mov	r7, r4
	for (uint16_t i = 0; i < size; i++) {
 800e7d6:	42ac      	cmp	r4, r5
 800e7d8:	b2a1      	uxth	r1, r4
 800e7da:	d101      	bne.n	800e7e0 <ATutil_convertBinStringToInt32+0x14>
		uint32_t weight = ATutil_ipow(2U, i);
		conv_nbr += bit * weight;
	}

	return (conv_nbr);
}
 800e7dc:	4638      	mov	r0, r7
 800e7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t weight = ATutil_ipow(2U, i);
 800e7e0:	2002      	movs	r0, #2
 800e7e2:	f7ff ff33 	bl	800e64c <ATutil_ipow>
		uint32_t bit = (p_string[size - i - 1U] == 0x31U) ? 1U : 0U;
 800e7e6:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 800e7ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e7ee:	4253      	negs	r3, r2
 800e7f0:	4153      	adcs	r3, r2
		conv_nbr += bit * weight;
 800e7f2:	fb00 7703 	mla	r7, r0, r3, r7
	for (uint16_t i = 0; i < size; i++) {
 800e7f6:	3401      	adds	r4, #1
 800e7f8:	e7ed      	b.n	800e7d6 <ATutil_convertBinStringToInt32+0xa>

0800e7fa <ATutil_convertStringToUpperCase>:
	return (isneg);
}

void ATutil_convertStringToUpperCase(uint8_t *p_string, uint16_t size) {
	uint16_t idx = 0U;
	while ((p_string[idx] != 0U) && (idx < size)) {
 800e7fa:	1e42      	subs	r2, r0, #1
 800e7fc:	4401      	add	r1, r0
 800e7fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e802:	b10b      	cbz	r3, 800e808 <ATutil_convertStringToUpperCase+0xe>
 800e804:	428a      	cmp	r2, r1
 800e806:	d100      	bne.n	800e80a <ATutil_convertStringToUpperCase+0x10>
			/* ...convert it to uppercase character */
			p_string[idx] -= 32U;
		}
		idx++;
	}
}
 800e808:	4770      	bx	lr
		if ((p_string[idx] >= 97U) && (p_string[idx] <= 122U)) {
 800e80a:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 800e80e:	2819      	cmp	r0, #25
			p_string[idx] -= 32U;
 800e810:	bf9c      	itt	ls
 800e812:	3b20      	subls	r3, #32
 800e814:	7013      	strbls	r3, [r2, #0]
		idx++;
 800e816:	e7f2      	b.n	800e7fe <ATutil_convertStringToUpperCase+0x4>

0800e818 <ATutil_convert_uint8_to_binary_string>:
uint8_t ATutil_convert_uint8_to_binary_string(uint32_t value, uint8_t nbBits,
		uint8_t sizeStr, uint8_t *binStr) {
	uint8_t retval;

	/* String need to be at least one character more than the number of bits */
	if (sizeStr > nbBits) {
 800e818:	428a      	cmp	r2, r1
		uint8_t sizeStr, uint8_t *binStr) {
 800e81a:	b530      	push	{r4, r5, lr}
	if (sizeStr > nbBits) {
 800e81c:	d910      	bls.n	800e840 <ATutil_convert_uint8_to_binary_string+0x28>
 800e81e:	185d      	adds	r5, r3, r1
 800e820:	2400      	movs	r4, #0
		for (uint8_t i = 0U; i < nbBits; i++) {
 800e822:	b2e2      	uxtb	r2, r4
 800e824:	4291      	cmp	r1, r2
 800e826:	d802      	bhi.n	800e82e <ATutil_convert_uint8_to_binary_string+0x16>
			/* convert to binary string */
			binStr[nbBits - i - 1U] =
					(((value >> i) % 2U) == 0U) ? 0x30U : 0x31U;
		}
		/* set end string character */
		binStr[nbBits] = 0U;
 800e828:	2000      	movs	r0, #0
 800e82a:	5458      	strb	r0, [r3, r1]
	} else {
		retval = 1U;
	}

	return (retval);
}
 800e82c:	bd30      	pop	{r4, r5, pc}
					(((value >> i) % 2U) == 0U) ? 0x30U : 0x31U;
 800e82e:	fa20 f204 	lsr.w	r2, r0, r4
 800e832:	f002 0201 	and.w	r2, r2, #1
			binStr[nbBits - i - 1U] =
 800e836:	3230      	adds	r2, #48	; 0x30
 800e838:	f805 2d01 	strb.w	r2, [r5, #-1]!
		for (uint8_t i = 0U; i < nbBits; i++) {
 800e83c:	3401      	adds	r4, #1
 800e83e:	e7f0      	b.n	800e822 <ATutil_convert_uint8_to_binary_string+0xa>
		retval = 1U;
 800e840:	2001      	movs	r0, #1
 800e842:	e7f3      	b.n	800e82c <ATutil_convert_uint8_to_binary_string+0x14>

0800e844 <ATutil_remove_quotes>:
 * @param  p_Dst ptr to Destination Buffer (string without quotes)
 * @param  dstSize of p_Dst buffer
 * @retval size of destination string (util part).
 */
uint16_t ATutil_remove_quotes(const uint8_t *p_Src, uint16_t srcSize,
		uint8_t *p_Dst, uint16_t dstSize) {
 800e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e846:	4617      	mov	r7, r2
 800e848:	4604      	mov	r4, r0
 800e84a:	460d      	mov	r5, r1
	uint16_t src_idx;
	uint16_t dest_idx = 0U;

	/* reset p_Dst buffer */
	(void) memset((void*) p_Dst, 0, dstSize);
 800e84c:	461a      	mov	r2, r3
 800e84e:	2100      	movs	r1, #0
 800e850:	4638      	mov	r0, r7
		uint8_t *p_Dst, uint16_t dstSize) {
 800e852:	461e      	mov	r6, r3
 800e854:	4425      	add	r5, r4
	(void) memset((void*) p_Dst, 0, dstSize);
 800e856:	f00e faff 	bl	801ce58 <memset>
	uint16_t dest_idx = 0U;
 800e85a:	2000      	movs	r0, #0

	/* parse p_Src */
	for (src_idx = 0; ((src_idx < srcSize) && (dest_idx < dstSize));
 800e85c:	42ac      	cmp	r4, r5
 800e85e:	d001      	beq.n	800e864 <ATutil_remove_quotes+0x20>
 800e860:	42b0      	cmp	r0, r6
 800e862:	d300      	bcc.n	800e866 <ATutil_remove_quotes+0x22>
			dest_idx++;
		}
	}

	return (dest_idx);
}
 800e864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (p_Src[src_idx] != 0x22U) {
 800e866:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e86a:	2b22      	cmp	r3, #34	; 0x22
			p_Dst[dest_idx] = p_Src[src_idx];
 800e86c:	bf1e      	ittt	ne
 800e86e:	543b      	strbne	r3, [r7, r0]
			dest_idx++;
 800e870:	3001      	addne	r0, #1
 800e872:	b280      	uxthne	r0, r0
			src_idx++) {
 800e874:	e7f2      	b.n	800e85c <ATutil_remove_quotes+0x18>

0800e876 <ATutil_extract_hex_value_from_quotes>:

/*
 * Extract the value of an hexadecimal parameter from a string
 */
uint32_t ATutil_extract_hex_value_from_quotes(const uint8_t *p_str,
		uint16_t str_size, uint8_t param_size) {
 800e876:	b530      	push	{r4, r5, lr}
	uint32_t converted_value;
	if (str_size <= MAX_PARAM_SIZE) {
 800e878:	2920      	cmp	r1, #32
		uint16_t str_size, uint8_t param_size) {
 800e87a:	460c      	mov	r4, r1
 800e87c:	b08b      	sub	sp, #44	; 0x2c
 800e87e:	4605      	mov	r5, r0
 800e880:	f04f 0100 	mov.w	r1, #0
	if (str_size <= MAX_PARAM_SIZE) {
 800e884:	d811      	bhi.n	800e8aa <ATutil_extract_hex_value_from_quotes+0x34>
		uint8_t tmp_array[MAX_PARAM_SIZE] = { 0 };
 800e886:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e88a:	a803      	add	r0, sp, #12
 800e88c:	221c      	movs	r2, #28
 800e88e:	f00e fae3 	bl	801ce58 <memset>
		uint16_t real_size;
		real_size = ATutil_remove_quotes(p_str, str_size, &tmp_array[0],
 800e892:	4621      	mov	r1, r4
 800e894:	9b01      	ldr	r3, [sp, #4]
 800e896:	aa02      	add	r2, sp, #8
 800e898:	4628      	mov	r0, r5
 800e89a:	f7ff ffd3 	bl	800e844 <ATutil_remove_quotes>
 800e89e:	4601      	mov	r1, r0
				param_size);
		converted_value = ATutil_convertHexaStringToInt32(&tmp_array[0],
 800e8a0:	a802      	add	r0, sp, #8
 800e8a2:	f7ff fedd 	bl	800e660 <ATutil_convertHexaStringToInt32>
				real_size);
	} else {
		converted_value = 0U;
	}
	return (converted_value);
}
 800e8a6:	b00b      	add	sp, #44	; 0x2c
 800e8a8:	bd30      	pop	{r4, r5, pc}
		converted_value = 0U;
 800e8aa:	4608      	mov	r0, r1
	return (converted_value);
 800e8ac:	e7fb      	b.n	800e8a6 <ATutil_extract_hex_value_from_quotes+0x30>

0800e8ae <ATutil_extract_bin_value_from_quotes>:

/*
 * Extract the value of an binary parameter from a string
 */
uint32_t ATutil_extract_bin_value_from_quotes(const uint8_t *p_str,
		uint16_t str_size, uint8_t param_size) {
 800e8ae:	b530      	push	{r4, r5, lr}
	uint32_t converted_value;
	if (str_size <= MAX_PARAM_SIZE) {
 800e8b0:	2920      	cmp	r1, #32
		uint16_t str_size, uint8_t param_size) {
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	b08b      	sub	sp, #44	; 0x2c
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	f04f 0100 	mov.w	r1, #0
	if (str_size <= MAX_PARAM_SIZE) {
 800e8bc:	d811      	bhi.n	800e8e2 <ATutil_extract_bin_value_from_quotes+0x34>
		uint8_t tmp_array[MAX_PARAM_SIZE] = { 0 };
 800e8be:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e8c2:	a803      	add	r0, sp, #12
 800e8c4:	221c      	movs	r2, #28
 800e8c6:	f00e fac7 	bl	801ce58 <memset>
		uint16_t real_size;
		real_size = ATutil_remove_quotes(p_str, str_size, &tmp_array[0],
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	9b01      	ldr	r3, [sp, #4]
 800e8ce:	aa02      	add	r2, sp, #8
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f7ff ffb7 	bl	800e844 <ATutil_remove_quotes>
 800e8d6:	4601      	mov	r1, r0
				param_size);
		converted_value = ATutil_convertBinStringToInt32(&tmp_array[0],
 800e8d8:	a802      	add	r0, sp, #8
 800e8da:	f7ff ff77 	bl	800e7cc <ATutil_convertBinStringToInt32>
				real_size);
	} else {
		converted_value = 0U;
	}
	return (converted_value);
}
 800e8de:	b00b      	add	sp, #44	; 0x2c
 800e8e0:	bd30      	pop	{r4, r5, pc}
		converted_value = 0U;
 800e8e2:	4608      	mov	r0, r1
	return (converted_value);
 800e8e4:	e7fb      	b.n	800e8de <ATutil_extract_bin_value_from_quotes+0x30>
	...

0800e8e8 <ATutil_convert_T3412_to_seconds>:
	/* Bits 1 to 5 represent timer value
	 * Bits 6 to 8 represent timer unit
	 *
	 * unit part is encoded on 3 bits and will always be < 8 (ie the size of AT_T3412_UNIT_COEFF)
	 */
	uint32_t unit_part = (0x000000E0U & encoded_value) >> 5;
 800e8e8:	f3c0 1242 	ubfx	r2, r0, #5, #3
	uint32_t value_part = (0x0000001FU & encoded_value);

	decode_value = value_part * AT_T3412_UNIT_COEFF[unit_part];
 800e8ec:	4b03      	ldr	r3, [pc, #12]	; (800e8fc <ATutil_convert_T3412_to_seconds+0x14>)
 800e8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	uint32_t value_part = (0x0000001FU & encoded_value);
 800e8f2:	f000 001f 	and.w	r0, r0, #31

	return (decode_value);
}
 800e8f6:	4358      	muls	r0, r3
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	0802706c 	.word	0x0802706c

0800e900 <ATutil_convert_T3324_to_seconds>:
	/* Bits 1 to 5 represent timer value
	 * Bits 6 to 8 represent timer unit
	 *
	 * unit part is encoded on 3 bits and will always be < 8 (ie the size of AT_T3412_UNIT_COEFF)
	 */
	uint32_t unit_part = (0x000000E0U & encoded_value) >> 5;
 800e900:	f3c0 1242 	ubfx	r2, r0, #5, #3
	uint32_t value_part = (0x0000001FU & encoded_value);
	decode_value = value_part * AT_T3324_UNIT_COEFF[unit_part];
 800e904:	4b03      	ldr	r3, [pc, #12]	; (800e914 <ATutil_convert_T3324_to_seconds+0x14>)
 800e906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	uint32_t value_part = (0x0000001FU & encoded_value);
 800e90a:	f000 001f 	and.w	r0, r0, #31

	return (decode_value);
}
 800e90e:	4358      	muls	r0, r3
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	0802704c 	.word	0x0802704c

0800e918 <SysCtrl_getDeviceDescriptor>:
 * @param  device_type
 * @param  p_devices_list
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_getDeviceDescriptor(sysctrl_device_type_t device_type,
		sysctrl_info_t *p_devices_list) {
 800e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91c:	4605      	mov	r5, r0
	sysctrl_status_t retval;

	/* check input parameters validity */
	if (p_devices_list == NULL) {
 800e91e:	460e      	mov	r6, r1
 800e920:	b181      	cbz	r1, 800e944 <SysCtrl_getDeviceDescriptor+0x2c>
		retval = SCSTATUS_ERROR;
	} else {
		/* check if device is already initialized */
		if (sysctrl_custom_func[device_type].initialized == 0U) {
 800e922:	4c0a      	ldr	r4, [pc, #40]	; (800e94c <SysCtrl_getDeviceDescriptor+0x34>)
 800e924:	0147      	lsls	r7, r0, #5
 800e926:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 800e92a:	5de2      	ldrb	r2, [r4, r7]
 800e92c:	b91a      	cbnz	r2, 800e936 <SysCtrl_getDeviceDescriptor+0x1e>
			/* Init SysCtrl functions pointers */
			(void) atcma_init_sysctrl_func_ptrs(
 800e92e:	f7f3 f971 	bl	8001c14 <atcma_init_sysctrl_func_ptrs>
					&sysctrl_custom_func[device_type]);

			/* device is initialized now */
			sysctrl_custom_func[device_type].initialized = 1U;
 800e932:	2301      	movs	r3, #1
 800e934:	55e3      	strb	r3, [r4, r7]
		}
		retval = (*sysctrl_custom_func[device_type].f_getDeviceDescriptor)(
 800e936:	19e3      	adds	r3, r4, r7
 800e938:	4631      	mov	r1, r6
 800e93a:	4628      	mov	r0, r5
 800e93c:	685b      	ldr	r3, [r3, #4]
				device_type, p_devices_list);
	}

	return (retval);
}
 800e93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = (*sysctrl_custom_func[device_type].f_getDeviceDescriptor)(
 800e942:	4718      	bx	r3
}
 800e944:	2001      	movs	r0, #1
 800e946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e94a:	bf00      	nop
 800e94c:	20003564 	.word	0x20003564

0800e950 <SysCtrl_open_channel>:
/**
 * @brief  SysCtrl_open_channel
 * @param  device_type
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_open_channel(sysctrl_device_type_t device_type) {
 800e950:	b510      	push	{r4, lr}
	sysctrl_status_t retval = SCSTATUS_ERROR;

	/* check if device is initialized */
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800e952:	4b12      	ldr	r3, [pc, #72]	; (800e99c <SysCtrl_open_channel+0x4c>)
 800e954:	0144      	lsls	r4, r0, #5
 800e956:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 800e95a:	5d1b      	ldrb	r3, [r3, r4]
 800e95c:	2b01      	cmp	r3, #1
sysctrl_status_t SysCtrl_open_channel(sysctrl_device_type_t device_type) {
 800e95e:	4602      	mov	r2, r0
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800e960:	d103      	bne.n	800e96a <SysCtrl_open_channel+0x1a>
	} else {
		PRINT_ERR("Device type %d is not initialized", device_type)
	}

	return (retval);
}
 800e962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = (*sysctrl_custom_func[device_type].f_open_channel)(
 800e966:	688b      	ldr	r3, [r1, #8]
 800e968:	4718      	bx	r3
		PRINT_ERR("Device type %d is not initialized", device_type)
 800e96a:	490d      	ldr	r1, [pc, #52]	; (800e9a0 <SysCtrl_open_channel+0x50>)
 800e96c:	480d      	ldr	r0, [pc, #52]	; (800e9a4 <SysCtrl_open_channel+0x54>)
 800e96e:	f00e faa3 	bl	801ceb8 <sprintf>
 800e972:	480c      	ldr	r0, [pc, #48]	; (800e9a4 <SysCtrl_open_channel+0x54>)
 800e974:	f009 fade 	bl	8017f34 <crs_strlen>
 800e978:	4a0a      	ldr	r2, [pc, #40]	; (800e9a4 <SysCtrl_open_channel+0x54>)
 800e97a:	b283      	uxth	r3, r0
 800e97c:	2110      	movs	r1, #16
 800e97e:	2001      	movs	r0, #1
 800e980:	f009 fb16 	bl	8017fb0 <traceIF_itmPrint>
 800e984:	4807      	ldr	r0, [pc, #28]	; (800e9a4 <SysCtrl_open_channel+0x54>)
 800e986:	f009 fad5 	bl	8017f34 <crs_strlen>
 800e98a:	4a06      	ldr	r2, [pc, #24]	; (800e9a4 <SysCtrl_open_channel+0x54>)
 800e98c:	b283      	uxth	r3, r0
 800e98e:	2110      	movs	r1, #16
 800e990:	2001      	movs	r0, #1
 800e992:	f009 fd33 	bl	80183fc <traceIF_uartPrint>
}
 800e996:	2001      	movs	r0, #1
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	bf00      	nop
 800e99c:	20003564 	.word	0x20003564
 800e9a0:	0802708c 	.word	0x0802708c
 800e9a4:	20008ef8 	.word	0x20008ef8

0800e9a8 <SysCtrl_close_channel>:
/**
 * @brief  SysCtrl_close_channel
 * @param  device_type
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_close_channel(sysctrl_device_type_t device_type) {
 800e9a8:	b510      	push	{r4, lr}
	sysctrl_status_t retval = SCSTATUS_ERROR;

	/* check if device is initialized */
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800e9aa:	4b12      	ldr	r3, [pc, #72]	; (800e9f4 <SysCtrl_close_channel+0x4c>)
 800e9ac:	0144      	lsls	r4, r0, #5
 800e9ae:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 800e9b2:	5d1b      	ldrb	r3, [r3, r4]
 800e9b4:	2b01      	cmp	r3, #1
sysctrl_status_t SysCtrl_close_channel(sysctrl_device_type_t device_type) {
 800e9b6:	4602      	mov	r2, r0
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800e9b8:	d103      	bne.n	800e9c2 <SysCtrl_close_channel+0x1a>
	} else {
		PRINT_ERR("Device type %d is not initialized", device_type)
	}

	return (retval);
}
 800e9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = (*sysctrl_custom_func[device_type].f_close_channel)(
 800e9be:	68cb      	ldr	r3, [r1, #12]
 800e9c0:	4718      	bx	r3
		PRINT_ERR("Device type %d is not initialized", device_type)
 800e9c2:	490d      	ldr	r1, [pc, #52]	; (800e9f8 <SysCtrl_close_channel+0x50>)
 800e9c4:	480d      	ldr	r0, [pc, #52]	; (800e9fc <SysCtrl_close_channel+0x54>)
 800e9c6:	f00e fa77 	bl	801ceb8 <sprintf>
 800e9ca:	480c      	ldr	r0, [pc, #48]	; (800e9fc <SysCtrl_close_channel+0x54>)
 800e9cc:	f009 fab2 	bl	8017f34 <crs_strlen>
 800e9d0:	4a0a      	ldr	r2, [pc, #40]	; (800e9fc <SysCtrl_close_channel+0x54>)
 800e9d2:	b283      	uxth	r3, r0
 800e9d4:	2110      	movs	r1, #16
 800e9d6:	2001      	movs	r0, #1
 800e9d8:	f009 faea 	bl	8017fb0 <traceIF_itmPrint>
 800e9dc:	4807      	ldr	r0, [pc, #28]	; (800e9fc <SysCtrl_close_channel+0x54>)
 800e9de:	f009 faa9 	bl	8017f34 <crs_strlen>
 800e9e2:	4a06      	ldr	r2, [pc, #24]	; (800e9fc <SysCtrl_close_channel+0x54>)
 800e9e4:	b283      	uxth	r3, r0
 800e9e6:	2110      	movs	r1, #16
 800e9e8:	2001      	movs	r0, #1
 800e9ea:	f009 fd07 	bl	80183fc <traceIF_uartPrint>
}
 800e9ee:	2001      	movs	r0, #1
 800e9f0:	bd10      	pop	{r4, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20003564 	.word	0x20003564
 800e9f8:	0802708c 	.word	0x0802708c
 800e9fc:	20008ef8 	.word	0x20008ef8

0800ea00 <SysCtrl_power_on>:
/**
 * @brief  SysCtrl_power_on
 * @param  device_type
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_power_on(sysctrl_device_type_t device_type) {
 800ea00:	b510      	push	{r4, lr}
	sysctrl_status_t retval = SCSTATUS_ERROR;

	/* check if device is initialized */
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <SysCtrl_power_on+0x4c>)
 800ea04:	0144      	lsls	r4, r0, #5
 800ea06:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 800ea0a:	5d1b      	ldrb	r3, [r3, r4]
 800ea0c:	2b01      	cmp	r3, #1
sysctrl_status_t SysCtrl_power_on(sysctrl_device_type_t device_type) {
 800ea0e:	4602      	mov	r2, r0
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800ea10:	d103      	bne.n	800ea1a <SysCtrl_power_on+0x1a>
	} else {
		PRINT_ERR("Device type %d is not initialized", device_type)
	}

	return (retval);
}
 800ea12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = (*sysctrl_custom_func[device_type].f_power_on)(device_type);
 800ea16:	690b      	ldr	r3, [r1, #16]
 800ea18:	4718      	bx	r3
		PRINT_ERR("Device type %d is not initialized", device_type)
 800ea1a:	490d      	ldr	r1, [pc, #52]	; (800ea50 <SysCtrl_power_on+0x50>)
 800ea1c:	480d      	ldr	r0, [pc, #52]	; (800ea54 <SysCtrl_power_on+0x54>)
 800ea1e:	f00e fa4b 	bl	801ceb8 <sprintf>
 800ea22:	480c      	ldr	r0, [pc, #48]	; (800ea54 <SysCtrl_power_on+0x54>)
 800ea24:	f009 fa86 	bl	8017f34 <crs_strlen>
 800ea28:	4a0a      	ldr	r2, [pc, #40]	; (800ea54 <SysCtrl_power_on+0x54>)
 800ea2a:	b283      	uxth	r3, r0
 800ea2c:	2110      	movs	r1, #16
 800ea2e:	2001      	movs	r0, #1
 800ea30:	f009 fabe 	bl	8017fb0 <traceIF_itmPrint>
 800ea34:	4807      	ldr	r0, [pc, #28]	; (800ea54 <SysCtrl_power_on+0x54>)
 800ea36:	f009 fa7d 	bl	8017f34 <crs_strlen>
 800ea3a:	4a06      	ldr	r2, [pc, #24]	; (800ea54 <SysCtrl_power_on+0x54>)
 800ea3c:	b283      	uxth	r3, r0
 800ea3e:	2110      	movs	r1, #16
 800ea40:	2001      	movs	r0, #1
 800ea42:	f009 fcdb 	bl	80183fc <traceIF_uartPrint>
}
 800ea46:	2001      	movs	r0, #1
 800ea48:	bd10      	pop	{r4, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20003564 	.word	0x20003564
 800ea50:	0802708c 	.word	0x0802708c
 800ea54:	20008ef8 	.word	0x20008ef8

0800ea58 <SysCtrl_power_off>:
/**
 * @brief  SysCtrl_power_off
 * @param  device_type
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_power_off(sysctrl_device_type_t device_type) {
 800ea58:	b510      	push	{r4, lr}
	sysctrl_status_t retval = SCSTATUS_ERROR;

	/* check if device is initialized */
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800ea5a:	4b12      	ldr	r3, [pc, #72]	; (800eaa4 <SysCtrl_power_off+0x4c>)
 800ea5c:	0144      	lsls	r4, r0, #5
 800ea5e:	eb03 1140 	add.w	r1, r3, r0, lsl #5
 800ea62:	5d1b      	ldrb	r3, [r3, r4]
 800ea64:	2b01      	cmp	r3, #1
sysctrl_status_t SysCtrl_power_off(sysctrl_device_type_t device_type) {
 800ea66:	4602      	mov	r2, r0
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800ea68:	d103      	bne.n	800ea72 <SysCtrl_power_off+0x1a>
	} else {
		PRINT_ERR("Device type %d is not initialized", device_type)
	}

	return (retval);
}
 800ea6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		retval = (*sysctrl_custom_func[device_type].f_power_off)(device_type);
 800ea6e:	694b      	ldr	r3, [r1, #20]
 800ea70:	4718      	bx	r3
		PRINT_ERR("Device type %d is not initialized", device_type)
 800ea72:	490d      	ldr	r1, [pc, #52]	; (800eaa8 <SysCtrl_power_off+0x50>)
 800ea74:	480d      	ldr	r0, [pc, #52]	; (800eaac <SysCtrl_power_off+0x54>)
 800ea76:	f00e fa1f 	bl	801ceb8 <sprintf>
 800ea7a:	480c      	ldr	r0, [pc, #48]	; (800eaac <SysCtrl_power_off+0x54>)
 800ea7c:	f009 fa5a 	bl	8017f34 <crs_strlen>
 800ea80:	4a0a      	ldr	r2, [pc, #40]	; (800eaac <SysCtrl_power_off+0x54>)
 800ea82:	b283      	uxth	r3, r0
 800ea84:	2110      	movs	r1, #16
 800ea86:	2001      	movs	r0, #1
 800ea88:	f009 fa92 	bl	8017fb0 <traceIF_itmPrint>
 800ea8c:	4807      	ldr	r0, [pc, #28]	; (800eaac <SysCtrl_power_off+0x54>)
 800ea8e:	f009 fa51 	bl	8017f34 <crs_strlen>
 800ea92:	4a06      	ldr	r2, [pc, #24]	; (800eaac <SysCtrl_power_off+0x54>)
 800ea94:	b283      	uxth	r3, r0
 800ea96:	2110      	movs	r1, #16
 800ea98:	2001      	movs	r0, #1
 800ea9a:	f009 fcaf 	bl	80183fc <traceIF_uartPrint>
}
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	bd10      	pop	{r4, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20003564 	.word	0x20003564
 800eaa8:	0802708c 	.word	0x0802708c
 800eaac:	20008ef8 	.word	0x20008ef8

0800eab0 <SysCtrl_sim_select>:
 * @param  device_type
 * @param  sim_slot
 * @retval sysctrl_status_t
 */
sysctrl_status_t SysCtrl_sim_select(sysctrl_device_type_t device_type,
		sysctrl_sim_slot_t sim_slot) {
 800eab0:	b570      	push	{r4, r5, r6, lr}
	sysctrl_status_t retval = SCSTATUS_ERROR;

	/* check if device is initialized */
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800eab2:	4b12      	ldr	r3, [pc, #72]	; (800eafc <SysCtrl_sim_select+0x4c>)
 800eab4:	0145      	lsls	r5, r0, #5
 800eab6:	eb03 1440 	add.w	r4, r3, r0, lsl #5
 800eaba:	5d5b      	ldrb	r3, [r3, r5]
 800eabc:	2b01      	cmp	r3, #1
		sysctrl_sim_slot_t sim_slot) {
 800eabe:	4602      	mov	r2, r0
	if (sysctrl_custom_func[device_type].initialized == 1U) {
 800eac0:	d103      	bne.n	800eaca <SysCtrl_sim_select+0x1a>
		retval = (*sysctrl_custom_func[device_type].f_sim_select)(device_type,
 800eac2:	69e3      	ldr	r3, [r4, #28]
	} else {
		PRINT_ERR("Device type %d is not initialized", device_type)
	}

	return (retval);
}
 800eac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		retval = (*sysctrl_custom_func[device_type].f_sim_select)(device_type,
 800eac8:	4718      	bx	r3
		PRINT_ERR("Device type %d is not initialized", device_type)
 800eaca:	490d      	ldr	r1, [pc, #52]	; (800eb00 <SysCtrl_sim_select+0x50>)
 800eacc:	480d      	ldr	r0, [pc, #52]	; (800eb04 <SysCtrl_sim_select+0x54>)
 800eace:	f00e f9f3 	bl	801ceb8 <sprintf>
 800ead2:	480c      	ldr	r0, [pc, #48]	; (800eb04 <SysCtrl_sim_select+0x54>)
 800ead4:	f009 fa2e 	bl	8017f34 <crs_strlen>
 800ead8:	4a0a      	ldr	r2, [pc, #40]	; (800eb04 <SysCtrl_sim_select+0x54>)
 800eada:	b283      	uxth	r3, r0
 800eadc:	2110      	movs	r1, #16
 800eade:	2001      	movs	r0, #1
 800eae0:	f009 fa66 	bl	8017fb0 <traceIF_itmPrint>
 800eae4:	4807      	ldr	r0, [pc, #28]	; (800eb04 <SysCtrl_sim_select+0x54>)
 800eae6:	f009 fa25 	bl	8017f34 <crs_strlen>
 800eaea:	4a06      	ldr	r2, [pc, #24]	; (800eb04 <SysCtrl_sim_select+0x54>)
 800eaec:	b283      	uxth	r3, r0
 800eaee:	2110      	movs	r1, #16
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	f009 fc83 	bl	80183fc <traceIF_uartPrint>
}
 800eaf6:	2001      	movs	r0, #1
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	bf00      	nop
 800eafc:	20003564 	.word	0x20003564
 800eb00:	0802708c 	.word	0x0802708c
 800eb04:	20008ef8 	.word	0x20008ef8

0800eb08 <SysCtrl_delay>:
 * @brief  SysCtrl_delay
 * @param  timeMs
 * @retval none
 */
void SysCtrl_delay(uint32_t timeMs) {
	if (timeMs != 0U) {
 800eb08:	b108      	cbz	r0, 800eb0e <SysCtrl_delay+0x6>
		(void) rtosalDelay(timeMs);
 800eb0a:	f009 b990 	b.w	8017e2e <rtosalDelay>
	}
}
 800eb0e:	4770      	bx	lr

0800eb10 <CELLULAR_reset_context>:
	return (retval);
}

static void CELLULAR_reset_context(void) {
	/* init cs_ctxt_urc_subscription */
	cs_ctxt_urc_subscription.eps_network_registration = CELLULAR_FALSE;
 800eb10:	4a0d      	ldr	r2, [pc, #52]	; (800eb48 <CELLULAR_reset_context+0x38>)
 800eb12:	2300      	movs	r3, #0
 800eb14:	7013      	strb	r3, [r2, #0]
	cs_ctxt_urc_subscription.gprs_network_registration = CELLULAR_FALSE;
 800eb16:	7053      	strb	r3, [r2, #1]
	cs_ctxt_urc_subscription.cs_network_registration = CELLULAR_FALSE;
 800eb18:	7093      	strb	r3, [r2, #2]
	cs_ctxt_urc_subscription.eps_location_info = CELLULAR_FALSE;
 800eb1a:	70d3      	strb	r3, [r2, #3]
	cs_ctxt_urc_subscription.gprs_location_info = CELLULAR_FALSE;
 800eb1c:	7113      	strb	r3, [r2, #4]
	cs_ctxt_urc_subscription.cs_location_info = CELLULAR_FALSE;
 800eb1e:	7153      	strb	r3, [r2, #5]
	cs_ctxt_urc_subscription.signal_quality = CELLULAR_FALSE;
 800eb20:	7193      	strb	r3, [r2, #6]
	cs_ctxt_urc_subscription.packet_domain_event = CELLULAR_FALSE;
 800eb22:	71d3      	strb	r3, [r2, #7]
	cs_ctxt_urc_subscription.ping_rsp = CELLULAR_FALSE;
 800eb24:	7213      	strb	r3, [r2, #8]

	/* init cs_ctxt_eps_location_info */
	cs_ctxt_eps_location_info.ci = 0U;
 800eb26:	4a09      	ldr	r2, [pc, #36]	; (800eb4c <CELLULAR_reset_context+0x3c>)
	cs_ctxt_eps_location_info.lac = 0U;
 800eb28:	e9c2 3300 	strd	r3, r3, [r2]
	cs_ctxt_eps_location_info.ci_updated = CELLULAR_FALSE;
	cs_ctxt_eps_location_info.lac_updated = CELLULAR_FALSE;

	/* init cs_ctxt_gprs_location_info */
	cs_ctxt_gprs_location_info.ci = 0U;
 800eb2c:	4a08      	ldr	r2, [pc, #32]	; (800eb50 <CELLULAR_reset_context+0x40>)
	cs_ctxt_gprs_location_info.lac = 0U;
 800eb2e:	e9c2 3300 	strd	r3, r3, [r2]
	cs_ctxt_gprs_location_info.ci_updated = CELLULAR_FALSE;
	cs_ctxt_gprs_location_info.lac_updated = CELLULAR_FALSE;

	/* init cs_ctxt_cs_location_info */
	cs_ctxt_cs_location_info.ci = 0U;
 800eb32:	4a08      	ldr	r2, [pc, #32]	; (800eb54 <CELLULAR_reset_context+0x44>)
	cs_ctxt_cs_location_info.lac = 0U;
 800eb34:	e9c2 3300 	strd	r3, r3, [r2]
	cs_ctxt_cs_location_info.ci_updated = CELLULAR_FALSE;
	cs_ctxt_cs_location_info.lac_updated = CELLULAR_FALSE;

	/* init network states */
	cs_ctxt_eps_network_reg_state = CS_NRS_UNKNOWN;
 800eb38:	4a07      	ldr	r2, [pc, #28]	; (800eb58 <CELLULAR_reset_context+0x48>)
 800eb3a:	2304      	movs	r3, #4
 800eb3c:	8013      	strh	r3, [r2, #0]
	cs_ctxt_gprs_network_reg_state = CS_NRS_UNKNOWN;
 800eb3e:	4a07      	ldr	r2, [pc, #28]	; (800eb5c <CELLULAR_reset_context+0x4c>)
 800eb40:	8013      	strh	r3, [r2, #0]
	cs_ctxt_cs_network_reg_state = CS_NRS_UNKNOWN;
 800eb42:	4a07      	ldr	r2, [pc, #28]	; (800eb60 <CELLULAR_reset_context+0x50>)
 800eb44:	8013      	strh	r3, [r2, #0]
}
 800eb46:	4770      	bx	lr
 800eb48:	2000376c 	.word	0x2000376c
 800eb4c:	20003714 	.word	0x20003714
 800eb50:	2000371c 	.word	0x2000371c
 800eb54:	20003608 	.word	0x20003608
 800eb58:	2000021e 	.word	0x2000021e
 800eb5c:	20000220 	.word	0x20000220
 800eb60:	2000021c 	.word	0x2000021c

0800eb64 <convert_to_PDN_event.isra.0>:
}

static CS_PDN_event_t convert_to_PDN_event(csint_PDN_event_desc_t event_desc) {
	CS_PDN_event_t ret = CS_PDN_EVENT_OTHER;

	if ((event_desc.event_origine == CGEV_EVENT_ORIGINE_NW)
 800eb64:	2801      	cmp	r0, #1
 800eb66:	d10f      	bne.n	800eb88 <convert_to_PDN_event.isra.0+0x24>
			&& (event_desc.event_scope == CGEV_EVENT_SCOPE_GLOBAL)
 800eb68:	290b      	cmp	r1, #11
 800eb6a:	d106      	bne.n	800eb7a <convert_to_PDN_event.isra.0+0x16>
			&& (event_desc.event_type == CGEV_EVENT_TYPE_DETACH)) {
 800eb6c:	2a0f      	cmp	r2, #15
 800eb6e:	d00c      	beq.n	800eb8a <convert_to_PDN_event.isra.0+0x26>
		ret = CS_PDN_EVENT_NW_DETACH;
	} else if ((event_desc.event_origine == CGEV_EVENT_ORIGINE_NW)
			&& (event_desc.event_scope == CGEV_EVENT_SCOPE_GLOBAL)
			&& (event_desc.event_type == CGEV_EVENT_TYPE_DEACTIVATION)) {
		ret = CS_PDN_EVENT_NW_DEACT;
 800eb70:	2a0d      	cmp	r2, #13
 800eb72:	bf14      	ite	ne
 800eb74:	2000      	movne	r0, #0
 800eb76:	2002      	moveq	r0, #2
 800eb78:	4770      	bx	lr
	} else if ((event_desc.event_origine == CGEV_EVENT_ORIGINE_NW)
			&& (event_desc.event_scope == CGEV_EVENT_SCOPE_PDN)
 800eb7a:	290a      	cmp	r1, #10
 800eb7c:	d104      	bne.n	800eb88 <convert_to_PDN_event.isra.0+0x24>
			&& (event_desc.event_type == CGEV_EVENT_TYPE_DEACTIVATION)) {
		ret = CS_PDN_EVENT_NW_PDN_DEACT;
 800eb7e:	2a0d      	cmp	r2, #13
 800eb80:	bf14      	ite	ne
 800eb82:	2000      	movne	r0, #0
 800eb84:	2003      	moveq	r0, #3
 800eb86:	4770      	bx	lr
	CS_PDN_event_t ret = CS_PDN_EVENT_OTHER;
 800eb88:	2000      	movs	r0, #0
	} else {
		/* ignored */
	}

	return (ret);
}
 800eb8a:	4770      	bx	lr

0800eb8c <CELLULAR_urc_notif>:
static void CELLULAR_urc_notif(at_buf_t *p_rsp_buf) {
 800eb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	PRINT_API("<Cellular_Service> CELLULAR_urc_notif")
 800eb8e:	498e      	ldr	r1, [pc, #568]	; (800edc8 <CELLULAR_urc_notif+0x23c>)
static void CELLULAR_urc_notif(at_buf_t *p_rsp_buf) {
 800eb90:	b0a5      	sub	sp, #148	; 0x94
 800eb92:	4604      	mov	r4, r0
	PRINT_API("<Cellular_Service> CELLULAR_urc_notif")
 800eb94:	488d      	ldr	r0, [pc, #564]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800eb96:	f00e f9ff 	bl	801cf98 <strcpy>
 800eb9a:	488c      	ldr	r0, [pc, #560]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800eb9c:	f009 f9ca 	bl	8017f34 <crs_strlen>
 800eba0:	4a8a      	ldr	r2, [pc, #552]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800eba2:	b283      	uxth	r3, r0
 800eba4:	2104      	movs	r1, #4
 800eba6:	2000      	movs	r0, #0
 800eba8:	f009 fa02 	bl	8017fb0 <traceIF_itmPrint>
 800ebac:	4887      	ldr	r0, [pc, #540]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ebae:	f009 f9c1 	bl	8017f34 <crs_strlen>
 800ebb2:	2104      	movs	r1, #4
 800ebb4:	b283      	uxth	r3, r0
 800ebb6:	4a85      	ldr	r2, [pc, #532]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ebb8:	2000      	movs	r0, #0
 800ebba:	f009 fc1f 	bl	80183fc <traceIF_uartPrint>
	msgtype = DATAPACK_readMsgType(p_rsp_buf);
 800ebbe:	4620      	mov	r0, r4
 800ebc0:	f7f9 fa64 	bl	800808c <DATAPACK_readMsgType>
	if ((msgtype == (uint16_t) CSMT_URC_EPS_NETWORK_REGISTRATION_STATUS)
 800ebc4:	2805      	cmp	r0, #5
	msgtype = DATAPACK_readMsgType(p_rsp_buf);
 800ebc6:	4601      	mov	r1, r0
	if ((msgtype == (uint16_t) CSMT_URC_EPS_NETWORK_REGISTRATION_STATUS)
 800ebc8:	d144      	bne.n	800ec54 <CELLULAR_urc_notif+0xc8>
			&& (cs_ctxt_urc_subscription.eps_network_registration
 800ebca:	4b81      	ldr	r3, [pc, #516]	; (800edd0 <CELLULAR_urc_notif+0x244>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 8385 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	ab10      	add	r3, sp, #64	; 0x40
 800ebd8:	2202      	movs	r2, #2
 800ebda:	f7f9 fa25 	bl	8008028 <DATAPACK_readStruct>
 800ebde:	4604      	mov	r4, r0
 800ebe0:	bb10      	cbnz	r0, 800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_state != cs_ctxt_eps_network_reg_state) {
 800ebe2:	4d7c      	ldr	r5, [pc, #496]	; (800edd4 <CELLULAR_urc_notif+0x248>)
 800ebe4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ebe8:	882b      	ldrh	r3, [r5, #0]
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d01e      	beq.n	800ec2c <CELLULAR_urc_notif+0xa0>
				PRINT_DBG(
 800ebee:	497a      	ldr	r1, [pc, #488]	; (800edd8 <CELLULAR_urc_notif+0x24c>)
 800ebf0:	4876      	ldr	r0, [pc, #472]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ebf2:	f00e f961 	bl	801ceb8 <sprintf>
 800ebf6:	4875      	ldr	r0, [pc, #468]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ebf8:	f009 f99c 	bl	8017f34 <crs_strlen>
 800ebfc:	4a73      	ldr	r2, [pc, #460]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ebfe:	b283      	uxth	r3, r0
 800ec00:	2102      	movs	r1, #2
 800ec02:	4620      	mov	r0, r4
 800ec04:	f009 f9d4 	bl	8017fb0 <traceIF_itmPrint>
 800ec08:	4870      	ldr	r0, [pc, #448]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec0a:	f009 f993 	bl	8017f34 <crs_strlen>
 800ec0e:	4a6f      	ldr	r2, [pc, #444]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec10:	b283      	uxth	r3, r0
 800ec12:	2102      	movs	r1, #2
 800ec14:	4620      	mov	r0, r4
 800ec16:	f009 fbf1 	bl	80183fc <traceIF_uartPrint>
				cs_ctxt_eps_network_reg_state = rx_state;
 800ec1a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ec1e:	802b      	strh	r3, [r5, #0]
				if (urc_eps_network_registration_callback != NULL) {
 800ec20:	4b6e      	ldr	r3, [pc, #440]	; (800eddc <CELLULAR_urc_notif+0x250>)
				if (urc_cs_network_registration_callback != NULL) {
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	b103      	cbz	r3, 800ec28 <CELLULAR_urc_notif+0x9c>
					(*urc_eps_location_info_callback)();
 800ec26:	4798      	blx	r3
}
 800ec28:	b025      	add	sp, #148	; 0x94
 800ec2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				PRINT_DBG(
 800ec2c:	496c      	ldr	r1, [pc, #432]	; (800ede0 <CELLULAR_urc_notif+0x254>)
				PRINT_DBG(
 800ec2e:	4867      	ldr	r0, [pc, #412]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec30:	f00e f9b2 	bl	801cf98 <strcpy>
		PRINT_DBG("ignore received URC (type=%d)", msgtype)
 800ec34:	4865      	ldr	r0, [pc, #404]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec36:	f009 f97d 	bl	8017f34 <crs_strlen>
 800ec3a:	4a64      	ldr	r2, [pc, #400]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec3c:	b283      	uxth	r3, r0
 800ec3e:	2102      	movs	r1, #2
 800ec40:	2000      	movs	r0, #0
 800ec42:	f009 f9b5 	bl	8017fb0 <traceIF_itmPrint>
 800ec46:	4861      	ldr	r0, [pc, #388]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec48:	f009 f974 	bl	8017f34 <crs_strlen>
 800ec4c:	4a5f      	ldr	r2, [pc, #380]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec4e:	b283      	uxth	r3, r0
 800ec50:	2102      	movs	r1, #2
 800ec52:	e224      	b.n	800f09e <CELLULAR_urc_notif+0x512>
	else if ((msgtype == (uint16_t) CSMT_URC_GPRS_NETWORK_REGISTRATION_STATUS)
 800ec54:	2807      	cmp	r0, #7
 800ec56:	d12f      	bne.n	800ecb8 <CELLULAR_urc_notif+0x12c>
			&& (cs_ctxt_urc_subscription.gprs_network_registration
 800ec58:	4b5d      	ldr	r3, [pc, #372]	; (800edd0 <CELLULAR_urc_notif+0x244>)
 800ec5a:	785b      	ldrb	r3, [r3, #1]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 833e 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ec62:	4620      	mov	r0, r4
 800ec64:	ab10      	add	r3, sp, #64	; 0x40
 800ec66:	2202      	movs	r2, #2
 800ec68:	f7f9 f9de 	bl	8008028 <DATAPACK_readStruct>
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	d1da      	bne.n	800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_state != cs_ctxt_gprs_network_reg_state) {
 800ec72:	4d5c      	ldr	r5, [pc, #368]	; (800ede4 <CELLULAR_urc_notif+0x258>)
 800ec74:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ec78:	882b      	ldrh	r3, [r5, #0]
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d01a      	beq.n	800ecb4 <CELLULAR_urc_notif+0x128>
				PRINT_DBG(
 800ec7e:	495a      	ldr	r1, [pc, #360]	; (800ede8 <CELLULAR_urc_notif+0x25c>)
 800ec80:	4852      	ldr	r0, [pc, #328]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec82:	f00e f919 	bl	801ceb8 <sprintf>
 800ec86:	4851      	ldr	r0, [pc, #324]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec88:	f009 f954 	bl	8017f34 <crs_strlen>
 800ec8c:	4a4f      	ldr	r2, [pc, #316]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec8e:	b283      	uxth	r3, r0
 800ec90:	2102      	movs	r1, #2
 800ec92:	4620      	mov	r0, r4
 800ec94:	f009 f98c 	bl	8017fb0 <traceIF_itmPrint>
 800ec98:	484c      	ldr	r0, [pc, #304]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ec9a:	f009 f94b 	bl	8017f34 <crs_strlen>
 800ec9e:	4a4b      	ldr	r2, [pc, #300]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800eca0:	b283      	uxth	r3, r0
 800eca2:	2102      	movs	r1, #2
 800eca4:	4620      	mov	r0, r4
 800eca6:	f009 fba9 	bl	80183fc <traceIF_uartPrint>
				cs_ctxt_gprs_network_reg_state = rx_state;
 800ecaa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ecae:	802b      	strh	r3, [r5, #0]
				if (urc_gprs_network_registration_callback != NULL) {
 800ecb0:	4b4e      	ldr	r3, [pc, #312]	; (800edec <CELLULAR_urc_notif+0x260>)
 800ecb2:	e7b6      	b.n	800ec22 <CELLULAR_urc_notif+0x96>
				PRINT_DBG(
 800ecb4:	494e      	ldr	r1, [pc, #312]	; (800edf0 <CELLULAR_urc_notif+0x264>)
 800ecb6:	e7ba      	b.n	800ec2e <CELLULAR_urc_notif+0xa2>
	else if ((msgtype == (uint16_t) CSMT_URC_CS_NETWORK_REGISTRATION_STATUS)
 800ecb8:	2809      	cmp	r0, #9
 800ecba:	d12f      	bne.n	800ed1c <CELLULAR_urc_notif+0x190>
			&& (cs_ctxt_urc_subscription.cs_network_registration
 800ecbc:	4b44      	ldr	r3, [pc, #272]	; (800edd0 <CELLULAR_urc_notif+0x244>)
 800ecbe:	789b      	ldrb	r3, [r3, #2]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 830c 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	ab10      	add	r3, sp, #64	; 0x40
 800ecca:	2202      	movs	r2, #2
 800eccc:	f7f9 f9ac 	bl	8008028 <DATAPACK_readStruct>
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d1a8      	bne.n	800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_state != cs_ctxt_cs_network_reg_state) {
 800ecd6:	4d47      	ldr	r5, [pc, #284]	; (800edf4 <CELLULAR_urc_notif+0x268>)
 800ecd8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ecdc:	882b      	ldrh	r3, [r5, #0]
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d01a      	beq.n	800ed18 <CELLULAR_urc_notif+0x18c>
				PRINT_DBG(
 800ece2:	4945      	ldr	r1, [pc, #276]	; (800edf8 <CELLULAR_urc_notif+0x26c>)
 800ece4:	4839      	ldr	r0, [pc, #228]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ece6:	f00e f8e7 	bl	801ceb8 <sprintf>
 800ecea:	4838      	ldr	r0, [pc, #224]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ecec:	f009 f922 	bl	8017f34 <crs_strlen>
 800ecf0:	4a36      	ldr	r2, [pc, #216]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ecf2:	b283      	uxth	r3, r0
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f009 f95a 	bl	8017fb0 <traceIF_itmPrint>
 800ecfc:	4833      	ldr	r0, [pc, #204]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ecfe:	f009 f919 	bl	8017f34 <crs_strlen>
 800ed02:	4a32      	ldr	r2, [pc, #200]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ed04:	b283      	uxth	r3, r0
 800ed06:	2102      	movs	r1, #2
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f009 fb77 	bl	80183fc <traceIF_uartPrint>
				cs_ctxt_cs_network_reg_state = rx_state;
 800ed0e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ed12:	802b      	strh	r3, [r5, #0]
				if (urc_cs_network_registration_callback != NULL) {
 800ed14:	4b39      	ldr	r3, [pc, #228]	; (800edfc <CELLULAR_urc_notif+0x270>)
 800ed16:	e784      	b.n	800ec22 <CELLULAR_urc_notif+0x96>
				PRINT_DBG(
 800ed18:	4939      	ldr	r1, [pc, #228]	; (800ee00 <CELLULAR_urc_notif+0x274>)
 800ed1a:	e788      	b.n	800ec2e <CELLULAR_urc_notif+0xa2>
	else if ((msgtype == (uint16_t) CSMT_URC_EPS_LOCATION_INFO)
 800ed1c:	2806      	cmp	r0, #6
 800ed1e:	d179      	bne.n	800ee14 <CELLULAR_urc_notif+0x288>
			&& (cs_ctxt_urc_subscription.eps_location_info == CELLULAR_TRUE)) {
 800ed20:	4b2b      	ldr	r3, [pc, #172]	; (800edd0 <CELLULAR_urc_notif+0x244>)
 800ed22:	78db      	ldrb	r3, [r3, #3]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 82da 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ed2a:	ab10      	add	r3, sp, #64	; 0x40
 800ed2c:	2208      	movs	r2, #8
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7f9 f97a 	bl	8008028 <DATAPACK_readStruct>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	f47f af77 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_loc.ci_updated == CELLULAR_TRUE) {
 800ed3a:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 800ed3e:	b164      	cbz	r4, 800ed5a <CELLULAR_urc_notif+0x1ce>
				if (rx_loc.ci != cs_ctxt_eps_location_info.ci) {
 800ed40:	4b30      	ldr	r3, [pc, #192]	; (800ee04 <CELLULAR_urc_notif+0x278>)
 800ed42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ed44:	6819      	ldr	r1, [r3, #0]
 800ed46:	428a      	cmp	r2, r1
					cs_ctxt_eps_location_info.ci = rx_loc.ci;
 800ed48:	bf18      	it	ne
 800ed4a:	601a      	strne	r2, [r3, #0]
				if (cs_ctxt_eps_location_info.ci_updated == CELLULAR_FALSE) {
 800ed4c:	799a      	ldrb	r2, [r3, #6]
					loc_update = CELLULAR_TRUE;
 800ed4e:	bf18      	it	ne
 800ed50:	4620      	movne	r0, r4
				if (cs_ctxt_eps_location_info.ci_updated == CELLULAR_FALSE) {
 800ed52:	2a00      	cmp	r2, #0
 800ed54:	d131      	bne.n	800edba <CELLULAR_urc_notif+0x22e>
					cs_ctxt_eps_location_info.ci_updated = CELLULAR_TRUE;
 800ed56:	2201      	movs	r2, #1
 800ed58:	719a      	strb	r2, [r3, #6]
			if (rx_loc.lac_updated == CELLULAR_TRUE) {
 800ed5a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800ed5e:	b372      	cbz	r2, 800edbe <CELLULAR_urc_notif+0x232>
				if (rx_loc.lac != cs_ctxt_eps_location_info.lac) {
 800ed60:	4b28      	ldr	r3, [pc, #160]	; (800ee04 <CELLULAR_urc_notif+0x278>)
 800ed62:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800ed66:	8898      	ldrh	r0, [r3, #4]
 800ed68:	4288      	cmp	r0, r1
					loc_update = CELLULAR_TRUE;
 800ed6a:	bf18      	it	ne
 800ed6c:	4614      	movne	r4, r2
				if (cs_ctxt_eps_location_info.lac_updated == CELLULAR_FALSE) {
 800ed6e:	79da      	ldrb	r2, [r3, #7]
					cs_ctxt_eps_location_info.lac = rx_loc.lac;
 800ed70:	bf18      	it	ne
 800ed72:	8099      	strhne	r1, [r3, #4]
				if (cs_ctxt_eps_location_info.lac_updated == CELLULAR_FALSE) {
 800ed74:	bb1a      	cbnz	r2, 800edbe <CELLULAR_urc_notif+0x232>
					cs_ctxt_eps_location_info.lac_updated = CELLULAR_TRUE;
 800ed76:	2201      	movs	r2, #1
 800ed78:	71da      	strb	r2, [r3, #7]
				if (urc_eps_location_info_callback != NULL) {
 800ed7a:	4c23      	ldr	r4, [pc, #140]	; (800ee08 <CELLULAR_urc_notif+0x27c>)
 800ed7c:	6823      	ldr	r3, [r4, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f43f af52 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
					PRINT_DBG(
 800ed84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed86:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800ed8a:	4920      	ldr	r1, [pc, #128]	; (800ee0c <CELLULAR_urc_notif+0x280>)
 800ed8c:	480f      	ldr	r0, [pc, #60]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ed8e:	f00e f893 	bl	801ceb8 <sprintf>
 800ed92:	480e      	ldr	r0, [pc, #56]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ed94:	f009 f8ce 	bl	8017f34 <crs_strlen>
 800ed98:	4a0c      	ldr	r2, [pc, #48]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800ed9a:	b283      	uxth	r3, r0
 800ed9c:	2102      	movs	r1, #2
 800ed9e:	2000      	movs	r0, #0
 800eda0:	f009 f906 	bl	8017fb0 <traceIF_itmPrint>
 800eda4:	4809      	ldr	r0, [pc, #36]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800eda6:	f009 f8c5 	bl	8017f34 <crs_strlen>
 800edaa:	4a08      	ldr	r2, [pc, #32]	; (800edcc <CELLULAR_urc_notif+0x240>)
 800edac:	b283      	uxth	r3, r0
 800edae:	2102      	movs	r1, #2
 800edb0:	2000      	movs	r0, #0
 800edb2:	f009 fb23 	bl	80183fc <traceIF_uartPrint>
					(*urc_eps_location_info_callback)();
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	e735      	b.n	800ec26 <CELLULAR_urc_notif+0x9a>
 800edba:	4604      	mov	r4, r0
 800edbc:	e7cd      	b.n	800ed5a <CELLULAR_urc_notif+0x1ce>
			if (loc_update == CELLULAR_TRUE) {
 800edbe:	2c00      	cmp	r4, #0
 800edc0:	d1db      	bne.n	800ed7a <CELLULAR_urc_notif+0x1ee>
				PRINT_DBG(
 800edc2:	4913      	ldr	r1, [pc, #76]	; (800ee10 <CELLULAR_urc_notif+0x284>)
 800edc4:	e733      	b.n	800ec2e <CELLULAR_urc_notif+0xa2>
 800edc6:	bf00      	nop
 800edc8:	080270be 	.word	0x080270be
 800edcc:	20008df8 	.word	0x20008df8
 800edd0:	2000376c 	.word	0x2000376c
 800edd4:	2000021e 	.word	0x2000021e
 800edd8:	080270ed 	.word	0x080270ed
 800eddc:	20003808 	.word	0x20003808
 800ede0:	0802712a 	.word	0x0802712a
 800ede4:	20000220 	.word	0x20000220
 800ede8:	08027165 	.word	0x08027165
 800edec:	20003810 	.word	0x20003810
 800edf0:	080271a3 	.word	0x080271a3
 800edf4:	2000021c 	.word	0x2000021c
 800edf8:	080271df 	.word	0x080271df
 800edfc:	20003800 	.word	0x20003800
 800ee00:	0802721b 	.word	0x0802721b
 800ee04:	20003714 	.word	0x20003714
 800ee08:	20003804 	.word	0x20003804
 800ee0c:	08027255 	.word	0x08027255
 800ee10:	080272a3 	.word	0x080272a3
	else if ((msgtype == (uint16_t) CSMT_URC_GPRS_LOCATION_INFO)
 800ee14:	2808      	cmp	r0, #8
 800ee16:	d13b      	bne.n	800ee90 <CELLULAR_urc_notif+0x304>
			&& (cs_ctxt_urc_subscription.gprs_location_info == CELLULAR_TRUE)) {
 800ee18:	4ba3      	ldr	r3, [pc, #652]	; (800f0a8 <CELLULAR_urc_notif+0x51c>)
 800ee1a:	791b      	ldrb	r3, [r3, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f000 825e 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ee22:	4602      	mov	r2, r0
 800ee24:	ab10      	add	r3, sp, #64	; 0x40
 800ee26:	4620      	mov	r0, r4
 800ee28:	f7f9 f8fe 	bl	8008028 <DATAPACK_readStruct>
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	f47f aefb 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_loc.ci_updated == CELLULAR_TRUE) {
 800ee32:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 800ee36:	b15c      	cbz	r4, 800ee50 <CELLULAR_urc_notif+0x2c4>
				if (rx_loc.ci != cs_ctxt_gprs_location_info.ci) {
 800ee38:	4b9c      	ldr	r3, [pc, #624]	; (800f0ac <CELLULAR_urc_notif+0x520>)
 800ee3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee3c:	6819      	ldr	r1, [r3, #0]
 800ee3e:	428a      	cmp	r2, r1
					cs_ctxt_gprs_location_info.ci = rx_loc.ci;
 800ee40:	bf18      	it	ne
 800ee42:	601a      	strne	r2, [r3, #0]
				if (cs_ctxt_gprs_location_info.ci_updated == CELLULAR_FALSE) {
 800ee44:	799a      	ldrb	r2, [r3, #6]
					loc_update = CELLULAR_TRUE;
 800ee46:	bf18      	it	ne
 800ee48:	4620      	movne	r0, r4
				if (cs_ctxt_gprs_location_info.ci_updated == CELLULAR_FALSE) {
 800ee4a:	b9da      	cbnz	r2, 800ee84 <CELLULAR_urc_notif+0x2f8>
					cs_ctxt_gprs_location_info.ci_updated = CELLULAR_TRUE;
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	719a      	strb	r2, [r3, #6]
			if (rx_loc.lac_updated == CELLULAR_TRUE) {
 800ee50:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800ee54:	b1c2      	cbz	r2, 800ee88 <CELLULAR_urc_notif+0x2fc>
				if (rx_loc.lac != cs_ctxt_gprs_location_info.lac) {
 800ee56:	4b95      	ldr	r3, [pc, #596]	; (800f0ac <CELLULAR_urc_notif+0x520>)
 800ee58:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800ee5c:	8898      	ldrh	r0, [r3, #4]
 800ee5e:	4288      	cmp	r0, r1
					loc_update = CELLULAR_TRUE;
 800ee60:	bf18      	it	ne
 800ee62:	4614      	movne	r4, r2
				if (cs_ctxt_gprs_location_info.lac_updated == CELLULAR_FALSE) {
 800ee64:	79da      	ldrb	r2, [r3, #7]
					cs_ctxt_gprs_location_info.lac = rx_loc.lac;
 800ee66:	bf18      	it	ne
 800ee68:	8099      	strhne	r1, [r3, #4]
				if (cs_ctxt_gprs_location_info.lac_updated == CELLULAR_FALSE) {
 800ee6a:	b96a      	cbnz	r2, 800ee88 <CELLULAR_urc_notif+0x2fc>
					cs_ctxt_gprs_location_info.lac_updated = CELLULAR_TRUE;
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	71da      	strb	r2, [r3, #7]
				if (urc_gprs_location_info_callback != NULL) {
 800ee70:	4c8f      	ldr	r4, [pc, #572]	; (800f0b0 <CELLULAR_urc_notif+0x524>)
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f43f aed7 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
					PRINT_DBG(
 800ee7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee7c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800ee80:	498c      	ldr	r1, [pc, #560]	; (800f0b4 <CELLULAR_urc_notif+0x528>)
 800ee82:	e783      	b.n	800ed8c <CELLULAR_urc_notif+0x200>
 800ee84:	4604      	mov	r4, r0
 800ee86:	e7e3      	b.n	800ee50 <CELLULAR_urc_notif+0x2c4>
			if (loc_update == CELLULAR_TRUE) {
 800ee88:	2c00      	cmp	r4, #0
 800ee8a:	d1f1      	bne.n	800ee70 <CELLULAR_urc_notif+0x2e4>
				PRINT_DBG(
 800ee8c:	498a      	ldr	r1, [pc, #552]	; (800f0b8 <CELLULAR_urc_notif+0x52c>)
 800ee8e:	e6ce      	b.n	800ec2e <CELLULAR_urc_notif+0xa2>
	else if ((msgtype == (uint16_t) CSMT_URC_CS_LOCATION_INFO)
 800ee90:	280a      	cmp	r0, #10
 800ee92:	d13b      	bne.n	800ef0c <CELLULAR_urc_notif+0x380>
			&& (cs_ctxt_urc_subscription.cs_location_info == CELLULAR_TRUE)) {
 800ee94:	4b84      	ldr	r3, [pc, #528]	; (800f0a8 <CELLULAR_urc_notif+0x51c>)
 800ee96:	795b      	ldrb	r3, [r3, #5]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 8220 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_CS_LOCATION_INFO,
 800ee9e:	ab10      	add	r3, sp, #64	; 0x40
 800eea0:	2208      	movs	r2, #8
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7f9 f8c0 	bl	8008028 <DATAPACK_readStruct>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	f47f aebd 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (rx_loc.ci_updated == CELLULAR_TRUE) {
 800eeae:	f89d 4046 	ldrb.w	r4, [sp, #70]	; 0x46
 800eeb2:	b15c      	cbz	r4, 800eecc <CELLULAR_urc_notif+0x340>
				if (rx_loc.ci != cs_ctxt_cs_location_info.ci) {
 800eeb4:	4b81      	ldr	r3, [pc, #516]	; (800f0bc <CELLULAR_urc_notif+0x530>)
 800eeb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eeb8:	6819      	ldr	r1, [r3, #0]
 800eeba:	428a      	cmp	r2, r1
				if (cs_ctxt_cs_location_info.ci_updated == CELLULAR_FALSE) {
 800eebc:	7999      	ldrb	r1, [r3, #6]
					cs_ctxt_cs_location_info.ci = rx_loc.ci;
 800eebe:	bf16      	itet	ne
 800eec0:	601a      	strne	r2, [r3, #0]
		CS_Bool_t loc_update = CELLULAR_FALSE;
 800eec2:	2200      	moveq	r2, #0
					loc_update = CELLULAR_TRUE;
 800eec4:	4622      	movne	r2, r4
				if (cs_ctxt_cs_location_info.ci_updated == CELLULAR_FALSE) {
 800eec6:	b9d9      	cbnz	r1, 800ef00 <CELLULAR_urc_notif+0x374>
					cs_ctxt_cs_location_info.ci_updated = CELLULAR_TRUE;
 800eec8:	2201      	movs	r2, #1
 800eeca:	719a      	strb	r2, [r3, #6]
			if (rx_loc.lac_updated == CELLULAR_TRUE) {
 800eecc:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800eed0:	b1c2      	cbz	r2, 800ef04 <CELLULAR_urc_notif+0x378>
				if (rx_loc.lac != cs_ctxt_cs_location_info.lac) {
 800eed2:	4b7a      	ldr	r3, [pc, #488]	; (800f0bc <CELLULAR_urc_notif+0x530>)
 800eed4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800eed8:	8898      	ldrh	r0, [r3, #4]
 800eeda:	4288      	cmp	r0, r1
					loc_update = CELLULAR_TRUE;
 800eedc:	bf18      	it	ne
 800eede:	4614      	movne	r4, r2
				if (cs_ctxt_cs_location_info.lac_updated == CELLULAR_FALSE) {
 800eee0:	79da      	ldrb	r2, [r3, #7]
					cs_ctxt_cs_location_info.lac = rx_loc.lac;
 800eee2:	bf18      	it	ne
 800eee4:	8099      	strhne	r1, [r3, #4]
				if (cs_ctxt_cs_location_info.lac_updated == CELLULAR_FALSE) {
 800eee6:	b96a      	cbnz	r2, 800ef04 <CELLULAR_urc_notif+0x378>
					cs_ctxt_cs_location_info.lac_updated = CELLULAR_TRUE;
 800eee8:	2201      	movs	r2, #1
 800eeea:	71da      	strb	r2, [r3, #7]
				if (urc_cs_location_info_callback != NULL) {
 800eeec:	4c74      	ldr	r4, [pc, #464]	; (800f0c0 <CELLULAR_urc_notif+0x534>)
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f43f ae99 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
					PRINT_DBG(
 800eef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eef8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800eefc:	4971      	ldr	r1, [pc, #452]	; (800f0c4 <CELLULAR_urc_notif+0x538>)
 800eefe:	e745      	b.n	800ed8c <CELLULAR_urc_notif+0x200>
 800ef00:	4614      	mov	r4, r2
 800ef02:	e7e3      	b.n	800eecc <CELLULAR_urc_notif+0x340>
			if (loc_update == CELLULAR_TRUE) {
 800ef04:	2c00      	cmp	r4, #0
 800ef06:	d1f1      	bne.n	800eeec <CELLULAR_urc_notif+0x360>
				PRINT_DBG(
 800ef08:	496f      	ldr	r1, [pc, #444]	; (800f0c8 <CELLULAR_urc_notif+0x53c>)
 800ef0a:	e690      	b.n	800ec2e <CELLULAR_urc_notif+0xa2>
	else if ((msgtype == (uint16_t) CSMT_URC_SIGNAL_QUALITY)
 800ef0c:	280b      	cmp	r0, #11
 800ef0e:	d129      	bne.n	800ef64 <CELLULAR_urc_notif+0x3d8>
			&& (cs_ctxt_urc_subscription.signal_quality == CELLULAR_TRUE)) {
 800ef10:	4b65      	ldr	r3, [pc, #404]	; (800f0a8 <CELLULAR_urc_notif+0x51c>)
 800ef12:	799b      	ldrb	r3, [r3, #6]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 81e2 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_SIGNAL_QUALITY,
 800ef1a:	ab10      	add	r3, sp, #64	; 0x40
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7f9 f882 	bl	8008028 <DATAPACK_readStruct>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	f47f ae7f 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (urc_signal_quality_callback != NULL) {
 800ef2a:	4c68      	ldr	r4, [pc, #416]	; (800f0cc <CELLULAR_urc_notif+0x540>)
 800ef2c:	6822      	ldr	r2, [r4, #0]
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	f43f ae7a 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				PRINT_INFO(
 800ef34:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800ef38:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800ef3c:	4964      	ldr	r1, [pc, #400]	; (800f0d0 <CELLULAR_urc_notif+0x544>)
 800ef3e:	4865      	ldr	r0, [pc, #404]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800ef40:	f00d ffba 	bl	801ceb8 <sprintf>
 800ef44:	4863      	ldr	r0, [pc, #396]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800ef46:	f008 fff5 	bl	8017f34 <crs_strlen>
 800ef4a:	4a62      	ldr	r2, [pc, #392]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800ef4c:	b283      	uxth	r3, r0
 800ef4e:	2101      	movs	r1, #1
 800ef50:	2000      	movs	r0, #0
 800ef52:	f009 f82d 	bl	8017fb0 <traceIF_itmPrint>
 800ef56:	485f      	ldr	r0, [pc, #380]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800ef58:	f008 ffec 	bl	8017f34 <crs_strlen>
 800ef5c:	4a5d      	ldr	r2, [pc, #372]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800ef5e:	b283      	uxth	r3, r0
 800ef60:	2101      	movs	r1, #1
 800ef62:	e725      	b.n	800edb0 <CELLULAR_urc_notif+0x224>
	else if (msgtype == (uint16_t) CSMT_URC_SOCKET_DATA_PENDING) {
 800ef64:	280d      	cmp	r0, #13
 800ef66:	d115      	bne.n	800ef94 <CELLULAR_urc_notif+0x408>
		if (DATAPACK_readStruct(p_rsp_buf,
 800ef68:	ab10      	add	r3, sp, #64	; 0x40
 800ef6a:	2204      	movs	r2, #4
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f7f9 f85b 	bl	8008028 <DATAPACK_readStruct>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f47f ae58 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (sockHandle != CS_INVALID_SOCKET_HANDLE) {
 800ef78:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef7a:	1c42      	adds	r2, r0, #1
 800ef7c:	f43f ae54 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				if (cs_ctxt_sockets_info[sockHandle].socket_data_ready_callback
 800ef80:	4a55      	ldr	r2, [pc, #340]	; (800f0d8 <CELLULAR_urc_notif+0x54c>)
 800ef82:	236c      	movs	r3, #108	; 0x6c
 800ef84:	fb03 2300 	mla	r3, r3, r0, r2
 800ef88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
				if (cs_ctxt_sockets_info[sockHandle].socket_remote_close_callback
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f43f ae4c 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
        (* urc_commdm_event_callback)(comMdmd_event_infos);
 800ef90:	4798      	blx	r3
 800ef92:	e649      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
	else if (msgtype == (uint16_t) CSMT_URC_SOCKET_CLOSED) {
 800ef94:	280e      	cmp	r0, #14
 800ef96:	d111      	bne.n	800efbc <CELLULAR_urc_notif+0x430>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_SOCKET_CLOSED,
 800ef98:	ab10      	add	r3, sp, #64	; 0x40
 800ef9a:	2204      	movs	r2, #4
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f7f9 f843 	bl	8008028 <DATAPACK_readStruct>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	f47f ae40 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			if (sockHandle != CS_INVALID_SOCKET_HANDLE) {
 800efa8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800efaa:	1c43      	adds	r3, r0, #1
 800efac:	f43f ae3c 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				if (cs_ctxt_sockets_info[sockHandle].socket_remote_close_callback
 800efb0:	4a49      	ldr	r2, [pc, #292]	; (800f0d8 <CELLULAR_urc_notif+0x54c>)
 800efb2:	236c      	movs	r3, #108	; 0x6c
 800efb4:	fb03 2300 	mla	r3, r3, r0, r2
 800efb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efba:	e7e6      	b.n	800ef8a <CELLULAR_urc_notif+0x3fe>
	else if ((msgtype == (uint16_t) CSMT_URC_PACKET_DOMAIN_EVENT)
 800efbc:	280c      	cmp	r0, #12
 800efbe:	f040 8093 	bne.w	800f0e8 <CELLULAR_urc_notif+0x55c>
			&& (cs_ctxt_urc_subscription.packet_domain_event == CELLULAR_TRUE)) {
 800efc2:	4b39      	ldr	r3, [pc, #228]	; (800f0a8 <CELLULAR_urc_notif+0x51c>)
 800efc4:	79db      	ldrb	r3, [r3, #7]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 8189 	beq.w	800f2de <CELLULAR_urc_notif+0x752>
		if (DATAPACK_readStruct(p_rsp_buf,
 800efcc:	4620      	mov	r0, r4
 800efce:	ab10      	add	r3, sp, #64	; 0x40
 800efd0:	2204      	movs	r2, #4
 800efd2:	f7f9 f829 	bl	8008028 <DATAPACK_readStruct>
 800efd6:	4604      	mov	r4, r0
 800efd8:	2800      	cmp	r0, #0
 800efda:	f47f ae25 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			PRINT_DBG("PDN event: origine=%d scope=%d type=%d (user cid=%d) ",
 800efde:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800efe8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800efec:	493b      	ldr	r1, [pc, #236]	; (800f0dc <CELLULAR_urc_notif+0x550>)
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	4838      	ldr	r0, [pc, #224]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800eff2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800eff6:	f00d ff5f 	bl	801ceb8 <sprintf>
 800effa:	4836      	ldr	r0, [pc, #216]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800effc:	f008 ff9a 	bl	8017f34 <crs_strlen>
 800f000:	4a34      	ldr	r2, [pc, #208]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f002:	b283      	uxth	r3, r0
 800f004:	2102      	movs	r1, #2
 800f006:	4620      	mov	r0, r4
 800f008:	f008 ffd2 	bl	8017fb0 <traceIF_itmPrint>
 800f00c:	4831      	ldr	r0, [pc, #196]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f00e:	f008 ff91 	bl	8017f34 <crs_strlen>
 800f012:	4a30      	ldr	r2, [pc, #192]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f014:	b283      	uxth	r3, r0
 800f016:	2102      	movs	r1, #2
 800f018:	4620      	mov	r0, r4
 800f01a:	f009 f9ef 	bl	80183fc <traceIF_uartPrint>
			if ((pdn_event.conf_id == CS_PDN_USER_CONFIG_1)
 800f01e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800f022:	2b05      	cmp	r3, #5
 800f024:	d811      	bhi.n	800f04a <CELLULAR_urc_notif+0x4be>
				if (urc_packet_domain_event_callback[pdn_event.conf_id] != NULL) {
 800f026:	4a2e      	ldr	r2, [pc, #184]	; (800f0e0 <CELLULAR_urc_notif+0x554>)
 800f028:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f02c:	2c00      	cmp	r4, #0
 800f02e:	f43f adfb 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
					CS_PDN_event_t conv_pdn_event = convert_to_PDN_event(
 800f032:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 800f036:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800f03a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800f03e:	f7ff fd91 	bl	800eb64 <convert_to_PDN_event.isra.0>
 800f042:	4601      	mov	r1, r0
					(*urc_packet_domain_event_callback[pdn_event.conf_id])(
 800f044:	4618      	mov	r0, r3
 800f046:	47a0      	blx	r4
 800f048:	e5ee      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
			} else if (pdn_event.conf_id == CS_PDN_ALL) {
 800f04a:	2b0d      	cmp	r3, #13
 800f04c:	d114      	bne.n	800f078 <CELLULAR_urc_notif+0x4ec>
				CS_PDN_event_t conv_pdn_event = convert_to_PDN_event(pdn_event);
 800f04e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800f052:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 800f056:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800f05a:	4e21      	ldr	r6, [pc, #132]	; (800f0e0 <CELLULAR_urc_notif+0x554>)
 800f05c:	f7ff fd82 	bl	800eb64 <convert_to_PDN_event.isra.0>
 800f060:	4605      	mov	r5, r0
					if (urc_packet_domain_event_callback[loop] != NULL) {
 800f062:	f856 3b04 	ldr.w	r3, [r6], #4
 800f066:	b113      	cbz	r3, 800f06e <CELLULAR_urc_notif+0x4e2>
						(*urc_packet_domain_event_callback[loop])(pdn_cid,
 800f068:	4629      	mov	r1, r5
 800f06a:	4620      	mov	r0, r4
 800f06c:	4798      	blx	r3
				for (uint8_t loop = 0U; loop < CS_MAX_NB_PDP_CTXT; loop++) {
 800f06e:	3401      	adds	r4, #1
 800f070:	b2e4      	uxtb	r4, r4
 800f072:	2c06      	cmp	r4, #6
 800f074:	d1f5      	bne.n	800f062 <CELLULAR_urc_notif+0x4d6>
 800f076:	e5d7      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
				PRINT_INFO("PDN not identified")
 800f078:	491a      	ldr	r1, [pc, #104]	; (800f0e4 <CELLULAR_urc_notif+0x558>)
 800f07a:	4816      	ldr	r0, [pc, #88]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f07c:	f00d ff8c 	bl	801cf98 <strcpy>
 800f080:	4814      	ldr	r0, [pc, #80]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f082:	f008 ff57 	bl	8017f34 <crs_strlen>
 800f086:	4a13      	ldr	r2, [pc, #76]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f088:	b283      	uxth	r3, r0
 800f08a:	2101      	movs	r1, #1
 800f08c:	4620      	mov	r0, r4
 800f08e:	f008 ff8f 	bl	8017fb0 <traceIF_itmPrint>
 800f092:	4810      	ldr	r0, [pc, #64]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f094:	f008 ff4e 	bl	8017f34 <crs_strlen>
 800f098:	4a0e      	ldr	r2, [pc, #56]	; (800f0d4 <CELLULAR_urc_notif+0x548>)
 800f09a:	b283      	uxth	r3, r0
 800f09c:	2101      	movs	r1, #1
		PRINT_DBG("ignore received URC (type=%d)", msgtype)
 800f09e:	2000      	movs	r0, #0
 800f0a0:	f009 f9ac 	bl	80183fc <traceIF_uartPrint>
}
 800f0a4:	e5c0      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
 800f0a6:	bf00      	nop
 800f0a8:	2000376c 	.word	0x2000376c
 800f0ac:	2000371c 	.word	0x2000371c
 800f0b0:	2000380c 	.word	0x2000380c
 800f0b4:	080272de 	.word	0x080272de
 800f0b8:	0802732d 	.word	0x0802732d
 800f0bc:	20003608 	.word	0x20003608
 800f0c0:	200037fc 	.word	0x200037fc
 800f0c4:	08027369 	.word	0x08027369
 800f0c8:	080273b6 	.word	0x080273b6
 800f0cc:	20003838 	.word	0x20003838
 800f0d0:	080273f0 	.word	0x080273f0
 800f0d4:	20008df8 	.word	0x20008df8
 800f0d8:	20008814 	.word	0x20008814
 800f0dc:	08027438 	.word	0x08027438
 800f0e0:	2000381c 	.word	0x2000381c
 800f0e4:	08027473 	.word	0x08027473
	else if (msgtype == (uint16_t) CSMT_URC_PING_RSP) {
 800f0e8:	2810      	cmp	r0, #16
 800f0ea:	d134      	bne.n	800f156 <CELLULAR_urc_notif+0x5ca>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_PING_RSP,
 800f0ec:	ae10      	add	r6, sp, #64	; 0x40
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	4633      	mov	r3, r6
 800f0f2:	2250      	movs	r2, #80	; 0x50
 800f0f4:	f7f8 ff98 	bl	8008028 <DATAPACK_readStruct>
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f47f ad94 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			PRINT_INFO("ping URC received at CS level")
 800f100:	497a      	ldr	r1, [pc, #488]	; (800f2ec <CELLULAR_urc_notif+0x760>)
 800f102:	487b      	ldr	r0, [pc, #492]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f104:	f00d ff48 	bl	801cf98 <strcpy>
 800f108:	4879      	ldr	r0, [pc, #484]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f10a:	f008 ff13 	bl	8017f34 <crs_strlen>
 800f10e:	4a78      	ldr	r2, [pc, #480]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f110:	b283      	uxth	r3, r0
 800f112:	2101      	movs	r1, #1
 800f114:	4620      	mov	r0, r4
 800f116:	f008 ff4b 	bl	8017fb0 <traceIF_itmPrint>
 800f11a:	4875      	ldr	r0, [pc, #468]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f11c:	f008 ff0a 	bl	8017f34 <crs_strlen>
 800f120:	4a73      	ldr	r2, [pc, #460]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f122:	b283      	uxth	r3, r0
 800f124:	2101      	movs	r1, #1
 800f126:	4620      	mov	r0, r4
 800f128:	f009 f968 	bl	80183fc <traceIF_uartPrint>
			if (urc_ping_rsp_callback != NULL) {
 800f12c:	4b71      	ldr	r3, [pc, #452]	; (800f2f4 <CELLULAR_urc_notif+0x768>)
 800f12e:	681f      	ldr	r7, [r3, #0]
 800f130:	2f00      	cmp	r7, #0
 800f132:	f43f ad79 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				(*urc_ping_rsp_callback)(ping_rsp);
 800f136:	ad14      	add	r5, sp, #80	; 0x50
 800f138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f13a:	466c      	mov	r4, sp
 800f13c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f146:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f14a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f14e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800f152:	47b8      	blx	r7
 800f154:	e568      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
	else if (msgtype == (uint16_t) CSMT_URC_MODEM_EVENT) {
 800f156:	280f      	cmp	r0, #15
 800f158:	d129      	bne.n	800f1ae <CELLULAR_urc_notif+0x622>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_MODEM_EVENT,
 800f15a:	4620      	mov	r0, r4
 800f15c:	ab10      	add	r3, sp, #64	; 0x40
 800f15e:	2202      	movs	r2, #2
 800f160:	f7f8 ff62 	bl	8008028 <DATAPACK_readStruct>
 800f164:	4604      	mov	r4, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	f47f ad5e 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			PRINT_DBG("MODEM events received= 0x%x", modem_events)
 800f16c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800f170:	4961      	ldr	r1, [pc, #388]	; (800f2f8 <CELLULAR_urc_notif+0x76c>)
 800f172:	485f      	ldr	r0, [pc, #380]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f174:	f00d fea0 	bl	801ceb8 <sprintf>
 800f178:	485d      	ldr	r0, [pc, #372]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f17a:	f008 fedb 	bl	8017f34 <crs_strlen>
 800f17e:	4a5c      	ldr	r2, [pc, #368]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f180:	b283      	uxth	r3, r0
 800f182:	2102      	movs	r1, #2
 800f184:	4620      	mov	r0, r4
 800f186:	f008 ff13 	bl	8017fb0 <traceIF_itmPrint>
 800f18a:	4859      	ldr	r0, [pc, #356]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f18c:	f008 fed2 	bl	8017f34 <crs_strlen>
 800f190:	4a57      	ldr	r2, [pc, #348]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f192:	b283      	uxth	r3, r0
 800f194:	2102      	movs	r1, #2
 800f196:	4620      	mov	r0, r4
 800f198:	f009 f930 	bl	80183fc <traceIF_uartPrint>
			if (urc_modem_event_callback != NULL) {
 800f19c:	4b57      	ldr	r3, [pc, #348]	; (800f2fc <CELLULAR_urc_notif+0x770>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f43f ad41 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				(*urc_modem_event_callback)(modem_events);
 800f1a6:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800f1aa:	4798      	blx	r3
 800f1ac:	e53c      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
	else if (msgtype == (uint16_t) CSMT_URC_SIM_EVENT) {
 800f1ae:	2812      	cmp	r0, #18
 800f1b0:	d128      	bne.n	800f204 <CELLULAR_urc_notif+0x678>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_SIM_EVENT,
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	ab10      	add	r3, sp, #64	; 0x40
 800f1b6:	2202      	movs	r2, #2
 800f1b8:	f7f8 ff36 	bl	8008028 <DATAPACK_readStruct>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	f47f ad32 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			PRINT_INFO("MODEM SIM event received= %d", sim_status.event)
 800f1c4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800f1c8:	494d      	ldr	r1, [pc, #308]	; (800f300 <CELLULAR_urc_notif+0x774>)
 800f1ca:	4849      	ldr	r0, [pc, #292]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f1cc:	f00d fe74 	bl	801ceb8 <sprintf>
 800f1d0:	4847      	ldr	r0, [pc, #284]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f1d2:	f008 feaf 	bl	8017f34 <crs_strlen>
 800f1d6:	4a46      	ldr	r2, [pc, #280]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f1d8:	b283      	uxth	r3, r0
 800f1da:	2101      	movs	r1, #1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f008 fee7 	bl	8017fb0 <traceIF_itmPrint>
 800f1e2:	4843      	ldr	r0, [pc, #268]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f1e4:	f008 fea6 	bl	8017f34 <crs_strlen>
 800f1e8:	4a41      	ldr	r2, [pc, #260]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f1ea:	b283      	uxth	r3, r0
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f009 f904 	bl	80183fc <traceIF_uartPrint>
			if (urc_sim_event_callback != NULL) {
 800f1f4:	4b43      	ldr	r3, [pc, #268]	; (800f304 <CELLULAR_urc_notif+0x778>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f43f ad15 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				(*urc_sim_event_callback)(sim_status);
 800f1fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f200:	4798      	blx	r3
 800f202:	e511      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
	else if (msgtype == (uint16_t) CSMT_URC_LP_STATUS_EVENT) {
 800f204:	2811      	cmp	r0, #17
 800f206:	d140      	bne.n	800f28a <CELLULAR_urc_notif+0x6fe>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_URC_LP_STATUS_EVENT,
 800f208:	ad10      	add	r5, sp, #64	; 0x40
 800f20a:	4620      	mov	r0, r4
 800f20c:	462b      	mov	r3, r5
 800f20e:	2208      	movs	r2, #8
 800f210:	f7f8 ff0a 	bl	8008028 <DATAPACK_readStruct>
 800f214:	4604      	mov	r4, r0
 800f216:	2800      	cmp	r0, #0
 800f218:	f47f ad06 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
			PRINT_DBG("negotiated value of T3324 = %ld",
 800f21c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f21e:	493a      	ldr	r1, [pc, #232]	; (800f308 <CELLULAR_urc_notif+0x77c>)
 800f220:	4833      	ldr	r0, [pc, #204]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f222:	f00d fe49 	bl	801ceb8 <sprintf>
 800f226:	4832      	ldr	r0, [pc, #200]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f228:	f008 fe84 	bl	8017f34 <crs_strlen>
 800f22c:	4a30      	ldr	r2, [pc, #192]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f22e:	b283      	uxth	r3, r0
 800f230:	2102      	movs	r1, #2
 800f232:	4620      	mov	r0, r4
 800f234:	f008 febc 	bl	8017fb0 <traceIF_itmPrint>
 800f238:	482d      	ldr	r0, [pc, #180]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f23a:	f008 fe7b 	bl	8017f34 <crs_strlen>
 800f23e:	4a2c      	ldr	r2, [pc, #176]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f240:	b283      	uxth	r3, r0
 800f242:	2102      	movs	r1, #2
 800f244:	4620      	mov	r0, r4
 800f246:	f009 f8d9 	bl	80183fc <traceIF_uartPrint>
			PRINT_DBG("negotiated value of T3412 = %ld",
 800f24a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f24c:	492f      	ldr	r1, [pc, #188]	; (800f30c <CELLULAR_urc_notif+0x780>)
 800f24e:	4828      	ldr	r0, [pc, #160]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f250:	f00d fe32 	bl	801ceb8 <sprintf>
 800f254:	4826      	ldr	r0, [pc, #152]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f256:	f008 fe6d 	bl	8017f34 <crs_strlen>
 800f25a:	4a25      	ldr	r2, [pc, #148]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f25c:	b283      	uxth	r3, r0
 800f25e:	2102      	movs	r1, #2
 800f260:	4620      	mov	r0, r4
 800f262:	f008 fea5 	bl	8017fb0 <traceIF_itmPrint>
 800f266:	4822      	ldr	r0, [pc, #136]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f268:	f008 fe64 	bl	8017f34 <crs_strlen>
 800f26c:	4a20      	ldr	r2, [pc, #128]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f26e:	b283      	uxth	r3, r0
 800f270:	2102      	movs	r1, #2
 800f272:	4620      	mov	r0, r4
 800f274:	f009 f8c2 	bl	80183fc <traceIF_uartPrint>
			if (urc_lp_status_callback != NULL) {
 800f278:	4b25      	ldr	r3, [pc, #148]	; (800f310 <CELLULAR_urc_notif+0x784>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f43f acd3 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
				(*urc_lp_status_callback)(lp_status);
 800f282:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f286:	4798      	blx	r3
 800f288:	e4ce      	b.n	800ec28 <CELLULAR_urc_notif+0x9c>
  else if (msgtype == (uint16_t) CSMT_URC_COMMDM_EVENT)
 800f28a:	2834      	cmp	r0, #52	; 0x34
 800f28c:	d127      	bne.n	800f2de <CELLULAR_urc_notif+0x752>
    comMdmd_event_infos.param1 = 0U;
 800f28e:	2300      	movs	r3, #0
 800f290:	9310      	str	r3, [sp, #64]	; 0x40
    if (DATAPACK_readStruct(p_rsp_buf,
 800f292:	4620      	mov	r0, r4
 800f294:	ab10      	add	r3, sp, #64	; 0x40
 800f296:	2204      	movs	r2, #4
 800f298:	f7f8 fec6 	bl	8008028 <DATAPACK_readStruct>
 800f29c:	4604      	mov	r4, r0
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f47f acc2 	bne.w	800ec28 <CELLULAR_urc_notif+0x9c>
      PRINT_INFO("COMMDM event received")
 800f2a4:	491b      	ldr	r1, [pc, #108]	; (800f314 <CELLULAR_urc_notif+0x788>)
 800f2a6:	4812      	ldr	r0, [pc, #72]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2a8:	f00d fe76 	bl	801cf98 <strcpy>
 800f2ac:	4810      	ldr	r0, [pc, #64]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2ae:	f008 fe41 	bl	8017f34 <crs_strlen>
 800f2b2:	4a0f      	ldr	r2, [pc, #60]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2b4:	b283      	uxth	r3, r0
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f008 fe79 	bl	8017fb0 <traceIF_itmPrint>
 800f2be:	480c      	ldr	r0, [pc, #48]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2c0:	f008 fe38 	bl	8017f34 <crs_strlen>
 800f2c4:	4a0a      	ldr	r2, [pc, #40]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2c6:	b283      	uxth	r3, r0
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	f009 f896 	bl	80183fc <traceIF_uartPrint>
      if (urc_commdm_event_callback != NULL)
 800f2d0:	4b11      	ldr	r3, [pc, #68]	; (800f318 <CELLULAR_urc_notif+0x78c>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f43f aca7 	beq.w	800ec28 <CELLULAR_urc_notif+0x9c>
        (* urc_commdm_event_callback)(comMdmd_event_infos);
 800f2da:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f2dc:	e658      	b.n	800ef90 <CELLULAR_urc_notif+0x404>
		PRINT_DBG("ignore received URC (type=%d)", msgtype)
 800f2de:	460a      	mov	r2, r1
 800f2e0:	4803      	ldr	r0, [pc, #12]	; (800f2f0 <CELLULAR_urc_notif+0x764>)
 800f2e2:	490e      	ldr	r1, [pc, #56]	; (800f31c <CELLULAR_urc_notif+0x790>)
 800f2e4:	f00d fde8 	bl	801ceb8 <sprintf>
 800f2e8:	e4a4      	b.n	800ec34 <CELLULAR_urc_notif+0xa8>
 800f2ea:	bf00      	nop
 800f2ec:	0802748b 	.word	0x0802748b
 800f2f0:	20008df8 	.word	0x20008df8
 800f2f4:	20003834 	.word	0x20003834
 800f2f8:	080274ae 	.word	0x080274ae
 800f2fc:	20003818 	.word	0x20003818
 800f300:	080274cf 	.word	0x080274cf
 800f304:	2000383c 	.word	0x2000383c
 800f308:	080274f1 	.word	0x080274f1
 800f30c:	08027516 	.word	0x08027516
 800f310:	20003814 	.word	0x20003814
 800f314:	0802753b 	.word	0x0802753b
 800f318:	200037f8 	.word	0x200037f8
 800f31c:	08027556 	.word	0x08027556

0800f320 <CELLULAR_analyze_error_report.constprop.0>:
static CS_Status_t CELLULAR_analyze_error_report(at_buf_t *p_rsp_buf) {
 800f320:	b513      	push	{r0, r1, r4, lr}
	PRINT_API("<Cellular_Service> CELLULAR_analyze_error_report")
 800f322:	4925      	ldr	r1, [pc, #148]	; (800f3b8 <CELLULAR_analyze_error_report.constprop.0+0x98>)
 800f324:	4825      	ldr	r0, [pc, #148]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f326:	f00d fe37 	bl	801cf98 <strcpy>
 800f32a:	4824      	ldr	r0, [pc, #144]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f32c:	f008 fe02 	bl	8017f34 <crs_strlen>
 800f330:	4a22      	ldr	r2, [pc, #136]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f332:	b283      	uxth	r3, r0
 800f334:	2104      	movs	r1, #4
 800f336:	2000      	movs	r0, #0
 800f338:	f008 fe3a 	bl	8017fb0 <traceIF_itmPrint>
 800f33c:	481f      	ldr	r0, [pc, #124]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f33e:	f008 fdf9 	bl	8017f34 <crs_strlen>
 800f342:	2104      	movs	r1, #4
 800f344:	b283      	uxth	r3, r0
 800f346:	4a1d      	ldr	r2, [pc, #116]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f348:	2000      	movs	r0, #0
 800f34a:	f009 f857 	bl	80183fc <traceIF_uartPrint>
	msgtype = DATAPACK_readMsgType(p_rsp_buf);
 800f34e:	481c      	ldr	r0, [pc, #112]	; (800f3c0 <CELLULAR_analyze_error_report.constprop.0+0xa0>)
 800f350:	f7f8 fe9c 	bl	800808c <DATAPACK_readMsgType>
	if (msgtype == (uint16_t) CSMT_ERROR_REPORT) {
 800f354:	282c      	cmp	r0, #44	; 0x2c
	msgtype = DATAPACK_readMsgType(p_rsp_buf);
 800f356:	4601      	mov	r1, r0
	if (msgtype == (uint16_t) CSMT_ERROR_REPORT) {
 800f358:	d12c      	bne.n	800f3b4 <CELLULAR_analyze_error_report.constprop.0+0x94>
		if (DATAPACK_readStruct(p_rsp_buf, (uint16_t) CSMT_ERROR_REPORT,
 800f35a:	4819      	ldr	r0, [pc, #100]	; (800f3c0 <CELLULAR_analyze_error_report.constprop.0+0xa0>)
 800f35c:	ab01      	add	r3, sp, #4
 800f35e:	2202      	movs	r2, #2
 800f360:	f7f8 fe62 	bl	8008028 <DATAPACK_readStruct>
 800f364:	bb30      	cbnz	r0, 800f3b4 <CELLULAR_analyze_error_report.constprop.0+0x94>
			if (error_report.error_type == CSERR_SIM) {
 800f366:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d122      	bne.n	800f3b4 <CELLULAR_analyze_error_report.constprop.0+0x94>
	switch (p_error_report->sim_state) {
 800f36e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f372:	3b02      	subs	r3, #2
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b08      	cmp	r3, #8
 800f378:	bf9a      	itte	ls
 800f37a:	4a12      	ldrls	r2, [pc, #72]	; (800f3c4 <CELLULAR_analyze_error_report.constprop.0+0xa4>)
 800f37c:	5cd4      	ldrbls	r4, [r2, r3]
				retval = convert_SIM_error(&error_report);
 800f37e:	2407      	movhi	r4, #7
	PRINT_DBG("CS returned modified value after error report analysis = %d",
 800f380:	4622      	mov	r2, r4
 800f382:	4911      	ldr	r1, [pc, #68]	; (800f3c8 <CELLULAR_analyze_error_report.constprop.0+0xa8>)
 800f384:	480d      	ldr	r0, [pc, #52]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f386:	f00d fd97 	bl	801ceb8 <sprintf>
 800f38a:	480c      	ldr	r0, [pc, #48]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f38c:	f008 fdd2 	bl	8017f34 <crs_strlen>
 800f390:	4a0a      	ldr	r2, [pc, #40]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f392:	b283      	uxth	r3, r0
 800f394:	2102      	movs	r1, #2
 800f396:	2000      	movs	r0, #0
 800f398:	f008 fe0a 	bl	8017fb0 <traceIF_itmPrint>
 800f39c:	4807      	ldr	r0, [pc, #28]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f39e:	f008 fdc9 	bl	8017f34 <crs_strlen>
 800f3a2:	4a06      	ldr	r2, [pc, #24]	; (800f3bc <CELLULAR_analyze_error_report.constprop.0+0x9c>)
 800f3a4:	b283      	uxth	r3, r0
 800f3a6:	2102      	movs	r1, #2
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	f009 f827 	bl	80183fc <traceIF_uartPrint>
}
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	b002      	add	sp, #8
 800f3b2:	bd10      	pop	{r4, pc}
	retval = CELLULAR_ERROR;
 800f3b4:	2401      	movs	r4, #1
 800f3b6:	e7e3      	b.n	800f380 <CELLULAR_analyze_error_report.constprop.0+0x60>
 800f3b8:	08027579 	.word	0x08027579
 800f3bc:	20008df8 	.word	0x20008df8
 800f3c0:	20003778 	.word	0x20003778
 800f3c4:	08028376 	.word	0x08028376
 800f3c8:	080275b3 	.word	0x080275b3

0800f3cc <CS_init>:
CS_Status_t CS_init(void) {
 800f3cc:	b538      	push	{r3, r4, r5, lr}
	PRINT_API("CS_init")
 800f3ce:	4924      	ldr	r1, [pc, #144]	; (800f460 <CS_init+0x94>)
 800f3d0:	4824      	ldr	r0, [pc, #144]	; (800f464 <CS_init+0x98>)
 800f3d2:	f00d fde1 	bl	801cf98 <strcpy>
 800f3d6:	4823      	ldr	r0, [pc, #140]	; (800f464 <CS_init+0x98>)
 800f3d8:	f008 fdac 	bl	8017f34 <crs_strlen>
 800f3dc:	4a21      	ldr	r2, [pc, #132]	; (800f464 <CS_init+0x98>)
 800f3de:	b283      	uxth	r3, r0
 800f3e0:	2104      	movs	r1, #4
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	f008 fde4 	bl	8017fb0 <traceIF_itmPrint>
 800f3e8:	481e      	ldr	r0, [pc, #120]	; (800f464 <CS_init+0x98>)
 800f3ea:	f008 fda3 	bl	8017f34 <crs_strlen>
 800f3ee:	4a1d      	ldr	r2, [pc, #116]	; (800f464 <CS_init+0x98>)
 800f3f0:	b283      	uxth	r3, r0
 800f3f2:	2104      	movs	r1, #4
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	f009 f801 	bl	80183fc <traceIF_uartPrint>
	if (SysCtrl_getDeviceDescriptor(DEVTYPE_MODEM_CELLULAR, &modem_device_infos)
 800f3fa:	491b      	ldr	r1, [pc, #108]	; (800f468 <CS_init+0x9c>)
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f7ff fa8b 	bl	800e918 <SysCtrl_getDeviceDescriptor>
 800f402:	4604      	mov	r4, r0
 800f404:	bb50      	cbnz	r0, 800f45c <CS_init+0x90>
		(void) AT_init();
 800f406:	f7f8 f8e5 	bl	80075d4 <AT_init>
		_Adapter_Handle = AT_open(&modem_device_infos, CELLULAR_urc_notif);
 800f40a:	4918      	ldr	r1, [pc, #96]	; (800f46c <CS_init+0xa0>)
 800f40c:	4816      	ldr	r0, [pc, #88]	; (800f468 <CS_init+0x9c>)
 800f40e:	f7f8 f91d 	bl	800764c <AT_open>
 800f412:	4b17      	ldr	r3, [pc, #92]	; (800f470 <CS_init+0xa4>)
 800f414:	8018      	strh	r0, [r3, #0]
		if (_Adapter_Handle != AT_HANDLE_INVALID) {
 800f416:	3001      	adds	r0, #1
 800f418:	d020      	beq.n	800f45c <CS_init+0x90>
			CELLULAR_reset_context();
 800f41a:	f7ff fb79 	bl	800eb10 <CELLULAR_reset_context>
	PRINT_DBG("CELLULAR_reset_socket_context")
 800f41e:	4915      	ldr	r1, [pc, #84]	; (800f474 <CS_init+0xa8>)
 800f420:	4810      	ldr	r0, [pc, #64]	; (800f464 <CS_init+0x98>)
 800f422:	f00d fdb9 	bl	801cf98 <strcpy>
 800f426:	480f      	ldr	r0, [pc, #60]	; (800f464 <CS_init+0x98>)
 800f428:	f008 fd84 	bl	8017f34 <crs_strlen>
 800f42c:	4a0d      	ldr	r2, [pc, #52]	; (800f464 <CS_init+0x98>)
 800f42e:	b283      	uxth	r3, r0
 800f430:	2102      	movs	r1, #2
 800f432:	4620      	mov	r0, r4
 800f434:	f008 fdbc 	bl	8017fb0 <traceIF_itmPrint>
 800f438:	480a      	ldr	r0, [pc, #40]	; (800f464 <CS_init+0x98>)
 800f43a:	f008 fd7b 	bl	8017f34 <crs_strlen>
 800f43e:	4a09      	ldr	r2, [pc, #36]	; (800f464 <CS_init+0x98>)
 800f440:	b283      	uxth	r3, r0
 800f442:	2102      	movs	r1, #2
 800f444:	4620      	mov	r0, r4
 800f446:	f008 ffd9 	bl	80183fc <traceIF_uartPrint>
 800f44a:	4625      	mov	r5, r4
		csint_socket_init((socket_handle_t) cpt);
 800f44c:	4628      	mov	r0, r5
 800f44e:	3501      	adds	r5, #1
 800f450:	f004 fb94 	bl	8013b7c <csint_socket_init>
	for (cpt = 0U; cpt < CELLULAR_MAX_SOCKETS; cpt++) {
 800f454:	2d06      	cmp	r5, #6
 800f456:	d1f9      	bne.n	800f44c <CS_init+0x80>
}
 800f458:	4620      	mov	r0, r4
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
	CS_Status_t retval = CELLULAR_ERROR;
 800f45c:	2401      	movs	r4, #1
 800f45e:	e7fb      	b.n	800f458 <CS_init+0x8c>
 800f460:	080275f4 	.word	0x080275f4
 800f464:	20008df8 	.word	0x20008df8
 800f468:	20003775 	.word	0x20003775
 800f46c:	0800eb8d 	.word	0x0800eb8d
 800f470:	20003584 	.word	0x20003584
 800f474:	08027605 	.word	0x08027605

0800f478 <CS_power_on>:
CS_Status_t CS_power_on(void) {
 800f478:	b510      	push	{r4, lr}
	PRINT_API("CS_power_on")
 800f47a:	4931      	ldr	r1, [pc, #196]	; (800f540 <CS_power_on+0xc8>)
 800f47c:	4831      	ldr	r0, [pc, #196]	; (800f544 <CS_power_on+0xcc>)
 800f47e:	f00d fd8b 	bl	801cf98 <strcpy>
 800f482:	4830      	ldr	r0, [pc, #192]	; (800f544 <CS_power_on+0xcc>)
 800f484:	f008 fd56 	bl	8017f34 <crs_strlen>
 800f488:	4a2e      	ldr	r2, [pc, #184]	; (800f544 <CS_power_on+0xcc>)
 800f48a:	b283      	uxth	r3, r0
 800f48c:	2104      	movs	r1, #4
 800f48e:	2000      	movs	r0, #0
 800f490:	f008 fd8e 	bl	8017fb0 <traceIF_itmPrint>
 800f494:	482b      	ldr	r0, [pc, #172]	; (800f544 <CS_power_on+0xcc>)
 800f496:	f008 fd4d 	bl	8017f34 <crs_strlen>
 800f49a:	4a2a      	ldr	r2, [pc, #168]	; (800f544 <CS_power_on+0xcc>)
 800f49c:	b283      	uxth	r3, r0
 800f49e:	2104      	movs	r1, #4
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	f008 ffab 	bl	80183fc <traceIF_uartPrint>
	if (SysCtrl_power_on(DEVTYPE_MODEM_CELLULAR) == SCSTATUS_OK) {
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f7ff faaa 	bl	800ea00 <SysCtrl_power_on>
 800f4ac:	bb80      	cbnz	r0, 800f510 <CS_power_on+0x98>
		if (SysCtrl_open_channel(DEVTYPE_MODEM_CELLULAR) == SCSTATUS_OK) {
 800f4ae:	f7ff fa4f 	bl	800e950 <SysCtrl_open_channel>
 800f4b2:	bb68      	cbnz	r0, 800f510 <CS_power_on+0x98>
			if (AT_open_channel(_Adapter_Handle) == ATSTATUS_OK) {
 800f4b4:	4c24      	ldr	r4, [pc, #144]	; (800f548 <CS_power_on+0xd0>)
 800f4b6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f4ba:	f7f8 f917 	bl	80076ec <AT_open_channel>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	bb30      	cbnz	r0, 800f510 <CS_power_on+0x98>
				if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE,
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	2104      	movs	r1, #4
 800f4c6:	4821      	ldr	r0, [pc, #132]	; (800f54c <CS_power_on+0xd4>)
 800f4c8:	f7f8 fd2a 	bl	8007f20 <DATAPACK_writeStruct>
 800f4cc:	bb00      	cbnz	r0, 800f510 <CS_power_on+0x98>
					err = AT_sendcmd(_Adapter_Handle,
 800f4ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f4d2:	4b1f      	ldr	r3, [pc, #124]	; (800f550 <CS_power_on+0xd8>)
 800f4d4:	4a1d      	ldr	r2, [pc, #116]	; (800f54c <CS_power_on+0xd4>)
 800f4d6:	2165      	movs	r1, #101	; 0x65
 800f4d8:	f7f8 f97a 	bl	80077d0 <AT_sendcmd>
					if (err == ATSTATUS_OK) {
 800f4dc:	4604      	mov	r4, r0
 800f4de:	b9b8      	cbnz	r0, 800f510 <CS_power_on+0x98>
						PRINT_DBG("Cellular started and ready")
 800f4e0:	491c      	ldr	r1, [pc, #112]	; (800f554 <CS_power_on+0xdc>)
 800f4e2:	4818      	ldr	r0, [pc, #96]	; (800f544 <CS_power_on+0xcc>)
 800f4e4:	f00d fd58 	bl	801cf98 <strcpy>
 800f4e8:	4816      	ldr	r0, [pc, #88]	; (800f544 <CS_power_on+0xcc>)
 800f4ea:	f008 fd23 	bl	8017f34 <crs_strlen>
 800f4ee:	4a15      	ldr	r2, [pc, #84]	; (800f544 <CS_power_on+0xcc>)
 800f4f0:	b283      	uxth	r3, r0
 800f4f2:	2102      	movs	r1, #2
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f008 fd5b 	bl	8017fb0 <traceIF_itmPrint>
 800f4fa:	4812      	ldr	r0, [pc, #72]	; (800f544 <CS_power_on+0xcc>)
 800f4fc:	f008 fd1a 	bl	8017f34 <crs_strlen>
 800f500:	4a10      	ldr	r2, [pc, #64]	; (800f544 <CS_power_on+0xcc>)
 800f502:	b283      	uxth	r3, r0
 800f504:	2102      	movs	r1, #2
 800f506:	4620      	mov	r0, r4
 800f508:	f008 ff78 	bl	80183fc <traceIF_uartPrint>
}
 800f50c:	4620      	mov	r0, r4
 800f50e:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when power on process")
 800f510:	4911      	ldr	r1, [pc, #68]	; (800f558 <CS_power_on+0xe0>)
 800f512:	480c      	ldr	r0, [pc, #48]	; (800f544 <CS_power_on+0xcc>)
 800f514:	f00d fd40 	bl	801cf98 <strcpy>
 800f518:	480a      	ldr	r0, [pc, #40]	; (800f544 <CS_power_on+0xcc>)
 800f51a:	f008 fd0b 	bl	8017f34 <crs_strlen>
 800f51e:	4a09      	ldr	r2, [pc, #36]	; (800f544 <CS_power_on+0xcc>)
 800f520:	b283      	uxth	r3, r0
 800f522:	2110      	movs	r1, #16
 800f524:	2000      	movs	r0, #0
 800f526:	f008 fd43 	bl	8017fb0 <traceIF_itmPrint>
 800f52a:	4806      	ldr	r0, [pc, #24]	; (800f544 <CS_power_on+0xcc>)
 800f52c:	f008 fd02 	bl	8017f34 <crs_strlen>
 800f530:	4a04      	ldr	r2, [pc, #16]	; (800f544 <CS_power_on+0xcc>)
 800f532:	b283      	uxth	r3, r0
 800f534:	2110      	movs	r1, #16
 800f536:	2000      	movs	r0, #0
 800f538:	f008 ff60 	bl	80183fc <traceIF_uartPrint>
 800f53c:	2401      	movs	r4, #1
 800f53e:	e7e5      	b.n	800f50c <CS_power_on+0x94>
 800f540:	08027628 	.word	0x08027628
 800f544:	20008df8 	.word	0x20008df8
 800f548:	20003584 	.word	0x20003584
 800f54c:	20003586 	.word	0x20003586
 800f550:	20003778 	.word	0x20003778
 800f554:	0802763d 	.word	0x0802763d
 800f558:	0802765d 	.word	0x0802765d

0800f55c <CS_power_off>:
CS_Status_t CS_power_off(void) {
 800f55c:	b538      	push	{r3, r4, r5, lr}
	PRINT_API("CS_power_off")
 800f55e:	493e      	ldr	r1, [pc, #248]	; (800f658 <CS_power_off+0xfc>)
 800f560:	483e      	ldr	r0, [pc, #248]	; (800f65c <CS_power_off+0x100>)
 800f562:	f00d fd19 	bl	801cf98 <strcpy>
 800f566:	483d      	ldr	r0, [pc, #244]	; (800f65c <CS_power_off+0x100>)
 800f568:	f008 fce4 	bl	8017f34 <crs_strlen>
 800f56c:	4a3b      	ldr	r2, [pc, #236]	; (800f65c <CS_power_off+0x100>)
 800f56e:	b283      	uxth	r3, r0
 800f570:	2104      	movs	r1, #4
 800f572:	2000      	movs	r0, #0
 800f574:	f008 fd1c 	bl	8017fb0 <traceIF_itmPrint>
 800f578:	4838      	ldr	r0, [pc, #224]	; (800f65c <CS_power_off+0x100>)
 800f57a:	f008 fcdb 	bl	8017f34 <crs_strlen>
 800f57e:	4a37      	ldr	r2, [pc, #220]	; (800f65c <CS_power_off+0x100>)
 800f580:	b283      	uxth	r3, r0
 800f582:	2104      	movs	r1, #4
 800f584:	2000      	movs	r0, #0
 800f586:	f008 ff39 	bl	80183fc <traceIF_uartPrint>
	CELLULAR_reset_context();
 800f58a:	f7ff fac1 	bl	800eb10 <CELLULAR_reset_context>
	csint_modem_reset_update_socket_state();
 800f58e:	f004 fac1 	bl	8013b14 <csint_modem_reset_update_socket_state>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE, (uint16_t) 0U,
 800f592:	2300      	movs	r3, #0
 800f594:	4832      	ldr	r0, [pc, #200]	; (800f660 <CS_power_off+0x104>)
 800f596:	461a      	mov	r2, r3
 800f598:	2104      	movs	r1, #4
 800f59a:	f7f8 fcc1 	bl	8007f20 <DATAPACK_writeStruct>
 800f59e:	4604      	mov	r4, r0
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d141      	bne.n	800f628 <CS_power_off+0xcc>
		(void) AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_POWER_OFF,
 800f5a4:	4d2f      	ldr	r5, [pc, #188]	; (800f664 <CS_power_off+0x108>)
 800f5a6:	4b30      	ldr	r3, [pc, #192]	; (800f668 <CS_power_off+0x10c>)
 800f5a8:	4a2d      	ldr	r2, [pc, #180]	; (800f660 <CS_power_off+0x104>)
 800f5aa:	f9b5 0000 	ldrsh.w	r0, [r5]
 800f5ae:	2166      	movs	r1, #102	; 0x66
 800f5b0:	f7f8 f90e 	bl	80077d0 <AT_sendcmd>
		(void) AT_close_channel(_Adapter_Handle);
 800f5b4:	f9b5 0000 	ldrsh.w	r0, [r5]
 800f5b8:	f7f8 f8e0 	bl	800777c <AT_close_channel>
		(void) SysCtrl_close_channel(DEVTYPE_MODEM_CELLULAR);
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f7ff f9f3 	bl	800e9a8 <SysCtrl_close_channel>
		if (SysCtrl_power_off(DEVTYPE_MODEM_CELLULAR) == SCSTATUS_OK) {
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f7ff fa48 	bl	800ea58 <SysCtrl_power_off>
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	bb68      	cbnz	r0, 800f628 <CS_power_off+0xcc>
			PRINT_DBG("<Cellular_Service> Stopped")
 800f5cc:	4927      	ldr	r1, [pc, #156]	; (800f66c <CS_power_off+0x110>)
 800f5ce:	4823      	ldr	r0, [pc, #140]	; (800f65c <CS_power_off+0x100>)
 800f5d0:	f00d fce2 	bl	801cf98 <strcpy>
 800f5d4:	4821      	ldr	r0, [pc, #132]	; (800f65c <CS_power_off+0x100>)
 800f5d6:	f008 fcad 	bl	8017f34 <crs_strlen>
 800f5da:	4a20      	ldr	r2, [pc, #128]	; (800f65c <CS_power_off+0x100>)
 800f5dc:	b283      	uxth	r3, r0
 800f5de:	2102      	movs	r1, #2
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f008 fce5 	bl	8017fb0 <traceIF_itmPrint>
 800f5e6:	481d      	ldr	r0, [pc, #116]	; (800f65c <CS_power_off+0x100>)
 800f5e8:	f008 fca4 	bl	8017f34 <crs_strlen>
 800f5ec:	4a1b      	ldr	r2, [pc, #108]	; (800f65c <CS_power_off+0x100>)
 800f5ee:	b283      	uxth	r3, r0
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f008 ff02 	bl	80183fc <traceIF_uartPrint>
		    PRINT_INFO("<Cellular_Service> Stopped")
 800f5f8:	491c      	ldr	r1, [pc, #112]	; (800f66c <CS_power_off+0x110>)
 800f5fa:	4818      	ldr	r0, [pc, #96]	; (800f65c <CS_power_off+0x100>)
 800f5fc:	f00d fccc 	bl	801cf98 <strcpy>
 800f600:	4816      	ldr	r0, [pc, #88]	; (800f65c <CS_power_off+0x100>)
 800f602:	f008 fc97 	bl	8017f34 <crs_strlen>
 800f606:	4a15      	ldr	r2, [pc, #84]	; (800f65c <CS_power_off+0x100>)
 800f608:	b283      	uxth	r3, r0
 800f60a:	2101      	movs	r1, #1
 800f60c:	4620      	mov	r0, r4
 800f60e:	f008 fccf 	bl	8017fb0 <traceIF_itmPrint>
 800f612:	4812      	ldr	r0, [pc, #72]	; (800f65c <CS_power_off+0x100>)
 800f614:	f008 fc8e 	bl	8017f34 <crs_strlen>
 800f618:	4a10      	ldr	r2, [pc, #64]	; (800f65c <CS_power_off+0x100>)
 800f61a:	b283      	uxth	r3, r0
 800f61c:	2101      	movs	r1, #1
 800f61e:	4620      	mov	r0, r4
 800f620:	f008 feec 	bl	80183fc <traceIF_uartPrint>
}
 800f624:	4620      	mov	r0, r4
 800f626:	bd38      	pop	{r3, r4, r5, pc}
		PRINT_ERR("<Cellular_Service> error during power off process")
 800f628:	4911      	ldr	r1, [pc, #68]	; (800f670 <CS_power_off+0x114>)
 800f62a:	480c      	ldr	r0, [pc, #48]	; (800f65c <CS_power_off+0x100>)
 800f62c:	f00d fcb4 	bl	801cf98 <strcpy>
 800f630:	480a      	ldr	r0, [pc, #40]	; (800f65c <CS_power_off+0x100>)
 800f632:	f008 fc7f 	bl	8017f34 <crs_strlen>
 800f636:	4a09      	ldr	r2, [pc, #36]	; (800f65c <CS_power_off+0x100>)
 800f638:	b283      	uxth	r3, r0
 800f63a:	2110      	movs	r1, #16
 800f63c:	2000      	movs	r0, #0
 800f63e:	f008 fcb7 	bl	8017fb0 <traceIF_itmPrint>
 800f642:	4806      	ldr	r0, [pc, #24]	; (800f65c <CS_power_off+0x100>)
 800f644:	f008 fc76 	bl	8017f34 <crs_strlen>
 800f648:	4a04      	ldr	r2, [pc, #16]	; (800f65c <CS_power_off+0x100>)
 800f64a:	b283      	uxth	r3, r0
 800f64c:	2110      	movs	r1, #16
 800f64e:	2000      	movs	r0, #0
 800f650:	f008 fed4 	bl	80183fc <traceIF_uartPrint>
 800f654:	2401      	movs	r4, #1
 800f656:	e7e5      	b.n	800f624 <CS_power_off+0xc8>
 800f658:	08027697 	.word	0x08027697
 800f65c:	20008df8 	.word	0x20008df8
 800f660:	20003586 	.word	0x20003586
 800f664:	20003584 	.word	0x20003584
 800f668:	20003778 	.word	0x20003778
 800f66c:	080276ad 	.word	0x080276ad
 800f670:	080276cd 	.word	0x080276cd

0800f674 <CS_sim_select>:
CS_Status_t CS_sim_select(CS_SimSlot_t simSelected) {
 800f674:	b513      	push	{r0, r1, r4, lr}
	PRINT_API("CS_sim_select")
 800f676:	4931      	ldr	r1, [pc, #196]	; (800f73c <CS_sim_select+0xc8>)
CS_Status_t CS_sim_select(CS_SimSlot_t simSelected) {
 800f678:	f88d 0007 	strb.w	r0, [sp, #7]
	PRINT_API("CS_sim_select")
 800f67c:	4830      	ldr	r0, [pc, #192]	; (800f740 <CS_sim_select+0xcc>)
 800f67e:	f00d fc8b 	bl	801cf98 <strcpy>
 800f682:	482f      	ldr	r0, [pc, #188]	; (800f740 <CS_sim_select+0xcc>)
 800f684:	f008 fc56 	bl	8017f34 <crs_strlen>
 800f688:	4a2d      	ldr	r2, [pc, #180]	; (800f740 <CS_sim_select+0xcc>)
 800f68a:	b283      	uxth	r3, r0
 800f68c:	2104      	movs	r1, #4
 800f68e:	2000      	movs	r0, #0
 800f690:	f008 fc8e 	bl	8017fb0 <traceIF_itmPrint>
 800f694:	482a      	ldr	r0, [pc, #168]	; (800f740 <CS_sim_select+0xcc>)
 800f696:	f008 fc4d 	bl	8017f34 <crs_strlen>
 800f69a:	4a29      	ldr	r2, [pc, #164]	; (800f740 <CS_sim_select+0xcc>)
 800f69c:	b283      	uxth	r3, r0
 800f69e:	2104      	movs	r1, #4
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f008 feab 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_SIM_SELECT,
 800f6a6:	4827      	ldr	r0, [pc, #156]	; (800f744 <CS_sim_select+0xd0>)
 800f6a8:	f10d 0307 	add.w	r3, sp, #7
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	212e      	movs	r1, #46	; 0x2e
 800f6b0:	f7f8 fc36 	bl	8007f20 <DATAPACK_writeStruct>
 800f6b4:	b1c8      	cbz	r0, 800f6ea <CS_sim_select+0x76>
		PRINT_INFO(
 800f6b6:	4924      	ldr	r1, [pc, #144]	; (800f748 <CS_sim_select+0xd4>)
 800f6b8:	4821      	ldr	r0, [pc, #132]	; (800f740 <CS_sim_select+0xcc>)
 800f6ba:	f00d fc6d 	bl	801cf98 <strcpy>
 800f6be:	4820      	ldr	r0, [pc, #128]	; (800f740 <CS_sim_select+0xcc>)
 800f6c0:	f008 fc38 	bl	8017f34 <crs_strlen>
 800f6c4:	4a1e      	ldr	r2, [pc, #120]	; (800f740 <CS_sim_select+0xcc>)
 800f6c6:	b283      	uxth	r3, r0
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	f008 fc70 	bl	8017fb0 <traceIF_itmPrint>
 800f6d0:	481b      	ldr	r0, [pc, #108]	; (800f740 <CS_sim_select+0xcc>)
 800f6d2:	f008 fc2f 	bl	8017f34 <crs_strlen>
 800f6d6:	4a1a      	ldr	r2, [pc, #104]	; (800f740 <CS_sim_select+0xcc>)
 800f6d8:	b283      	uxth	r3, r0
 800f6da:	2101      	movs	r1, #1
 800f6dc:	2000      	movs	r0, #0
 800f6de:	f008 fe8d 	bl	80183fc <traceIF_uartPrint>
 800f6e2:	2401      	movs	r4, #1
}
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	b002      	add	sp, #8
 800f6e8:	bd10      	pop	{r4, pc}
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_SIM_SELECT,
 800f6ea:	4818      	ldr	r0, [pc, #96]	; (800f74c <CS_sim_select+0xd8>)
 800f6ec:	4b18      	ldr	r3, [pc, #96]	; (800f750 <CS_sim_select+0xdc>)
 800f6ee:	4a15      	ldr	r2, [pc, #84]	; (800f744 <CS_sim_select+0xd0>)
 800f6f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f6f4:	2187      	movs	r1, #135	; 0x87
 800f6f6:	f7f8 f86b 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	b9c0      	cbnz	r0, 800f730 <CS_sim_select+0xbc>
			PRINT_DBG("<Cellular_Service> SIM %d selected", simSelected)
 800f6fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f702:	4914      	ldr	r1, [pc, #80]	; (800f754 <CS_sim_select+0xe0>)
 800f704:	480e      	ldr	r0, [pc, #56]	; (800f740 <CS_sim_select+0xcc>)
 800f706:	f00d fbd7 	bl	801ceb8 <sprintf>
 800f70a:	480d      	ldr	r0, [pc, #52]	; (800f740 <CS_sim_select+0xcc>)
 800f70c:	f008 fc12 	bl	8017f34 <crs_strlen>
 800f710:	4a0b      	ldr	r2, [pc, #44]	; (800f740 <CS_sim_select+0xcc>)
 800f712:	b283      	uxth	r3, r0
 800f714:	2102      	movs	r1, #2
 800f716:	4620      	mov	r0, r4
 800f718:	f008 fc4a 	bl	8017fb0 <traceIF_itmPrint>
 800f71c:	4808      	ldr	r0, [pc, #32]	; (800f740 <CS_sim_select+0xcc>)
 800f71e:	f008 fc09 	bl	8017f34 <crs_strlen>
 800f722:	4a07      	ldr	r2, [pc, #28]	; (800f740 <CS_sim_select+0xcc>)
 800f724:	b283      	uxth	r3, r0
 800f726:	2102      	movs	r1, #2
 800f728:	4620      	mov	r0, r4
 800f72a:	f008 fe67 	bl	80183fc <traceIF_uartPrint>
	if (retval == CELLULAR_ERROR) {
 800f72e:	e7d9      	b.n	800f6e4 <CS_sim_select+0x70>
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f730:	f7ff fdf6 	bl	800f320 <CELLULAR_analyze_error_report.constprop.0>
	if (retval == CELLULAR_ERROR) {
 800f734:	2801      	cmp	r0, #1
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f736:	4604      	mov	r4, r0
	if (retval == CELLULAR_ERROR) {
 800f738:	d1d4      	bne.n	800f6e4 <CS_sim_select+0x70>
 800f73a:	e7bc      	b.n	800f6b6 <CS_sim_select+0x42>
 800f73c:	0802770a 	.word	0x0802770a
 800f740:	20008df8 	.word	0x20008df8
 800f744:	20003586 	.word	0x20003586
 800f748:	08027721 	.word	0x08027721
 800f74c:	20003584 	.word	0x20003584
 800f750:	20003778 	.word	0x20003778
 800f754:	0802776a 	.word	0x0802776a

0800f758 <CS_init_modem>:
		const CS_CHAR_t *pin_code) {
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	4606      	mov	r6, r0
 800f75c:	b086      	sub	sp, #24
 800f75e:	460d      	mov	r5, r1
	PRINT_API("CS_init_modem")
 800f760:	4838      	ldr	r0, [pc, #224]	; (800f844 <CS_init_modem+0xec>)
 800f762:	4939      	ldr	r1, [pc, #228]	; (800f848 <CS_init_modem+0xf0>)
		const CS_CHAR_t *pin_code) {
 800f764:	4614      	mov	r4, r2
	PRINT_API("CS_init_modem")
 800f766:	f00d fc17 	bl	801cf98 <strcpy>
 800f76a:	4836      	ldr	r0, [pc, #216]	; (800f844 <CS_init_modem+0xec>)
 800f76c:	f008 fbe2 	bl	8017f34 <crs_strlen>
 800f770:	4a34      	ldr	r2, [pc, #208]	; (800f844 <CS_init_modem+0xec>)
 800f772:	b283      	uxth	r3, r0
 800f774:	2104      	movs	r1, #4
 800f776:	2000      	movs	r0, #0
 800f778:	f008 fc1a 	bl	8017fb0 <traceIF_itmPrint>
 800f77c:	4831      	ldr	r0, [pc, #196]	; (800f844 <CS_init_modem+0xec>)
 800f77e:	f008 fbd9 	bl	8017f34 <crs_strlen>
 800f782:	4a30      	ldr	r2, [pc, #192]	; (800f844 <CS_init_modem+0xec>)
 800f784:	b283      	uxth	r3, r0
 800f786:	2104      	movs	r1, #4
 800f788:	2000      	movs	r0, #0
 800f78a:	f008 fe37 	bl	80183fc <traceIF_uartPrint>
	(void) memset((void*) &modemInit_struct, 0, sizeof(modemInit_struct));
 800f78e:	2212      	movs	r2, #18
 800f790:	2100      	movs	r1, #0
 800f792:	a801      	add	r0, sp, #4
 800f794:	f00d fb60 	bl	801ce58 <memset>
	(void) memcpy((void*) &modemInit_struct.pincode.pincode[0],
 800f798:	4620      	mov	r0, r4
	modemInit_struct.init = init;
 800f79a:	f88d 6004 	strb.w	r6, [sp, #4]
	modemInit_struct.reset = reset;
 800f79e:	f88d 5005 	strb.w	r5, [sp, #5]
	(void) memcpy((void*) &modemInit_struct.pincode.pincode[0],
 800f7a2:	f7f0 fd37 	bl	8000214 <strlen>
 800f7a6:	4621      	mov	r1, r4
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	f10d 0006 	add.w	r0, sp, #6
 800f7ae:	f00d fb45 	bl	801ce3c <memcpy>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_INITMODEM,
 800f7b2:	4826      	ldr	r0, [pc, #152]	; (800f84c <CS_init_modem+0xf4>)
 800f7b4:	ab01      	add	r3, sp, #4
 800f7b6:	2212      	movs	r2, #18
 800f7b8:	2114      	movs	r1, #20
 800f7ba:	f7f8 fbb1 	bl	8007f20 <DATAPACK_writeStruct>
 800f7be:	b1c8      	cbz	r0, 800f7f4 <CS_init_modem+0x9c>
		PRINT_ERR("<Cellular_Service> error during init")
 800f7c0:	4923      	ldr	r1, [pc, #140]	; (800f850 <CS_init_modem+0xf8>)
 800f7c2:	4820      	ldr	r0, [pc, #128]	; (800f844 <CS_init_modem+0xec>)
 800f7c4:	f00d fbe8 	bl	801cf98 <strcpy>
 800f7c8:	481e      	ldr	r0, [pc, #120]	; (800f844 <CS_init_modem+0xec>)
 800f7ca:	f008 fbb3 	bl	8017f34 <crs_strlen>
 800f7ce:	4a1d      	ldr	r2, [pc, #116]	; (800f844 <CS_init_modem+0xec>)
 800f7d0:	b283      	uxth	r3, r0
 800f7d2:	2110      	movs	r1, #16
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f008 fbeb 	bl	8017fb0 <traceIF_itmPrint>
 800f7da:	481a      	ldr	r0, [pc, #104]	; (800f844 <CS_init_modem+0xec>)
 800f7dc:	f008 fbaa 	bl	8017f34 <crs_strlen>
 800f7e0:	4a18      	ldr	r2, [pc, #96]	; (800f844 <CS_init_modem+0xec>)
 800f7e2:	b283      	uxth	r3, r0
 800f7e4:	2110      	movs	r1, #16
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	f008 fe08 	bl	80183fc <traceIF_uartPrint>
 800f7ec:	2401      	movs	r4, #1
}
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	b006      	add	sp, #24
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_INIT_MODEM,
 800f7f4:	4817      	ldr	r0, [pc, #92]	; (800f854 <CS_init_modem+0xfc>)
 800f7f6:	4b18      	ldr	r3, [pc, #96]	; (800f858 <CS_init_modem+0x100>)
 800f7f8:	4a14      	ldr	r2, [pc, #80]	; (800f84c <CS_init_modem+0xf4>)
 800f7fa:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f7fe:	2167      	movs	r1, #103	; 0x67
 800f800:	f7f7 ffe6 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800f804:	4604      	mov	r4, r0
 800f806:	b9b0      	cbnz	r0, 800f836 <CS_init_modem+0xde>
			PRINT_DBG("<Cellular_Service> Init done successfully")
 800f808:	4914      	ldr	r1, [pc, #80]	; (800f85c <CS_init_modem+0x104>)
 800f80a:	480e      	ldr	r0, [pc, #56]	; (800f844 <CS_init_modem+0xec>)
 800f80c:	f00d fbc4 	bl	801cf98 <strcpy>
 800f810:	480c      	ldr	r0, [pc, #48]	; (800f844 <CS_init_modem+0xec>)
 800f812:	f008 fb8f 	bl	8017f34 <crs_strlen>
 800f816:	4a0b      	ldr	r2, [pc, #44]	; (800f844 <CS_init_modem+0xec>)
 800f818:	b283      	uxth	r3, r0
 800f81a:	2102      	movs	r1, #2
 800f81c:	4620      	mov	r0, r4
 800f81e:	f008 fbc7 	bl	8017fb0 <traceIF_itmPrint>
 800f822:	4808      	ldr	r0, [pc, #32]	; (800f844 <CS_init_modem+0xec>)
 800f824:	f008 fb86 	bl	8017f34 <crs_strlen>
 800f828:	4a06      	ldr	r2, [pc, #24]	; (800f844 <CS_init_modem+0xec>)
 800f82a:	b283      	uxth	r3, r0
 800f82c:	2102      	movs	r1, #2
 800f82e:	4620      	mov	r0, r4
 800f830:	f008 fde4 	bl	80183fc <traceIF_uartPrint>
	if (retval == CELLULAR_ERROR) {
 800f834:	e7db      	b.n	800f7ee <CS_init_modem+0x96>
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f836:	f7ff fd73 	bl	800f320 <CELLULAR_analyze_error_report.constprop.0>
	if (retval == CELLULAR_ERROR) {
 800f83a:	2801      	cmp	r0, #1
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f83c:	4604      	mov	r4, r0
	if (retval == CELLULAR_ERROR) {
 800f83e:	d1d6      	bne.n	800f7ee <CS_init_modem+0x96>
 800f840:	e7be      	b.n	800f7c0 <CS_init_modem+0x68>
 800f842:	bf00      	nop
 800f844:	20008df8 	.word	0x20008df8
 800f848:	08027792 	.word	0x08027792
 800f84c:	20003586 	.word	0x20003586
 800f850:	080277a9 	.word	0x080277a9
 800f854:	20003584 	.word	0x20003584
 800f858:	20003778 	.word	0x20003778
 800f85c:	080277d9 	.word	0x080277d9

0800f860 <CS_get_device_info>:
CS_Status_t CS_get_device_info(CS_DeviceInfo_t *p_devinfo) {
 800f860:	b570      	push	{r4, r5, r6, lr}
	PRINT_API("CS_get_device_info")
 800f862:	4936      	ldr	r1, [pc, #216]	; (800f93c <CS_get_device_info+0xdc>)
	(void) memset((void*) &cs_ctxt_device_info, 0, sizeof(cs_ctxt_device_info));
 800f864:	4e36      	ldr	r6, [pc, #216]	; (800f940 <CS_get_device_info+0xe0>)
CS_Status_t CS_get_device_info(CS_DeviceInfo_t *p_devinfo) {
 800f866:	4605      	mov	r5, r0
	PRINT_API("CS_get_device_info")
 800f868:	4836      	ldr	r0, [pc, #216]	; (800f944 <CS_get_device_info+0xe4>)
 800f86a:	f00d fb95 	bl	801cf98 <strcpy>
 800f86e:	4835      	ldr	r0, [pc, #212]	; (800f944 <CS_get_device_info+0xe4>)
 800f870:	f008 fb60 	bl	8017f34 <crs_strlen>
 800f874:	4a33      	ldr	r2, [pc, #204]	; (800f944 <CS_get_device_info+0xe4>)
 800f876:	b283      	uxth	r3, r0
 800f878:	2104      	movs	r1, #4
 800f87a:	2000      	movs	r0, #0
 800f87c:	f008 fb98 	bl	8017fb0 <traceIF_itmPrint>
 800f880:	4830      	ldr	r0, [pc, #192]	; (800f944 <CS_get_device_info+0xe4>)
 800f882:	f008 fb57 	bl	8017f34 <crs_strlen>
 800f886:	4a2f      	ldr	r2, [pc, #188]	; (800f944 <CS_get_device_info+0xe4>)
 800f888:	b283      	uxth	r3, r0
 800f88a:	2104      	movs	r1, #4
 800f88c:	2000      	movs	r0, #0
 800f88e:	f008 fdb5 	bl	80183fc <traceIF_uartPrint>
	(void) memset((void*) &cs_ctxt_device_info, 0, sizeof(cs_ctxt_device_info));
 800f892:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f896:	2100      	movs	r1, #0
 800f898:	4630      	mov	r0, r6
 800f89a:	f00d fadd 	bl	801ce58 <memset>
	cs_ctxt_device_info.field_requested = p_devinfo->field_requested;
 800f89e:	882b      	ldrh	r3, [r5, #0]
	if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_DEVICE_INFO,
 800f8a0:	4829      	ldr	r0, [pc, #164]	; (800f948 <CS_get_device_info+0xe8>)
	cs_ctxt_device_info.field_requested = p_devinfo->field_requested;
 800f8a2:	8033      	strh	r3, [r6, #0]
	if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_DEVICE_INFO,
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	2119      	movs	r1, #25
 800f8a8:	f7f8 fb0e 	bl	8007ec8 <DATAPACK_writePtr>
 800f8ac:	b1c0      	cbz	r0, 800f8e0 <CS_get_device_info+0x80>
		PRINT_ERR("<Cellular_Service> error when getting device infos")
 800f8ae:	4927      	ldr	r1, [pc, #156]	; (800f94c <CS_get_device_info+0xec>)
 800f8b0:	4824      	ldr	r0, [pc, #144]	; (800f944 <CS_get_device_info+0xe4>)
 800f8b2:	f00d fb71 	bl	801cf98 <strcpy>
 800f8b6:	4823      	ldr	r0, [pc, #140]	; (800f944 <CS_get_device_info+0xe4>)
 800f8b8:	f008 fb3c 	bl	8017f34 <crs_strlen>
 800f8bc:	4a21      	ldr	r2, [pc, #132]	; (800f944 <CS_get_device_info+0xe4>)
 800f8be:	b283      	uxth	r3, r0
 800f8c0:	2110      	movs	r1, #16
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	f008 fb74 	bl	8017fb0 <traceIF_itmPrint>
 800f8c8:	481e      	ldr	r0, [pc, #120]	; (800f944 <CS_get_device_info+0xe4>)
 800f8ca:	f008 fb33 	bl	8017f34 <crs_strlen>
 800f8ce:	4a1d      	ldr	r2, [pc, #116]	; (800f944 <CS_get_device_info+0xe4>)
 800f8d0:	b283      	uxth	r3, r0
 800f8d2:	2110      	movs	r1, #16
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	f008 fd91 	bl	80183fc <traceIF_uartPrint>
 800f8da:	2401      	movs	r4, #1
}
 800f8dc:	4620      	mov	r0, r4
 800f8de:	bd70      	pop	{r4, r5, r6, pc}
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_GET_DEVICE_INFO,
 800f8e0:	481b      	ldr	r0, [pc, #108]	; (800f950 <CS_get_device_info+0xf0>)
 800f8e2:	4b1c      	ldr	r3, [pc, #112]	; (800f954 <CS_get_device_info+0xf4>)
 800f8e4:	4a18      	ldr	r2, [pc, #96]	; (800f948 <CS_get_device_info+0xe8>)
 800f8e6:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f8ea:	2168      	movs	r1, #104	; 0x68
 800f8ec:	f7f7 ff70 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800f8f0:	4604      	mov	r4, r0
 800f8f2:	b9e0      	cbnz	r0, 800f92e <CS_get_device_info+0xce>
			PRINT_DBG("<Cellular_Service> Device infos received")
 800f8f4:	4918      	ldr	r1, [pc, #96]	; (800f958 <CS_get_device_info+0xf8>)
 800f8f6:	4813      	ldr	r0, [pc, #76]	; (800f944 <CS_get_device_info+0xe4>)
 800f8f8:	f00d fb4e 	bl	801cf98 <strcpy>
 800f8fc:	4811      	ldr	r0, [pc, #68]	; (800f944 <CS_get_device_info+0xe4>)
 800f8fe:	f008 fb19 	bl	8017f34 <crs_strlen>
 800f902:	4a10      	ldr	r2, [pc, #64]	; (800f944 <CS_get_device_info+0xe4>)
 800f904:	b283      	uxth	r3, r0
 800f906:	2102      	movs	r1, #2
 800f908:	4620      	mov	r0, r4
 800f90a:	f008 fb51 	bl	8017fb0 <traceIF_itmPrint>
 800f90e:	480d      	ldr	r0, [pc, #52]	; (800f944 <CS_get_device_info+0xe4>)
 800f910:	f008 fb10 	bl	8017f34 <crs_strlen>
 800f914:	4a0b      	ldr	r2, [pc, #44]	; (800f944 <CS_get_device_info+0xe4>)
 800f916:	b283      	uxth	r3, r0
 800f918:	2102      	movs	r1, #2
 800f91a:	4620      	mov	r0, r4
 800f91c:	f008 fd6e 	bl	80183fc <traceIF_uartPrint>
			(void) memcpy((void*) p_devinfo, (void*) &cs_ctxt_device_info,
 800f920:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f924:	4631      	mov	r1, r6
 800f926:	4628      	mov	r0, r5
 800f928:	f00d fa88 	bl	801ce3c <memcpy>
	if (retval == CELLULAR_ERROR) {
 800f92c:	e7d6      	b.n	800f8dc <CS_get_device_info+0x7c>
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f92e:	f7ff fcf7 	bl	800f320 <CELLULAR_analyze_error_report.constprop.0>
	if (retval == CELLULAR_ERROR) {
 800f932:	2801      	cmp	r0, #1
			retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 800f934:	4604      	mov	r4, r0
	if (retval == CELLULAR_ERROR) {
 800f936:	d1d1      	bne.n	800f8dc <CS_get_device_info+0x7c>
 800f938:	e7b9      	b.n	800f8ae <CS_get_device_info+0x4e>
 800f93a:	bf00      	nop
 800f93c:	08027808 	.word	0x08027808
 800f940:	20003610 	.word	0x20003610
 800f944:	20008df8 	.word	0x20008df8
 800f948:	20003586 	.word	0x20003586
 800f94c:	08027824 	.word	0x08027824
 800f950:	20003584 	.word	0x20003584
 800f954:	20003778 	.word	0x20003778
 800f958:	08027862 	.word	0x08027862

0800f95c <CS_register_net>:
		CS_RegistrationStatus_t *p_reg_status) {
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	460c      	mov	r4, r1
 800f960:	4605      	mov	r5, r0
	PRINT_API("CS_register_net")
 800f962:	4934      	ldr	r1, [pc, #208]	; (800fa34 <CS_register_net+0xd8>)
 800f964:	4834      	ldr	r0, [pc, #208]	; (800fa38 <CS_register_net+0xdc>)
 800f966:	f00d fb17 	bl	801cf98 <strcpy>
 800f96a:	4833      	ldr	r0, [pc, #204]	; (800fa38 <CS_register_net+0xdc>)
 800f96c:	f008 fae2 	bl	8017f34 <crs_strlen>
 800f970:	4a31      	ldr	r2, [pc, #196]	; (800fa38 <CS_register_net+0xdc>)
 800f972:	b283      	uxth	r3, r0
 800f974:	2104      	movs	r1, #4
 800f976:	2000      	movs	r0, #0
 800f978:	f008 fb1a 	bl	8017fb0 <traceIF_itmPrint>
 800f97c:	482e      	ldr	r0, [pc, #184]	; (800fa38 <CS_register_net+0xdc>)
 800f97e:	f008 fad9 	bl	8017f34 <crs_strlen>
 800f982:	4a2d      	ldr	r2, [pc, #180]	; (800fa38 <CS_register_net+0xdc>)
 800f984:	b283      	uxth	r3, r0
 800f986:	2104      	movs	r1, #4
 800f988:	2000      	movs	r0, #0
 800f98a:	f008 fd37 	bl	80183fc <traceIF_uartPrint>
	p_reg_status->optional_fields_presence = CS_RSF_NONE;
 800f98e:	2300      	movs	r3, #0
 800f990:	8123      	strh	r3, [r4, #8]
	p_reg_status->CS_NetworkRegState = CS_NRS_UNKNOWN;
 800f992:	2304      	movs	r3, #4
 800f994:	80e3      	strh	r3, [r4, #6]
	p_reg_status->GPRS_NetworkRegState = CS_NRS_UNKNOWN;
 800f996:	80a3      	strh	r3, [r4, #4]
	p_reg_status->EPS_NetworkRegState = CS_NRS_UNKNOWN;
 800f998:	8063      	strh	r3, [r4, #2]
	(void) memcpy((void*) &cs_ctxt_operator, (void*) p_operator,
 800f99a:	2248      	movs	r2, #72	; 0x48
 800f99c:	4629      	mov	r1, r5
 800f99e:	4827      	ldr	r0, [pc, #156]	; (800fa3c <CS_register_net+0xe0>)
 800f9a0:	f00d fa4c 	bl	801ce3c <memcpy>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_OPERATORSELECT,
 800f9a4:	4b25      	ldr	r3, [pc, #148]	; (800fa3c <CS_register_net+0xe0>)
 800f9a6:	4826      	ldr	r0, [pc, #152]	; (800fa40 <CS_register_net+0xe4>)
 800f9a8:	2248      	movs	r2, #72	; 0x48
 800f9aa:	2116      	movs	r1, #22
 800f9ac:	f7f8 fab8 	bl	8007f20 <DATAPACK_writeStruct>
 800f9b0:	bb40      	cbnz	r0, 800fa04 <CS_register_net+0xa8>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_REGISTER_NET,
 800f9b2:	4824      	ldr	r0, [pc, #144]	; (800fa44 <CS_register_net+0xe8>)
 800f9b4:	4b24      	ldr	r3, [pc, #144]	; (800fa48 <CS_register_net+0xec>)
 800f9b6:	4a22      	ldr	r2, [pc, #136]	; (800fa40 <CS_register_net+0xe4>)
 800f9b8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f9bc:	2169      	movs	r1, #105	; 0x69
 800f9be:	f7f7 ff07 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800f9c2:	b9f8      	cbnz	r0, 800fa04 <CS_register_net+0xa8>
			if (DATAPACK_readStruct(&rsp_buf[0],
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	4820      	ldr	r0, [pc, #128]	; (800fa48 <CS_register_net+0xec>)
 800f9c8:	224e      	movs	r2, #78	; 0x4e
 800f9ca:	2117      	movs	r1, #23
 800f9cc:	f7f8 fb2c 	bl	8008028 <DATAPACK_readStruct>
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	b9b8      	cbnz	r0, 800fa04 <CS_register_net+0xa8>
				PRINT_DBG("<Cellular_Service> Network registration done")
 800f9d4:	491d      	ldr	r1, [pc, #116]	; (800fa4c <CS_register_net+0xf0>)
 800f9d6:	4818      	ldr	r0, [pc, #96]	; (800fa38 <CS_register_net+0xdc>)
 800f9d8:	f00d fade 	bl	801cf98 <strcpy>
 800f9dc:	4816      	ldr	r0, [pc, #88]	; (800fa38 <CS_register_net+0xdc>)
 800f9de:	f008 faa9 	bl	8017f34 <crs_strlen>
 800f9e2:	4a15      	ldr	r2, [pc, #84]	; (800fa38 <CS_register_net+0xdc>)
 800f9e4:	b283      	uxth	r3, r0
 800f9e6:	2102      	movs	r1, #2
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f008 fae1 	bl	8017fb0 <traceIF_itmPrint>
 800f9ee:	4812      	ldr	r0, [pc, #72]	; (800fa38 <CS_register_net+0xdc>)
 800f9f0:	f008 faa0 	bl	8017f34 <crs_strlen>
 800f9f4:	4a10      	ldr	r2, [pc, #64]	; (800fa38 <CS_register_net+0xdc>)
 800f9f6:	b283      	uxth	r3, r0
 800f9f8:	2102      	movs	r1, #2
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f008 fcfe 	bl	80183fc <traceIF_uartPrint>
}
 800fa00:	4620      	mov	r0, r4
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
		PRINT_ERR("<Cellular_Service> error during network registration ")
 800fa04:	4912      	ldr	r1, [pc, #72]	; (800fa50 <CS_register_net+0xf4>)
 800fa06:	480c      	ldr	r0, [pc, #48]	; (800fa38 <CS_register_net+0xdc>)
 800fa08:	f00d fac6 	bl	801cf98 <strcpy>
 800fa0c:	480a      	ldr	r0, [pc, #40]	; (800fa38 <CS_register_net+0xdc>)
 800fa0e:	f008 fa91 	bl	8017f34 <crs_strlen>
 800fa12:	4a09      	ldr	r2, [pc, #36]	; (800fa38 <CS_register_net+0xdc>)
 800fa14:	b283      	uxth	r3, r0
 800fa16:	2110      	movs	r1, #16
 800fa18:	2000      	movs	r0, #0
 800fa1a:	f008 fac9 	bl	8017fb0 <traceIF_itmPrint>
 800fa1e:	4806      	ldr	r0, [pc, #24]	; (800fa38 <CS_register_net+0xdc>)
 800fa20:	f008 fa88 	bl	8017f34 <crs_strlen>
 800fa24:	4a04      	ldr	r2, [pc, #16]	; (800fa38 <CS_register_net+0xdc>)
 800fa26:	b283      	uxth	r3, r0
 800fa28:	2110      	movs	r1, #16
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	f008 fce6 	bl	80183fc <traceIF_uartPrint>
 800fa30:	2401      	movs	r4, #1
 800fa32:	e7e5      	b.n	800fa00 <CS_register_net+0xa4>
 800fa34:	08027890 	.word	0x08027890
 800fa38:	20008df8 	.word	0x20008df8
 800fa3c:	20003724 	.word	0x20003724
 800fa40:	20003586 	.word	0x20003586
 800fa44:	20003584 	.word	0x20003584
 800fa48:	20003778 	.word	0x20003778
 800fa4c:	080278a9 	.word	0x080278a9
 800fa50:	080278db 	.word	0x080278db

0800fa54 <CS_subscribe_net_event>:
		cellular_urc_callback_t urc_callback) {
 800fa54:	b513      	push	{r0, r1, r4, lr}
 800fa56:	460c      	mov	r4, r1
 800fa58:	f88d 0007 	strb.w	r0, [sp, #7]
	PRINT_API("CS_subscribe_net_event")
 800fa5c:	4948      	ldr	r1, [pc, #288]	; (800fb80 <CS_subscribe_net_event+0x12c>)
 800fa5e:	4849      	ldr	r0, [pc, #292]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fa60:	f00d fa9a 	bl	801cf98 <strcpy>
 800fa64:	4847      	ldr	r0, [pc, #284]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fa66:	f008 fa65 	bl	8017f34 <crs_strlen>
 800fa6a:	4a46      	ldr	r2, [pc, #280]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fa6c:	b283      	uxth	r3, r0
 800fa6e:	2104      	movs	r1, #4
 800fa70:	2000      	movs	r0, #0
 800fa72:	f008 fa9d 	bl	8017fb0 <traceIF_itmPrint>
 800fa76:	4843      	ldr	r0, [pc, #268]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fa78:	f008 fa5c 	bl	8017f34 <crs_strlen>
 800fa7c:	4a41      	ldr	r2, [pc, #260]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fa7e:	b283      	uxth	r3, r0
 800fa80:	2104      	movs	r1, #4
 800fa82:	2000      	movs	r0, #0
 800fa84:	f008 fcba 	bl	80183fc <traceIF_uartPrint>
	if (event == CS_URCEVENT_EPS_NETWORK_REG_STAT) {
 800fa88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d118      	bne.n	800fac2 <CS_subscribe_net_event+0x6e>
		urc_eps_network_registration_callback = urc_callback;
 800fa90:	4a3d      	ldr	r2, [pc, #244]	; (800fb88 <CS_subscribe_net_event+0x134>)
 800fa92:	6014      	str	r4, [r2, #0]
		cs_ctxt_urc_subscription.eps_network_registration = CELLULAR_TRUE;
 800fa94:	4a3d      	ldr	r2, [pc, #244]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800fa96:	7013      	strb	r3, [r2, #0]
		if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_URC_EVENT,
 800fa98:	483d      	ldr	r0, [pc, #244]	; (800fb90 <CS_subscribe_net_event+0x13c>)
 800fa9a:	f10d 0307 	add.w	r3, sp, #7
 800fa9e:	2201      	movs	r2, #1
 800faa0:	2118      	movs	r1, #24
 800faa2:	f7f8 fa3d 	bl	8007f20 <DATAPACK_writeStruct>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d151      	bne.n	800fb4e <CS_subscribe_net_event+0xfa>
			err = AT_sendcmd(_Adapter_Handle,
 800faaa:	483a      	ldr	r0, [pc, #232]	; (800fb94 <CS_subscribe_net_event+0x140>)
 800faac:	4b3a      	ldr	r3, [pc, #232]	; (800fb98 <CS_subscribe_net_event+0x144>)
 800faae:	4a38      	ldr	r2, [pc, #224]	; (800fb90 <CS_subscribe_net_event+0x13c>)
 800fab0:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fab4:	216a      	movs	r1, #106	; 0x6a
 800fab6:	f7f7 fe8b 	bl	80077d0 <AT_sendcmd>
			if (err != ATSTATUS_OK) {
 800faba:	2800      	cmp	r0, #0
 800fabc:	d147      	bne.n	800fb4e <CS_subscribe_net_event+0xfa>
}
 800fabe:	b002      	add	sp, #8
 800fac0:	bd10      	pop	{r4, pc}
	} else if (event == CS_URCEVENT_GPRS_NETWORK_REG_STAT) {
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d105      	bne.n	800fad2 <CS_subscribe_net_event+0x7e>
		urc_gprs_network_registration_callback = urc_callback;
 800fac6:	4b35      	ldr	r3, [pc, #212]	; (800fb9c <CS_subscribe_net_event+0x148>)
 800fac8:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.gprs_network_registration = CELLULAR_TRUE;
 800faca:	4b30      	ldr	r3, [pc, #192]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800facc:	2201      	movs	r2, #1
 800face:	705a      	strb	r2, [r3, #1]
	if (retval != CELLULAR_ERROR) {
 800fad0:	e7e2      	b.n	800fa98 <CS_subscribe_net_event+0x44>
	} else if (event == CS_URCEVENT_CS_NETWORK_REG_STAT) {
 800fad2:	2b05      	cmp	r3, #5
 800fad4:	d105      	bne.n	800fae2 <CS_subscribe_net_event+0x8e>
		urc_cs_network_registration_callback = urc_callback;
 800fad6:	4b32      	ldr	r3, [pc, #200]	; (800fba0 <CS_subscribe_net_event+0x14c>)
 800fad8:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.cs_network_registration = CELLULAR_TRUE;
 800fada:	4b2c      	ldr	r3, [pc, #176]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800fadc:	2201      	movs	r2, #1
 800fade:	709a      	strb	r2, [r3, #2]
	if (retval != CELLULAR_ERROR) {
 800fae0:	e7da      	b.n	800fa98 <CS_subscribe_net_event+0x44>
	} else if (event == CS_URCEVENT_EPS_LOCATION_INFO) {
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d105      	bne.n	800faf2 <CS_subscribe_net_event+0x9e>
		urc_eps_location_info_callback = urc_callback;
 800fae6:	4b2f      	ldr	r3, [pc, #188]	; (800fba4 <CS_subscribe_net_event+0x150>)
 800fae8:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.eps_location_info = CELLULAR_TRUE;
 800faea:	4b28      	ldr	r3, [pc, #160]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800faec:	2201      	movs	r2, #1
 800faee:	70da      	strb	r2, [r3, #3]
	if (retval != CELLULAR_ERROR) {
 800faf0:	e7d2      	b.n	800fa98 <CS_subscribe_net_event+0x44>
	} else if (event == CS_URCEVENT_GPRS_LOCATION_INFO) {
 800faf2:	2b04      	cmp	r3, #4
 800faf4:	d105      	bne.n	800fb02 <CS_subscribe_net_event+0xae>
		urc_gprs_location_info_callback = urc_callback;
 800faf6:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <CS_subscribe_net_event+0x154>)
 800faf8:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.gprs_location_info = CELLULAR_TRUE;
 800fafa:	4b24      	ldr	r3, [pc, #144]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800fafc:	2201      	movs	r2, #1
 800fafe:	711a      	strb	r2, [r3, #4]
	if (retval != CELLULAR_ERROR) {
 800fb00:	e7ca      	b.n	800fa98 <CS_subscribe_net_event+0x44>
	} else if (event == CS_URCEVENT_CS_LOCATION_INFO) {
 800fb02:	2b06      	cmp	r3, #6
 800fb04:	d105      	bne.n	800fb12 <CS_subscribe_net_event+0xbe>
		urc_cs_location_info_callback = urc_callback;
 800fb06:	4b29      	ldr	r3, [pc, #164]	; (800fbac <CS_subscribe_net_event+0x158>)
 800fb08:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.cs_location_info = CELLULAR_TRUE;
 800fb0a:	4b20      	ldr	r3, [pc, #128]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	715a      	strb	r2, [r3, #5]
	if (retval != CELLULAR_ERROR) {
 800fb10:	e7c2      	b.n	800fa98 <CS_subscribe_net_event+0x44>
	} else if (event == CS_URCEVENT_SIGNAL_QUALITY) {
 800fb12:	2b07      	cmp	r3, #7
 800fb14:	d105      	bne.n	800fb22 <CS_subscribe_net_event+0xce>
		urc_signal_quality_callback = urc_callback;
 800fb16:	4b26      	ldr	r3, [pc, #152]	; (800fbb0 <CS_subscribe_net_event+0x15c>)
 800fb18:	601c      	str	r4, [r3, #0]
		cs_ctxt_urc_subscription.signal_quality = CELLULAR_TRUE;
 800fb1a:	4b1c      	ldr	r3, [pc, #112]	; (800fb8c <CS_subscribe_net_event+0x138>)
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	719a      	strb	r2, [r3, #6]
	if (retval != CELLULAR_ERROR) {
 800fb20:	e7ba      	b.n	800fa98 <CS_subscribe_net_event+0x44>
		PRINT_ERR("<Cellular_Service> invalid event")
 800fb22:	4924      	ldr	r1, [pc, #144]	; (800fbb4 <CS_subscribe_net_event+0x160>)
 800fb24:	4817      	ldr	r0, [pc, #92]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb26:	f00d fa37 	bl	801cf98 <strcpy>
 800fb2a:	4816      	ldr	r0, [pc, #88]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb2c:	f008 fa02 	bl	8017f34 <crs_strlen>
 800fb30:	4a14      	ldr	r2, [pc, #80]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb32:	b283      	uxth	r3, r0
 800fb34:	2110      	movs	r1, #16
 800fb36:	2000      	movs	r0, #0
 800fb38:	f008 fa3a 	bl	8017fb0 <traceIF_itmPrint>
 800fb3c:	4811      	ldr	r0, [pc, #68]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb3e:	f008 f9f9 	bl	8017f34 <crs_strlen>
 800fb42:	4a10      	ldr	r2, [pc, #64]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb44:	b283      	uxth	r3, r0
 800fb46:	2110      	movs	r1, #16
 800fb48:	2000      	movs	r0, #0
 800fb4a:	f008 fc57 	bl	80183fc <traceIF_uartPrint>
		PRINT_ERR("<Cellular_Service> error when subscribing event")
 800fb4e:	491a      	ldr	r1, [pc, #104]	; (800fbb8 <CS_subscribe_net_event+0x164>)
 800fb50:	480c      	ldr	r0, [pc, #48]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb52:	f00d fa21 	bl	801cf98 <strcpy>
 800fb56:	480b      	ldr	r0, [pc, #44]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb58:	f008 f9ec 	bl	8017f34 <crs_strlen>
 800fb5c:	4a09      	ldr	r2, [pc, #36]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb5e:	b283      	uxth	r3, r0
 800fb60:	2110      	movs	r1, #16
 800fb62:	2000      	movs	r0, #0
 800fb64:	f008 fa24 	bl	8017fb0 <traceIF_itmPrint>
 800fb68:	4806      	ldr	r0, [pc, #24]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb6a:	f008 f9e3 	bl	8017f34 <crs_strlen>
 800fb6e:	4a05      	ldr	r2, [pc, #20]	; (800fb84 <CS_subscribe_net_event+0x130>)
 800fb70:	b283      	uxth	r3, r0
 800fb72:	2110      	movs	r1, #16
 800fb74:	2000      	movs	r0, #0
 800fb76:	f008 fc41 	bl	80183fc <traceIF_uartPrint>
 800fb7a:	2001      	movs	r0, #1
 800fb7c:	e79f      	b.n	800fabe <CS_subscribe_net_event+0x6a>
 800fb7e:	bf00      	nop
 800fb80:	0802791c 	.word	0x0802791c
 800fb84:	20008df8 	.word	0x20008df8
 800fb88:	20003808 	.word	0x20003808
 800fb8c:	2000376c 	.word	0x2000376c
 800fb90:	20003586 	.word	0x20003586
 800fb94:	20003584 	.word	0x20003584
 800fb98:	20003778 	.word	0x20003778
 800fb9c:	20003810 	.word	0x20003810
 800fba0:	20003800 	.word	0x20003800
 800fba4:	20003804 	.word	0x20003804
 800fba8:	2000380c 	.word	0x2000380c
 800fbac:	200037fc 	.word	0x200037fc
 800fbb0:	20003838 	.word	0x20003838
 800fbb4:	0802793c 	.word	0x0802793c
 800fbb8:	08027968 	.word	0x08027968

0800fbbc <CS_subscribe_sim_event>:
		cellular_sim_event_callback_t sim_evt_callback) {
 800fbbc:	b538      	push	{r3, r4, r5, lr}
	PRINT_API("CS_subscribe_sim_event")
 800fbbe:	4c0e      	ldr	r4, [pc, #56]	; (800fbf8 <CS_subscribe_sim_event+0x3c>)
 800fbc0:	490e      	ldr	r1, [pc, #56]	; (800fbfc <CS_subscribe_sim_event+0x40>)
		cellular_sim_event_callback_t sim_evt_callback) {
 800fbc2:	4605      	mov	r5, r0
	PRINT_API("CS_subscribe_sim_event")
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f00d f9e7 	bl	801cf98 <strcpy>
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f008 f9b2 	bl	8017f34 <crs_strlen>
 800fbd0:	4622      	mov	r2, r4
 800fbd2:	b283      	uxth	r3, r0
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	f008 f9ea 	bl	8017fb0 <traceIF_itmPrint>
 800fbdc:	4620      	mov	r0, r4
 800fbde:	f008 f9a9 	bl	8017f34 <crs_strlen>
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	b283      	uxth	r3, r0
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	2000      	movs	r0, #0
 800fbea:	f008 fc07 	bl	80183fc <traceIF_uartPrint>
	urc_sim_event_callback = sim_evt_callback;
 800fbee:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <CS_subscribe_sim_event+0x44>)
}
 800fbf0:	2000      	movs	r0, #0
	urc_sim_event_callback = sim_evt_callback;
 800fbf2:	601d      	str	r5, [r3, #0]
}
 800fbf4:	bd38      	pop	{r3, r4, r5, pc}
 800fbf6:	bf00      	nop
 800fbf8:	20008df8 	.word	0x20008df8
 800fbfc:	080279a3 	.word	0x080279a3
 800fc00:	2000383c 	.word	0x2000383c

0800fc04 <CS_attach_PS_domain>:
CS_Status_t CS_attach_PS_domain(void) {
 800fc04:	b510      	push	{r4, lr}
	PRINT_API("CS_attach_PS_domain")
 800fc06:	492b      	ldr	r1, [pc, #172]	; (800fcb4 <CS_attach_PS_domain+0xb0>)
 800fc08:	482b      	ldr	r0, [pc, #172]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc0a:	f00d f9c5 	bl	801cf98 <strcpy>
 800fc0e:	482a      	ldr	r0, [pc, #168]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc10:	f008 f990 	bl	8017f34 <crs_strlen>
 800fc14:	4a28      	ldr	r2, [pc, #160]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc16:	b283      	uxth	r3, r0
 800fc18:	2104      	movs	r1, #4
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f008 f9c8 	bl	8017fb0 <traceIF_itmPrint>
 800fc20:	4825      	ldr	r0, [pc, #148]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc22:	f008 f987 	bl	8017f34 <crs_strlen>
 800fc26:	4a24      	ldr	r2, [pc, #144]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc28:	b283      	uxth	r3, r0
 800fc2a:	2104      	movs	r1, #4
 800fc2c:	2000      	movs	r0, #0
 800fc2e:	f008 fbe5 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_ATTACH_PS_DOMAIN,
 800fc32:	2300      	movs	r3, #0
 800fc34:	4821      	ldr	r0, [pc, #132]	; (800fcbc <CS_attach_PS_domain+0xb8>)
 800fc36:	461a      	mov	r2, r3
 800fc38:	2120      	movs	r1, #32
 800fc3a:	f7f8 f971 	bl	8007f20 <DATAPACK_writeStruct>
 800fc3e:	bb08      	cbnz	r0, 800fc84 <CS_attach_PS_domain+0x80>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_ATTACH_PS_DOMAIN,
 800fc40:	481f      	ldr	r0, [pc, #124]	; (800fcc0 <CS_attach_PS_domain+0xbc>)
 800fc42:	4b20      	ldr	r3, [pc, #128]	; (800fcc4 <CS_attach_PS_domain+0xc0>)
 800fc44:	4a1d      	ldr	r2, [pc, #116]	; (800fcbc <CS_attach_PS_domain+0xb8>)
 800fc46:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fc4a:	2170      	movs	r1, #112	; 0x70
 800fc4c:	f7f7 fdc0 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800fc50:	4604      	mov	r4, r0
 800fc52:	b9b8      	cbnz	r0, 800fc84 <CS_attach_PS_domain+0x80>
			PRINT_DBG("<Cellular_Service> attach PS domain done")
 800fc54:	491c      	ldr	r1, [pc, #112]	; (800fcc8 <CS_attach_PS_domain+0xc4>)
 800fc56:	4818      	ldr	r0, [pc, #96]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc58:	f00d f99e 	bl	801cf98 <strcpy>
 800fc5c:	4816      	ldr	r0, [pc, #88]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc5e:	f008 f969 	bl	8017f34 <crs_strlen>
 800fc62:	4a15      	ldr	r2, [pc, #84]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc64:	b283      	uxth	r3, r0
 800fc66:	2102      	movs	r1, #2
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f008 f9a1 	bl	8017fb0 <traceIF_itmPrint>
 800fc6e:	4812      	ldr	r0, [pc, #72]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc70:	f008 f960 	bl	8017f34 <crs_strlen>
 800fc74:	4a10      	ldr	r2, [pc, #64]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc76:	b283      	uxth	r3, r0
 800fc78:	2102      	movs	r1, #2
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f008 fbbe 	bl	80183fc <traceIF_uartPrint>
}
 800fc80:	4620      	mov	r0, r4
 800fc82:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when attaching PS domain")
 800fc84:	4911      	ldr	r1, [pc, #68]	; (800fccc <CS_attach_PS_domain+0xc8>)
 800fc86:	480c      	ldr	r0, [pc, #48]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc88:	f00d f986 	bl	801cf98 <strcpy>
 800fc8c:	480a      	ldr	r0, [pc, #40]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc8e:	f008 f951 	bl	8017f34 <crs_strlen>
 800fc92:	4a09      	ldr	r2, [pc, #36]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fc94:	b283      	uxth	r3, r0
 800fc96:	2110      	movs	r1, #16
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f008 f989 	bl	8017fb0 <traceIF_itmPrint>
 800fc9e:	4806      	ldr	r0, [pc, #24]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fca0:	f008 f948 	bl	8017f34 <crs_strlen>
 800fca4:	4a04      	ldr	r2, [pc, #16]	; (800fcb8 <CS_attach_PS_domain+0xb4>)
 800fca6:	b283      	uxth	r3, r0
 800fca8:	2110      	movs	r1, #16
 800fcaa:	2000      	movs	r0, #0
 800fcac:	f008 fba6 	bl	80183fc <traceIF_uartPrint>
 800fcb0:	2401      	movs	r4, #1
 800fcb2:	e7e5      	b.n	800fc80 <CS_attach_PS_domain+0x7c>
 800fcb4:	080279c3 	.word	0x080279c3
 800fcb8:	20008df8 	.word	0x20008df8
 800fcbc:	20003586 	.word	0x20003586
 800fcc0:	20003584 	.word	0x20003584
 800fcc4:	20003778 	.word	0x20003778
 800fcc8:	080279e0 	.word	0x080279e0
 800fccc:	08027a0e 	.word	0x08027a0e

0800fcd0 <CS_detach_PS_domain>:
CS_Status_t CS_detach_PS_domain(void) {
 800fcd0:	b510      	push	{r4, lr}
	PRINT_API("CS_detach_PS_domain")
 800fcd2:	492b      	ldr	r1, [pc, #172]	; (800fd80 <CS_detach_PS_domain+0xb0>)
 800fcd4:	482b      	ldr	r0, [pc, #172]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fcd6:	f00d f95f 	bl	801cf98 <strcpy>
 800fcda:	482a      	ldr	r0, [pc, #168]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fcdc:	f008 f92a 	bl	8017f34 <crs_strlen>
 800fce0:	4a28      	ldr	r2, [pc, #160]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fce2:	b283      	uxth	r3, r0
 800fce4:	2104      	movs	r1, #4
 800fce6:	2000      	movs	r0, #0
 800fce8:	f008 f962 	bl	8017fb0 <traceIF_itmPrint>
 800fcec:	4825      	ldr	r0, [pc, #148]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fcee:	f008 f921 	bl	8017f34 <crs_strlen>
 800fcf2:	4a24      	ldr	r2, [pc, #144]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fcf4:	b283      	uxth	r3, r0
 800fcf6:	2104      	movs	r1, #4
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	f008 fb7f 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_DETACH_PS_DOMAIN,
 800fcfe:	2300      	movs	r3, #0
 800fd00:	4821      	ldr	r0, [pc, #132]	; (800fd88 <CS_detach_PS_domain+0xb8>)
 800fd02:	461a      	mov	r2, r3
 800fd04:	2121      	movs	r1, #33	; 0x21
 800fd06:	f7f8 f90b 	bl	8007f20 <DATAPACK_writeStruct>
 800fd0a:	bb08      	cbnz	r0, 800fd50 <CS_detach_PS_domain+0x80>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_DETACH_PS_DOMAIN,
 800fd0c:	481f      	ldr	r0, [pc, #124]	; (800fd8c <CS_detach_PS_domain+0xbc>)
 800fd0e:	4b20      	ldr	r3, [pc, #128]	; (800fd90 <CS_detach_PS_domain+0xc0>)
 800fd10:	4a1d      	ldr	r2, [pc, #116]	; (800fd88 <CS_detach_PS_domain+0xb8>)
 800fd12:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fd16:	2171      	movs	r1, #113	; 0x71
 800fd18:	f7f7 fd5a 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	b9b8      	cbnz	r0, 800fd50 <CS_detach_PS_domain+0x80>
			PRINT_DBG("<Cellular_Service> detach PS domain done")
 800fd20:	491c      	ldr	r1, [pc, #112]	; (800fd94 <CS_detach_PS_domain+0xc4>)
 800fd22:	4818      	ldr	r0, [pc, #96]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd24:	f00d f938 	bl	801cf98 <strcpy>
 800fd28:	4816      	ldr	r0, [pc, #88]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd2a:	f008 f903 	bl	8017f34 <crs_strlen>
 800fd2e:	4a15      	ldr	r2, [pc, #84]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd30:	b283      	uxth	r3, r0
 800fd32:	2102      	movs	r1, #2
 800fd34:	4620      	mov	r0, r4
 800fd36:	f008 f93b 	bl	8017fb0 <traceIF_itmPrint>
 800fd3a:	4812      	ldr	r0, [pc, #72]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd3c:	f008 f8fa 	bl	8017f34 <crs_strlen>
 800fd40:	4a10      	ldr	r2, [pc, #64]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd42:	b283      	uxth	r3, r0
 800fd44:	2102      	movs	r1, #2
 800fd46:	4620      	mov	r0, r4
 800fd48:	f008 fb58 	bl	80183fc <traceIF_uartPrint>
}
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when detaching PS domain")
 800fd50:	4911      	ldr	r1, [pc, #68]	; (800fd98 <CS_detach_PS_domain+0xc8>)
 800fd52:	480c      	ldr	r0, [pc, #48]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd54:	f00d f920 	bl	801cf98 <strcpy>
 800fd58:	480a      	ldr	r0, [pc, #40]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd5a:	f008 f8eb 	bl	8017f34 <crs_strlen>
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd60:	b283      	uxth	r3, r0
 800fd62:	2110      	movs	r1, #16
 800fd64:	2000      	movs	r0, #0
 800fd66:	f008 f923 	bl	8017fb0 <traceIF_itmPrint>
 800fd6a:	4806      	ldr	r0, [pc, #24]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd6c:	f008 f8e2 	bl	8017f34 <crs_strlen>
 800fd70:	4a04      	ldr	r2, [pc, #16]	; (800fd84 <CS_detach_PS_domain+0xb4>)
 800fd72:	b283      	uxth	r3, r0
 800fd74:	2110      	movs	r1, #16
 800fd76:	2000      	movs	r0, #0
 800fd78:	f008 fb40 	bl	80183fc <traceIF_uartPrint>
 800fd7c:	2401      	movs	r4, #1
 800fd7e:	e7e5      	b.n	800fd4c <CS_detach_PS_domain+0x7c>
 800fd80:	08027a4b 	.word	0x08027a4b
 800fd84:	20008df8 	.word	0x20008df8
 800fd88:	20003586 	.word	0x20003586
 800fd8c:	20003584 	.word	0x20003584
 800fd90:	20003778 	.word	0x20003778
 800fd94:	08027a68 	.word	0x08027a68
 800fd98:	08027a96 	.word	0x08027a96

0800fd9c <CS_get_attach_status>:
CS_Status_t CS_get_attach_status(CS_PSattach_t *p_attach) {
 800fd9c:	b538      	push	{r3, r4, r5, lr}
	PRINT_API("CS_get_attachstatus")
 800fd9e:	4930      	ldr	r1, [pc, #192]	; (800fe60 <CS_get_attach_status+0xc4>)
CS_Status_t CS_get_attach_status(CS_PSattach_t *p_attach) {
 800fda0:	4605      	mov	r5, r0
	PRINT_API("CS_get_attachstatus")
 800fda2:	4830      	ldr	r0, [pc, #192]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fda4:	f00d f8f8 	bl	801cf98 <strcpy>
 800fda8:	482e      	ldr	r0, [pc, #184]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fdaa:	f008 f8c3 	bl	8017f34 <crs_strlen>
 800fdae:	4a2d      	ldr	r2, [pc, #180]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fdb0:	b283      	uxth	r3, r0
 800fdb2:	2104      	movs	r1, #4
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	f008 f8fb 	bl	8017fb0 <traceIF_itmPrint>
 800fdba:	482a      	ldr	r0, [pc, #168]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fdbc:	f008 f8ba 	bl	8017f34 <crs_strlen>
 800fdc0:	4a28      	ldr	r2, [pc, #160]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fdc2:	b283      	uxth	r3, r0
 800fdc4:	2104      	movs	r1, #4
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f008 fb18 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE, (uint16_t) 0U,
 800fdcc:	2300      	movs	r3, #0
 800fdce:	4826      	ldr	r0, [pc, #152]	; (800fe68 <CS_get_attach_status+0xcc>)
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	2104      	movs	r1, #4
 800fdd4:	f7f8 f8a4 	bl	8007f20 <DATAPACK_writeStruct>
 800fdd8:	bb48      	cbnz	r0, 800fe2e <CS_get_attach_status+0x92>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_GET_ATTACHSTATUS,
 800fdda:	4824      	ldr	r0, [pc, #144]	; (800fe6c <CS_get_attach_status+0xd0>)
 800fddc:	4b24      	ldr	r3, [pc, #144]	; (800fe70 <CS_get_attach_status+0xd4>)
 800fdde:	4a22      	ldr	r2, [pc, #136]	; (800fe68 <CS_get_attach_status+0xcc>)
 800fde0:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fde4:	216d      	movs	r1, #109	; 0x6d
 800fde6:	f7f7 fcf3 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800fdea:	bb00      	cbnz	r0, 800fe2e <CS_get_attach_status+0x92>
			if (DATAPACK_readStruct(&rsp_buf[0], (uint16_t) CSMT_ATTACHSTATUS,
 800fdec:	4820      	ldr	r0, [pc, #128]	; (800fe70 <CS_get_attach_status+0xd4>)
 800fdee:	462b      	mov	r3, r5
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	2115      	movs	r1, #21
 800fdf4:	f7f8 f918 	bl	8008028 <DATAPACK_readStruct>
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	b9c0      	cbnz	r0, 800fe2e <CS_get_attach_status+0x92>
				PRINT_DBG("<Cellular_Service> Attachment status received = %d",
 800fdfc:	782a      	ldrb	r2, [r5, #0]
 800fdfe:	491d      	ldr	r1, [pc, #116]	; (800fe74 <CS_get_attach_status+0xd8>)
 800fe00:	4818      	ldr	r0, [pc, #96]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe02:	f00d f859 	bl	801ceb8 <sprintf>
 800fe06:	4817      	ldr	r0, [pc, #92]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe08:	f008 f894 	bl	8017f34 <crs_strlen>
 800fe0c:	4a15      	ldr	r2, [pc, #84]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe0e:	b283      	uxth	r3, r0
 800fe10:	2102      	movs	r1, #2
 800fe12:	4620      	mov	r0, r4
 800fe14:	f008 f8cc 	bl	8017fb0 <traceIF_itmPrint>
 800fe18:	4812      	ldr	r0, [pc, #72]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe1a:	f008 f88b 	bl	8017f34 <crs_strlen>
 800fe1e:	4a11      	ldr	r2, [pc, #68]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe20:	b283      	uxth	r3, r0
 800fe22:	2102      	movs	r1, #2
 800fe24:	4620      	mov	r0, r4
 800fe26:	f008 fae9 	bl	80183fc <traceIF_uartPrint>
}
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	bd38      	pop	{r3, r4, r5, pc}
		PRINT_ERR("<Cellular_Service> error when getting attachment status")
 800fe2e:	4912      	ldr	r1, [pc, #72]	; (800fe78 <CS_get_attach_status+0xdc>)
 800fe30:	480c      	ldr	r0, [pc, #48]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe32:	f00d f8b1 	bl	801cf98 <strcpy>
 800fe36:	480b      	ldr	r0, [pc, #44]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe38:	f008 f87c 	bl	8017f34 <crs_strlen>
 800fe3c:	4a09      	ldr	r2, [pc, #36]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe3e:	b283      	uxth	r3, r0
 800fe40:	2110      	movs	r1, #16
 800fe42:	2000      	movs	r0, #0
 800fe44:	f008 f8b4 	bl	8017fb0 <traceIF_itmPrint>
 800fe48:	4806      	ldr	r0, [pc, #24]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe4a:	f008 f873 	bl	8017f34 <crs_strlen>
 800fe4e:	4a05      	ldr	r2, [pc, #20]	; (800fe64 <CS_get_attach_status+0xc8>)
 800fe50:	b283      	uxth	r3, r0
 800fe52:	2110      	movs	r1, #16
 800fe54:	2000      	movs	r0, #0
 800fe56:	f008 fad1 	bl	80183fc <traceIF_uartPrint>
 800fe5a:	2401      	movs	r4, #1
 800fe5c:	e7e5      	b.n	800fe2a <CS_get_attach_status+0x8e>
 800fe5e:	bf00      	nop
 800fe60:	08027ad3 	.word	0x08027ad3
 800fe64:	20008df8 	.word	0x20008df8
 800fe68:	20003586 	.word	0x20003586
 800fe6c:	20003584 	.word	0x20003584
 800fe70:	20003778 	.word	0x20003778
 800fe74:	08027af0 	.word	0x08027af0
 800fe78:	08027b28 	.word	0x08027b28

0800fe7c <CS_get_net_status>:
CS_Status_t CS_get_net_status(CS_RegistrationStatus_t *p_reg_status) {
 800fe7c:	b510      	push	{r4, lr}
	PRINT_API("CS_get_netstatus")
 800fe7e:	4931      	ldr	r1, [pc, #196]	; (800ff44 <CS_get_net_status+0xc8>)
CS_Status_t CS_get_net_status(CS_RegistrationStatus_t *p_reg_status) {
 800fe80:	4604      	mov	r4, r0
	PRINT_API("CS_get_netstatus")
 800fe82:	4831      	ldr	r0, [pc, #196]	; (800ff48 <CS_get_net_status+0xcc>)
 800fe84:	f00d f888 	bl	801cf98 <strcpy>
 800fe88:	482f      	ldr	r0, [pc, #188]	; (800ff48 <CS_get_net_status+0xcc>)
 800fe8a:	f008 f853 	bl	8017f34 <crs_strlen>
 800fe8e:	4a2e      	ldr	r2, [pc, #184]	; (800ff48 <CS_get_net_status+0xcc>)
 800fe90:	b283      	uxth	r3, r0
 800fe92:	2104      	movs	r1, #4
 800fe94:	2000      	movs	r0, #0
 800fe96:	f008 f88b 	bl	8017fb0 <traceIF_itmPrint>
 800fe9a:	482b      	ldr	r0, [pc, #172]	; (800ff48 <CS_get_net_status+0xcc>)
 800fe9c:	f008 f84a 	bl	8017f34 <crs_strlen>
 800fea0:	4a29      	ldr	r2, [pc, #164]	; (800ff48 <CS_get_net_status+0xcc>)
 800fea2:	b283      	uxth	r3, r0
 800fea4:	2104      	movs	r1, #4
 800fea6:	2000      	movs	r0, #0
 800fea8:	f008 faa8 	bl	80183fc <traceIF_uartPrint>
	p_reg_status->CS_NetworkRegState = CS_NRS_UNKNOWN;
 800feac:	2104      	movs	r1, #4
	p_reg_status->optional_fields_presence = CS_RSF_NONE;
 800feae:	2300      	movs	r3, #0
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE, (uint16_t) 0U,
 800feb0:	4826      	ldr	r0, [pc, #152]	; (800ff4c <CS_get_net_status+0xd0>)
	p_reg_status->optional_fields_presence = CS_RSF_NONE;
 800feb2:	8123      	strh	r3, [r4, #8]
	p_reg_status->CS_NetworkRegState = CS_NRS_UNKNOWN;
 800feb4:	80e1      	strh	r1, [r4, #6]
	p_reg_status->GPRS_NetworkRegState = CS_NRS_UNKNOWN;
 800feb6:	80a1      	strh	r1, [r4, #4]
	p_reg_status->EPS_NetworkRegState = CS_NRS_UNKNOWN;
 800feb8:	8061      	strh	r1, [r4, #2]
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE, (uint16_t) 0U,
 800feba:	461a      	mov	r2, r3
 800febc:	f7f8 f830 	bl	8007f20 <DATAPACK_writeStruct>
 800fec0:	bb40      	cbnz	r0, 800ff14 <CS_get_net_status+0x98>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_GET_NETSTATUS,
 800fec2:	4823      	ldr	r0, [pc, #140]	; (800ff50 <CS_get_net_status+0xd4>)
 800fec4:	4b23      	ldr	r3, [pc, #140]	; (800ff54 <CS_get_net_status+0xd8>)
 800fec6:	4a21      	ldr	r2, [pc, #132]	; (800ff4c <CS_get_net_status+0xd0>)
 800fec8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fecc:	216c      	movs	r1, #108	; 0x6c
 800fece:	f7f7 fc7f 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800fed2:	b9f8      	cbnz	r0, 800ff14 <CS_get_net_status+0x98>
			if (DATAPACK_readStruct(&rsp_buf[0],
 800fed4:	4623      	mov	r3, r4
 800fed6:	481f      	ldr	r0, [pc, #124]	; (800ff54 <CS_get_net_status+0xd8>)
 800fed8:	224e      	movs	r2, #78	; 0x4e
 800feda:	2117      	movs	r1, #23
 800fedc:	f7f8 f8a4 	bl	8008028 <DATAPACK_readStruct>
 800fee0:	4604      	mov	r4, r0
 800fee2:	b9b8      	cbnz	r0, 800ff14 <CS_get_net_status+0x98>
				PRINT_DBG("<Cellular_Service> Net status received")
 800fee4:	491c      	ldr	r1, [pc, #112]	; (800ff58 <CS_get_net_status+0xdc>)
 800fee6:	4818      	ldr	r0, [pc, #96]	; (800ff48 <CS_get_net_status+0xcc>)
 800fee8:	f00d f856 	bl	801cf98 <strcpy>
 800feec:	4816      	ldr	r0, [pc, #88]	; (800ff48 <CS_get_net_status+0xcc>)
 800feee:	f008 f821 	bl	8017f34 <crs_strlen>
 800fef2:	4a15      	ldr	r2, [pc, #84]	; (800ff48 <CS_get_net_status+0xcc>)
 800fef4:	b283      	uxth	r3, r0
 800fef6:	2102      	movs	r1, #2
 800fef8:	4620      	mov	r0, r4
 800fefa:	f008 f859 	bl	8017fb0 <traceIF_itmPrint>
 800fefe:	4812      	ldr	r0, [pc, #72]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff00:	f008 f818 	bl	8017f34 <crs_strlen>
 800ff04:	4a10      	ldr	r2, [pc, #64]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff06:	b283      	uxth	r3, r0
 800ff08:	2102      	movs	r1, #2
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	f008 fa76 	bl	80183fc <traceIF_uartPrint>
}
 800ff10:	4620      	mov	r0, r4
 800ff12:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when getting net status")
 800ff14:	4911      	ldr	r1, [pc, #68]	; (800ff5c <CS_get_net_status+0xe0>)
 800ff16:	480c      	ldr	r0, [pc, #48]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff18:	f00d f83e 	bl	801cf98 <strcpy>
 800ff1c:	480a      	ldr	r0, [pc, #40]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff1e:	f008 f809 	bl	8017f34 <crs_strlen>
 800ff22:	4a09      	ldr	r2, [pc, #36]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff24:	b283      	uxth	r3, r0
 800ff26:	2110      	movs	r1, #16
 800ff28:	2000      	movs	r0, #0
 800ff2a:	f008 f841 	bl	8017fb0 <traceIF_itmPrint>
 800ff2e:	4806      	ldr	r0, [pc, #24]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff30:	f008 f800 	bl	8017f34 <crs_strlen>
 800ff34:	4a04      	ldr	r2, [pc, #16]	; (800ff48 <CS_get_net_status+0xcc>)
 800ff36:	b283      	uxth	r3, r0
 800ff38:	2110      	movs	r1, #16
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	f008 fa5e 	bl	80183fc <traceIF_uartPrint>
 800ff40:	2401      	movs	r4, #1
 800ff42:	e7e5      	b.n	800ff10 <CS_get_net_status+0x94>
 800ff44:	08027b6b 	.word	0x08027b6b
 800ff48:	20008df8 	.word	0x20008df8
 800ff4c:	20003586 	.word	0x20003586
 800ff50:	20003584 	.word	0x20003584
 800ff54:	20003778 	.word	0x20003778
 800ff58:	08027b85 	.word	0x08027b85
 800ff5c:	08027bb1 	.word	0x08027bb1

0800ff60 <CS_get_signal_quality>:
CS_Status_t CS_get_signal_quality(CS_SignalQuality_t *p_sig_qual) {
 800ff60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	PRINT_API("CS_get_signal_quality")
 800ff62:	492f      	ldr	r1, [pc, #188]	; (8010020 <CS_get_signal_quality+0xc0>)
CS_Status_t CS_get_signal_quality(CS_SignalQuality_t *p_sig_qual) {
 800ff64:	4605      	mov	r5, r0
	PRINT_API("CS_get_signal_quality")
 800ff66:	482f      	ldr	r0, [pc, #188]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ff68:	f00d f816 	bl	801cf98 <strcpy>
 800ff6c:	482d      	ldr	r0, [pc, #180]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ff6e:	f007 ffe1 	bl	8017f34 <crs_strlen>
 800ff72:	4a2c      	ldr	r2, [pc, #176]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ff74:	b283      	uxth	r3, r0
 800ff76:	2104      	movs	r1, #4
 800ff78:	2000      	movs	r0, #0
 800ff7a:	f008 f819 	bl	8017fb0 <traceIF_itmPrint>
 800ff7e:	4829      	ldr	r0, [pc, #164]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ff80:	f007 ffd8 	bl	8017f34 <crs_strlen>
 800ff84:	4a27      	ldr	r2, [pc, #156]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ff86:	b283      	uxth	r3, r0
 800ff88:	2104      	movs	r1, #4
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	f008 fa36 	bl	80183fc <traceIF_uartPrint>
	(void) memset((void*) &local_sig_qual, 0, sizeof(CS_SignalQuality_t));
 800ff90:	2300      	movs	r3, #0
	if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_SIGNAL_QUALITY,
 800ff92:	4825      	ldr	r0, [pc, #148]	; (8010028 <CS_get_signal_quality+0xc8>)
	(void) memset((void*) &local_sig_qual, 0, sizeof(CS_SignalQuality_t));
 800ff94:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_SIGNAL_QUALITY,
 800ff98:	aa01      	add	r2, sp, #4
 800ff9a:	211f      	movs	r1, #31
 800ff9c:	f7f7 ff94 	bl	8007ec8 <DATAPACK_writePtr>
 800ffa0:	bb28      	cbnz	r0, 800ffee <CS_get_signal_quality+0x8e>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_GET_SIGNAL_QUALITY,
 800ffa2:	4822      	ldr	r0, [pc, #136]	; (801002c <CS_get_signal_quality+0xcc>)
 800ffa4:	4b22      	ldr	r3, [pc, #136]	; (8010030 <CS_get_signal_quality+0xd0>)
 800ffa6:	4a20      	ldr	r2, [pc, #128]	; (8010028 <CS_get_signal_quality+0xc8>)
 800ffa8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ffac:	216e      	movs	r1, #110	; 0x6e
 800ffae:	f7f7 fc0f 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	b9d8      	cbnz	r0, 800ffee <CS_get_signal_quality+0x8e>
			PRINT_DBG("<Cellular_Service> Signal quality information received")
 800ffb6:	491f      	ldr	r1, [pc, #124]	; (8010034 <CS_get_signal_quality+0xd4>)
 800ffb8:	481a      	ldr	r0, [pc, #104]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ffba:	f00c ffed 	bl	801cf98 <strcpy>
 800ffbe:	4819      	ldr	r0, [pc, #100]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ffc0:	f007 ffb8 	bl	8017f34 <crs_strlen>
 800ffc4:	4a17      	ldr	r2, [pc, #92]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ffc6:	b283      	uxth	r3, r0
 800ffc8:	2102      	movs	r1, #2
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f007 fff0 	bl	8017fb0 <traceIF_itmPrint>
 800ffd0:	4814      	ldr	r0, [pc, #80]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ffd2:	f007 ffaf 	bl	8017f34 <crs_strlen>
 800ffd6:	4a13      	ldr	r2, [pc, #76]	; (8010024 <CS_get_signal_quality+0xc4>)
 800ffd8:	b283      	uxth	r3, r0
 800ffda:	2102      	movs	r1, #2
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f008 fa0d 	bl	80183fc <traceIF_uartPrint>
			(void) memcpy((void*) p_sig_qual, (void*) &local_sig_qual,
 800ffe2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ffe6:	802b      	strh	r3, [r5, #0]
}
 800ffe8:	4620      	mov	r0, r4
 800ffea:	b003      	add	sp, #12
 800ffec:	bd30      	pop	{r4, r5, pc}
		PRINT_ERR("<Cellular_Service> error when getting signal quality")
 800ffee:	4912      	ldr	r1, [pc, #72]	; (8010038 <CS_get_signal_quality+0xd8>)
 800fff0:	480c      	ldr	r0, [pc, #48]	; (8010024 <CS_get_signal_quality+0xc4>)
 800fff2:	f00c ffd1 	bl	801cf98 <strcpy>
 800fff6:	480b      	ldr	r0, [pc, #44]	; (8010024 <CS_get_signal_quality+0xc4>)
 800fff8:	f007 ff9c 	bl	8017f34 <crs_strlen>
 800fffc:	4a09      	ldr	r2, [pc, #36]	; (8010024 <CS_get_signal_quality+0xc4>)
 800fffe:	b283      	uxth	r3, r0
 8010000:	2110      	movs	r1, #16
 8010002:	2000      	movs	r0, #0
 8010004:	f007 ffd4 	bl	8017fb0 <traceIF_itmPrint>
 8010008:	4806      	ldr	r0, [pc, #24]	; (8010024 <CS_get_signal_quality+0xc4>)
 801000a:	f007 ff93 	bl	8017f34 <crs_strlen>
 801000e:	4a05      	ldr	r2, [pc, #20]	; (8010024 <CS_get_signal_quality+0xc4>)
 8010010:	b283      	uxth	r3, r0
 8010012:	2110      	movs	r1, #16
 8010014:	2000      	movs	r0, #0
 8010016:	f008 f9f1 	bl	80183fc <traceIF_uartPrint>
 801001a:	2401      	movs	r4, #1
 801001c:	e7e4      	b.n	800ffe8 <CS_get_signal_quality+0x88>
 801001e:	bf00      	nop
 8010020:	08027bed 	.word	0x08027bed
 8010024:	20008df8 	.word	0x20008df8
 8010028:	20003586 	.word	0x20003586
 801002c:	20003584 	.word	0x20003584
 8010030:	20003778 	.word	0x20003778
 8010034:	08027c0c 	.word	0x08027c0c
 8010038:	08027c48 	.word	0x08027c48

0801003c <CS_activate_pdn>:
CS_Status_t CS_activate_pdn(CS_PDN_conf_id_t cid) {
 801003c:	b513      	push	{r0, r1, r4, lr}
 801003e:	4602      	mov	r2, r0
	PRINT_API("CS_activate_pdn for cid=%d", cid)
 8010040:	492f      	ldr	r1, [pc, #188]	; (8010100 <CS_activate_pdn+0xc4>)
CS_Status_t CS_activate_pdn(CS_PDN_conf_id_t cid) {
 8010042:	f88d 0007 	strb.w	r0, [sp, #7]
	PRINT_API("CS_activate_pdn for cid=%d", cid)
 8010046:	482f      	ldr	r0, [pc, #188]	; (8010104 <CS_activate_pdn+0xc8>)
 8010048:	f00c ff36 	bl	801ceb8 <sprintf>
 801004c:	482d      	ldr	r0, [pc, #180]	; (8010104 <CS_activate_pdn+0xc8>)
 801004e:	f007 ff71 	bl	8017f34 <crs_strlen>
 8010052:	4a2c      	ldr	r2, [pc, #176]	; (8010104 <CS_activate_pdn+0xc8>)
 8010054:	b283      	uxth	r3, r0
 8010056:	2104      	movs	r1, #4
 8010058:	2000      	movs	r0, #0
 801005a:	f007 ffa9 	bl	8017fb0 <traceIF_itmPrint>
 801005e:	4829      	ldr	r0, [pc, #164]	; (8010104 <CS_activate_pdn+0xc8>)
 8010060:	f007 ff68 	bl	8017f34 <crs_strlen>
 8010064:	4a27      	ldr	r2, [pc, #156]	; (8010104 <CS_activate_pdn+0xc8>)
 8010066:	b283      	uxth	r3, r0
 8010068:	2104      	movs	r1, #4
 801006a:	2000      	movs	r0, #0
 801006c:	f008 f9c6 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_ACTIVATE_PDN,
 8010070:	4825      	ldr	r0, [pc, #148]	; (8010108 <CS_activate_pdn+0xcc>)
 8010072:	f10d 0307 	add.w	r3, sp, #7
 8010076:	2201      	movs	r2, #1
 8010078:	2123      	movs	r1, #35	; 0x23
 801007a:	f7f7 ff51 	bl	8007f20 <DATAPACK_writeStruct>
 801007e:	bb20      	cbnz	r0, 80100ca <CS_activate_pdn+0x8e>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_ACTIVATE_PDN,
 8010080:	4822      	ldr	r0, [pc, #136]	; (801010c <CS_activate_pdn+0xd0>)
 8010082:	4b23      	ldr	r3, [pc, #140]	; (8010110 <CS_activate_pdn+0xd4>)
 8010084:	4a20      	ldr	r2, [pc, #128]	; (8010108 <CS_activate_pdn+0xcc>)
 8010086:	f9b0 0000 	ldrsh.w	r0, [r0]
 801008a:	216f      	movs	r1, #111	; 0x6f
 801008c:	f7f7 fba0 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 8010090:	4604      	mov	r4, r0
 8010092:	b9d0      	cbnz	r0, 80100ca <CS_activate_pdn+0x8e>
			PRINT_DBG("<Cellular_Service> PDN %d connected", cid)
 8010094:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010098:	491e      	ldr	r1, [pc, #120]	; (8010114 <CS_activate_pdn+0xd8>)
 801009a:	481a      	ldr	r0, [pc, #104]	; (8010104 <CS_activate_pdn+0xc8>)
 801009c:	f00c ff0c 	bl	801ceb8 <sprintf>
 80100a0:	4818      	ldr	r0, [pc, #96]	; (8010104 <CS_activate_pdn+0xc8>)
 80100a2:	f007 ff47 	bl	8017f34 <crs_strlen>
 80100a6:	4a17      	ldr	r2, [pc, #92]	; (8010104 <CS_activate_pdn+0xc8>)
 80100a8:	b283      	uxth	r3, r0
 80100aa:	2102      	movs	r1, #2
 80100ac:	4620      	mov	r0, r4
 80100ae:	f007 ff7f 	bl	8017fb0 <traceIF_itmPrint>
 80100b2:	4814      	ldr	r0, [pc, #80]	; (8010104 <CS_activate_pdn+0xc8>)
 80100b4:	f007 ff3e 	bl	8017f34 <crs_strlen>
 80100b8:	4a12      	ldr	r2, [pc, #72]	; (8010104 <CS_activate_pdn+0xc8>)
 80100ba:	b283      	uxth	r3, r0
 80100bc:	2102      	movs	r1, #2
 80100be:	4620      	mov	r0, r4
 80100c0:	f008 f99c 	bl	80183fc <traceIF_uartPrint>
}
 80100c4:	4620      	mov	r0, r4
 80100c6:	b002      	add	sp, #8
 80100c8:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when PDN %cid activation", cid)
 80100ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80100ce:	4912      	ldr	r1, [pc, #72]	; (8010118 <CS_activate_pdn+0xdc>)
 80100d0:	480c      	ldr	r0, [pc, #48]	; (8010104 <CS_activate_pdn+0xc8>)
 80100d2:	f00c fef1 	bl	801ceb8 <sprintf>
 80100d6:	480b      	ldr	r0, [pc, #44]	; (8010104 <CS_activate_pdn+0xc8>)
 80100d8:	f007 ff2c 	bl	8017f34 <crs_strlen>
 80100dc:	4a09      	ldr	r2, [pc, #36]	; (8010104 <CS_activate_pdn+0xc8>)
 80100de:	b283      	uxth	r3, r0
 80100e0:	2110      	movs	r1, #16
 80100e2:	2000      	movs	r0, #0
 80100e4:	f007 ff64 	bl	8017fb0 <traceIF_itmPrint>
 80100e8:	4806      	ldr	r0, [pc, #24]	; (8010104 <CS_activate_pdn+0xc8>)
 80100ea:	f007 ff23 	bl	8017f34 <crs_strlen>
 80100ee:	4a05      	ldr	r2, [pc, #20]	; (8010104 <CS_activate_pdn+0xc8>)
 80100f0:	b283      	uxth	r3, r0
 80100f2:	2110      	movs	r1, #16
 80100f4:	2000      	movs	r0, #0
 80100f6:	f008 f981 	bl	80183fc <traceIF_uartPrint>
 80100fa:	2401      	movs	r4, #1
 80100fc:	e7e2      	b.n	80100c4 <CS_activate_pdn+0x88>
 80100fe:	bf00      	nop
 8010100:	08027c88 	.word	0x08027c88
 8010104:	20008df8 	.word	0x20008df8
 8010108:	20003586 	.word	0x20003586
 801010c:	20003584 	.word	0x20003584
 8010110:	20003778 	.word	0x20003778
 8010114:	08027cac 	.word	0x08027cac
 8010118:	08027cd5 	.word	0x08027cd5

0801011c <CS_define_pdn>:
		CS_PDN_configuration_t *pdn_conf) {
 801011c:	b570      	push	{r4, r5, r6, lr}
 801011e:	4604      	mov	r4, r0
 8010120:	b0a2      	sub	sp, #136	; 0x88
 8010122:	460e      	mov	r6, r1
 8010124:	4615      	mov	r5, r2
	PRINT_API("CS_define_pdn for cid=%d", cid)
 8010126:	4944      	ldr	r1, [pc, #272]	; (8010238 <CS_define_pdn+0x11c>)
 8010128:	4602      	mov	r2, r0
 801012a:	4844      	ldr	r0, [pc, #272]	; (801023c <CS_define_pdn+0x120>)
 801012c:	f00c fec4 	bl	801ceb8 <sprintf>
 8010130:	4842      	ldr	r0, [pc, #264]	; (801023c <CS_define_pdn+0x120>)
 8010132:	f007 feff 	bl	8017f34 <crs_strlen>
 8010136:	4a41      	ldr	r2, [pc, #260]	; (801023c <CS_define_pdn+0x120>)
 8010138:	b283      	uxth	r3, r0
 801013a:	2104      	movs	r1, #4
 801013c:	2000      	movs	r0, #0
 801013e:	f007 ff37 	bl	8017fb0 <traceIF_itmPrint>
 8010142:	483e      	ldr	r0, [pc, #248]	; (801023c <CS_define_pdn+0x120>)
 8010144:	f007 fef6 	bl	8017f34 <crs_strlen>
 8010148:	4a3c      	ldr	r2, [pc, #240]	; (801023c <CS_define_pdn+0x120>)
 801014a:	b283      	uxth	r3, r0
 801014c:	2104      	movs	r1, #4
 801014e:	2000      	movs	r0, #0
 8010150:	f008 f954 	bl	80183fc <traceIF_uartPrint>
	if ((cid < CS_PDN_USER_CONFIG_1) || (cid > CS_PDN_USER_CONFIG_5)) {
 8010154:	1e63      	subs	r3, r4, #1
 8010156:	2b04      	cmp	r3, #4
 8010158:	d92f      	bls.n	80101ba <CS_define_pdn+0x9e>
		PRINT_ERR(
 801015a:	4939      	ldr	r1, [pc, #228]	; (8010240 <CS_define_pdn+0x124>)
 801015c:	4837      	ldr	r0, [pc, #220]	; (801023c <CS_define_pdn+0x120>)
 801015e:	4622      	mov	r2, r4
 8010160:	f00c feaa 	bl	801ceb8 <sprintf>
 8010164:	4835      	ldr	r0, [pc, #212]	; (801023c <CS_define_pdn+0x120>)
 8010166:	f007 fee5 	bl	8017f34 <crs_strlen>
 801016a:	4a34      	ldr	r2, [pc, #208]	; (801023c <CS_define_pdn+0x120>)
 801016c:	b283      	uxth	r3, r0
 801016e:	2110      	movs	r1, #16
 8010170:	2000      	movs	r0, #0
 8010172:	f007 ff1d 	bl	8017fb0 <traceIF_itmPrint>
 8010176:	4831      	ldr	r0, [pc, #196]	; (801023c <CS_define_pdn+0x120>)
 8010178:	f007 fedc 	bl	8017f34 <crs_strlen>
 801017c:	4a2f      	ldr	r2, [pc, #188]	; (801023c <CS_define_pdn+0x120>)
 801017e:	b283      	uxth	r3, r0
 8010180:	2110      	movs	r1, #16
 8010182:	2000      	movs	r0, #0
 8010184:	f008 f93a 	bl	80183fc <traceIF_uartPrint>
		PRINT_ERR("<Cellular_Service> error when defining PDN %d", cid)
 8010188:	492e      	ldr	r1, [pc, #184]	; (8010244 <CS_define_pdn+0x128>)
 801018a:	482c      	ldr	r0, [pc, #176]	; (801023c <CS_define_pdn+0x120>)
 801018c:	4622      	mov	r2, r4
 801018e:	f00c fe93 	bl	801ceb8 <sprintf>
 8010192:	482a      	ldr	r0, [pc, #168]	; (801023c <CS_define_pdn+0x120>)
 8010194:	f007 fece 	bl	8017f34 <crs_strlen>
 8010198:	4a28      	ldr	r2, [pc, #160]	; (801023c <CS_define_pdn+0x120>)
 801019a:	b283      	uxth	r3, r0
 801019c:	2110      	movs	r1, #16
 801019e:	2000      	movs	r0, #0
 80101a0:	f007 ff06 	bl	8017fb0 <traceIF_itmPrint>
 80101a4:	4825      	ldr	r0, [pc, #148]	; (801023c <CS_define_pdn+0x120>)
 80101a6:	f007 fec5 	bl	8017f34 <crs_strlen>
 80101aa:	4a24      	ldr	r2, [pc, #144]	; (801023c <CS_define_pdn+0x120>)
 80101ac:	b283      	uxth	r3, r0
 80101ae:	2110      	movs	r1, #16
 80101b0:	2000      	movs	r0, #0
 80101b2:	f008 f923 	bl	80183fc <traceIF_uartPrint>
 80101b6:	2001      	movs	r0, #1
 80101b8:	e027      	b.n	801020a <CS_define_pdn+0xee>
	} else if (pdn_conf == NULL) {
 80101ba:	b925      	cbnz	r5, 80101c6 <CS_define_pdn+0xaa>
		PRINT_ERR("<Cellular_Service> pdn_conf must be non NULL")
 80101bc:	4922      	ldr	r1, [pc, #136]	; (8010248 <CS_define_pdn+0x12c>)
 80101be:	481f      	ldr	r0, [pc, #124]	; (801023c <CS_define_pdn+0x120>)
 80101c0:	f00c feea 	bl	801cf98 <strcpy>
 80101c4:	e7ce      	b.n	8010164 <CS_define_pdn+0x48>
	} else if (apn == NULL) {
 80101c6:	bb16      	cbnz	r6, 801020e <CS_define_pdn+0xf2>
		(void) memset((void*) &pdn_infos, 0, sizeof(csint_pdn_infos_t));
 80101c8:	2242      	movs	r2, #66	; 0x42
 80101ca:	4631      	mov	r1, r6
 80101cc:	a801      	add	r0, sp, #4
 80101ce:	f00c fe43 	bl	801ce58 <memset>
		pdn_infos.conf_id = cid;
 80101d2:	f88d 4004 	strb.w	r4, [sp, #4]
		pdn_infos.apn_present = CELLULAR_FALSE;
 80101d6:	f88d 6005 	strb.w	r6, [sp, #5]
		(void) memcpy((void*) &pdn_infos.pdn_conf, (void*) pdn_conf,
 80101da:	2241      	movs	r2, #65	; 0x41
 80101dc:	4629      	mov	r1, r5
 80101de:	f10d 0046 	add.w	r0, sp, #70	; 0x46
 80101e2:	f00c fe2b 	bl	801ce3c <memcpy>
		if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_DEFINE_PDN,
 80101e6:	4819      	ldr	r0, [pc, #100]	; (801024c <CS_define_pdn+0x130>)
 80101e8:	aa01      	add	r2, sp, #4
 80101ea:	2125      	movs	r1, #37	; 0x25
 80101ec:	f7f7 fe6c 	bl	8007ec8 <DATAPACK_writePtr>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	d1c9      	bne.n	8010188 <CS_define_pdn+0x6c>
			err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_DEFINE_PDN,
 80101f4:	4816      	ldr	r0, [pc, #88]	; (8010250 <CS_define_pdn+0x134>)
 80101f6:	4b17      	ldr	r3, [pc, #92]	; (8010254 <CS_define_pdn+0x138>)
 80101f8:	4a14      	ldr	r2, [pc, #80]	; (801024c <CS_define_pdn+0x130>)
 80101fa:	f9b0 0000 	ldrsh.w	r0, [r0]
 80101fe:	2176      	movs	r1, #118	; 0x76
 8010200:	f7f7 fae6 	bl	80077d0 <AT_sendcmd>
			if (err == ATSTATUS_OK) {
 8010204:	2800      	cmp	r0, #0
 8010206:	d1bf      	bne.n	8010188 <CS_define_pdn+0x6c>
				retval = CELLULAR_OK;
 8010208:	2000      	movs	r0, #0
}
 801020a:	b022      	add	sp, #136	; 0x88
 801020c:	bd70      	pop	{r4, r5, r6, pc}
		(void) memset((void*) &pdn_infos, 0, sizeof(csint_pdn_infos_t));
 801020e:	2283      	movs	r2, #131	; 0x83
 8010210:	2100      	movs	r1, #0
 8010212:	a801      	add	r0, sp, #4
 8010214:	f00c fe20 	bl	801ce58 <memset>
		pdn_infos.apn_present = CELLULAR_TRUE;
 8010218:	2301      	movs	r3, #1
		(void) memcpy((void*) &pdn_infos.apn[0], (const CS_CHAR_t*) apn,
 801021a:	4630      	mov	r0, r6
		pdn_infos.conf_id = cid;
 801021c:	f88d 4004 	strb.w	r4, [sp, #4]
		pdn_infos.apn_present = CELLULAR_TRUE;
 8010220:	f88d 3005 	strb.w	r3, [sp, #5]
		(void) memcpy((void*) &pdn_infos.apn[0], (const CS_CHAR_t*) apn,
 8010224:	f7ef fff6 	bl	8000214 <strlen>
 8010228:	4631      	mov	r1, r6
 801022a:	4602      	mov	r2, r0
 801022c:	f10d 0006 	add.w	r0, sp, #6
 8010230:	f00c fe04 	bl	801ce3c <memcpy>
		(void) memcpy((void*) &pdn_infos.pdn_conf, (void*) pdn_conf,
 8010234:	e7d1      	b.n	80101da <CS_define_pdn+0xbe>
 8010236:	bf00      	nop
 8010238:	08027d12 	.word	0x08027d12
 801023c:	20008df8 	.word	0x20008df8
 8010240:	08027d34 	.word	0x08027d34
 8010244:	08027dbe 	.word	0x08027dbe
 8010248:	08027d86 	.word	0x08027d86
 801024c:	20003586 	.word	0x20003586
 8010250:	20003584 	.word	0x20003584
 8010254:	20003778 	.word	0x20003778

08010258 <CS_set_default_pdn>:
CS_Status_t CS_set_default_pdn(CS_PDN_conf_id_t cid) {
 8010258:	b513      	push	{r0, r1, r4, lr}
 801025a:	4602      	mov	r2, r0
	PRINT_API("CS_set_default_pdn (conf_id=%d)", cid)
 801025c:	492f      	ldr	r1, [pc, #188]	; (801031c <CS_set_default_pdn+0xc4>)
CS_Status_t CS_set_default_pdn(CS_PDN_conf_id_t cid) {
 801025e:	f88d 0007 	strb.w	r0, [sp, #7]
	PRINT_API("CS_set_default_pdn (conf_id=%d)", cid)
 8010262:	482f      	ldr	r0, [pc, #188]	; (8010320 <CS_set_default_pdn+0xc8>)
 8010264:	f00c fe28 	bl	801ceb8 <sprintf>
 8010268:	482d      	ldr	r0, [pc, #180]	; (8010320 <CS_set_default_pdn+0xc8>)
 801026a:	f007 fe63 	bl	8017f34 <crs_strlen>
 801026e:	4a2c      	ldr	r2, [pc, #176]	; (8010320 <CS_set_default_pdn+0xc8>)
 8010270:	b283      	uxth	r3, r0
 8010272:	2104      	movs	r1, #4
 8010274:	2000      	movs	r0, #0
 8010276:	f007 fe9b 	bl	8017fb0 <traceIF_itmPrint>
 801027a:	4829      	ldr	r0, [pc, #164]	; (8010320 <CS_set_default_pdn+0xc8>)
 801027c:	f007 fe5a 	bl	8017f34 <crs_strlen>
 8010280:	4a27      	ldr	r2, [pc, #156]	; (8010320 <CS_set_default_pdn+0xc8>)
 8010282:	b283      	uxth	r3, r0
 8010284:	2104      	movs	r1, #4
 8010286:	2000      	movs	r0, #0
 8010288:	f008 f8b8 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_SET_DEFAULT_PDN,
 801028c:	4825      	ldr	r0, [pc, #148]	; (8010324 <CS_set_default_pdn+0xcc>)
 801028e:	f10d 0307 	add.w	r3, sp, #7
 8010292:	2201      	movs	r2, #1
 8010294:	2126      	movs	r1, #38	; 0x26
 8010296:	f7f7 fe43 	bl	8007f20 <DATAPACK_writeStruct>
 801029a:	bb20      	cbnz	r0, 80102e6 <CS_set_default_pdn+0x8e>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_SET_DEFAULT_PDN,
 801029c:	4822      	ldr	r0, [pc, #136]	; (8010328 <CS_set_default_pdn+0xd0>)
 801029e:	4b23      	ldr	r3, [pc, #140]	; (801032c <CS_set_default_pdn+0xd4>)
 80102a0:	4a20      	ldr	r2, [pc, #128]	; (8010324 <CS_set_default_pdn+0xcc>)
 80102a2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80102a6:	2177      	movs	r1, #119	; 0x77
 80102a8:	f7f7 fa92 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 80102ac:	4604      	mov	r4, r0
 80102ae:	b9d0      	cbnz	r0, 80102e6 <CS_set_default_pdn+0x8e>
			PRINT_DBG("<Cellular_Service> PDN %d set as default", cid)
 80102b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102b4:	491e      	ldr	r1, [pc, #120]	; (8010330 <CS_set_default_pdn+0xd8>)
 80102b6:	481a      	ldr	r0, [pc, #104]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102b8:	f00c fdfe 	bl	801ceb8 <sprintf>
 80102bc:	4818      	ldr	r0, [pc, #96]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102be:	f007 fe39 	bl	8017f34 <crs_strlen>
 80102c2:	4a17      	ldr	r2, [pc, #92]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102c4:	b283      	uxth	r3, r0
 80102c6:	2102      	movs	r1, #2
 80102c8:	4620      	mov	r0, r4
 80102ca:	f007 fe71 	bl	8017fb0 <traceIF_itmPrint>
 80102ce:	4814      	ldr	r0, [pc, #80]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102d0:	f007 fe30 	bl	8017f34 <crs_strlen>
 80102d4:	4a12      	ldr	r2, [pc, #72]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102d6:	b283      	uxth	r3, r0
 80102d8:	2102      	movs	r1, #2
 80102da:	4620      	mov	r0, r4
 80102dc:	f008 f88e 	bl	80183fc <traceIF_uartPrint>
}
 80102e0:	4620      	mov	r0, r4
 80102e2:	b002      	add	sp, #8
 80102e4:	bd10      	pop	{r4, pc}
		PRINT_ERR("<Cellular_Service> error when setting default PDN %d", cid)
 80102e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102ea:	4912      	ldr	r1, [pc, #72]	; (8010334 <CS_set_default_pdn+0xdc>)
 80102ec:	480c      	ldr	r0, [pc, #48]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102ee:	f00c fde3 	bl	801ceb8 <sprintf>
 80102f2:	480b      	ldr	r0, [pc, #44]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102f4:	f007 fe1e 	bl	8017f34 <crs_strlen>
 80102f8:	4a09      	ldr	r2, [pc, #36]	; (8010320 <CS_set_default_pdn+0xc8>)
 80102fa:	b283      	uxth	r3, r0
 80102fc:	2110      	movs	r1, #16
 80102fe:	2000      	movs	r0, #0
 8010300:	f007 fe56 	bl	8017fb0 <traceIF_itmPrint>
 8010304:	4806      	ldr	r0, [pc, #24]	; (8010320 <CS_set_default_pdn+0xc8>)
 8010306:	f007 fe15 	bl	8017f34 <crs_strlen>
 801030a:	4a05      	ldr	r2, [pc, #20]	; (8010320 <CS_set_default_pdn+0xc8>)
 801030c:	b283      	uxth	r3, r0
 801030e:	2110      	movs	r1, #16
 8010310:	2000      	movs	r0, #0
 8010312:	f008 f873 	bl	80183fc <traceIF_uartPrint>
 8010316:	2401      	movs	r4, #1
 8010318:	e7e2      	b.n	80102e0 <CS_set_default_pdn+0x88>
 801031a:	bf00      	nop
 801031c:	08027df7 	.word	0x08027df7
 8010320:	20008df8 	.word	0x20008df8
 8010324:	20003586 	.word	0x20003586
 8010328:	20003584 	.word	0x20003584
 801032c:	20003778 	.word	0x20003778
 8010330:	08027e20 	.word	0x08027e20
 8010334:	08027e4e 	.word	0x08027e4e

08010338 <CS_get_dev_IP_address>:
		CS_IPaddrType_t *ip_addr_type, CS_CHAR_t *p_ip_addr_value) {
 8010338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801033a:	b095      	sub	sp, #84	; 0x54
 801033c:	460e      	mov	r6, r1
 801033e:	f88d 0007 	strb.w	r0, [sp, #7]
	PRINT_API("CS_get_dev_IP_address (for conf_id=%d)", cid)
 8010342:	4945      	ldr	r1, [pc, #276]	; (8010458 <CS_get_dev_IP_address+0x120>)
		CS_IPaddrType_t *ip_addr_type, CS_CHAR_t *p_ip_addr_value) {
 8010344:	4615      	mov	r5, r2
	PRINT_API("CS_get_dev_IP_address (for conf_id=%d)", cid)
 8010346:	4602      	mov	r2, r0
 8010348:	4844      	ldr	r0, [pc, #272]	; (801045c <CS_get_dev_IP_address+0x124>)
 801034a:	f00c fdb5 	bl	801ceb8 <sprintf>
 801034e:	4843      	ldr	r0, [pc, #268]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010350:	f007 fdf0 	bl	8017f34 <crs_strlen>
 8010354:	4a41      	ldr	r2, [pc, #260]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010356:	b283      	uxth	r3, r0
 8010358:	2104      	movs	r1, #4
 801035a:	2000      	movs	r0, #0
 801035c:	f007 fe28 	bl	8017fb0 <traceIF_itmPrint>
 8010360:	483e      	ldr	r0, [pc, #248]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010362:	f007 fde7 	bl	8017f34 <crs_strlen>
 8010366:	4a3d      	ldr	r2, [pc, #244]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010368:	b283      	uxth	r3, r0
 801036a:	2104      	movs	r1, #4
 801036c:	2000      	movs	r0, #0
 801036e:	f008 f845 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_GET_IP_ADDRESS,
 8010372:	483b      	ldr	r0, [pc, #236]	; (8010460 <CS_get_dev_IP_address+0x128>)
 8010374:	f10d 0307 	add.w	r3, sp, #7
 8010378:	2201      	movs	r2, #1
 801037a:	2127      	movs	r1, #39	; 0x27
 801037c:	f7f7 fdd0 	bl	8007f20 <DATAPACK_writeStruct>
 8010380:	2800      	cmp	r0, #0
 8010382:	d151      	bne.n	8010428 <CS_get_dev_IP_address+0xf0>
		err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_GET_IP_ADDRESS,
 8010384:	4837      	ldr	r0, [pc, #220]	; (8010464 <CS_get_dev_IP_address+0x12c>)
 8010386:	4b38      	ldr	r3, [pc, #224]	; (8010468 <CS_get_dev_IP_address+0x130>)
 8010388:	4a35      	ldr	r2, [pc, #212]	; (8010460 <CS_get_dev_IP_address+0x128>)
 801038a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801038e:	2175      	movs	r1, #117	; 0x75
 8010390:	f7f7 fa1e 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 8010394:	2800      	cmp	r0, #0
 8010396:	d147      	bne.n	8010428 <CS_get_dev_IP_address+0xf0>
			if (DATAPACK_readStruct(&rsp_buf[0], (uint16_t) CSMT_GET_IP_ADDRESS,
 8010398:	4833      	ldr	r0, [pc, #204]	; (8010468 <CS_get_dev_IP_address+0x130>)
 801039a:	ab03      	add	r3, sp, #12
 801039c:	2241      	movs	r2, #65	; 0x41
 801039e:	2127      	movs	r1, #39	; 0x27
 80103a0:	f7f7 fe42 	bl	8008028 <DATAPACK_readStruct>
 80103a4:	4604      	mov	r4, r0
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d13e      	bne.n	8010428 <CS_get_dev_IP_address+0xf0>
				PRINT_DBG("<Cellular_Service> IP address information received")
 80103aa:	4930      	ldr	r1, [pc, #192]	; (801046c <CS_get_dev_IP_address+0x134>)
 80103ac:	482b      	ldr	r0, [pc, #172]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103ae:	f00c fdf3 	bl	801cf98 <strcpy>
 80103b2:	482a      	ldr	r0, [pc, #168]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103b4:	f007 fdbe 	bl	8017f34 <crs_strlen>
 80103b8:	4a28      	ldr	r2, [pc, #160]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103ba:	b283      	uxth	r3, r0
 80103bc:	2102      	movs	r1, #2
 80103be:	4620      	mov	r0, r4
 80103c0:	f007 fdf6 	bl	8017fb0 <traceIF_itmPrint>
 80103c4:	4825      	ldr	r0, [pc, #148]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103c6:	f007 fdb5 	bl	8017f34 <crs_strlen>
 80103ca:	4a24      	ldr	r2, [pc, #144]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103cc:	b283      	uxth	r3, r0
 80103ce:	2102      	movs	r1, #2
 80103d0:	4620      	mov	r0, r4
 80103d2:	f008 f813 	bl	80183fc <traceIF_uartPrint>
				*ip_addr_type = ip_addr_info.ip_addr_type;
 80103d6:	f89d 700c 	ldrb.w	r7, [sp, #12]
 80103da:	7037      	strb	r7, [r6, #0]
				(void) memcpy((void*) p_ip_addr_value,
 80103dc:	f10d 000d 	add.w	r0, sp, #13
 80103e0:	f7ef ff18 	bl	8000214 <strlen>
 80103e4:	f10d 010d 	add.w	r1, sp, #13
 80103e8:	4602      	mov	r2, r0
 80103ea:	4628      	mov	r0, r5
 80103ec:	f00c fd26 	bl	801ce3c <memcpy>
				PRINT_DBG("<Cellular_Service> IP address = %s (type = %d)",
 80103f0:	491f      	ldr	r1, [pc, #124]	; (8010470 <CS_get_dev_IP_address+0x138>)
 80103f2:	481a      	ldr	r0, [pc, #104]	; (801045c <CS_get_dev_IP_address+0x124>)
 80103f4:	463b      	mov	r3, r7
 80103f6:	f10d 020d 	add.w	r2, sp, #13
 80103fa:	f00c fd5d 	bl	801ceb8 <sprintf>
 80103fe:	4817      	ldr	r0, [pc, #92]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010400:	f007 fd98 	bl	8017f34 <crs_strlen>
 8010404:	4a15      	ldr	r2, [pc, #84]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010406:	b283      	uxth	r3, r0
 8010408:	2102      	movs	r1, #2
 801040a:	4620      	mov	r0, r4
 801040c:	f007 fdd0 	bl	8017fb0 <traceIF_itmPrint>
 8010410:	4812      	ldr	r0, [pc, #72]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010412:	f007 fd8f 	bl	8017f34 <crs_strlen>
 8010416:	4a11      	ldr	r2, [pc, #68]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010418:	b283      	uxth	r3, r0
 801041a:	2102      	movs	r1, #2
 801041c:	4620      	mov	r0, r4
 801041e:	f007 ffed 	bl	80183fc <traceIF_uartPrint>
}
 8010422:	4620      	mov	r0, r4
 8010424:	b015      	add	sp, #84	; 0x54
 8010426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PRINT_ERR(
 8010428:	4912      	ldr	r1, [pc, #72]	; (8010474 <CS_get_dev_IP_address+0x13c>)
 801042a:	480c      	ldr	r0, [pc, #48]	; (801045c <CS_get_dev_IP_address+0x124>)
 801042c:	f00c fdb4 	bl	801cf98 <strcpy>
 8010430:	480a      	ldr	r0, [pc, #40]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010432:	f007 fd7f 	bl	8017f34 <crs_strlen>
 8010436:	4a09      	ldr	r2, [pc, #36]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010438:	b283      	uxth	r3, r0
 801043a:	2110      	movs	r1, #16
 801043c:	2000      	movs	r0, #0
 801043e:	f007 fdb7 	bl	8017fb0 <traceIF_itmPrint>
 8010442:	4806      	ldr	r0, [pc, #24]	; (801045c <CS_get_dev_IP_address+0x124>)
 8010444:	f007 fd76 	bl	8017f34 <crs_strlen>
 8010448:	4a04      	ldr	r2, [pc, #16]	; (801045c <CS_get_dev_IP_address+0x124>)
 801044a:	b283      	uxth	r3, r0
 801044c:	2110      	movs	r1, #16
 801044e:	2000      	movs	r0, #0
 8010450:	f007 ffd4 	bl	80183fc <traceIF_uartPrint>
 8010454:	2401      	movs	r4, #1
 8010456:	e7e4      	b.n	8010422 <CS_get_dev_IP_address+0xea>
 8010458:	08027e8e 	.word	0x08027e8e
 801045c:	20008df8 	.word	0x20008df8
 8010460:	20003586 	.word	0x20003586
 8010464:	20003584 	.word	0x20003584
 8010468:	20003778 	.word	0x20003778
 801046c:	08027ebe 	.word	0x08027ebe
 8010470:	08027ef6 	.word	0x08027ef6
 8010474:	08027f2a 	.word	0x08027f2a

08010478 <CS_subscribe_modem_event>:
		cellular_modem_event_callback_t modem_evt_cb) {
 8010478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801047a:	460d      	mov	r5, r1
 801047c:	f8ad 0006 	strh.w	r0, [sp, #6]
	PRINT_API("CS_subscribe_modem_event")
 8010480:	492d      	ldr	r1, [pc, #180]	; (8010538 <CS_subscribe_modem_event+0xc0>)
 8010482:	482e      	ldr	r0, [pc, #184]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010484:	f00c fd88 	bl	801cf98 <strcpy>
 8010488:	482c      	ldr	r0, [pc, #176]	; (801053c <CS_subscribe_modem_event+0xc4>)
 801048a:	f007 fd53 	bl	8017f34 <crs_strlen>
 801048e:	4a2b      	ldr	r2, [pc, #172]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010490:	b283      	uxth	r3, r0
 8010492:	2104      	movs	r1, #4
 8010494:	2000      	movs	r0, #0
 8010496:	f007 fd8b 	bl	8017fb0 <traceIF_itmPrint>
 801049a:	4828      	ldr	r0, [pc, #160]	; (801053c <CS_subscribe_modem_event+0xc4>)
 801049c:	f007 fd4a 	bl	8017f34 <crs_strlen>
 80104a0:	4a26      	ldr	r2, [pc, #152]	; (801053c <CS_subscribe_modem_event+0xc4>)
 80104a2:	b283      	uxth	r3, r0
 80104a4:	2104      	movs	r1, #4
 80104a6:	2000      	movs	r0, #0
 80104a8:	f007 ffa8 	bl	80183fc <traceIF_uartPrint>
	if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_MODEM_EVENT,
 80104ac:	4824      	ldr	r0, [pc, #144]	; (8010540 <CS_subscribe_modem_event+0xc8>)
 80104ae:	f10d 0306 	add.w	r3, sp, #6
 80104b2:	2202      	movs	r2, #2
 80104b4:	212b      	movs	r1, #43	; 0x2b
 80104b6:	f7f7 fd33 	bl	8007f20 <DATAPACK_writeStruct>
 80104ba:	bb20      	cbnz	r0, 8010506 <CS_subscribe_modem_event+0x8e>
		err = AT_sendcmd(_Adapter_Handle,
 80104bc:	4821      	ldr	r0, [pc, #132]	; (8010544 <CS_subscribe_modem_event+0xcc>)
 80104be:	4b22      	ldr	r3, [pc, #136]	; (8010548 <CS_subscribe_modem_event+0xd0>)
 80104c0:	4a1f      	ldr	r2, [pc, #124]	; (8010540 <CS_subscribe_modem_event+0xc8>)
 80104c2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80104c6:	2185      	movs	r1, #133	; 0x85
 80104c8:	f7f7 f982 	bl	80077d0 <AT_sendcmd>
		if (err == ATSTATUS_OK) {
 80104cc:	4604      	mov	r4, r0
 80104ce:	b9d0      	cbnz	r0, 8010506 <CS_subscribe_modem_event+0x8e>
			urc_modem_event_callback = modem_evt_cb;
 80104d0:	4b1e      	ldr	r3, [pc, #120]	; (801054c <CS_subscribe_modem_event+0xd4>)
			PRINT_DBG("<Cellular_Service> modem events subscribed")
 80104d2:	491f      	ldr	r1, [pc, #124]	; (8010550 <CS_subscribe_modem_event+0xd8>)
 80104d4:	4819      	ldr	r0, [pc, #100]	; (801053c <CS_subscribe_modem_event+0xc4>)
			urc_modem_event_callback = modem_evt_cb;
 80104d6:	601d      	str	r5, [r3, #0]
			PRINT_DBG("<Cellular_Service> modem events subscribed")
 80104d8:	f00c fd5e 	bl	801cf98 <strcpy>
 80104dc:	4817      	ldr	r0, [pc, #92]	; (801053c <CS_subscribe_modem_event+0xc4>)
 80104de:	f007 fd29 	bl	8017f34 <crs_strlen>
 80104e2:	4a16      	ldr	r2, [pc, #88]	; (801053c <CS_subscribe_modem_event+0xc4>)
 80104e4:	b283      	uxth	r3, r0
 80104e6:	2102      	movs	r1, #2
 80104e8:	4620      	mov	r0, r4
 80104ea:	f007 fd61 	bl	8017fb0 <traceIF_itmPrint>
 80104ee:	4813      	ldr	r0, [pc, #76]	; (801053c <CS_subscribe_modem_event+0xc4>)
 80104f0:	f007 fd20 	bl	8017f34 <crs_strlen>
 80104f4:	4a11      	ldr	r2, [pc, #68]	; (801053c <CS_subscribe_modem_event+0xc4>)
 80104f6:	b283      	uxth	r3, r0
 80104f8:	2102      	movs	r1, #2
 80104fa:	4620      	mov	r0, r4
 80104fc:	f007 ff7e 	bl	80183fc <traceIF_uartPrint>
}
 8010500:	4620      	mov	r0, r4
 8010502:	b003      	add	sp, #12
 8010504:	bd30      	pop	{r4, r5, pc}
		PRINT_ERR("<Cellular_Service> error when subscribing modem event")
 8010506:	4913      	ldr	r1, [pc, #76]	; (8010554 <CS_subscribe_modem_event+0xdc>)
 8010508:	480c      	ldr	r0, [pc, #48]	; (801053c <CS_subscribe_modem_event+0xc4>)
 801050a:	f00c fd45 	bl	801cf98 <strcpy>
 801050e:	480b      	ldr	r0, [pc, #44]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010510:	f007 fd10 	bl	8017f34 <crs_strlen>
 8010514:	4a09      	ldr	r2, [pc, #36]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010516:	b283      	uxth	r3, r0
 8010518:	2110      	movs	r1, #16
 801051a:	2000      	movs	r0, #0
 801051c:	f007 fd48 	bl	8017fb0 <traceIF_itmPrint>
 8010520:	4806      	ldr	r0, [pc, #24]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010522:	f007 fd07 	bl	8017f34 <crs_strlen>
 8010526:	4a05      	ldr	r2, [pc, #20]	; (801053c <CS_subscribe_modem_event+0xc4>)
 8010528:	b283      	uxth	r3, r0
 801052a:	2110      	movs	r1, #16
 801052c:	2000      	movs	r0, #0
 801052e:	f007 ff65 	bl	80183fc <traceIF_uartPrint>
 8010532:	2401      	movs	r4, #1
 8010534:	e7e4      	b.n	8010500 <CS_subscribe_modem_event+0x88>
 8010536:	bf00      	nop
 8010538:	08027f72 	.word	0x08027f72
 801053c:	20008df8 	.word	0x20008df8
 8010540:	20003586 	.word	0x20003586
 8010544:	20003584 	.word	0x20003584
 8010548:	20003778 	.word	0x20003778
 801054c:	20003818 	.word	0x20003818
 8010550:	08027f94 	.word	0x08027f94
 8010554:	08027fc4 	.word	0x08027fc4

08010558 <CS_register_pdn_event>:
		cellular_pdn_event_callback_t pdn_event_callback) {
 8010558:	b570      	push	{r4, r5, r6, lr}
 801055a:	4605      	mov	r5, r0
 801055c:	460e      	mov	r6, r1
	PRINT_API("CS_register_pdn_event")
 801055e:	483c      	ldr	r0, [pc, #240]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010560:	493c      	ldr	r1, [pc, #240]	; (8010654 <CS_register_pdn_event+0xfc>)
 8010562:	f00c fd19 	bl	801cf98 <strcpy>
 8010566:	483a      	ldr	r0, [pc, #232]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010568:	f007 fce4 	bl	8017f34 <crs_strlen>
 801056c:	4a38      	ldr	r2, [pc, #224]	; (8010650 <CS_register_pdn_event+0xf8>)
 801056e:	b283      	uxth	r3, r0
 8010570:	2104      	movs	r1, #4
 8010572:	2000      	movs	r0, #0
 8010574:	f007 fd1c 	bl	8017fb0 <traceIF_itmPrint>
 8010578:	4835      	ldr	r0, [pc, #212]	; (8010650 <CS_register_pdn_event+0xf8>)
 801057a:	f007 fcdb 	bl	8017f34 <crs_strlen>
 801057e:	4a34      	ldr	r2, [pc, #208]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010580:	b283      	uxth	r3, r0
 8010582:	2104      	movs	r1, #4
 8010584:	2000      	movs	r0, #0
 8010586:	f007 ff39 	bl	80183fc <traceIF_uartPrint>
	if (cid > CS_PDN_USER_CONFIG_5) {
 801058a:	2d05      	cmp	r5, #5
 801058c:	d92e      	bls.n	80105ec <CS_register_pdn_event+0x94>
		PRINT_ERR(
 801058e:	4932      	ldr	r1, [pc, #200]	; (8010658 <CS_register_pdn_event+0x100>)
 8010590:	482f      	ldr	r0, [pc, #188]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010592:	462a      	mov	r2, r5
 8010594:	f00c fc90 	bl	801ceb8 <sprintf>
 8010598:	482d      	ldr	r0, [pc, #180]	; (8010650 <CS_register_pdn_event+0xf8>)
 801059a:	f007 fccb 	bl	8017f34 <crs_strlen>
 801059e:	4a2c      	ldr	r2, [pc, #176]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105a0:	b283      	uxth	r3, r0
 80105a2:	2110      	movs	r1, #16
 80105a4:	2000      	movs	r0, #0
 80105a6:	f007 fd03 	bl	8017fb0 <traceIF_itmPrint>
 80105aa:	4829      	ldr	r0, [pc, #164]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105ac:	f007 fcc2 	bl	8017f34 <crs_strlen>
 80105b0:	4a27      	ldr	r2, [pc, #156]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105b2:	b283      	uxth	r3, r0
 80105b4:	2110      	movs	r1, #16
 80105b6:	2000      	movs	r0, #0
 80105b8:	f007 ff20 	bl	80183fc <traceIF_uartPrint>
		PRINT_ERR("<Cellular_Service>error when registering PDN events")
 80105bc:	4927      	ldr	r1, [pc, #156]	; (801065c <CS_register_pdn_event+0x104>)
 80105be:	4824      	ldr	r0, [pc, #144]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105c0:	f00c fcea 	bl	801cf98 <strcpy>
 80105c4:	4822      	ldr	r0, [pc, #136]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105c6:	f007 fcb5 	bl	8017f34 <crs_strlen>
 80105ca:	4a21      	ldr	r2, [pc, #132]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105cc:	b283      	uxth	r3, r0
 80105ce:	2110      	movs	r1, #16
 80105d0:	2000      	movs	r0, #0
 80105d2:	f007 fced 	bl	8017fb0 <traceIF_itmPrint>
 80105d6:	481e      	ldr	r0, [pc, #120]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105d8:	f007 fcac 	bl	8017f34 <crs_strlen>
 80105dc:	4a1c      	ldr	r2, [pc, #112]	; (8010650 <CS_register_pdn_event+0xf8>)
 80105de:	b283      	uxth	r3, r0
 80105e0:	2110      	movs	r1, #16
 80105e2:	2000      	movs	r0, #0
 80105e4:	f007 ff0a 	bl	80183fc <traceIF_uartPrint>
 80105e8:	2401      	movs	r4, #1
 80105ea:	e02e      	b.n	801064a <CS_register_pdn_event+0xf2>
		if (DATAPACK_writeStruct(&cmd_buf[0], (uint16_t) CSMT_NONE,
 80105ec:	2300      	movs	r3, #0
 80105ee:	481c      	ldr	r0, [pc, #112]	; (8010660 <CS_register_pdn_event+0x108>)
 80105f0:	461a      	mov	r2, r3
 80105f2:	2104      	movs	r1, #4
 80105f4:	f7f7 fc94 	bl	8007f20 <DATAPACK_writeStruct>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d1df      	bne.n	80105bc <CS_register_pdn_event+0x64>
			err = AT_sendcmd(_Adapter_Handle,
 80105fc:	4819      	ldr	r0, [pc, #100]	; (8010664 <CS_register_pdn_event+0x10c>)
 80105fe:	4b1a      	ldr	r3, [pc, #104]	; (8010668 <CS_register_pdn_event+0x110>)
 8010600:	4a17      	ldr	r2, [pc, #92]	; (8010660 <CS_register_pdn_event+0x108>)
 8010602:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010606:	2173      	movs	r1, #115	; 0x73
 8010608:	f7f7 f8e2 	bl	80077d0 <AT_sendcmd>
			if (err == ATSTATUS_OK) {
 801060c:	4604      	mov	r4, r0
 801060e:	2800      	cmp	r0, #0
 8010610:	d1d4      	bne.n	80105bc <CS_register_pdn_event+0x64>
				PRINT_DBG(
 8010612:	4916      	ldr	r1, [pc, #88]	; (801066c <CS_register_pdn_event+0x114>)
 8010614:	480e      	ldr	r0, [pc, #56]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010616:	f00c fcbf 	bl	801cf98 <strcpy>
 801061a:	480d      	ldr	r0, [pc, #52]	; (8010650 <CS_register_pdn_event+0xf8>)
 801061c:	f007 fc8a 	bl	8017f34 <crs_strlen>
 8010620:	4a0b      	ldr	r2, [pc, #44]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010622:	b283      	uxth	r3, r0
 8010624:	2102      	movs	r1, #2
 8010626:	4620      	mov	r0, r4
 8010628:	f007 fcc2 	bl	8017fb0 <traceIF_itmPrint>
 801062c:	4808      	ldr	r0, [pc, #32]	; (8010650 <CS_register_pdn_event+0xf8>)
 801062e:	f007 fc81 	bl	8017f34 <crs_strlen>
 8010632:	4a07      	ldr	r2, [pc, #28]	; (8010650 <CS_register_pdn_event+0xf8>)
 8010634:	b283      	uxth	r3, r0
 8010636:	2102      	movs	r1, #2
 8010638:	4620      	mov	r0, r4
 801063a:	f007 fedf 	bl	80183fc <traceIF_uartPrint>
				urc_packet_domain_event_callback[cid] = pdn_event_callback;
 801063e:	4b0c      	ldr	r3, [pc, #48]	; (8010670 <CS_register_pdn_event+0x118>)
 8010640:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
				cs_ctxt_urc_subscription.packet_domain_event = CELLULAR_TRUE;
 8010644:	4b0b      	ldr	r3, [pc, #44]	; (8010674 <CS_register_pdn_event+0x11c>)
 8010646:	2201      	movs	r2, #1
 8010648:	71da      	strb	r2, [r3, #7]
}
 801064a:	4620      	mov	r0, r4
 801064c:	bd70      	pop	{r4, r5, r6, pc}
 801064e:	bf00      	nop
 8010650:	20008df8 	.word	0x20008df8
 8010654:	08028005 	.word	0x08028005
 8010658:	08028024 	.word	0x08028024
 801065c:	080280b1 	.word	0x080280b1
 8010660:	20003586 	.word	0x20003586
 8010664:	20003584 	.word	0x20003584
 8010668:	20003778 	.word	0x20003778
 801066c:	08028076 	.word	0x08028076
 8010670:	2000381c 	.word	0x2000381c
 8010674:	2000376c 	.word	0x2000376c

08010678 <CS_direct_cmd>:
		cellular_direct_cmd_callback_t direct_cmd_callback) {
 8010678:	b510      	push	{r4, lr}
	PRINT_API("CS_direct_cmd")
 801067a:	493c      	ldr	r1, [pc, #240]	; (801076c <CS_direct_cmd+0xf4>)
		cellular_direct_cmd_callback_t direct_cmd_callback) {
 801067c:	4604      	mov	r4, r0
	PRINT_API("CS_direct_cmd")
 801067e:	483c      	ldr	r0, [pc, #240]	; (8010770 <CS_direct_cmd+0xf8>)
 8010680:	f00c fc8a 	bl	801cf98 <strcpy>
 8010684:	483a      	ldr	r0, [pc, #232]	; (8010770 <CS_direct_cmd+0xf8>)
 8010686:	f007 fc55 	bl	8017f34 <crs_strlen>
 801068a:	4a39      	ldr	r2, [pc, #228]	; (8010770 <CS_direct_cmd+0xf8>)
 801068c:	b283      	uxth	r3, r0
 801068e:	2104      	movs	r1, #4
 8010690:	2000      	movs	r0, #0
 8010692:	f007 fc8d 	bl	8017fb0 <traceIF_itmPrint>
 8010696:	4836      	ldr	r0, [pc, #216]	; (8010770 <CS_direct_cmd+0xf8>)
 8010698:	f007 fc4c 	bl	8017f34 <crs_strlen>
 801069c:	4a34      	ldr	r2, [pc, #208]	; (8010770 <CS_direct_cmd+0xf8>)
 801069e:	b283      	uxth	r3, r0
 80106a0:	2104      	movs	r1, #4
 80106a2:	2000      	movs	r0, #0
 80106a4:	f007 feaa 	bl	80183fc <traceIF_uartPrint>
	if (direct_cmd_tx->cmd_size <= MAX_DIRECT_CMD_SIZE) {
 80106a8:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
 80106ac:	2b76      	cmp	r3, #118	; 0x76
 80106ae:	d844      	bhi.n	801073a <CS_direct_cmd+0xc2>
		if (DATAPACK_writePtr(&cmd_buf[0], (uint16_t) CSMT_DIRECT_CMD,
 80106b0:	4830      	ldr	r0, [pc, #192]	; (8010774 <CS_direct_cmd+0xfc>)
 80106b2:	4622      	mov	r2, r4
 80106b4:	212d      	movs	r1, #45	; 0x2d
 80106b6:	f7f7 fc07 	bl	8007ec8 <DATAPACK_writePtr>
 80106ba:	bb30      	cbnz	r0, 801070a <CS_direct_cmd+0x92>
			err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_DIRECT_CMD,
 80106bc:	482e      	ldr	r0, [pc, #184]	; (8010778 <CS_direct_cmd+0x100>)
 80106be:	4b2f      	ldr	r3, [pc, #188]	; (801077c <CS_direct_cmd+0x104>)
 80106c0:	4a2c      	ldr	r2, [pc, #176]	; (8010774 <CS_direct_cmd+0xfc>)
 80106c2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80106c6:	2186      	movs	r1, #134	; 0x86
 80106c8:	f7f7 f882 	bl	80077d0 <AT_sendcmd>
			if (err == ATSTATUS_OK) {
 80106cc:	4604      	mov	r4, r0
 80106ce:	b9b8      	cbnz	r0, 8010700 <CS_direct_cmd+0x88>
				PRINT_DBG("<Cellular_Service> Direct command infos received")
 80106d0:	492b      	ldr	r1, [pc, #172]	; (8010780 <CS_direct_cmd+0x108>)
 80106d2:	4827      	ldr	r0, [pc, #156]	; (8010770 <CS_direct_cmd+0xf8>)
 80106d4:	f00c fc60 	bl	801cf98 <strcpy>
 80106d8:	4825      	ldr	r0, [pc, #148]	; (8010770 <CS_direct_cmd+0xf8>)
 80106da:	f007 fc2b 	bl	8017f34 <crs_strlen>
 80106de:	4a24      	ldr	r2, [pc, #144]	; (8010770 <CS_direct_cmd+0xf8>)
 80106e0:	b283      	uxth	r3, r0
 80106e2:	2102      	movs	r1, #2
 80106e4:	4620      	mov	r0, r4
 80106e6:	f007 fc63 	bl	8017fb0 <traceIF_itmPrint>
 80106ea:	4821      	ldr	r0, [pc, #132]	; (8010770 <CS_direct_cmd+0xf8>)
 80106ec:	f007 fc22 	bl	8017f34 <crs_strlen>
 80106f0:	4a1f      	ldr	r2, [pc, #124]	; (8010770 <CS_direct_cmd+0xf8>)
 80106f2:	b283      	uxth	r3, r0
 80106f4:	2102      	movs	r1, #2
 80106f6:	4620      	mov	r0, r4
 80106f8:	f007 fe80 	bl	80183fc <traceIF_uartPrint>
}
 80106fc:	4620      	mov	r0, r4
 80106fe:	bd10      	pop	{r4, pc}
				retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 8010700:	f7fe fe0e 	bl	800f320 <CELLULAR_analyze_error_report.constprop.0>
	if (retval == CELLULAR_ERROR) {
 8010704:	2801      	cmp	r0, #1
				retval = CELLULAR_analyze_error_report(&rsp_buf[0]);
 8010706:	4604      	mov	r4, r0
	if (retval == CELLULAR_ERROR) {
 8010708:	d1f8      	bne.n	80106fc <CS_direct_cmd+0x84>
		PRINT_ERR("<Cellular_Service> error when sending direct cmd")
 801070a:	491e      	ldr	r1, [pc, #120]	; (8010784 <CS_direct_cmd+0x10c>)
 801070c:	4818      	ldr	r0, [pc, #96]	; (8010770 <CS_direct_cmd+0xf8>)
 801070e:	f00c fc43 	bl	801cf98 <strcpy>
 8010712:	4817      	ldr	r0, [pc, #92]	; (8010770 <CS_direct_cmd+0xf8>)
 8010714:	f007 fc0e 	bl	8017f34 <crs_strlen>
 8010718:	4a15      	ldr	r2, [pc, #84]	; (8010770 <CS_direct_cmd+0xf8>)
 801071a:	b283      	uxth	r3, r0
 801071c:	2110      	movs	r1, #16
 801071e:	2000      	movs	r0, #0
 8010720:	f007 fc46 	bl	8017fb0 <traceIF_itmPrint>
 8010724:	4812      	ldr	r0, [pc, #72]	; (8010770 <CS_direct_cmd+0xf8>)
 8010726:	f007 fc05 	bl	8017f34 <crs_strlen>
 801072a:	4a11      	ldr	r2, [pc, #68]	; (8010770 <CS_direct_cmd+0xf8>)
 801072c:	b283      	uxth	r3, r0
 801072e:	2110      	movs	r1, #16
 8010730:	2000      	movs	r0, #0
 8010732:	f007 fe63 	bl	80183fc <traceIF_uartPrint>
 8010736:	2401      	movs	r4, #1
 8010738:	e7e0      	b.n	80106fc <CS_direct_cmd+0x84>
		PRINT_INFO(
 801073a:	4913      	ldr	r1, [pc, #76]	; (8010788 <CS_direct_cmd+0x110>)
 801073c:	480c      	ldr	r0, [pc, #48]	; (8010770 <CS_direct_cmd+0xf8>)
 801073e:	2276      	movs	r2, #118	; 0x76
 8010740:	f00c fbba 	bl	801ceb8 <sprintf>
 8010744:	480a      	ldr	r0, [pc, #40]	; (8010770 <CS_direct_cmd+0xf8>)
 8010746:	f007 fbf5 	bl	8017f34 <crs_strlen>
 801074a:	4a09      	ldr	r2, [pc, #36]	; (8010770 <CS_direct_cmd+0xf8>)
 801074c:	b283      	uxth	r3, r0
 801074e:	2101      	movs	r1, #1
 8010750:	2000      	movs	r0, #0
 8010752:	f007 fc2d 	bl	8017fb0 <traceIF_itmPrint>
 8010756:	4806      	ldr	r0, [pc, #24]	; (8010770 <CS_direct_cmd+0xf8>)
 8010758:	f007 fbec 	bl	8017f34 <crs_strlen>
 801075c:	4a04      	ldr	r2, [pc, #16]	; (8010770 <CS_direct_cmd+0xf8>)
 801075e:	b283      	uxth	r3, r0
 8010760:	2101      	movs	r1, #1
 8010762:	2000      	movs	r0, #0
 8010764:	f007 fe4a 	bl	80183fc <traceIF_uartPrint>
	if (retval == CELLULAR_ERROR) {
 8010768:	e7cf      	b.n	801070a <CS_direct_cmd+0x92>
 801076a:	bf00      	nop
 801076c:	080280f0 	.word	0x080280f0
 8010770:	20008df8 	.word	0x20008df8
 8010774:	20003586 	.word	0x20003586
 8010778:	20003584 	.word	0x20003584
 801077c:	20003778 	.word	0x20003778
 8010780:	08028107 	.word	0x08028107
 8010784:	08028183 	.word	0x08028183
 8010788:	0802813d 	.word	0x0802813d

0801078c <CS_ComMdm_subscribe_event>:
	}
	return (PDNconf);
}
#if defined(USE_COM_MDM)
CS_Status_t CS_ComMdm_subscribe_event(CS_comMdm_callback_t commdm_urc_cb)
{
 801078c:	b510      	push	{r4, lr}
  CS_Status_t retval;

  if (commdm_urc_cb == NULL)
 801078e:	4604      	mov	r4, r0
 8010790:	b9a8      	cbnz	r0, 80107be <CS_ComMdm_subscribe_event+0x32>
  {
    PRINT_INFO("comMdm callback deregistered")
 8010792:	490d      	ldr	r1, [pc, #52]	; (80107c8 <CS_ComMdm_subscribe_event+0x3c>)
 8010794:	480d      	ldr	r0, [pc, #52]	; (80107cc <CS_ComMdm_subscribe_event+0x40>)
 8010796:	f00c fbff 	bl	801cf98 <strcpy>
 801079a:	480c      	ldr	r0, [pc, #48]	; (80107cc <CS_ComMdm_subscribe_event+0x40>)
 801079c:	f007 fbca 	bl	8017f34 <crs_strlen>
 80107a0:	4a0a      	ldr	r2, [pc, #40]	; (80107cc <CS_ComMdm_subscribe_event+0x40>)
 80107a2:	b283      	uxth	r3, r0
 80107a4:	2101      	movs	r1, #1
 80107a6:	4620      	mov	r0, r4
 80107a8:	f007 fc02 	bl	8017fb0 <traceIF_itmPrint>
 80107ac:	4807      	ldr	r0, [pc, #28]	; (80107cc <CS_ComMdm_subscribe_event+0x40>)
 80107ae:	f007 fbc1 	bl	8017f34 <crs_strlen>
 80107b2:	4a06      	ldr	r2, [pc, #24]	; (80107cc <CS_ComMdm_subscribe_event+0x40>)
 80107b4:	b283      	uxth	r3, r0
 80107b6:	2101      	movs	r1, #1
 80107b8:	4620      	mov	r0, r4
 80107ba:	f007 fe1f 	bl	80183fc <traceIF_uartPrint>
  }

  urc_commdm_event_callback = commdm_urc_cb;
 80107be:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <CS_ComMdm_subscribe_event+0x44>)
  retval = CELLULAR_OK;

  return (retval);
}
 80107c0:	2000      	movs	r0, #0
  urc_commdm_event_callback = commdm_urc_cb;
 80107c2:	601c      	str	r4, [r3, #0]
}
 80107c4:	bd10      	pop	{r4, pc}
 80107c6:	bf00      	nop
 80107c8:	080281bf 	.word	0x080281bf
 80107cc:	20008df8 	.word	0x20008df8
 80107d0:	200037f8 	.word	0x200037f8

080107d4 <CS_ComMdm_transaction>:


CS_Status_t CS_ComMdm_transaction(CS_Tx_Buffer_t *txBuf, CS_Rx_Buffer_t *rxBuf, int32_t *errorCode)
{
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	4604      	mov	r4, r0
 80107d8:	b088      	sub	sp, #32
  CS_Status_t retval = CELLULAR_ERROR;
  PRINT_API("CS_ComMdm_transaction")
 80107da:	486a      	ldr	r0, [pc, #424]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
{
 80107dc:	460d      	mov	r5, r1
  PRINT_API("CS_ComMdm_transaction")
 80107de:	496a      	ldr	r1, [pc, #424]	; (8010988 <CS_ComMdm_transaction+0x1b4>)
{
 80107e0:	4616      	mov	r6, r2
  PRINT_API("CS_ComMdm_transaction")
 80107e2:	f00c fbd9 	bl	801cf98 <strcpy>
 80107e6:	4867      	ldr	r0, [pc, #412]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80107e8:	f007 fba4 	bl	8017f34 <crs_strlen>
 80107ec:	4a65      	ldr	r2, [pc, #404]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80107ee:	b283      	uxth	r3, r0
 80107f0:	2104      	movs	r1, #4
 80107f2:	2000      	movs	r0, #0
 80107f4:	f007 fbdc 	bl	8017fb0 <traceIF_itmPrint>
 80107f8:	4862      	ldr	r0, [pc, #392]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80107fa:	f007 fb9b 	bl	8017f34 <crs_strlen>
 80107fe:	4a61      	ldr	r2, [pc, #388]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010800:	b283      	uxth	r3, r0
 8010802:	2104      	movs	r1, #4
 8010804:	2000      	movs	r0, #0
 8010806:	f007 fdf9 	bl	80183fc <traceIF_uartPrint>

  /* check buffer are not NULL and size is not 0 */
  if ((txBuf != NULL) && (rxBuf != NULL))
 801080a:	2c00      	cmp	r4, #0
 801080c:	f000 80a1 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
 8010810:	2d00      	cmp	r5, #0
 8010812:	f000 809e 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
  {
    if ((txBuf->p_buffer != NULL)
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 809a 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
        && (txBuf->buffer_size != 0U)
 801081e:	6863      	ldr	r3, [r4, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	f000 8096 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
        && (rxBuf->p_buffer != NULL)
 8010826:	686b      	ldr	r3, [r5, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 8092 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
        && (rxBuf->max_buffer_size != 0U))
 801082e:	682b      	ldr	r3, [r5, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	f000 808e 	beq.w	8010952 <CS_ComMdm_transaction+0x17e>
    {
      csint_ComMdm_t com_mdm_data;

      com_mdm_data.transaction_type = CS_COMMDM_TRANSACTION;
      (void) memcpy((void *)&com_mdm_data.txBuffer, (void *)txBuf, sizeof(CS_Tx_Buffer_t));
 8010836:	6820      	ldr	r0, [r4, #0]
 8010838:	6861      	ldr	r1, [r4, #4]
 801083a:	ab02      	add	r3, sp, #8
 801083c:	c303      	stmia	r3!, {r0, r1}
      (void) memcpy((void *)&com_mdm_data.rxBuffer, (void *)rxBuf, sizeof(CS_Rx_Buffer_t));
 801083e:	6828      	ldr	r0, [r5, #0]
 8010840:	6869      	ldr	r1, [r5, #4]
 8010842:	ab04      	add	r3, sp, #16
 8010844:	c303      	stmia	r3!, {r0, r1}
      com_mdm_data.transaction_type = CS_COMMDM_TRANSACTION;
 8010846:	2200      	movs	r2, #0
      (void) memcpy((void *)&com_mdm_data.rxBuffer, (void *)rxBuf, sizeof(CS_Rx_Buffer_t));
 8010848:	68a8      	ldr	r0, [r5, #8]
 801084a:	6018      	str	r0, [r3, #0]
      com_mdm_data.transaction_type = CS_COMMDM_TRANSACTION;
 801084c:	f88d 2004 	strb.w	r2, [sp, #4]
      com_mdm_data.errorCode = 0;
 8010850:	9207      	str	r2, [sp, #28]

      if (DATAPACK_writeStruct(&cmd_buf[0],
 8010852:	484e      	ldr	r0, [pc, #312]	; (801098c <CS_ComMdm_transaction+0x1b8>)
 8010854:	ab01      	add	r3, sp, #4
 8010856:	221c      	movs	r2, #28
 8010858:	2133      	movs	r1, #51	; 0x33
 801085a:	f7f7 fb61 	bl	8007f20 <DATAPACK_writeStruct>
 801085e:	2800      	cmp	r0, #0
 8010860:	d177      	bne.n	8010952 <CS_ComMdm_transaction+0x17e>
                               (uint16_t) CSMT_COM_MDM,
                               (uint16_t) sizeof(csint_ComMdm_t),
                               (void *)&com_mdm_data) == DATAPACK_OK)
      {
        at_status_t err;
        err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_COM_MDM_TRANSACTION, &cmd_buf[0], &rsp_buf[0]);
 8010862:	484b      	ldr	r0, [pc, #300]	; (8010990 <CS_ComMdm_transaction+0x1bc>)
 8010864:	4b4b      	ldr	r3, [pc, #300]	; (8010994 <CS_ComMdm_transaction+0x1c0>)
 8010866:	4a49      	ldr	r2, [pc, #292]	; (801098c <CS_ComMdm_transaction+0x1b8>)
 8010868:	f9b0 0000 	ldrsh.w	r0, [r0]
 801086c:	218f      	movs	r1, #143	; 0x8f
 801086e:	f7f6 ffaf 	bl	80077d0 <AT_sendcmd>
        if (err == ATSTATUS_OK)
 8010872:	4604      	mov	r4, r0
 8010874:	2800      	cmp	r0, #0
 8010876:	d16c      	bne.n	8010952 <CS_ComMdm_transaction+0x17e>
        {
          retval = CELLULAR_OK;
          if (DATAPACK_readStruct(&rsp_buf[0],
 8010878:	4846      	ldr	r0, [pc, #280]	; (8010994 <CS_ComMdm_transaction+0x1c0>)
 801087a:	ab01      	add	r3, sp, #4
 801087c:	221c      	movs	r2, #28
 801087e:	2133      	movs	r1, #51	; 0x33
 8010880:	f7f7 fbd2 	bl	8008028 <DATAPACK_readStruct>
 8010884:	2800      	cmp	r0, #0
 8010886:	d161      	bne.n	801094c <CS_ComMdm_transaction+0x178>
                                  (uint16_t) CSMT_COM_MDM,
                                  (uint16_t) sizeof(csint_ComMdm_t),
                                  &com_mdm_data) == DATAPACK_OK)
          {
            PRINT_INFO("returned value: TX ptr=%p size=%ld", com_mdm_data.txBuffer.p_buffer, com_mdm_data.txBuffer.buffer_size)
 8010888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801088c:	4942      	ldr	r1, [pc, #264]	; (8010998 <CS_ComMdm_transaction+0x1c4>)
 801088e:	483d      	ldr	r0, [pc, #244]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010890:	f00c fb12 	bl	801ceb8 <sprintf>
 8010894:	483b      	ldr	r0, [pc, #236]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010896:	f007 fb4d 	bl	8017f34 <crs_strlen>
 801089a:	4a3a      	ldr	r2, [pc, #232]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801089c:	b283      	uxth	r3, r0
 801089e:	2101      	movs	r1, #1
 80108a0:	4620      	mov	r0, r4
 80108a2:	f007 fb85 	bl	8017fb0 <traceIF_itmPrint>
 80108a6:	4837      	ldr	r0, [pc, #220]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108a8:	f007 fb44 	bl	8017f34 <crs_strlen>
 80108ac:	4a35      	ldr	r2, [pc, #212]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108ae:	b283      	uxth	r3, r0
 80108b0:	2101      	movs	r1, #1
 80108b2:	4620      	mov	r0, r4
 80108b4:	f007 fda2 	bl	80183fc <traceIF_uartPrint>
		    PRINT_INFO("returned value: RX ptr=%p size=%ld", com_mdm_data.rxBuffer.p_buffer, com_mdm_data.rxBuffer.buffer_size)
 80108b8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80108bc:	4937      	ldr	r1, [pc, #220]	; (801099c <CS_ComMdm_transaction+0x1c8>)
 80108be:	4831      	ldr	r0, [pc, #196]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108c0:	f00c fafa 	bl	801ceb8 <sprintf>
 80108c4:	482f      	ldr	r0, [pc, #188]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108c6:	f007 fb35 	bl	8017f34 <crs_strlen>
 80108ca:	4a2e      	ldr	r2, [pc, #184]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108cc:	b283      	uxth	r3, r0
 80108ce:	2101      	movs	r1, #1
 80108d0:	4620      	mov	r0, r4
 80108d2:	f007 fb6d 	bl	8017fb0 <traceIF_itmPrint>
 80108d6:	482b      	ldr	r0, [pc, #172]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108d8:	f007 fb2c 	bl	8017f34 <crs_strlen>
 80108dc:	4a29      	ldr	r2, [pc, #164]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108de:	b283      	uxth	r3, r0
 80108e0:	2101      	movs	r1, #1
 80108e2:	4620      	mov	r0, r4
 80108e4:	f007 fd8a 	bl	80183fc <traceIF_uartPrint>
		    PRINT_INFO("returned value: RX = %s", com_mdm_data.rxBuffer.p_buffer)
 80108e8:	9a05      	ldr	r2, [sp, #20]
 80108ea:	492d      	ldr	r1, [pc, #180]	; (80109a0 <CS_ComMdm_transaction+0x1cc>)
 80108ec:	4825      	ldr	r0, [pc, #148]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108ee:	f00c fae3 	bl	801ceb8 <sprintf>
 80108f2:	4824      	ldr	r0, [pc, #144]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108f4:	f007 fb1e 	bl	8017f34 <crs_strlen>
 80108f8:	4a22      	ldr	r2, [pc, #136]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 80108fa:	b283      	uxth	r3, r0
 80108fc:	2101      	movs	r1, #1
 80108fe:	4620      	mov	r0, r4
 8010900:	f007 fb56 	bl	8017fb0 <traceIF_itmPrint>
 8010904:	481f      	ldr	r0, [pc, #124]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010906:	f007 fb15 	bl	8017f34 <crs_strlen>
 801090a:	4a1e      	ldr	r2, [pc, #120]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801090c:	b283      	uxth	r3, r0
 801090e:	2101      	movs	r1, #1
 8010910:	4620      	mov	r0, r4
 8010912:	f007 fd73 	bl	80183fc <traceIF_uartPrint>
		    PRINT_INFO("returned value: error code=%ld", com_mdm_data.errorCode)
 8010916:	9a07      	ldr	r2, [sp, #28]
 8010918:	4922      	ldr	r1, [pc, #136]	; (80109a4 <CS_ComMdm_transaction+0x1d0>)
 801091a:	481a      	ldr	r0, [pc, #104]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801091c:	f00c facc 	bl	801ceb8 <sprintf>
 8010920:	4818      	ldr	r0, [pc, #96]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010922:	f007 fb07 	bl	8017f34 <crs_strlen>
 8010926:	4a17      	ldr	r2, [pc, #92]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010928:	b283      	uxth	r3, r0
 801092a:	2101      	movs	r1, #1
 801092c:	4620      	mov	r0, r4
 801092e:	f007 fb3f 	bl	8017fb0 <traceIF_itmPrint>
 8010932:	4814      	ldr	r0, [pc, #80]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010934:	f007 fafe 	bl	8017f34 <crs_strlen>
 8010938:	4a12      	ldr	r2, [pc, #72]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801093a:	b283      	uxth	r3, r0
 801093c:	2101      	movs	r1, #1
 801093e:	4620      	mov	r0, r4
 8010940:	f007 fd5c 	bl	80183fc <traceIF_uartPrint>

            /* recopy size of received buffer + error code */
            rxBuf->buffer_size = com_mdm_data.rxBuffer.buffer_size;
 8010944:	9b06      	ldr	r3, [sp, #24]
 8010946:	60ab      	str	r3, [r5, #8]
            *errorCode = com_mdm_data.errorCode;
 8010948:	9b07      	ldr	r3, [sp, #28]
 801094a:	6033      	str	r3, [r6, #0]
  if (retval == CELLULAR_ERROR)
  {
    PRINT_ERR("<Cellular_Service> error during COM-MDM transaction")
  }
  return (retval);
}
 801094c:	4620      	mov	r0, r4
 801094e:	b008      	add	sp, #32
 8010950:	bd70      	pop	{r4, r5, r6, pc}
    PRINT_ERR("<Cellular_Service> error during COM-MDM transaction")
 8010952:	4915      	ldr	r1, [pc, #84]	; (80109a8 <CS_ComMdm_transaction+0x1d4>)
 8010954:	480b      	ldr	r0, [pc, #44]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010956:	f00c fb1f 	bl	801cf98 <strcpy>
 801095a:	480a      	ldr	r0, [pc, #40]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801095c:	f007 faea 	bl	8017f34 <crs_strlen>
 8010960:	4a08      	ldr	r2, [pc, #32]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010962:	b283      	uxth	r3, r0
 8010964:	2110      	movs	r1, #16
 8010966:	2000      	movs	r0, #0
 8010968:	f007 fb22 	bl	8017fb0 <traceIF_itmPrint>
 801096c:	4805      	ldr	r0, [pc, #20]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 801096e:	f007 fae1 	bl	8017f34 <crs_strlen>
 8010972:	4a04      	ldr	r2, [pc, #16]	; (8010984 <CS_ComMdm_transaction+0x1b0>)
 8010974:	b283      	uxth	r3, r0
 8010976:	2110      	movs	r1, #16
 8010978:	2000      	movs	r0, #0
 801097a:	f007 fd3f 	bl	80183fc <traceIF_uartPrint>
 801097e:	2401      	movs	r4, #1
 8010980:	e7e4      	b.n	801094c <CS_ComMdm_transaction+0x178>
 8010982:	bf00      	nop
 8010984:	20008df8 	.word	0x20008df8
 8010988:	080281e1 	.word	0x080281e1
 801098c:	20003586 	.word	0x20003586
 8010990:	20003584 	.word	0x20003584
 8010994:	20003778 	.word	0x20003778
 8010998:	08028200 	.word	0x08028200
 801099c:	08028228 	.word	0x08028228
 80109a0:	08028250 	.word	0x08028250
 80109a4:	0802826d 	.word	0x0802826d
 80109a8:	08028291 	.word	0x08028291

080109ac <CS_ComMdm_send>:

CS_Status_t CS_ComMdm_send(CS_Tx_Buffer_t *txBuf, int32_t *errorCode)
{
 80109ac:	b570      	push	{r4, r5, r6, lr}
 80109ae:	4604      	mov	r4, r0
 80109b0:	b088      	sub	sp, #32
  CS_Status_t retval = CELLULAR_ERROR;
  PRINT_API("CS_ComMdm_send")
 80109b2:	483b      	ldr	r0, [pc, #236]	; (8010aa0 <CS_ComMdm_send+0xf4>)
{
 80109b4:	460d      	mov	r5, r1
  PRINT_API("CS_ComMdm_send")
 80109b6:	493b      	ldr	r1, [pc, #236]	; (8010aa4 <CS_ComMdm_send+0xf8>)
 80109b8:	f00c faee 	bl	801cf98 <strcpy>
 80109bc:	4838      	ldr	r0, [pc, #224]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 80109be:	f007 fab9 	bl	8017f34 <crs_strlen>
 80109c2:	4a37      	ldr	r2, [pc, #220]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 80109c4:	b283      	uxth	r3, r0
 80109c6:	2104      	movs	r1, #4
 80109c8:	2000      	movs	r0, #0
 80109ca:	f007 faf1 	bl	8017fb0 <traceIF_itmPrint>
 80109ce:	4834      	ldr	r0, [pc, #208]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 80109d0:	f007 fab0 	bl	8017f34 <crs_strlen>
 80109d4:	4a32      	ldr	r2, [pc, #200]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 80109d6:	b283      	uxth	r3, r0
 80109d8:	2104      	movs	r1, #4
 80109da:	2000      	movs	r0, #0
 80109dc:	f007 fd0e 	bl	80183fc <traceIF_uartPrint>

  /* check buffer are not NULL and size is not 0 */
  if (txBuf != NULL)
 80109e0:	2c00      	cmp	r4, #0
 80109e2:	d045      	beq.n	8010a70 <CS_ComMdm_send+0xc4>
  {
    if ((txBuf->p_buffer != NULL)
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d042      	beq.n	8010a70 <CS_ComMdm_send+0xc4>
        && (txBuf->buffer_size != 0U))
 80109ea:	6863      	ldr	r3, [r4, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d03f      	beq.n	8010a70 <CS_ComMdm_send+0xc4>
    {
      csint_ComMdm_t com_mdm_data;

      com_mdm_data.transaction_type = CS_COMMDM_SEND;
      (void) memcpy((void *)&com_mdm_data.txBuffer, (void *)txBuf, sizeof(CS_Tx_Buffer_t));
 80109f0:	6820      	ldr	r0, [r4, #0]
 80109f2:	6861      	ldr	r1, [r4, #4]
 80109f4:	ab02      	add	r3, sp, #8
 80109f6:	c303      	stmia	r3!, {r0, r1}
      (void) memset((void *)&com_mdm_data.rxBuffer, 0, sizeof(CS_Rx_Buffer_t));
 80109f8:	2300      	movs	r3, #0
 80109fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
      com_mdm_data.errorCode = 0;
 80109fe:	e9cd 3306 	strd	r3, r3, [sp, #24]
      com_mdm_data.transaction_type = CS_COMMDM_SEND;
 8010a02:	2601      	movs	r6, #1

      if (DATAPACK_writeStruct(&cmd_buf[0],
 8010a04:	4828      	ldr	r0, [pc, #160]	; (8010aa8 <CS_ComMdm_send+0xfc>)
      com_mdm_data.transaction_type = CS_COMMDM_SEND;
 8010a06:	f88d 6004 	strb.w	r6, [sp, #4]
      if (DATAPACK_writeStruct(&cmd_buf[0],
 8010a0a:	ab01      	add	r3, sp, #4
 8010a0c:	221c      	movs	r2, #28
 8010a0e:	2133      	movs	r1, #51	; 0x33
 8010a10:	f7f7 fa86 	bl	8007f20 <DATAPACK_writeStruct>
 8010a14:	bb60      	cbnz	r0, 8010a70 <CS_ComMdm_send+0xc4>
                               (uint16_t) CSMT_COM_MDM,
                               (uint16_t) sizeof(csint_ComMdm_t),
                               (void *)&com_mdm_data) == DATAPACK_OK)
      {
        at_status_t err;
        err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_COM_MDM_TRANSACTION, &cmd_buf[0], &rsp_buf[0]);
 8010a16:	4825      	ldr	r0, [pc, #148]	; (8010aac <CS_ComMdm_send+0x100>)
 8010a18:	4b25      	ldr	r3, [pc, #148]	; (8010ab0 <CS_ComMdm_send+0x104>)
 8010a1a:	4a23      	ldr	r2, [pc, #140]	; (8010aa8 <CS_ComMdm_send+0xfc>)
 8010a1c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010a20:	218f      	movs	r1, #143	; 0x8f
 8010a22:	f7f6 fed5 	bl	80077d0 <AT_sendcmd>
        if (err == ATSTATUS_OK)
 8010a26:	4604      	mov	r4, r0
 8010a28:	bb10      	cbnz	r0, 8010a70 <CS_ComMdm_send+0xc4>
        {
          retval = CELLULAR_OK;
          if (DATAPACK_readStruct(&rsp_buf[0],
 8010a2a:	4821      	ldr	r0, [pc, #132]	; (8010ab0 <CS_ComMdm_send+0x104>)
 8010a2c:	ab01      	add	r3, sp, #4
 8010a2e:	221c      	movs	r2, #28
 8010a30:	2133      	movs	r1, #51	; 0x33
 8010a32:	f7f7 faf9 	bl	8008028 <DATAPACK_readStruct>
 8010a36:	b9c0      	cbnz	r0, 8010a6a <CS_ComMdm_send+0xbe>
                                  (uint16_t) CSMT_COM_MDM,
                                  (uint16_t) sizeof(csint_ComMdm_t),
                                  &com_mdm_data) == DATAPACK_OK)
          {
            PRINT_INFO("returned value: error code=%ld", com_mdm_data.errorCode)
 8010a38:	9a07      	ldr	r2, [sp, #28]
 8010a3a:	491e      	ldr	r1, [pc, #120]	; (8010ab4 <CS_ComMdm_send+0x108>)
 8010a3c:	4818      	ldr	r0, [pc, #96]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a3e:	f00c fa3b 	bl	801ceb8 <sprintf>
 8010a42:	4817      	ldr	r0, [pc, #92]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a44:	f007 fa76 	bl	8017f34 <crs_strlen>
 8010a48:	4a15      	ldr	r2, [pc, #84]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a4a:	b283      	uxth	r3, r0
 8010a4c:	4631      	mov	r1, r6
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f007 faae 	bl	8017fb0 <traceIF_itmPrint>
 8010a54:	4812      	ldr	r0, [pc, #72]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a56:	f007 fa6d 	bl	8017f34 <crs_strlen>
 8010a5a:	4a11      	ldr	r2, [pc, #68]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a5c:	b283      	uxth	r3, r0
 8010a5e:	4631      	mov	r1, r6
 8010a60:	4620      	mov	r0, r4
 8010a62:	f007 fccb 	bl	80183fc <traceIF_uartPrint>

            /* recopy  error code */
            *errorCode = com_mdm_data.errorCode;
 8010a66:	9b07      	ldr	r3, [sp, #28]
 8010a68:	602b      	str	r3, [r5, #0]
  if (retval == CELLULAR_ERROR)
  {
    PRINT_ERR("<Cellular_Service> error during COM-MDM send")
  }
  return (retval);
}
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	b008      	add	sp, #32
 8010a6e:	bd70      	pop	{r4, r5, r6, pc}
    PRINT_ERR("<Cellular_Service> error during COM-MDM send")
 8010a70:	4911      	ldr	r1, [pc, #68]	; (8010ab8 <CS_ComMdm_send+0x10c>)
 8010a72:	480b      	ldr	r0, [pc, #44]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a74:	f00c fa90 	bl	801cf98 <strcpy>
 8010a78:	4809      	ldr	r0, [pc, #36]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a7a:	f007 fa5b 	bl	8017f34 <crs_strlen>
 8010a7e:	4a08      	ldr	r2, [pc, #32]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a80:	b283      	uxth	r3, r0
 8010a82:	2110      	movs	r1, #16
 8010a84:	2000      	movs	r0, #0
 8010a86:	f007 fa93 	bl	8017fb0 <traceIF_itmPrint>
 8010a8a:	4805      	ldr	r0, [pc, #20]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a8c:	f007 fa52 	bl	8017f34 <crs_strlen>
 8010a90:	4a03      	ldr	r2, [pc, #12]	; (8010aa0 <CS_ComMdm_send+0xf4>)
 8010a92:	b283      	uxth	r3, r0
 8010a94:	2110      	movs	r1, #16
 8010a96:	2000      	movs	r0, #0
 8010a98:	f007 fcb0 	bl	80183fc <traceIF_uartPrint>
 8010a9c:	2401      	movs	r4, #1
 8010a9e:	e7e4      	b.n	8010a6a <CS_ComMdm_send+0xbe>
 8010aa0:	20008df8 	.word	0x20008df8
 8010aa4:	080282d0 	.word	0x080282d0
 8010aa8:	20003586 	.word	0x20003586
 8010aac:	20003584 	.word	0x20003584
 8010ab0:	20003778 	.word	0x20003778
 8010ab4:	0802826d 	.word	0x0802826d
 8010ab8:	080282e8 	.word	0x080282e8

08010abc <CS_ComMdm_receive>:

CS_Status_t CS_ComMdm_receive(CS_Rx_Buffer_t *rxBuf, int32_t *errorCode)
{
 8010abc:	b570      	push	{r4, r5, r6, lr}
 8010abe:	4605      	mov	r5, r0
 8010ac0:	b088      	sub	sp, #32
  CS_Status_t retval = CELLULAR_ERROR;
  PRINT_API("CS_ComMdm_receive")
 8010ac2:	4863      	ldr	r0, [pc, #396]	; (8010c50 <CS_ComMdm_receive+0x194>)
{
 8010ac4:	460e      	mov	r6, r1
  PRINT_API("CS_ComMdm_receive")
 8010ac6:	4963      	ldr	r1, [pc, #396]	; (8010c54 <CS_ComMdm_receive+0x198>)
 8010ac8:	f00c fa66 	bl	801cf98 <strcpy>
 8010acc:	4860      	ldr	r0, [pc, #384]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010ace:	f007 fa31 	bl	8017f34 <crs_strlen>
 8010ad2:	4a5f      	ldr	r2, [pc, #380]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010ad4:	b283      	uxth	r3, r0
 8010ad6:	2104      	movs	r1, #4
 8010ad8:	2000      	movs	r0, #0
 8010ada:	f007 fa69 	bl	8017fb0 <traceIF_itmPrint>
 8010ade:	485c      	ldr	r0, [pc, #368]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010ae0:	f007 fa28 	bl	8017f34 <crs_strlen>
 8010ae4:	4a5a      	ldr	r2, [pc, #360]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010ae6:	b283      	uxth	r3, r0
 8010ae8:	2104      	movs	r1, #4
 8010aea:	2000      	movs	r0, #0
 8010aec:	f007 fc86 	bl	80183fc <traceIF_uartPrint>

  /* check buffer are not NULL and size is not 0 */
  if (rxBuf != NULL)
 8010af0:	2d00      	cmp	r5, #0
 8010af2:	f000 8095 	beq.w	8010c20 <CS_ComMdm_receive+0x164>
  {
    if ((rxBuf->p_buffer != NULL)
 8010af6:	686b      	ldr	r3, [r5, #4]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f000 8091 	beq.w	8010c20 <CS_ComMdm_receive+0x164>
        && (rxBuf->max_buffer_size != 0U))
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 808d 	beq.w	8010c20 <CS_ComMdm_receive+0x164>
    {
      csint_ComMdm_t com_mdm_data;

      com_mdm_data.transaction_type = CS_COMMDM_RECEIVE;
      (void) memset((void *)&com_mdm_data.txBuffer, 0, sizeof(CS_Tx_Buffer_t));
      (void) memcpy((void *)&com_mdm_data.rxBuffer, (void *)rxBuf, sizeof(CS_Rx_Buffer_t));
 8010b06:	6828      	ldr	r0, [r5, #0]
 8010b08:	6869      	ldr	r1, [r5, #4]
      com_mdm_data.transaction_type = CS_COMMDM_RECEIVE;
 8010b0a:	2302      	movs	r3, #2
      (void) memset((void *)&com_mdm_data.txBuffer, 0, sizeof(CS_Tx_Buffer_t));
 8010b0c:	2200      	movs	r2, #0
      com_mdm_data.transaction_type = CS_COMMDM_RECEIVE;
 8010b0e:	f88d 3004 	strb.w	r3, [sp, #4]
      (void) memcpy((void *)&com_mdm_data.rxBuffer, (void *)rxBuf, sizeof(CS_Rx_Buffer_t));
 8010b12:	ab04      	add	r3, sp, #16
      (void) memset((void *)&com_mdm_data.txBuffer, 0, sizeof(CS_Tx_Buffer_t));
 8010b14:	e9cd 2202 	strd	r2, r2, [sp, #8]
      (void) memcpy((void *)&com_mdm_data.rxBuffer, (void *)rxBuf, sizeof(CS_Rx_Buffer_t));
 8010b18:	c303      	stmia	r3!, {r0, r1}
 8010b1a:	68a8      	ldr	r0, [r5, #8]
 8010b1c:	6018      	str	r0, [r3, #0]
      com_mdm_data.errorCode = 0;

      if (DATAPACK_writeStruct(&cmd_buf[0],
 8010b1e:	2133      	movs	r1, #51	; 0x33
      com_mdm_data.errorCode = 0;
 8010b20:	9207      	str	r2, [sp, #28]
      if (DATAPACK_writeStruct(&cmd_buf[0],
 8010b22:	484d      	ldr	r0, [pc, #308]	; (8010c58 <CS_ComMdm_receive+0x19c>)
 8010b24:	ab01      	add	r3, sp, #4
 8010b26:	221c      	movs	r2, #28
 8010b28:	f7f7 f9fa 	bl	8007f20 <DATAPACK_writeStruct>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d177      	bne.n	8010c20 <CS_ComMdm_receive+0x164>
                               (uint16_t) CSMT_COM_MDM,
                               (uint16_t) sizeof(csint_ComMdm_t),
                               (void *)&com_mdm_data) == DATAPACK_OK)
      {
        at_status_t err;
        err = AT_sendcmd(_Adapter_Handle, (at_msg_t) SID_CS_COM_MDM_TRANSACTION, &cmd_buf[0], &rsp_buf[0]);
 8010b30:	484a      	ldr	r0, [pc, #296]	; (8010c5c <CS_ComMdm_receive+0x1a0>)
 8010b32:	4b4b      	ldr	r3, [pc, #300]	; (8010c60 <CS_ComMdm_receive+0x1a4>)
 8010b34:	4a48      	ldr	r2, [pc, #288]	; (8010c58 <CS_ComMdm_receive+0x19c>)
 8010b36:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010b3a:	218f      	movs	r1, #143	; 0x8f
 8010b3c:	f7f6 fe48 	bl	80077d0 <AT_sendcmd>
        if (err == ATSTATUS_OK)
 8010b40:	4604      	mov	r4, r0
 8010b42:	2800      	cmp	r0, #0
 8010b44:	d16c      	bne.n	8010c20 <CS_ComMdm_receive+0x164>
        {
          retval = CELLULAR_OK;
          if (DATAPACK_readStruct(&rsp_buf[0],
 8010b46:	4846      	ldr	r0, [pc, #280]	; (8010c60 <CS_ComMdm_receive+0x1a4>)
 8010b48:	ab01      	add	r3, sp, #4
 8010b4a:	221c      	movs	r2, #28
 8010b4c:	2133      	movs	r1, #51	; 0x33
 8010b4e:	f7f7 fa6b 	bl	8008028 <DATAPACK_readStruct>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d161      	bne.n	8010c1a <CS_ComMdm_receive+0x15e>
                                  (uint16_t) CSMT_COM_MDM,
                                  (uint16_t) sizeof(csint_ComMdm_t),
                                  &com_mdm_data) == DATAPACK_OK)
          {
            PRINT_INFO("returned value: TX ptr=%p size=%ld", com_mdm_data.txBuffer.p_buffer, com_mdm_data.txBuffer.buffer_size)
 8010b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b5a:	4942      	ldr	r1, [pc, #264]	; (8010c64 <CS_ComMdm_receive+0x1a8>)
 8010b5c:	483c      	ldr	r0, [pc, #240]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b5e:	f00c f9ab 	bl	801ceb8 <sprintf>
 8010b62:	483b      	ldr	r0, [pc, #236]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b64:	f007 f9e6 	bl	8017f34 <crs_strlen>
 8010b68:	4a39      	ldr	r2, [pc, #228]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b6a:	b283      	uxth	r3, r0
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f007 fa1e 	bl	8017fb0 <traceIF_itmPrint>
 8010b74:	4836      	ldr	r0, [pc, #216]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b76:	f007 f9dd 	bl	8017f34 <crs_strlen>
 8010b7a:	4a35      	ldr	r2, [pc, #212]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b7c:	b283      	uxth	r3, r0
 8010b7e:	2101      	movs	r1, #1
 8010b80:	4620      	mov	r0, r4
 8010b82:	f007 fc3b 	bl	80183fc <traceIF_uartPrint>
            PRINT_INFO("returned value: RX ptr=%p size=%ld", com_mdm_data.rxBuffer.p_buffer, com_mdm_data.rxBuffer.buffer_size)
 8010b86:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8010b8a:	4937      	ldr	r1, [pc, #220]	; (8010c68 <CS_ComMdm_receive+0x1ac>)
 8010b8c:	4830      	ldr	r0, [pc, #192]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b8e:	f00c f993 	bl	801ceb8 <sprintf>
 8010b92:	482f      	ldr	r0, [pc, #188]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b94:	f007 f9ce 	bl	8017f34 <crs_strlen>
 8010b98:	4a2d      	ldr	r2, [pc, #180]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010b9a:	b283      	uxth	r3, r0
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f007 fa06 	bl	8017fb0 <traceIF_itmPrint>
 8010ba4:	482a      	ldr	r0, [pc, #168]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010ba6:	f007 f9c5 	bl	8017f34 <crs_strlen>
 8010baa:	4a29      	ldr	r2, [pc, #164]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bac:	b283      	uxth	r3, r0
 8010bae:	2101      	movs	r1, #1
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f007 fc23 	bl	80183fc <traceIF_uartPrint>
            PRINT_INFO("returned value: RX = %s", com_mdm_data.rxBuffer.p_buffer)
 8010bb6:	9a05      	ldr	r2, [sp, #20]
 8010bb8:	492c      	ldr	r1, [pc, #176]	; (8010c6c <CS_ComMdm_receive+0x1b0>)
 8010bba:	4825      	ldr	r0, [pc, #148]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bbc:	f00c f97c 	bl	801ceb8 <sprintf>
 8010bc0:	4823      	ldr	r0, [pc, #140]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bc2:	f007 f9b7 	bl	8017f34 <crs_strlen>
 8010bc6:	4a22      	ldr	r2, [pc, #136]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bc8:	b283      	uxth	r3, r0
 8010bca:	2101      	movs	r1, #1
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f007 f9ef 	bl	8017fb0 <traceIF_itmPrint>
 8010bd2:	481f      	ldr	r0, [pc, #124]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bd4:	f007 f9ae 	bl	8017f34 <crs_strlen>
 8010bd8:	4a1d      	ldr	r2, [pc, #116]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bda:	b283      	uxth	r3, r0
 8010bdc:	2101      	movs	r1, #1
 8010bde:	4620      	mov	r0, r4
 8010be0:	f007 fc0c 	bl	80183fc <traceIF_uartPrint>
            PRINT_INFO("returned value: error code=%ld", com_mdm_data.errorCode)
 8010be4:	9a07      	ldr	r2, [sp, #28]
 8010be6:	4922      	ldr	r1, [pc, #136]	; (8010c70 <CS_ComMdm_receive+0x1b4>)
 8010be8:	4819      	ldr	r0, [pc, #100]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bea:	f00c f965 	bl	801ceb8 <sprintf>
 8010bee:	4818      	ldr	r0, [pc, #96]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bf0:	f007 f9a0 	bl	8017f34 <crs_strlen>
 8010bf4:	4a16      	ldr	r2, [pc, #88]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010bf6:	b283      	uxth	r3, r0
 8010bf8:	2101      	movs	r1, #1
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f007 f9d8 	bl	8017fb0 <traceIF_itmPrint>
 8010c00:	4813      	ldr	r0, [pc, #76]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c02:	f007 f997 	bl	8017f34 <crs_strlen>
 8010c06:	4a12      	ldr	r2, [pc, #72]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c08:	b283      	uxth	r3, r0
 8010c0a:	2101      	movs	r1, #1
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f007 fbf5 	bl	80183fc <traceIF_uartPrint>

            /* recopy size of received buffer + error code */
            rxBuf->buffer_size = com_mdm_data.rxBuffer.buffer_size;
 8010c12:	9b06      	ldr	r3, [sp, #24]
 8010c14:	60ab      	str	r3, [r5, #8]
            *errorCode = com_mdm_data.errorCode;
 8010c16:	9b07      	ldr	r3, [sp, #28]
 8010c18:	6033      	str	r3, [r6, #0]
  if (retval == CELLULAR_ERROR)
  {
    PRINT_ERR("<Cellular_Service> error during COM-MDM receive")
  }
  return (retval);
}
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	b008      	add	sp, #32
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
    PRINT_ERR("<Cellular_Service> error during COM-MDM receive")
 8010c20:	4914      	ldr	r1, [pc, #80]	; (8010c74 <CS_ComMdm_receive+0x1b8>)
 8010c22:	480b      	ldr	r0, [pc, #44]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c24:	f00c f9b8 	bl	801cf98 <strcpy>
 8010c28:	4809      	ldr	r0, [pc, #36]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c2a:	f007 f983 	bl	8017f34 <crs_strlen>
 8010c2e:	4a08      	ldr	r2, [pc, #32]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c30:	b283      	uxth	r3, r0
 8010c32:	2110      	movs	r1, #16
 8010c34:	2000      	movs	r0, #0
 8010c36:	f007 f9bb 	bl	8017fb0 <traceIF_itmPrint>
 8010c3a:	4805      	ldr	r0, [pc, #20]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c3c:	f007 f97a 	bl	8017f34 <crs_strlen>
 8010c40:	4a03      	ldr	r2, [pc, #12]	; (8010c50 <CS_ComMdm_receive+0x194>)
 8010c42:	b283      	uxth	r3, r0
 8010c44:	2110      	movs	r1, #16
 8010c46:	2000      	movs	r0, #0
 8010c48:	f007 fbd8 	bl	80183fc <traceIF_uartPrint>
 8010c4c:	2401      	movs	r4, #1
 8010c4e:	e7e4      	b.n	8010c1a <CS_ComMdm_receive+0x15e>
 8010c50:	20008df8 	.word	0x20008df8
 8010c54:	08028320 	.word	0x08028320
 8010c58:	20003586 	.word	0x20003586
 8010c5c:	20003584 	.word	0x20003584
 8010c60:	20003778 	.word	0x20003778
 8010c64:	08028200 	.word	0x08028200
 8010c68:	08028228 	.word	0x08028228
 8010c6c:	08028250 	.word	0x08028250
 8010c70:	0802826d 	.word	0x0802826d
 8010c74:	0802833b 	.word	0x0802833b

08010c78 <CST_cellular_direct_cmd_callback>:
/**
 * @brief  at processing callback
 * @param  direct_cmd_rx - rx command line
 * @retval -
 */
static void CST_cellular_direct_cmd_callback(CS_direct_cmd_rx_t direct_cmd_rx) {
 8010c78:	b084      	sub	sp, #16
 8010c7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
	UNUSED(direct_cmd_rx);
}
 8010c7e:	b004      	add	sp, #16
 8010c80:	4770      	bx	lr
	...

08010c84 <CST_CMD_display_bitmap_name>:
		uint32_t bitmap_LSB, const CST_band_descr_t *bitmap_descr) {
 8010c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			PRINT_FORCE("%s", bitmap_name)
 8010c88:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8010ce8 <CST_CMD_display_bitmap_name+0x64>
 8010c8c:	4d15      	ldr	r5, [pc, #84]	; (8010ce4 <CST_CMD_display_bitmap_name+0x60>)
		uint32_t bitmap_LSB, const CST_band_descr_t *bitmap_descr) {
 8010c8e:	4606      	mov	r6, r0
 8010c90:	460f      	mov	r7, r1
 8010c92:	4614      	mov	r4, r2
	for (i = 0U; bitmap_descr[i].name != NULL; i++) {
 8010c94:	6822      	ldr	r2, [r4, #0]
 8010c96:	b90a      	cbnz	r2, 8010c9c <CST_CMD_display_bitmap_name+0x18>
}
 8010c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bitmap_value_lsb = bitmap_descr[i].value_LSB;
 8010c9c:	e9d4 c101 	ldrd	ip, r1, [r4, #4]
		bmask_msb = bitmap_MSB & bitmap_value_msb;
 8010ca0:	ea0c 0006 	and.w	r0, ip, r6
		bmask_lsb = bitmap_LSB & bitmap_value_lsb;
 8010ca4:	ea01 0307 	and.w	r3, r1, r7
		if (((bmask_msb != 0U) || (bmask_lsb != 0U))
 8010ca8:	ea50 0e03 	orrs.w	lr, r0, r3
 8010cac:	d018      	beq.n	8010ce0 <CST_CMD_display_bitmap_name+0x5c>
				&& (bmask_msb == bitmap_value_msb)
 8010cae:	4584      	cmp	ip, r0
 8010cb0:	d116      	bne.n	8010ce0 <CST_CMD_display_bitmap_name+0x5c>
				&& (bmask_lsb == bitmap_value_lsb)) {
 8010cb2:	4299      	cmp	r1, r3
 8010cb4:	d114      	bne.n	8010ce0 <CST_CMD_display_bitmap_name+0x5c>
			PRINT_FORCE("%s", bitmap_name)
 8010cb6:	4641      	mov	r1, r8
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f00c f8fd 	bl	801ceb8 <sprintf>
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f007 f938 	bl	8017f34 <crs_strlen>
 8010cc4:	462a      	mov	r2, r5
 8010cc6:	b283      	uxth	r3, r0
 8010cc8:	2101      	movs	r1, #1
 8010cca:	2002      	movs	r0, #2
 8010ccc:	f007 f970 	bl	8017fb0 <traceIF_itmPrint>
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f007 f92f 	bl	8017f34 <crs_strlen>
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	b282      	uxth	r2, r0
 8010cda:	2002      	movs	r0, #2
 8010cdc:	f007 fba8 	bl	8018430 <traceIF_uartPrintForce>
	for (i = 0U; bitmap_descr[i].name != NULL; i++) {
 8010ce0:	340c      	adds	r4, #12
 8010ce2:	e7d7      	b.n	8010c94 <CST_CMD_display_bitmap_name+0x10>
 8010ce4:	20008ff8 	.word	0x20008ff8
 8010ce8:	080296a3 	.word	0x080296a3

08010cec <CST_CMD_get_band>:
		uint32_t *band_result_LSB) {
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	b085      	sub	sp, #20
	ret = 0;
 8010cf2:	2400      	movs	r4, #0
		uint32_t *band_result_LSB) {
 8010cf4:	4682      	mov	sl, r0
 8010cf6:	9301      	str	r3, [sp, #4]
 8010cf8:	f101 0608 	add.w	r6, r1, #8
 8010cfc:	eb01 0582 	add.w	r5, r1, r2, lsl #2
	band_value_LSB = 0;
 8010d00:	46a0      	mov	r8, r4
	band_value_MSB = 0;
 8010d02:	46a1      	mov	r9, r4
	for (j = 0U; j < nb_band; j++) {
 8010d04:	42ae      	cmp	r6, r5
 8010d06:	d11e      	bne.n	8010d46 <CST_CMD_get_band+0x5a>
	*band_result_MSB = band_value_MSB;
 8010d08:	9b01      	ldr	r3, [sp, #4]
	PRINT_FORCE("")
 8010d0a:	4921      	ldr	r1, [pc, #132]	; (8010d90 <CST_CMD_get_band+0xa4>)
	*band_result_MSB = band_value_MSB;
 8010d0c:	f8c3 9000 	str.w	r9, [r3]
	*band_result_LSB = band_value_LSB;
 8010d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	PRINT_FORCE("")
 8010d12:	4820      	ldr	r0, [pc, #128]	; (8010d94 <CST_CMD_get_band+0xa8>)
	*band_result_LSB = band_value_LSB;
 8010d14:	f8c3 8000 	str.w	r8, [r3]
	PRINT_FORCE("")
 8010d18:	f00c f93e 	bl	801cf98 <strcpy>
 8010d1c:	481d      	ldr	r0, [pc, #116]	; (8010d94 <CST_CMD_get_band+0xa8>)
 8010d1e:	f007 f909 	bl	8017f34 <crs_strlen>
 8010d22:	4a1c      	ldr	r2, [pc, #112]	; (8010d94 <CST_CMD_get_band+0xa8>)
 8010d24:	b283      	uxth	r3, r0
 8010d26:	2101      	movs	r1, #1
 8010d28:	2002      	movs	r0, #2
 8010d2a:	f007 f941 	bl	8017fb0 <traceIF_itmPrint>
 8010d2e:	4819      	ldr	r0, [pc, #100]	; (8010d94 <CST_CMD_get_band+0xa8>)
 8010d30:	f007 f900 	bl	8017f34 <crs_strlen>
 8010d34:	4917      	ldr	r1, [pc, #92]	; (8010d94 <CST_CMD_get_band+0xa8>)
 8010d36:	b282      	uxth	r2, r0
 8010d38:	2002      	movs	r0, #2
 8010d3a:	f007 fb79 	bl	8018430 <traceIF_uartPrintForce>
}
 8010d3e:	4620      	mov	r0, r4
 8010d40:	b005      	add	sp, #20
 8010d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0U; band_descr[i].name != NULL; i++) {
 8010d46:	4657      	mov	r7, sl
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	46bb      	mov	fp, r7
 8010d4c:	b909      	cbnz	r1, 8010d52 <CST_CMD_get_band+0x66>
			ret = 1;
 8010d4e:	2401      	movs	r4, #1
 8010d50:	e01b      	b.n	8010d8a <CST_CMD_get_band+0x9e>
			if (memcmp((const CRC_CHAR_t*) argv_p[current_arg],
 8010d52:	6833      	ldr	r3, [r6, #0]
 8010d54:	9103      	str	r1, [sp, #12]
					crs_strlen((const uint8_t*) argv_p[current_arg])) == 0) {
 8010d56:	4618      	mov	r0, r3
 8010d58:	9302      	str	r3, [sp, #8]
 8010d5a:	f007 f8eb 	bl	8017f34 <crs_strlen>
			if (memcmp((const CRC_CHAR_t*) argv_p[current_arg],
 8010d5e:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
					crs_strlen((const uint8_t*) argv_p[current_arg])) == 0) {
 8010d62:	4602      	mov	r2, r0
			if (memcmp((const CRC_CHAR_t*) argv_p[current_arg],
 8010d64:	4618      	mov	r0, r3
 8010d66:	f00c f85b 	bl	801ce20 <memcmp>
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	d1eb      	bne.n	8010d48 <CST_CMD_get_band+0x5c>
				band_value_MSB = band_value_MSB | band_descr[i].value_MSB;
 8010d70:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010d74:	ea49 0903 	orr.w	r9, r9, r3
				band_value_LSB = band_value_LSB | band_descr[i].value_LSB;
 8010d78:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010d7c:	ea48 0803 	orr.w	r8, r8, r3
		if (band_descr[i].name == NULL) {
 8010d80:	f8db 3000 	ldr.w	r3, [fp]
			ret = 1;
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bf08      	it	eq
 8010d88:	2401      	moveq	r4, #1
	for (j = 0U; j < nb_band; j++) {
 8010d8a:	3604      	adds	r6, #4
 8010d8c:	e7ba      	b.n	8010d04 <CST_CMD_get_band+0x18>
 8010d8e:	bf00      	nop
 8010d90:	080246fe 	.word	0x080246fe
 8010d94:	20008ff8 	.word	0x20008ff8

08010d98 <CST_ModemHelpCmd>:
static void CST_ModemHelpCmd(void) {
 8010d98:	b570      	push	{r4, r5, r6, lr}
	CMD_print_help(CST_cmd_modem_label);
 8010d9a:	4ddf      	ldr	r5, [pc, #892]	; (8011118 <CST_ModemHelpCmd+0x380>)
	PRINT_FORCE(
 8010d9c:	4cdf      	ldr	r4, [pc, #892]	; (801111c <CST_ModemHelpCmd+0x384>)
	PRINT_FORCE("\n\r");
 8010d9e:	4ee0      	ldr	r6, [pc, #896]	; (8011120 <CST_ModemHelpCmd+0x388>)
	CMD_print_help(CST_cmd_modem_label);
 8010da0:	4628      	mov	r0, r5
 8010da2:	f00a ff59 	bl	801bc58 <CMD_print_help>
	PRINT_FORCE(
 8010da6:	49df      	ldr	r1, [pc, #892]	; (8011124 <CST_ModemHelpCmd+0x38c>)
 8010da8:	4620      	mov	r0, r4
 8010daa:	f00c f8f5 	bl	801cf98 <strcpy>
 8010dae:	4620      	mov	r0, r4
 8010db0:	f007 f8c0 	bl	8017f34 <crs_strlen>
 8010db4:	4622      	mov	r2, r4
 8010db6:	b283      	uxth	r3, r0
 8010db8:	2101      	movs	r1, #1
 8010dba:	2002      	movs	r0, #2
 8010dbc:	f007 f8f8 	bl	8017fb0 <traceIF_itmPrint>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f007 f8b7 	bl	8017f34 <crs_strlen>
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	b282      	uxth	r2, r0
 8010dca:	2002      	movs	r0, #2
 8010dcc:	f007 fb30 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("Setting a new configuration is performed in two steps:")
 8010dd0:	49d5      	ldr	r1, [pc, #852]	; (8011128 <CST_ModemHelpCmd+0x390>)
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f00c f8e0 	bl	801cf98 <strcpy>
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f007 f8ab 	bl	8017f34 <crs_strlen>
 8010dde:	4622      	mov	r2, r4
 8010de0:	b283      	uxth	r3, r0
 8010de2:	2101      	movs	r1, #1
 8010de4:	2002      	movs	r0, #2
 8010de6:	f007 f8e3 	bl	8017fb0 <traceIF_itmPrint>
 8010dea:	4620      	mov	r0, r4
 8010dec:	f007 f8a2 	bl	8017f34 <crs_strlen>
 8010df0:	4621      	mov	r1, r4
 8010df2:	b282      	uxth	r2, r0
 8010df4:	2002      	movs	r0, #2
 8010df6:	f007 fb1b 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\n\r");
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f00c f8cb 	bl	801cf98 <strcpy>
 8010e02:	4620      	mov	r0, r4
 8010e04:	f007 f896 	bl	8017f34 <crs_strlen>
 8010e08:	4622      	mov	r2, r4
 8010e0a:	b283      	uxth	r3, r0
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	2002      	movs	r0, #2
 8010e10:	f007 f8ce 	bl	8017fb0 <traceIF_itmPrint>
 8010e14:	4620      	mov	r0, r4
 8010e16:	f007 f88d 	bl	8017f34 <crs_strlen>
 8010e1a:	4621      	mov	r1, r4
 8010e1c:	b282      	uxth	r2, r0
 8010e1e:	2002      	movs	r0, #2
 8010e20:	f007 fb06 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010e24:	49c1      	ldr	r1, [pc, #772]	; (801112c <CST_ModemHelpCmd+0x394>)
 8010e26:	4620      	mov	r0, r4
 8010e28:	f00c f8b6 	bl	801cf98 <strcpy>
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f007 f881 	bl	8017f34 <crs_strlen>
 8010e32:	4622      	mov	r2, r4
 8010e34:	b283      	uxth	r3, r0
 8010e36:	2101      	movs	r1, #1
 8010e38:	2002      	movs	r0, #2
 8010e3a:	f007 f8b9 	bl	8017fb0 <traceIF_itmPrint>
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f007 f878 	bl	8017f34 <crs_strlen>
 8010e44:	4621      	mov	r1, r4
 8010e46:	b282      	uxth	r2, r0
 8010e48:	2002      	movs	r0, #2
 8010e4a:	f007 faf1 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config iotopmode [M1|NB1|ALL]  sets iotop mode)",
 8010e4e:	462a      	mov	r2, r5
 8010e50:	49b7      	ldr	r1, [pc, #732]	; (8011130 <CST_ModemHelpCmd+0x398>)
 8010e52:	4620      	mov	r0, r4
 8010e54:	f00c f830 	bl	801ceb8 <sprintf>
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f007 f86b 	bl	8017f34 <crs_strlen>
 8010e5e:	4622      	mov	r2, r4
 8010e60:	b283      	uxth	r3, r0
 8010e62:	2101      	movs	r1, #1
 8010e64:	2002      	movs	r0, #2
 8010e66:	f007 f8a3 	bl	8017fb0 <traceIF_itmPrint>
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f007 f862 	bl	8017f34 <crs_strlen>
 8010e70:	4621      	mov	r1, r4
 8010e72:	b282      	uxth	r2, r0
 8010e74:	2002      	movs	r0, #2
 8010e76:	f007 fadb 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config nwscanmode [GSM|LTE|AUTO]  (sets scan mode)",
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	49ad      	ldr	r1, [pc, #692]	; (8011134 <CST_ModemHelpCmd+0x39c>)
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f00c f81a 	bl	801ceb8 <sprintf>
 8010e84:	4620      	mov	r0, r4
 8010e86:	f007 f855 	bl	8017f34 <crs_strlen>
 8010e8a:	4622      	mov	r2, r4
 8010e8c:	b283      	uxth	r3, r0
 8010e8e:	2101      	movs	r1, #1
 8010e90:	2002      	movs	r0, #2
 8010e92:	f007 f88d 	bl	8017fb0 <traceIF_itmPrint>
 8010e96:	4620      	mov	r0, r4
 8010e98:	f007 f84c 	bl	8017f34 <crs_strlen>
 8010e9c:	4621      	mov	r1, r4
 8010e9e:	b282      	uxth	r2, r0
 8010ea0:	2002      	movs	r0, #2
 8010ea2:	f007 fac5 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010ea6:	462a      	mov	r2, r5
 8010ea8:	49a3      	ldr	r1, [pc, #652]	; (8011138 <CST_ModemHelpCmd+0x3a0>)
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f00c f804 	bl	801ceb8 <sprintf>
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f007 f83f 	bl	8017f34 <crs_strlen>
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	b283      	uxth	r3, r0
 8010eba:	2101      	movs	r1, #1
 8010ebc:	2002      	movs	r0, #2
 8010ebe:	f007 f877 	bl	8017fb0 <traceIF_itmPrint>
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f007 f836 	bl	8017f34 <crs_strlen>
 8010ec8:	4621      	mov	r1, r4
 8010eca:	b282      	uxth	r2, r0
 8010ecc:	2002      	movs	r0, #2
 8010ece:	f007 faaf 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010ed2:	462a      	mov	r2, r5
 8010ed4:	4999      	ldr	r1, [pc, #612]	; (801113c <CST_ModemHelpCmd+0x3a4>)
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f00b ffee 	bl	801ceb8 <sprintf>
 8010edc:	4620      	mov	r0, r4
 8010ede:	f007 f829 	bl	8017f34 <crs_strlen>
 8010ee2:	4622      	mov	r2, r4
 8010ee4:	b283      	uxth	r3, r0
 8010ee6:	2101      	movs	r1, #1
 8010ee8:	2002      	movs	r0, #2
 8010eea:	f007 f861 	bl	8017fb0 <traceIF_itmPrint>
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f007 f820 	bl	8017f34 <crs_strlen>
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	b282      	uxth	r2, r0
 8010ef8:	2002      	movs	r0, #2
 8010efa:	f007 fa99 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010efe:	4990      	ldr	r1, [pc, #576]	; (8011140 <CST_ModemHelpCmd+0x3a8>)
 8010f00:	4620      	mov	r0, r4
 8010f02:	f00c f849 	bl	801cf98 <strcpy>
 8010f06:	4620      	mov	r0, r4
 8010f08:	f007 f814 	bl	8017f34 <crs_strlen>
 8010f0c:	4622      	mov	r2, r4
 8010f0e:	b283      	uxth	r3, r0
 8010f10:	2101      	movs	r1, #1
 8010f12:	2002      	movs	r0, #2
 8010f14:	f007 f84c 	bl	8017fb0 <traceIF_itmPrint>
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f007 f80b 	bl	8017f34 <crs_strlen>
 8010f1e:	4621      	mov	r1, r4
 8010f20:	b282      	uxth	r2, r0
 8010f22:	2002      	movs	r0, #2
 8010f24:	f007 fa84 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010f28:	462a      	mov	r2, r5
 8010f2a:	4986      	ldr	r1, [pc, #536]	; (8011144 <CST_ModemHelpCmd+0x3ac>)
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f00b ffc3 	bl	801ceb8 <sprintf>
 8010f32:	4620      	mov	r0, r4
 8010f34:	f006 fffe 	bl	8017f34 <crs_strlen>
 8010f38:	4622      	mov	r2, r4
 8010f3a:	b283      	uxth	r3, r0
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	2002      	movs	r0, #2
 8010f40:	f007 f836 	bl	8017fb0 <traceIF_itmPrint>
 8010f44:	4620      	mov	r0, r4
 8010f46:	f006 fff5 	bl	8017f34 <crs_strlen>
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	b282      	uxth	r2, r0
 8010f4e:	2002      	movs	r0, #2
 8010f50:	f007 fa6e 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010f54:	497c      	ldr	r1, [pc, #496]	; (8011148 <CST_ModemHelpCmd+0x3b0>)
 8010f56:	4620      	mov	r0, r4
 8010f58:	f00c f81e 	bl	801cf98 <strcpy>
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f006 ffe9 	bl	8017f34 <crs_strlen>
 8010f62:	4622      	mov	r2, r4
 8010f64:	b283      	uxth	r3, r0
 8010f66:	2101      	movs	r1, #1
 8010f68:	2002      	movs	r0, #2
 8010f6a:	f007 f821 	bl	8017fb0 <traceIF_itmPrint>
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f006 ffe0 	bl	8017f34 <crs_strlen>
 8010f74:	4621      	mov	r1, r4
 8010f76:	b282      	uxth	r2, r0
 8010f78:	2002      	movs	r0, #2
 8010f7a:	f007 fa59 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8010f7e:	462a      	mov	r2, r5
 8010f80:	4972      	ldr	r1, [pc, #456]	; (801114c <CST_ModemHelpCmd+0x3b4>)
 8010f82:	4620      	mov	r0, r4
 8010f84:	f00b ff98 	bl	801ceb8 <sprintf>
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f006 ffd3 	bl	8017f34 <crs_strlen>
 8010f8e:	4622      	mov	r2, r4
 8010f90:	b283      	uxth	r3, r0
 8010f92:	2101      	movs	r1, #1
 8010f94:	2002      	movs	r0, #2
 8010f96:	f007 f80b 	bl	8017fb0 <traceIF_itmPrint>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f006 ffca 	bl	8017f34 <crs_strlen>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	b282      	uxth	r2, r0
 8010fa4:	2002      	movs	r0, #2
 8010fa6:	f007 fa43 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("                  (sets the sequence order to scan)")
 8010faa:	4969      	ldr	r1, [pc, #420]	; (8011150 <CST_ModemHelpCmd+0x3b8>)
 8010fac:	4620      	mov	r0, r4
 8010fae:	f00b fff3 	bl	801cf98 <strcpy>
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f006 ffbe 	bl	8017f34 <crs_strlen>
 8010fb8:	4622      	mov	r2, r4
 8010fba:	b283      	uxth	r3, r0
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	2002      	movs	r0, #2
 8010fc0:	f006 fff6 	bl	8017fb0 <traceIF_itmPrint>
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f006 ffb5 	bl	8017f34 <crs_strlen>
 8010fca:	4621      	mov	r1, r4
 8010fcc:	b282      	uxth	r2, r0
 8010fce:	2002      	movs	r0, #2
 8010fd0:	f007 fa2e 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\n\r");
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f00b ffde 	bl	801cf98 <strcpy>
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f006 ffa9 	bl	8017f34 <crs_strlen>
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	b283      	uxth	r3, r0
 8010fe6:	2101      	movs	r1, #1
 8010fe8:	2002      	movs	r0, #2
 8010fea:	f006 ffe1 	bl	8017fb0 <traceIF_itmPrint>
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f006 ffa0 	bl	8017f34 <crs_strlen>
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	b282      	uxth	r2, r0
 8010ff8:	2002      	movs	r0, #2
 8010ffa:	f007 fa19 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("- 2nd step: send the new configuration to the modem");
 8010ffe:	4955      	ldr	r1, [pc, #340]	; (8011154 <CST_ModemHelpCmd+0x3bc>)
 8011000:	4620      	mov	r0, r4
 8011002:	f00b ffc9 	bl	801cf98 <strcpy>
 8011006:	4620      	mov	r0, r4
 8011008:	f006 ff94 	bl	8017f34 <crs_strlen>
 801100c:	4622      	mov	r2, r4
 801100e:	b283      	uxth	r3, r0
 8011010:	2101      	movs	r1, #1
 8011012:	2002      	movs	r0, #2
 8011014:	f006 ffcc 	bl	8017fb0 <traceIF_itmPrint>
 8011018:	4620      	mov	r0, r4
 801101a:	f006 ff8b 	bl	8017f34 <crs_strlen>
 801101e:	4621      	mov	r1, r4
 8011020:	b282      	uxth	r2, r0
 8011022:	2002      	movs	r0, #2
 8011024:	f007 fa04 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config send", (CRC_CHAR_t* )CST_cmd_modem_label)
 8011028:	462a      	mov	r2, r5
 801102a:	494b      	ldr	r1, [pc, #300]	; (8011158 <CST_ModemHelpCmd+0x3c0>)
 801102c:	4620      	mov	r0, r4
 801102e:	f00b ff43 	bl	801ceb8 <sprintf>
 8011032:	4620      	mov	r0, r4
 8011034:	f006 ff7e 	bl	8017f34 <crs_strlen>
 8011038:	4622      	mov	r2, r4
 801103a:	b283      	uxth	r3, r0
 801103c:	2101      	movs	r1, #1
 801103e:	2002      	movs	r0, #2
 8011040:	f006 ffb6 	bl	8017fb0 <traceIF_itmPrint>
 8011044:	4620      	mov	r0, r4
 8011046:	f006 ff75 	bl	8017f34 <crs_strlen>
 801104a:	4621      	mov	r1, r4
 801104c:	b282      	uxth	r2, r0
 801104e:	2002      	movs	r0, #2
 8011050:	f007 f9ee 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\n\r");
 8011054:	4631      	mov	r1, r6
 8011056:	4620      	mov	r0, r4
 8011058:	f00b ff9e 	bl	801cf98 <strcpy>
 801105c:	4620      	mov	r0, r4
 801105e:	f006 ff69 	bl	8017f34 <crs_strlen>
 8011062:	4622      	mov	r2, r4
 8011064:	b283      	uxth	r3, r0
 8011066:	2101      	movs	r1, #1
 8011068:	2002      	movs	r0, #2
 801106a:	f006 ffa1 	bl	8017fb0 <traceIF_itmPrint>
 801106e:	4620      	mov	r0, r4
 8011070:	f006 ff60 	bl	8017f34 <crs_strlen>
 8011074:	4621      	mov	r1, r4
 8011076:	b282      	uxth	r2, r0
 8011078:	2002      	movs	r0, #2
 801107a:	f007 f9d9 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("Other commands:");
 801107e:	4937      	ldr	r1, [pc, #220]	; (801115c <CST_ModemHelpCmd+0x3c4>)
 8011080:	4620      	mov	r0, r4
 8011082:	f00b ff89 	bl	801cf98 <strcpy>
 8011086:	4620      	mov	r0, r4
 8011088:	f006 ff54 	bl	8017f34 <crs_strlen>
 801108c:	4622      	mov	r2, r4
 801108e:	b283      	uxth	r3, r0
 8011090:	2101      	movs	r1, #1
 8011092:	2002      	movs	r0, #2
 8011094:	f006 ff8c 	bl	8017fb0 <traceIF_itmPrint>
 8011098:	4620      	mov	r0, r4
 801109a:	f006 ff4b 	bl	8017f34 <crs_strlen>
 801109e:	4621      	mov	r1, r4
 80110a0:	b282      	uxth	r2, r0
 80110a2:	2002      	movs	r0, #2
 80110a4:	f007 f9c4 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config get (get current config from modem)",
 80110a8:	462a      	mov	r2, r5
 80110aa:	492d      	ldr	r1, [pc, #180]	; (8011160 <CST_ModemHelpCmd+0x3c8>)
 80110ac:	4620      	mov	r0, r4
 80110ae:	f00b ff03 	bl	801ceb8 <sprintf>
 80110b2:	4620      	mov	r0, r4
 80110b4:	f006 ff3e 	bl	8017f34 <crs_strlen>
 80110b8:	4622      	mov	r2, r4
 80110ba:	b283      	uxth	r3, r0
 80110bc:	2101      	movs	r1, #1
 80110be:	2002      	movs	r0, #2
 80110c0:	f006 ff76 	bl	8017fb0 <traceIF_itmPrint>
 80110c4:	4620      	mov	r0, r4
 80110c6:	f006 ff35 	bl	8017f34 <crs_strlen>
 80110ca:	4621      	mov	r1, r4
 80110cc:	b282      	uxth	r2, r0
 80110ce:	2002      	movs	r0, #2
 80110d0:	f007 f9ae 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 80110d4:	4923      	ldr	r1, [pc, #140]	; (8011164 <CST_ModemHelpCmd+0x3cc>)
 80110d6:	4620      	mov	r0, r4
 80110d8:	f00b ff5e 	bl	801cf98 <strcpy>
 80110dc:	4620      	mov	r0, r4
 80110de:	f006 ff29 	bl	8017f34 <crs_strlen>
 80110e2:	4622      	mov	r2, r4
 80110e4:	b283      	uxth	r3, r0
 80110e6:	2101      	movs	r1, #1
 80110e8:	2002      	movs	r0, #2
 80110ea:	f006 ff61 	bl	8017fb0 <traceIF_itmPrint>
 80110ee:	4620      	mov	r0, r4
 80110f0:	f006 ff20 	bl	8017f34 <crs_strlen>
 80110f4:	4621      	mov	r1, r4
 80110f6:	b282      	uxth	r2, r0
 80110f8:	2002      	movs	r0, #2
 80110fa:	f007 f999 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config (display current config to be sent to modem)",
 80110fe:	462a      	mov	r2, r5
 8011100:	4919      	ldr	r1, [pc, #100]	; (8011168 <CST_ModemHelpCmd+0x3d0>)
 8011102:	4620      	mov	r0, r4
 8011104:	f00b fed8 	bl	801ceb8 <sprintf>
 8011108:	4620      	mov	r0, r4
 801110a:	f006 ff13 	bl	8017f34 <crs_strlen>
 801110e:	4622      	mov	r2, r4
 8011110:	b283      	uxth	r3, r0
 8011112:	2101      	movs	r1, #1
 8011114:	2002      	movs	r0, #2
 8011116:	e029      	b.n	801116c <CST_ModemHelpCmd+0x3d4>
 8011118:	0802837f 	.word	0x0802837f
 801111c:	20008ff8 	.word	0x20008ff8
 8011120:	08029a46 	.word	0x08029a46
 8011124:	08028385 	.word	0x08028385
 8011128:	080283d5 	.word	0x080283d5
 801112c:	0802840e 	.word	0x0802840e
 8011130:	0802845d 	.word	0x0802845d
 8011134:	08028492 	.word	0x08028492
 8011138:	080284ca 	.word	0x080284ca
 801113c:	0802852f 	.word	0x0802852f
 8011140:	08028590 	.word	0x08028590
 8011144:	080285d8 	.word	0x080285d8
 8011148:	08028634 	.word	0x08028634
 801114c:	0802867d 	.word	0x0802867d
 8011150:	080286de 	.word	0x080286de
 8011154:	08028714 	.word	0x08028714
 8011158:	0802874a 	.word	0x0802874a
 801115c:	0802875b 	.word	0x0802875b
 8011160:	0802876d 	.word	0x0802876d
 8011164:	0802879d 	.word	0x0802879d
 8011168:	080287e7 	.word	0x080287e7
 801116c:	f006 ff20 	bl	8017fb0 <traceIF_itmPrint>
 8011170:	4620      	mov	r0, r4
 8011172:	f006 fedf 	bl	8017f34 <crs_strlen>
 8011176:	4621      	mov	r1, r4
 8011178:	b282      	uxth	r2, r0
 801117a:	2002      	movs	r0, #2
 801117c:	f007 f958 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\n\r");
 8011180:	4631      	mov	r1, r6
 8011182:	4620      	mov	r0, r4
 8011184:	f00b ff08 	bl	801cf98 <strcpy>
 8011188:	4620      	mov	r0, r4
 801118a:	f006 fed3 	bl	8017f34 <crs_strlen>
 801118e:	4622      	mov	r2, r4
 8011190:	b283      	uxth	r3, r0
 8011192:	2101      	movs	r1, #1
 8011194:	2002      	movs	r0, #2
 8011196:	f006 ff0b 	bl	8017fb0 <traceIF_itmPrint>
 801119a:	4620      	mov	r0, r4
 801119c:	f006 feca 	bl	8017f34 <crs_strlen>
 80111a0:	4621      	mov	r1, r4
 80111a2:	b282      	uxth	r2, r0
 80111a4:	2002      	movs	r0, #2
 80111a6:	f007 f943 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("Notes:");
 80111aa:	499e      	ldr	r1, [pc, #632]	; (8011424 <CST_ModemHelpCmd+0x68c>)
 80111ac:	4620      	mov	r0, r4
 80111ae:	f00b fef3 	bl	801cf98 <strcpy>
 80111b2:	4620      	mov	r0, r4
 80111b4:	f006 febe 	bl	8017f34 <crs_strlen>
 80111b8:	4622      	mov	r2, r4
 80111ba:	b283      	uxth	r3, r0
 80111bc:	2101      	movs	r1, #1
 80111be:	2002      	movs	r0, #2
 80111c0:	f006 fef6 	bl	8017fb0 <traceIF_itmPrint>
 80111c4:	4620      	mov	r0, r4
 80111c6:	f006 feb5 	bl	8017f34 <crs_strlen>
 80111ca:	4621      	mov	r1, r4
 80111cc:	b282      	uxth	r2, r0
 80111ce:	2002      	movs	r0, #2
 80111d0:	f007 f92e 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 80111d4:	4994      	ldr	r1, [pc, #592]	; (8011428 <CST_ModemHelpCmd+0x690>)
 80111d6:	4620      	mov	r0, r4
 80111d8:	f00b fede 	bl	801cf98 <strcpy>
 80111dc:	4620      	mov	r0, r4
 80111de:	f006 fea9 	bl	8017f34 <crs_strlen>
 80111e2:	4622      	mov	r2, r4
 80111e4:	b283      	uxth	r3, r0
 80111e6:	2101      	movs	r1, #1
 80111e8:	2002      	movs	r0, #2
 80111ea:	f006 fee1 	bl	8017fb0 <traceIF_itmPrint>
 80111ee:	4620      	mov	r0, r4
 80111f0:	f006 fea0 	bl	8017f34 <crs_strlen>
 80111f4:	4621      	mov	r1, r4
 80111f6:	b282      	uxth	r2, r0
 80111f8:	2002      	movs	r0, #2
 80111fa:	f007 f919 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("       (option '2' of the boot menu).");
 80111fe:	498b      	ldr	r1, [pc, #556]	; (801142c <CST_ModemHelpCmd+0x694>)
 8011200:	4620      	mov	r0, r4
 8011202:	f00b fec9 	bl	801cf98 <strcpy>
 8011206:	4620      	mov	r0, r4
 8011208:	f006 fe94 	bl	8017f34 <crs_strlen>
 801120c:	4622      	mov	r2, r4
 801120e:	b283      	uxth	r3, r0
 8011210:	2101      	movs	r1, #1
 8011212:	2002      	movs	r0, #2
 8011214:	f006 fecc 	bl	8017fb0 <traceIF_itmPrint>
 8011218:	4620      	mov	r0, r4
 801121a:	f006 fe8b 	bl	8017f34 <crs_strlen>
 801121e:	4621      	mov	r1, r4
 8011220:	b282      	uxth	r2, r0
 8011222:	2002      	movs	r0, #2
 8011224:	f007 f904 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8011228:	4981      	ldr	r1, [pc, #516]	; (8011430 <CST_ModemHelpCmd+0x698>)
 801122a:	4620      	mov	r0, r4
 801122c:	f00b feb4 	bl	801cf98 <strcpy>
 8011230:	4620      	mov	r0, r4
 8011232:	f006 fe7f 	bl	8017f34 <crs_strlen>
 8011236:	4622      	mov	r2, r4
 8011238:	b283      	uxth	r3, r0
 801123a:	2101      	movs	r1, #1
 801123c:	2002      	movs	r0, #2
 801123e:	f006 feb7 	bl	8017fb0 <traceIF_itmPrint>
 8011242:	4620      	mov	r0, r4
 8011244:	f006 fe76 	bl	8017f34 <crs_strlen>
 8011248:	4621      	mov	r1, r4
 801124a:	b282      	uxth	r2, r0
 801124c:	2002      	movs	r0, #2
 801124e:	f007 f8ef 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\n\r");
 8011252:	4631      	mov	r1, r6
 8011254:	4620      	mov	r0, r4
 8011256:	f00b fe9f 	bl	801cf98 <strcpy>
 801125a:	4620      	mov	r0, r4
 801125c:	f006 fe6a 	bl	8017f34 <crs_strlen>
 8011260:	4622      	mov	r2, r4
 8011262:	b283      	uxth	r3, r0
 8011264:	2101      	movs	r1, #1
 8011266:	2002      	movs	r0, #2
 8011268:	f006 fea2 	bl	8017fb0 <traceIF_itmPrint>
 801126c:	4620      	mov	r0, r4
 801126e:	f006 fe61 	bl	8017f34 <crs_strlen>
 8011272:	4621      	mov	r1, r4
 8011274:	b282      	uxth	r2, r0
 8011276:	2002      	movs	r0, #2
 8011278:	f007 f8da 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("Example:");
 801127c:	496d      	ldr	r1, [pc, #436]	; (8011434 <CST_ModemHelpCmd+0x69c>)
 801127e:	4620      	mov	r0, r4
 8011280:	f00b fe8a 	bl	801cf98 <strcpy>
 8011284:	4620      	mov	r0, r4
 8011286:	f006 fe55 	bl	8017f34 <crs_strlen>
 801128a:	4622      	mov	r2, r4
 801128c:	b283      	uxth	r3, r0
 801128e:	2101      	movs	r1, #1
 8011290:	2002      	movs	r0, #2
 8011292:	f006 fe8d 	bl	8017fb0 <traceIF_itmPrint>
 8011296:	4620      	mov	r0, r4
 8011298:	f006 fe4c 	bl	8017f34 <crs_strlen>
 801129c:	4621      	mov	r1, r4
 801129e:	b282      	uxth	r2, r0
 80112a0:	2002      	movs	r0, #2
 80112a2:	f007 f8c5 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 80112a6:	4964      	ldr	r1, [pc, #400]	; (8011438 <CST_ModemHelpCmd+0x6a0>)
 80112a8:	4620      	mov	r0, r4
 80112aa:	f00b fe75 	bl	801cf98 <strcpy>
 80112ae:	4620      	mov	r0, r4
 80112b0:	f006 fe40 	bl	8017f34 <crs_strlen>
 80112b4:	4622      	mov	r2, r4
 80112b6:	b283      	uxth	r3, r0
 80112b8:	2101      	movs	r1, #1
 80112ba:	2002      	movs	r0, #2
 80112bc:	f006 fe78 	bl	8017fb0 <traceIF_itmPrint>
 80112c0:	4620      	mov	r0, r4
 80112c2:	f006 fe37 	bl	8017f34 <crs_strlen>
 80112c6:	4621      	mov	r1, r4
 80112c8:	b282      	uxth	r2, r0
 80112ca:	2002      	movs	r0, #2
 80112cc:	f007 f8b0 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config iotopmode ALL");
 80112d0:	495a      	ldr	r1, [pc, #360]	; (801143c <CST_ModemHelpCmd+0x6a4>)
 80112d2:	4620      	mov	r0, r4
 80112d4:	f00b fe60 	bl	801cf98 <strcpy>
 80112d8:	4620      	mov	r0, r4
 80112da:	f006 fe2b 	bl	8017f34 <crs_strlen>
 80112de:	4622      	mov	r2, r4
 80112e0:	b283      	uxth	r3, r0
 80112e2:	2101      	movs	r1, #1
 80112e4:	2002      	movs	r0, #2
 80112e6:	f006 fe63 	bl	8017fb0 <traceIF_itmPrint>
 80112ea:	4620      	mov	r0, r4
 80112ec:	f006 fe22 	bl	8017f34 <crs_strlen>
 80112f0:	4621      	mov	r1, r4
 80112f2:	b282      	uxth	r2, r0
 80112f4:	2002      	movs	r0, #2
 80112f6:	f007 f89b 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config nwscanmode AUTO");
 80112fa:	4951      	ldr	r1, [pc, #324]	; (8011440 <CST_ModemHelpCmd+0x6a8>)
 80112fc:	4620      	mov	r0, r4
 80112fe:	f00b fe4b 	bl	801cf98 <strcpy>
 8011302:	4620      	mov	r0, r4
 8011304:	f006 fe16 	bl	8017f34 <crs_strlen>
 8011308:	4622      	mov	r2, r4
 801130a:	b283      	uxth	r3, r0
 801130c:	2101      	movs	r1, #1
 801130e:	2002      	movs	r0, #2
 8011310:	f006 fe4e 	bl	8017fb0 <traceIF_itmPrint>
 8011314:	4620      	mov	r0, r4
 8011316:	f006 fe0d 	bl	8017f34 <crs_strlen>
 801131a:	4621      	mov	r1, r4
 801131c:	b282      	uxth	r2, r0
 801131e:	2002      	movs	r0, #2
 8011320:	f007 f886 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config gsmband any");
 8011324:	4947      	ldr	r1, [pc, #284]	; (8011444 <CST_ModemHelpCmd+0x6ac>)
 8011326:	4620      	mov	r0, r4
 8011328:	f00b fe36 	bl	801cf98 <strcpy>
 801132c:	4620      	mov	r0, r4
 801132e:	f006 fe01 	bl	8017f34 <crs_strlen>
 8011332:	4622      	mov	r2, r4
 8011334:	b283      	uxth	r3, r0
 8011336:	2101      	movs	r1, #1
 8011338:	2002      	movs	r0, #2
 801133a:	f006 fe39 	bl	8017fb0 <traceIF_itmPrint>
 801133e:	4620      	mov	r0, r4
 8011340:	f006 fdf8 	bl	8017f34 <crs_strlen>
 8011344:	4621      	mov	r1, r4
 8011346:	b282      	uxth	r2, r0
 8011348:	2002      	movs	r0, #2
 801134a:	f007 f871 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config m1band B13");
 801134e:	493e      	ldr	r1, [pc, #248]	; (8011448 <CST_ModemHelpCmd+0x6b0>)
 8011350:	4620      	mov	r0, r4
 8011352:	f00b fe21 	bl	801cf98 <strcpy>
 8011356:	4620      	mov	r0, r4
 8011358:	f006 fdec 	bl	8017f34 <crs_strlen>
 801135c:	4622      	mov	r2, r4
 801135e:	b283      	uxth	r3, r0
 8011360:	2101      	movs	r1, #1
 8011362:	2002      	movs	r0, #2
 8011364:	f006 fe24 	bl	8017fb0 <traceIF_itmPrint>
 8011368:	4620      	mov	r0, r4
 801136a:	f006 fde3 	bl	8017f34 <crs_strlen>
 801136e:	4621      	mov	r1, r4
 8011370:	b282      	uxth	r2, r0
 8011372:	2002      	movs	r0, #2
 8011374:	f007 f85c 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config nb1band B4");
 8011378:	4934      	ldr	r1, [pc, #208]	; (801144c <CST_ModemHelpCmd+0x6b4>)
 801137a:	4620      	mov	r0, r4
 801137c:	f00b fe0c 	bl	801cf98 <strcpy>
 8011380:	4620      	mov	r0, r4
 8011382:	f006 fdd7 	bl	8017f34 <crs_strlen>
 8011386:	4622      	mov	r2, r4
 8011388:	b283      	uxth	r3, r0
 801138a:	2101      	movs	r1, #1
 801138c:	2002      	movs	r0, #2
 801138e:	f006 fe0f 	bl	8017fb0 <traceIF_itmPrint>
 8011392:	4620      	mov	r0, r4
 8011394:	f006 fdce 	bl	8017f34 <crs_strlen>
 8011398:	4621      	mov	r1, r4
 801139a:	b282      	uxth	r2, r0
 801139c:	2002      	movs	r0, #2
 801139e:	f007 f847 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config scanseq M1_GSM_NB1");
 80113a2:	492b      	ldr	r1, [pc, #172]	; (8011450 <CST_ModemHelpCmd+0x6b8>)
 80113a4:	4620      	mov	r0, r4
 80113a6:	f00b fdf7 	bl	801cf98 <strcpy>
 80113aa:	4620      	mov	r0, r4
 80113ac:	f006 fdc2 	bl	8017f34 <crs_strlen>
 80113b0:	4622      	mov	r2, r4
 80113b2:	b283      	uxth	r3, r0
 80113b4:	2101      	movs	r1, #1
 80113b6:	2002      	movs	r0, #2
 80113b8:	f006 fdfa 	bl	8017fb0 <traceIF_itmPrint>
 80113bc:	4620      	mov	r0, r4
 80113be:	f006 fdb9 	bl	8017f34 <crs_strlen>
 80113c2:	4621      	mov	r1, r4
 80113c4:	b282      	uxth	r2, r0
 80113c6:	2002      	movs	r0, #2
 80113c8:	f007 f832 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("modem config send");
 80113cc:	4921      	ldr	r1, [pc, #132]	; (8011454 <CST_ModemHelpCmd+0x6bc>)
 80113ce:	4620      	mov	r0, r4
 80113d0:	f00b fde2 	bl	801cf98 <strcpy>
 80113d4:	4620      	mov	r0, r4
 80113d6:	f006 fdad 	bl	8017f34 <crs_strlen>
 80113da:	4622      	mov	r2, r4
 80113dc:	b283      	uxth	r3, r0
 80113de:	2101      	movs	r1, #1
 80113e0:	2002      	movs	r0, #2
 80113e2:	f006 fde5 	bl	8017fb0 <traceIF_itmPrint>
 80113e6:	4620      	mov	r0, r4
 80113e8:	f006 fda4 	bl	8017f34 <crs_strlen>
 80113ec:	4621      	mov	r1, r4
 80113ee:	b282      	uxth	r2, r0
 80113f0:	2002      	movs	r0, #2
 80113f2:	f007 f81d 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("reset");
 80113f6:	4918      	ldr	r1, [pc, #96]	; (8011458 <CST_ModemHelpCmd+0x6c0>)
 80113f8:	4620      	mov	r0, r4
 80113fa:	f00b fdcd 	bl	801cf98 <strcpy>
 80113fe:	4620      	mov	r0, r4
 8011400:	f006 fd98 	bl	8017f34 <crs_strlen>
 8011404:	4622      	mov	r2, r4
 8011406:	b283      	uxth	r3, r0
 8011408:	2101      	movs	r1, #1
 801140a:	2002      	movs	r0, #2
 801140c:	f006 fdd0 	bl	8017fb0 <traceIF_itmPrint>
 8011410:	4620      	mov	r0, r4
 8011412:	f006 fd8f 	bl	8017f34 <crs_strlen>
 8011416:	4621      	mov	r1, r4
 8011418:	b282      	uxth	r2, r0
}
 801141a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PRINT_FORCE("reset");
 801141e:	2002      	movs	r0, #2
 8011420:	f007 b806 	b.w	8018430 <traceIF_uartPrintForce>
 8011424:	08028820 	.word	0x08028820
 8011428:	08028829 	.word	0x08028829
 801142c:	0802887d 	.word	0x0802887d
 8011430:	080288a5 	.word	0x080288a5
 8011434:	080288f5 	.word	0x080288f5
 8011438:	08028900 	.word	0x08028900
 801143c:	08028951 	.word	0x08028951
 8011440:	0802896e 	.word	0x0802896e
 8011444:	0802898d 	.word	0x0802898d
 8011448:	080289a8 	.word	0x080289a8
 801144c:	080289c2 	.word	0x080289c2
 8011450:	080289dc 	.word	0x080289dc
 8011454:	080289fe 	.word	0x080289fe
 8011458:	0802215a 	.word	0x0802215a

0801145c <cst_at_cmd_help>:
/**
 * @brief  displays help of atcmd commands
 * @param  -
 * @retval -
 */
static void cst_at_cmd_help(void) {
 801145c:	b538      	push	{r3, r4, r5, lr}
	CMD_print_help(CST_cmd_at_label);
 801145e:	4d1a      	ldr	r5, [pc, #104]	; (80114c8 <cst_at_cmd_help+0x6c>)

	PRINT_FORCE("%s timeout [<modem response timeout(ms) (default %d)>]",
 8011460:	4c1a      	ldr	r4, [pc, #104]	; (80114cc <cst_at_cmd_help+0x70>)
	CMD_print_help(CST_cmd_at_label);
 8011462:	4628      	mov	r0, r5
 8011464:	f00a fbf8 	bl	801bc58 <CMD_print_help>
	PRINT_FORCE("%s timeout [<modem response timeout(ms) (default %d)>]",
 8011468:	462a      	mov	r2, r5
 801146a:	4919      	ldr	r1, [pc, #100]	; (80114d0 <cst_at_cmd_help+0x74>)
 801146c:	f241 3388 	movw	r3, #5000	; 0x1388
 8011470:	4620      	mov	r0, r4
 8011472:	f00b fd21 	bl	801ceb8 <sprintf>
 8011476:	4620      	mov	r0, r4
 8011478:	f006 fd5c 	bl	8017f34 <crs_strlen>
 801147c:	4622      	mov	r2, r4
 801147e:	b283      	uxth	r3, r0
 8011480:	2101      	movs	r1, #1
 8011482:	2002      	movs	r0, #2
 8011484:	f006 fd94 	bl	8017fb0 <traceIF_itmPrint>
 8011488:	4620      	mov	r0, r4
 801148a:	f006 fd53 	bl	8017f34 <crs_strlen>
 801148e:	4621      	mov	r1, r4
 8011490:	b282      	uxth	r2, r0
 8011492:	2002      	movs	r0, #2
 8011494:	f006 ffcc 	bl	8018430 <traceIF_uartPrintForce>
			CST_cmd_at_label, CST_AT_TIMEOUT)
	PRINT_FORCE("%s <at command> (send an AT command to modem ex:atcmd AT+CSQ)",
 8011498:	462a      	mov	r2, r5
 801149a:	490e      	ldr	r1, [pc, #56]	; (80114d4 <cst_at_cmd_help+0x78>)
 801149c:	4620      	mov	r0, r4
 801149e:	f00b fd0b 	bl	801ceb8 <sprintf>
 80114a2:	4620      	mov	r0, r4
 80114a4:	f006 fd46 	bl	8017f34 <crs_strlen>
 80114a8:	4622      	mov	r2, r4
 80114aa:	b283      	uxth	r3, r0
 80114ac:	2101      	movs	r1, #1
 80114ae:	2002      	movs	r0, #2
 80114b0:	f006 fd7e 	bl	8017fb0 <traceIF_itmPrint>
 80114b4:	4620      	mov	r0, r4
 80114b6:	f006 fd3d 	bl	8017f34 <crs_strlen>
 80114ba:	4621      	mov	r1, r4
 80114bc:	b282      	uxth	r2, r0
			CST_cmd_at_label)
}
 80114be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PRINT_FORCE("%s <at command> (send an AT command to modem ex:atcmd AT+CSQ)",
 80114c2:	2002      	movs	r0, #2
 80114c4:	f006 bfb4 	b.w	8018430 <traceIF_uartPrintForce>
 80114c8:	08028a12 	.word	0x08028a12
 80114cc:	20008ff8 	.word	0x20008ff8
 80114d0:	08028a18 	.word	0x08028a18
 80114d4:	08028a51 	.word	0x08028a51

080114d8 <CST_HelpCmd>:
static void CST_HelpCmd(void) {
 80114d8:	b538      	push	{r3, r4, r5, lr}
	CMD_print_help(CST_cmd_label);
 80114da:	4db3      	ldr	r5, [pc, #716]	; (80117a8 <CST_HelpCmd+0x2d0>)
	PRINT_FORCE("%s help", (CRC_CHAR_t* )CST_cmd_label)
 80114dc:	4cb3      	ldr	r4, [pc, #716]	; (80117ac <CST_HelpCmd+0x2d4>)
	CMD_print_help(CST_cmd_label);
 80114de:	4628      	mov	r0, r5
 80114e0:	f00a fbba 	bl	801bc58 <CMD_print_help>
	PRINT_FORCE("%s help", (CRC_CHAR_t* )CST_cmd_label)
 80114e4:	462a      	mov	r2, r5
 80114e6:	49b2      	ldr	r1, [pc, #712]	; (80117b0 <CST_HelpCmd+0x2d8>)
 80114e8:	4620      	mov	r0, r4
 80114ea:	f00b fce5 	bl	801ceb8 <sprintf>
 80114ee:	4620      	mov	r0, r4
 80114f0:	f006 fd20 	bl	8017f34 <crs_strlen>
 80114f4:	4622      	mov	r2, r4
 80114f6:	b283      	uxth	r3, r0
 80114f8:	2101      	movs	r1, #1
 80114fa:	2002      	movs	r0, #2
 80114fc:	f006 fd58 	bl	8017fb0 <traceIF_itmPrint>
 8011500:	4620      	mov	r0, r4
 8011502:	f006 fd17 	bl	8017f34 <crs_strlen>
 8011506:	4621      	mov	r1, r4
 8011508:	b282      	uxth	r2, r0
 801150a:	2002      	movs	r0, #2
 801150c:	f006 ff90 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s state   (Displays the cellular and SIM state)",
 8011510:	462a      	mov	r2, r5
 8011512:	49a8      	ldr	r1, [pc, #672]	; (80117b4 <CST_HelpCmd+0x2dc>)
 8011514:	4620      	mov	r0, r4
 8011516:	f00b fccf 	bl	801ceb8 <sprintf>
 801151a:	4620      	mov	r0, r4
 801151c:	f006 fd0a 	bl	8017f34 <crs_strlen>
 8011520:	4622      	mov	r2, r4
 8011522:	b283      	uxth	r3, r0
 8011524:	2101      	movs	r1, #1
 8011526:	2002      	movs	r0, #2
 8011528:	f006 fd42 	bl	8017fb0 <traceIF_itmPrint>
 801152c:	4620      	mov	r0, r4
 801152e:	f006 fd01 	bl	8017f34 <crs_strlen>
 8011532:	4621      	mov	r1, r4
 8011534:	b282      	uxth	r2, r0
 8011536:	2002      	movs	r0, #2
 8011538:	f006 ff7a 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s config  (Displays the cellular configuration used)",
 801153c:	462a      	mov	r2, r5
 801153e:	499e      	ldr	r1, [pc, #632]	; (80117b8 <CST_HelpCmd+0x2e0>)
 8011540:	4620      	mov	r0, r4
 8011542:	f00b fcb9 	bl	801ceb8 <sprintf>
 8011546:	4620      	mov	r0, r4
 8011548:	f006 fcf4 	bl	8017f34 <crs_strlen>
 801154c:	4622      	mov	r2, r4
 801154e:	b283      	uxth	r3, r0
 8011550:	2101      	movs	r1, #1
 8011552:	2002      	movs	r0, #2
 8011554:	f006 fd2c 	bl	8017fb0 <traceIF_itmPrint>
 8011558:	4620      	mov	r0, r4
 801155a:	f006 fceb 	bl	8017f34 <crs_strlen>
 801155e:	4621      	mov	r1, r4
 8011560:	b282      	uxth	r2, r0
 8011562:	2002      	movs	r0, #2
 8011564:	f006 ff64 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s info    (Displays modem information)", CST_cmd_label)
 8011568:	462a      	mov	r2, r5
 801156a:	4994      	ldr	r1, [pc, #592]	; (80117bc <CST_HelpCmd+0x2e4>)
 801156c:	4620      	mov	r0, r4
 801156e:	f00b fca3 	bl	801ceb8 <sprintf>
 8011572:	4620      	mov	r0, r4
 8011574:	f006 fcde 	bl	8017f34 <crs_strlen>
 8011578:	4622      	mov	r2, r4
 801157a:	b283      	uxth	r3, r0
 801157c:	2101      	movs	r1, #1
 801157e:	2002      	movs	r0, #2
 8011580:	f006 fd16 	bl	8017fb0 <traceIF_itmPrint>
 8011584:	4620      	mov	r0, r4
 8011586:	f006 fcd5 	bl	8017f34 <crs_strlen>
 801158a:	4621      	mov	r1, r4
 801158c:	b282      	uxth	r2, r0
 801158e:	2002      	movs	r0, #2
 8011590:	f006 ff4e 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s targetstate [off|sim|full|modem] (set modem state)",
 8011594:	462a      	mov	r2, r5
 8011596:	498a      	ldr	r1, [pc, #552]	; (80117c0 <CST_HelpCmd+0x2e8>)
 8011598:	4620      	mov	r0, r4
 801159a:	f00b fc8d 	bl	801ceb8 <sprintf>
 801159e:	4620      	mov	r0, r4
 80115a0:	f006 fcc8 	bl	8017f34 <crs_strlen>
 80115a4:	4622      	mov	r2, r4
 80115a6:	b283      	uxth	r3, r0
 80115a8:	2101      	movs	r1, #1
 80115aa:	2002      	movs	r0, #2
 80115ac:	f006 fd00 	bl	8017fb0 <traceIF_itmPrint>
 80115b0:	4620      	mov	r0, r4
 80115b2:	f006 fcbf 	bl	8017f34 <crs_strlen>
 80115b6:	4621      	mov	r1, r4
 80115b8:	b282      	uxth	r2, r0
 80115ba:	2002      	movs	r0, #2
 80115bc:	f006 ff38 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 80115c0:	462a      	mov	r2, r5
 80115c2:	4980      	ldr	r1, [pc, #512]	; (80117c4 <CST_HelpCmd+0x2ec>)
 80115c4:	4620      	mov	r0, r4
 80115c6:	f00b fc77 	bl	801ceb8 <sprintf>
 80115ca:	4620      	mov	r0, r4
 80115cc:	f006 fcb2 	bl	8017f34 <crs_strlen>
 80115d0:	4622      	mov	r2, r4
 80115d2:	b283      	uxth	r3, r0
 80115d4:	2101      	movs	r1, #1
 80115d6:	2002      	movs	r0, #2
 80115d8:	f006 fcea 	bl	8017fb0 <traceIF_itmPrint>
 80115dc:	4620      	mov	r0, r4
 80115de:	f006 fca9 	bl	8017f34 <crs_strlen>
 80115e2:	4621      	mov	r1, r4
 80115e4:	b282      	uxth	r2, r0
 80115e6:	2002      	movs	r0, #2
 80115e8:	f006 ff22 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s cmd  (switch to command mode)", CST_cmd_label)
 80115ec:	462a      	mov	r2, r5
 80115ee:	4976      	ldr	r1, [pc, #472]	; (80117c8 <CST_HelpCmd+0x2f0>)
 80115f0:	4620      	mov	r0, r4
 80115f2:	f00b fc61 	bl	801ceb8 <sprintf>
 80115f6:	4620      	mov	r0, r4
 80115f8:	f006 fc9c 	bl	8017f34 <crs_strlen>
 80115fc:	4622      	mov	r2, r4
 80115fe:	b283      	uxth	r3, r0
 8011600:	2101      	movs	r1, #1
 8011602:	2002      	movs	r0, #2
 8011604:	f006 fcd4 	bl	8017fb0 <traceIF_itmPrint>
 8011608:	4620      	mov	r0, r4
 801160a:	f006 fc93 	bl	8017f34 <crs_strlen>
 801160e:	4621      	mov	r1, r4
 8011610:	b282      	uxth	r2, r0
 8011612:	2002      	movs	r0, #2
 8011614:	f006 ff0c 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s data  (switch to data mode)", CST_cmd_label)
 8011618:	462a      	mov	r2, r5
 801161a:	496c      	ldr	r1, [pc, #432]	; (80117cc <CST_HelpCmd+0x2f4>)
 801161c:	4620      	mov	r0, r4
 801161e:	f00b fc4b 	bl	801ceb8 <sprintf>
 8011622:	4620      	mov	r0, r4
 8011624:	f006 fc86 	bl	8017f34 <crs_strlen>
 8011628:	4622      	mov	r2, r4
 801162a:	b283      	uxth	r3, r0
 801162c:	2101      	movs	r1, #1
 801162e:	2002      	movs	r0, #2
 8011630:	f006 fcbe 	bl	8017fb0 <traceIF_itmPrint>
 8011634:	4620      	mov	r0, r4
 8011636:	f006 fc7d 	bl	8017f34 <crs_strlen>
 801163a:	4621      	mov	r1, r4
 801163c:	b282      	uxth	r2, r0
 801163e:	2002      	movs	r0, #2
 8011640:	f006 fef6 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s apn [on|off] (use APN ON or OFF for active sim slot)",
 8011644:	462a      	mov	r2, r5
 8011646:	4962      	ldr	r1, [pc, #392]	; (80117d0 <CST_HelpCmd+0x2f8>)
 8011648:	4620      	mov	r0, r4
 801164a:	f00b fc35 	bl	801ceb8 <sprintf>
 801164e:	4620      	mov	r0, r4
 8011650:	f006 fc70 	bl	8017f34 <crs_strlen>
 8011654:	4622      	mov	r2, r4
 8011656:	b283      	uxth	r3, r0
 8011658:	2101      	movs	r1, #1
 801165a:	2002      	movs	r0, #2
 801165c:	f006 fca8 	bl	8017fb0 <traceIF_itmPrint>
 8011660:	4620      	mov	r0, r4
 8011662:	f006 fc67 	bl	8017f34 <crs_strlen>
 8011666:	4621      	mov	r1, r4
 8011668:	b282      	uxth	r2, r0
 801166a:	2002      	movs	r0, #2
 801166c:	f006 fee0 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8011670:	462a      	mov	r2, r5
 8011672:	4958      	ldr	r1, [pc, #352]	; (80117d4 <CST_HelpCmd+0x2fc>)
 8011674:	4620      	mov	r0, r4
 8011676:	f00b fc1f 	bl	801ceb8 <sprintf>
 801167a:	4620      	mov	r0, r4
 801167c:	f006 fc5a 	bl	8017f34 <crs_strlen>
 8011680:	4622      	mov	r2, r4
 8011682:	b283      	uxth	r3, r0
 8011684:	2101      	movs	r1, #1
 8011686:	2002      	movs	r0, #2
 8011688:	f006 fc92 	bl	8017fb0 <traceIF_itmPrint>
 801168c:	4620      	mov	r0, r4
 801168e:	f006 fc51 	bl	8017f34 <crs_strlen>
 8011692:	4621      	mov	r1, r4
 8011694:	b282      	uxth	r2, r0
 8011696:	2002      	movs	r0, #2
 8011698:	f006 feca 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s apnuser [on|off] (set apn user define for active sim slot)",
 801169c:	462a      	mov	r2, r5
 801169e:	494e      	ldr	r1, [pc, #312]	; (80117d8 <CST_HelpCmd+0x300>)
 80116a0:	4620      	mov	r0, r4
 80116a2:	f00b fc09 	bl	801ceb8 <sprintf>
 80116a6:	4620      	mov	r0, r4
 80116a8:	f006 fc44 	bl	8017f34 <crs_strlen>
 80116ac:	4622      	mov	r2, r4
 80116ae:	b283      	uxth	r3, r0
 80116b0:	2101      	movs	r1, #1
 80116b2:	2002      	movs	r0, #2
 80116b4:	f006 fc7c 	bl	8017fb0 <traceIF_itmPrint>
 80116b8:	4620      	mov	r0, r4
 80116ba:	f006 fc3b 	bl	8017f34 <crs_strlen>
 80116be:	4621      	mov	r1, r4
 80116c0:	b282      	uxth	r2, r0
 80116c2:	2002      	movs	r0, #2
 80116c4:	f006 feb4 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s apnempty (Set APN to an empty string)", CST_cmd_label)
 80116c8:	462a      	mov	r2, r5
 80116ca:	4944      	ldr	r1, [pc, #272]	; (80117dc <CST_HelpCmd+0x304>)
 80116cc:	4620      	mov	r0, r4
 80116ce:	f00b fbf3 	bl	801ceb8 <sprintf>
 80116d2:	4620      	mov	r0, r4
 80116d4:	f006 fc2e 	bl	8017f34 <crs_strlen>
 80116d8:	4622      	mov	r2, r4
 80116da:	b283      	uxth	r3, r0
 80116dc:	2101      	movs	r1, #1
 80116de:	2002      	movs	r0, #2
 80116e0:	f006 fc66 	bl	8017fb0 <traceIF_itmPrint>
 80116e4:	4620      	mov	r0, r4
 80116e6:	f006 fc25 	bl	8017f34 <crs_strlen>
 80116ea:	4621      	mov	r1, r4
 80116ec:	b282      	uxth	r2, r0
 80116ee:	2002      	movs	r0, #2
 80116f0:	f006 fe9e 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s power [on|off]  (modem switch ON or OFF)", CST_cmd_label)
 80116f4:	462a      	mov	r2, r5
 80116f6:	493a      	ldr	r1, [pc, #232]	; (80117e0 <CST_HelpCmd+0x308>)
 80116f8:	4620      	mov	r0, r4
 80116fa:	f00b fbdd 	bl	801ceb8 <sprintf>
 80116fe:	4620      	mov	r0, r4
 8011700:	f006 fc18 	bl	8017f34 <crs_strlen>
 8011704:	4622      	mov	r2, r4
 8011706:	b283      	uxth	r3, r0
 8011708:	2101      	movs	r1, #1
 801170a:	2002      	movs	r0, #2
 801170c:	f006 fc50 	bl	8017fb0 <traceIF_itmPrint>
 8011710:	4620      	mov	r0, r4
 8011712:	f006 fc0f 	bl	8017f34 <crs_strlen>
 8011716:	4621      	mov	r1, r4
 8011718:	b282      	uxth	r2, r0
 801171a:	2002      	movs	r0, #2
 801171c:	f006 fe88 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s operator  (operator selection)", CST_cmd_label)
 8011720:	462a      	mov	r2, r5
 8011722:	4930      	ldr	r1, [pc, #192]	; (80117e4 <CST_HelpCmd+0x30c>)
 8011724:	4620      	mov	r0, r4
 8011726:	f00b fbc7 	bl	801ceb8 <sprintf>
 801172a:	4620      	mov	r0, r4
 801172c:	f006 fc02 	bl	8017f34 <crs_strlen>
 8011730:	4622      	mov	r2, r4
 8011732:	b283      	uxth	r3, r0
 8011734:	2101      	movs	r1, #1
 8011736:	2002      	movs	r0, #2
 8011738:	f006 fc3a 	bl	8017fb0 <traceIF_itmPrint>
 801173c:	4620      	mov	r0, r4
 801173e:	f006 fbf9 	bl	8017f34 <crs_strlen>
 8011742:	4621      	mov	r1, r4
 8011744:	b282      	uxth	r2, r0
 8011746:	2002      	movs	r0, #2
 8011748:	f006 fe72 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("%s techno off", CST_cmd_label)
 801174c:	462a      	mov	r2, r5
 801174e:	4926      	ldr	r1, [pc, #152]	; (80117e8 <CST_HelpCmd+0x310>)
 8011750:	4620      	mov	r0, r4
 8011752:	f00b fbb1 	bl	801ceb8 <sprintf>
 8011756:	4620      	mov	r0, r4
 8011758:	f006 fbec 	bl	8017f34 <crs_strlen>
 801175c:	4622      	mov	r2, r4
 801175e:	b283      	uxth	r3, r0
 8011760:	2101      	movs	r1, #1
 8011762:	2002      	movs	r0, #2
 8011764:	f006 fc24 	bl	8017fb0 <traceIF_itmPrint>
 8011768:	4620      	mov	r0, r4
 801176a:	f006 fbe3 	bl	8017f34 <crs_strlen>
 801176e:	4621      	mov	r1, r4
 8011770:	b282      	uxth	r2, r0
 8011772:	2002      	movs	r0, #2
 8011774:	f006 fe5c 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 8011778:	462a      	mov	r2, r5
 801177a:	491c      	ldr	r1, [pc, #112]	; (80117ec <CST_HelpCmd+0x314>)
 801177c:	4620      	mov	r0, r4
 801177e:	f00b fb9b 	bl	801ceb8 <sprintf>
 8011782:	4620      	mov	r0, r4
 8011784:	f006 fbd6 	bl	8017f34 <crs_strlen>
 8011788:	4622      	mov	r2, r4
 801178a:	b283      	uxth	r3, r0
 801178c:	2101      	movs	r1, #1
 801178e:	2002      	movs	r0, #2
 8011790:	f006 fc0e 	bl	8017fb0 <traceIF_itmPrint>
 8011794:	4620      	mov	r0, r4
 8011796:	f006 fbcd 	bl	8017f34 <crs_strlen>
 801179a:	4621      	mov	r1, r4
 801179c:	b282      	uxth	r2, r0
}
 801179e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	PRINT_FORCE(
 80117a2:	2002      	movs	r0, #2
 80117a4:	f006 be44 	b.w	8018430 <traceIF_uartPrintForce>
 80117a8:	08028a91 	.word	0x08028a91
 80117ac:	20008ff8 	.word	0x20008ff8
 80117b0:	08028a95 	.word	0x08028a95
 80117b4:	08028a9f 	.word	0x08028a9f
 80117b8:	08028ad2 	.word	0x08028ad2
 80117bc:	08028b0a 	.word	0x08028b0a
 80117c0:	08028b34 	.word	0x08028b34
 80117c4:	08028b6c 	.word	0x08028b6c
 80117c8:	08028bad 	.word	0x08028bad
 80117cc:	08028bd0 	.word	0x08028bd0
 80117d0:	08028bf1 	.word	0x08028bf1
 80117d4:	08028c2b 	.word	0x08028c2b
 80117d8:	08028c8f 	.word	0x08028c8f
 80117dc:	08028ccf 	.word	0x08028ccf
 80117e0:	08028cfa 	.word	0x08028cfa
 80117e4:	08028d28 	.word	0x08028d28
 80117e8:	08028d4c 	.word	0x08028d4c
 80117ec:	08028d5c 	.word	0x08028d5c

080117f0 <CST_setTextToStr>:
static void CST_setTextToStr(const uint8_t *text, uint8_t *const str) {
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	460d      	mov	r5, r1
 80117f4:	4606      	mov	r6, r0
	size = (uint8_t) crs_strlen(text);
 80117f6:	f006 fb9d 	bl	8017f34 <crs_strlen>
 80117fa:	b2c4      	uxtb	r4, r0
	(void) memcpy(str, text, size);
 80117fc:	2c2c      	cmp	r4, #44	; 0x2c
 80117fe:	bf28      	it	cs
 8011800:	242c      	movcs	r4, #44	; 0x2c
 8011802:	4622      	mov	r2, r4
 8011804:	4631      	mov	r1, r6
 8011806:	4628      	mov	r0, r5
 8011808:	f00b fb18 	bl	801ce3c <memcpy>
	str[size] = 0U;
 801180c:	2300      	movs	r3, #0
 801180e:	552b      	strb	r3, [r5, r4]
}
 8011810:	bd70      	pop	{r4, r5, r6, pc}
	...

08011814 <CST_cmd>:
static cmd_status_t CST_cmd(uint8_t *cmd_line_p) {
 8011814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	PRINT_FORCE("\n\r")
 8011818:	49b6      	ldr	r1, [pc, #728]	; (8011af4 <CST_cmd+0x2e0>)
static cmd_status_t CST_cmd(uint8_t *cmd_line_p) {
 801181a:	b0d2      	sub	sp, #328	; 0x148
 801181c:	4604      	mov	r4, r0
	PRINT_FORCE("\n\r")
 801181e:	48b6      	ldr	r0, [pc, #728]	; (8011af8 <CST_cmd+0x2e4>)
 8011820:	f00b fbba 	bl	801cf98 <strcpy>
 8011824:	48b4      	ldr	r0, [pc, #720]	; (8011af8 <CST_cmd+0x2e4>)
 8011826:	f006 fb85 	bl	8017f34 <crs_strlen>
 801182a:	4ab3      	ldr	r2, [pc, #716]	; (8011af8 <CST_cmd+0x2e4>)
 801182c:	b283      	uxth	r3, r0
 801182e:	2101      	movs	r1, #1
 8011830:	2002      	movs	r0, #2
 8011832:	f006 fbbd 	bl	8017fb0 <traceIF_itmPrint>
 8011836:	48b0      	ldr	r0, [pc, #704]	; (8011af8 <CST_cmd+0x2e4>)
 8011838:	f006 fb7c 	bl	8017f34 <crs_strlen>
 801183c:	49ae      	ldr	r1, [pc, #696]	; (8011af8 <CST_cmd+0x2e4>)
 801183e:	b282      	uxth	r2, r0
 8011840:	2002      	movs	r0, #2
 8011842:	f006 fdf5 	bl	8018430 <traceIF_uartPrintForce>
	cmd_p = (uint8_t*) strtok((CRC_CHAR_t*) cmd_line_p, " \t");
 8011846:	49ad      	ldr	r1, [pc, #692]	; (8011afc <CST_cmd+0x2e8>)
 8011848:	4620      	mov	r0, r4
 801184a:	f00b fbe9 	bl	801d020 <strtok>
	if (cmd_p != NULL) {
 801184e:	4607      	mov	r7, r0
 8011850:	b908      	cbnz	r0, 8011856 <CST_cmd+0x42>
	cmd_status = CMD_OK;
 8011852:	2400      	movs	r4, #0
 8011854:	e2f3      	b.n	8011e3e <CST_cmd+0x62a>
				crs_strlen(cmd_p)) == 0) {
 8011856:	f006 fb6d 	bl	8017f34 <crs_strlen>
		if (memcmp((CRC_CHAR_t*) cmd_p, (CRC_CHAR_t*) CST_cmd_label,
 801185a:	49a9      	ldr	r1, [pc, #676]	; (8011b00 <CST_cmd+0x2ec>)
				crs_strlen(cmd_p)) == 0) {
 801185c:	4602      	mov	r2, r0
		if (memcmp((CRC_CHAR_t*) cmd_p, (CRC_CHAR_t*) CST_cmd_label,
 801185e:	4638      	mov	r0, r7
 8011860:	f00b fade 	bl	801ce20 <memcmp>
 8011864:	4604      	mov	r4, r0
 8011866:	2800      	cmp	r0, #0
 8011868:	f041 8152 	bne.w	8012b10 <CST_cmd+0x12fc>
 801186c:	ad12      	add	r5, sp, #72	; 0x48
				argv_p[argc] = (uint8_t*) strtok(NULL, " \t");
 801186e:	4ea3      	ldr	r6, [pc, #652]	; (8011afc <CST_cmd+0x2e8>)
 8011870:	46a9      	mov	r9, r5
 8011872:	4631      	mov	r1, r6
 8011874:	2000      	movs	r0, #0
 8011876:	f00b fbd3 	bl	801d020 <strtok>
 801187a:	f845 0b04 	str.w	r0, [r5], #4
				if (argv_p[argc] == NULL) {
 801187e:	2800      	cmp	r0, #0
 8011880:	d03d      	beq.n	80118fe <CST_cmd+0xea>
			for (argc = 0U; argc < CST_CMS_PARAM_MAX; argc++) {
 8011882:	3401      	adds	r4, #1
 8011884:	2c0d      	cmp	r4, #13
 8011886:	d1f4      	bne.n	8011872 <CST_cmd+0x5e>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "help",
 8011888:	f8d9 5000 	ldr.w	r5, [r9]
					crs_strlen(argv_p[0])) == 0) {
 801188c:	4628      	mov	r0, r5
 801188e:	f006 fb51 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "help",
 8011892:	499c      	ldr	r1, [pc, #624]	; (8011b04 <CST_cmd+0x2f0>)
					crs_strlen(argv_p[0])) == 0) {
 8011894:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "help",
 8011896:	4628      	mov	r0, r5
 8011898:	f00b fac2 	bl	801ce20 <memcmp>
 801189c:	2800      	cmp	r0, #0
 801189e:	d030      	beq.n	8011902 <CST_cmd+0xee>
					crs_strlen(argv_p[0])) == 0) {
 80118a0:	4628      	mov	r0, r5
 80118a2:	f006 fb47 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "polling",
 80118a6:	4998      	ldr	r1, [pc, #608]	; (8011b08 <CST_cmd+0x2f4>)
					crs_strlen(argv_p[0])) == 0) {
 80118a8:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "polling",
 80118aa:	4628      	mov	r0, r5
 80118ac:	f00b fab8 	bl	801ce20 <memcmp>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d132      	bne.n	801191a <CST_cmd+0x106>
				if (argc == 2U) {
 80118b4:	2c02      	cmp	r4, #2
 80118b6:	4c95      	ldr	r4, [pc, #596]	; (8011b0c <CST_cmd+0x2f8>)
 80118b8:	d12b      	bne.n	8011912 <CST_cmd+0xfe>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80118ba:	f8d9 5004 	ldr.w	r5, [r9, #4]
							crs_strlen(argv_p[1])) == 0) {
 80118be:	4628      	mov	r0, r5
 80118c0:	f006 fb38 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80118c4:	4992      	ldr	r1, [pc, #584]	; (8011b10 <CST_cmd+0x2fc>)
							crs_strlen(argv_p[1])) == 0) {
 80118c6:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80118c8:	4628      	mov	r0, r5
 80118ca:	f00b faa9 	bl	801ce20 <memcmp>
 80118ce:	b9d8      	cbnz	r0, 8011908 <CST_cmd+0xf4>
						CST_polling_active = false;
 80118d0:	7020      	strb	r0, [r4, #0]
					PRINT_FORCE("%s polling disable", CST_cmd_label)
 80118d2:	4a8b      	ldr	r2, [pc, #556]	; (8011b00 <CST_cmd+0x2ec>)
 80118d4:	498f      	ldr	r1, [pc, #572]	; (8011b14 <CST_cmd+0x300>)
					PRINT_FORCE("%s apn set to off", CST_cmd_label)
 80118d6:	4888      	ldr	r0, [pc, #544]	; (8011af8 <CST_cmd+0x2e4>)
 80118d8:	f00b faee 	bl	801ceb8 <sprintf>
					PRINT_FORCE("Network register mode: %d (%s)",
 80118dc:	4886      	ldr	r0, [pc, #536]	; (8011af8 <CST_cmd+0x2e4>)
 80118de:	f006 fb29 	bl	8017f34 <crs_strlen>
 80118e2:	4a85      	ldr	r2, [pc, #532]	; (8011af8 <CST_cmd+0x2e4>)
 80118e4:	b283      	uxth	r3, r0
 80118e6:	2101      	movs	r1, #1
 80118e8:	2002      	movs	r0, #2
 80118ea:	f006 fb61 	bl	8017fb0 <traceIF_itmPrint>
 80118ee:	4882      	ldr	r0, [pc, #520]	; (8011af8 <CST_cmd+0x2e4>)
 80118f0:	f006 fb20 	bl	8017f34 <crs_strlen>
 80118f4:	4980      	ldr	r1, [pc, #512]	; (8011af8 <CST_cmd+0x2e4>)
 80118f6:	b282      	uxth	r2, r0
 80118f8:	2002      	movs	r0, #2
 80118fa:	f000 bcb3 	b.w	8012264 <CST_cmd+0xa50>
			if (argc == 0U) {
 80118fe:	2c00      	cmp	r4, #0
 8011900:	d1c2      	bne.n	8011888 <CST_cmd+0x74>
				CST_HelpCmd();
 8011902:	f7ff fde9 	bl	80114d8 <CST_HelpCmd>
 8011906:	e7a4      	b.n	8011852 <CST_cmd+0x3e>
						CST_polling_active = true;
 8011908:	2301      	movs	r3, #1
 801190a:	7023      	strb	r3, [r4, #0]
					PRINT_FORCE("%s polling enable", CST_cmd_label)
 801190c:	4a7c      	ldr	r2, [pc, #496]	; (8011b00 <CST_cmd+0x2ec>)
 801190e:	4982      	ldr	r1, [pc, #520]	; (8011b18 <CST_cmd+0x304>)
 8011910:	e7e1      	b.n	80118d6 <CST_cmd+0xc2>
				if (CST_polling_active == 0U) {
 8011912:	7823      	ldrb	r3, [r4, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1f9      	bne.n	801190c <CST_cmd+0xf8>
 8011918:	e7db      	b.n	80118d2 <CST_cmd+0xbe>
					crs_strlen(argv_p[0])) == 0) {
 801191a:	4628      	mov	r0, r5
 801191c:	f006 fb0a 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "targetstate",
 8011920:	497e      	ldr	r1, [pc, #504]	; (8011b1c <CST_cmd+0x308>)
					crs_strlen(argv_p[0])) == 0) {
 8011922:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "targetstate",
 8011924:	4628      	mov	r0, r5
 8011926:	f00b fa7b 	bl	801ce20 <memcmp>
 801192a:	2800      	cmp	r0, #0
 801192c:	d14d      	bne.n	80119ca <CST_cmd+0x1b6>
				if (argc == 2U) {
 801192e:	2c02      	cmp	r4, #2
 8011930:	d18f      	bne.n	8011852 <CST_cmd+0x3e>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8011932:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8011936:	4c7a      	ldr	r4, [pc, #488]	; (8011b20 <CST_cmd+0x30c>)
							crs_strlen(argv_p[1])) == 0) {
 8011938:	4628      	mov	r0, r5
 801193a:	f006 fafb 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 801193e:	4974      	ldr	r1, [pc, #464]	; (8011b10 <CST_cmd+0x2fc>)
							crs_strlen(argv_p[1])) == 0) {
 8011940:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8011942:	4628      	mov	r0, r5
 8011944:	f00b fa6c 	bl	801ce20 <memcmp>
 8011948:	b970      	cbnz	r0, 8011968 <CST_cmd+0x154>
						(void) cellular_modem_stop();
 801194a:	f007 fc55 	bl	80191f8 <cellular_modem_stop>
						(void) dc_com_read(&dc_com_db,
 801194e:	4975      	ldr	r1, [pc, #468]	; (8011b24 <CST_cmd+0x310>)
 8011950:	4875      	ldr	r0, [pc, #468]	; (8011b28 <CST_cmd+0x314>)
 8011952:	8809      	ldrh	r1, [r1, #0]
 8011954:	230c      	movs	r3, #12
 8011956:	4622      	mov	r2, r4
 8011958:	f005 fc8c 	bl	8017274 <dc_com_read>
					PRINT_FORCE("New modem target state   : %s",
 801195c:	7aa2      	ldrb	r2, [r4, #10]
 801195e:	4b73      	ldr	r3, [pc, #460]	; (8011b2c <CST_cmd+0x318>)
 8011960:	4973      	ldr	r1, [pc, #460]	; (8011b30 <CST_cmd+0x31c>)
 8011962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011966:	e7b6      	b.n	80118d6 <CST_cmd+0xc2>
							crs_strlen(argv_p[1])) == 0) {
 8011968:	4628      	mov	r0, r5
 801196a:	f006 fae3 	bl	8017f34 <crs_strlen>
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "sim",
 801196e:	4971      	ldr	r1, [pc, #452]	; (8011b34 <CST_cmd+0x320>)
							crs_strlen(argv_p[1])) == 0) {
 8011970:	4602      	mov	r2, r0
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "sim",
 8011972:	4628      	mov	r0, r5
 8011974:	f00b fa54 	bl	801ce20 <memcmp>
 8011978:	b960      	cbnz	r0, 8011994 <CST_cmd+0x180>
						target_state.rt_state = DC_SERVICE_ON;
 801197a:	f240 1307 	movw	r3, #263	; 0x107
 801197e:	8123      	strh	r3, [r4, #8]
						target_state.target_state = DC_TARGET_STATE_SIM_ONLY;
 8011980:	2301      	movs	r3, #1
						(void) dc_com_write(&dc_com_db,
 8011982:	4968      	ldr	r1, [pc, #416]	; (8011b24 <CST_cmd+0x310>)
						target_state.target_state = DC_TARGET_STATE_MODEM_ONLY;
 8011984:	72a3      	strb	r3, [r4, #10]
						(void) dc_com_write(&dc_com_db,
 8011986:	8809      	ldrh	r1, [r1, #0]
 8011988:	4867      	ldr	r0, [pc, #412]	; (8011b28 <CST_cmd+0x314>)
 801198a:	230c      	movs	r3, #12
 801198c:	4622      	mov	r2, r4
 801198e:	f005 fc0d 	bl	80171ac <dc_com_write>
 8011992:	e7e3      	b.n	801195c <CST_cmd+0x148>
							crs_strlen(argv_p[1])) == 0) {
 8011994:	4628      	mov	r0, r5
 8011996:	f006 facd 	bl	8017f34 <crs_strlen>
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "full",
 801199a:	4967      	ldr	r1, [pc, #412]	; (8011b38 <CST_cmd+0x324>)
							crs_strlen(argv_p[1])) == 0) {
 801199c:	4602      	mov	r2, r0
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "full",
 801199e:	4628      	mov	r0, r5
 80119a0:	f00b fa3e 	bl	801ce20 <memcmp>
 80119a4:	b910      	cbnz	r0, 80119ac <CST_cmd+0x198>
						(void) cellular_connect();
 80119a6:	f007 fc47 	bl	8019238 <cellular_connect>
 80119aa:	e7d0      	b.n	801194e <CST_cmd+0x13a>
							crs_strlen(argv_p[1])) == 0) {
 80119ac:	4628      	mov	r0, r5
 80119ae:	f006 fac1 	bl	8017f34 <crs_strlen>
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "modem",
 80119b2:	4962      	ldr	r1, [pc, #392]	; (8011b3c <CST_cmd+0x328>)
							crs_strlen(argv_p[1])) == 0) {
 80119b4:	4602      	mov	r2, r0
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "modem",
 80119b6:	4628      	mov	r0, r5
 80119b8:	f00b fa32 	bl	801ce20 <memcmp>
 80119bc:	2800      	cmp	r0, #0
 80119be:	d1cd      	bne.n	801195c <CST_cmd+0x148>
						target_state.rt_state = DC_SERVICE_ON;
 80119c0:	f240 1307 	movw	r3, #263	; 0x107
 80119c4:	8123      	strh	r3, [r4, #8]
						target_state.target_state = DC_TARGET_STATE_MODEM_ONLY;
 80119c6:	2303      	movs	r3, #3
 80119c8:	e7db      	b.n	8011982 <CST_cmd+0x16e>
					crs_strlen(argv_p[0])) == 0) {
 80119ca:	4628      	mov	r0, r5
 80119cc:	f006 fab2 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apn",
 80119d0:	495b      	ldr	r1, [pc, #364]	; (8011b40 <CST_cmd+0x32c>)
					crs_strlen(argv_p[0])) == 0) {
 80119d2:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apn",
 80119d4:	4628      	mov	r0, r5
 80119d6:	f00b fa23 	bl	801ce20 <memcmp>
 80119da:	2800      	cmp	r0, #0
 80119dc:	d14e      	bne.n	8011a7c <CST_cmd+0x268>
				if (argc == 2U) {
 80119de:	2c02      	cmp	r4, #2
 80119e0:	4d58      	ldr	r5, [pc, #352]	; (8011b44 <CST_cmd+0x330>)
 80119e2:	4f59      	ldr	r7, [pc, #356]	; (8011b48 <CST_cmd+0x334>)
 80119e4:	d13f      	bne.n	8011a66 <CST_cmd+0x252>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80119e6:	f8d9 6004 	ldr.w	r6, [r9, #4]
							crs_strlen(argv_p[1])) == 0) {
 80119ea:	4630      	mov	r0, r6
 80119ec:	f006 faa2 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80119f0:	4947      	ldr	r1, [pc, #284]	; (8011b10 <CST_cmd+0x2fc>)
							crs_strlen(argv_p[1])) == 0) {
 80119f2:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80119f4:	4630      	mov	r0, r6
 80119f6:	f00b fa13 	bl	801ce20 <memcmp>
 80119fa:	b9b0      	cbnz	r0, 8011a2a <CST_cmd+0x216>
						(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 80119fc:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8011b50 <CST_cmd+0x33c>
 8011a00:	4849      	ldr	r0, [pc, #292]	; (8011b28 <CST_cmd+0x314>)
 8011a02:	f8b8 1000 	ldrh.w	r1, [r8]
 8011a06:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011a0a:	462a      	mov	r2, r5
 8011a0c:	f005 fc32 	bl	8017274 <dc_com_read>
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8011a10:	7c3b      	ldrb	r3, [r7, #16]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a12:	f8b8 1000 	ldrh.w	r1, [r8]
 8011a16:	4844      	ldr	r0, [pc, #272]	; (8011b28 <CST_cmd+0x314>)
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8011a18:	2268      	movs	r2, #104	; 0x68
 8011a1a:	fb02 5303 	mla	r3, r2, r3, r5
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a1e:	462a      	mov	r2, r5
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8011a20:	72dc      	strb	r4, [r3, #11]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a22:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011a26:	f005 fbc1 	bl	80171ac <dc_com_write>
							crs_strlen(argv_p[1])) == 0) {
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f006 fa82 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8011a30:	4946      	ldr	r1, [pc, #280]	; (8011b4c <CST_cmd+0x338>)
							crs_strlen(argv_p[1])) == 0) {
 8011a32:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8011a34:	4630      	mov	r0, r6
 8011a36:	f00b f9f3 	bl	801ce20 <memcmp>
 8011a3a:	b9a0      	cbnz	r0, 8011a66 <CST_cmd+0x252>
						(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a3c:	4c44      	ldr	r4, [pc, #272]	; (8011b50 <CST_cmd+0x33c>)
 8011a3e:	4a41      	ldr	r2, [pc, #260]	; (8011b44 <CST_cmd+0x330>)
 8011a40:	8821      	ldrh	r1, [r4, #0]
 8011a42:	4839      	ldr	r0, [pc, #228]	; (8011b28 <CST_cmd+0x314>)
 8011a44:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011a48:	f005 fc14 	bl	8017274 <dc_com_read>
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8011a4c:	7c3b      	ldrb	r3, [r7, #16]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a4e:	8821      	ldrh	r1, [r4, #0]
 8011a50:	4835      	ldr	r0, [pc, #212]	; (8011b28 <CST_cmd+0x314>)
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8011a52:	2268      	movs	r2, #104	; 0x68
 8011a54:	fb02 5303 	mla	r3, r2, r3, r5
 8011a58:	2201      	movs	r2, #1
 8011a5a:	72da      	strb	r2, [r3, #11]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a5c:	4a39      	ldr	r2, [pc, #228]	; (8011b44 <CST_cmd+0x330>)
 8011a5e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011a62:	f005 fba3 	bl	80171ac <dc_com_write>
				if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem
 8011a66:	7c3b      	ldrb	r3, [r7, #16]
 8011a68:	2268      	movs	r2, #104	; 0x68
 8011a6a:	fb02 5503 	mla	r5, r2, r3, r5
					PRINT_FORCE("%s apn set to on", CST_cmd_label)
 8011a6e:	4a24      	ldr	r2, [pc, #144]	; (8011b00 <CST_cmd+0x2ec>)
				if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem
 8011a70:	7aec      	ldrb	r4, [r5, #11]
 8011a72:	2c01      	cmp	r4, #1
					PRINT_FORCE("%s apn set to on", CST_cmd_label)
 8011a74:	bf0c      	ite	eq
 8011a76:	4937      	ldreq	r1, [pc, #220]	; (8011b54 <CST_cmd+0x340>)
					PRINT_FORCE("%s apn set to off", CST_cmd_label)
 8011a78:	4937      	ldrne	r1, [pc, #220]	; (8011b58 <CST_cmd+0x344>)
 8011a7a:	e72c      	b.n	80118d6 <CST_cmd+0xc2>
					crs_strlen(argv_p[0])) == 0) {
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f006 fa59 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnconf",
 8011a82:	4936      	ldr	r1, [pc, #216]	; (8011b5c <CST_cmd+0x348>)
					crs_strlen(argv_p[0])) == 0) {
 8011a84:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnconf",
 8011a86:	4628      	mov	r0, r5
 8011a88:	f00b f9ca 	bl	801ce20 <memcmp>
 8011a8c:	4682      	mov	sl, r0
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f040 8167 	bne.w	8011d62 <CST_cmd+0x54e>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011a94:	4e32      	ldr	r6, [pc, #200]	; (8011b60 <CST_cmd+0x34c>)
 8011a96:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011b50 <CST_cmd+0x33c>
 8011a9a:	4823      	ldr	r0, [pc, #140]	; (8011b28 <CST_cmd+0x314>)
 8011a9c:	f8b8 1000 	ldrh.w	r1, [r8]
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].username[0] =
 8011aa0:	4f29      	ldr	r7, [pc, #164]	; (8011b48 <CST_cmd+0x334>)
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011aa2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011aa6:	4632      	mov	r2, r6
 8011aa8:	f005 fbe4 	bl	8017274 <dc_com_read>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 8011aac:	492d      	ldr	r1, [pc, #180]	; (8011b64 <CST_cmd+0x350>)
 8011aae:	4a2e      	ldr	r2, [pc, #184]	; (8011b68 <CST_cmd+0x354>)
 8011ab0:	8809      	ldrh	r1, [r1, #0]
 8011ab2:	481d      	ldr	r0, [pc, #116]	; (8011b28 <CST_cmd+0x314>)
 8011ab4:	2320      	movs	r3, #32
 8011ab6:	f005 fbdd 	bl	8017274 <dc_com_read>
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].username[0] =
 8011aba:	7c3b      	ldrb	r3, [r7, #16]
 8011abc:	2568      	movs	r5, #104	; 0x68
 8011abe:	fb05 6303 	mla	r3, r5, r3, r6
				if (argc >= 5U) {
 8011ac2:	2c04      	cmp	r4, #4
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].username[0] =
 8011ac4:	f883 a02f 	strb.w	sl, [r3, #47]	; 0x2f
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].password[0] =
 8011ac8:	f883 a050 	strb.w	sl, [r3, #80]	; 0x50
				if (argc >= 5U) {
 8011acc:	f240 8110 	bls.w	8011cf0 <CST_cmd+0x4dc>
					size = crs_strlen(argv_p[4]) + 1U;
 8011ad0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011ad4:	9101      	str	r1, [sp, #4]
 8011ad6:	4608      	mov	r0, r1
 8011ad8:	f006 fa2c 	bl	8017f34 <crs_strlen>
 8011adc:	1c42      	adds	r2, r0, #1
					if (size <= CA_PASSWORD_SIZE_MAX) {
 8011ade:	2a21      	cmp	r2, #33	; 0x21
 8011ae0:	d844      	bhi.n	8011b6c <CST_cmd+0x358>
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].password,
 8011ae2:	7c38      	ldrb	r0, [r7, #16]
						(void) memcpy(
 8011ae4:	9901      	ldr	r1, [sp, #4]
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].password,
 8011ae6:	fb05 6000 	mla	r0, r5, r0, r6
						(void) memcpy(
 8011aea:	3050      	adds	r0, #80	; 0x50
 8011aec:	f00b f9a6 	bl	801ce3c <memcpy>
	cmd_status = CMD_OK;
 8011af0:	4654      	mov	r4, sl
 8011af2:	e051      	b.n	8011b98 <CST_cmd+0x384>
 8011af4:	08029a46 	.word	0x08029a46
 8011af8:	20008ff8 	.word	0x20008ff8
 8011afc:	08028e19 	.word	0x08028e19
 8011b00:	08028a91 	.word	0x08028a91
 8011b04:	08028e1c 	.word	0x08028e1c
 8011b08:	08028e21 	.word	0x08028e21
 8011b0c:	20008aac 	.word	0x20008aac
 8011b10:	080292b8 	.word	0x080292b8
 8011b14:	08028e29 	.word	0x08028e29
 8011b18:	08028e3e 	.word	0x08028e3e
 8011b1c:	08028e52 	.word	0x08028e52
 8011b20:	20003c0c 	.word	0x20003c0c
 8011b24:	2000024a 	.word	0x2000024a
 8011b28:	20008d7c 	.word	0x20008d7c
 8011b2c:	0802a030 	.word	0x0802a030
 8011b30:	08028e63 	.word	0x08028e63
 8011b34:	08029117 	.word	0x08029117
 8011b38:	08028e5e 	.word	0x08028e5e
 8011b3c:	0802837f 	.word	0x0802837f
 8011b40:	08028e83 	.word	0x08028e83
 8011b44:	20008ad0 	.word	0x20008ad0
 8011b48:	2000029c 	.word	0x2000029c
 8011b4c:	080291e1 	.word	0x080291e1
 8011b50:	2000023c 	.word	0x2000023c
 8011b54:	08028e87 	.word	0x08028e87
 8011b58:	08028e9a 	.word	0x08028e9a
 8011b5c:	08028eae 	.word	0x08028eae
 8011b60:	200039fc 	.word	0x200039fc
 8011b64:	20000248 	.word	0x20000248
 8011b68:	20003be8 	.word	0x20003be8
						PRINT_FORCE("password to long")
 8011b6c:	49b6      	ldr	r1, [pc, #728]	; (8011e48 <CST_cmd+0x634>)
 8011b6e:	48b7      	ldr	r0, [pc, #732]	; (8011e4c <CST_cmd+0x638>)
 8011b70:	f00b fa12 	bl	801cf98 <strcpy>
 8011b74:	48b5      	ldr	r0, [pc, #724]	; (8011e4c <CST_cmd+0x638>)
 8011b76:	f006 f9dd 	bl	8017f34 <crs_strlen>
 8011b7a:	4ab4      	ldr	r2, [pc, #720]	; (8011e4c <CST_cmd+0x638>)
 8011b7c:	b283      	uxth	r3, r0
 8011b7e:	2101      	movs	r1, #1
 8011b80:	2002      	movs	r0, #2
 8011b82:	f006 fa15 	bl	8017fb0 <traceIF_itmPrint>
 8011b86:	48b1      	ldr	r0, [pc, #708]	; (8011e4c <CST_cmd+0x638>)
 8011b88:	f006 f9d4 	bl	8017f34 <crs_strlen>
 8011b8c:	49af      	ldr	r1, [pc, #700]	; (8011e4c <CST_cmd+0x638>)
 8011b8e:	b282      	uxth	r2, r0
 8011b90:	2002      	movs	r0, #2
 8011b92:	f006 fc4d 	bl	8018430 <traceIF_uartPrintForce>
						cmd_status = CMD_SYNTAX_ERROR;
 8011b96:	2401      	movs	r4, #1
					size = crs_strlen(argv_p[3]) + 1U;
 8011b98:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8011b9c:	9101      	str	r1, [sp, #4]
 8011b9e:	4608      	mov	r0, r1
 8011ba0:	f006 f9c8 	bl	8017f34 <crs_strlen>
 8011ba4:	1c42      	adds	r2, r0, #1
					if (size <= CA_USERNAME_SIZE_MAX) {
 8011ba6:	2a21      	cmp	r2, #33	; 0x21
 8011ba8:	f200 80a8 	bhi.w	8011cfc <CST_cmd+0x4e8>
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].username,
 8011bac:	7c38      	ldrb	r0, [r7, #16]
						(void) memcpy(
 8011bae:	9901      	ldr	r1, [sp, #4]
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].username,
 8011bb0:	2368      	movs	r3, #104	; 0x68
 8011bb2:	fb03 6000 	mla	r0, r3, r0, r6
						(void) memcpy(
 8011bb6:	302f      	adds	r0, #47	; 0x2f
 8011bb8:	f00b f940 	bl	801ce3c <memcpy>
							(uint8_t) crs_atoi(argv_p[2]);
 8011bbc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011bc0:	f006 f981 	bl	8017ec6 <crs_atoi>
					cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].cid =
 8011bc4:	7c3b      	ldrb	r3, [r7, #16]
 8011bc6:	2268      	movs	r2, #104	; 0x68
 8011bc8:	fb02 6303 	mla	r3, r2, r3, r6
							(uint8_t) crs_atoi(argv_p[2]);
 8011bcc:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
					size = crs_strlen(argv_p[1]) + 1U;
 8011bd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011bd4:	9101      	str	r1, [sp, #4]
 8011bd6:	4608      	mov	r0, r1
 8011bd8:	f006 f9ac 	bl	8017f34 <crs_strlen>
 8011bdc:	1c42      	adds	r2, r0, #1
					if (size <= CA_APN_SIZE_MAX) {
 8011bde:	2a21      	cmp	r2, #33	; 0x21
 8011be0:	f200 80a8 	bhi.w	8011d34 <CST_cmd+0x520>
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn,
 8011be4:	f897 9010 	ldrb.w	r9, [r7, #16]
						(void) memcpy(
 8011be8:	9901      	ldr	r1, [sp, #4]
								cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn,
 8011bea:	2568      	movs	r5, #104	; 0x68
 8011bec:	fb05 6009 	mla	r0, r5, r9, r6
						cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged =
 8011bf0:	fb09 5505 	mla	r5, r9, r5, r5
						(void) memcpy(
 8011bf4:	300d      	adds	r0, #13
						cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged =
 8011bf6:	4435      	add	r5, r6
						(void) memcpy(
 8011bf8:	f00b f920 	bl	801ce3c <memcpy>
						cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged =
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	726b      	strb	r3, [r5, #9]
				if (cmd_status == CMD_OK) {
 8011c00:	2c00      	cmp	r4, #0
 8011c02:	f040 811c 	bne.w	8011e3e <CST_cmd+0x62a>
					(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011c06:	4a92      	ldr	r2, [pc, #584]	; (8011e50 <CST_cmd+0x63c>)
 8011c08:	f8b8 1000 	ldrh.w	r1, [r8]
 8011c0c:	4891      	ldr	r0, [pc, #580]	; (8011e54 <CST_cmd+0x640>)
 8011c0e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011c12:	f005 facb 	bl	80171ac <dc_com_write>
					PRINT_FORCE(
 8011c16:	4b90      	ldr	r3, [pc, #576]	; (8011e58 <CST_cmd+0x644>)
 8011c18:	4990      	ldr	r1, [pc, #576]	; (8011e5c <CST_cmd+0x648>)
 8011c1a:	7e9a      	ldrb	r2, [r3, #26]
 8011c1c:	4b90      	ldr	r3, [pc, #576]	; (8011e60 <CST_cmd+0x64c>)
 8011c1e:	488b      	ldr	r0, [pc, #556]	; (8011e4c <CST_cmd+0x638>)
 8011c20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c24:	f00b f948 	bl	801ceb8 <sprintf>
 8011c28:	4888      	ldr	r0, [pc, #544]	; (8011e4c <CST_cmd+0x638>)
 8011c2a:	f006 f983 	bl	8017f34 <crs_strlen>
 8011c2e:	4a87      	ldr	r2, [pc, #540]	; (8011e4c <CST_cmd+0x638>)
 8011c30:	b283      	uxth	r3, r0
 8011c32:	2101      	movs	r1, #1
 8011c34:	2002      	movs	r0, #2
 8011c36:	f006 f9bb 	bl	8017fb0 <traceIF_itmPrint>
 8011c3a:	4884      	ldr	r0, [pc, #528]	; (8011e4c <CST_cmd+0x638>)
 8011c3c:	f006 f97a 	bl	8017f34 <crs_strlen>
 8011c40:	4982      	ldr	r1, [pc, #520]	; (8011e4c <CST_cmd+0x638>)
 8011c42:	b282      	uxth	r2, r0
 8011c44:	2002      	movs	r0, #2
 8011c46:	f006 fbf3 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("APN                : %s",
 8011c4a:	7c3a      	ldrb	r2, [r7, #16]
 8011c4c:	4985      	ldr	r1, [pc, #532]	; (8011e64 <CST_cmd+0x650>)
 8011c4e:	487f      	ldr	r0, [pc, #508]	; (8011e4c <CST_cmd+0x638>)
 8011c50:	2468      	movs	r4, #104	; 0x68
 8011c52:	fb04 6202 	mla	r2, r4, r2, r6
 8011c56:	320d      	adds	r2, #13
 8011c58:	f00b f92e 	bl	801ceb8 <sprintf>
 8011c5c:	487b      	ldr	r0, [pc, #492]	; (8011e4c <CST_cmd+0x638>)
 8011c5e:	f006 f969 	bl	8017f34 <crs_strlen>
 8011c62:	4a7a      	ldr	r2, [pc, #488]	; (8011e4c <CST_cmd+0x638>)
 8011c64:	b283      	uxth	r3, r0
 8011c66:	2101      	movs	r1, #1
 8011c68:	2002      	movs	r0, #2
 8011c6a:	f006 f9a1 	bl	8017fb0 <traceIF_itmPrint>
 8011c6e:	4877      	ldr	r0, [pc, #476]	; (8011e4c <CST_cmd+0x638>)
 8011c70:	f006 f960 	bl	8017f34 <crs_strlen>
 8011c74:	4975      	ldr	r1, [pc, #468]	; (8011e4c <CST_cmd+0x638>)
 8011c76:	b282      	uxth	r2, r0
 8011c78:	2002      	movs	r0, #2
 8011c7a:	f006 fbd9 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("CID                : %d",
 8011c7e:	7c3b      	ldrb	r3, [r7, #16]
 8011c80:	4979      	ldr	r1, [pc, #484]	; (8011e68 <CST_cmd+0x654>)
 8011c82:	4872      	ldr	r0, [pc, #456]	; (8011e4c <CST_cmd+0x638>)
 8011c84:	fb04 6303 	mla	r3, r4, r3, r6
 8011c88:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8011c8c:	f00b f914 	bl	801ceb8 <sprintf>
 8011c90:	486e      	ldr	r0, [pc, #440]	; (8011e4c <CST_cmd+0x638>)
 8011c92:	f006 f94f 	bl	8017f34 <crs_strlen>
 8011c96:	4a6d      	ldr	r2, [pc, #436]	; (8011e4c <CST_cmd+0x638>)
 8011c98:	b283      	uxth	r3, r0
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	2002      	movs	r0, #2
 8011c9e:	f006 f987 	bl	8017fb0 <traceIF_itmPrint>
 8011ca2:	486a      	ldr	r0, [pc, #424]	; (8011e4c <CST_cmd+0x638>)
 8011ca4:	f006 f946 	bl	8017f34 <crs_strlen>
 8011ca8:	4968      	ldr	r1, [pc, #416]	; (8011e4c <CST_cmd+0x638>)
 8011caa:	b282      	uxth	r2, r0
 8011cac:	2002      	movs	r0, #2
 8011cae:	f006 fbbf 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("username           : %s",
 8011cb2:	7c3a      	ldrb	r2, [r7, #16]
 8011cb4:	496d      	ldr	r1, [pc, #436]	; (8011e6c <CST_cmd+0x658>)
 8011cb6:	4865      	ldr	r0, [pc, #404]	; (8011e4c <CST_cmd+0x638>)
 8011cb8:	fb04 6202 	mla	r2, r4, r2, r6
 8011cbc:	322f      	adds	r2, #47	; 0x2f
 8011cbe:	f00b f8fb 	bl	801ceb8 <sprintf>
 8011cc2:	4862      	ldr	r0, [pc, #392]	; (8011e4c <CST_cmd+0x638>)
 8011cc4:	f006 f936 	bl	8017f34 <crs_strlen>
 8011cc8:	4a60      	ldr	r2, [pc, #384]	; (8011e4c <CST_cmd+0x638>)
 8011cca:	b283      	uxth	r3, r0
 8011ccc:	2101      	movs	r1, #1
 8011cce:	2002      	movs	r0, #2
 8011cd0:	f006 f96e 	bl	8017fb0 <traceIF_itmPrint>
 8011cd4:	485d      	ldr	r0, [pc, #372]	; (8011e4c <CST_cmd+0x638>)
 8011cd6:	f006 f92d 	bl	8017f34 <crs_strlen>
 8011cda:	495c      	ldr	r1, [pc, #368]	; (8011e4c <CST_cmd+0x638>)
 8011cdc:	b282      	uxth	r2, r0
 8011cde:	2002      	movs	r0, #2
 8011ce0:	f006 fba6 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("password           : %s",
 8011ce4:	7c3a      	ldrb	r2, [r7, #16]
 8011ce6:	4962      	ldr	r1, [pc, #392]	; (8011e70 <CST_cmd+0x65c>)
 8011ce8:	fb04 6202 	mla	r2, r4, r2, r6
 8011cec:	3250      	adds	r2, #80	; 0x50
 8011cee:	e5f2      	b.n	80118d6 <CST_cmd+0xc2>
				if (argc >= 4U) {
 8011cf0:	f43f aefe 	beq.w	8011af0 <CST_cmd+0x2dc>
				if (argc >= 3U) {
 8011cf4:	2c03      	cmp	r4, #3
 8011cf6:	d118      	bne.n	8011d2a <CST_cmd+0x516>
	cmd_status = CMD_OK;
 8011cf8:	4654      	mov	r4, sl
 8011cfa:	e75f      	b.n	8011bbc <CST_cmd+0x3a8>
						PRINT_FORCE("username to long")
 8011cfc:	495d      	ldr	r1, [pc, #372]	; (8011e74 <CST_cmd+0x660>)
 8011cfe:	4853      	ldr	r0, [pc, #332]	; (8011e4c <CST_cmd+0x638>)
 8011d00:	f00b f94a 	bl	801cf98 <strcpy>
 8011d04:	4851      	ldr	r0, [pc, #324]	; (8011e4c <CST_cmd+0x638>)
 8011d06:	f006 f915 	bl	8017f34 <crs_strlen>
 8011d0a:	4a50      	ldr	r2, [pc, #320]	; (8011e4c <CST_cmd+0x638>)
 8011d0c:	b283      	uxth	r3, r0
 8011d0e:	2101      	movs	r1, #1
 8011d10:	2002      	movs	r0, #2
 8011d12:	f006 f94d 	bl	8017fb0 <traceIF_itmPrint>
 8011d16:	484d      	ldr	r0, [pc, #308]	; (8011e4c <CST_cmd+0x638>)
 8011d18:	f006 f90c 	bl	8017f34 <crs_strlen>
 8011d1c:	494b      	ldr	r1, [pc, #300]	; (8011e4c <CST_cmd+0x638>)
 8011d1e:	b282      	uxth	r2, r0
 8011d20:	2002      	movs	r0, #2
 8011d22:	f006 fb85 	bl	8018430 <traceIF_uartPrintForce>
						cmd_status = CMD_SYNTAX_ERROR;
 8011d26:	2401      	movs	r4, #1
 8011d28:	e748      	b.n	8011bbc <CST_cmd+0x3a8>
				if (argc >= 2U) {
 8011d2a:	2c01      	cmp	r4, #1
 8011d2c:	f43f af6b 	beq.w	8011c06 <CST_cmd+0x3f2>
	cmd_status = CMD_OK;
 8011d30:	4654      	mov	r4, sl
 8011d32:	e74d      	b.n	8011bd0 <CST_cmd+0x3bc>
						PRINT_FORCE("APN to long")
 8011d34:	4950      	ldr	r1, [pc, #320]	; (8011e78 <CST_cmd+0x664>)
 8011d36:	4845      	ldr	r0, [pc, #276]	; (8011e4c <CST_cmd+0x638>)
 8011d38:	f00b f92e 	bl	801cf98 <strcpy>
 8011d3c:	4843      	ldr	r0, [pc, #268]	; (8011e4c <CST_cmd+0x638>)
 8011d3e:	f006 f8f9 	bl	8017f34 <crs_strlen>
 8011d42:	4a42      	ldr	r2, [pc, #264]	; (8011e4c <CST_cmd+0x638>)
 8011d44:	b283      	uxth	r3, r0
 8011d46:	2101      	movs	r1, #1
 8011d48:	2002      	movs	r0, #2
 8011d4a:	f006 f931 	bl	8017fb0 <traceIF_itmPrint>
 8011d4e:	483f      	ldr	r0, [pc, #252]	; (8011e4c <CST_cmd+0x638>)
 8011d50:	f006 f8f0 	bl	8017f34 <crs_strlen>
 8011d54:	493d      	ldr	r1, [pc, #244]	; (8011e4c <CST_cmd+0x638>)
 8011d56:	b282      	uxth	r2, r0
 8011d58:	2002      	movs	r0, #2
 8011d5a:	f006 fb69 	bl	8018430 <traceIF_uartPrintForce>
			cmd_status = CMD_SYNTAX_ERROR;
 8011d5e:	2401      	movs	r4, #1
 8011d60:	e06d      	b.n	8011e3e <CST_cmd+0x62a>
					crs_strlen(argv_p[0])) == 0) {
 8011d62:	4628      	mov	r0, r5
 8011d64:	f006 f8e6 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnuser",
 8011d68:	4944      	ldr	r1, [pc, #272]	; (8011e7c <CST_cmd+0x668>)
					crs_strlen(argv_p[0])) == 0) {
 8011d6a:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnuser",
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f00b f857 	bl	801ce20 <memcmp>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	f040 8094 	bne.w	8011ea0 <CST_cmd+0x68c>
				if (argc == 2U) {
 8011d78:	2c02      	cmp	r4, #2
 8011d7a:	4f41      	ldr	r7, [pc, #260]	; (8011e80 <CST_cmd+0x66c>)
 8011d7c:	4c41      	ldr	r4, [pc, #260]	; (8011e84 <CST_cmd+0x670>)
 8011d7e:	d140      	bne.n	8011e02 <CST_cmd+0x5ee>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8011d80:	f8d9 5004 	ldr.w	r5, [r9, #4]
							crs_strlen(argv_p[1])) == 0) {
 8011d84:	4628      	mov	r0, r5
 8011d86:	f006 f8d5 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8011d8a:	493f      	ldr	r1, [pc, #252]	; (8011e88 <CST_cmd+0x674>)
							crs_strlen(argv_p[1])) == 0) {
 8011d8c:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8011d8e:	4628      	mov	r0, r5
 8011d90:	f00b f846 	bl	801ce20 <memcmp>
 8011d94:	4606      	mov	r6, r0
 8011d96:	b9b0      	cbnz	r0, 8011dc6 <CST_cmd+0x5b2>
						(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011d98:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8011e90 <CST_cmd+0x67c>
 8011d9c:	482d      	ldr	r0, [pc, #180]	; (8011e54 <CST_cmd+0x640>)
 8011d9e:	f8b8 1000 	ldrh.w	r1, [r8]
 8011da2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011da6:	4622      	mov	r2, r4
 8011da8:	f005 fa64 	bl	8017274 <dc_com_read>
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent =
 8011dac:	7c3b      	ldrb	r3, [r7, #16]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011dae:	f8b8 1000 	ldrh.w	r1, [r8]
 8011db2:	4828      	ldr	r0, [pc, #160]	; (8011e54 <CST_cmd+0x640>)
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent =
 8011db4:	2268      	movs	r2, #104	; 0x68
 8011db6:	fb02 4303 	mla	r3, r2, r3, r4
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011dba:	4622      	mov	r2, r4
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent =
 8011dbc:	731e      	strb	r6, [r3, #12]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011dbe:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011dc2:	f005 f9f3 	bl	80171ac <dc_com_write>
							crs_strlen(argv_p[1])) == 0) {
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f006 f8b4 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8011dcc:	492f      	ldr	r1, [pc, #188]	; (8011e8c <CST_cmd+0x678>)
							crs_strlen(argv_p[1])) == 0) {
 8011dce:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8011dd0:	4628      	mov	r0, r5
 8011dd2:	f00b f825 	bl	801ce20 <memcmp>
 8011dd6:	b9a0      	cbnz	r0, 8011e02 <CST_cmd+0x5ee>
						(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011dd8:	4d2d      	ldr	r5, [pc, #180]	; (8011e90 <CST_cmd+0x67c>)
 8011dda:	4a2a      	ldr	r2, [pc, #168]	; (8011e84 <CST_cmd+0x670>)
 8011ddc:	8829      	ldrh	r1, [r5, #0]
 8011dde:	481d      	ldr	r0, [pc, #116]	; (8011e54 <CST_cmd+0x640>)
 8011de0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011de4:	f005 fa46 	bl	8017274 <dc_com_read>
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent =
 8011de8:	7c3b      	ldrb	r3, [r7, #16]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011dea:	8829      	ldrh	r1, [r5, #0]
 8011dec:	4819      	ldr	r0, [pc, #100]	; (8011e54 <CST_cmd+0x640>)
						cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent =
 8011dee:	2268      	movs	r2, #104	; 0x68
 8011df0:	fb02 4303 	mla	r3, r2, r3, r4
 8011df4:	2201      	movs	r2, #1
 8011df6:	731a      	strb	r2, [r3, #12]
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011df8:	4a22      	ldr	r2, [pc, #136]	; (8011e84 <CST_cmd+0x670>)
 8011dfa:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011dfe:	f005 f9d5 	bl	80171ac <dc_com_write>
				if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent
 8011e02:	7c3b      	ldrb	r3, [r7, #16]
 8011e04:	2268      	movs	r2, #104	; 0x68
 8011e06:	fb02 4403 	mla	r4, r2, r3, r4
					PRINT_FORCE("%s apn user set to on", CST_cmd_label)
 8011e0a:	4a22      	ldr	r2, [pc, #136]	; (8011e94 <CST_cmd+0x680>)
				if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent
 8011e0c:	7b24      	ldrb	r4, [r4, #12]
 8011e0e:	b10c      	cbz	r4, 8011e14 <CST_cmd+0x600>
					PRINT_FORCE("%s apn user set to on", CST_cmd_label)
 8011e10:	4921      	ldr	r1, [pc, #132]	; (8011e98 <CST_cmd+0x684>)
 8011e12:	e560      	b.n	80118d6 <CST_cmd+0xc2>
					PRINT_FORCE("%s apn user set to off", CST_cmd_label)
 8011e14:	4921      	ldr	r1, [pc, #132]	; (8011e9c <CST_cmd+0x688>)
 8011e16:	480d      	ldr	r0, [pc, #52]	; (8011e4c <CST_cmd+0x638>)
 8011e18:	f00b f84e 	bl	801ceb8 <sprintf>
 8011e1c:	480b      	ldr	r0, [pc, #44]	; (8011e4c <CST_cmd+0x638>)
 8011e1e:	f006 f889 	bl	8017f34 <crs_strlen>
 8011e22:	4a0a      	ldr	r2, [pc, #40]	; (8011e4c <CST_cmd+0x638>)
 8011e24:	b283      	uxth	r3, r0
 8011e26:	2101      	movs	r1, #1
 8011e28:	2002      	movs	r0, #2
 8011e2a:	f006 f8c1 	bl	8017fb0 <traceIF_itmPrint>
 8011e2e:	4807      	ldr	r0, [pc, #28]	; (8011e4c <CST_cmd+0x638>)
 8011e30:	f006 f880 	bl	8017f34 <crs_strlen>
 8011e34:	4905      	ldr	r1, [pc, #20]	; (8011e4c <CST_cmd+0x638>)
 8011e36:	b282      	uxth	r2, r0
 8011e38:	2002      	movs	r0, #2
 8011e3a:	f006 faf9 	bl	8018430 <traceIF_uartPrintForce>
}
 8011e3e:	4620      	mov	r0, r4
 8011e40:	b052      	add	sp, #328	; 0x148
 8011e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e46:	bf00      	nop
 8011e48:	08028eb6 	.word	0x08028eb6
 8011e4c:	20008ff8 	.word	0x20008ff8
 8011e50:	200039fc 	.word	0x200039fc
 8011e54:	20008d7c 	.word	0x20008d7c
 8011e58:	20003be8 	.word	0x20003be8
 8011e5c:	08028eea 	.word	0x08028eea
 8011e60:	0802a024 	.word	0x0802a024
 8011e64:	08028f1c 	.word	0x08028f1c
 8011e68:	08028f36 	.word	0x08028f36
 8011e6c:	08028f50 	.word	0x08028f50
 8011e70:	08028f6a 	.word	0x08028f6a
 8011e74:	08028ec9 	.word	0x08028ec9
 8011e78:	08028edc 	.word	0x08028edc
 8011e7c:	08028f84 	.word	0x08028f84
 8011e80:	2000029c 	.word	0x2000029c
 8011e84:	20008ad0 	.word	0x20008ad0
 8011e88:	080292b8 	.word	0x080292b8
 8011e8c:	080291e1 	.word	0x080291e1
 8011e90:	2000023c 	.word	0x2000023c
 8011e94:	08028a91 	.word	0x08028a91
 8011e98:	08028f8c 	.word	0x08028f8c
 8011e9c:	08028fa4 	.word	0x08028fa4
					crs_strlen(argv_p[0])) == 0) {
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f006 f847 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnempty",
 8011ea6:	49ba      	ldr	r1, [pc, #744]	; (8012190 <CST_cmd+0x97c>)
					crs_strlen(argv_p[0])) == 0) {
 8011ea8:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "apnempty",
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f00a ffb8 	bl	801ce20 <memcmp>
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	f040 80a9 	bne.w	801200a <CST_cmd+0x7f6>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011eb8:	4cb6      	ldr	r4, [pc, #728]	; (8012194 <CST_cmd+0x980>)
 8011eba:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80121c8 <CST_cmd+0x9b4>
 8011ebe:	48b6      	ldr	r0, [pc, #728]	; (8012198 <CST_cmd+0x984>)
 8011ec0:	f8b8 1000 	ldrh.w	r1, [r8]
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 8011ec4:	f8df 932c 	ldr.w	r9, [pc, #812]	; 80121f4 <CST_cmd+0x9e0>
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn[0] =
 8011ec8:	4fb4      	ldr	r7, [pc, #720]	; (801219c <CST_cmd+0x988>)
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8011eca:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8011ece:	4622      	mov	r2, r4
 8011ed0:	f005 f9d0 	bl	8017274 <dc_com_read>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 8011ed4:	49b2      	ldr	r1, [pc, #712]	; (80121a0 <CST_cmd+0x98c>)
 8011ed6:	48b0      	ldr	r0, [pc, #704]	; (8012198 <CST_cmd+0x984>)
 8011ed8:	8809      	ldrh	r1, [r1, #0]
 8011eda:	2320      	movs	r3, #32
 8011edc:	464a      	mov	r2, r9
 8011ede:	f005 f9c9 	bl	8017274 <dc_com_read>
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn[0] =
 8011ee2:	7c3b      	ldrb	r3, [r7, #16]
				PRINT_FORCE("APN configuration values for the sim slot (%s):",
 8011ee4:	49af      	ldr	r1, [pc, #700]	; (80121a4 <CST_cmd+0x990>)
 8011ee6:	48b0      	ldr	r0, [pc, #704]	; (80121a8 <CST_cmd+0x994>)
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn[0] =
 8011ee8:	2568      	movs	r5, #104	; 0x68
 8011eea:	fb05 4203 	mla	r2, r5, r3, r4
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged =
 8011eee:	fb03 5305 	mla	r3, r3, r5, r5
 8011ef2:	4423      	add	r3, r4
 8011ef4:	f04f 0a01 	mov.w	sl, #1
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apn[0] =
 8011ef8:	7356      	strb	r6, [r2, #13]
				cst_cmd_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged =
 8011efa:	f883 a009 	strb.w	sl, [r3, #9]
				PRINT_FORCE("APN configuration values for the sim slot (%s):",
 8011efe:	f899 201a 	ldrb.w	r2, [r9, #26]
 8011f02:	4baa      	ldr	r3, [pc, #680]	; (80121ac <CST_cmd+0x998>)
 8011f04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011f08:	f00a ffd6 	bl	801ceb8 <sprintf>
 8011f0c:	48a6      	ldr	r0, [pc, #664]	; (80121a8 <CST_cmd+0x994>)
 8011f0e:	f006 f811 	bl	8017f34 <crs_strlen>
 8011f12:	4aa5      	ldr	r2, [pc, #660]	; (80121a8 <CST_cmd+0x994>)
 8011f14:	b283      	uxth	r3, r0
 8011f16:	4651      	mov	r1, sl
 8011f18:	2002      	movs	r0, #2
 8011f1a:	f006 f849 	bl	8017fb0 <traceIF_itmPrint>
 8011f1e:	48a2      	ldr	r0, [pc, #648]	; (80121a8 <CST_cmd+0x994>)
 8011f20:	f006 f808 	bl	8017f34 <crs_strlen>
 8011f24:	49a0      	ldr	r1, [pc, #640]	; (80121a8 <CST_cmd+0x994>)
 8011f26:	b282      	uxth	r2, r0
 8011f28:	2002      	movs	r0, #2
 8011f2a:	f006 fa81 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("APN                : %s",
 8011f2e:	7c3a      	ldrb	r2, [r7, #16]
 8011f30:	499f      	ldr	r1, [pc, #636]	; (80121b0 <CST_cmd+0x99c>)
 8011f32:	489d      	ldr	r0, [pc, #628]	; (80121a8 <CST_cmd+0x994>)
 8011f34:	fb05 4202 	mla	r2, r5, r2, r4
 8011f38:	320d      	adds	r2, #13
 8011f3a:	f00a ffbd 	bl	801ceb8 <sprintf>
 8011f3e:	489a      	ldr	r0, [pc, #616]	; (80121a8 <CST_cmd+0x994>)
 8011f40:	f005 fff8 	bl	8017f34 <crs_strlen>
 8011f44:	4a98      	ldr	r2, [pc, #608]	; (80121a8 <CST_cmd+0x994>)
 8011f46:	b283      	uxth	r3, r0
 8011f48:	4651      	mov	r1, sl
 8011f4a:	2002      	movs	r0, #2
 8011f4c:	f006 f830 	bl	8017fb0 <traceIF_itmPrint>
 8011f50:	4895      	ldr	r0, [pc, #596]	; (80121a8 <CST_cmd+0x994>)
 8011f52:	f005 ffef 	bl	8017f34 <crs_strlen>
 8011f56:	4994      	ldr	r1, [pc, #592]	; (80121a8 <CST_cmd+0x994>)
 8011f58:	b282      	uxth	r2, r0
 8011f5a:	2002      	movs	r0, #2
 8011f5c:	f006 fa68 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("CID                : %d",
 8011f60:	7c3b      	ldrb	r3, [r7, #16]
 8011f62:	4994      	ldr	r1, [pc, #592]	; (80121b4 <CST_cmd+0x9a0>)
 8011f64:	4890      	ldr	r0, [pc, #576]	; (80121a8 <CST_cmd+0x994>)
 8011f66:	fb05 4303 	mla	r3, r5, r3, r4
 8011f6a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8011f6e:	f00a ffa3 	bl	801ceb8 <sprintf>
 8011f72:	488d      	ldr	r0, [pc, #564]	; (80121a8 <CST_cmd+0x994>)
 8011f74:	f005 ffde 	bl	8017f34 <crs_strlen>
 8011f78:	4a8b      	ldr	r2, [pc, #556]	; (80121a8 <CST_cmd+0x994>)
 8011f7a:	b283      	uxth	r3, r0
 8011f7c:	4651      	mov	r1, sl
 8011f7e:	2002      	movs	r0, #2
 8011f80:	f006 f816 	bl	8017fb0 <traceIF_itmPrint>
 8011f84:	4888      	ldr	r0, [pc, #544]	; (80121a8 <CST_cmd+0x994>)
 8011f86:	f005 ffd5 	bl	8017f34 <crs_strlen>
 8011f8a:	4987      	ldr	r1, [pc, #540]	; (80121a8 <CST_cmd+0x994>)
 8011f8c:	b282      	uxth	r2, r0
 8011f8e:	2002      	movs	r0, #2
 8011f90:	f006 fa4e 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("username           : %s",
 8011f94:	7c3a      	ldrb	r2, [r7, #16]
 8011f96:	4988      	ldr	r1, [pc, #544]	; (80121b8 <CST_cmd+0x9a4>)
 8011f98:	4883      	ldr	r0, [pc, #524]	; (80121a8 <CST_cmd+0x994>)
 8011f9a:	fb05 4202 	mla	r2, r5, r2, r4
 8011f9e:	322f      	adds	r2, #47	; 0x2f
 8011fa0:	f00a ff8a 	bl	801ceb8 <sprintf>
 8011fa4:	4880      	ldr	r0, [pc, #512]	; (80121a8 <CST_cmd+0x994>)
 8011fa6:	f005 ffc5 	bl	8017f34 <crs_strlen>
 8011faa:	4a7f      	ldr	r2, [pc, #508]	; (80121a8 <CST_cmd+0x994>)
 8011fac:	b283      	uxth	r3, r0
 8011fae:	4651      	mov	r1, sl
 8011fb0:	2002      	movs	r0, #2
 8011fb2:	f005 fffd 	bl	8017fb0 <traceIF_itmPrint>
 8011fb6:	487c      	ldr	r0, [pc, #496]	; (80121a8 <CST_cmd+0x994>)
 8011fb8:	f005 ffbc 	bl	8017f34 <crs_strlen>
 8011fbc:	497a      	ldr	r1, [pc, #488]	; (80121a8 <CST_cmd+0x994>)
 8011fbe:	b282      	uxth	r2, r0
 8011fc0:	2002      	movs	r0, #2
 8011fc2:	f006 fa35 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("password           : %s",
 8011fc6:	7c3a      	ldrb	r2, [r7, #16]
 8011fc8:	497c      	ldr	r1, [pc, #496]	; (80121bc <CST_cmd+0x9a8>)
 8011fca:	4877      	ldr	r0, [pc, #476]	; (80121a8 <CST_cmd+0x994>)
 8011fcc:	fb05 4202 	mla	r2, r5, r2, r4
 8011fd0:	3250      	adds	r2, #80	; 0x50
 8011fd2:	f00a ff71 	bl	801ceb8 <sprintf>
 8011fd6:	4874      	ldr	r0, [pc, #464]	; (80121a8 <CST_cmd+0x994>)
 8011fd8:	f005 ffac 	bl	8017f34 <crs_strlen>
 8011fdc:	4a72      	ldr	r2, [pc, #456]	; (80121a8 <CST_cmd+0x994>)
 8011fde:	b283      	uxth	r3, r0
 8011fe0:	4651      	mov	r1, sl
 8011fe2:	2002      	movs	r0, #2
 8011fe4:	f005 ffe4 	bl	8017fb0 <traceIF_itmPrint>
 8011fe8:	486f      	ldr	r0, [pc, #444]	; (80121a8 <CST_cmd+0x994>)
 8011fea:	f005 ffa3 	bl	8017f34 <crs_strlen>
 8011fee:	496e      	ldr	r1, [pc, #440]	; (80121a8 <CST_cmd+0x994>)
 8011ff0:	b282      	uxth	r2, r0
 8011ff2:	2002      	movs	r0, #2
 8011ff4:	f006 fa1c 	bl	8018430 <traceIF_uartPrintForce>
				(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8011ff8:	f8b8 1000 	ldrh.w	r1, [r8]
 8011ffc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8012000:	4622      	mov	r2, r4
					(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8012002:	4865      	ldr	r0, [pc, #404]	; (8012198 <CST_cmd+0x984>)
 8012004:	f005 f8d2 	bl	80171ac <dc_com_write>
 8012008:	e423      	b.n	8011852 <CST_cmd+0x3e>
					crs_strlen(argv_p[0])) == 0) {
 801200a:	4628      	mov	r0, r5
 801200c:	f005 ff92 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "state",
 8012010:	496b      	ldr	r1, [pc, #428]	; (80121c0 <CST_cmd+0x9ac>)
					crs_strlen(argv_p[0])) == 0) {
 8012012:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "state",
 8012014:	4628      	mov	r0, r5
 8012016:	f00a ff03 	bl	801ce20 <memcmp>
 801201a:	2800      	cmp	r0, #0
 801201c:	f040 80fd 	bne.w	801221a <CST_cmd+0xa06>
				PRINT_FORCE("Cellular Service Task State")
 8012020:	4968      	ldr	r1, [pc, #416]	; (80121c4 <CST_cmd+0x9b0>)
 8012022:	4861      	ldr	r0, [pc, #388]	; (80121a8 <CST_cmd+0x994>)
				PRINT_FORCE("Sim Selected   : %s",
 8012024:	4c61      	ldr	r4, [pc, #388]	; (80121ac <CST_cmd+0x998>)
				PRINT_FORCE("Cellular Service Task State")
 8012026:	f00a ffb7 	bl	801cf98 <strcpy>
 801202a:	485f      	ldr	r0, [pc, #380]	; (80121a8 <CST_cmd+0x994>)
 801202c:	f005 ff82 	bl	8017f34 <crs_strlen>
 8012030:	4a5d      	ldr	r2, [pc, #372]	; (80121a8 <CST_cmd+0x994>)
 8012032:	b283      	uxth	r3, r0
 8012034:	2101      	movs	r1, #1
 8012036:	2002      	movs	r0, #2
 8012038:	f005 ffba 	bl	8017fb0 <traceIF_itmPrint>
 801203c:	485a      	ldr	r0, [pc, #360]	; (80121a8 <CST_cmd+0x994>)
 801203e:	f005 ff79 	bl	8017f34 <crs_strlen>
 8012042:	4959      	ldr	r1, [pc, #356]	; (80121a8 <CST_cmd+0x994>)
 8012044:	b282      	uxth	r2, r0
 8012046:	2002      	movs	r0, #2
 8012048:	f006 f9f2 	bl	8018430 <traceIF_uartPrintForce>
				cellular_get_sim_info(&p_my_sim_info);
 801204c:	a81f      	add	r0, sp, #124	; 0x7c
 801204e:	f007 f91b 	bl	8019288 <cellular_get_sim_info>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8012052:	495d      	ldr	r1, [pc, #372]	; (80121c8 <CST_cmd+0x9b4>)
 8012054:	4a4f      	ldr	r2, [pc, #316]	; (8012194 <CST_cmd+0x980>)
 8012056:	8809      	ldrh	r1, [r1, #0]
 8012058:	484f      	ldr	r0, [pc, #316]	; (8012198 <CST_cmd+0x984>)
 801205a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 801205e:	f005 f909 	bl	8017274 <dc_com_read>
				PRINT_FORCE("Current State  : %s",
 8012062:	f002 fbd5 	bl	8014810 <CST_get_state>
 8012066:	4b59      	ldr	r3, [pc, #356]	; (80121cc <CST_cmd+0x9b8>)
 8012068:	4959      	ldr	r1, [pc, #356]	; (80121d0 <CST_cmd+0x9bc>)
 801206a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 801206e:	484e      	ldr	r0, [pc, #312]	; (80121a8 <CST_cmd+0x994>)
 8012070:	f00a ff22 	bl	801ceb8 <sprintf>
 8012074:	484c      	ldr	r0, [pc, #304]	; (80121a8 <CST_cmd+0x994>)
 8012076:	f005 ff5d 	bl	8017f34 <crs_strlen>
 801207a:	4a4b      	ldr	r2, [pc, #300]	; (80121a8 <CST_cmd+0x994>)
 801207c:	b283      	uxth	r3, r0
 801207e:	2101      	movs	r1, #1
 8012080:	2002      	movs	r0, #2
 8012082:	f005 ff95 	bl	8017fb0 <traceIF_itmPrint>
 8012086:	4848      	ldr	r0, [pc, #288]	; (80121a8 <CST_cmd+0x994>)
 8012088:	f005 ff54 	bl	8017f34 <crs_strlen>
 801208c:	4946      	ldr	r1, [pc, #280]	; (80121a8 <CST_cmd+0x994>)
 801208e:	b282      	uxth	r2, r0
 8012090:	2002      	movs	r0, #2
 8012092:	f006 f9cd 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Sim Selected   : %s",
 8012096:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
 801209a:	494e      	ldr	r1, [pc, #312]	; (80121d4 <CST_cmd+0x9c0>)
 801209c:	4842      	ldr	r0, [pc, #264]	; (80121a8 <CST_cmd+0x994>)
 801209e:	aa52      	add	r2, sp, #328	; 0x148
 80120a0:	4413      	add	r3, r2
 80120a2:	f813 3ca3 	ldrb.w	r3, [r3, #-163]
 80120a6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80120aa:	f00a ff05 	bl	801ceb8 <sprintf>
 80120ae:	483e      	ldr	r0, [pc, #248]	; (80121a8 <CST_cmd+0x994>)
 80120b0:	f005 ff40 	bl	8017f34 <crs_strlen>
 80120b4:	4a3c      	ldr	r2, [pc, #240]	; (80121a8 <CST_cmd+0x994>)
 80120b6:	b283      	uxth	r3, r0
 80120b8:	2101      	movs	r1, #1
 80120ba:	2002      	movs	r0, #2
 80120bc:	f005 ff78 	bl	8017fb0 <traceIF_itmPrint>
 80120c0:	4839      	ldr	r0, [pc, #228]	; (80121a8 <CST_cmd+0x994>)
 80120c2:	f005 ff37 	bl	8017f34 <crs_strlen>
 80120c6:	4938      	ldr	r1, [pc, #224]	; (80121a8 <CST_cmd+0x994>)
 80120c8:	b282      	uxth	r2, r0
 80120ca:	2002      	movs	r0, #2
 80120cc:	f006 f9b0 	bl	8018430 <traceIF_uartPrintForce>
					CST_getSimModeStr((uint8_t) p_my_sim_info.sim_status[i],
 80120d0:	f89d 30a6 	ldrb.w	r3, [sp, #166]	; 0xa6
	switch (state) {
 80120d4:	2b08      	cmp	r3, #8
 80120d6:	d809      	bhi.n	80120ec <CST_cmd+0x8d8>
 80120d8:	3b01      	subs	r3, #1
		CST_setTextToStr((uint8_t*) "Did not try any access to that sim slot",
 80120da:	a906      	add	r1, sp, #24
 80120dc:	2b07      	cmp	r3, #7
 80120de:	d80a      	bhi.n	80120f6 <CST_cmd+0x8e2>
 80120e0:	e8df f003 	tbb	[pc, r3]
 80120e4:	8e8c8a54 	.word	0x8e8c8a54
 80120e8:	96949290 	.word	0x96949290
	switch (state) {
 80120ec:	2bff      	cmp	r3, #255	; 0xff
 80120ee:	f000 8091 	beq.w	8012214 <CST_cmd+0xa00>
		__NOP();
 80120f2:	bf00      	nop
		break;
 80120f4:	e002      	b.n	80120fc <CST_cmd+0x8e8>
		CST_setTextToStr((uint8_t*) "SIM initialized and ready", str);
 80120f6:	4838      	ldr	r0, [pc, #224]	; (80121d8 <CST_cmd+0x9c4>)
		CST_setTextToStr((uint8_t*) "SIM status is not yet known", str);
 80120f8:	f7ff fb7a 	bl	80117f0 <CST_setTextToStr>
					PRINT_FORCE("Sim %s : %s",
 80120fc:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8012100:	4936      	ldr	r1, [pc, #216]	; (80121dc <CST_cmd+0x9c8>)
 8012102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012106:	4828      	ldr	r0, [pc, #160]	; (80121a8 <CST_cmd+0x994>)
 8012108:	ab06      	add	r3, sp, #24
 801210a:	f00a fed5 	bl	801ceb8 <sprintf>
 801210e:	4826      	ldr	r0, [pc, #152]	; (80121a8 <CST_cmd+0x994>)
 8012110:	f005 ff10 	bl	8017f34 <crs_strlen>
 8012114:	4a24      	ldr	r2, [pc, #144]	; (80121a8 <CST_cmd+0x994>)
 8012116:	b283      	uxth	r3, r0
 8012118:	2101      	movs	r1, #1
 801211a:	2002      	movs	r0, #2
 801211c:	f005 ff48 	bl	8017fb0 <traceIF_itmPrint>
 8012120:	4821      	ldr	r0, [pc, #132]	; (80121a8 <CST_cmd+0x994>)
 8012122:	f005 ff07 	bl	8017f34 <crs_strlen>
 8012126:	4920      	ldr	r1, [pc, #128]	; (80121a8 <CST_cmd+0x994>)
 8012128:	b282      	uxth	r2, r0
 801212a:	2002      	movs	r0, #2
 801212c:	f006 f980 	bl	8018430 <traceIF_uartPrintForce>
				if (cst_cmd_cellular_params.nfmc_active != 0U) {
 8012130:	4b18      	ldr	r3, [pc, #96]	; (8012194 <CST_cmd+0x980>)
 8012132:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
 8012136:	2b00      	cmp	r3, #0
 8012138:	f43f ab8b 	beq.w	8011852 <CST_cmd+0x3e>
					(void) dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO,
 801213c:	4928      	ldr	r1, [pc, #160]	; (80121e0 <CST_cmd+0x9cc>)
 801213e:	4a29      	ldr	r2, [pc, #164]	; (80121e4 <CST_cmd+0x9d0>)
 8012140:	8809      	ldrh	r1, [r1, #0]
 8012142:	4815      	ldr	r0, [pc, #84]	; (8012198 <CST_cmd+0x984>)
 8012144:	4e28      	ldr	r6, [pc, #160]	; (80121e8 <CST_cmd+0x9d4>)
						PRINT_FORCE("nfmc tempo %ld   : %ld", i + 1U,
 8012146:	4f29      	ldr	r7, [pc, #164]	; (80121ec <CST_cmd+0x9d8>)
 8012148:	4c17      	ldr	r4, [pc, #92]	; (80121a8 <CST_cmd+0x994>)
					(void) dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO,
 801214a:	232c      	movs	r3, #44	; 0x2c
 801214c:	f005 f892 	bl	8017274 <dc_com_read>
					for (i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++) {
 8012150:	2500      	movs	r5, #0
						PRINT_FORCE("nfmc tempo %ld   : %ld", i + 1U,
 8012152:	3501      	adds	r5, #1
 8012154:	f856 3b04 	ldr.w	r3, [r6], #4
 8012158:	462a      	mov	r2, r5
 801215a:	4639      	mov	r1, r7
 801215c:	4620      	mov	r0, r4
 801215e:	f00a feab 	bl	801ceb8 <sprintf>
 8012162:	4620      	mov	r0, r4
 8012164:	f005 fee6 	bl	8017f34 <crs_strlen>
 8012168:	4622      	mov	r2, r4
 801216a:	b283      	uxth	r3, r0
 801216c:	2101      	movs	r1, #1
 801216e:	2002      	movs	r0, #2
 8012170:	f005 ff1e 	bl	8017fb0 <traceIF_itmPrint>
 8012174:	4620      	mov	r0, r4
 8012176:	f005 fedd 	bl	8017f34 <crs_strlen>
 801217a:	4621      	mov	r1, r4
 801217c:	b282      	uxth	r2, r0
 801217e:	2002      	movs	r0, #2
 8012180:	f006 f956 	bl	8018430 <traceIF_uartPrintForce>
					for (i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++) {
 8012184:	2d07      	cmp	r5, #7
 8012186:	d1e4      	bne.n	8012152 <CST_cmd+0x93e>
 8012188:	f7ff bb63 	b.w	8011852 <CST_cmd+0x3e>
		CST_setTextToStr((uint8_t*) "SIM status is not yet known", str);
 801218c:	4818      	ldr	r0, [pc, #96]	; (80121f0 <CST_cmd+0x9dc>)
 801218e:	e7b3      	b.n	80120f8 <CST_cmd+0x8e4>
 8012190:	08028fbd 	.word	0x08028fbd
 8012194:	200039fc 	.word	0x200039fc
 8012198:	20008d7c 	.word	0x20008d7c
 801219c:	2000029c 	.word	0x2000029c
 80121a0:	20000248 	.word	0x20000248
 80121a4:	08028eea 	.word	0x08028eea
 80121a8:	20008ff8 	.word	0x20008ff8
 80121ac:	0802a024 	.word	0x0802a024
 80121b0:	08028f1c 	.word	0x08028f1c
 80121b4:	08028f36 	.word	0x08028f36
 80121b8:	08028f50 	.word	0x08028f50
 80121bc:	08028f6a 	.word	0x08028f6a
 80121c0:	08028e58 	.word	0x08028e58
 80121c4:	08028fc6 	.word	0x08028fc6
 80121c8:	2000023c 	.word	0x2000023c
 80121cc:	2000024c 	.word	0x2000024c
 80121d0:	08028fe4 	.word	0x08028fe4
 80121d4:	08028ffa 	.word	0x08028ffa
 80121d8:	08029010 	.word	0x08029010
 80121dc:	08029164 	.word	0x08029164
 80121e0:	20000242 	.word	0x20000242
 80121e4:	20003bbc 	.word	0x20003bbc
 80121e8:	20003bcc 	.word	0x20003bcc
 80121ec:	08029172 	.word	0x08029172
 80121f0:	0802902a 	.word	0x0802902a
 80121f4:	20003be8 	.word	0x20003be8
		CST_setTextToStr((uint8_t*) "SIM connection ongoing", str);
 80121f8:	4842      	ldr	r0, [pc, #264]	; (8012304 <CST_cmd+0xaf0>)
 80121fa:	e77d      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr((uint8_t*) "SIM locked with PIN or PUK", str);
 80121fc:	4842      	ldr	r0, [pc, #264]	; (8012308 <CST_cmd+0xaf4>)
 80121fe:	e77b      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr(
 8012200:	4842      	ldr	r0, [pc, #264]	; (801230c <CST_cmd+0xaf8>)
 8012202:	e779      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr((uint8_t*) "Sim busy - too many busy rsp during init",
 8012204:	4842      	ldr	r0, [pc, #264]	; (8012310 <CST_cmd+0xafc>)
 8012206:	e777      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr(
 8012208:	4842      	ldr	r0, [pc, #264]	; (8012314 <CST_cmd+0xb00>)
 801220a:	e775      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr((uint8_t*) "Did not try any access to that sim", str);
 801220c:	4842      	ldr	r0, [pc, #264]	; (8012318 <CST_cmd+0xb04>)
 801220e:	e773      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr((uint8_t*) "Did not try any access to that sim slot",
 8012210:	4842      	ldr	r0, [pc, #264]	; (801231c <CST_cmd+0xb08>)
 8012212:	e771      	b.n	80120f8 <CST_cmd+0x8e4>
		CST_setTextToStr((uint8_t*) "Not implemented on this hardware", str);
 8012214:	4842      	ldr	r0, [pc, #264]	; (8012320 <CST_cmd+0xb0c>)
 8012216:	a906      	add	r1, sp, #24
 8012218:	e76e      	b.n	80120f8 <CST_cmd+0x8e4>
					crs_strlen(argv_p[0])) == 0) {
 801221a:	4628      	mov	r0, r5
 801221c:	f005 fe8a 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "valid",
 8012220:	4940      	ldr	r1, [pc, #256]	; (8012324 <CST_cmd+0xb10>)
					crs_strlen(argv_p[0])) == 0) {
 8012222:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "valid",
 8012224:	4628      	mov	r0, r5
 8012226:	f00a fdfb 	bl	801ce20 <memcmp>
 801222a:	b9f8      	cbnz	r0, 801226c <CST_cmd+0xa58>
				if (memcmp((CRC_CHAR_t*) argv_p[1], "netstate",
 801222c:	f8d9 4004 	ldr.w	r4, [r9, #4]
						crs_strlen(argv_p[1])) == 0) {
 8012230:	4620      	mov	r0, r4
 8012232:	f005 fe7f 	bl	8017f34 <crs_strlen>
				if (memcmp((CRC_CHAR_t*) argv_p[1], "netstate",
 8012236:	493c      	ldr	r1, [pc, #240]	; (8012328 <CST_cmd+0xb14>)
						crs_strlen(argv_p[1])) == 0) {
 8012238:	4602      	mov	r2, r0
				if (memcmp((CRC_CHAR_t*) argv_p[1], "netstate",
 801223a:	4620      	mov	r0, r4
 801223c:	f00a fdf0 	bl	801ce20 <memcmp>
 8012240:	2800      	cmp	r0, #0
 8012242:	f47f ab06 	bne.w	8011852 <CST_cmd+0x3e>
					TRACE_VALID("@valid@:cst:netstate:%s\n\r",
 8012246:	f002 fae3 	bl	8014810 <CST_get_state>
 801224a:	4b38      	ldr	r3, [pc, #224]	; (801232c <CST_cmd+0xb18>)
 801224c:	4938      	ldr	r1, [pc, #224]	; (8012330 <CST_cmd+0xb1c>)
 801224e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8012252:	4838      	ldr	r0, [pc, #224]	; (8012334 <CST_cmd+0xb20>)
 8012254:	f00a fe30 	bl	801ceb8 <sprintf>
 8012258:	4836      	ldr	r0, [pc, #216]	; (8012334 <CST_cmd+0xb20>)
 801225a:	f005 fe6b 	bl	8017f34 <crs_strlen>
 801225e:	4935      	ldr	r1, [pc, #212]	; (8012334 <CST_cmd+0xb20>)
 8012260:	b282      	uxth	r2, r0
 8012262:	2008      	movs	r0, #8
					PRINT_FORCE("Network register mode: %d (%s)",
 8012264:	f006 f8e4 	bl	8018430 <traceIF_uartPrintForce>
 8012268:	f7ff baf3 	b.w	8011852 <CST_cmd+0x3e>
					crs_strlen(argv_p[0])) == 0) {
 801226c:	4628      	mov	r0, r5
 801226e:	f005 fe61 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "info",
 8012272:	4931      	ldr	r1, [pc, #196]	; (8012338 <CST_cmd+0xb24>)
					crs_strlen(argv_p[0])) == 0) {
 8012274:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "info",
 8012276:	4628      	mov	r0, r5
 8012278:	f00a fdd2 	bl	801ce20 <memcmp>
 801227c:	2800      	cmp	r0, #0
 801227e:	f040 81b9 	bne.w	80125f4 <CST_cmd+0xde0>
				cellular_get_cellular_info(&p_my_cellular_info);
 8012282:	a81f      	add	r0, sp, #124	; 0x7c
 8012284:	f006 fff8 	bl	8019278 <cellular_get_cellular_info>
				cellular_get_signal_info(&p_my_signal_info);
 8012288:	a803      	add	r0, sp, #12
 801228a:	f006 fff9 	bl	8019280 <cellular_get_signal_info>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 801228e:	492b      	ldr	r1, [pc, #172]	; (801233c <CST_cmd+0xb28>)
 8012290:	4a2b      	ldr	r2, [pc, #172]	; (8012340 <CST_cmd+0xb2c>)
 8012292:	8809      	ldrh	r1, [r1, #0]
 8012294:	482b      	ldr	r0, [pc, #172]	; (8012344 <CST_cmd+0xb30>)
 8012296:	23dc      	movs	r3, #220	; 0xdc
 8012298:	f004 ffec 	bl	8017274 <dc_com_read>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 801229c:	492a      	ldr	r1, [pc, #168]	; (8012348 <CST_cmd+0xb34>)
 801229e:	4a2b      	ldr	r2, [pc, #172]	; (801234c <CST_cmd+0xb38>)
 80122a0:	8809      	ldrh	r1, [r1, #0]
 80122a2:	4828      	ldr	r0, [pc, #160]	; (8012344 <CST_cmd+0xb30>)
 80122a4:	2320      	movs	r3, #32
 80122a6:	f004 ffe5 	bl	8017274 <dc_com_read>
				PRINT_FORCE("Cellular Service Infos ")
 80122aa:	4929      	ldr	r1, [pc, #164]	; (8012350 <CST_cmd+0xb3c>)
 80122ac:	4829      	ldr	r0, [pc, #164]	; (8012354 <CST_cmd+0xb40>)
 80122ae:	f00a fe73 	bl	801cf98 <strcpy>
 80122b2:	4828      	ldr	r0, [pc, #160]	; (8012354 <CST_cmd+0xb40>)
 80122b4:	f005 fe3e 	bl	8017f34 <crs_strlen>
 80122b8:	4a26      	ldr	r2, [pc, #152]	; (8012354 <CST_cmd+0xb40>)
 80122ba:	b283      	uxth	r3, r0
 80122bc:	2101      	movs	r1, #1
 80122be:	2002      	movs	r0, #2
 80122c0:	f005 fe76 	bl	8017fb0 <traceIF_itmPrint>
 80122c4:	4823      	ldr	r0, [pc, #140]	; (8012354 <CST_cmd+0xb40>)
 80122c6:	f005 fe35 	bl	8017f34 <crs_strlen>
 80122ca:	4922      	ldr	r1, [pc, #136]	; (8012354 <CST_cmd+0xb40>)
 80122cc:	b282      	uxth	r2, r0
 80122ce:	2002      	movs	r0, #2
 80122d0:	f006 f8ae 	bl	8018430 <traceIF_uartPrintForce>
				CST_getModemStateStr((uint8_t) p_my_cellular_info.modem_state,
 80122d4:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
	switch (state) {
 80122d8:	2b08      	cmp	r3, #8
 80122da:	d80d      	bhi.n	80122f8 <CST_cmd+0xae4>
 80122dc:	b17b      	cbz	r3, 80122fe <CST_cmd+0xaea>
 80122de:	3b02      	subs	r3, #2
		CST_setTextToStr((uint8_t*) "Modem is in FOTA update", str);
 80122e0:	a906      	add	r1, sp, #24
 80122e2:	2b06      	cmp	r3, #6
 80122e4:	d838      	bhi.n	8012358 <CST_cmd+0xb44>
 80122e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80122ea:	013f      	.short	0x013f
 80122ec:	01430141 	.word	0x01430141
 80122f0:	01470145 	.word	0x01470145
 80122f4:	014b0149 	.word	0x014b0149
	switch (state) {
 80122f8:	2bff      	cmp	r3, #255	; 0xff
 80122fa:	f000 8143 	beq.w	8012584 <CST_cmd+0xd70>
		__NOP();
 80122fe:	bf00      	nop
		break;
 8012300:	e02d      	b.n	801235e <CST_cmd+0xb4a>
 8012302:	bf00      	nop
 8012304:	08029046 	.word	0x08029046
 8012308:	0802905d 	.word	0x0802905d
 801230c:	08029078 	.word	0x08029078
 8012310:	080290a4 	.word	0x080290a4
 8012314:	080290cd 	.word	0x080290cd
 8012318:	080290f8 	.word	0x080290f8
 801231c:	0802911b 	.word	0x0802911b
 8012320:	08029143 	.word	0x08029143
 8012324:	0802918b 	.word	0x0802918b
 8012328:	08029191 	.word	0x08029191
 801232c:	2000024c 	.word	0x2000024c
 8012330:	0802919a 	.word	0x0802919a
 8012334:	200095f8 	.word	0x200095f8
 8012338:	080291b4 	.word	0x080291b4
 801233c:	20000240 	.word	0x20000240
 8012340:	20003920 	.word	0x20003920
 8012344:	20008d7c 	.word	0x20008d7c
 8012348:	20000248 	.word	0x20000248
 801234c:	20003be8 	.word	0x20003be8
 8012350:	080291b9 	.word	0x080291b9
 8012354:	20008ff8 	.word	0x20008ff8
		CST_setTextToStr((uint8_t*) "Modem powered on", str);
 8012358:	488c      	ldr	r0, [pc, #560]	; (801258c <CST_cmd+0xd78>)
		CST_setTextToStr((uint8_t*) "Modem started and SIM is connected", str);
 801235a:	f7ff fa49 	bl	80117f0 <CST_setTextToStr>
				PRINT_FORCE("Modem state          : %d (%s)",
 801235e:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8012362:	498b      	ldr	r1, [pc, #556]	; (8012590 <CST_cmd+0xd7c>)
 8012364:	488b      	ldr	r0, [pc, #556]	; (8012594 <CST_cmd+0xd80>)
 8012366:	ab06      	add	r3, sp, #24
 8012368:	f00a fda6 	bl	801ceb8 <sprintf>
 801236c:	4889      	ldr	r0, [pc, #548]	; (8012594 <CST_cmd+0xd80>)
 801236e:	f005 fde1 	bl	8017f34 <crs_strlen>
 8012372:	4a88      	ldr	r2, [pc, #544]	; (8012594 <CST_cmd+0xd80>)
 8012374:	b283      	uxth	r3, r0
 8012376:	2101      	movs	r1, #1
 8012378:	2002      	movs	r0, #2
 801237a:	f005 fe19 	bl	8017fb0 <traceIF_itmPrint>
 801237e:	4885      	ldr	r0, [pc, #532]	; (8012594 <CST_cmd+0xd80>)
 8012380:	f005 fdd8 	bl	8017f34 <crs_strlen>
 8012384:	4983      	ldr	r1, [pc, #524]	; (8012594 <CST_cmd+0xd80>)
 8012386:	b282      	uxth	r2, r0
 8012388:	2002      	movs	r0, #2
 801238a:	f006 f851 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Signal Quality       : %d",
 801238e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012392:	4981      	ldr	r1, [pc, #516]	; (8012598 <CST_cmd+0xd84>)
 8012394:	487f      	ldr	r0, [pc, #508]	; (8012594 <CST_cmd+0xd80>)
 8012396:	f00a fd8f 	bl	801ceb8 <sprintf>
 801239a:	487e      	ldr	r0, [pc, #504]	; (8012594 <CST_cmd+0xd80>)
 801239c:	f005 fdca 	bl	8017f34 <crs_strlen>
 80123a0:	4a7c      	ldr	r2, [pc, #496]	; (8012594 <CST_cmd+0xd80>)
 80123a2:	b283      	uxth	r3, r0
 80123a4:	2101      	movs	r1, #1
 80123a6:	2002      	movs	r0, #2
 80123a8:	f005 fe02 	bl	8017fb0 <traceIF_itmPrint>
 80123ac:	4879      	ldr	r0, [pc, #484]	; (8012594 <CST_cmd+0xd80>)
 80123ae:	f005 fdc1 	bl	8017f34 <crs_strlen>
 80123b2:	4978      	ldr	r1, [pc, #480]	; (8012594 <CST_cmd+0xd80>)
 80123b4:	b282      	uxth	r2, r0
 80123b6:	2002      	movs	r0, #2
 80123b8:	f006 f83a 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Signal level(dBm)    : %ld",
 80123bc:	9a04      	ldr	r2, [sp, #16]
 80123be:	4977      	ldr	r1, [pc, #476]	; (801259c <CST_cmd+0xd88>)
 80123c0:	4874      	ldr	r0, [pc, #464]	; (8012594 <CST_cmd+0xd80>)
 80123c2:	f00a fd79 	bl	801ceb8 <sprintf>
 80123c6:	4873      	ldr	r0, [pc, #460]	; (8012594 <CST_cmd+0xd80>)
 80123c8:	f005 fdb4 	bl	8017f34 <crs_strlen>
 80123cc:	4a71      	ldr	r2, [pc, #452]	; (8012594 <CST_cmd+0xd80>)
 80123ce:	b283      	uxth	r3, r0
 80123d0:	2101      	movs	r1, #1
 80123d2:	2002      	movs	r0, #2
 80123d4:	f005 fdec 	bl	8017fb0 <traceIF_itmPrint>
 80123d8:	486e      	ldr	r0, [pc, #440]	; (8012594 <CST_cmd+0xd80>)
 80123da:	f005 fdab 	bl	8017f34 <crs_strlen>
 80123de:	496d      	ldr	r1, [pc, #436]	; (8012594 <CST_cmd+0xd80>)
 80123e0:	b282      	uxth	r2, r0
 80123e2:	2002      	movs	r0, #2
 80123e4:	f006 f824 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Operator name        : %s",
 80123e8:	4a6d      	ldr	r2, [pc, #436]	; (80125a0 <CST_cmd+0xd8c>)
 80123ea:	496e      	ldr	r1, [pc, #440]	; (80125a4 <CST_cmd+0xd90>)
 80123ec:	4869      	ldr	r0, [pc, #420]	; (8012594 <CST_cmd+0xd80>)
 80123ee:	f00a fd63 	bl	801ceb8 <sprintf>
 80123f2:	4868      	ldr	r0, [pc, #416]	; (8012594 <CST_cmd+0xd80>)
 80123f4:	f005 fd9e 	bl	8017f34 <crs_strlen>
 80123f8:	4a66      	ldr	r2, [pc, #408]	; (8012594 <CST_cmd+0xd80>)
 80123fa:	b283      	uxth	r3, r0
 80123fc:	2101      	movs	r1, #1
 80123fe:	2002      	movs	r0, #2
 8012400:	f005 fdd6 	bl	8017fb0 <traceIF_itmPrint>
 8012404:	4863      	ldr	r0, [pc, #396]	; (8012594 <CST_cmd+0xd80>)
 8012406:	f005 fd95 	bl	8017f34 <crs_strlen>
 801240a:	4962      	ldr	r1, [pc, #392]	; (8012594 <CST_cmd+0xd80>)
 801240c:	b282      	uxth	r2, r0
 801240e:	2002      	movs	r0, #2
 8012410:	f006 f80e 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("IMEI                 : %s",
 8012414:	4964      	ldr	r1, [pc, #400]	; (80125a8 <CST_cmd+0xd94>)
 8012416:	485f      	ldr	r0, [pc, #380]	; (8012594 <CST_cmd+0xd80>)
 8012418:	f20d 1207 	addw	r2, sp, #263	; 0x107
 801241c:	f00a fd4c 	bl	801ceb8 <sprintf>
 8012420:	485c      	ldr	r0, [pc, #368]	; (8012594 <CST_cmd+0xd80>)
 8012422:	f005 fd87 	bl	8017f34 <crs_strlen>
 8012426:	4a5b      	ldr	r2, [pc, #364]	; (8012594 <CST_cmd+0xd80>)
 8012428:	b283      	uxth	r3, r0
 801242a:	2101      	movs	r1, #1
 801242c:	2002      	movs	r0, #2
 801242e:	f005 fdbf 	bl	8017fb0 <traceIF_itmPrint>
 8012432:	4858      	ldr	r0, [pc, #352]	; (8012594 <CST_cmd+0xd80>)
 8012434:	f005 fd7e 	bl	8017f34 <crs_strlen>
 8012438:	4956      	ldr	r1, [pc, #344]	; (8012594 <CST_cmd+0xd80>)
 801243a:	b282      	uxth	r2, r0
 801243c:	2002      	movs	r0, #2
 801243e:	f005 fff7 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Manuf name           : %s",
 8012442:	495a      	ldr	r1, [pc, #360]	; (80125ac <CST_cmd+0xd98>)
 8012444:	4853      	ldr	r0, [pc, #332]	; (8012594 <CST_cmd+0xd80>)
 8012446:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
 801244a:	f00a fd35 	bl	801ceb8 <sprintf>
 801244e:	4851      	ldr	r0, [pc, #324]	; (8012594 <CST_cmd+0xd80>)
 8012450:	f005 fd70 	bl	8017f34 <crs_strlen>
 8012454:	4a4f      	ldr	r2, [pc, #316]	; (8012594 <CST_cmd+0xd80>)
 8012456:	b283      	uxth	r3, r0
 8012458:	2101      	movs	r1, #1
 801245a:	2002      	movs	r0, #2
 801245c:	f005 fda8 	bl	8017fb0 <traceIF_itmPrint>
 8012460:	484c      	ldr	r0, [pc, #304]	; (8012594 <CST_cmd+0xd80>)
 8012462:	f005 fd67 	bl	8017f34 <crs_strlen>
 8012466:	494b      	ldr	r1, [pc, #300]	; (8012594 <CST_cmd+0xd80>)
 8012468:	b282      	uxth	r2, r0
 801246a:	2002      	movs	r0, #2
 801246c:	f005 ffe0 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Model                : %s",
 8012470:	494f      	ldr	r1, [pc, #316]	; (80125b0 <CST_cmd+0xd9c>)
 8012472:	4848      	ldr	r0, [pc, #288]	; (8012594 <CST_cmd+0xd80>)
 8012474:	f10d 02a1 	add.w	r2, sp, #161	; 0xa1
 8012478:	f00a fd1e 	bl	801ceb8 <sprintf>
 801247c:	4845      	ldr	r0, [pc, #276]	; (8012594 <CST_cmd+0xd80>)
 801247e:	f005 fd59 	bl	8017f34 <crs_strlen>
 8012482:	4a44      	ldr	r2, [pc, #272]	; (8012594 <CST_cmd+0xd80>)
 8012484:	b283      	uxth	r3, r0
 8012486:	2101      	movs	r1, #1
 8012488:	2002      	movs	r0, #2
 801248a:	f005 fd91 	bl	8017fb0 <traceIF_itmPrint>
 801248e:	4841      	ldr	r0, [pc, #260]	; (8012594 <CST_cmd+0xd80>)
 8012490:	f005 fd50 	bl	8017f34 <crs_strlen>
 8012494:	493f      	ldr	r1, [pc, #252]	; (8012594 <CST_cmd+0xd80>)
 8012496:	b282      	uxth	r2, r0
 8012498:	2002      	movs	r0, #2
 801249a:	f005 ffc9 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Revision             : %s",
 801249e:	4945      	ldr	r1, [pc, #276]	; (80125b4 <CST_cmd+0xda0>)
 80124a0:	483c      	ldr	r0, [pc, #240]	; (8012594 <CST_cmd+0xd80>)
 80124a2:	f10d 02c3 	add.w	r2, sp, #195	; 0xc3
 80124a6:	f00a fd07 	bl	801ceb8 <sprintf>
 80124aa:	483a      	ldr	r0, [pc, #232]	; (8012594 <CST_cmd+0xd80>)
 80124ac:	f005 fd42 	bl	8017f34 <crs_strlen>
 80124b0:	4a38      	ldr	r2, [pc, #224]	; (8012594 <CST_cmd+0xd80>)
 80124b2:	b283      	uxth	r3, r0
 80124b4:	2101      	movs	r1, #1
 80124b6:	2002      	movs	r0, #2
 80124b8:	f005 fd7a 	bl	8017fb0 <traceIF_itmPrint>
 80124bc:	4835      	ldr	r0, [pc, #212]	; (8012594 <CST_cmd+0xd80>)
 80124be:	f005 fd39 	bl	8017f34 <crs_strlen>
 80124c2:	4934      	ldr	r1, [pc, #208]	; (8012594 <CST_cmd+0xd80>)
 80124c4:	b282      	uxth	r2, r0
 80124c6:	2002      	movs	r0, #2
 80124c8:	f005 ffb2 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Serial Number        : %s",
 80124cc:	493a      	ldr	r1, [pc, #232]	; (80125b8 <CST_cmd+0xda4>)
 80124ce:	4831      	ldr	r0, [pc, #196]	; (8012594 <CST_cmd+0xd80>)
 80124d0:	f10d 02e5 	add.w	r2, sp, #229	; 0xe5
 80124d4:	f00a fcf0 	bl	801ceb8 <sprintf>
 80124d8:	482e      	ldr	r0, [pc, #184]	; (8012594 <CST_cmd+0xd80>)
 80124da:	f005 fd2b 	bl	8017f34 <crs_strlen>
 80124de:	4a2d      	ldr	r2, [pc, #180]	; (8012594 <CST_cmd+0xd80>)
 80124e0:	b283      	uxth	r3, r0
 80124e2:	2101      	movs	r1, #1
 80124e4:	2002      	movs	r0, #2
 80124e6:	f005 fd63 	bl	8017fb0 <traceIF_itmPrint>
 80124ea:	482a      	ldr	r0, [pc, #168]	; (8012594 <CST_cmd+0xd80>)
 80124ec:	f005 fd22 	bl	8017f34 <crs_strlen>
 80124f0:	4928      	ldr	r1, [pc, #160]	; (8012594 <CST_cmd+0xd80>)
 80124f2:	b282      	uxth	r2, r0
 80124f4:	2002      	movs	r0, #2
 80124f6:	f005 ff9b 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("ICCID                : %s",
 80124fa:	4a30      	ldr	r2, [pc, #192]	; (80125bc <CST_cmd+0xda8>)
 80124fc:	4930      	ldr	r1, [pc, #192]	; (80125c0 <CST_cmd+0xdac>)
 80124fe:	4825      	ldr	r0, [pc, #148]	; (8012594 <CST_cmd+0xd80>)
 8012500:	f00a fcda 	bl	801ceb8 <sprintf>
 8012504:	4823      	ldr	r0, [pc, #140]	; (8012594 <CST_cmd+0xd80>)
 8012506:	f005 fd15 	bl	8017f34 <crs_strlen>
 801250a:	4a22      	ldr	r2, [pc, #136]	; (8012594 <CST_cmd+0xd80>)
 801250c:	b283      	uxth	r3, r0
 801250e:	2101      	movs	r1, #1
 8012510:	2002      	movs	r0, #2
 8012512:	f005 fd4d 	bl	8017fb0 <traceIF_itmPrint>
 8012516:	481f      	ldr	r0, [pc, #124]	; (8012594 <CST_cmd+0xd80>)
 8012518:	f005 fd0c 	bl	8017f34 <crs_strlen>
 801251c:	491d      	ldr	r1, [pc, #116]	; (8012594 <CST_cmd+0xd80>)
 801251e:	b282      	uxth	r2, r0
 8012520:	2002      	movs	r0, #2
 8012522:	f005 ff85 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("IMSI                 : %s", cst_cmd_sim_info.imsi)
 8012526:	4a27      	ldr	r2, [pc, #156]	; (80125c4 <CST_cmd+0xdb0>)
 8012528:	4927      	ldr	r1, [pc, #156]	; (80125c8 <CST_cmd+0xdb4>)
 801252a:	481a      	ldr	r0, [pc, #104]	; (8012594 <CST_cmd+0xd80>)
 801252c:	f00a fcc4 	bl	801ceb8 <sprintf>
 8012530:	4818      	ldr	r0, [pc, #96]	; (8012594 <CST_cmd+0xd80>)
 8012532:	f005 fcff 	bl	8017f34 <crs_strlen>
 8012536:	4a17      	ldr	r2, [pc, #92]	; (8012594 <CST_cmd+0xd80>)
 8012538:	b283      	uxth	r3, r0
 801253a:	2101      	movs	r1, #1
 801253c:	2002      	movs	r0, #2
 801253e:	f005 fd37 	bl	8017fb0 <traceIF_itmPrint>
 8012542:	4814      	ldr	r0, [pc, #80]	; (8012594 <CST_cmd+0xd80>)
 8012544:	f005 fcf6 	bl	8017f34 <crs_strlen>
 8012548:	4912      	ldr	r1, [pc, #72]	; (8012594 <CST_cmd+0xd80>)
 801254a:	b282      	uxth	r2, r0
 801254c:	2002      	movs	r0, #2
 801254e:	f005 ff6f 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Network register mode: %d (%s)",
 8012552:	f89d 2014 	ldrb.w	r2, [sp, #20]
					PRINT_FORCE("Network register mode: %d (%s)",
 8012556:	4b1d      	ldr	r3, [pc, #116]	; (80125cc <CST_cmd+0xdb8>)
 8012558:	491d      	ldr	r1, [pc, #116]	; (80125d0 <CST_cmd+0xdbc>)
 801255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801255e:	480d      	ldr	r0, [pc, #52]	; (8012594 <CST_cmd+0xd80>)
 8012560:	f00a fcaa 	bl	801ceb8 <sprintf>
 8012564:	f7ff b9ba 	b.w	80118dc <CST_cmd+0xc8>
		CST_setTextToStr((uint8_t*) "Modem started and SIM is connected", str);
 8012568:	481a      	ldr	r0, [pc, #104]	; (80125d4 <CST_cmd+0xdc0>)
 801256a:	e6f6      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem is searching network", str);
 801256c:	481a      	ldr	r0, [pc, #104]	; (80125d8 <CST_cmd+0xdc4>)
 801256e:	e6f4      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem registered on network", str);
 8012570:	481a      	ldr	r0, [pc, #104]	; (80125dc <CST_cmd+0xdc8>)
 8012572:	e6f2      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem started and data is ready", str);
 8012574:	481a      	ldr	r0, [pc, #104]	; (80125e0 <CST_cmd+0xdcc>)
 8012576:	e6f0      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem in flight mode", str);
 8012578:	481a      	ldr	r0, [pc, #104]	; (80125e4 <CST_cmd+0xdd0>)
 801257a:	e6ee      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem is rebooting", str);
 801257c:	481a      	ldr	r0, [pc, #104]	; (80125e8 <CST_cmd+0xdd4>)
 801257e:	e6ec      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem is in FOTA update", str);
 8012580:	481a      	ldr	r0, [pc, #104]	; (80125ec <CST_cmd+0xdd8>)
 8012582:	e6ea      	b.n	801235a <CST_cmd+0xb46>
		CST_setTextToStr((uint8_t*) "Modem not started / power off", str);
 8012584:	481a      	ldr	r0, [pc, #104]	; (80125f0 <CST_cmd+0xddc>)
 8012586:	a906      	add	r1, sp, #24
 8012588:	e6e7      	b.n	801235a <CST_cmd+0xb46>
 801258a:	bf00      	nop
 801258c:	080291d3 	.word	0x080291d3
 8012590:	080292bc 	.word	0x080292bc
 8012594:	20008ff8 	.word	0x20008ff8
 8012598:	080292dd 	.word	0x080292dd
 801259c:	080292f9 	.word	0x080292f9
 80125a0:	2000393b 	.word	0x2000393b
 80125a4:	08029316 	.word	0x08029316
 80125a8:	08029332 	.word	0x08029332
 80125ac:	0802934e 	.word	0x0802934e
 80125b0:	0802936a 	.word	0x0802936a
 80125b4:	08029386 	.word	0x08029386
 80125b8:	080293a2 	.word	0x080293a2
 80125bc:	200039e0 	.word	0x200039e0
 80125c0:	080293be 	.word	0x080293be
 80125c4:	20003bf1 	.word	0x20003bf1
 80125c8:	080293da 	.word	0x080293da
 80125cc:	0802a040 	.word	0x0802a040
 80125d0:	080293f6 	.word	0x080293f6
 80125d4:	080291e4 	.word	0x080291e4
 80125d8:	08029207 	.word	0x08029207
 80125dc:	08029222 	.word	0x08029222
 80125e0:	0802923e 	.word	0x0802923e
 80125e4:	0802925e 	.word	0x0802925e
 80125e8:	08029273 	.word	0x08029273
 80125ec:	08029286 	.word	0x08029286
 80125f0:	0802929e 	.word	0x0802929e
					crs_strlen(argv_p[0])) == 0) {
 80125f4:	4628      	mov	r0, r5
 80125f6:	f005 fc9d 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "config",
 80125fa:	49c6      	ldr	r1, [pc, #792]	; (8012914 <CST_cmd+0x1100>)
					crs_strlen(argv_p[0])) == 0) {
 80125fc:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "config",
 80125fe:	4628      	mov	r0, r5
 8012600:	f00a fc0e 	bl	801ce20 <memcmp>
 8012604:	4606      	mov	r6, r0
 8012606:	2800      	cmp	r0, #0
 8012608:	f040 81ba 	bne.w	8012980 <CST_cmd+0x116c>
				PRINT_FORCE("Cellular Service Task Config")
 801260c:	49c2      	ldr	r1, [pc, #776]	; (8012918 <CST_cmd+0x1104>)
 801260e:	48c3      	ldr	r0, [pc, #780]	; (801291c <CST_cmd+0x1108>)
 8012610:	4fc3      	ldr	r7, [pc, #780]	; (8012920 <CST_cmd+0x110c>)
					PRINT_FORCE("Sim Slot             : %ld (%s)", i,
 8012612:	f8df 9360 	ldr.w	r9, [pc, #864]	; 8012974 <CST_cmd+0x1160>
 8012616:	f8df a360 	ldr.w	sl, [pc, #864]	; 8012978 <CST_cmd+0x1164>
 801261a:	4cc0      	ldr	r4, [pc, #768]	; (801291c <CST_cmd+0x1108>)
				PRINT_FORCE("Cellular Service Task Config")
 801261c:	f00a fcbc 	bl	801cf98 <strcpy>
 8012620:	48be      	ldr	r0, [pc, #760]	; (801291c <CST_cmd+0x1108>)
 8012622:	f005 fc87 	bl	8017f34 <crs_strlen>
 8012626:	4abd      	ldr	r2, [pc, #756]	; (801291c <CST_cmd+0x1108>)
 8012628:	b283      	uxth	r3, r0
 801262a:	2101      	movs	r1, #1
 801262c:	2002      	movs	r0, #2
 801262e:	f005 fcbf 	bl	8017fb0 <traceIF_itmPrint>
 8012632:	48ba      	ldr	r0, [pc, #744]	; (801291c <CST_cmd+0x1108>)
 8012634:	f005 fc7e 	bl	8017f34 <crs_strlen>
 8012638:	49b8      	ldr	r1, [pc, #736]	; (801291c <CST_cmd+0x1108>)
 801263a:	b282      	uxth	r2, r0
 801263c:	2002      	movs	r0, #2
 801263e:	f005 fef7 	bl	8018430 <traceIF_uartPrintForce>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8012642:	49b8      	ldr	r1, [pc, #736]	; (8012924 <CST_cmd+0x1110>)
 8012644:	4ab6      	ldr	r2, [pc, #728]	; (8012920 <CST_cmd+0x110c>)
 8012646:	8809      	ldrh	r1, [r1, #0]
 8012648:	48b7      	ldr	r0, [pc, #732]	; (8012928 <CST_cmd+0x1114>)
 801264a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 801264e:	f004 fe11 	bl	8017274 <dc_com_read>
				for (i = 0; i < cst_cmd_cellular_params.sim_slot_nb; i++) {
 8012652:	463d      	mov	r5, r7
 8012654:	7a6b      	ldrb	r3, [r5, #9]
 8012656:	42b3      	cmp	r3, r6
 8012658:	f107 0868 	add.w	r8, r7, #104	; 0x68
 801265c:	f200 80c0 	bhi.w	80127e0 <CST_cmd+0xfcc>
				PRINT_FORCE("Target state         : %s",
 8012660:	4bb2      	ldr	r3, [pc, #712]	; (801292c <CST_cmd+0x1118>)
 8012662:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
 8012666:	49b2      	ldr	r1, [pc, #712]	; (8012930 <CST_cmd+0x111c>)
 8012668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801266c:	48ab      	ldr	r0, [pc, #684]	; (801291c <CST_cmd+0x1108>)
 801266e:	f00a fc23 	bl	801ceb8 <sprintf>
 8012672:	48aa      	ldr	r0, [pc, #680]	; (801291c <CST_cmd+0x1108>)
 8012674:	f005 fc5e 	bl	8017f34 <crs_strlen>
 8012678:	4aa8      	ldr	r2, [pc, #672]	; (801291c <CST_cmd+0x1108>)
 801267a:	b283      	uxth	r3, r0
 801267c:	2101      	movs	r1, #1
 801267e:	2002      	movs	r0, #2
 8012680:	f005 fc96 	bl	8017fb0 <traceIF_itmPrint>
 8012684:	48a5      	ldr	r0, [pc, #660]	; (801291c <CST_cmd+0x1108>)
 8012686:	f005 fc55 	bl	8017f34 <crs_strlen>
 801268a:	49a4      	ldr	r1, [pc, #656]	; (801291c <CST_cmd+0x1108>)
 801268c:	b282      	uxth	r2, r0
 801268e:	2002      	movs	r0, #2
 8012690:	f005 fece 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("Attachment timeout   : %ld ms",
 8012694:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8012698:	49a6      	ldr	r1, [pc, #664]	; (8012934 <CST_cmd+0x1120>)
 801269a:	48a0      	ldr	r0, [pc, #640]	; (801291c <CST_cmd+0x1108>)
 801269c:	f00a fc0c 	bl	801ceb8 <sprintf>
 80126a0:	489e      	ldr	r0, [pc, #632]	; (801291c <CST_cmd+0x1108>)
 80126a2:	f005 fc47 	bl	8017f34 <crs_strlen>
 80126a6:	4a9d      	ldr	r2, [pc, #628]	; (801291c <CST_cmd+0x1108>)
 80126a8:	b283      	uxth	r3, r0
 80126aa:	2101      	movs	r1, #1
 80126ac:	2002      	movs	r0, #2
 80126ae:	f005 fc7f 	bl	8017fb0 <traceIF_itmPrint>
 80126b2:	489a      	ldr	r0, [pc, #616]	; (801291c <CST_cmd+0x1108>)
 80126b4:	f005 fc3e 	bl	8017f34 <crs_strlen>
 80126b8:	4998      	ldr	r1, [pc, #608]	; (801291c <CST_cmd+0x1108>)
 80126ba:	b282      	uxth	r2, r0
 80126bc:	2002      	movs	r0, #2
 80126be:	f005 feb7 	bl	8018430 <traceIF_uartPrintForce>
				PRINT_FORCE("nfmc mode            : %s",
 80126c2:	4b9d      	ldr	r3, [pc, #628]	; (8012938 <CST_cmd+0x1124>)
 80126c4:	f895 218d 	ldrb.w	r2, [r5, #397]	; 0x18d
 80126c8:	499c      	ldr	r1, [pc, #624]	; (801293c <CST_cmd+0x1128>)
 80126ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80126ce:	4893      	ldr	r0, [pc, #588]	; (801291c <CST_cmd+0x1108>)
 80126d0:	f00a fbf2 	bl	801ceb8 <sprintf>
 80126d4:	4891      	ldr	r0, [pc, #580]	; (801291c <CST_cmd+0x1108>)
 80126d6:	f005 fc2d 	bl	8017f34 <crs_strlen>
 80126da:	4a90      	ldr	r2, [pc, #576]	; (801291c <CST_cmd+0x1108>)
 80126dc:	b283      	uxth	r3, r0
 80126de:	2101      	movs	r1, #1
 80126e0:	2002      	movs	r0, #2
 80126e2:	f005 fc65 	bl	8017fb0 <traceIF_itmPrint>
 80126e6:	488d      	ldr	r0, [pc, #564]	; (801291c <CST_cmd+0x1108>)
 80126e8:	f005 fc24 	bl	8017f34 <crs_strlen>
 80126ec:	498b      	ldr	r1, [pc, #556]	; (801291c <CST_cmd+0x1108>)
 80126ee:	b282      	uxth	r2, r0
 80126f0:	2002      	movs	r0, #2
 80126f2:	f005 fe9d 	bl	8018430 <traceIF_uartPrintForce>
				if (cst_cmd_cellular_params.nfmc_active != 0U) {
 80126f6:	f895 318d 	ldrb.w	r3, [r5, #397]	; 0x18d
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f040 80e9 	bne.w	80128d2 <CST_cmd+0x10be>
				PRINT_FORCE("Network register mode: %d = %s",
 8012700:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
 8012704:	4b8e      	ldr	r3, [pc, #568]	; (8012940 <CST_cmd+0x112c>)
 8012706:	498f      	ldr	r1, [pc, #572]	; (8012944 <CST_cmd+0x1130>)
 8012708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801270c:	4883      	ldr	r0, [pc, #524]	; (801291c <CST_cmd+0x1108>)
 801270e:	f00a fbd3 	bl	801ceb8 <sprintf>
 8012712:	4882      	ldr	r0, [pc, #520]	; (801291c <CST_cmd+0x1108>)
 8012714:	f005 fc0e 	bl	8017f34 <crs_strlen>
 8012718:	4a80      	ldr	r2, [pc, #512]	; (801291c <CST_cmd+0x1108>)
 801271a:	b283      	uxth	r3, r0
 801271c:	2101      	movs	r1, #1
 801271e:	2002      	movs	r0, #2
 8012720:	f005 fc46 	bl	8017fb0 <traceIF_itmPrint>
 8012724:	487d      	ldr	r0, [pc, #500]	; (801291c <CST_cmd+0x1108>)
 8012726:	f005 fc05 	bl	8017f34 <crs_strlen>
 801272a:	497c      	ldr	r1, [pc, #496]	; (801291c <CST_cmd+0x1108>)
 801272c:	b282      	uxth	r2, r0
 801272e:	2002      	movs	r0, #2
 8012730:	f005 fe7e 	bl	8018430 <traceIF_uartPrintForce>
				if (cst_cmd_cellular_params.operator_selector.network_reg_mode
 8012734:	f895 3148 	ldrb.w	r3, [r5, #328]	; 0x148
 8012738:	2b00      	cmp	r3, #0
 801273a:	d02f      	beq.n	801279c <CST_cmd+0xf88>
					PRINT_FORCE("Operator name format: %d (%s)",
 801273c:	f895 2149 	ldrb.w	r2, [r5, #329]	; 0x149
 8012740:	4b81      	ldr	r3, [pc, #516]	; (8012948 <CST_cmd+0x1134>)
 8012742:	4982      	ldr	r1, [pc, #520]	; (801294c <CST_cmd+0x1138>)
 8012744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012748:	4874      	ldr	r0, [pc, #464]	; (801291c <CST_cmd+0x1108>)
 801274a:	f00a fbb5 	bl	801ceb8 <sprintf>
 801274e:	4873      	ldr	r0, [pc, #460]	; (801291c <CST_cmd+0x1108>)
 8012750:	f005 fbf0 	bl	8017f34 <crs_strlen>
 8012754:	4a71      	ldr	r2, [pc, #452]	; (801291c <CST_cmd+0x1108>)
 8012756:	b283      	uxth	r3, r0
 8012758:	2101      	movs	r1, #1
 801275a:	2002      	movs	r0, #2
 801275c:	f005 fc28 	bl	8017fb0 <traceIF_itmPrint>
 8012760:	486e      	ldr	r0, [pc, #440]	; (801291c <CST_cmd+0x1108>)
 8012762:	f005 fbe7 	bl	8017f34 <crs_strlen>
 8012766:	496d      	ldr	r1, [pc, #436]	; (801291c <CST_cmd+0x1108>)
 8012768:	b282      	uxth	r2, r0
 801276a:	2002      	movs	r0, #2
 801276c:	f005 fe60 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("Operator name: %s\n\r",
 8012770:	4a77      	ldr	r2, [pc, #476]	; (8012950 <CST_cmd+0x113c>)
 8012772:	4978      	ldr	r1, [pc, #480]	; (8012954 <CST_cmd+0x1140>)
 8012774:	4869      	ldr	r0, [pc, #420]	; (801291c <CST_cmd+0x1108>)
 8012776:	f00a fb9f 	bl	801ceb8 <sprintf>
 801277a:	4868      	ldr	r0, [pc, #416]	; (801291c <CST_cmd+0x1108>)
 801277c:	f005 fbda 	bl	8017f34 <crs_strlen>
 8012780:	4a66      	ldr	r2, [pc, #408]	; (801291c <CST_cmd+0x1108>)
 8012782:	b283      	uxth	r3, r0
 8012784:	2101      	movs	r1, #1
 8012786:	2002      	movs	r0, #2
 8012788:	f005 fc12 	bl	8017fb0 <traceIF_itmPrint>
 801278c:	4863      	ldr	r0, [pc, #396]	; (801291c <CST_cmd+0x1108>)
 801278e:	f005 fbd1 	bl	8017f34 <crs_strlen>
 8012792:	4962      	ldr	r1, [pc, #392]	; (801291c <CST_cmd+0x1108>)
 8012794:	b282      	uxth	r2, r0
 8012796:	2002      	movs	r0, #2
 8012798:	f005 fe4a 	bl	8018430 <traceIF_uartPrintForce>
				if (cst_cmd_cellular_params.operator_selector.access_techno_present
 801279c:	f895 418b 	ldrb.w	r4, [r5, #395]	; 0x18b
					PRINT_FORCE("Access techno present: Not present");
 80127a0:	485e      	ldr	r0, [pc, #376]	; (801291c <CST_cmd+0x1108>)
				if (cst_cmd_cellular_params.operator_selector.access_techno_present
 80127a2:	2c01      	cmp	r4, #1
					PRINT_FORCE("Access techno present: Present");
 80127a4:	bf0c      	ite	eq
 80127a6:	496c      	ldreq	r1, [pc, #432]	; (8012958 <CST_cmd+0x1144>)
					PRINT_FORCE("Access techno present: Not present");
 80127a8:	496c      	ldrne	r1, [pc, #432]	; (801295c <CST_cmd+0x1148>)
 80127aa:	f00a fbf5 	bl	801cf98 <strcpy>
 80127ae:	485b      	ldr	r0, [pc, #364]	; (801291c <CST_cmd+0x1108>)
 80127b0:	f005 fbc0 	bl	8017f34 <crs_strlen>
 80127b4:	4a59      	ldr	r2, [pc, #356]	; (801291c <CST_cmd+0x1108>)
 80127b6:	b283      	uxth	r3, r0
 80127b8:	2101      	movs	r1, #1
 80127ba:	2002      	movs	r0, #2
 80127bc:	f005 fbf8 	bl	8017fb0 <traceIF_itmPrint>
 80127c0:	4856      	ldr	r0, [pc, #344]	; (801291c <CST_cmd+0x1108>)
 80127c2:	f005 fbb7 	bl	8017f34 <crs_strlen>
 80127c6:	4955      	ldr	r1, [pc, #340]	; (801291c <CST_cmd+0x1108>)
 80127c8:	b282      	uxth	r2, r0
 80127ca:	2002      	movs	r0, #2
 80127cc:	f005 fe30 	bl	8018430 <traceIF_uartPrintForce>
				if (cst_cmd_cellular_params.operator_selector.access_techno_present
 80127d0:	f895 318b 	ldrb.w	r3, [r5, #395]	; 0x18b
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f43f a83c 	beq.w	8011852 <CST_cmd+0x3e>
					PRINT_FORCE("Network register mode: %d (%s)",
 80127da:	f895 218c 	ldrb.w	r2, [r5, #396]	; 0x18c
 80127de:	e6ba      	b.n	8012556 <CST_cmd+0xd42>
					PRINT_FORCE("Sim Slot             : %ld (%s)", i,
 80127e0:	f818 3c5e 	ldrb.w	r3, [r8, #-94]
 80127e4:	4632      	mov	r2, r6
 80127e6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80127ea:	4651      	mov	r1, sl
 80127ec:	4620      	mov	r0, r4
 80127ee:	f00a fb63 	bl	801ceb8 <sprintf>
 80127f2:	4620      	mov	r0, r4
 80127f4:	f005 fb9e 	bl	8017f34 <crs_strlen>
 80127f8:	4622      	mov	r2, r4
 80127fa:	b283      	uxth	r3, r0
 80127fc:	2101      	movs	r1, #1
 80127fe:	2002      	movs	r0, #2
 8012800:	f005 fbd6 	bl	8017fb0 <traceIF_itmPrint>
 8012804:	4620      	mov	r0, r4
 8012806:	f005 fb95 	bl	8017f34 <crs_strlen>
 801280a:	4621      	mov	r1, r4
 801280c:	b282      	uxth	r2, r0
 801280e:	2002      	movs	r0, #2
 8012810:	f005 fe0e 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("APN                  : \"%s\"",
 8012814:	f107 020d 	add.w	r2, r7, #13
 8012818:	4951      	ldr	r1, [pc, #324]	; (8012960 <CST_cmd+0x114c>)
 801281a:	4620      	mov	r0, r4
 801281c:	f00a fb4c 	bl	801ceb8 <sprintf>
 8012820:	4620      	mov	r0, r4
 8012822:	f005 fb87 	bl	8017f34 <crs_strlen>
 8012826:	4622      	mov	r2, r4
 8012828:	b283      	uxth	r3, r0
 801282a:	2101      	movs	r1, #1
 801282c:	2002      	movs	r0, #2
 801282e:	f005 fbbf 	bl	8017fb0 <traceIF_itmPrint>
 8012832:	4620      	mov	r0, r4
 8012834:	f005 fb7e 	bl	8017f34 <crs_strlen>
 8012838:	4621      	mov	r1, r4
 801283a:	b282      	uxth	r2, r0
 801283c:	2002      	movs	r0, #2
 801283e:	f005 fdf7 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("CID                  : %d",
 8012842:	f818 2c3a 	ldrb.w	r2, [r8, #-58]
 8012846:	4947      	ldr	r1, [pc, #284]	; (8012964 <CST_cmd+0x1150>)
 8012848:	4620      	mov	r0, r4
 801284a:	f00a fb35 	bl	801ceb8 <sprintf>
 801284e:	4620      	mov	r0, r4
 8012850:	f005 fb70 	bl	8017f34 <crs_strlen>
 8012854:	4622      	mov	r2, r4
 8012856:	b283      	uxth	r3, r0
 8012858:	2101      	movs	r1, #1
 801285a:	2002      	movs	r0, #2
 801285c:	f005 fba8 	bl	8017fb0 <traceIF_itmPrint>
 8012860:	4620      	mov	r0, r4
 8012862:	f005 fb67 	bl	8017f34 <crs_strlen>
 8012866:	4621      	mov	r1, r4
 8012868:	b282      	uxth	r2, r0
 801286a:	2002      	movs	r0, #2
 801286c:	f005 fde0 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("username             : %s",
 8012870:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8012874:	493c      	ldr	r1, [pc, #240]	; (8012968 <CST_cmd+0x1154>)
 8012876:	4620      	mov	r0, r4
 8012878:	f00a fb1e 	bl	801ceb8 <sprintf>
 801287c:	4620      	mov	r0, r4
 801287e:	f005 fb59 	bl	8017f34 <crs_strlen>
 8012882:	4622      	mov	r2, r4
 8012884:	b283      	uxth	r3, r0
 8012886:	2101      	movs	r1, #1
 8012888:	2002      	movs	r0, #2
 801288a:	f005 fb91 	bl	8017fb0 <traceIF_itmPrint>
 801288e:	4620      	mov	r0, r4
 8012890:	f005 fb50 	bl	8017f34 <crs_strlen>
 8012894:	4621      	mov	r1, r4
 8012896:	b282      	uxth	r2, r0
 8012898:	2002      	movs	r0, #2
 801289a:	f005 fdc9 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("password             : %s",
 801289e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80128a2:	4932      	ldr	r1, [pc, #200]	; (801296c <CST_cmd+0x1158>)
 80128a4:	4620      	mov	r0, r4
 80128a6:	f00a fb07 	bl	801ceb8 <sprintf>
 80128aa:	4620      	mov	r0, r4
 80128ac:	f005 fb42 	bl	8017f34 <crs_strlen>
 80128b0:	4622      	mov	r2, r4
 80128b2:	b283      	uxth	r3, r0
 80128b4:	2101      	movs	r1, #1
 80128b6:	2002      	movs	r0, #2
 80128b8:	f005 fb7a 	bl	8017fb0 <traceIF_itmPrint>
 80128bc:	4620      	mov	r0, r4
 80128be:	f005 fb39 	bl	8017f34 <crs_strlen>
 80128c2:	4621      	mov	r1, r4
 80128c4:	b282      	uxth	r2, r0
 80128c6:	2002      	movs	r0, #2
 80128c8:	f005 fdb2 	bl	8018430 <traceIF_uartPrintForce>
				for (i = 0; i < cst_cmd_cellular_params.sim_slot_nb; i++) {
 80128cc:	3601      	adds	r6, #1
 80128ce:	4647      	mov	r7, r8
 80128d0:	e6c0      	b.n	8012654 <CST_cmd+0xe40>
 80128d2:	4f27      	ldr	r7, [pc, #156]	; (8012970 <CST_cmd+0x115c>)
						PRINT_FORCE("nfmc value %ld       : %ld", i + 1U,
 80128d4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 801297c <CST_cmd+0x1168>
 80128d8:	4c10      	ldr	r4, [pc, #64]	; (801291c <CST_cmd+0x1108>)
					for (i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++) {
 80128da:	2600      	movs	r6, #0
						PRINT_FORCE("nfmc value %ld       : %ld", i + 1U,
 80128dc:	3601      	adds	r6, #1
 80128de:	f857 3b04 	ldr.w	r3, [r7], #4
 80128e2:	4632      	mov	r2, r6
 80128e4:	4641      	mov	r1, r8
 80128e6:	4620      	mov	r0, r4
 80128e8:	f00a fae6 	bl	801ceb8 <sprintf>
 80128ec:	4620      	mov	r0, r4
 80128ee:	f005 fb21 	bl	8017f34 <crs_strlen>
 80128f2:	4622      	mov	r2, r4
 80128f4:	b283      	uxth	r3, r0
 80128f6:	2101      	movs	r1, #1
 80128f8:	2002      	movs	r0, #2
 80128fa:	f005 fb59 	bl	8017fb0 <traceIF_itmPrint>
 80128fe:	4620      	mov	r0, r4
 8012900:	f005 fb18 	bl	8017f34 <crs_strlen>
 8012904:	4621      	mov	r1, r4
 8012906:	b282      	uxth	r2, r0
 8012908:	2002      	movs	r0, #2
 801290a:	f005 fd91 	bl	8018430 <traceIF_uartPrintForce>
					for (i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++) {
 801290e:	2e07      	cmp	r6, #7
 8012910:	d1e4      	bne.n	80128dc <CST_cmd+0x10c8>
 8012912:	e6f5      	b.n	8012700 <CST_cmd+0xeec>
 8012914:	08029417 	.word	0x08029417
 8012918:	0802941e 	.word	0x0802941e
 801291c:	20008ff8 	.word	0x20008ff8
 8012920:	200039fc 	.word	0x200039fc
 8012924:	2000023c 	.word	0x2000023c
 8012928:	20008d7c 	.word	0x20008d7c
 801292c:	0802a030 	.word	0x0802a030
 8012930:	080294d1 	.word	0x080294d1
 8012934:	080294ed 	.word	0x080294ed
 8012938:	08029d64 	.word	0x08029d64
 801293c:	0802950d 	.word	0x0802950d
 8012940:	0802a068 	.word	0x0802a068
 8012944:	08029529 	.word	0x08029529
 8012948:	0802a078 	.word	0x0802a078
 801294c:	08029567 	.word	0x08029567
 8012950:	20003b46 	.word	0x20003b46
 8012954:	08029587 	.word	0x08029587
 8012958:	0802959d 	.word	0x0802959d
 801295c:	080295be 	.word	0x080295be
 8012960:	0802945f 	.word	0x0802945f
 8012964:	0802947d 	.word	0x0802947d
 8012968:	08029499 	.word	0x08029499
 801296c:	080294b5 	.word	0x080294b5
 8012970:	20003b8c 	.word	0x20003b8c
 8012974:	0802a024 	.word	0x0802a024
 8012978:	0802943d 	.word	0x0802943d
 801297c:	0802954a 	.word	0x0802954a
					crs_strlen(argv_p[0])) == 0) {
 8012980:	4628      	mov	r0, r5
 8012982:	f005 fad7 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "power",
 8012986:	4965      	ldr	r1, [pc, #404]	; (8012b1c <CST_cmd+0x1308>)
					crs_strlen(argv_p[0])) == 0) {
 8012988:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "power",
 801298a:	4628      	mov	r0, r5
 801298c:	f00a fa48 	bl	801ce20 <memcmp>
 8012990:	2800      	cmp	r0, #0
 8012992:	d150      	bne.n	8012a36 <CST_cmd+0x1222>
				if (argc == 2U) {
 8012994:	2c02      	cmp	r4, #2
 8012996:	f47e af5c 	bne.w	8011852 <CST_cmd+0x3e>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 801299a:	f8d9 5004 	ldr.w	r5, [r9, #4]
							crs_strlen(argv_p[1])) == 0) {
 801299e:	4628      	mov	r0, r5
 80129a0:	f005 fac8 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 80129a4:	495e      	ldr	r1, [pc, #376]	; (8012b20 <CST_cmd+0x130c>)
							crs_strlen(argv_p[1])) == 0) {
 80129a6:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "on",
 80129a8:	4628      	mov	r0, r5
 80129aa:	f00a fa39 	bl	801ce20 <memcmp>
 80129ae:	b9f8      	cbnz	r0, 80129f0 <CST_cmd+0x11dc>
						PRINT_FORCE("modem power ON")
 80129b0:	495c      	ldr	r1, [pc, #368]	; (8012b24 <CST_cmd+0x1310>)
 80129b2:	485d      	ldr	r0, [pc, #372]	; (8012b28 <CST_cmd+0x1314>)
 80129b4:	f00a faf0 	bl	801cf98 <strcpy>
 80129b8:	485b      	ldr	r0, [pc, #364]	; (8012b28 <CST_cmd+0x1314>)
 80129ba:	f005 fabb 	bl	8017f34 <crs_strlen>
 80129be:	4a5a      	ldr	r2, [pc, #360]	; (8012b28 <CST_cmd+0x1314>)
 80129c0:	b283      	uxth	r3, r0
 80129c2:	2101      	movs	r1, #1
 80129c4:	4620      	mov	r0, r4
 80129c6:	f005 faf3 	bl	8017fb0 <traceIF_itmPrint>
 80129ca:	4857      	ldr	r0, [pc, #348]	; (8012b28 <CST_cmd+0x1314>)
 80129cc:	f005 fab2 	bl	8017f34 <crs_strlen>
 80129d0:	4955      	ldr	r1, [pc, #340]	; (8012b28 <CST_cmd+0x1314>)
 80129d2:	b282      	uxth	r2, r0
 80129d4:	4620      	mov	r0, r4
 80129d6:	f005 fd2b 	bl	8018430 <traceIF_uartPrintForce>
						if (osCDS_power_on() != CELLULAR_OK) {
 80129da:	f001 f9a3 	bl	8013d24 <osCDS_power_on>
						if (CST_modem_power_off() != CELLULAR_OK) {
 80129de:	2800      	cmp	r0, #0
 80129e0:	f43e af37 	beq.w	8011852 <CST_cmd+0x3e>
							PRINT_FORCE("command fail\n\r")
 80129e4:	4951      	ldr	r1, [pc, #324]	; (8012b2c <CST_cmd+0x1318>)
 80129e6:	4850      	ldr	r0, [pc, #320]	; (8012b28 <CST_cmd+0x1314>)
 80129e8:	f00a fad6 	bl	801cf98 <strcpy>
 80129ec:	f7ff ba16 	b.w	8011e1c <CST_cmd+0x608>
							crs_strlen(argv_p[1])) == 0) {
 80129f0:	4628      	mov	r0, r5
 80129f2:	f005 fa9f 	bl	8017f34 <crs_strlen>
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80129f6:	494e      	ldr	r1, [pc, #312]	; (8012b30 <CST_cmd+0x131c>)
							crs_strlen(argv_p[1])) == 0) {
 80129f8:	4602      	mov	r2, r0
					} else if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 80129fa:	4628      	mov	r0, r5
 80129fc:	f00a fa10 	bl	801ce20 <memcmp>
 8012a00:	2800      	cmp	r0, #0
 8012a02:	f47e af26 	bne.w	8011852 <CST_cmd+0x3e>
						PRINT_FORCE("modem power OFF")
 8012a06:	494b      	ldr	r1, [pc, #300]	; (8012b34 <CST_cmd+0x1320>)
 8012a08:	4847      	ldr	r0, [pc, #284]	; (8012b28 <CST_cmd+0x1314>)
 8012a0a:	f00a fac5 	bl	801cf98 <strcpy>
 8012a0e:	4846      	ldr	r0, [pc, #280]	; (8012b28 <CST_cmd+0x1314>)
 8012a10:	f005 fa90 	bl	8017f34 <crs_strlen>
 8012a14:	4a44      	ldr	r2, [pc, #272]	; (8012b28 <CST_cmd+0x1314>)
 8012a16:	b283      	uxth	r3, r0
 8012a18:	2101      	movs	r1, #1
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f005 fac8 	bl	8017fb0 <traceIF_itmPrint>
 8012a20:	4841      	ldr	r0, [pc, #260]	; (8012b28 <CST_cmd+0x1314>)
 8012a22:	f005 fa87 	bl	8017f34 <crs_strlen>
 8012a26:	4940      	ldr	r1, [pc, #256]	; (8012b28 <CST_cmd+0x1314>)
 8012a28:	b282      	uxth	r2, r0
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f005 fd00 	bl	8018430 <traceIF_uartPrintForce>
						if (CST_modem_power_off() != CELLULAR_OK) {
 8012a30:	f004 fa8c 	bl	8016f4c <CST_modem_power_off>
 8012a34:	e7d3      	b.n	80129de <CST_cmd+0x11ca>
					crs_strlen(argv_p[0])) == 0) {
 8012a36:	4628      	mov	r0, r5
 8012a38:	f005 fa7c 	bl	8017f34 <crs_strlen>
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "techno",
 8012a3c:	493e      	ldr	r1, [pc, #248]	; (8012b38 <CST_cmd+0x1324>)
					crs_strlen(argv_p[0])) == 0) {
 8012a3e:	4602      	mov	r2, r0
			else if (memcmp((CRC_CHAR_t*) argv_p[0], "techno",
 8012a40:	4628      	mov	r0, r5
 8012a42:	f00a f9ed 	bl	801ce20 <memcmp>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d148      	bne.n	8012adc <CST_cmd+0x12c8>
				if (argc == 3U) {
 8012a4a:	2c03      	cmp	r4, #3
 8012a4c:	d12f      	bne.n	8012aae <CST_cmd+0x129a>
					(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8012a4e:	4e3b      	ldr	r6, [pc, #236]	; (8012b3c <CST_cmd+0x1328>)
 8012a50:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8012b44 <CST_cmd+0x1330>
 8012a54:	483a      	ldr	r0, [pc, #232]	; (8012b40 <CST_cmd+0x132c>)
 8012a56:	f8b8 1000 	ldrh.w	r1, [r8]
 8012a5a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8012a5e:	4632      	mov	r2, r6
 8012a60:	f004 fc08 	bl	8017274 <dc_com_read>
					tmpConversion = (uint8_t) crs_atoi(argv_p[2]);
 8012a64:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8012a68:	f005 fa2d 	bl	8017ec6 <crs_atoi>
					if ((memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8012a6c:	f8d9 4004 	ldr.w	r4, [r9, #4]
					tmpConversion = (uint8_t) crs_atoi(argv_p[2]);
 8012a70:	4605      	mov	r5, r0
							crs_strlen(argv_p[1])) == 0)
 8012a72:	4620      	mov	r0, r4
 8012a74:	f005 fa5e 	bl	8017f34 <crs_strlen>
					if ((memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8012a78:	4929      	ldr	r1, [pc, #164]	; (8012b20 <CST_cmd+0x130c>)
							crs_strlen(argv_p[1])) == 0)
 8012a7a:	4602      	mov	r2, r0
					if ((memcmp((CRC_CHAR_t*) argv_p[1], "on",
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f00a f9cf 	bl	801ce20 <memcmp>
 8012a82:	4604      	mov	r4, r0
 8012a84:	bb50      	cbnz	r0, 8012adc <CST_cmd+0x12c8>
					tmpConversion = (uint8_t) crs_atoi(argv_p[2]);
 8012a86:	b2e8      	uxtb	r0, r5
							&& (tmpConversion <= 9U)) {
 8012a88:	2809      	cmp	r0, #9
 8012a8a:	d827      	bhi.n	8012adc <CST_cmd+0x12c8>
						cst_cmd_cellular_params.operator_selector.access_techno_present =
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	f886 218b 	strb.w	r2, [r6, #395]	; 0x18b
								cst_convert_access_techno(
 8012a92:	f003 f84f 	bl	8015b34 <cst_convert_access_techno>
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8012a96:	f8b8 1000 	ldrh.w	r1, [r8]
						cst_cmd_cellular_params.operator_selector.access_techno =
 8012a9a:	f886 018c 	strb.w	r0, [r6, #396]	; 0x18c
						(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8012a9e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8012aa2:	4632      	mov	r2, r6
 8012aa4:	4826      	ldr	r0, [pc, #152]	; (8012b40 <CST_cmd+0x132c>)
 8012aa6:	f004 fb81 	bl	80171ac <dc_com_write>
 8012aaa:	f7ff b9c8 	b.w	8011e3e <CST_cmd+0x62a>
				} else if (argc == 2U) {
 8012aae:	2c02      	cmp	r4, #2
 8012ab0:	d114      	bne.n	8012adc <CST_cmd+0x12c8>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8012ab2:	f8d9 4004 	ldr.w	r4, [r9, #4]
							crs_strlen(argv_p[1])) == 0) {
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f005 fa3c 	bl	8017f34 <crs_strlen>
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8012abc:	491c      	ldr	r1, [pc, #112]	; (8012b30 <CST_cmd+0x131c>)
							crs_strlen(argv_p[1])) == 0) {
 8012abe:	4602      	mov	r2, r0
					if (memcmp((CRC_CHAR_t*) argv_p[1], "off",
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f00a f9ad 	bl	801ce20 <memcmp>
 8012ac6:	b910      	cbnz	r0, 8012ace <CST_cmd+0x12ba>
						cst_cmd_cellular_params.operator_selector.access_techno_present =
 8012ac8:	4b1c      	ldr	r3, [pc, #112]	; (8012b3c <CST_cmd+0x1328>)
 8012aca:	f883 018b 	strb.w	r0, [r3, #395]	; 0x18b
					(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8012ace:	491d      	ldr	r1, [pc, #116]	; (8012b44 <CST_cmd+0x1330>)
 8012ad0:	4a1a      	ldr	r2, [pc, #104]	; (8012b3c <CST_cmd+0x1328>)
 8012ad2:	8809      	ldrh	r1, [r1, #0]
 8012ad4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8012ad8:	f7ff ba93 	b.w	8012002 <CST_cmd+0x7ee>
				PRINT_FORCE("%s bad command. Usage:", cmd_p)
 8012adc:	491a      	ldr	r1, [pc, #104]	; (8012b48 <CST_cmd+0x1334>)
 8012ade:	4812      	ldr	r0, [pc, #72]	; (8012b28 <CST_cmd+0x1314>)
 8012ae0:	463a      	mov	r2, r7
 8012ae2:	f00a f9e9 	bl	801ceb8 <sprintf>
			PRINT_FORCE("Bad command. Usage:")
 8012ae6:	4810      	ldr	r0, [pc, #64]	; (8012b28 <CST_cmd+0x1314>)
 8012ae8:	f005 fa24 	bl	8017f34 <crs_strlen>
 8012aec:	4a0e      	ldr	r2, [pc, #56]	; (8012b28 <CST_cmd+0x1314>)
 8012aee:	b283      	uxth	r3, r0
 8012af0:	2101      	movs	r1, #1
 8012af2:	2002      	movs	r0, #2
 8012af4:	f005 fa5c 	bl	8017fb0 <traceIF_itmPrint>
 8012af8:	480b      	ldr	r0, [pc, #44]	; (8012b28 <CST_cmd+0x1314>)
 8012afa:	f005 fa1b 	bl	8017f34 <crs_strlen>
 8012afe:	490a      	ldr	r1, [pc, #40]	; (8012b28 <CST_cmd+0x1314>)
 8012b00:	b282      	uxth	r2, r0
 8012b02:	2002      	movs	r0, #2
 8012b04:	f005 fc94 	bl	8018430 <traceIF_uartPrintForce>
			CST_HelpCmd();
 8012b08:	f7fe fce6 	bl	80114d8 <CST_HelpCmd>
 8012b0c:	f7ff b927 	b.w	8011d5e <CST_cmd+0x54a>
			PRINT_FORCE("Bad command. Usage:")
 8012b10:	490e      	ldr	r1, [pc, #56]	; (8012b4c <CST_cmd+0x1338>)
 8012b12:	4805      	ldr	r0, [pc, #20]	; (8012b28 <CST_cmd+0x1314>)
 8012b14:	f00a fa40 	bl	801cf98 <strcpy>
 8012b18:	e7e5      	b.n	8012ae6 <CST_cmd+0x12d2>
 8012b1a:	bf00      	nop
 8012b1c:	080295e3 	.word	0x080295e3
 8012b20:	080291e1 	.word	0x080291e1
 8012b24:	080295e9 	.word	0x080295e9
 8012b28:	20008ff8 	.word	0x20008ff8
 8012b2c:	080295fa 	.word	0x080295fa
 8012b30:	080292b8 	.word	0x080292b8
 8012b34:	0802960b 	.word	0x0802960b
 8012b38:	0802961d 	.word	0x0802961d
 8012b3c:	200039fc 	.word	0x200039fc
 8012b40:	20008d7c 	.word	0x20008d7c
 8012b44:	2000023c 	.word	0x2000023c
 8012b48:	08029624 	.word	0x08029624
 8012b4c:	0802963d 	.word	0x0802963d

08012b50 <cst_at_command_handle>:
/**
 * @brief  AT command line processing
 * @param  cmd_line_p - command line
 * @retval cmd_status_t - command result
 */
static cmd_status_t cst_at_command_handle(uint8_t *cmd_line_p) {
 8012b50:	b510      	push	{r4, lr}
 8012b52:	4604      	mov	r4, r0
	CS_Status_t cs_status;
	static CS_direct_cmd_tx_t CST_direct_cmd_tx;

	cmd_status = CMD_OK;

	size = crs_strlen(cmd_line_p) + 1U;
 8012b54:	f005 f9ee 	bl	8017f34 <crs_strlen>
 8012b58:	1c42      	adds	r2, r0, #1
	if (size <= MAX_DIRECT_CMD_SIZE) {
 8012b5a:	2a76      	cmp	r2, #118	; 0x76
 8012b5c:	d803      	bhi.n	8012b66 <cst_at_command_handle+0x16>
		(void) memcpy(&CST_direct_cmd_tx.cmd_str[0], (CRC_CHAR_t*) cmd_line_p,
 8012b5e:	4815      	ldr	r0, [pc, #84]	; (8012bb4 <cst_at_command_handle+0x64>)
 8012b60:	4621      	mov	r1, r4
 8012b62:	f00a f96b 	bl	801ce3c <memcpy>
				size);
	}

	CST_direct_cmd_tx.cmd_size = (uint16_t) crs_strlen(cmd_line_p);
 8012b66:	4620      	mov	r0, r4
 8012b68:	f005 f9e4 	bl	8017f34 <crs_strlen>
 8012b6c:	4b11      	ldr	r3, [pc, #68]	; (8012bb4 <cst_at_command_handle+0x64>)
	CST_direct_cmd_tx.cmd_timeout = cst_at_timeout;
 8012b6e:	4a12      	ldr	r2, [pc, #72]	; (8012bb8 <cst_at_command_handle+0x68>)
	CST_direct_cmd_tx.cmd_size = (uint16_t) crs_strlen(cmd_line_p);
 8012b70:	f8a3 0076 	strh.w	r0, [r3, #118]	; 0x76
	CST_direct_cmd_tx.cmd_timeout = cst_at_timeout;
 8012b74:	6812      	ldr	r2, [r2, #0]

	/* send the AT command to the modem */
	cs_status = osCDS_direct_cmd(&CST_direct_cmd_tx,
 8012b76:	4911      	ldr	r1, [pc, #68]	; (8012bbc <cst_at_command_handle+0x6c>)
	CST_direct_cmd_tx.cmd_timeout = cst_at_timeout;
 8012b78:	679a      	str	r2, [r3, #120]	; 0x78
	cs_status = osCDS_direct_cmd(&CST_direct_cmd_tx,
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f001 f9c2 	bl	8013f04 <osCDS_direct_cmd>
			CST_cellular_direct_cmd_callback);
	if (cs_status != CELLULAR_OK) {
 8012b80:	b1b0      	cbz	r0, 8012bb0 <cst_at_command_handle+0x60>
		/* AT command failed */
		PRINT_FORCE("\n\r%s command FAIL\n\r", cmd_line_p)
 8012b82:	490f      	ldr	r1, [pc, #60]	; (8012bc0 <cst_at_command_handle+0x70>)
 8012b84:	480f      	ldr	r0, [pc, #60]	; (8012bc4 <cst_at_command_handle+0x74>)
 8012b86:	4622      	mov	r2, r4
 8012b88:	f00a f996 	bl	801ceb8 <sprintf>
 8012b8c:	480d      	ldr	r0, [pc, #52]	; (8012bc4 <cst_at_command_handle+0x74>)
 8012b8e:	f005 f9d1 	bl	8017f34 <crs_strlen>
 8012b92:	4a0c      	ldr	r2, [pc, #48]	; (8012bc4 <cst_at_command_handle+0x74>)
 8012b94:	b283      	uxth	r3, r0
 8012b96:	2101      	movs	r1, #1
 8012b98:	2002      	movs	r0, #2
 8012b9a:	f005 fa09 	bl	8017fb0 <traceIF_itmPrint>
 8012b9e:	4809      	ldr	r0, [pc, #36]	; (8012bc4 <cst_at_command_handle+0x74>)
 8012ba0:	f005 f9c8 	bl	8017f34 <crs_strlen>
 8012ba4:	4907      	ldr	r1, [pc, #28]	; (8012bc4 <cst_at_command_handle+0x74>)
 8012ba6:	b282      	uxth	r2, r0
 8012ba8:	2002      	movs	r0, #2
 8012baa:	f005 fc41 	bl	8018430 <traceIF_uartPrintForce>
 8012bae:	2002      	movs	r0, #2
		cmd_status = CMD_PROCESS_ERROR;
	}
	return cmd_status;
}
 8012bb0:	bd10      	pop	{r4, pc}
 8012bb2:	bf00      	nop
 8012bb4:	200038a4 	.word	0x200038a4
 8012bb8:	20000224 	.word	0x20000224
 8012bbc:	08010c79 	.word	0x08010c79
 8012bc0:	08029653 	.word	0x08029653
 8012bc4:	20008ff8 	.word	0x20008ff8

08012bc8 <CST_AtCmd>:
/**
 * @brief  AT command line management
 * @param  cmd_line_p - command line
 * @retval cmd_status_t - command result
 */
static cmd_status_t CST_AtCmd(uint8_t *cmd_line_p) {
 8012bc8:	b538      	push	{r3, r4, r5, lr}
	const uint8_t *cmd_p;

	cmd_status = CMD_OK;

	/* find an AT command */
	if (cmd_line_p != NULL) {
 8012bca:	4605      	mov	r5, r0
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d039      	beq.n	8012c44 <CST_AtCmd+0x7c>
		cmd_len = crs_strlen(cmd_line_p);
 8012bd0:	f005 f9b0 	bl	8017f34 <crs_strlen>
		for (i = 0U; i < cmd_len; i++) {
 8012bd4:	2300      	movs	r3, #0
			if (cmd_line_p[i] == (uint8_t) ' ') {
 8012bd6:	1e69      	subs	r1, r5, #1
		for (i = 0U; i < cmd_len; i++) {
 8012bd8:	4298      	cmp	r0, r3
 8012bda:	f103 0301 	add.w	r3, r3, #1
 8012bde:	d002      	beq.n	8012be6 <CST_AtCmd+0x1e>
			if (cmd_line_p[i] == (uint8_t) ' ') {
 8012be0:	5cca      	ldrb	r2, [r1, r3]
 8012be2:	2a20      	cmp	r2, #32
 8012be4:	d1f8      	bne.n	8012bd8 <CST_AtCmd+0x10>
				break;
			}
		}
		i++;

		if ((i < cmd_len)
 8012be6:	4298      	cmp	r0, r3
 8012be8:	d911      	bls.n	8012c0e <CST_AtCmd+0x46>
				&& ((memcmp((const CRC_CHAR_t*) &cmd_line_p[i],
 8012bea:	18ec      	adds	r4, r5, r3
 8012bec:	492c      	ldr	r1, [pc, #176]	; (8012ca0 <CST_AtCmd+0xd8>)
 8012bee:	2202      	movs	r2, #2
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f00a f915 	bl	801ce20 <memcmp>
 8012bf6:	b128      	cbz	r0, 8012c04 <CST_AtCmd+0x3c>
						(const CRC_CHAR_t*) "at", 2) == 0)
						|| (memcmp((const CRC_CHAR_t*) &cmd_line_p[i],
 8012bf8:	492a      	ldr	r1, [pc, #168]	; (8012ca4 <CST_AtCmd+0xdc>)
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f00a f90f 	bl	801ce20 <memcmp>
 8012c02:	b920      	cbnz	r0, 8012c0e <CST_AtCmd+0x46>
								(const CRC_CHAR_t*) "AT", 2) == 0))) {
			/* AT command to process */
			cmd_status = cst_at_command_handle(&cmd_line_p[i]);
 8012c04:	4620      	mov	r0, r4
	} else {
		/* wrong command: displays help */
		cst_at_cmd_help();
	}
	return cmd_status;
}
 8012c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			cmd_status = cst_at_command_handle(&cmd_line_p[i]);
 8012c0a:	f7ff bfa1 	b.w	8012b50 <cst_at_command_handle>
			cmd_p = (uint8_t*) strtok((CRC_CHAR_t*) cmd_line_p, " \t");
 8012c0e:	4926      	ldr	r1, [pc, #152]	; (8012ca8 <CST_AtCmd+0xe0>)
 8012c10:	4628      	mov	r0, r5
 8012c12:	f00a fa05 	bl	801d020 <strtok>
			if (cmd_p != NULL) {
 8012c16:	4604      	mov	r4, r0
 8012c18:	b1a0      	cbz	r0, 8012c44 <CST_AtCmd+0x7c>
						(const CRC_CHAR_t*) CST_cmd_at_label, crs_strlen(cmd_p))
 8012c1a:	f005 f98b 	bl	8017f34 <crs_strlen>
				if (memcmp((const CRC_CHAR_t*) cmd_p,
 8012c1e:	4923      	ldr	r1, [pc, #140]	; (8012cac <CST_AtCmd+0xe4>)
						(const CRC_CHAR_t*) CST_cmd_at_label, crs_strlen(cmd_p))
 8012c20:	4602      	mov	r2, r0
				if (memcmp((const CRC_CHAR_t*) cmd_p,
 8012c22:	4620      	mov	r0, r4
 8012c24:	f00a f8fc 	bl	801ce20 <memcmp>
 8012c28:	b960      	cbnz	r0, 8012c44 <CST_AtCmd+0x7c>
					argv_p[0] = (uint8_t*) strtok(NULL, " \t");
 8012c2a:	491f      	ldr	r1, [pc, #124]	; (8012ca8 <CST_AtCmd+0xe0>)
 8012c2c:	f00a f9f8 	bl	801d020 <strtok>
					if (argv_p[0] != NULL) {
 8012c30:	4604      	mov	r4, r0
 8012c32:	b148      	cbz	r0, 8012c48 <CST_AtCmd+0x80>
								crs_strlen(argv_p[0])) == 0) {
 8012c34:	f005 f97e 	bl	8017f34 <crs_strlen>
						if (memcmp((CRC_CHAR_t*) argv_p[0], "help",
 8012c38:	491d      	ldr	r1, [pc, #116]	; (8012cb0 <CST_AtCmd+0xe8>)
								crs_strlen(argv_p[0])) == 0) {
 8012c3a:	4602      	mov	r2, r0
						if (memcmp((CRC_CHAR_t*) argv_p[0], "help",
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f00a f8ef 	bl	801ce20 <memcmp>
 8012c42:	b918      	cbnz	r0, 8012c4c <CST_AtCmd+0x84>
							cst_at_cmd_help();
 8012c44:	f7fe fc0a 	bl	801145c <cst_at_cmd_help>
}
 8012c48:	2000      	movs	r0, #0
 8012c4a:	bd38      	pop	{r3, r4, r5, pc}
								crs_strlen(argv_p[0])) == 0) {
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f005 f971 	bl	8017f34 <crs_strlen>
						} else if (memcmp((CRC_CHAR_t*) argv_p[0], "timeout",
 8012c52:	4918      	ldr	r1, [pc, #96]	; (8012cb4 <CST_AtCmd+0xec>)
								crs_strlen(argv_p[0])) == 0) {
 8012c54:	4602      	mov	r2, r0
						} else if (memcmp((CRC_CHAR_t*) argv_p[0], "timeout",
 8012c56:	4620      	mov	r0, r4
 8012c58:	f00a f8e2 	bl	801ce20 <memcmp>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	d1f3      	bne.n	8012c48 <CST_AtCmd+0x80>
							argv_p[1] = (uint8_t*) strtok(NULL, " \t");
 8012c60:	4911      	ldr	r1, [pc, #68]	; (8012ca8 <CST_AtCmd+0xe0>)
 8012c62:	4c15      	ldr	r4, [pc, #84]	; (8012cb8 <CST_AtCmd+0xf0>)
 8012c64:	f00a f9dc 	bl	801d020 <strtok>
							if (argv_p[1] != NULL) {
 8012c68:	b110      	cbz	r0, 8012c70 <CST_AtCmd+0xa8>
								cst_at_timeout = (uint32_t) crs_atoi(argv_p[1]);
 8012c6a:	f005 f92c 	bl	8017ec6 <crs_atoi>
 8012c6e:	6020      	str	r0, [r4, #0]
							PRINT_FORCE("at timeout : %ld\n\r", cst_at_timeout)
 8012c70:	6822      	ldr	r2, [r4, #0]
 8012c72:	4912      	ldr	r1, [pc, #72]	; (8012cbc <CST_AtCmd+0xf4>)
 8012c74:	4812      	ldr	r0, [pc, #72]	; (8012cc0 <CST_AtCmd+0xf8>)
 8012c76:	f00a f91f 	bl	801ceb8 <sprintf>
 8012c7a:	4811      	ldr	r0, [pc, #68]	; (8012cc0 <CST_AtCmd+0xf8>)
 8012c7c:	f005 f95a 	bl	8017f34 <crs_strlen>
 8012c80:	4a0f      	ldr	r2, [pc, #60]	; (8012cc0 <CST_AtCmd+0xf8>)
 8012c82:	b283      	uxth	r3, r0
 8012c84:	2101      	movs	r1, #1
 8012c86:	2002      	movs	r0, #2
 8012c88:	f005 f992 	bl	8017fb0 <traceIF_itmPrint>
 8012c8c:	480c      	ldr	r0, [pc, #48]	; (8012cc0 <CST_AtCmd+0xf8>)
 8012c8e:	f005 f951 	bl	8017f34 <crs_strlen>
 8012c92:	490b      	ldr	r1, [pc, #44]	; (8012cc0 <CST_AtCmd+0xf8>)
 8012c94:	b282      	uxth	r2, r0
 8012c96:	2002      	movs	r0, #2
 8012c98:	f005 fbca 	bl	8018430 <traceIF_uartPrintForce>
 8012c9c:	e7d4      	b.n	8012c48 <CST_AtCmd+0x80>
 8012c9e:	bf00      	nop
 8012ca0:	0802bf9f 	.word	0x0802bf9f
 8012ca4:	08029669 	.word	0x08029669
 8012ca8:	08028e19 	.word	0x08028e19
 8012cac:	08028a12 	.word	0x08028a12
 8012cb0:	08028e1c 	.word	0x08028e1c
 8012cb4:	0802966c 	.word	0x0802966c
 8012cb8:	20000224 	.word	0x20000224
 8012cbc:	08029674 	.word	0x08029674
 8012cc0:	20008ff8 	.word	0x20008ff8

08012cc4 <CST_CMD_display_seq_name.constprop.0>:
static void CST_CMD_display_seq_name(uint32_t bitmap,
 8012cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc6:	4d10      	ldr	r5, [pc, #64]	; (8012d08 <CST_CMD_display_seq_name.constprop.0+0x44>)
			PRINT_FORCE("%s", bitmap_descr[i].name)
 8012cc8:	4f10      	ldr	r7, [pc, #64]	; (8012d0c <CST_CMD_display_seq_name.constprop.0+0x48>)
 8012cca:	4c11      	ldr	r4, [pc, #68]	; (8012d10 <CST_CMD_display_seq_name.constprop.0+0x4c>)
static void CST_CMD_display_seq_name(uint32_t bitmap,
 8012ccc:	4606      	mov	r6, r0
	for (i = 0U; bitmap_descr[i].name != NULL; i++) {
 8012cce:	682a      	ldr	r2, [r5, #0]
 8012cd0:	b902      	cbnz	r2, 8012cd4 <CST_CMD_display_seq_name.constprop.0+0x10>
}
 8012cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (bitmap == bitmap_descr[i].value) {
 8012cd4:	686b      	ldr	r3, [r5, #4]
 8012cd6:	42b3      	cmp	r3, r6
 8012cd8:	d114      	bne.n	8012d04 <CST_CMD_display_seq_name.constprop.0+0x40>
			PRINT_FORCE("%s", bitmap_descr[i].name)
 8012cda:	4639      	mov	r1, r7
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f00a f8eb 	bl	801ceb8 <sprintf>
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f005 f926 	bl	8017f34 <crs_strlen>
 8012ce8:	4622      	mov	r2, r4
 8012cea:	b283      	uxth	r3, r0
 8012cec:	2101      	movs	r1, #1
 8012cee:	2002      	movs	r0, #2
 8012cf0:	f005 f95e 	bl	8017fb0 <traceIF_itmPrint>
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	f005 f91d 	bl	8017f34 <crs_strlen>
 8012cfa:	4621      	mov	r1, r4
 8012cfc:	b282      	uxth	r2, r0
 8012cfe:	2002      	movs	r0, #2
 8012d00:	f005 fb96 	bl	8018430 <traceIF_uartPrintForce>
	for (i = 0U; bitmap_descr[i].name != NULL; i++) {
 8012d04:	3508      	adds	r5, #8
 8012d06:	e7e2      	b.n	8012cce <CST_CMD_display_seq_name.constprop.0+0xa>
 8012d08:	08029f64 	.word	0x08029f64
 8012d0c:	080296a3 	.word	0x080296a3
 8012d10:	20008ff8 	.word	0x20008ff8

08012d14 <CST_ModemCmd>:
static cmd_status_t CST_ModemCmd(uint8_t *cmd_line_p) {
 8012d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT_FORCE("\n\r")
 8012d18:	49a2      	ldr	r1, [pc, #648]	; (8012fa4 <CST_ModemCmd+0x290>)
static cmd_status_t CST_ModemCmd(uint8_t *cmd_line_p) {
 8012d1a:	b096      	sub	sp, #88	; 0x58
 8012d1c:	4604      	mov	r4, r0
	PRINT_FORCE("\n\r")
 8012d1e:	48a2      	ldr	r0, [pc, #648]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012d20:	f00a f93a 	bl	801cf98 <strcpy>
 8012d24:	48a0      	ldr	r0, [pc, #640]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012d26:	f005 f905 	bl	8017f34 <crs_strlen>
 8012d2a:	4a9f      	ldr	r2, [pc, #636]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012d2c:	b283      	uxth	r3, r0
 8012d2e:	2101      	movs	r1, #1
 8012d30:	2002      	movs	r0, #2
 8012d32:	f005 f93d 	bl	8017fb0 <traceIF_itmPrint>
 8012d36:	489c      	ldr	r0, [pc, #624]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012d38:	f005 f8fc 	bl	8017f34 <crs_strlen>
 8012d3c:	499a      	ldr	r1, [pc, #616]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012d3e:	b282      	uxth	r2, r0
 8012d40:	2002      	movs	r0, #2
 8012d42:	f005 fb75 	bl	8018430 <traceIF_uartPrintForce>
	cmd_p = (uint8_t*) strtok((CRC_CHAR_t*) cmd_line_p, " \t");
 8012d46:	4999      	ldr	r1, [pc, #612]	; (8012fac <CST_ModemCmd+0x298>)
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f00a f969 	bl	801d020 <strtok>
	if (cmd_p != NULL) {
 8012d4e:	4606      	mov	r6, r0
 8012d50:	b908      	cbnz	r0, 8012d56 <CST_ModemCmd+0x42>
	cmd_status = CMD_OK;
 8012d52:	2400      	movs	r4, #0
 8012d54:	e1ad      	b.n	80130b2 <CST_ModemCmd+0x39e>
				crs_strlen(cmd_p)) == 0) {
 8012d56:	f005 f8ed 	bl	8017f34 <crs_strlen>
		if (memcmp((CRC_CHAR_t*) cmd_p, (CRC_CHAR_t*) CST_cmd_modem_label,
 8012d5a:	4995      	ldr	r1, [pc, #596]	; (8012fb0 <CST_ModemCmd+0x29c>)
				crs_strlen(cmd_p)) == 0) {
 8012d5c:	4602      	mov	r2, r0
		if (memcmp((CRC_CHAR_t*) cmd_p, (CRC_CHAR_t*) CST_cmd_modem_label,
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f00a f85e 	bl	801ce20 <memcmp>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	f040 854a 	bne.w	80137fe <CST_ModemCmd+0xaea>
 8012d6a:	ac09      	add	r4, sp, #36	; 0x24
				argv_p[argc] = (uint8_t*) strtok(NULL, " \t");
 8012d6c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8012fac <CST_ModemCmd+0x298>
			for (argc = 0U; argc < CST_CMS_PARAM_MAX; argc++) {
 8012d70:	4605      	mov	r5, r0
 8012d72:	4627      	mov	r7, r4
				argv_p[argc] = (uint8_t*) strtok(NULL, " \t");
 8012d74:	4641      	mov	r1, r8
 8012d76:	2000      	movs	r0, #0
 8012d78:	f00a f952 	bl	801d020 <strtok>
 8012d7c:	f844 0b04 	str.w	r0, [r4], #4
				if (argv_p[argc] == NULL) {
 8012d80:	2800      	cmp	r0, #0
 8012d82:	f000 80ca 	beq.w	8012f1a <CST_ModemCmd+0x206>
			for (argc = 0U; argc < CST_CMS_PARAM_MAX; argc++) {
 8012d86:	3501      	adds	r5, #1
 8012d88:	2d0d      	cmp	r5, #13
 8012d8a:	d1f3      	bne.n	8012d74 <CST_ModemCmd+0x60>
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "help",
 8012d8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
					crs_strlen((uint8_t*) argv_p[0])) == 0) {
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f005 f8d0 	bl	8017f34 <crs_strlen>
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "help",
 8012d94:	4987      	ldr	r1, [pc, #540]	; (8012fb4 <CST_ModemCmd+0x2a0>)
					crs_strlen((uint8_t*) argv_p[0])) == 0) {
 8012d96:	4602      	mov	r2, r0
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "help",
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f00a f841 	bl	801ce20 <memcmp>
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	f000 80be 	beq.w	8012f20 <CST_ModemCmd+0x20c>
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "config",
 8012da4:	9c09      	ldr	r4, [sp, #36]	; 0x24
					crs_strlen((uint8_t*) argv_p[0])) == 0) {
 8012da6:	4620      	mov	r0, r4
 8012da8:	f005 f8c4 	bl	8017f34 <crs_strlen>
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "config",
 8012dac:	4982      	ldr	r1, [pc, #520]	; (8012fb8 <CST_ModemCmd+0x2a4>)
					crs_strlen((uint8_t*) argv_p[0])) == 0) {
 8012dae:	4602      	mov	r2, r0
			} else if (memcmp((const CRC_CHAR_t*) argv_p[0], "config",
 8012db0:	4620      	mov	r0, r4
 8012db2:	f00a f835 	bl	801ce20 <memcmp>
 8012db6:	4604      	mov	r4, r0
 8012db8:	2800      	cmp	r0, #0
 8012dba:	f040 851c 	bne.w	80137f6 <CST_ModemCmd+0xae2>
				if (argc == 1U) {
 8012dbe:	2d01      	cmp	r5, #1
 8012dc0:	f040 80b1 	bne.w	8012f26 <CST_ModemCmd+0x212>
					PRINT_FORCE("scanmode  : (mask=0x%08x) %s",
 8012dc4:	4b7d      	ldr	r3, [pc, #500]	; (8012fbc <CST_ModemCmd+0x2a8>)
 8012dc6:	497e      	ldr	r1, [pc, #504]	; (8012fc0 <CST_ModemCmd+0x2ac>)
 8012dc8:	781a      	ldrb	r2, [r3, #0]
 8012dca:	4b7e      	ldr	r3, [pc, #504]	; (8012fc4 <CST_ModemCmd+0x2b0>)
 8012dcc:	4876      	ldr	r0, [pc, #472]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dd2:	4a7d      	ldr	r2, [pc, #500]	; (8012fc8 <CST_ModemCmd+0x2b4>)
					PRINT_FORCE("GSM bands : (mask=0x%lx%08lx)",
 8012dd4:	4f7d      	ldr	r7, [pc, #500]	; (8012fcc <CST_ModemCmd+0x2b8>)
					PRINT_FORCE("scanmode  : (mask=0x%08x) %s",
 8012dd6:	7812      	ldrb	r2, [r2, #0]
					PRINT_FORCE("GSM bands : (mask=0x%lx%08lx)",
 8012dd8:	4e7d      	ldr	r6, [pc, #500]	; (8012fd0 <CST_ModemCmd+0x2bc>)
					PRINT_FORCE("scanmode  : (mask=0x%08x) %s",
 8012dda:	f00a f86d 	bl	801ceb8 <sprintf>
 8012dde:	4872      	ldr	r0, [pc, #456]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012de0:	f005 f8a8 	bl	8017f34 <crs_strlen>
 8012de4:	4a70      	ldr	r2, [pc, #448]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012de6:	b283      	uxth	r3, r0
 8012de8:	4629      	mov	r1, r5
 8012dea:	2002      	movs	r0, #2
 8012dec:	f005 f8e0 	bl	8017fb0 <traceIF_itmPrint>
 8012df0:	486d      	ldr	r0, [pc, #436]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012df2:	f005 f89f 	bl	8017f34 <crs_strlen>
 8012df6:	496c      	ldr	r1, [pc, #432]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012df8:	b282      	uxth	r2, r0
 8012dfa:	2002      	movs	r0, #2
 8012dfc:	f005 fb18 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("iotopmode : (mask=0x%08lx) %s",
 8012e00:	4b74      	ldr	r3, [pc, #464]	; (8012fd4 <CST_ModemCmd+0x2c0>)
 8012e02:	4975      	ldr	r1, [pc, #468]	; (8012fd8 <CST_ModemCmd+0x2c4>)
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	4b75      	ldr	r3, [pc, #468]	; (8012fdc <CST_ModemCmd+0x2c8>)
 8012e08:	4867      	ldr	r0, [pc, #412]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e0e:	f00a f853 	bl	801ceb8 <sprintf>
 8012e12:	4865      	ldr	r0, [pc, #404]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e14:	f005 f88e 	bl	8017f34 <crs_strlen>
 8012e18:	4a63      	ldr	r2, [pc, #396]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e1a:	b283      	uxth	r3, r0
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	2002      	movs	r0, #2
 8012e20:	f005 f8c6 	bl	8017fb0 <traceIF_itmPrint>
 8012e24:	4860      	ldr	r0, [pc, #384]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e26:	f005 f885 	bl	8017f34 <crs_strlen>
 8012e2a:	495f      	ldr	r1, [pc, #380]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e2c:	b282      	uxth	r2, r0
 8012e2e:	2002      	movs	r0, #2
 8012e30:	f005 fafe 	bl	8018430 <traceIF_uartPrintForce>
					PRINT_FORCE("GSM bands : (mask=0x%lx%08lx)",
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	6832      	ldr	r2, [r6, #0]
 8012e38:	4969      	ldr	r1, [pc, #420]	; (8012fe0 <CST_ModemCmd+0x2cc>)
 8012e3a:	485b      	ldr	r0, [pc, #364]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e3c:	f00a f83c 	bl	801ceb8 <sprintf>
 8012e40:	4859      	ldr	r0, [pc, #356]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e42:	f005 f877 	bl	8017f34 <crs_strlen>
 8012e46:	4a58      	ldr	r2, [pc, #352]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e48:	b283      	uxth	r3, r0
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	2002      	movs	r0, #2
 8012e4e:	f005 f8af 	bl	8017fb0 <traceIF_itmPrint>
 8012e52:	4855      	ldr	r0, [pc, #340]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e54:	f005 f86e 	bl	8017f34 <crs_strlen>
 8012e58:	4953      	ldr	r1, [pc, #332]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e5a:	b282      	uxth	r2, r0
 8012e5c:	2002      	movs	r0, #2
 8012e5e:	f005 fae7 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_gsmband_MSB_default,
 8012e62:	6839      	ldr	r1, [r7, #0]
 8012e64:	6830      	ldr	r0, [r6, #0]
					PRINT_FORCE("M1 bands  : (mask=0x%lx%08lx)",
 8012e66:	4f5f      	ldr	r7, [pc, #380]	; (8012fe4 <CST_ModemCmd+0x2d0>)
 8012e68:	4e5f      	ldr	r6, [pc, #380]	; (8012fe8 <CST_ModemCmd+0x2d4>)
					CST_CMD_display_bitmap_name(cst_cmd_gsmband_MSB_default,
 8012e6a:	4a60      	ldr	r2, [pc, #384]	; (8012fec <CST_ModemCmd+0x2d8>)
 8012e6c:	f7fd ff0a 	bl	8010c84 <CST_CMD_display_bitmap_name>
					PRINT_FORCE("M1 bands  : (mask=0x%lx%08lx)",
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	6832      	ldr	r2, [r6, #0]
 8012e74:	495e      	ldr	r1, [pc, #376]	; (8012ff0 <CST_ModemCmd+0x2dc>)
 8012e76:	484c      	ldr	r0, [pc, #304]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e78:	f00a f81e 	bl	801ceb8 <sprintf>
 8012e7c:	484a      	ldr	r0, [pc, #296]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e7e:	f005 f859 	bl	8017f34 <crs_strlen>
 8012e82:	4a49      	ldr	r2, [pc, #292]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e84:	b283      	uxth	r3, r0
 8012e86:	4629      	mov	r1, r5
 8012e88:	2002      	movs	r0, #2
 8012e8a:	f005 f891 	bl	8017fb0 <traceIF_itmPrint>
 8012e8e:	4846      	ldr	r0, [pc, #280]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e90:	f005 f850 	bl	8017f34 <crs_strlen>
 8012e94:	4944      	ldr	r1, [pc, #272]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012e96:	b282      	uxth	r2, r0
 8012e98:	2002      	movs	r0, #2
 8012e9a:	f005 fac9 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_m1band_MSB_default,
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	6830      	ldr	r0, [r6, #0]
					PRINT_FORCE("NB1 bands : (mask=0x%lx%08lx)",
 8012ea2:	4f54      	ldr	r7, [pc, #336]	; (8012ff4 <CST_ModemCmd+0x2e0>)
 8012ea4:	4e54      	ldr	r6, [pc, #336]	; (8012ff8 <CST_ModemCmd+0x2e4>)
					CST_CMD_display_bitmap_name(cst_cmd_m1band_MSB_default,
 8012ea6:	4a55      	ldr	r2, [pc, #340]	; (8012ffc <CST_ModemCmd+0x2e8>)
 8012ea8:	f7fd feec 	bl	8010c84 <CST_CMD_display_bitmap_name>
					PRINT_FORCE("NB1 bands : (mask=0x%lx%08lx)",
 8012eac:	6832      	ldr	r2, [r6, #0]
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	4953      	ldr	r1, [pc, #332]	; (8013000 <CST_ModemCmd+0x2ec>)
 8012eb2:	483d      	ldr	r0, [pc, #244]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012eb4:	f00a f800 	bl	801ceb8 <sprintf>
 8012eb8:	483b      	ldr	r0, [pc, #236]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012eba:	f005 f83b 	bl	8017f34 <crs_strlen>
 8012ebe:	4a3a      	ldr	r2, [pc, #232]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012ec0:	b283      	uxth	r3, r0
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	2002      	movs	r0, #2
 8012ec6:	f005 f873 	bl	8017fb0 <traceIF_itmPrint>
 8012eca:	4837      	ldr	r0, [pc, #220]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012ecc:	f005 f832 	bl	8017f34 <crs_strlen>
 8012ed0:	4935      	ldr	r1, [pc, #212]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012ed2:	b282      	uxth	r2, r0
 8012ed4:	2002      	movs	r0, #2
 8012ed6:	f005 faab 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_nb1band_MSB_default,
 8012eda:	6830      	ldr	r0, [r6, #0]
					PRINT_FORCE("Scan seq : (mask=0x%06lx)",
 8012edc:	4e49      	ldr	r6, [pc, #292]	; (8013004 <CST_ModemCmd+0x2f0>)
					CST_CMD_display_bitmap_name(cst_cmd_nb1band_MSB_default,
 8012ede:	4a4a      	ldr	r2, [pc, #296]	; (8013008 <CST_ModemCmd+0x2f4>)
 8012ee0:	6839      	ldr	r1, [r7, #0]
 8012ee2:	f7fd fecf 	bl	8010c84 <CST_CMD_display_bitmap_name>
					PRINT_FORCE("Scan seq : (mask=0x%06lx)",
 8012ee6:	6832      	ldr	r2, [r6, #0]
 8012ee8:	4948      	ldr	r1, [pc, #288]	; (801300c <CST_ModemCmd+0x2f8>)
 8012eea:	482f      	ldr	r0, [pc, #188]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012eec:	f009 ffe4 	bl	801ceb8 <sprintf>
 8012ef0:	482d      	ldr	r0, [pc, #180]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012ef2:	f005 f81f 	bl	8017f34 <crs_strlen>
 8012ef6:	4a2c      	ldr	r2, [pc, #176]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012ef8:	b283      	uxth	r3, r0
 8012efa:	4629      	mov	r1, r5
 8012efc:	2002      	movs	r0, #2
 8012efe:	f005 f857 	bl	8017fb0 <traceIF_itmPrint>
 8012f02:	4829      	ldr	r0, [pc, #164]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012f04:	f005 f816 	bl	8017f34 <crs_strlen>
 8012f08:	4927      	ldr	r1, [pc, #156]	; (8012fa8 <CST_ModemCmd+0x294>)
 8012f0a:	b282      	uxth	r2, r0
 8012f0c:	2002      	movs	r0, #2
 8012f0e:	f005 fa8f 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_seq_name(cst_cmd_scanseq_default,
 8012f12:	6830      	ldr	r0, [r6, #0]
							CST_CMD_display_seq_name(cst_cmd_scanseq_default,
 8012f14:	f7ff fed6 	bl	8012cc4 <CST_CMD_display_seq_name.constprop.0>
 8012f18:	e0cb      	b.n	80130b2 <CST_ModemCmd+0x39e>
			if (argc == 0U) {
 8012f1a:	2d00      	cmp	r5, #0
 8012f1c:	f47f af36 	bne.w	8012d8c <CST_ModemCmd+0x78>
				CST_ModemHelpCmd();
 8012f20:	f7fd ff3a 	bl	8010d98 <CST_ModemHelpCmd>
 8012f24:	e715      	b.n	8012d52 <CST_ModemCmd+0x3e>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nwscanmode",
 8012f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f005 f803 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nwscanmode",
 8012f2e:	4938      	ldr	r1, [pc, #224]	; (8013010 <CST_ModemCmd+0x2fc>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 8012f30:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nwscanmode",
 8012f32:	4620      	mov	r0, r4
 8012f34:	f009 ff74 	bl	801ce20 <memcmp>
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	f040 80d3 	bne.w	80130e4 <CST_ModemCmd+0x3d0>
					if (argc == 3U) {
 8012f3e:	2d03      	cmp	r5, #3
 8012f40:	4d1e      	ldr	r5, [pc, #120]	; (8012fbc <CST_ModemCmd+0x2a8>)
 8012f42:	d10d      	bne.n	8012f60 <CST_ModemCmd+0x24c>
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "AUTO",
 8012f44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f46:	4620      	mov	r0, r4
 8012f48:	f004 fff4 	bl	8017f34 <crs_strlen>
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "AUTO",
 8012f4c:	4931      	ldr	r1, [pc, #196]	; (8013014 <CST_ModemCmd+0x300>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f4e:	4602      	mov	r2, r0
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "AUTO",
 8012f50:	4620      	mov	r0, r4
 8012f52:	f009 ff65 	bl	801ce20 <memcmp>
 8012f56:	b928      	cbnz	r0, 8012f64 <CST_ModemCmd+0x250>
							cst_cmd_nwscanmode_default =
 8012f58:	4b1b      	ldr	r3, [pc, #108]	; (8012fc8 <CST_ModemCmd+0x2b4>)
							cst_display_nwscanmode_default =
 8012f5a:	7028      	strb	r0, [r5, #0]
							cst_cmd_nwscanmode_default =
 8012f5c:	2213      	movs	r2, #19
 8012f5e:	701a      	strb	r2, [r3, #0]
	cmd_status = CMD_OK;
 8012f60:	4604      	mov	r4, r0
 8012f62:	e08d      	b.n	8013080 <CST_ModemCmd+0x36c>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "GSM",
 8012f64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f66:	4620      	mov	r0, r4
 8012f68:	f004 ffe4 	bl	8017f34 <crs_strlen>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "GSM",
 8012f6c:	492a      	ldr	r1, [pc, #168]	; (8013018 <CST_ModemCmd+0x304>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f6e:	4602      	mov	r2, r0
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "GSM",
 8012f70:	4620      	mov	r0, r4
 8012f72:	f009 ff55 	bl	801ce20 <memcmp>
 8012f76:	b928      	cbnz	r0, 8012f84 <CST_ModemCmd+0x270>
							cst_cmd_nwscanmode_default =
 8012f78:	4b13      	ldr	r3, [pc, #76]	; (8012fc8 <CST_ModemCmd+0x2b4>)
 8012f7a:	2214      	movs	r2, #20
 8012f7c:	701a      	strb	r2, [r3, #0]
							cst_display_nwscanmode_default =
 8012f7e:	2301      	movs	r3, #1
							cst_display_nwscanmode_default =
 8012f80:	702b      	strb	r3, [r5, #0]
 8012f82:	e7ed      	b.n	8012f60 <CST_ModemCmd+0x24c>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "LTE",
 8012f84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f86:	4620      	mov	r0, r4
 8012f88:	f004 ffd4 	bl	8017f34 <crs_strlen>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "LTE",
 8012f8c:	4923      	ldr	r1, [pc, #140]	; (801301c <CST_ModemCmd+0x308>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8012f8e:	4602      	mov	r2, r0
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "LTE",
 8012f90:	4620      	mov	r0, r4
 8012f92:	f009 ff45 	bl	801ce20 <memcmp>
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d142      	bne.n	8013020 <CST_ModemCmd+0x30c>
							cst_cmd_nwscanmode_default =
 8012f9a:	4b0b      	ldr	r3, [pc, #44]	; (8012fc8 <CST_ModemCmd+0x2b4>)
 8012f9c:	2215      	movs	r2, #21
 8012f9e:	701a      	strb	r2, [r3, #0]
							cst_display_nwscanmode_default =
 8012fa0:	2302      	movs	r3, #2
 8012fa2:	e7ed      	b.n	8012f80 <CST_ModemCmd+0x26c>
 8012fa4:	08029a46 	.word	0x08029a46
 8012fa8:	20008ff8 	.word	0x20008ff8
 8012fac:	08028e19 	.word	0x08028e19
 8012fb0:	0802837f 	.word	0x0802837f
 8012fb4:	08028e1c 	.word	0x08028e1c
 8012fb8:	08029417 	.word	0x08029417
 8012fbc:	20003c08 	.word	0x20003c08
 8012fc0:	08029689 	.word	0x08029689
 8012fc4:	08029f58 	.word	0x08029f58
 8012fc8:	20000234 	.word	0x20000234
 8012fcc:	20000228 	.word	0x20000228
 8012fd0:	20003bac 	.word	0x20003bac
 8012fd4:	20003bb0 	.word	0x20003bb0
 8012fd8:	080296a8 	.word	0x080296a8
 8012fdc:	08029dc0 	.word	0x08029dc0
 8012fe0:	080296c8 	.word	0x080296c8
 8012fe4:	2000022c 	.word	0x2000022c
 8012fe8:	20003bb4 	.word	0x20003bb4
 8012fec:	08029d6c 	.word	0x08029d6c
 8012ff0:	080296e8 	.word	0x080296e8
 8012ff4:	20000230 	.word	0x20000230
 8012ff8:	20003bb8 	.word	0x20003bb8
 8012ffc:	08029dcc 	.word	0x08029dcc
 8013000:	08029708 	.word	0x08029708
 8013004:	20000238 	.word	0x20000238
 8013008:	08029e98 	.word	0x08029e98
 801300c:	08029728 	.word	0x08029728
 8013010:	08029744 	.word	0x08029744
 8013014:	0802974f 	.word	0x0802974f
 8013018:	08029d00 	.word	0x08029d00
 801301c:	08029754 	.word	0x08029754
							PRINT_FORCE("%s %s Bad parameter: %s",
 8013020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013022:	4a9c      	ldr	r2, [pc, #624]	; (8013294 <CST_ModemCmd+0x580>)
 8013024:	499c      	ldr	r1, [pc, #624]	; (8013298 <CST_ModemCmd+0x584>)
 8013026:	9300      	str	r3, [sp, #0]
 8013028:	489c      	ldr	r0, [pc, #624]	; (801329c <CST_ModemCmd+0x588>)
 801302a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801302c:	f009 ff44 	bl	801ceb8 <sprintf>
 8013030:	489a      	ldr	r0, [pc, #616]	; (801329c <CST_ModemCmd+0x588>)
 8013032:	f004 ff7f 	bl	8017f34 <crs_strlen>
 8013036:	4a99      	ldr	r2, [pc, #612]	; (801329c <CST_ModemCmd+0x588>)
 8013038:	b283      	uxth	r3, r0
 801303a:	2101      	movs	r1, #1
 801303c:	2002      	movs	r0, #2
 801303e:	f004 ffb7 	bl	8017fb0 <traceIF_itmPrint>
 8013042:	4896      	ldr	r0, [pc, #600]	; (801329c <CST_ModemCmd+0x588>)
 8013044:	f004 ff76 	bl	8017f34 <crs_strlen>
 8013048:	4994      	ldr	r1, [pc, #592]	; (801329c <CST_ModemCmd+0x588>)
 801304a:	b282      	uxth	r2, r0
 801304c:	2002      	movs	r0, #2
 801304e:	f005 f9ef 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 8013052:	4a90      	ldr	r2, [pc, #576]	; (8013294 <CST_ModemCmd+0x580>)
 8013054:	4992      	ldr	r1, [pc, #584]	; (80132a0 <CST_ModemCmd+0x58c>)
 8013056:	4891      	ldr	r0, [pc, #580]	; (801329c <CST_ModemCmd+0x588>)
 8013058:	f009 ff2e 	bl	801ceb8 <sprintf>
 801305c:	488f      	ldr	r0, [pc, #572]	; (801329c <CST_ModemCmd+0x588>)
 801305e:	f004 ff69 	bl	8017f34 <crs_strlen>
 8013062:	4a8e      	ldr	r2, [pc, #568]	; (801329c <CST_ModemCmd+0x588>)
 8013064:	b283      	uxth	r3, r0
 8013066:	2101      	movs	r1, #1
 8013068:	2002      	movs	r0, #2
 801306a:	f004 ffa1 	bl	8017fb0 <traceIF_itmPrint>
 801306e:	488b      	ldr	r0, [pc, #556]	; (801329c <CST_ModemCmd+0x588>)
 8013070:	f004 ff60 	bl	8017f34 <crs_strlen>
 8013074:	4989      	ldr	r1, [pc, #548]	; (801329c <CST_ModemCmd+0x588>)
 8013076:	b282      	uxth	r2, r0
 8013078:	2002      	movs	r0, #2
 801307a:	f005 f9d9 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 801307e:	2401      	movs	r4, #1
					PRINT_FORCE("scanmode: %s\n\r",
 8013080:	782a      	ldrb	r2, [r5, #0]
 8013082:	4b88      	ldr	r3, [pc, #544]	; (80132a4 <CST_ModemCmd+0x590>)
 8013084:	4988      	ldr	r1, [pc, #544]	; (80132a8 <CST_ModemCmd+0x594>)
 8013086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
					PRINT_FORCE("iotopmode: %s\n\r",
 801308a:	4884      	ldr	r0, [pc, #528]	; (801329c <CST_ModemCmd+0x588>)
 801308c:	f009 ff14 	bl	801ceb8 <sprintf>
 8013090:	4882      	ldr	r0, [pc, #520]	; (801329c <CST_ModemCmd+0x588>)
 8013092:	f004 ff4f 	bl	8017f34 <crs_strlen>
 8013096:	4a81      	ldr	r2, [pc, #516]	; (801329c <CST_ModemCmd+0x588>)
 8013098:	b283      	uxth	r3, r0
 801309a:	2101      	movs	r1, #1
 801309c:	2002      	movs	r0, #2
 801309e:	f004 ff87 	bl	8017fb0 <traceIF_itmPrint>
 80130a2:	487e      	ldr	r0, [pc, #504]	; (801329c <CST_ModemCmd+0x588>)
 80130a4:	f004 ff46 	bl	8017f34 <crs_strlen>
 80130a8:	497c      	ldr	r1, [pc, #496]	; (801329c <CST_ModemCmd+0x588>)
 80130aa:	b282      	uxth	r2, r0
 80130ac:	2002      	movs	r0, #2
 80130ae:	f005 f9bf 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("")
 80130b2:	497e      	ldr	r1, [pc, #504]	; (80132ac <CST_ModemCmd+0x598>)
 80130b4:	4879      	ldr	r0, [pc, #484]	; (801329c <CST_ModemCmd+0x588>)
 80130b6:	f009 ff6f 	bl	801cf98 <strcpy>
 80130ba:	4878      	ldr	r0, [pc, #480]	; (801329c <CST_ModemCmd+0x588>)
 80130bc:	f004 ff3a 	bl	8017f34 <crs_strlen>
 80130c0:	4a76      	ldr	r2, [pc, #472]	; (801329c <CST_ModemCmd+0x588>)
 80130c2:	b283      	uxth	r3, r0
 80130c4:	2101      	movs	r1, #1
 80130c6:	2002      	movs	r0, #2
 80130c8:	f004 ff72 	bl	8017fb0 <traceIF_itmPrint>
 80130cc:	4873      	ldr	r0, [pc, #460]	; (801329c <CST_ModemCmd+0x588>)
 80130ce:	f004 ff31 	bl	8017f34 <crs_strlen>
 80130d2:	4972      	ldr	r1, [pc, #456]	; (801329c <CST_ModemCmd+0x588>)
 80130d4:	b282      	uxth	r2, r0
 80130d6:	2002      	movs	r0, #2
 80130d8:	f005 f9aa 	bl	8018430 <traceIF_uartPrintForce>
}
 80130dc:	4620      	mov	r0, r4
 80130de:	b016      	add	sp, #88	; 0x58
 80130e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "iotopmode",
 80130e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80130e6:	4620      	mov	r0, r4
 80130e8:	f004 ff24 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "iotopmode",
 80130ec:	4970      	ldr	r1, [pc, #448]	; (80132b0 <CST_ModemCmd+0x59c>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80130ee:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "iotopmode",
 80130f0:	4620      	mov	r0, r4
 80130f2:	f009 fe95 	bl	801ce20 <memcmp>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d15e      	bne.n	80131b8 <CST_ModemCmd+0x4a4>
					if (argc == 3U) {
 80130fa:	2d03      	cmp	r5, #3
 80130fc:	4d6d      	ldr	r5, [pc, #436]	; (80132b4 <CST_ModemCmd+0x5a0>)
 80130fe:	d10a      	bne.n	8013116 <CST_ModemCmd+0x402>
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "M1",
 8013100:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8013102:	4620      	mov	r0, r4
 8013104:	f004 ff16 	bl	8017f34 <crs_strlen>
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "M1",
 8013108:	496b      	ldr	r1, [pc, #428]	; (80132b8 <CST_ModemCmd+0x5a4>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 801310a:	4602      	mov	r2, r0
						if (memcmp((const CRC_CHAR_t*) argv_p[2], "M1",
 801310c:	4620      	mov	r0, r4
 801310e:	f009 fe87 	bl	801ce20 <memcmp>
 8013112:	b910      	cbnz	r0, 801311a <CST_ModemCmd+0x406>
							cst_cmd_iotopmode_default = QCFGIOTOPMODE_CATM1;
 8013114:	6028      	str	r0, [r5, #0]
	cmd_status = CMD_OK;
 8013116:	4604      	mov	r4, r0
 8013118:	e048      	b.n	80131ac <CST_ModemCmd+0x498>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "NB1",
 801311a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 801311c:	4620      	mov	r0, r4
 801311e:	f004 ff09 	bl	8017f34 <crs_strlen>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "NB1",
 8013122:	4966      	ldr	r1, [pc, #408]	; (80132bc <CST_ModemCmd+0x5a8>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8013124:	4602      	mov	r2, r0
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "NB1",
 8013126:	4620      	mov	r0, r4
 8013128:	f009 fe7a 	bl	801ce20 <memcmp>
 801312c:	b910      	cbnz	r0, 8013134 <CST_ModemCmd+0x420>
							cst_cmd_iotopmode_default = QCFGIOTOPMODE_CATNB1;
 801312e:	2301      	movs	r3, #1
							cst_cmd_iotopmode_default =
 8013130:	602b      	str	r3, [r5, #0]
 8013132:	e7f0      	b.n	8013116 <CST_ModemCmd+0x402>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "ALL",
 8013134:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 8013136:	4620      	mov	r0, r4
 8013138:	f004 fefc 	bl	8017f34 <crs_strlen>
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "ALL",
 801313c:	4960      	ldr	r1, [pc, #384]	; (80132c0 <CST_ModemCmd+0x5ac>)
								crs_strlen((uint8_t*) argv_p[2])) == 0) {
 801313e:	4602      	mov	r2, r0
						} else if (memcmp((const CRC_CHAR_t*) argv_p[2], "ALL",
 8013140:	4620      	mov	r0, r4
 8013142:	f009 fe6d 	bl	801ce20 <memcmp>
 8013146:	b908      	cbnz	r0, 801314c <CST_ModemCmd+0x438>
							cst_cmd_iotopmode_default =
 8013148:	2302      	movs	r3, #2
 801314a:	e7f1      	b.n	8013130 <CST_ModemCmd+0x41c>
							PRINT_FORCE("%s %s Bad parameter: %s",
 801314c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801314e:	4a51      	ldr	r2, [pc, #324]	; (8013294 <CST_ModemCmd+0x580>)
 8013150:	4951      	ldr	r1, [pc, #324]	; (8013298 <CST_ModemCmd+0x584>)
 8013152:	9300      	str	r3, [sp, #0]
 8013154:	4851      	ldr	r0, [pc, #324]	; (801329c <CST_ModemCmd+0x588>)
 8013156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013158:	f009 feae 	bl	801ceb8 <sprintf>
 801315c:	484f      	ldr	r0, [pc, #316]	; (801329c <CST_ModemCmd+0x588>)
 801315e:	f004 fee9 	bl	8017f34 <crs_strlen>
 8013162:	4a4e      	ldr	r2, [pc, #312]	; (801329c <CST_ModemCmd+0x588>)
 8013164:	b283      	uxth	r3, r0
 8013166:	2101      	movs	r1, #1
 8013168:	2002      	movs	r0, #2
 801316a:	f004 ff21 	bl	8017fb0 <traceIF_itmPrint>
 801316e:	484b      	ldr	r0, [pc, #300]	; (801329c <CST_ModemCmd+0x588>)
 8013170:	f004 fee0 	bl	8017f34 <crs_strlen>
 8013174:	4949      	ldr	r1, [pc, #292]	; (801329c <CST_ModemCmd+0x588>)
 8013176:	b282      	uxth	r2, r0
 8013178:	2002      	movs	r0, #2
 801317a:	f005 f959 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 801317e:	4a45      	ldr	r2, [pc, #276]	; (8013294 <CST_ModemCmd+0x580>)
 8013180:	4950      	ldr	r1, [pc, #320]	; (80132c4 <CST_ModemCmd+0x5b0>)
 8013182:	4846      	ldr	r0, [pc, #280]	; (801329c <CST_ModemCmd+0x588>)
 8013184:	f009 fe98 	bl	801ceb8 <sprintf>
 8013188:	4844      	ldr	r0, [pc, #272]	; (801329c <CST_ModemCmd+0x588>)
 801318a:	f004 fed3 	bl	8017f34 <crs_strlen>
 801318e:	4a43      	ldr	r2, [pc, #268]	; (801329c <CST_ModemCmd+0x588>)
 8013190:	b283      	uxth	r3, r0
 8013192:	2101      	movs	r1, #1
 8013194:	2002      	movs	r0, #2
 8013196:	f004 ff0b 	bl	8017fb0 <traceIF_itmPrint>
 801319a:	4840      	ldr	r0, [pc, #256]	; (801329c <CST_ModemCmd+0x588>)
 801319c:	f004 feca 	bl	8017f34 <crs_strlen>
 80131a0:	493e      	ldr	r1, [pc, #248]	; (801329c <CST_ModemCmd+0x588>)
 80131a2:	b282      	uxth	r2, r0
 80131a4:	2002      	movs	r0, #2
 80131a6:	f005 f943 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 80131aa:	2401      	movs	r4, #1
					PRINT_FORCE("iotopmode: %s\n\r",
 80131ac:	682a      	ldr	r2, [r5, #0]
 80131ae:	4b46      	ldr	r3, [pc, #280]	; (80132c8 <CST_ModemCmd+0x5b4>)
 80131b0:	4946      	ldr	r1, [pc, #280]	; (80132cc <CST_ModemCmd+0x5b8>)
 80131b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80131b6:	e768      	b.n	801308a <CST_ModemCmd+0x376>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "gsmband",
 80131b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80131ba:	4620      	mov	r0, r4
 80131bc:	f004 feba 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "gsmband",
 80131c0:	4943      	ldr	r1, [pc, #268]	; (80132d0 <CST_ModemCmd+0x5bc>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80131c2:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "gsmband",
 80131c4:	4620      	mov	r0, r4
 80131c6:	f009 fe2b 	bl	801ce20 <memcmp>
 80131ca:	2800      	cmp	r0, #0
 80131cc:	f040 808e 	bne.w	80132ec <CST_ModemCmd+0x5d8>
					if (argc >= 3U) {
 80131d0:	2d02      	cmp	r5, #2
 80131d2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80132e8 <CST_ModemCmd+0x5d4>
 80131d6:	4e3f      	ldr	r6, [pc, #252]	; (80132d4 <CST_ModemCmd+0x5c0>)
 80131d8:	d05a      	beq.n	8013290 <CST_ModemCmd+0x57c>
						ret = CST_CMD_get_band(CST_GSMband,
 80131da:	ab08      	add	r3, sp, #32
 80131dc:	9300      	str	r3, [sp, #0]
 80131de:	483e      	ldr	r0, [pc, #248]	; (80132d8 <CST_ModemCmd+0x5c4>)
 80131e0:	ab07      	add	r3, sp, #28
 80131e2:	462a      	mov	r2, r5
 80131e4:	4639      	mov	r1, r7
 80131e6:	f7fd fd81 	bl	8010cec <CST_CMD_get_band>
						if (ret != 0U) {
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d04b      	beq.n	8013286 <CST_ModemCmd+0x572>
							PRINT_FORCE("%s Bad parameter", CST_cmd_modem_label)
 80131ee:	4a29      	ldr	r2, [pc, #164]	; (8013294 <CST_ModemCmd+0x580>)
 80131f0:	493a      	ldr	r1, [pc, #232]	; (80132dc <CST_ModemCmd+0x5c8>)
 80131f2:	482a      	ldr	r0, [pc, #168]	; (801329c <CST_ModemCmd+0x588>)
 80131f4:	f009 fe60 	bl	801ceb8 <sprintf>
 80131f8:	4828      	ldr	r0, [pc, #160]	; (801329c <CST_ModemCmd+0x588>)
 80131fa:	f004 fe9b 	bl	8017f34 <crs_strlen>
 80131fe:	4a27      	ldr	r2, [pc, #156]	; (801329c <CST_ModemCmd+0x588>)
 8013200:	b283      	uxth	r3, r0
 8013202:	2101      	movs	r1, #1
 8013204:	2002      	movs	r0, #2
 8013206:	f004 fed3 	bl	8017fb0 <traceIF_itmPrint>
 801320a:	4824      	ldr	r0, [pc, #144]	; (801329c <CST_ModemCmd+0x588>)
 801320c:	f004 fe92 	bl	8017f34 <crs_strlen>
 8013210:	4922      	ldr	r1, [pc, #136]	; (801329c <CST_ModemCmd+0x588>)
 8013212:	b282      	uxth	r2, r0
 8013214:	2002      	movs	r0, #2
 8013216:	f005 f90b 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 801321a:	4a1e      	ldr	r2, [pc, #120]	; (8013294 <CST_ModemCmd+0x580>)
 801321c:	4930      	ldr	r1, [pc, #192]	; (80132e0 <CST_ModemCmd+0x5cc>)
 801321e:	481f      	ldr	r0, [pc, #124]	; (801329c <CST_ModemCmd+0x588>)
 8013220:	f009 fe4a 	bl	801ceb8 <sprintf>
 8013224:	481d      	ldr	r0, [pc, #116]	; (801329c <CST_ModemCmd+0x588>)
 8013226:	f004 fe85 	bl	8017f34 <crs_strlen>
 801322a:	4a1c      	ldr	r2, [pc, #112]	; (801329c <CST_ModemCmd+0x588>)
 801322c:	b283      	uxth	r3, r0
 801322e:	2101      	movs	r1, #1
 8013230:	2002      	movs	r0, #2
 8013232:	f004 febd 	bl	8017fb0 <traceIF_itmPrint>
 8013236:	4819      	ldr	r0, [pc, #100]	; (801329c <CST_ModemCmd+0x588>)
 8013238:	f004 fe7c 	bl	8017f34 <crs_strlen>
 801323c:	4917      	ldr	r1, [pc, #92]	; (801329c <CST_ModemCmd+0x588>)
 801323e:	b282      	uxth	r2, r0
 8013240:	2002      	movs	r0, #2
 8013242:	f005 f8f5 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 8013246:	2401      	movs	r4, #1
					PRINT_FORCE("Gsm Bands: (mask=0x%lx%08lx)\n\r",
 8013248:	f8d8 3000 	ldr.w	r3, [r8]
 801324c:	6832      	ldr	r2, [r6, #0]
 801324e:	4925      	ldr	r1, [pc, #148]	; (80132e4 <CST_ModemCmd+0x5d0>)
 8013250:	4812      	ldr	r0, [pc, #72]	; (801329c <CST_ModemCmd+0x588>)
 8013252:	f009 fe31 	bl	801ceb8 <sprintf>
 8013256:	4811      	ldr	r0, [pc, #68]	; (801329c <CST_ModemCmd+0x588>)
 8013258:	f004 fe6c 	bl	8017f34 <crs_strlen>
 801325c:	4a0f      	ldr	r2, [pc, #60]	; (801329c <CST_ModemCmd+0x588>)
 801325e:	b283      	uxth	r3, r0
 8013260:	2101      	movs	r1, #1
 8013262:	2002      	movs	r0, #2
 8013264:	f004 fea4 	bl	8017fb0 <traceIF_itmPrint>
 8013268:	480c      	ldr	r0, [pc, #48]	; (801329c <CST_ModemCmd+0x588>)
 801326a:	f004 fe63 	bl	8017f34 <crs_strlen>
 801326e:	490b      	ldr	r1, [pc, #44]	; (801329c <CST_ModemCmd+0x588>)
 8013270:	b282      	uxth	r2, r0
 8013272:	2002      	movs	r0, #2
 8013274:	f005 f8dc 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_gsmband_MSB_default,
 8013278:	4a17      	ldr	r2, [pc, #92]	; (80132d8 <CST_ModemCmd+0x5c4>)
					CST_CMD_display_bitmap_name(cst_cmd_nb1band_MSB_default,
 801327a:	f8d8 1000 	ldr.w	r1, [r8]
 801327e:	6830      	ldr	r0, [r6, #0]
 8013280:	f7fd fd00 	bl	8010c84 <CST_CMD_display_bitmap_name>
 8013284:	e715      	b.n	80130b2 <CST_ModemCmd+0x39e>
							cst_cmd_gsmband_MSB_default = gsmband_value_msb;
 8013286:	9b07      	ldr	r3, [sp, #28]
 8013288:	6033      	str	r3, [r6, #0]
							cst_cmd_gsmband_LSB_default = gsmband_value_lsb;
 801328a:	9b08      	ldr	r3, [sp, #32]
 801328c:	f8c8 3000 	str.w	r3, [r8]
	cmd_status = CMD_OK;
 8013290:	4604      	mov	r4, r0
 8013292:	e7d9      	b.n	8013248 <CST_ModemCmd+0x534>
 8013294:	0802837f 	.word	0x0802837f
 8013298:	08029758 	.word	0x08029758
 801329c:	20008ff8 	.word	0x20008ff8
 80132a0:	08029772 	.word	0x08029772
 80132a4:	08029f58 	.word	0x08029f58
 80132a8:	0802979f 	.word	0x0802979f
 80132ac:	080246fe 	.word	0x080246fe
 80132b0:	080297b0 	.word	0x080297b0
 80132b4:	20003bb0 	.word	0x20003bb0
 80132b8:	08029ceb 	.word	0x08029ceb
 80132bc:	08029cdf 	.word	0x08029cdf
 80132c0:	080297ba 	.word	0x080297ba
 80132c4:	080297be 	.word	0x080297be
 80132c8:	08029dc0 	.word	0x08029dc0
 80132cc:	080297e8 	.word	0x080297e8
 80132d0:	080297fa 	.word	0x080297fa
 80132d4:	20003bac 	.word	0x20003bac
 80132d8:	08029d6c 	.word	0x08029d6c
 80132dc:	08029802 	.word	0x08029802
 80132e0:	08029815 	.word	0x08029815
 80132e4:	0802985a 	.word	0x0802985a
 80132e8:	20000228 	.word	0x20000228
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "m1band",
 80132ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80132ee:	4620      	mov	r0, r4
 80132f0:	f004 fe20 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "m1band",
 80132f4:	49ad      	ldr	r1, [pc, #692]	; (80135ac <CST_ModemCmd+0x898>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80132f6:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "m1band",
 80132f8:	4620      	mov	r0, r4
 80132fa:	f009 fd91 	bl	801ce20 <memcmp>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d171      	bne.n	80133e6 <CST_ModemCmd+0x6d2>
					if (argc >= 3U) {
 8013302:	2d02      	cmp	r5, #2
 8013304:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8013604 <CST_ModemCmd+0x8f0>
 8013308:	4ea9      	ldr	r6, [pc, #676]	; (80135b0 <CST_ModemCmd+0x89c>)
 801330a:	d06a      	beq.n	80133e2 <CST_ModemCmd+0x6ce>
						ret = CST_CMD_get_band(CST_M1band,
 801330c:	ab08      	add	r3, sp, #32
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	48a8      	ldr	r0, [pc, #672]	; (80135b4 <CST_ModemCmd+0x8a0>)
 8013312:	ab07      	add	r3, sp, #28
 8013314:	462a      	mov	r2, r5
 8013316:	4639      	mov	r1, r7
 8013318:	f7fd fce8 	bl	8010cec <CST_CMD_get_band>
						if (ret != 0U) {
 801331c:	2800      	cmp	r0, #0
 801331e:	d05b      	beq.n	80133d8 <CST_ModemCmd+0x6c4>
							PRINT_FORCE("%s Bad parameter", CST_cmd_modem_label)
 8013320:	4aa5      	ldr	r2, [pc, #660]	; (80135b8 <CST_ModemCmd+0x8a4>)
 8013322:	49a6      	ldr	r1, [pc, #664]	; (80135bc <CST_ModemCmd+0x8a8>)
 8013324:	48a6      	ldr	r0, [pc, #664]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013326:	f009 fdc7 	bl	801ceb8 <sprintf>
 801332a:	48a5      	ldr	r0, [pc, #660]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801332c:	f004 fe02 	bl	8017f34 <crs_strlen>
 8013330:	4aa3      	ldr	r2, [pc, #652]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013332:	b283      	uxth	r3, r0
 8013334:	2101      	movs	r1, #1
 8013336:	2002      	movs	r0, #2
 8013338:	f004 fe3a 	bl	8017fb0 <traceIF_itmPrint>
 801333c:	48a0      	ldr	r0, [pc, #640]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801333e:	f004 fdf9 	bl	8017f34 <crs_strlen>
 8013342:	499f      	ldr	r1, [pc, #636]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013344:	b282      	uxth	r2, r0
 8013346:	2002      	movs	r0, #2
 8013348:	f005 f872 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 801334c:	4a9a      	ldr	r2, [pc, #616]	; (80135b8 <CST_ModemCmd+0x8a4>)
 801334e:	499d      	ldr	r1, [pc, #628]	; (80135c4 <CST_ModemCmd+0x8b0>)
 8013350:	489b      	ldr	r0, [pc, #620]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013352:	f009 fdb1 	bl	801ceb8 <sprintf>
 8013356:	489a      	ldr	r0, [pc, #616]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013358:	f004 fdec 	bl	8017f34 <crs_strlen>
 801335c:	4a98      	ldr	r2, [pc, #608]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801335e:	b283      	uxth	r3, r0
 8013360:	2101      	movs	r1, #1
 8013362:	2002      	movs	r0, #2
 8013364:	f004 fe24 	bl	8017fb0 <traceIF_itmPrint>
 8013368:	4895      	ldr	r0, [pc, #596]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801336a:	f004 fde3 	bl	8017f34 <crs_strlen>
 801336e:	4994      	ldr	r1, [pc, #592]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013370:	b282      	uxth	r2, r0
 8013372:	2002      	movs	r0, #2
 8013374:	f005 f85c 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 8013378:	4993      	ldr	r1, [pc, #588]	; (80135c8 <CST_ModemCmd+0x8b4>)
 801337a:	4891      	ldr	r0, [pc, #580]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801337c:	f009 fe0c 	bl	801cf98 <strcpy>
 8013380:	488f      	ldr	r0, [pc, #572]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013382:	f004 fdd7 	bl	8017f34 <crs_strlen>
 8013386:	4a8e      	ldr	r2, [pc, #568]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013388:	b283      	uxth	r3, r0
 801338a:	2101      	movs	r1, #1
 801338c:	2002      	movs	r0, #2
 801338e:	f004 fe0f 	bl	8017fb0 <traceIF_itmPrint>
 8013392:	488b      	ldr	r0, [pc, #556]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013394:	f004 fdce 	bl	8017f34 <crs_strlen>
 8013398:	4989      	ldr	r1, [pc, #548]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801339a:	b282      	uxth	r2, r0
 801339c:	2002      	movs	r0, #2
 801339e:	f005 f847 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 80133a2:	2401      	movs	r4, #1
					PRINT_FORCE("M1 Bands: (mask=0x%lx%08lx)\n\r",
 80133a4:	f8d8 3000 	ldr.w	r3, [r8]
 80133a8:	6832      	ldr	r2, [r6, #0]
 80133aa:	4988      	ldr	r1, [pc, #544]	; (80135cc <CST_ModemCmd+0x8b8>)
 80133ac:	4884      	ldr	r0, [pc, #528]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80133ae:	f009 fd83 	bl	801ceb8 <sprintf>
 80133b2:	4883      	ldr	r0, [pc, #524]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80133b4:	f004 fdbe 	bl	8017f34 <crs_strlen>
 80133b8:	4a81      	ldr	r2, [pc, #516]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80133ba:	b283      	uxth	r3, r0
 80133bc:	2101      	movs	r1, #1
 80133be:	2002      	movs	r0, #2
 80133c0:	f004 fdf6 	bl	8017fb0 <traceIF_itmPrint>
 80133c4:	487e      	ldr	r0, [pc, #504]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80133c6:	f004 fdb5 	bl	8017f34 <crs_strlen>
 80133ca:	497d      	ldr	r1, [pc, #500]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80133cc:	b282      	uxth	r2, r0
 80133ce:	2002      	movs	r0, #2
 80133d0:	f005 f82e 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_m1band_MSB_default,
 80133d4:	4a77      	ldr	r2, [pc, #476]	; (80135b4 <CST_ModemCmd+0x8a0>)
 80133d6:	e750      	b.n	801327a <CST_ModemCmd+0x566>
							cst_cmd_m1band_MSB_default = m1band_value_msb;
 80133d8:	9b07      	ldr	r3, [sp, #28]
 80133da:	6033      	str	r3, [r6, #0]
							cst_cmd_m1band_LSB_default = m1band_value_lsb;
 80133dc:	9b08      	ldr	r3, [sp, #32]
 80133de:	f8c8 3000 	str.w	r3, [r8]
	cmd_status = CMD_OK;
 80133e2:	4604      	mov	r4, r0
 80133e4:	e7de      	b.n	80133a4 <CST_ModemCmd+0x690>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nb1band",
 80133e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80133e8:	4620      	mov	r0, r4
 80133ea:	f004 fda3 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nb1band",
 80133ee:	4978      	ldr	r1, [pc, #480]	; (80135d0 <CST_ModemCmd+0x8bc>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80133f0:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "nb1band",
 80133f2:	4620      	mov	r0, r4
 80133f4:	f009 fd14 	bl	801ce20 <memcmp>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d172      	bne.n	80134e2 <CST_ModemCmd+0x7ce>
					if (argc >= 3U) {
 80133fc:	2d02      	cmp	r5, #2
 80133fe:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8013608 <CST_ModemCmd+0x8f4>
 8013402:	4e74      	ldr	r6, [pc, #464]	; (80135d4 <CST_ModemCmd+0x8c0>)
 8013404:	d06b      	beq.n	80134de <CST_ModemCmd+0x7ca>
						ret = CST_CMD_get_band(CST_Nb1band,
 8013406:	ab08      	add	r3, sp, #32
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	4873      	ldr	r0, [pc, #460]	; (80135d8 <CST_ModemCmd+0x8c4>)
 801340c:	ab07      	add	r3, sp, #28
 801340e:	462a      	mov	r2, r5
 8013410:	4639      	mov	r1, r7
 8013412:	f7fd fc6b 	bl	8010cec <CST_CMD_get_band>
						if (ret != 0U) {
 8013416:	2800      	cmp	r0, #0
 8013418:	d05a      	beq.n	80134d0 <CST_ModemCmd+0x7bc>
							PRINT_FORCE("%s Bad parameter", CST_cmd_modem_label)
 801341a:	4a67      	ldr	r2, [pc, #412]	; (80135b8 <CST_ModemCmd+0x8a4>)
 801341c:	4967      	ldr	r1, [pc, #412]	; (80135bc <CST_ModemCmd+0x8a8>)
 801341e:	4868      	ldr	r0, [pc, #416]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013420:	f009 fd4a 	bl	801ceb8 <sprintf>
 8013424:	4866      	ldr	r0, [pc, #408]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013426:	f004 fd85 	bl	8017f34 <crs_strlen>
 801342a:	4a65      	ldr	r2, [pc, #404]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801342c:	b283      	uxth	r3, r0
 801342e:	2101      	movs	r1, #1
 8013430:	2002      	movs	r0, #2
 8013432:	f004 fdbd 	bl	8017fb0 <traceIF_itmPrint>
 8013436:	4862      	ldr	r0, [pc, #392]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013438:	f004 fd7c 	bl	8017f34 <crs_strlen>
 801343c:	4960      	ldr	r1, [pc, #384]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801343e:	b282      	uxth	r2, r0
 8013440:	2002      	movs	r0, #2
 8013442:	f004 fff5 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 8013446:	4965      	ldr	r1, [pc, #404]	; (80135dc <CST_ModemCmd+0x8c8>)
 8013448:	485d      	ldr	r0, [pc, #372]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801344a:	f009 fda5 	bl	801cf98 <strcpy>
 801344e:	485c      	ldr	r0, [pc, #368]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013450:	f004 fd70 	bl	8017f34 <crs_strlen>
 8013454:	4a5a      	ldr	r2, [pc, #360]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013456:	b283      	uxth	r3, r0
 8013458:	2101      	movs	r1, #1
 801345a:	2002      	movs	r0, #2
 801345c:	f004 fda8 	bl	8017fb0 <traceIF_itmPrint>
 8013460:	4857      	ldr	r0, [pc, #348]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013462:	f004 fd67 	bl	8017f34 <crs_strlen>
 8013466:	4956      	ldr	r1, [pc, #344]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013468:	b282      	uxth	r2, r0
 801346a:	2002      	movs	r0, #2
 801346c:	f004 ffe0 	bl	8018430 <traceIF_uartPrintForce>
							PRINT_FORCE(
 8013470:	495b      	ldr	r1, [pc, #364]	; (80135e0 <CST_ModemCmd+0x8cc>)
 8013472:	4853      	ldr	r0, [pc, #332]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013474:	f009 fd90 	bl	801cf98 <strcpy>
 8013478:	4851      	ldr	r0, [pc, #324]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801347a:	f004 fd5b 	bl	8017f34 <crs_strlen>
 801347e:	4a50      	ldr	r2, [pc, #320]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013480:	b283      	uxth	r3, r0
 8013482:	2101      	movs	r1, #1
 8013484:	2002      	movs	r0, #2
 8013486:	f004 fd93 	bl	8017fb0 <traceIF_itmPrint>
 801348a:	484d      	ldr	r0, [pc, #308]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801348c:	f004 fd52 	bl	8017f34 <crs_strlen>
 8013490:	494b      	ldr	r1, [pc, #300]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013492:	b282      	uxth	r2, r0
 8013494:	2002      	movs	r0, #2
 8013496:	f004 ffcb 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 801349a:	2401      	movs	r4, #1
					PRINT_FORCE("NB1 bands: (mask=0x%lx%08lx)",
 801349c:	f8d8 3000 	ldr.w	r3, [r8]
 80134a0:	6832      	ldr	r2, [r6, #0]
 80134a2:	4950      	ldr	r1, [pc, #320]	; (80135e4 <CST_ModemCmd+0x8d0>)
 80134a4:	4846      	ldr	r0, [pc, #280]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80134a6:	f009 fd07 	bl	801ceb8 <sprintf>
 80134aa:	4845      	ldr	r0, [pc, #276]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80134ac:	f004 fd42 	bl	8017f34 <crs_strlen>
 80134b0:	4a43      	ldr	r2, [pc, #268]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80134b2:	b283      	uxth	r3, r0
 80134b4:	2101      	movs	r1, #1
 80134b6:	2002      	movs	r0, #2
 80134b8:	f004 fd7a 	bl	8017fb0 <traceIF_itmPrint>
 80134bc:	4840      	ldr	r0, [pc, #256]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80134be:	f004 fd39 	bl	8017f34 <crs_strlen>
 80134c2:	493f      	ldr	r1, [pc, #252]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80134c4:	b282      	uxth	r2, r0
 80134c6:	2002      	movs	r0, #2
 80134c8:	f004 ffb2 	bl	8018430 <traceIF_uartPrintForce>
					CST_CMD_display_bitmap_name(cst_cmd_nb1band_MSB_default,
 80134cc:	4a42      	ldr	r2, [pc, #264]	; (80135d8 <CST_ModemCmd+0x8c4>)
 80134ce:	e6d4      	b.n	801327a <CST_ModemCmd+0x566>
							cst_cmd_nb1band_MSB_default = nb1band_value_msb;
 80134d0:	9b07      	ldr	r3, [sp, #28]
 80134d2:	6033      	str	r3, [r6, #0]
							cst_cmd_nb1band_LSB_default = nb1band_value_lsb;
 80134d4:	9b08      	ldr	r3, [sp, #32]
 80134d6:	f8c8 3000 	str.w	r3, [r8]
	cmd_status = CMD_OK;
 80134da:	2400      	movs	r4, #0
 80134dc:	e7de      	b.n	801349c <CST_ModemCmd+0x788>
 80134de:	4604      	mov	r4, r0
 80134e0:	e7dc      	b.n	801349c <CST_ModemCmd+0x788>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "scanseq",
 80134e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80134e4:	4620      	mov	r0, r4
 80134e6:	f004 fd25 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "scanseq",
 80134ea:	493f      	ldr	r1, [pc, #252]	; (80135e8 <CST_ModemCmd+0x8d4>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80134ec:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "scanseq",
 80134ee:	4620      	mov	r0, r4
 80134f0:	f009 fc96 	bl	801ce20 <memcmp>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	f040 80a2 	bne.w	801363e <CST_ModemCmd+0x92a>
					if (argc == 2U) {
 80134fa:	2d02      	cmp	r5, #2
 80134fc:	d11a      	bne.n	8013534 <CST_ModemCmd+0x820>
						PRINT_FORCE("Scan Seq : (%06lx)",
 80134fe:	4c3b      	ldr	r4, [pc, #236]	; (80135ec <CST_ModemCmd+0x8d8>)
 8013500:	493b      	ldr	r1, [pc, #236]	; (80135f0 <CST_ModemCmd+0x8dc>)
 8013502:	6822      	ldr	r2, [r4, #0]
 8013504:	482e      	ldr	r0, [pc, #184]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013506:	f009 fcd7 	bl	801ceb8 <sprintf>
 801350a:	482d      	ldr	r0, [pc, #180]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801350c:	f004 fd12 	bl	8017f34 <crs_strlen>
 8013510:	4a2b      	ldr	r2, [pc, #172]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013512:	b283      	uxth	r3, r0
 8013514:	2101      	movs	r1, #1
 8013516:	2002      	movs	r0, #2
 8013518:	f004 fd4a 	bl	8017fb0 <traceIF_itmPrint>
 801351c:	4828      	ldr	r0, [pc, #160]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801351e:	f004 fd09 	bl	8017f34 <crs_strlen>
 8013522:	4927      	ldr	r1, [pc, #156]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013524:	b282      	uxth	r2, r0
 8013526:	2002      	movs	r0, #2
 8013528:	f004 ff82 	bl	8018430 <traceIF_uartPrintForce>
						CST_CMD_display_seq_name(cst_cmd_scanseq_default,
 801352c:	6820      	ldr	r0, [r4, #0]
 801352e:	f7ff fbc9 	bl	8012cc4 <CST_CMD_display_seq_name.constprop.0>
 8013532:	e40e      	b.n	8012d52 <CST_ModemCmd+0x3e>
					} else if (argc == 3U) {
 8013534:	2d03      	cmp	r5, #3
 8013536:	d169      	bne.n	801360c <CST_ModemCmd+0x8f8>
 8013538:	4f2e      	ldr	r7, [pc, #184]	; (80135f4 <CST_ModemCmd+0x8e0>)
						for (i = 0U; i < CST_CMD_SCANSEQ_NUMBER; i++) {
 801353a:	2500      	movs	r5, #0
									(const CRC_CHAR_t*) CST_ScanseqName_p[i],
 801353c:	f857 1b04 	ldr.w	r1, [r7], #4
							if (memcmp((const CRC_CHAR_t*) argv_p[2],
 8013540:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
									crs_strlen(CST_ScanseqName_p[i])) == 0) {
 8013542:	9105      	str	r1, [sp, #20]
 8013544:	4608      	mov	r0, r1
 8013546:	f004 fcf5 	bl	8017f34 <crs_strlen>
							if (memcmp((const CRC_CHAR_t*) argv_p[2],
 801354a:	9905      	ldr	r1, [sp, #20]
									crs_strlen(CST_ScanseqName_p[i])) == 0) {
 801354c:	4602      	mov	r2, r0
							if (memcmp((const CRC_CHAR_t*) argv_p[2],
 801354e:	4620      	mov	r0, r4
 8013550:	f009 fc66 	bl	801ce20 <memcmp>
 8013554:	4604      	mov	r4, r0
 8013556:	b9e0      	cbnz	r0, 8013592 <CST_ModemCmd+0x87e>
								cst_cmd_scanseq_default = CST_Scanseq[i].value;
 8013558:	4b27      	ldr	r3, [pc, #156]	; (80135f8 <CST_ModemCmd+0x8e4>)
							PRINT_FORCE("Scan seq : (0x%06lx)",
 801355a:	4928      	ldr	r1, [pc, #160]	; (80135fc <CST_ModemCmd+0x8e8>)
 801355c:	4818      	ldr	r0, [pc, #96]	; (80135c0 <CST_ModemCmd+0x8ac>)
								cst_cmd_scanseq_default = CST_Scanseq[i].value;
 801355e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013562:	686a      	ldr	r2, [r5, #4]
 8013564:	4d21      	ldr	r5, [pc, #132]	; (80135ec <CST_ModemCmd+0x8d8>)
 8013566:	602a      	str	r2, [r5, #0]
							PRINT_FORCE("Scan seq : (0x%06lx)",
 8013568:	f009 fca6 	bl	801ceb8 <sprintf>
 801356c:	4814      	ldr	r0, [pc, #80]	; (80135c0 <CST_ModemCmd+0x8ac>)
 801356e:	f004 fce1 	bl	8017f34 <crs_strlen>
 8013572:	4a13      	ldr	r2, [pc, #76]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013574:	b283      	uxth	r3, r0
 8013576:	2101      	movs	r1, #1
 8013578:	2002      	movs	r0, #2
 801357a:	f004 fd19 	bl	8017fb0 <traceIF_itmPrint>
 801357e:	4810      	ldr	r0, [pc, #64]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013580:	f004 fcd8 	bl	8017f34 <crs_strlen>
 8013584:	490e      	ldr	r1, [pc, #56]	; (80135c0 <CST_ModemCmd+0x8ac>)
 8013586:	b282      	uxth	r2, r0
 8013588:	2002      	movs	r0, #2
 801358a:	f004 ff51 	bl	8018430 <traceIF_uartPrintForce>
							CST_CMD_display_seq_name(cst_cmd_scanseq_default,
 801358e:	6828      	ldr	r0, [r5, #0]
 8013590:	e4c0      	b.n	8012f14 <CST_ModemCmd+0x200>
						for (i = 0U; i < CST_CMD_SCANSEQ_NUMBER; i++) {
 8013592:	3501      	adds	r5, #1
 8013594:	2d10      	cmp	r5, #16
 8013596:	d1d1      	bne.n	801353c <CST_ModemCmd+0x828>
							PRINT_FORCE("bad command: %s %s %s\n\r", cmd_p,
 8013598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801359a:	9300      	str	r3, [sp, #0]
 801359c:	4918      	ldr	r1, [pc, #96]	; (8013600 <CST_ModemCmd+0x8ec>)
 801359e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135a0:	4807      	ldr	r0, [pc, #28]	; (80135c0 <CST_ModemCmd+0x8ac>)
 80135a2:	4632      	mov	r2, r6
 80135a4:	f009 fc88 	bl	801ceb8 <sprintf>
 80135a8:	e036      	b.n	8013618 <CST_ModemCmd+0x904>
 80135aa:	bf00      	nop
 80135ac:	0802987b 	.word	0x0802987b
 80135b0:	20003bb4 	.word	0x20003bb4
 80135b4:	08029dcc 	.word	0x08029dcc
 80135b8:	0802837f 	.word	0x0802837f
 80135bc:	08029802 	.word	0x08029802
 80135c0:	20008ff8 	.word	0x20008ff8
 80135c4:	08029882 	.word	0x08029882
 80135c8:	080298dd 	.word	0x080298dd
 80135cc:	08029913 	.word	0x08029913
 80135d0:	08029933 	.word	0x08029933
 80135d4:	20003bb8 	.word	0x20003bb8
 80135d8:	08029e98 	.word	0x08029e98
 80135dc:	0802993b 	.word	0x0802993b
 80135e0:	08029989 	.word	0x08029989
 80135e4:	080299d0 	.word	0x080299d0
 80135e8:	080299ef 	.word	0x080299ef
 80135ec:	20000238 	.word	0x20000238
 80135f0:	080299f7 	.word	0x080299f7
 80135f4:	08029fe4 	.word	0x08029fe4
 80135f8:	08029f64 	.word	0x08029f64
 80135fc:	08029a0c 	.word	0x08029a0c
 8013600:	08029b77 	.word	0x08029b77
 8013604:	2000022c 	.word	0x2000022c
 8013608:	20000230 	.word	0x20000230
						PRINT_FORCE("Too many parameters command: %s %s \n\r",
 801360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801360e:	497e      	ldr	r1, [pc, #504]	; (8013808 <CST_ModemCmd+0xaf4>)
 8013610:	4632      	mov	r2, r6
				PRINT_FORCE("bad command: %s %s\n\r", cmd_p, argv_p[0])
 8013612:	487e      	ldr	r0, [pc, #504]	; (801380c <CST_ModemCmd+0xaf8>)
 8013614:	f009 fc50 	bl	801ceb8 <sprintf>
							PRINT_FORCE("bad command: %s %s %s\n\r", cmd_p,
 8013618:	487c      	ldr	r0, [pc, #496]	; (801380c <CST_ModemCmd+0xaf8>)
 801361a:	f004 fc8b 	bl	8017f34 <crs_strlen>
 801361e:	4a7b      	ldr	r2, [pc, #492]	; (801380c <CST_ModemCmd+0xaf8>)
 8013620:	b283      	uxth	r3, r0
 8013622:	2101      	movs	r1, #1
 8013624:	2002      	movs	r0, #2
 8013626:	f004 fcc3 	bl	8017fb0 <traceIF_itmPrint>
 801362a:	4878      	ldr	r0, [pc, #480]	; (801380c <CST_ModemCmd+0xaf8>)
 801362c:	f004 fc82 	bl	8017f34 <crs_strlen>
 8013630:	4976      	ldr	r1, [pc, #472]	; (801380c <CST_ModemCmd+0xaf8>)
 8013632:	b282      	uxth	r2, r0
 8013634:	2002      	movs	r0, #2
 8013636:	f004 fefb 	bl	8018430 <traceIF_uartPrintForce>
							cmd_status = CMD_SYNTAX_ERROR;
 801363a:	2401      	movs	r4, #1
 801363c:	e539      	b.n	80130b2 <CST_ModemCmd+0x39e>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "send",
 801363e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 8013640:	4620      	mov	r0, r4
 8013642:	f004 fc77 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "send",
 8013646:	4972      	ldr	r1, [pc, #456]	; (8013810 <CST_ModemCmd+0xafc>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 8013648:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "send",
 801364a:	4620      	mov	r0, r4
 801364c:	f009 fbe8 	bl	801ce20 <memcmp>
 8013650:	2800      	cmp	r0, #0
 8013652:	d152      	bne.n	80136fa <CST_ModemCmd+0x9e6>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 8013654:	4b6f      	ldr	r3, [pc, #444]	; (8013814 <CST_ModemCmd+0xb00>)
 8013656:	4970      	ldr	r1, [pc, #448]	; (8013818 <CST_ModemCmd+0xb04>)
 8013658:	781a      	ldrb	r2, [r3, #0]
 801365a:	4870      	ldr	r0, [pc, #448]	; (801381c <CST_ModemCmd+0xb08>)
 801365c:	f009 fc2c 	bl	801ceb8 <sprintf>
					ret = (uint32_t) cst_at_command_handle(
 8013660:	486e      	ldr	r0, [pc, #440]	; (801381c <CST_ModemCmd+0xb08>)
 8013662:	f7ff fa75 	bl	8012b50 <cst_at_command_handle>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 8013666:	4b6e      	ldr	r3, [pc, #440]	; (8013820 <CST_ModemCmd+0xb0c>)
 8013668:	496e      	ldr	r1, [pc, #440]	; (8013824 <CST_ModemCmd+0xb10>)
 801366a:	681a      	ldr	r2, [r3, #0]
					ret = (uint32_t) cst_at_command_handle(
 801366c:	4604      	mov	r4, r0
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 801366e:	486b      	ldr	r0, [pc, #428]	; (801381c <CST_ModemCmd+0xb08>)
 8013670:	f009 fc22 	bl	801ceb8 <sprintf>
					ret |= (uint32_t) cst_at_command_handle(
 8013674:	4869      	ldr	r0, [pc, #420]	; (801381c <CST_ModemCmd+0xb08>)
 8013676:	f7ff fa6b 	bl	8012b50 <cst_at_command_handle>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 801367a:	4b6b      	ldr	r3, [pc, #428]	; (8013828 <CST_ModemCmd+0xb14>)
 801367c:	496b      	ldr	r1, [pc, #428]	; (801382c <CST_ModemCmd+0xb18>)
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	4320      	orrs	r0, r4
 8013682:	b2c4      	uxtb	r4, r0
 8013684:	4865      	ldr	r0, [pc, #404]	; (801381c <CST_ModemCmd+0xb08>)
 8013686:	f009 fc17 	bl	801ceb8 <sprintf>
					ret |= (uint32_t) cst_at_command_handle(
 801368a:	4864      	ldr	r0, [pc, #400]	; (801381c <CST_ModemCmd+0xb08>)
 801368c:	f7ff fa60 	bl	8012b50 <cst_at_command_handle>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 8013690:	4b67      	ldr	r3, [pc, #412]	; (8013830 <CST_ModemCmd+0xb1c>)
 8013692:	4a68      	ldr	r2, [pc, #416]	; (8013834 <CST_ModemCmd+0xb20>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	9303      	str	r3, [sp, #12]
 8013698:	4b67      	ldr	r3, [pc, #412]	; (8013838 <CST_ModemCmd+0xb24>)
 801369a:	4968      	ldr	r1, [pc, #416]	; (801383c <CST_ModemCmd+0xb28>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	9302      	str	r3, [sp, #8]
 80136a0:	4b67      	ldr	r3, [pc, #412]	; (8013840 <CST_ModemCmd+0xb2c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	4b67      	ldr	r3, [pc, #412]	; (8013844 <CST_ModemCmd+0xb30>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	9300      	str	r3, [sp, #0]
 80136ac:	4b66      	ldr	r3, [pc, #408]	; (8013848 <CST_ModemCmd+0xb34>)
 80136ae:	6812      	ldr	r2, [r2, #0]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	4320      	orrs	r0, r4
 80136b4:	b2c4      	uxtb	r4, r0
 80136b6:	4859      	ldr	r0, [pc, #356]	; (801381c <CST_ModemCmd+0xb08>)
 80136b8:	f009 fbfe 	bl	801ceb8 <sprintf>
					ret |= (uint32_t) cst_at_command_handle(
 80136bc:	4857      	ldr	r0, [pc, #348]	; (801381c <CST_ModemCmd+0xb08>)
 80136be:	f7ff fa47 	bl	8012b50 <cst_at_command_handle>
					if (ret != 0U) {
 80136c2:	4320      	orrs	r0, r4
 80136c4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80136c8:	f43f ab43 	beq.w	8012d52 <CST_ModemCmd+0x3e>
						PRINT_FORCE("command fail\n\r")
 80136cc:	495f      	ldr	r1, [pc, #380]	; (801384c <CST_ModemCmd+0xb38>)
 80136ce:	484f      	ldr	r0, [pc, #316]	; (801380c <CST_ModemCmd+0xaf8>)
 80136d0:	f009 fc62 	bl	801cf98 <strcpy>
 80136d4:	484d      	ldr	r0, [pc, #308]	; (801380c <CST_ModemCmd+0xaf8>)
 80136d6:	f004 fc2d 	bl	8017f34 <crs_strlen>
 80136da:	4a4c      	ldr	r2, [pc, #304]	; (801380c <CST_ModemCmd+0xaf8>)
 80136dc:	b283      	uxth	r3, r0
 80136de:	2101      	movs	r1, #1
 80136e0:	2002      	movs	r0, #2
 80136e2:	f004 fc65 	bl	8017fb0 <traceIF_itmPrint>
 80136e6:	4849      	ldr	r0, [pc, #292]	; (801380c <CST_ModemCmd+0xaf8>)
 80136e8:	f004 fc24 	bl	8017f34 <crs_strlen>
 80136ec:	4947      	ldr	r1, [pc, #284]	; (801380c <CST_ModemCmd+0xaf8>)
 80136ee:	b282      	uxth	r2, r0
 80136f0:	2002      	movs	r0, #2
 80136f2:	f004 fe9d 	bl	8018430 <traceIF_uartPrintForce>
						cmd_status = CMD_PROCESS_ERROR;
 80136f6:	2402      	movs	r4, #2
 80136f8:	e4db      	b.n	80130b2 <CST_ModemCmd+0x39e>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "get",
 80136fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 80136fc:	4620      	mov	r0, r4
 80136fe:	f004 fc19 	bl	8017f34 <crs_strlen>
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "get",
 8013702:	4953      	ldr	r1, [pc, #332]	; (8013850 <CST_ModemCmd+0xb3c>)
						crs_strlen((uint8_t*) argv_p[1])) == 0) {
 8013704:	4602      	mov	r2, r0
				} else if (memcmp((const CRC_CHAR_t*) argv_p[1], "get",
 8013706:	4620      	mov	r0, r4
 8013708:	f009 fb8a 	bl	801ce20 <memcmp>
 801370c:	2800      	cmp	r0, #0
 801370e:	d172      	bne.n	80137f6 <CST_ModemCmd+0xae2>
					PRINT_FORCE("nwscanmode:")
 8013710:	4950      	ldr	r1, [pc, #320]	; (8013854 <CST_ModemCmd+0xb40>)
 8013712:	483e      	ldr	r0, [pc, #248]	; (801380c <CST_ModemCmd+0xaf8>)
 8013714:	f009 fc40 	bl	801cf98 <strcpy>
 8013718:	483c      	ldr	r0, [pc, #240]	; (801380c <CST_ModemCmd+0xaf8>)
 801371a:	f004 fc0b 	bl	8017f34 <crs_strlen>
 801371e:	4a3b      	ldr	r2, [pc, #236]	; (801380c <CST_ModemCmd+0xaf8>)
 8013720:	b283      	uxth	r3, r0
 8013722:	2101      	movs	r1, #1
 8013724:	2002      	movs	r0, #2
 8013726:	f004 fc43 	bl	8017fb0 <traceIF_itmPrint>
 801372a:	4838      	ldr	r0, [pc, #224]	; (801380c <CST_ModemCmd+0xaf8>)
 801372c:	f004 fc02 	bl	8017f34 <crs_strlen>
 8013730:	4936      	ldr	r1, [pc, #216]	; (801380c <CST_ModemCmd+0xaf8>)
 8013732:	b282      	uxth	r2, r0
 8013734:	2002      	movs	r0, #2
 8013736:	f004 fe7b 	bl	8018430 <traceIF_uartPrintForce>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 801373a:	4947      	ldr	r1, [pc, #284]	; (8013858 <CST_ModemCmd+0xb44>)
 801373c:	4837      	ldr	r0, [pc, #220]	; (801381c <CST_ModemCmd+0xb08>)
 801373e:	f009 fc2b 	bl	801cf98 <strcpy>
					ret = (uint32_t) cst_at_command_handle(
 8013742:	4836      	ldr	r0, [pc, #216]	; (801381c <CST_ModemCmd+0xb08>)
 8013744:	f7ff fa04 	bl	8012b50 <cst_at_command_handle>
					PRINT_FORCE("iotopmode:")
 8013748:	4944      	ldr	r1, [pc, #272]	; (801385c <CST_ModemCmd+0xb48>)
					ret = (uint32_t) cst_at_command_handle(
 801374a:	4604      	mov	r4, r0
					PRINT_FORCE("iotopmode:")
 801374c:	482f      	ldr	r0, [pc, #188]	; (801380c <CST_ModemCmd+0xaf8>)
 801374e:	f009 fc23 	bl	801cf98 <strcpy>
 8013752:	482e      	ldr	r0, [pc, #184]	; (801380c <CST_ModemCmd+0xaf8>)
 8013754:	f004 fbee 	bl	8017f34 <crs_strlen>
 8013758:	4a2c      	ldr	r2, [pc, #176]	; (801380c <CST_ModemCmd+0xaf8>)
 801375a:	b283      	uxth	r3, r0
 801375c:	2101      	movs	r1, #1
 801375e:	2002      	movs	r0, #2
 8013760:	f004 fc26 	bl	8017fb0 <traceIF_itmPrint>
 8013764:	4829      	ldr	r0, [pc, #164]	; (801380c <CST_ModemCmd+0xaf8>)
 8013766:	f004 fbe5 	bl	8017f34 <crs_strlen>
 801376a:	4928      	ldr	r1, [pc, #160]	; (801380c <CST_ModemCmd+0xaf8>)
 801376c:	b282      	uxth	r2, r0
 801376e:	2002      	movs	r0, #2
 8013770:	f004 fe5e 	bl	8018430 <traceIF_uartPrintForce>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 8013774:	493a      	ldr	r1, [pc, #232]	; (8013860 <CST_ModemCmd+0xb4c>)
 8013776:	4829      	ldr	r0, [pc, #164]	; (801381c <CST_ModemCmd+0xb08>)
 8013778:	f009 fc0e 	bl	801cf98 <strcpy>
					ret |= (uint32_t) cst_at_command_handle(
 801377c:	4827      	ldr	r0, [pc, #156]	; (801381c <CST_ModemCmd+0xb08>)
 801377e:	f7ff f9e7 	bl	8012b50 <cst_at_command_handle>
 8013782:	4320      	orrs	r0, r4
					PRINT_FORCE("GSM Bands:")
 8013784:	4937      	ldr	r1, [pc, #220]	; (8013864 <CST_ModemCmd+0xb50>)
 8013786:	b2c4      	uxtb	r4, r0
 8013788:	4820      	ldr	r0, [pc, #128]	; (801380c <CST_ModemCmd+0xaf8>)
 801378a:	f009 fc05 	bl	801cf98 <strcpy>
 801378e:	481f      	ldr	r0, [pc, #124]	; (801380c <CST_ModemCmd+0xaf8>)
 8013790:	f004 fbd0 	bl	8017f34 <crs_strlen>
 8013794:	4a1d      	ldr	r2, [pc, #116]	; (801380c <CST_ModemCmd+0xaf8>)
 8013796:	b283      	uxth	r3, r0
 8013798:	2101      	movs	r1, #1
 801379a:	2002      	movs	r0, #2
 801379c:	f004 fc08 	bl	8017fb0 <traceIF_itmPrint>
 80137a0:	481a      	ldr	r0, [pc, #104]	; (801380c <CST_ModemCmd+0xaf8>)
 80137a2:	f004 fbc7 	bl	8017f34 <crs_strlen>
 80137a6:	4919      	ldr	r1, [pc, #100]	; (801380c <CST_ModemCmd+0xaf8>)
 80137a8:	b282      	uxth	r2, r0
 80137aa:	2002      	movs	r0, #2
 80137ac:	f004 fe40 	bl	8018430 <traceIF_uartPrintForce>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 80137b0:	492d      	ldr	r1, [pc, #180]	; (8013868 <CST_ModemCmd+0xb54>)
 80137b2:	481a      	ldr	r0, [pc, #104]	; (801381c <CST_ModemCmd+0xb08>)
 80137b4:	f009 fbf0 	bl	801cf98 <strcpy>
					ret |= (uint32_t) cst_at_command_handle(
 80137b8:	4818      	ldr	r0, [pc, #96]	; (801381c <CST_ModemCmd+0xb08>)
 80137ba:	f7ff f9c9 	bl	8012b50 <cst_at_command_handle>
 80137be:	4320      	orrs	r0, r4
					PRINT_FORCE("Scan Seq:")
 80137c0:	492a      	ldr	r1, [pc, #168]	; (801386c <CST_ModemCmd+0xb58>)
 80137c2:	b2c4      	uxtb	r4, r0
 80137c4:	4811      	ldr	r0, [pc, #68]	; (801380c <CST_ModemCmd+0xaf8>)
 80137c6:	f009 fbe7 	bl	801cf98 <strcpy>
 80137ca:	4810      	ldr	r0, [pc, #64]	; (801380c <CST_ModemCmd+0xaf8>)
 80137cc:	f004 fbb2 	bl	8017f34 <crs_strlen>
 80137d0:	4a0e      	ldr	r2, [pc, #56]	; (801380c <CST_ModemCmd+0xaf8>)
 80137d2:	b283      	uxth	r3, r0
 80137d4:	2101      	movs	r1, #1
 80137d6:	2002      	movs	r0, #2
 80137d8:	f004 fbea 	bl	8017fb0 <traceIF_itmPrint>
 80137dc:	480b      	ldr	r0, [pc, #44]	; (801380c <CST_ModemCmd+0xaf8>)
 80137de:	f004 fba9 	bl	8017f34 <crs_strlen>
 80137e2:	490a      	ldr	r1, [pc, #40]	; (801380c <CST_ModemCmd+0xaf8>)
 80137e4:	b282      	uxth	r2, r0
 80137e6:	2002      	movs	r0, #2
 80137e8:	f004 fe22 	bl	8018430 <traceIF_uartPrintForce>
					(void) sprintf((CRC_CHAR_t*) CST_CMD_Command,
 80137ec:	4920      	ldr	r1, [pc, #128]	; (8013870 <CST_ModemCmd+0xb5c>)
 80137ee:	480b      	ldr	r0, [pc, #44]	; (801381c <CST_ModemCmd+0xb08>)
 80137f0:	f009 fbd2 	bl	801cf98 <strcpy>
 80137f4:	e762      	b.n	80136bc <CST_ModemCmd+0x9a8>
				PRINT_FORCE("bad command: %s %s\n\r", cmd_p, argv_p[0])
 80137f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f8:	491e      	ldr	r1, [pc, #120]	; (8013874 <CST_ModemCmd+0xb60>)
 80137fa:	4632      	mov	r2, r6
 80137fc:	e709      	b.n	8013612 <CST_ModemCmd+0x8fe>
			PRINT_FORCE("bad command\n\r")
 80137fe:	491e      	ldr	r1, [pc, #120]	; (8013878 <CST_ModemCmd+0xb64>)
 8013800:	4802      	ldr	r0, [pc, #8]	; (801380c <CST_ModemCmd+0xaf8>)
 8013802:	f009 fbc9 	bl	801cf98 <strcpy>
 8013806:	e707      	b.n	8013618 <CST_ModemCmd+0x904>
 8013808:	08029a23 	.word	0x08029a23
 801380c:	20008ff8 	.word	0x20008ff8
 8013810:	08029a4b 	.word	0x08029a4b
 8013814:	20000234 	.word	0x20000234
 8013818:	08029a50 	.word	0x08029a50
 801381c:	20003840 	.word	0x20003840
 8013820:	20003bb0 	.word	0x20003bb0
 8013824:	08029a6a 	.word	0x08029a6a
 8013828:	20000238 	.word	0x20000238
 801382c:	08029a84 	.word	0x08029a84
 8013830:	20000230 	.word	0x20000230
 8013834:	20003bac 	.word	0x20003bac
 8013838:	20003bb8 	.word	0x20003bb8
 801383c:	08029aa0 	.word	0x08029aa0
 8013840:	2000022c 	.word	0x2000022c
 8013844:	20003bb4 	.word	0x20003bb4
 8013848:	20000228 	.word	0x20000228
 801384c:	080295fa 	.word	0x080295fa
 8013850:	08029acc 	.word	0x08029acc
 8013854:	08029ad0 	.word	0x08029ad0
 8013858:	08029ade 	.word	0x08029ade
 801385c:	08029af3 	.word	0x08029af3
 8013860:	08029b00 	.word	0x08029b00
 8013864:	08029b14 	.word	0x08029b14
 8013868:	08029b21 	.word	0x08029b21
 801386c:	08029b30 	.word	0x08029b30
 8013870:	08029b3c 	.word	0x08029b3c
 8013874:	08029b50 	.word	0x08029b50
 8013878:	08029b67 	.word	0x08029b67

0801387c <CST_cmd_cellular_service_start>:
/**
 * @brief  starts cellar command managememnt
 * @param  -
 * @retval CS_Status_t - function result
 */
CS_Status_t CST_cmd_cellular_service_start(void) {
 801387c:	b508      	push	{r3, lr}
	CMD_Declare(CST_cmd_label, CST_cmd,
 801387e:	4a08      	ldr	r2, [pc, #32]	; (80138a0 <CST_cmd_cellular_service_start+0x24>)
 8013880:	4908      	ldr	r1, [pc, #32]	; (80138a4 <CST_cmd_cellular_service_start+0x28>)
 8013882:	4809      	ldr	r0, [pc, #36]	; (80138a8 <CST_cmd_cellular_service_start+0x2c>)
 8013884:	f008 f994 	bl	801bbb0 <CMD_Declare>
			(uint8_t*) "cellular service task management");
	CMD_Declare(CST_cmd_at_label, CST_AtCmd, (uint8_t*) "send an at command");
 8013888:	4a08      	ldr	r2, [pc, #32]	; (80138ac <CST_cmd_cellular_service_start+0x30>)
 801388a:	4909      	ldr	r1, [pc, #36]	; (80138b0 <CST_cmd_cellular_service_start+0x34>)
 801388c:	4809      	ldr	r0, [pc, #36]	; (80138b4 <CST_cmd_cellular_service_start+0x38>)
 801388e:	f008 f98f 	bl	801bbb0 <CMD_Declare>
#if (CST_CMD_USE_MODEM_CONFIG == 1)
	CMD_Declare(CST_cmd_modem_label, CST_ModemCmd,
 8013892:	4a09      	ldr	r2, [pc, #36]	; (80138b8 <CST_cmd_cellular_service_start+0x3c>)
 8013894:	4909      	ldr	r1, [pc, #36]	; (80138bc <CST_cmd_cellular_service_start+0x40>)
 8013896:	480a      	ldr	r0, [pc, #40]	; (80138c0 <CST_cmd_cellular_service_start+0x44>)
 8013898:	f008 f98a 	bl	801bbb0 <CMD_Declare>
			(uint8_t*) "modem configuration management");
#endif  /* CST_CMD_USE_MODEM_CONFIG == 1 */

	return CELLULAR_OK;
}
 801389c:	2000      	movs	r0, #0
 801389e:	bd08      	pop	{r3, pc}
 80138a0:	08029b91 	.word	0x08029b91
 80138a4:	08011815 	.word	0x08011815
 80138a8:	08028a91 	.word	0x08028a91
 80138ac:	08029bb2 	.word	0x08029bb2
 80138b0:	08012bc9 	.word	0x08012bc9
 80138b4:	08028a12 	.word	0x08028a12
 80138b8:	08029bc5 	.word	0x08029bc5
 80138bc:	08012d15 	.word	0x08012d15
 80138c0:	0802837f 	.word	0x0802837f

080138c4 <CST_local_setup_handler>:
 * @brief  default setup config menu handler
 * @note
 * @param  none
 * @retval none
 */
static void CST_local_setup_handler(void) {
 80138c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c8:	b0ec      	sub	sp, #432	; 0x1b0
	uint32_t size_user;
	uint32_t size_password;
	uint32_t size_operator;

	/* initialize the SIM slots */
	cellular_params.sim_slot_nb = 99U;
 80138ca:	2363      	movs	r3, #99	; 0x63

	cellular_params.sim_slot[0].sim_slot_type =
 80138cc:	2400      	movs	r4, #0
				!= CA_SIM_NON_EXISTING_SLOT) {
			/* SIM slot parameters BEGIN*/
			/* APN present parameter */
			cellular_params.sim_slot[idx].apnPresent = CST_DEFAULT_APN_PRESENT;
			/* APN parameter */
			size_apn = crs_strlen(CST_DEFAULT_APN) + 1U;
 80138ce:	4e39      	ldr	r6, [pc, #228]	; (80139b4 <CST_local_setup_handler+0xf0>)
	cellular_params.sim_slot_nb = 99U;
 80138d0:	f88d 3009 	strb.w	r3, [sp, #9]
	cellular_params.sim_slot[0].sim_slot_type =
 80138d4:	f88d 400a 	strb.w	r4, [sp, #10]
	cellular_params.sim_slot[1].sim_slot_type =
 80138d8:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
	cellular_params.sim_slot[2].sim_slot_type =
 80138dc:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
	for (uint8_t idx = 0U; idx < DC_SIM_SLOT_NB; idx++) {
 80138e0:	466d      	mov	r5, sp
			cellular_params.sim_slot[idx].apnPresent = CST_DEFAULT_APN_PRESENT;
 80138e2:	4627      	mov	r7, r4
				(void) memcpy((CRC_CHAR_t*) cellular_params.sim_slot[idx].apn,
						(CRC_CHAR_t*) CST_DEFAULT_APN, size_apn);
			}

			/* CID parameter */
			cellular_params.sim_slot[idx].cid = CST_DEFAULT_CID;
 80138e4:	f04f 0801 	mov.w	r8, #1
		if (cellular_params.sim_slot[idx].sim_slot_type
 80138e8:	7aaa      	ldrb	r2, [r5, #10]
 80138ea:	2a63      	cmp	r2, #99	; 0x63
 80138ec:	b2e3      	uxtb	r3, r4
 80138ee:	d059      	beq.n	80139a4 <CST_local_setup_handler+0xe0>
			size_apn = crs_strlen(CST_DEFAULT_APN) + 1U;
 80138f0:	4630      	mov	r0, r6
			cellular_params.sim_slot[idx].apnPresent = CST_DEFAULT_APN_PRESENT;
 80138f2:	732f      	strb	r7, [r5, #12]
			size_apn = crs_strlen(CST_DEFAULT_APN) + 1U;
 80138f4:	f004 fb1e 	bl	8017f34 <crs_strlen>
 80138f8:	1c42      	adds	r2, r0, #1
			if (size_apn <= CA_APN_SIZE_MAX) {
 80138fa:	2a21      	cmp	r2, #33	; 0x21
 80138fc:	d804      	bhi.n	8013908 <CST_local_setup_handler+0x44>
				(void) memcpy((CRC_CHAR_t*) cellular_params.sim_slot[idx].apn,
 80138fe:	4631      	mov	r1, r6
 8013900:	f105 000d 	add.w	r0, r5, #13
 8013904:	f009 fa9a 	bl	801ce3c <memcpy>

			/* username parameter */
			size_user = crs_strlen(CST_DEFAULT_USERNAME) + 1U;
 8013908:	4630      	mov	r0, r6
			cellular_params.sim_slot[idx].cid = CST_DEFAULT_CID;
 801390a:	f885 802e 	strb.w	r8, [r5, #46]	; 0x2e
			size_user = crs_strlen(CST_DEFAULT_USERNAME) + 1U;
 801390e:	f004 fb11 	bl	8017f34 <crs_strlen>
 8013912:	1c42      	adds	r2, r0, #1
			/* to avoid string overflow */
			if (size_user <= CA_USERNAME_SIZE_MAX) {
 8013914:	2a21      	cmp	r2, #33	; 0x21
 8013916:	d804      	bhi.n	8013922 <CST_local_setup_handler+0x5e>
				(void) memcpy(
 8013918:	4631      	mov	r1, r6
 801391a:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 801391e:	f009 fa8d 	bl	801ce3c <memcpy>
						(CRC_CHAR_t*) cellular_params.sim_slot[idx].username,
						(CRC_CHAR_t*) CST_DEFAULT_USERNAME, size_user);
			}

			/* password parameter */
			size_password = crs_strlen(CST_DEFAULT_PASSWORD) + 1U;
 8013922:	4630      	mov	r0, r6
 8013924:	f004 fb06 	bl	8017f34 <crs_strlen>
 8013928:	1c42      	adds	r2, r0, #1
			/* to avoid string overflow */
			if (size_password <= CA_PASSWORD_SIZE_MAX) {
 801392a:	2a21      	cmp	r2, #33	; 0x21
 801392c:	d804      	bhi.n	8013938 <CST_local_setup_handler+0x74>
				(void) memcpy(
 801392e:	4631      	mov	r1, r6
 8013930:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8013934:	f009 fa82 	bl	801ce3c <memcpy>
	for (uint8_t idx = 0U; idx < DC_SIM_SLOT_NB; idx++) {
 8013938:	3401      	adds	r4, #1
 801393a:	2c03      	cmp	r4, #3
 801393c:	f105 0568 	add.w	r5, r5, #104	; 0x68
 8013940:	d1d2      	bne.n	80138e8 <CST_local_setup_handler+0x24>
    cellular_params.sim_slot_nb = DC_SIM_SLOT_NB;
  }
#endif /* (DC_SIM_SLOT_NB == 0) */

	/* modem target state parameter */
	cellular_params.target_state =
 8013942:	2302      	movs	r3, #2
 8013944:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
			(dc_cs_target_state_t) CST_DEFAULT_TARGET_STATE;

	/* attachment timeout parameter */
	cellular_params.attachment_timeout =
 8013948:	4b1b      	ldr	r3, [pc, #108]	; (80139b8 <CST_local_setup_handler+0xf4>)
 801394a:	9351      	str	r3, [sp, #324]	; 0x144
			CST_DEFAULT_NETWORK_REG_MODE;

	cellular_params.operator_selector.operator_name_format =
			CST_DEFAULT_OPERATOR_NAME_FORMAT;

	size_operator = crs_strlen(CST_DEFAULT_OPERATOR_NAME) + 1U;
 801394c:	481b      	ldr	r0, [pc, #108]	; (80139bc <CST_local_setup_handler+0xf8>)
	cellular_params.operator_selector.network_reg_mode =
 801394e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8013952:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
	size_operator = crs_strlen(CST_DEFAULT_OPERATOR_NAME) + 1U;
 8013956:	f004 faed 	bl	8017f34 <crs_strlen>
	(void) memcpy(cellular_params.operator_selector.operator_name,
 801395a:	4918      	ldr	r1, [pc, #96]	; (80139bc <CST_local_setup_handler+0xf8>)
 801395c:	1c42      	adds	r2, r0, #1
 801395e:	f50d 70a5 	add.w	r0, sp, #330	; 0x14a
 8013962:	f009 fa6b 	bl	801ce3c <memcpy>
			CST_DEFAULT_ACT_PRESENT;

	cellular_params.operator_selector.access_techno = CST_DEFAULT_ACCESS_TECHNO;

	/* low power inactivity timeout parameter */
	cellular_params.lp_inactivity_timeout =
 8013966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801396a:	936b      	str	r3, [sp, #428]	; 0x1ac

	/* set Data Cache entry valid */
	cellular_params.rt_state = DC_SERVICE_ON;

	/* write Entry to Data Cache */
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 801396c:	4914      	ldr	r1, [pc, #80]	; (80139c0 <CST_local_setup_handler+0xfc>)
 801396e:	4815      	ldr	r0, [pc, #84]	; (80139c4 <CST_local_setup_handler+0x100>)
 8013970:	8809      	ldrh	r1, [r1, #0]
	cellular_params.operator_selector.access_techno_present =
 8013972:	2300      	movs	r3, #0
 8013974:	f88d 318b 	strb.w	r3, [sp, #395]	; 0x18b
	cellular_params.operator_selector.access_techno = CST_DEFAULT_ACCESS_TECHNO;
 8013978:	2207      	movs	r2, #7
		cellular_params.nfmc_value[i] = (uint32_t) CST_DEFAULT_NFMC_TEMPO1;
 801397a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801397e:	e9cd 3364 	strd	r3, r3, [sp, #400]	; 0x190
 8013982:	e9cd 3366 	strd	r3, r3, [sp, #408]	; 0x198
 8013986:	e9cd 3368 	strd	r3, r3, [sp, #416]	; 0x1a0
	cellular_params.operator_selector.access_techno = CST_DEFAULT_ACCESS_TECHNO;
 801398a:	f8ad 218c 	strh.w	r2, [sp, #396]	; 0x18c
		cellular_params.nfmc_value[i] = (uint32_t) CST_DEFAULT_NFMC_TEMPO1;
 801398e:	936a      	str	r3, [sp, #424]	; 0x1a8
	cellular_params.rt_state = DC_SERVICE_ON;
 8013990:	f88d 2008 	strb.w	r2, [sp, #8]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 8013994:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8013998:	466a      	mov	r2, sp
 801399a:	f003 fc07 	bl	80171ac <dc_com_write>
			(void*) &cellular_params, sizeof(cellular_params));
}
 801399e:	b06c      	add	sp, #432	; 0x1b0
 80139a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (cellular_params.sim_slot_nb == 99U) {
 80139a4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80139a8:	2a63      	cmp	r2, #99	; 0x63
				cellular_params.sim_slot_nb = idx;
 80139aa:	bf08      	it	eq
 80139ac:	f88d 3009 	strbeq.w	r3, [sp, #9]
 80139b0:	e7c2      	b.n	8013938 <CST_local_setup_handler+0x74>
 80139b2:	bf00      	nop
 80139b4:	08028e1b 	.word	0x08028e1b
 80139b8:	0002bf20 	.word	0x0002bf20
 80139bc:	0802a0a0 	.word	0x0802a0a0
 80139c0:	2000023c 	.word	0x2000023c
 80139c4:	20008d7c 	.word	0x20008d7c

080139c8 <cst_get_cid_value>:
	switch (cid_value) {
 80139c8:	3801      	subs	r0, #1
 80139ca:	b2c0      	uxtb	r0, r0
 80139cc:	280c      	cmp	r0, #12
 80139ce:	bf9a      	itte	ls
 80139d0:	4b01      	ldrls	r3, [pc, #4]	; (80139d8 <cst_get_cid_value+0x10>)
 80139d2:	5c18      	ldrbls	r0, [r3, r0]
CS_PDN_conf_id_t cst_get_cid_value(uint8_t cid_value) {
 80139d4:	2000      	movhi	r0, #0
}
 80139d6:	4770      	bx	lr
 80139d8:	0802a0a6 	.word	0x0802a0a6

080139dc <CST_config_init>:
 * @note  this function is called by cellular service task init
 * @param  cellular_params   - cellular configuration
 * @retval error code (O:OK)
 */

CS_Status_t CST_config_init(void) {
 80139dc:	b508      	push	{r3, lr}
	/* In case on default setup (without menu) calls default configuration setting */
	CST_local_setup_handler();
 80139de:	f7ff ff71 	bl	80138c4 <CST_local_setup_handler>

	return CELLULAR_OK;
}
 80139e2:	2000      	movs	r0, #0
 80139e4:	bd08      	pop	{r3, pc}
	...

080139e8 <cellular_service_datacache_init>:
/**
 * @brief  Initialize cellular service datacache entries.
 * @param  -
 * @retval -
 */
void cellular_service_datacache_init(void) {
 80139e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (USE_LOW_POWER == 1)
  static dc_cellular_power_config_t  dc_cellular_power_config;
  static dc_cellular_power_status_t  dc_cellular_power_status;
#endif  /* (USE_LOW_POWER == 1) */

	(void) memset((void*) &dc_cellular_info, 0, sizeof(dc_cellular_info_t));
 80139ec:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8013b0c <cellular_service_datacache_init+0x124>
  (void)memset((void *)&dc_cellular_power_config, 0, sizeof(dc_cellular_power_config_t));
  (void)memset((void *)&dc_cellular_power_status, 0, sizeof(dc_cellular_power_status_t));
#endif  /* (USE_LOW_POWER == 1) */

	/* register all all cellular entries of Data Cache */
	DC_CELLULAR_INFO = dc_com_register_serv(&dc_com_db,
 80139f0:	4c37      	ldr	r4, [pc, #220]	; (8013ad0 <cellular_service_datacache_init+0xe8>)
	(void) memset((void*) &dc_cellular_target_state, 0,
 80139f2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8013b10 <cellular_service_datacache_init+0x128>
	(void) memset((void*) &dc_cellular_info, 0, sizeof(dc_cellular_info_t));
 80139f6:	23dc      	movs	r3, #220	; 0xdc
 80139f8:	461a      	mov	r2, r3
	(void) memset((void*) &dc_cellular_data_info, 0,
 80139fa:	2510      	movs	r5, #16
	(void) memset((void*) &dc_cellular_info, 0, sizeof(dc_cellular_info_t));
 80139fc:	2100      	movs	r1, #0
 80139fe:	4658      	mov	r0, fp
 8013a00:	f009 fa2a 	bl	801ce58 <memset>
	(void) memset((void*) &dc_cellular_data_info, 0,
 8013a04:	462a      	mov	r2, r5
 8013a06:	2100      	movs	r1, #0
 8013a08:	4832      	ldr	r0, [pc, #200]	; (8013ad4 <cellular_service_datacache_init+0xec>)
 8013a0a:	f009 fa25 	bl	801ce58 <memset>
	(void) memset((void*) &dc_nfmc_info, 0, sizeof(dc_nfmc_info_t));
 8013a0e:	f04f 092c 	mov.w	r9, #44	; 0x2c
	(void) memset((void*) &dc_nifman_info, 0, sizeof(dc_nifman_info_t));
 8013a12:	462a      	mov	r2, r5
 8013a14:	2100      	movs	r1, #0
 8013a16:	4830      	ldr	r0, [pc, #192]	; (8013ad8 <cellular_service_datacache_init+0xf0>)
 8013a18:	f009 fa1e 	bl	801ce58 <memset>
	(void) memset((void*) &dc_sim_info, 0, sizeof(dc_sim_info_t));
 8013a1c:	f04f 0820 	mov.w	r8, #32
	(void) memset((void*) &dc_nfmc_info, 0, sizeof(dc_nfmc_info_t));
 8013a20:	464a      	mov	r2, r9
 8013a22:	2100      	movs	r1, #0
 8013a24:	482d      	ldr	r0, [pc, #180]	; (8013adc <cellular_service_datacache_init+0xf4>)
 8013a26:	f009 fa17 	bl	801ce58 <memset>
	(void) memset((void*) &dc_signal_info, 0, sizeof(dc_signal_info_t));
 8013a2a:	2714      	movs	r7, #20
	(void) memset((void*) &dc_sim_info, 0, sizeof(dc_sim_info_t));
 8013a2c:	4642      	mov	r2, r8
 8013a2e:	2100      	movs	r1, #0
 8013a30:	482b      	ldr	r0, [pc, #172]	; (8013ae0 <cellular_service_datacache_init+0xf8>)
 8013a32:	f009 fa11 	bl	801ce58 <memset>
	(void) memset((void*) &dc_cellular_params, 0, sizeof(dc_cellular_params_t));
 8013a36:	f44f 76d8 	mov.w	r6, #432	; 0x1b0
	(void) memset((void*) &dc_signal_info, 0, sizeof(dc_signal_info_t));
 8013a3a:	463a      	mov	r2, r7
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	4829      	ldr	r0, [pc, #164]	; (8013ae4 <cellular_service_datacache_init+0xfc>)
 8013a40:	f009 fa0a 	bl	801ce58 <memset>
	(void) memset((void*) &dc_cellular_params, 0, sizeof(dc_cellular_params_t));
 8013a44:	4632      	mov	r2, r6
 8013a46:	2100      	movs	r1, #0
 8013a48:	4827      	ldr	r0, [pc, #156]	; (8013ae8 <cellular_service_datacache_init+0x100>)
 8013a4a:	f009 fa05 	bl	801ce58 <memset>
	(void) memset((void*) &dc_cellular_target_state, 0,
 8013a4e:	2200      	movs	r2, #0
	DC_CELLULAR_INFO = dc_com_register_serv(&dc_com_db,
 8013a50:	23dc      	movs	r3, #220	; 0xdc
	(void) memset((void*) &dc_cellular_target_state, 0,
 8013a52:	e9ca 2200 	strd	r2, r2, [sl]
 8013a56:	f8ca 2008 	str.w	r2, [sl, #8]
	DC_CELLULAR_INFO = dc_com_register_serv(&dc_com_db,
 8013a5a:	4659      	mov	r1, fp
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4620      	mov	r0, r4
 8013a60:	f003 fada 	bl	8017018 <dc_com_register_serv>
 8013a64:	4b21      	ldr	r3, [pc, #132]	; (8013aec <cellular_service_datacache_init+0x104>)
			(void*) &dc_cellular_info, (uint16_t) sizeof(dc_cellular_info_t));
	DC_CELLULAR_DATA_INFO = dc_com_register_serv(&dc_com_db,
 8013a66:	491b      	ldr	r1, [pc, #108]	; (8013ad4 <cellular_service_datacache_init+0xec>)
	DC_CELLULAR_INFO = dc_com_register_serv(&dc_com_db,
 8013a68:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_DATA_INFO = dc_com_register_serv(&dc_com_db,
 8013a6a:	462a      	mov	r2, r5
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	f003 fad3 	bl	8017018 <dc_com_register_serv>
 8013a72:	4b1f      	ldr	r3, [pc, #124]	; (8013af0 <cellular_service_datacache_init+0x108>)
			(void*) &dc_cellular_data_info,
			(uint16_t) sizeof(dc_cellular_data_info_t));
	DC_CELLULAR_NIFMAN_INFO = dc_com_register_serv(&dc_com_db,
 8013a74:	4918      	ldr	r1, [pc, #96]	; (8013ad8 <cellular_service_datacache_init+0xf0>)
	DC_CELLULAR_DATA_INFO = dc_com_register_serv(&dc_com_db,
 8013a76:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_NIFMAN_INFO = dc_com_register_serv(&dc_com_db,
 8013a78:	462a      	mov	r2, r5
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	f003 facc 	bl	8017018 <dc_com_register_serv>
 8013a80:	4b1c      	ldr	r3, [pc, #112]	; (8013af4 <cellular_service_datacache_init+0x10c>)
			(void*) &dc_nifman_info, (uint16_t) sizeof(dc_nifman_info_t));
	DC_CELLULAR_NFMC_INFO = dc_com_register_serv(&dc_com_db,
 8013a82:	4916      	ldr	r1, [pc, #88]	; (8013adc <cellular_service_datacache_init+0xf4>)
	DC_CELLULAR_NIFMAN_INFO = dc_com_register_serv(&dc_com_db,
 8013a84:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_NFMC_INFO = dc_com_register_serv(&dc_com_db,
 8013a86:	464a      	mov	r2, r9
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f003 fac5 	bl	8017018 <dc_com_register_serv>
 8013a8e:	4b1a      	ldr	r3, [pc, #104]	; (8013af8 <cellular_service_datacache_init+0x110>)
			(void*) &dc_nfmc_info, (uint16_t) sizeof(dc_nfmc_info_t));
	DC_CELLULAR_SIM_INFO = dc_com_register_serv(&dc_com_db,
 8013a90:	4913      	ldr	r1, [pc, #76]	; (8013ae0 <cellular_service_datacache_init+0xf8>)
	DC_CELLULAR_NFMC_INFO = dc_com_register_serv(&dc_com_db,
 8013a92:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_SIM_INFO = dc_com_register_serv(&dc_com_db,
 8013a94:	4642      	mov	r2, r8
 8013a96:	4620      	mov	r0, r4
 8013a98:	f003 fabe 	bl	8017018 <dc_com_register_serv>
 8013a9c:	4b17      	ldr	r3, [pc, #92]	; (8013afc <cellular_service_datacache_init+0x114>)
			(void*) &dc_sim_info, (uint16_t) sizeof(dc_sim_info_t));
	DC_CELLULAR_SIGNAL_INFO = dc_com_register_serv(&dc_com_db,
 8013a9e:	4911      	ldr	r1, [pc, #68]	; (8013ae4 <cellular_service_datacache_init+0xfc>)
	DC_CELLULAR_SIM_INFO = dc_com_register_serv(&dc_com_db,
 8013aa0:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_SIGNAL_INFO = dc_com_register_serv(&dc_com_db,
 8013aa2:	463a      	mov	r2, r7
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f003 fab7 	bl	8017018 <dc_com_register_serv>
 8013aaa:	4b15      	ldr	r3, [pc, #84]	; (8013b00 <cellular_service_datacache_init+0x118>)
			(void*) &dc_signal_info, (uint16_t) sizeof(dc_signal_info_t));
	DC_CELLULAR_CONFIG = dc_com_register_serv(&dc_com_db,
 8013aac:	490e      	ldr	r1, [pc, #56]	; (8013ae8 <cellular_service_datacache_init+0x100>)
	DC_CELLULAR_SIGNAL_INFO = dc_com_register_serv(&dc_com_db,
 8013aae:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_CONFIG = dc_com_register_serv(&dc_com_db,
 8013ab0:	4632      	mov	r2, r6
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f003 fab0 	bl	8017018 <dc_com_register_serv>
 8013ab8:	4b12      	ldr	r3, [pc, #72]	; (8013b04 <cellular_service_datacache_init+0x11c>)
			(void*) &dc_cellular_params,
			(uint16_t) sizeof(dc_cellular_params_t));
	DC_CELLULAR_TARGET_STATE_CMD = dc_com_register_serv(&dc_com_db,
 8013aba:	220c      	movs	r2, #12
	DC_CELLULAR_CONFIG = dc_com_register_serv(&dc_com_db,
 8013abc:	8018      	strh	r0, [r3, #0]
	DC_CELLULAR_TARGET_STATE_CMD = dc_com_register_serv(&dc_com_db,
 8013abe:	4651      	mov	r1, sl
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f003 faa9 	bl	8017018 <dc_com_register_serv>
 8013ac6:	4b10      	ldr	r3, [pc, #64]	; (8013b08 <cellular_service_datacache_init+0x120>)
 8013ac8:	8018      	strh	r0, [r3, #0]
  DC_CELLULAR_POWER_CONFIG     = dc_com_register_serv(&dc_com_db, (void *)&dc_cellular_power_config,
                                                      (uint16_t)sizeof(dc_cellular_power_config));
  DC_CELLULAR_POWER_STATUS     = dc_com_register_serv(&dc_com_db, (void *)&dc_cellular_power_status,
                                                      (uint16_t)sizeof(dc_cellular_power_status));
#endif  /* (USE_LOW_POWER == 1) */
}
 8013aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ace:	bf00      	nop
 8013ad0:	20008d7c 	.word	0x20008d7c
 8013ad4:	20003c18 	.word	0x20003c18
 8013ad8:	20003eec 	.word	0x20003eec
 8013adc:	20003ec0 	.word	0x20003ec0
 8013ae0:	20003f10 	.word	0x20003f10
 8013ae4:	20003efc 	.word	0x20003efc
 8013ae8:	20003d04 	.word	0x20003d04
 8013aec:	20000240 	.word	0x20000240
 8013af0:	2000023e 	.word	0x2000023e
 8013af4:	20000244 	.word	0x20000244
 8013af8:	20000242 	.word	0x20000242
 8013afc:	20000248 	.word	0x20000248
 8013b00:	20000246 	.word	0x20000246
 8013b04:	2000023c 	.word	0x2000023c
 8013b08:	2000024a 	.word	0x2000024a
 8013b0c:	20003c28 	.word	0x20003c28
 8013b10:	20003eb4 	.word	0x20003eb4

08013b14 <csint_modem_reset_update_socket_state>:
  * @note  Update socket state after a modem reset
  * @param  none
  * @retval none
  */
void csint_modem_reset_update_socket_state(void)
{
 8013b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b18:	4d15      	ldr	r5, [pc, #84]	; (8013b70 <csint_modem_reset_update_socket_state+0x5c>)
        */
        cs_ctxt_sockets_info[cpt].state = SOCKETSTATE_ALLOC_BUT_INVALID;
        break;

      default:
        PRINT_ERR("unknown socket state, Should not happen")
 8013b1a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8013b78 <csint_modem_reset_update_socket_state+0x64>
 8013b1e:	4c15      	ldr	r4, [pc, #84]	; (8013b74 <csint_modem_reset_update_socket_state+0x60>)
{
 8013b20:	2600      	movs	r6, #0
        cs_ctxt_sockets_info[cpt].state = SOCKETSTATE_ALLOC_BUT_INVALID;
 8013b22:	2703      	movs	r7, #3
    switch (cs_ctxt_sockets_info[cpt].state)
 8013b24:	792b      	ldrb	r3, [r5, #4]
 8013b26:	2b02      	cmp	r3, #2
 8013b28:	d019      	beq.n	8013b5e <csint_modem_reset_update_socket_state+0x4a>
 8013b2a:	d919      	bls.n	8013b60 <csint_modem_reset_update_socket_state+0x4c>
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d017      	beq.n	8013b60 <csint_modem_reset_update_socket_state+0x4c>
        PRINT_ERR("unknown socket state, Should not happen")
 8013b30:	4641      	mov	r1, r8
 8013b32:	4620      	mov	r0, r4
 8013b34:	f009 fa30 	bl	801cf98 <strcpy>
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f004 f9fb 	bl	8017f34 <crs_strlen>
 8013b3e:	4622      	mov	r2, r4
 8013b40:	b283      	uxth	r3, r0
 8013b42:	2110      	movs	r1, #16
 8013b44:	2000      	movs	r0, #0
 8013b46:	f004 fa33 	bl	8017fb0 <traceIF_itmPrint>
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	f004 f9f2 	bl	8017f34 <crs_strlen>
 8013b50:	4622      	mov	r2, r4
 8013b52:	b283      	uxth	r3, r0
 8013b54:	2110      	movs	r1, #16
 8013b56:	2000      	movs	r0, #0
 8013b58:	f004 fc50 	bl	80183fc <traceIF_uartPrint>
        break;
 8013b5c:	e000      	b.n	8013b60 <csint_modem_reset_update_socket_state+0x4c>
        cs_ctxt_sockets_info[cpt].state = SOCKETSTATE_ALLOC_BUT_INVALID;
 8013b5e:	712f      	strb	r7, [r5, #4]
  for (cpt = 0U; cpt < CELLULAR_MAX_SOCKETS; cpt++)
 8013b60:	3601      	adds	r6, #1
 8013b62:	2e06      	cmp	r6, #6
 8013b64:	f105 056c 	add.w	r5, r5, #108	; 0x6c
 8013b68:	d1dc      	bne.n	8013b24 <csint_modem_reset_update_socket_state+0x10>
    }
  }
}
 8013b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b6e:	bf00      	nop
 8013b70:	20008814 	.word	0x20008814
 8013b74:	20008df8 	.word	0x20008df8
 8013b78:	0802a0b3 	.word	0x0802a0b3

08013b7c <csint_socket_init>:
  * @note   Initialize socket parameters
  * @param  index
  * @retval none
  */
void csint_socket_init(socket_handle_t index)
{
 8013b7c:	b570      	push	{r4, r5, r6, lr}
  PRINT_API("<Cellular_Service> SOCKET_init (index=%ld)", index)
 8013b7e:	4d1c      	ldr	r5, [pc, #112]	; (8013bf0 <csint_socket_init+0x74>)
 8013b80:	491c      	ldr	r1, [pc, #112]	; (8013bf4 <csint_socket_init+0x78>)
  cs_ctxt_sockets_info[index].addr_type = CS_IPAT_IPV4;
  cs_ctxt_sockets_info[index].protocol = CS_TCP_PROTOCOL;
  cs_ctxt_sockets_info[index].local_port = 0U;
  cs_ctxt_sockets_info[index].conf_id = CS_PDN_NOT_DEFINED;

  cs_ctxt_sockets_info[index].ip_max_packet_size = DEFAULT_IP_MAX_PACKET_SIZE;
 8013b82:	4e1d      	ldr	r6, [pc, #116]	; (8013bf8 <csint_socket_init+0x7c>)
{
 8013b84:	4604      	mov	r4, r0
  PRINT_API("<Cellular_Service> SOCKET_init (index=%ld)", index)
 8013b86:	4602      	mov	r2, r0
 8013b88:	4628      	mov	r0, r5
 8013b8a:	f009 f995 	bl	801ceb8 <sprintf>
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f004 f9d0 	bl	8017f34 <crs_strlen>
 8013b94:	462a      	mov	r2, r5
 8013b96:	b283      	uxth	r3, r0
 8013b98:	2104      	movs	r1, #4
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	f004 fa08 	bl	8017fb0 <traceIF_itmPrint>
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	f004 f9c7 	bl	8017f34 <crs_strlen>
 8013ba6:	462a      	mov	r2, r5
 8013ba8:	b283      	uxth	r3, r0
 8013baa:	2104      	movs	r1, #4
 8013bac:	2000      	movs	r0, #0
 8013bae:	f004 fc25 	bl	80183fc <traceIF_uartPrint>
  cs_ctxt_sockets_info[index].socket_handle = index;
 8013bb2:	216c      	movs	r1, #108	; 0x6c
 8013bb4:	4b11      	ldr	r3, [pc, #68]	; (8013bfc <csint_socket_init+0x80>)
 8013bb6:	4361      	muls	r1, r4
 8013bb8:	185a      	adds	r2, r3, r1
 8013bba:	505c      	str	r4, [r3, r1]
  cs_ctxt_sockets_info[index].addr_type = CS_IPAT_IPV4;
 8013bbc:	f103 0408 	add.w	r4, r3, #8
  cs_ctxt_sockets_info[index].state = SOCKETSTATE_NOT_ALLOC;
 8013bc0:	2000      	movs	r0, #0
  cs_ctxt_sockets_info[index].addr_type = CS_IPAT_IPV4;
 8013bc2:	2501      	movs	r5, #1
  cs_ctxt_sockets_info[index].state = SOCKETSTATE_NOT_ALLOC;
 8013bc4:	7110      	strb	r0, [r2, #4]
  cs_ctxt_sockets_info[index].config = CS_SON_NO_OPTION;
 8013bc6:	80d0      	strh	r0, [r2, #6]
  cs_ctxt_sockets_info[index].addr_type = CS_IPAT_IPV4;
 8013bc8:	510d      	str	r5, [r1, r4]
  cs_ctxt_sockets_info[index].conf_id = CS_PDN_NOT_DEFINED;
 8013bca:	240c      	movs	r4, #12
 8013bcc:	7314      	strb	r4, [r2, #12]
  cs_ctxt_sockets_info[index].trp_max_timeout = DEFAULT_TRP_MAX_TIMEOUT;
  cs_ctxt_sockets_info[index].trp_conn_setup_timeout = DEFAULT_TRP_CONN_SETUP_TIMEOUT;
  cs_ctxt_sockets_info[index].trp_transfer_timeout = DEFAULT_TRP_TRANSFER_TIMEOUT;
 8013bce:	f101 0450 	add.w	r4, r1, #80	; 0x50
 8013bd2:	18e5      	adds	r5, r4, r3
  cs_ctxt_sockets_info[index].ip_max_packet_size = DEFAULT_IP_MAX_PACKET_SIZE;
 8013bd4:	50e6      	str	r6, [r4, r3]
  cs_ctxt_sockets_info[index].trp_conn_setup_timeout = DEFAULT_TRP_CONN_SETUP_TIMEOUT;
 8013bd6:	4c0a      	ldr	r4, [pc, #40]	; (8013c00 <csint_socket_init+0x84>)
 8013bd8:	606c      	str	r4, [r5, #4]
  cs_ctxt_sockets_info[index].trp_connect_mode = CS_CM_COMMAND_MODE;
 8013bda:	3358      	adds	r3, #88	; 0x58
 8013bdc:	f04f 747a 	mov.w	r4, #65536000	; 0x3e80000
 8013be0:	50cc      	str	r4, [r1, r3]
  cs_ctxt_sockets_info[index].trp_suspend_timeout = DEFAULT_TRP_SUSPEND_TIMEOUT;
  cs_ctxt_sockets_info[index].trp_rx_timeout = DEFAULT_TRP_RX_TIMEOUT;
 8013be2:	2332      	movs	r3, #50	; 0x32

  /* socket callback functions pointers */
  cs_ctxt_sockets_info[index].socket_data_ready_callback = NULL;
  cs_ctxt_sockets_info[index].socket_data_sent_callback = NULL;
 8013be4:	e9c2 0018 	strd	r0, r0, [r2, #96]	; 0x60
  cs_ctxt_sockets_info[index].trp_rx_timeout = DEFAULT_TRP_RX_TIMEOUT;
 8013be8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
  cs_ctxt_sockets_info[index].socket_remote_close_callback = NULL;
 8013bec:	6690      	str	r0, [r2, #104]	; 0x68
}
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	20008df8 	.word	0x20008df8
 8013bf4:	0802a0e6 	.word	0x0802a0e6
 8013bf8:	005a05dc 	.word	0x005a05dc
 8013bfc:	20008814 	.word	0x20008814
 8013c00:	00320258 	.word	0x00320258

08013c04 <osCS_get_signal_quality>:
 * @brief  Read the actual signal quality seen by Modem .
 * @note   Call CS_get_signal_quality with mutex access protection
 * @param  same parameters as the CS_get_signal_quality function
 * @retval CS_Status_t
 */
CS_Status_t osCS_get_signal_quality(CS_SignalQuality_t *p_sig_qual) {
 8013c04:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013c06:	4d08      	ldr	r5, [pc, #32]	; (8013c28 <osCS_get_signal_quality+0x24>)
 8013c08:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCS_get_signal_quality(CS_SignalQuality_t *p_sig_qual) {
 8013c0c:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013c0e:	6828      	ldr	r0, [r5, #0]
 8013c10:	f004 f8dd 	bl	8017dce <rtosalMutexAcquire>

	result = CS_get_signal_quality(p_sig_qual);
 8013c14:	4620      	mov	r0, r4
 8013c16:	f7fc f9a3 	bl	800ff60 <CS_get_signal_quality>
 8013c1a:	4604      	mov	r4, r0

	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013c1c:	6828      	ldr	r0, [r5, #0]
 8013c1e:	f004 f8d8 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013c22:	4620      	mov	r0, r4
 8013c24:	bd38      	pop	{r3, r4, r5, pc}
 8013c26:	bf00      	nop
 8013c28:	20003f38 	.word	0x20003f38

08013c2c <osCDS_cellular_service_init>:
/**
 * @brief  cellular service initialization
 * @param  none
 * @retval CS_Bool_t   cellular initialized or not
 */
CS_Bool_t osCDS_cellular_service_init(void) {
 8013c2c:	b570      	push	{r4, r5, r6, lr}
	static CS_Bool_t CellularServiceInitialized = CELLULAR_FALSE;
	CS_Bool_t result;

	result = CELLULAR_TRUE;
	if (CellularServiceInitialized == CELLULAR_FALSE) {
 8013c2e:	4e10      	ldr	r6, [pc, #64]	; (8013c70 <osCDS_cellular_service_init+0x44>)
 8013c30:	7830      	ldrb	r0, [r6, #0]
 8013c32:	b9d0      	cbnz	r0, 8013c6a <osCDS_cellular_service_init+0x3e>
		CellularServiceMutexHandle = rtosalMutexNew(NULL);
 8013c34:	f004 f8c2 	bl	8017dbc <rtosalMutexNew>
 8013c38:	4b0e      	ldr	r3, [pc, #56]	; (8013c74 <osCDS_cellular_service_init+0x48>)
 8013c3a:	4604      	mov	r4, r0
 8013c3c:	6018      	str	r0, [r3, #0]
		if (CellularServiceMutexHandle == NULL) {
 8013c3e:	b9a8      	cbnz	r0, 8013c6c <osCDS_cellular_service_init+0x40>
			result = CELLULAR_FALSE;
			/* Platform is reset */
			ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 1, ERROR_FATAL);
 8013c40:	2203      	movs	r2, #3
 8013c42:	2101      	movs	r1, #1
 8013c44:	2002      	movs	r0, #2
 8013c46:	f003 fb79 	bl	801733c <ERROR_Handler>
		}
		CellularServiceGeneralMutexHandle = rtosalMutexNew(NULL);
 8013c4a:	2000      	movs	r0, #0
 8013c4c:	f004 f8b6 	bl	8017dbc <rtosalMutexNew>
 8013c50:	4b09      	ldr	r3, [pc, #36]	; (8013c78 <osCDS_cellular_service_init+0x4c>)
 8013c52:	4605      	mov	r5, r0
 8013c54:	6018      	str	r0, [r3, #0]
		if (CellularServiceGeneralMutexHandle == NULL) {
 8013c56:	b928      	cbnz	r0, 8013c64 <osCDS_cellular_service_init+0x38>
			result = CELLULAR_FALSE;
			/* Platform is reset */
			ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 2, ERROR_FATAL);
 8013c58:	2102      	movs	r1, #2
 8013c5a:	2203      	movs	r2, #3
 8013c5c:	4608      	mov	r0, r1
 8013c5e:	f003 fb6d 	bl	801733c <ERROR_Handler>
			result = CELLULAR_FALSE;
 8013c62:	462c      	mov	r4, r5
		}

		/* To do next line of code not done under if result == CELLULAR_TRUE
		 because if result == CELLULAR_FALSE platform is reset (avoid quality error)
		 */
		CellularServiceInitialized = CELLULAR_TRUE;
 8013c64:	2301      	movs	r3, #1
 8013c66:	7033      	strb	r3, [r6, #0]
 8013c68:	4620      	mov	r0, r4
	}

	return result;
}
 8013c6a:	bd70      	pop	{r4, r5, r6, pc}
	result = CELLULAR_TRUE;
 8013c6c:	2401      	movs	r4, #1
 8013c6e:	e7ec      	b.n	8013c4a <osCDS_cellular_service_init+0x1e>
 8013c70:	20003f34 	.word	0x20003f34
 8013c74:	20003f38 	.word	0x20003f38
 8013c78:	20003f30 	.word	0x20003f30

08013c7c <osCDS_get_net_status>:
 * @brief  Read the latest registration state to the Cellular Network.
 * @note   Call CS_get_net_status with mutex access protection
 * @param  same parameters as the CS_get_net_status function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_get_net_status(CS_RegistrationStatus_t *p_reg_status) {
 8013c7c:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013c7e:	4d08      	ldr	r5, [pc, #32]	; (8013ca0 <osCDS_get_net_status+0x24>)
 8013c80:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCDS_get_net_status(CS_RegistrationStatus_t *p_reg_status) {
 8013c84:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013c86:	6828      	ldr	r0, [r5, #0]
 8013c88:	f004 f8a1 	bl	8017dce <rtosalMutexAcquire>
	result = CS_get_net_status(p_reg_status);
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f7fc f8f5 	bl	800fe7c <CS_get_net_status>
 8013c92:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013c94:	6828      	ldr	r0, [r5, #0]
 8013c96:	f004 f89c 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	bd38      	pop	{r3, r4, r5, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20003f38 	.word	0x20003f38

08013ca4 <osCDS_get_device_info>:
 * @brief  Return information related to modem status.
 * @note   Call CS_get_device_info with mutex access protection
 * @param  same parameters as the CS_get_device_info function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_get_device_info(CS_DeviceInfo_t *p_devinfo) {
 8013ca4:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013ca6:	4d08      	ldr	r5, [pc, #32]	; (8013cc8 <osCDS_get_device_info+0x24>)
 8013ca8:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCDS_get_device_info(CS_DeviceInfo_t *p_devinfo) {
 8013cac:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013cae:	6828      	ldr	r0, [r5, #0]
 8013cb0:	f004 f88d 	bl	8017dce <rtosalMutexAcquire>
	result = CS_get_device_info(p_devinfo);
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	f7fb fdd3 	bl	800f860 <CS_get_device_info>
 8013cba:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013cbc:	6828      	ldr	r0, [r5, #0]
 8013cbe:	f004 f888 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	bd38      	pop	{r3, r4, r5, pc}
 8013cc6:	bf00      	nop
 8013cc8:	20003f38 	.word	0x20003f38

08013ccc <osCDS_subscribe_net_event>:
 * @param  urc_callback Handle on user callback that will be used to notify a
 *                      change on requested event.
 * @retval CS_Status_t
 */
CS_Status_t osCDS_subscribe_net_event(CS_UrcEvent_t event,
		cellular_urc_callback_t urc_callback) {
 8013ccc:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013cce:	4e09      	ldr	r6, [pc, #36]	; (8013cf4 <osCDS_subscribe_net_event+0x28>)
		cellular_urc_callback_t urc_callback) {
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013cd4:	6830      	ldr	r0, [r6, #0]
 8013cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8013cda:	f004 f878 	bl	8017dce <rtosalMutexAcquire>
	result = CS_subscribe_net_event(event, urc_callback);
 8013cde:	4629      	mov	r1, r5
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f7fb feb7 	bl	800fa54 <CS_subscribe_net_event>
 8013ce6:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013ce8:	6830      	ldr	r0, [r6, #0]
 8013cea:	f004 f872 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013cee:	4620      	mov	r0, r4
 8013cf0:	bd70      	pop	{r4, r5, r6, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20003f38 	.word	0x20003f38

08013cf8 <osCDS_subscribe_modem_event>:
 * @param  same parameters as the CS_subscribe_modem_event function
 *         change on requested event.
 * @retval CS_Status_t
 */
CS_Status_t osCDS_subscribe_modem_event(CS_ModemEvent_t events_mask,
		cellular_modem_event_callback_t modem_evt_cb) {
 8013cf8:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013cfa:	4e09      	ldr	r6, [pc, #36]	; (8013d20 <osCDS_subscribe_modem_event+0x28>)
		cellular_modem_event_callback_t modem_evt_cb) {
 8013cfc:	4604      	mov	r4, r0
 8013cfe:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013d00:	6830      	ldr	r0, [r6, #0]
 8013d02:	f04f 31ff 	mov.w	r1, #4294967295
 8013d06:	f004 f862 	bl	8017dce <rtosalMutexAcquire>
	result = CS_subscribe_modem_event(events_mask, modem_evt_cb);
 8013d0a:	4629      	mov	r1, r5
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f7fc fbb3 	bl	8010478 <CS_subscribe_modem_event>
 8013d12:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013d14:	6830      	ldr	r0, [r6, #0]
 8013d16:	f004 f85c 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	bd70      	pop	{r4, r5, r6, pc}
 8013d1e:	bf00      	nop
 8013d20:	20003f38 	.word	0x20003f38

08013d24 <osCDS_power_on>:
 * @brief  Power ON the modem
 * @note   Call CS_power_on with mutex access protection
 * @param  none
 * @retval CS_Status_t
 */
CS_Status_t osCDS_power_on(void) {
 8013d24:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result = CELLULAR_OK;

	if (cst_context.modem_on == false) {
 8013d26:	4d0b      	ldr	r5, [pc, #44]	; (8013d54 <osCDS_power_on+0x30>)
 8013d28:	7c6b      	ldrb	r3, [r5, #17]
 8013d2a:	b983      	cbnz	r3, 8013d4e <osCDS_power_on+0x2a>
		(void) rtosalMutexAcquire(CellularServiceMutexHandle,
 8013d2c:	4e0a      	ldr	r6, [pc, #40]	; (8013d58 <osCDS_power_on+0x34>)
 8013d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8013d32:	6830      	ldr	r0, [r6, #0]
 8013d34:	f004 f84b 	bl	8017dce <rtosalMutexAcquire>
				RTOSAL_WAIT_FOREVER);
		result = CS_power_on();
 8013d38:	f7fb fb9e 	bl	800f478 <CS_power_on>
 8013d3c:	4604      	mov	r4, r0
		(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013d3e:	6830      	ldr	r0, [r6, #0]
 8013d40:	f004 f847 	bl	8017dd2 <rtosalMutexRelease>
		if (result == CELLULAR_OK) {
 8013d44:	b90c      	cbnz	r4, 8013d4a <osCDS_power_on+0x26>
			cst_context.modem_on = true;
 8013d46:	2301      	movs	r3, #1
 8013d48:	746b      	strb	r3, [r5, #17]
		}
	}
	return (result);
}
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	bd70      	pop	{r4, r5, r6, pc}
	CS_Status_t result = CELLULAR_OK;
 8013d4e:	2400      	movs	r4, #0
 8013d50:	e7fb      	b.n	8013d4a <osCDS_power_on+0x26>
 8013d52:	bf00      	nop
 8013d54:	2000029c 	.word	0x2000029c
 8013d58:	20003f38 	.word	0x20003f38

08013d5c <osCDS_power_off>:
 * @brief  Power OFF the modem
 * @note   Call CS_power_off with mutex access protection
 * @param  none
 * @retval CS_Status_t
 */
CS_Status_t osCDS_power_off(void) {
 8013d5c:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result = CELLULAR_OK;

	if (cst_context.modem_on == true) {
 8013d5e:	4d09      	ldr	r5, [pc, #36]	; (8013d84 <osCDS_power_off+0x28>)
 8013d60:	7c6c      	ldrb	r4, [r5, #17]
 8013d62:	b16c      	cbz	r4, 8013d80 <osCDS_power_off+0x24>
		(void) rtosalMutexAcquire(CellularServiceMutexHandle,
 8013d64:	4e08      	ldr	r6, [pc, #32]	; (8013d88 <osCDS_power_off+0x2c>)
 8013d66:	f04f 31ff 	mov.w	r1, #4294967295
 8013d6a:	6830      	ldr	r0, [r6, #0]
 8013d6c:	f004 f82f 	bl	8017dce <rtosalMutexAcquire>
				RTOSAL_WAIT_FOREVER);
		result = CS_power_off();
 8013d70:	f7fb fbf4 	bl	800f55c <CS_power_off>
 8013d74:	4604      	mov	r4, r0
		(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013d76:	6830      	ldr	r0, [r6, #0]
 8013d78:	f004 f82b 	bl	8017dd2 <rtosalMutexRelease>
		if (result == CELLULAR_OK) {
 8013d7c:	b904      	cbnz	r4, 8013d80 <osCDS_power_off+0x24>
			cst_context.modem_on = false;
 8013d7e:	746c      	strb	r4, [r5, #17]
		}
	}
	return (result);
}
 8013d80:	4620      	mov	r0, r4
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
 8013d84:	2000029c 	.word	0x2000029c
 8013d88:	20003f38 	.word	0x20003f38

08013d8c <osCDS_init_modem>:
 * @note   Call CS_init_modem with mutex access protection
 * @param  same parameters as the CS_init_modem function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_init_modem(CS_ModemInit_t init, CS_Bool_t reset,
		const CS_CHAR_t *pin_code) {
 8013d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013d8e:	4e0a      	ldr	r6, [pc, #40]	; (8013db8 <osCDS_init_modem+0x2c>)
		const CS_CHAR_t *pin_code) {
 8013d90:	9201      	str	r2, [sp, #4]
 8013d92:	4604      	mov	r4, r0
 8013d94:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013d96:	6830      	ldr	r0, [r6, #0]
 8013d98:	f04f 31ff 	mov.w	r1, #4294967295
 8013d9c:	f004 f817 	bl	8017dce <rtosalMutexAcquire>
	result = CS_init_modem(init, reset, pin_code);
 8013da0:	9a01      	ldr	r2, [sp, #4]
 8013da2:	4629      	mov	r1, r5
 8013da4:	4620      	mov	r0, r4
 8013da6:	f7fb fcd7 	bl	800f758 <CS_init_modem>
 8013daa:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013dac:	6830      	ldr	r0, [r6, #0]
 8013dae:	f004 f810 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013db2:	4620      	mov	r0, r4
 8013db4:	b002      	add	sp, #8
 8013db6:	bd70      	pop	{r4, r5, r6, pc}
 8013db8:	20003f38 	.word	0x20003f38

08013dbc <osCDS_register_net>:
 * @note   Call CS_register_net with mutex access protection
 * @param  same parameters as the CS_register_net function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_register_net(CS_OperatorSelector_t *p_operator,
		CS_RegistrationStatus_t *p_reg_status) {
 8013dbc:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013dbe:	4e09      	ldr	r6, [pc, #36]	; (8013de4 <osCDS_register_net+0x28>)
		CS_RegistrationStatus_t *p_reg_status) {
 8013dc0:	4604      	mov	r4, r0
 8013dc2:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013dc4:	6830      	ldr	r0, [r6, #0]
 8013dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8013dca:	f004 f800 	bl	8017dce <rtosalMutexAcquire>
	result = CS_register_net(p_operator, p_reg_status);
 8013dce:	4629      	mov	r1, r5
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f7fb fdc3 	bl	800f95c <CS_register_net>
 8013dd6:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013dd8:	6830      	ldr	r0, [r6, #0]
 8013dda:	f003 fffa 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013dde:	4620      	mov	r0, r4
 8013de0:	bd70      	pop	{r4, r5, r6, pc}
 8013de2:	bf00      	nop
 8013de4:	20003f38 	.word	0x20003f38

08013de8 <osCS_detach_PS_domain>:
/**
 * @brief  Request detach from packet domain.
 * @param  none.
 * @retval CS_Status_t
 */
CS_Status_t osCS_detach_PS_domain(void) {
 8013de8:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013dea:	4d07      	ldr	r5, [pc, #28]	; (8013e08 <osCS_detach_PS_domain+0x20>)
 8013dec:	f04f 31ff 	mov.w	r1, #4294967295
 8013df0:	6828      	ldr	r0, [r5, #0]
 8013df2:	f003 ffec 	bl	8017dce <rtosalMutexAcquire>
	result = CS_detach_PS_domain();
 8013df6:	f7fb ff6b 	bl	800fcd0 <CS_detach_PS_domain>
 8013dfa:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013dfc:	6828      	ldr	r0, [r5, #0]
 8013dfe:	f003 ffe8 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013e02:	4620      	mov	r0, r4
 8013e04:	bd38      	pop	{r3, r4, r5, pc}
 8013e06:	bf00      	nop
 8013e08:	20003f38 	.word	0x20003f38

08013e0c <osCDS_get_attach_status>:
 * @brief  Request for packet attach status.
 * @note   Call CDS_socket_set_callbacks with mutex access protection
 * @param  same parameters as the CDS_socket_set_callbacks function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_get_attach_status(CS_PSattach_t *p_attach) {
 8013e0c:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e0e:	4d08      	ldr	r5, [pc, #32]	; (8013e30 <osCDS_get_attach_status+0x24>)
 8013e10:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCDS_get_attach_status(CS_PSattach_t *p_attach) {
 8013e14:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e16:	6828      	ldr	r0, [r5, #0]
 8013e18:	f003 ffd9 	bl	8017dce <rtosalMutexAcquire>
	result = CS_get_attach_status(p_attach);
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	f7fb ffbd 	bl	800fd9c <CS_get_attach_status>
 8013e22:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013e24:	6828      	ldr	r0, [r5, #0]
 8013e26:	f003 ffd4 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	bd38      	pop	{r3, r4, r5, pc}
 8013e2e:	bf00      	nop
 8013e30:	20003f38 	.word	0x20003f38

08013e34 <osCDS_attach_PS_domain>:
 * @brief  Request attach to packet domain.
 * @note   Call CS_attach_PS_domain with mutex access protection
 * @param  none.
 * @retval CS_Status_t
 */
CS_Status_t osCDS_attach_PS_domain(void) {
 8013e34:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e36:	4d07      	ldr	r5, [pc, #28]	; (8013e54 <osCDS_attach_PS_domain+0x20>)
 8013e38:	f04f 31ff 	mov.w	r1, #4294967295
 8013e3c:	6828      	ldr	r0, [r5, #0]
 8013e3e:	f003 ffc6 	bl	8017dce <rtosalMutexAcquire>
	result = CS_attach_PS_domain();
 8013e42:	f7fb fedf 	bl	800fc04 <CS_attach_PS_domain>
 8013e46:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013e48:	6828      	ldr	r0, [r5, #0]
 8013e4a:	f003 ffc2 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013e4e:	4620      	mov	r0, r4
 8013e50:	bd38      	pop	{r3, r4, r5, pc}
 8013e52:	bf00      	nop
 8013e54:	20003f38 	.word	0x20003f38

08013e58 <osCDS_define_pdn>:
 * @note   Call CS_define_pdn with mutex access protection
 * @param  same parameters as the CS_define_pdn function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_define_pdn(CS_PDN_conf_id_t cid, const CS_CHAR_t *apn,
		CS_PDN_configuration_t *pdn_conf) {
 8013e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e5a:	4e0a      	ldr	r6, [pc, #40]	; (8013e84 <osCDS_define_pdn+0x2c>)
		CS_PDN_configuration_t *pdn_conf) {
 8013e5c:	9201      	str	r2, [sp, #4]
 8013e5e:	4604      	mov	r4, r0
 8013e60:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e62:	6830      	ldr	r0, [r6, #0]
 8013e64:	f04f 31ff 	mov.w	r1, #4294967295
 8013e68:	f003 ffb1 	bl	8017dce <rtosalMutexAcquire>
	result = CS_define_pdn(cid, apn, pdn_conf);
 8013e6c:	9a01      	ldr	r2, [sp, #4]
 8013e6e:	4629      	mov	r1, r5
 8013e70:	4620      	mov	r0, r4
 8013e72:	f7fc f953 	bl	801011c <CS_define_pdn>
 8013e76:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013e78:	6830      	ldr	r0, [r6, #0]
 8013e7a:	f003 ffaa 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013e7e:	4620      	mov	r0, r4
 8013e80:	b002      	add	sp, #8
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	20003f38 	.word	0x20003f38

08013e88 <osCDS_register_pdn_event>:
 * @note   Call CS_register_pdn_event with mutex access protection
 * @param  same parameters as the CS_register_pdn_event function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_register_pdn_event(CS_PDN_conf_id_t cid,
		cellular_pdn_event_callback_t pdn_event_callback) {
 8013e88:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e8a:	4e09      	ldr	r6, [pc, #36]	; (8013eb0 <osCDS_register_pdn_event+0x28>)
		cellular_pdn_event_callback_t pdn_event_callback) {
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013e90:	6830      	ldr	r0, [r6, #0]
 8013e92:	f04f 31ff 	mov.w	r1, #4294967295
 8013e96:	f003 ff9a 	bl	8017dce <rtosalMutexAcquire>
	result = CS_register_pdn_event(cid, pdn_event_callback);
 8013e9a:	4629      	mov	r1, r5
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	f7fc fb5b 	bl	8010558 <CS_register_pdn_event>
 8013ea2:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013ea4:	6830      	ldr	r0, [r6, #0]
 8013ea6:	f003 ff94 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013eaa:	4620      	mov	r0, r4
 8013eac:	bd70      	pop	{r4, r5, r6, pc}
 8013eae:	bf00      	nop
 8013eb0:	20003f38 	.word	0x20003f38

08013eb4 <osCDS_set_default_pdn>:
 * @note   By default, PDN_PREDEF_CONFIG is considered as the default PDN.
 * @note   Call CS_set_default_pdn with mutex access protection
 * @param  same parameters as the CS_set_default_pdn function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_set_default_pdn(CS_PDN_conf_id_t cid) {
 8013eb4:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013eb6:	4d08      	ldr	r5, [pc, #32]	; (8013ed8 <osCDS_set_default_pdn+0x24>)
 8013eb8:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCDS_set_default_pdn(CS_PDN_conf_id_t cid) {
 8013ebc:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013ebe:	6828      	ldr	r0, [r5, #0]
 8013ec0:	f003 ff85 	bl	8017dce <rtosalMutexAcquire>
	result = CS_set_default_pdn(cid);
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f7fc f9c7 	bl	8010258 <CS_set_default_pdn>
 8013eca:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013ecc:	6828      	ldr	r0, [r5, #0]
 8013ece:	f003 ff80 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	bd38      	pop	{r3, r4, r5, pc}
 8013ed6:	bf00      	nop
 8013ed8:	20003f38 	.word	0x20003f38

08013edc <osCDS_activate_pdn>:
 * @note   Only one PDN can be activated at a time.
 * @note   Call CS_activate_pdn with mutex access protection
 * @param  same parameters as the CS_activate_pdn function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_activate_pdn(CS_PDN_conf_id_t cid) {
 8013edc:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013ede:	4d08      	ldr	r5, [pc, #32]	; (8013f00 <osCDS_activate_pdn+0x24>)
 8013ee0:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCDS_activate_pdn(CS_PDN_conf_id_t cid) {
 8013ee4:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013ee6:	6828      	ldr	r0, [r5, #0]
 8013ee8:	f003 ff71 	bl	8017dce <rtosalMutexAcquire>
	result = CS_activate_pdn(cid);
 8013eec:	4620      	mov	r0, r4
 8013eee:	f7fc f8a5 	bl	801003c <CS_activate_pdn>
 8013ef2:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013ef4:	6828      	ldr	r0, [r5, #0]
 8013ef6:	f003 ff6c 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013efa:	4620      	mov	r0, r4
 8013efc:	bd38      	pop	{r3, r4, r5, pc}
 8013efe:	bf00      	nop
 8013f00:	20003f38 	.word	0x20003f38

08013f04 <osCDS_direct_cmd>:
 * @note   Call CS_direct_cmd with mutex access protection
 * @param  same parameters as the CS_direct_cmd function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_direct_cmd(CS_direct_cmd_tx_t *direct_cmd_tx,
		cellular_direct_cmd_callback_t direct_cmd_callback) {
 8013f04:	b570      	push	{r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f06:	4e09      	ldr	r6, [pc, #36]	; (8013f2c <osCDS_direct_cmd+0x28>)
		cellular_direct_cmd_callback_t direct_cmd_callback) {
 8013f08:	4604      	mov	r4, r0
 8013f0a:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f0c:	6830      	ldr	r0, [r6, #0]
 8013f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8013f12:	f003 ff5c 	bl	8017dce <rtosalMutexAcquire>
	result = CS_direct_cmd(direct_cmd_tx, direct_cmd_callback);
 8013f16:	4629      	mov	r1, r5
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f7fc fbad 	bl	8010678 <CS_direct_cmd>
 8013f1e:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013f20:	6830      	ldr	r0, [r6, #0]
 8013f22:	f003 ff56 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013f26:	4620      	mov	r0, r4
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	bf00      	nop
 8013f2c:	20003f38 	.word	0x20003f38

08013f30 <osCDS_get_dev_IP_address>:
 * @note   Call osCDS_get_dev_IP_address with mutex access protection
 * @param  same parameters as the osCDS_get_dev_IP_address function
 * @retval CS_Status_t
 */
CS_Status_t osCDS_get_dev_IP_address(CS_PDN_conf_id_t cid,
		CS_IPaddrType_t *ip_addr_type, CS_CHAR_t *p_ip_addr_value) {
 8013f30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f32:	4e0a      	ldr	r6, [pc, #40]	; (8013f5c <osCDS_get_dev_IP_address+0x2c>)
		CS_IPaddrType_t *ip_addr_type, CS_CHAR_t *p_ip_addr_value) {
 8013f34:	9201      	str	r2, [sp, #4]
 8013f36:	4604      	mov	r4, r0
 8013f38:	460d      	mov	r5, r1
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f3a:	6830      	ldr	r0, [r6, #0]
 8013f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8013f40:	f003 ff45 	bl	8017dce <rtosalMutexAcquire>
	result = CS_get_dev_IP_address(cid, ip_addr_type, p_ip_addr_value);
 8013f44:	9a01      	ldr	r2, [sp, #4]
 8013f46:	4629      	mov	r1, r5
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f7fc f9f5 	bl	8010338 <CS_get_dev_IP_address>
 8013f4e:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013f50:	6830      	ldr	r0, [r6, #0]
 8013f52:	f003 ff3e 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013f56:	4620      	mov	r0, r4
 8013f58:	b002      	add	sp, #8
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}
 8013f5c:	20003f38 	.word	0x20003f38

08013f60 <osCS_sim_select>:
 * @note   Only one SIM slot is active at a time.
 *         Call CS_sim_select with mutex access protection
 * @param  same parameters as the CS_sim_select function
 * @retval CS_Status_t
 */
CS_Status_t osCS_sim_select(CS_SimSlot_t simSelected) {
 8013f60:	b538      	push	{r3, r4, r5, lr}
	CS_Status_t result;

	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f62:	4d08      	ldr	r5, [pc, #32]	; (8013f84 <osCS_sim_select+0x24>)
 8013f64:	f04f 31ff 	mov.w	r1, #4294967295
CS_Status_t osCS_sim_select(CS_SimSlot_t simSelected) {
 8013f68:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f6a:	6828      	ldr	r0, [r5, #0]
 8013f6c:	f003 ff2f 	bl	8017dce <rtosalMutexAcquire>
	result = CS_sim_select(simSelected);
 8013f70:	4620      	mov	r0, r4
 8013f72:	f7fb fb7f 	bl	800f674 <CS_sim_select>
 8013f76:	4604      	mov	r4, r0
	(void) rtosalMutexRelease(CellularServiceMutexHandle);
 8013f78:	6828      	ldr	r0, [r5, #0]
 8013f7a:	f003 ff2a 	bl	8017dd2 <rtosalMutexRelease>

	return (result);
}
 8013f7e:	4620      	mov	r0, r4
 8013f80:	bd38      	pop	{r3, r4, r5, pc}
 8013f82:	bf00      	nop
 8013f84:	20003f38 	.word	0x20003f38

08013f88 <osCS_ComMdm_subscribe_event>:
  * @brief  Register a callback for MDM URC messages from modem
  * @note
  * @param  commdm_urc_cb Pointer to the call backfunction
  * @retval CS_Status_t
  */CS_Status_t osCS_ComMdm_subscribe_event(CS_comMdm_callback_t commdm_urc_cb)
{
 8013f88:	b538      	push	{r3, r4, r5, lr}
  CS_Status_t result;

  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f8a:	4d08      	ldr	r5, [pc, #32]	; (8013fac <osCS_ComMdm_subscribe_event+0x24>)
 8013f8c:	f04f 31ff 	mov.w	r1, #4294967295
{
 8013f90:	4604      	mov	r4, r0
  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013f92:	6828      	ldr	r0, [r5, #0]
 8013f94:	f003 ff1b 	bl	8017dce <rtosalMutexAcquire>
  result = CS_ComMdm_subscribe_event(commdm_urc_cb);
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7fc fbf7 	bl	801078c <CS_ComMdm_subscribe_event>
 8013f9e:	4604      	mov	r4, r0
  (void)rtosalMutexRelease(CellularServiceMutexHandle);
 8013fa0:	6828      	ldr	r0, [r5, #0]
 8013fa2:	f003 ff16 	bl	8017dd2 <rtosalMutexRelease>

  return (result);
}
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	bd38      	pop	{r3, r4, r5, pc}
 8013faa:	bf00      	nop
 8013fac:	20003f38 	.word	0x20003f38

08013fb0 <osCS_ComMdm_transaction>:
  * @param  rxBuf Pointer to the structure describing received response data
  * @param  errorCode Pointer to an integer representing the error status associated with the response data
  * @retval CS_Status_t
  */
CS_Status_t osCS_ComMdm_transaction(CS_Tx_Buffer_t *txBuf, CS_Rx_Buffer_t *rxBuf, int32_t *errorCode)
{
 8013fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CS_Status_t result;

  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013fb2:	4e0a      	ldr	r6, [pc, #40]	; (8013fdc <osCS_ComMdm_transaction+0x2c>)
{
 8013fb4:	9201      	str	r2, [sp, #4]
 8013fb6:	4604      	mov	r4, r0
 8013fb8:	460d      	mov	r5, r1
  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013fba:	6830      	ldr	r0, [r6, #0]
 8013fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8013fc0:	f003 ff05 	bl	8017dce <rtosalMutexAcquire>
  result = CS_ComMdm_transaction(txBuf, rxBuf, errorCode);
 8013fc4:	9a01      	ldr	r2, [sp, #4]
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	4620      	mov	r0, r4
 8013fca:	f7fc fc03 	bl	80107d4 <CS_ComMdm_transaction>
 8013fce:	4604      	mov	r4, r0
  (void)rtosalMutexRelease(CellularServiceMutexHandle);
 8013fd0:	6830      	ldr	r0, [r6, #0]
 8013fd2:	f003 fefe 	bl	8017dd2 <rtosalMutexRelease>

  return (result);
}
 8013fd6:	4620      	mov	r0, r4
 8013fd8:	b002      	add	sp, #8
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	20003f38 	.word	0x20003f38

08013fe0 <osCS_ComMdm_send>:
  * @param  txBuf Pointer to the structure describing data to transmit
  * @param  errorCode Pointer to an integer representing the error status
  * @retval CS_Status_t
  */
CS_Status_t osCS_ComMdm_send(CS_Tx_Buffer_t *txBuf, int32_t *errorCode)
{
 8013fe0:	b570      	push	{r4, r5, r6, lr}
  CS_Status_t result;

  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013fe2:	4e09      	ldr	r6, [pc, #36]	; (8014008 <osCS_ComMdm_send+0x28>)
{
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	460d      	mov	r5, r1
  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8013fe8:	6830      	ldr	r0, [r6, #0]
 8013fea:	f04f 31ff 	mov.w	r1, #4294967295
 8013fee:	f003 feee 	bl	8017dce <rtosalMutexAcquire>
  result = CS_ComMdm_send(txBuf, errorCode);
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f7fc fcd9 	bl	80109ac <CS_ComMdm_send>
 8013ffa:	4604      	mov	r4, r0
  (void)rtosalMutexRelease(CellularServiceMutexHandle);
 8013ffc:	6830      	ldr	r0, [r6, #0]
 8013ffe:	f003 fee8 	bl	8017dd2 <rtosalMutexRelease>

  return (result);
}
 8014002:	4620      	mov	r0, r4
 8014004:	bd70      	pop	{r4, r5, r6, pc}
 8014006:	bf00      	nop
 8014008:	20003f38 	.word	0x20003f38

0801400c <osCS_ComMdm_receive>:
  * @param  rxBuf Pointer to the structure describing received data
  * @param  errorCode Pointer to an integer representing the error status associated with the received data
  * @retval CS_Status_t
  */
CS_Status_t osCS_ComMdm_receive(CS_Rx_Buffer_t *rxBuf, int32_t *errorCode)
{
 801400c:	b570      	push	{r4, r5, r6, lr}
  CS_Status_t result;

  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 801400e:	4e09      	ldr	r6, [pc, #36]	; (8014034 <osCS_ComMdm_receive+0x28>)
{
 8014010:	4604      	mov	r4, r0
 8014012:	460d      	mov	r5, r1
  (void)rtosalMutexAcquire(CellularServiceMutexHandle, RTOSAL_WAIT_FOREVER);
 8014014:	6830      	ldr	r0, [r6, #0]
 8014016:	f04f 31ff 	mov.w	r1, #4294967295
 801401a:	f003 fed8 	bl	8017dce <rtosalMutexAcquire>
  result = CS_ComMdm_receive(rxBuf, errorCode);
 801401e:	4629      	mov	r1, r5
 8014020:	4620      	mov	r0, r4
 8014022:	f7fc fd4b 	bl	8010abc <CS_ComMdm_receive>
 8014026:	4604      	mov	r4, r0
  (void)rtosalMutexRelease(CellularServiceMutexHandle);
 8014028:	6830      	ldr	r0, [r6, #0]
 801402a:	f003 fed2 	bl	8017dd2 <rtosalMutexRelease>

  return (result);
}
 801402e:	4620      	mov	r0, r4
 8014030:	bd70      	pop	{r4, r5, r6, pc}
 8014032:	bf00      	nop
 8014034:	20003f38 	.word	0x20003f38

08014038 <CST_send_message>:

	cmd_message = 0U;
	SET_AUTOMATON_MSG_TYPE(cmd_message, type);
	SET_AUTOMATON_MSG_ID(cmd_message, event);

	if (rtosalMessageQueuePut((osMessageQId) cst_queue_id, cmd_message, 0U)
 8014038:	4b11      	ldr	r3, [pc, #68]	; (8014080 <CST_send_message+0x48>)
void CST_send_message(CST_message_type_t type, cst_autom_event_t event) {
 801403a:	b510      	push	{r4, lr}
	SET_AUTOMATON_MSG_ID(cmd_message, event);
 801403c:	ea40 4401 	orr.w	r4, r0, r1, lsl #16
	if (rtosalMessageQueuePut((osMessageQId) cst_queue_id, cmd_message, 0U)
 8014040:	2200      	movs	r2, #0
 8014042:	6818      	ldr	r0, [r3, #0]
 8014044:	4621      	mov	r1, r4
 8014046:	f003 fed1 	bl	8017dec <rtosalMessageQueuePut>
 801404a:	b1c0      	cbz	r0, 801407e <CST_send_message+0x46>
			!= osOK) {
		PRINT_CELLULAR_SERVICE_ERR(
 801404c:	4622      	mov	r2, r4
 801404e:	490d      	ldr	r1, [pc, #52]	; (8014084 <CST_send_message+0x4c>)
 8014050:	480d      	ldr	r0, [pc, #52]	; (8014088 <CST_send_message+0x50>)
 8014052:	f008 ff31 	bl	801ceb8 <sprintf>
 8014056:	480c      	ldr	r0, [pc, #48]	; (8014088 <CST_send_message+0x50>)
 8014058:	f003 ff6c 	bl	8017f34 <crs_strlen>
 801405c:	4a0a      	ldr	r2, [pc, #40]	; (8014088 <CST_send_message+0x50>)
 801405e:	b283      	uxth	r3, r0
 8014060:	2110      	movs	r1, #16
 8014062:	2002      	movs	r0, #2
 8014064:	f003 ffa4 	bl	8017fb0 <traceIF_itmPrint>
 8014068:	4807      	ldr	r0, [pc, #28]	; (8014088 <CST_send_message+0x50>)
 801406a:	f003 ff63 	bl	8017f34 <crs_strlen>
				"CST queue msg %ld can NOT be added. (Queue full ?)\n\r",
				cmd_message)
	}
}
 801406e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINT_CELLULAR_SERVICE_ERR(
 8014072:	b283      	uxth	r3, r0
 8014074:	4a04      	ldr	r2, [pc, #16]	; (8014088 <CST_send_message+0x50>)
 8014076:	2110      	movs	r1, #16
 8014078:	2002      	movs	r0, #2
 801407a:	f004 b9bf 	b.w	80183fc <traceIF_uartPrint>
}
 801407e:	bd10      	pop	{r4, pc}
 8014080:	20003f8c 	.word	0x20003f8c
 8014084:	0802a11a 	.word	0x0802a11a
 8014088:	20008ff8 	.word	0x20008ff8

0801408c <CST_fota_timer_callback>:
 * @retval -
 */
static void CST_fota_timer_callback(void *argument) {
	UNUSED(argument);
	/* FOTA timeout has occurred: sends a message to automaton */
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_FOTA_TIMEOUT_EVENT);
 801408c:	2117      	movs	r1, #23
 801408e:	2000      	movs	r0, #0
 8014090:	f7ff bfd2 	b.w	8014038 <CST_send_message>

08014094 <CST_network_status_timer_callback>:
	if (cst_context.current_state == CST_WAITING_FOR_NETWORK_STATUS_STATE) {
 8014094:	4b04      	ldr	r3, [pc, #16]	; (80140a8 <CST_network_status_timer_callback+0x14>)
 8014096:	881b      	ldrh	r3, [r3, #0]
 8014098:	2b04      	cmp	r3, #4
 801409a:	d103      	bne.n	80140a4 <CST_network_status_timer_callback+0x10>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NW_REG_TIMEOUT_TIMER_EVENT);
 801409c:	2114      	movs	r1, #20
 801409e:	2000      	movs	r0, #0
 80140a0:	f7ff bfca 	b.w	8014038 <CST_send_message>
}
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	2000029c 	.word	0x2000029c

080140ac <CST_pdn_activate_retry_timer_callback>:
static void CST_pdn_activate_retry_timer_callback(void *argument) {
 80140ac:	b508      	push	{r3, lr}
	PRINT_CELLULAR_SERVICE(
 80140ae:	4910      	ldr	r1, [pc, #64]	; (80140f0 <CST_pdn_activate_retry_timer_callback+0x44>)
 80140b0:	4810      	ldr	r0, [pc, #64]	; (80140f4 <CST_pdn_activate_retry_timer_callback+0x48>)
 80140b2:	f008 ff71 	bl	801cf98 <strcpy>
 80140b6:	480f      	ldr	r0, [pc, #60]	; (80140f4 <CST_pdn_activate_retry_timer_callback+0x48>)
 80140b8:	f003 ff3c 	bl	8017f34 <crs_strlen>
 80140bc:	4a0d      	ldr	r2, [pc, #52]	; (80140f4 <CST_pdn_activate_retry_timer_callback+0x48>)
 80140be:	b283      	uxth	r3, r0
 80140c0:	2101      	movs	r1, #1
 80140c2:	2002      	movs	r0, #2
 80140c4:	f003 ff74 	bl	8017fb0 <traceIF_itmPrint>
 80140c8:	480a      	ldr	r0, [pc, #40]	; (80140f4 <CST_pdn_activate_retry_timer_callback+0x48>)
 80140ca:	f003 ff33 	bl	8017f34 <crs_strlen>
 80140ce:	4a09      	ldr	r2, [pc, #36]	; (80140f4 <CST_pdn_activate_retry_timer_callback+0x48>)
 80140d0:	b283      	uxth	r3, r0
 80140d2:	2101      	movs	r1, #1
 80140d4:	2002      	movs	r0, #2
 80140d6:	f004 f991 	bl	80183fc <traceIF_uartPrint>
	if (cst_context.current_state == CST_MODEM_PDN_ACTIVATING_STATE) {
 80140da:	4b07      	ldr	r3, [pc, #28]	; (80140f8 <CST_pdn_activate_retry_timer_callback+0x4c>)
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	2b07      	cmp	r3, #7
 80140e0:	d105      	bne.n	80140ee <CST_pdn_activate_retry_timer_callback+0x42>
}
 80140e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT,
 80140e6:	2109      	movs	r1, #9
 80140e8:	2000      	movs	r0, #0
 80140ea:	f7ff bfa5 	b.w	8014038 <CST_send_message>
}
 80140ee:	bd08      	pop	{r3, pc}
 80140f0:	0802a155 	.word	0x0802a155
 80140f4:	20008ff8 	.word	0x20008ff8
 80140f8:	2000029c 	.word	0x2000029c

080140fc <CST_polling_timer_callback>:
	if (((cst_context.current_state == CST_WAITING_FOR_SIGNAL_QUALITY_OK_STATE )
 80140fc:	4b09      	ldr	r3, [pc, #36]	; (8014124 <CST_polling_timer_callback+0x28>)
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	1eda      	subs	r2, r3, #3
 8014102:	2a01      	cmp	r2, #1
 8014104:	d901      	bls.n	801410a <CST_polling_timer_callback+0xe>
			|| (cst_context.current_state == CST_MODEM_DATA_READY_STATE ))
 8014106:	2b08      	cmp	r3, #8
 8014108:	d10b      	bne.n	8014122 <CST_polling_timer_callback+0x26>
			&& (cst_nfmc_context.nfmc_timer_on_going == false)
 801410a:	4b07      	ldr	r3, [pc, #28]	; (8014128 <CST_polling_timer_callback+0x2c>)
 801410c:	785b      	ldrb	r3, [r3, #1]
 801410e:	b943      	cbnz	r3, 8014122 <CST_polling_timer_callback+0x26>
			&& (CST_polling_active == true)) {
 8014110:	4b06      	ldr	r3, [pc, #24]	; (801412c <CST_polling_timer_callback+0x30>)
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	b12b      	cbz	r3, 8014122 <CST_polling_timer_callback+0x26>
		if (CST_polling_on_going == false) {
 8014116:	4b06      	ldr	r3, [pc, #24]	; (8014130 <CST_polling_timer_callback+0x34>)
 8014118:	7818      	ldrb	r0, [r3, #0]
 801411a:	b910      	cbnz	r0, 8014122 <CST_polling_timer_callback+0x26>
			CST_send_message(CST_MESSAGE_CS_EVENT, CST_POLLING_TIMER_EVENT);
 801411c:	210b      	movs	r1, #11
 801411e:	f7ff bf8b 	b.w	8014038 <CST_send_message>
}
 8014122:	4770      	bx	lr
 8014124:	2000029c 	.word	0x2000029c
 8014128:	20008ab0 	.word	0x20008ab0
 801412c:	20008aac 	.word	0x20008aac
 8014130:	20003f3c 	.word	0x20003f3c

08014134 <CST_pdn_event_callback>:
		CS_PDN_event_t pdn_event) {
 8014134:	b538      	push	{r3, r4, r5, lr}
	PRINT_CELLULAR_SERVICE(
 8014136:	4c11      	ldr	r4, [pc, #68]	; (801417c <CST_pdn_event_callback+0x48>)
		CS_PDN_event_t pdn_event) {
 8014138:	4602      	mov	r2, r0
	PRINT_CELLULAR_SERVICE(
 801413a:	460b      	mov	r3, r1
		CS_PDN_event_t pdn_event) {
 801413c:	460d      	mov	r5, r1
	PRINT_CELLULAR_SERVICE(
 801413e:	4620      	mov	r0, r4
 8014140:	490f      	ldr	r1, [pc, #60]	; (8014180 <CST_pdn_event_callback+0x4c>)
 8014142:	f008 feb9 	bl	801ceb8 <sprintf>
 8014146:	4620      	mov	r0, r4
 8014148:	f003 fef4 	bl	8017f34 <crs_strlen>
 801414c:	4622      	mov	r2, r4
 801414e:	b283      	uxth	r3, r0
 8014150:	2101      	movs	r1, #1
 8014152:	2002      	movs	r0, #2
 8014154:	f003 ff2c 	bl	8017fb0 <traceIF_itmPrint>
 8014158:	4620      	mov	r0, r4
 801415a:	f003 feeb 	bl	8017f34 <crs_strlen>
 801415e:	4622      	mov	r2, r4
 8014160:	b283      	uxth	r3, r0
 8014162:	2101      	movs	r1, #1
 8014164:	2002      	movs	r0, #2
 8014166:	f004 f949 	bl	80183fc <traceIF_uartPrint>
	cst_context.pdn_status = pdn_event;
 801416a:	4b06      	ldr	r3, [pc, #24]	; (8014184 <CST_pdn_event_callback+0x50>)
 801416c:	70dd      	strb	r5, [r3, #3]
}
 801416e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_PDN_STATUS_TO_CHECK_EVENT);
 8014172:	2108      	movs	r1, #8
 8014174:	2000      	movs	r0, #0
 8014176:	f7ff bf5f 	b.w	8014038 <CST_send_message>
 801417a:	bf00      	nop
 801417c:	20008ff8 	.word	0x20008ff8
 8014180:	0802a192 	.word	0x0802a192
 8014184:	2000029c 	.word	0x2000029c

08014188 <CST_set_state>:
 * @brief  sets new automaton state
 * @param  new_state - new current automaton state to set
 * @retval -
 */
void CST_set_state(CST_autom_state_t new_state) {
	cst_context.current_state = new_state;
 8014188:	4b0f      	ldr	r3, [pc, #60]	; (80141c8 <CST_set_state+0x40>)
	PRINT_CELLULAR_SERVICE("-----> New State: %s <-----\n\r",
 801418a:	4910      	ldr	r1, [pc, #64]	; (80141cc <CST_set_state+0x44>)
void CST_set_state(CST_autom_state_t new_state) {
 801418c:	b510      	push	{r4, lr}
	PRINT_CELLULAR_SERVICE("-----> New State: %s <-----\n\r",
 801418e:	4c10      	ldr	r4, [pc, #64]	; (80141d0 <CST_set_state+0x48>)
	cst_context.current_state = new_state;
 8014190:	8018      	strh	r0, [r3, #0]
	PRINT_CELLULAR_SERVICE("-----> New State: %s <-----\n\r",
 8014192:	4b10      	ldr	r3, [pc, #64]	; (80141d4 <CST_set_state+0x4c>)
 8014194:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8014198:	4620      	mov	r0, r4
 801419a:	f008 fe8d 	bl	801ceb8 <sprintf>
 801419e:	4620      	mov	r0, r4
 80141a0:	f003 fec8 	bl	8017f34 <crs_strlen>
 80141a4:	4622      	mov	r2, r4
 80141a6:	b283      	uxth	r3, r0
 80141a8:	2101      	movs	r1, #1
 80141aa:	2002      	movs	r0, #2
 80141ac:	f003 ff00 	bl	8017fb0 <traceIF_itmPrint>
 80141b0:	4620      	mov	r0, r4
 80141b2:	f003 febf 	bl	8017f34 <crs_strlen>
 80141b6:	4622      	mov	r2, r4
 80141b8:	b283      	uxth	r3, r0

#if (USE_CELLULAR_SERVICE_TASK_TEST == 1)
  /* instrumentation code to test automaton */
  CSTE_cellular_service_task_test(cst_context.current_state);
#endif  /* (USE_CELLULAR_SERVICE_TASK_TEST == 1) */
}
 80141ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PRINT_CELLULAR_SERVICE("-----> New State: %s <-----\n\r",
 80141be:	2101      	movs	r1, #1
 80141c0:	2002      	movs	r0, #2
 80141c2:	f004 b91b 	b.w	80183fc <traceIF_uartPrint>
 80141c6:	bf00      	nop
 80141c8:	2000029c 	.word	0x2000029c
 80141cc:	0802a1e3 	.word	0x0802a1e3
 80141d0:	20008ff8 	.word	0x20008ff8
 80141d4:	2000024c 	.word	0x2000024c

080141d8 <CST_register_retry_timer_callback>:
static void CST_register_retry_timer_callback(void *argument) {
 80141d8:	b510      	push	{r4, lr}
	cst_nfmc_context.nfmc_timer_on_going = false;
 80141da:	4b06      	ldr	r3, [pc, #24]	; (80141f4 <CST_register_retry_timer_callback+0x1c>)
 80141dc:	2400      	movs	r4, #0
	CST_set_state(CST_MODEM_INIT_STATE);
 80141de:	2001      	movs	r0, #1
	cst_nfmc_context.nfmc_timer_on_going = false;
 80141e0:	705c      	strb	r4, [r3, #1]
	CST_set_state(CST_MODEM_INIT_STATE);
 80141e2:	f7ff ffd1 	bl	8014188 <CST_set_state>
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 80141e6:	4620      	mov	r0, r4
 80141e8:	2101      	movs	r1, #1
}
 80141ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 80141ee:	f7ff bf23 	b.w	8014038 <CST_send_message>
 80141f2:	bf00      	nop
 80141f4:	20008ab0 	.word	0x20008ab0

080141f8 <CST_reboot_modem_event_mngt>:
static void CST_reboot_modem_event_mngt(void) {
 80141f8:	b508      	push	{r3, lr}
	if (cst_context.current_state != CST_MODEM_INIT_STATE) {
 80141fa:	4b17      	ldr	r3, [pc, #92]	; (8014258 <CST_reboot_modem_event_mngt+0x60>)
 80141fc:	881b      	ldrh	r3, [r3, #0]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d029      	beq.n	8014256 <CST_reboot_modem_event_mngt+0x5e>
		(void) CST_modem_power_off();
 8014202:	f002 fea3 	bl	8016f4c <CST_modem_power_off>
		PRINT_CELLULAR_SERVICE("Modem event received: CS_MDMEVENT_BOOT\n\r")
 8014206:	4915      	ldr	r1, [pc, #84]	; (801425c <CST_reboot_modem_event_mngt+0x64>)
 8014208:	4815      	ldr	r0, [pc, #84]	; (8014260 <CST_reboot_modem_event_mngt+0x68>)
 801420a:	f008 fec5 	bl	801cf98 <strcpy>
 801420e:	4814      	ldr	r0, [pc, #80]	; (8014260 <CST_reboot_modem_event_mngt+0x68>)
 8014210:	f003 fe90 	bl	8017f34 <crs_strlen>
 8014214:	4a12      	ldr	r2, [pc, #72]	; (8014260 <CST_reboot_modem_event_mngt+0x68>)
 8014216:	b283      	uxth	r3, r0
 8014218:	2101      	movs	r1, #1
 801421a:	2002      	movs	r0, #2
 801421c:	f003 fec8 	bl	8017fb0 <traceIF_itmPrint>
 8014220:	480f      	ldr	r0, [pc, #60]	; (8014260 <CST_reboot_modem_event_mngt+0x68>)
 8014222:	f003 fe87 	bl	8017f34 <crs_strlen>
 8014226:	4a0e      	ldr	r2, [pc, #56]	; (8014260 <CST_reboot_modem_event_mngt+0x68>)
 8014228:	b283      	uxth	r3, r0
 801422a:	2101      	movs	r1, #1
 801422c:	2002      	movs	r0, #2
 801422e:	f004 f8e5 	bl	80183fc <traceIF_uartPrint>
		CST_set_state(CST_MODEM_INIT_STATE);
 8014232:	2001      	movs	r0, #1
 8014234:	f7ff ffa8 	bl	8014188 <CST_set_state>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8014238:	2100      	movs	r1, #0
 801423a:	2003      	movs	r0, #3
 801423c:	f001 fc9c 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_modem_state(&dc_com_db, CA_MODEM_REBOOTING,
 8014240:	4808      	ldr	r0, [pc, #32]	; (8014264 <CST_reboot_modem_event_mngt+0x6c>)
 8014242:	4a09      	ldr	r2, [pc, #36]	; (8014268 <CST_reboot_modem_event_mngt+0x70>)
 8014244:	2107      	movs	r1, #7
 8014246:	f002 fe4b 	bl	8016ee0 <CST_set_modem_state>
}
 801424a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 801424e:	2101      	movs	r1, #1
 8014250:	2000      	movs	r0, #0
 8014252:	f7ff bef1 	b.w	8014038 <CST_send_message>
}
 8014256:	bd08      	pop	{r3, pc}
 8014258:	2000029c 	.word	0x2000029c
 801425c:	0802a201 	.word	0x0802a201
 8014260:	20008ff8 	.word	0x20008ff8
 8014264:	20008d7c 	.word	0x20008d7c
 8014268:	0802a22a 	.word	0x0802a22a

0801426c <CST_SimEventsCallback>:
static void CST_SimEventsCallback(CS_SimEvent_status_t sim_event) {
 801426c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	PRINT_CELLULAR_SERVICE("*********** CST_SimEventsCallback ********\n\r")
 801426e:	4924      	ldr	r1, [pc, #144]	; (8014300 <CST_SimEventsCallback+0x94>)
static void CST_SimEventsCallback(CS_SimEvent_status_t sim_event) {
 8014270:	f8ad 0004 	strh.w	r0, [sp, #4]
 8014274:	b2c4      	uxtb	r4, r0
 8014276:	f3c0 2507 	ubfx	r5, r0, #8, #8
	PRINT_CELLULAR_SERVICE("*********** CST_SimEventsCallback ********\n\r")
 801427a:	4822      	ldr	r0, [pc, #136]	; (8014304 <CST_SimEventsCallback+0x98>)
 801427c:	f008 fe8c 	bl	801cf98 <strcpy>
 8014280:	4820      	ldr	r0, [pc, #128]	; (8014304 <CST_SimEventsCallback+0x98>)
 8014282:	f003 fe57 	bl	8017f34 <crs_strlen>
 8014286:	4a1f      	ldr	r2, [pc, #124]	; (8014304 <CST_SimEventsCallback+0x98>)
 8014288:	b283      	uxth	r3, r0
 801428a:	2101      	movs	r1, #1
 801428c:	2002      	movs	r0, #2
 801428e:	f003 fe8f 	bl	8017fb0 <traceIF_itmPrint>
 8014292:	481c      	ldr	r0, [pc, #112]	; (8014304 <CST_SimEventsCallback+0x98>)
 8014294:	f003 fe4e 	bl	8017f34 <crs_strlen>
 8014298:	4a1a      	ldr	r2, [pc, #104]	; (8014304 <CST_SimEventsCallback+0x98>)
 801429a:	b283      	uxth	r3, r0
 801429c:	2101      	movs	r1, #1
 801429e:	2002      	movs	r0, #2
 80142a0:	f004 f8ac 	bl	80183fc <traceIF_uartPrint>
	CST_set_state(CST_MODEM_INIT_STATE);
 80142a4:	2001      	movs	r0, #1
 80142a6:	f7ff ff6f 	bl	8014188 <CST_set_state>
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_SIM_RESET_EVENT);
 80142aa:	211d      	movs	r1, #29
 80142ac:	2000      	movs	r0, #0
 80142ae:	f7ff fec3 	bl	8014038 <CST_send_message>
	if (sim_event.event == CS_SIMEVENT_SIM_DETECT) {
 80142b2:	2c01      	cmp	r4, #1
 80142b4:	d11f      	bne.n	80142f6 <CST_SimEventsCallback+0x8a>
		if (sim_event.param1 == CS_SIMINFOS_CARD_INSERTED) {
 80142b6:	2d01      	cmp	r5, #1
 80142b8:	d118      	bne.n	80142ec <CST_SimEventsCallback+0x80>
			PRINT_CELLULAR_SERVICE(
 80142ba:	4913      	ldr	r1, [pc, #76]	; (8014308 <CST_SimEventsCallback+0x9c>)
		PRINT_CELLULAR_SERVICE(
 80142bc:	4811      	ldr	r0, [pc, #68]	; (8014304 <CST_SimEventsCallback+0x98>)
 80142be:	f008 fe6b 	bl	801cf98 <strcpy>
 80142c2:	4810      	ldr	r0, [pc, #64]	; (8014304 <CST_SimEventsCallback+0x98>)
 80142c4:	f003 fe36 	bl	8017f34 <crs_strlen>
 80142c8:	4a0e      	ldr	r2, [pc, #56]	; (8014304 <CST_SimEventsCallback+0x98>)
 80142ca:	b283      	uxth	r3, r0
 80142cc:	2101      	movs	r1, #1
 80142ce:	2002      	movs	r0, #2
 80142d0:	f003 fe6e 	bl	8017fb0 <traceIF_itmPrint>
 80142d4:	480b      	ldr	r0, [pc, #44]	; (8014304 <CST_SimEventsCallback+0x98>)
 80142d6:	f003 fe2d 	bl	8017f34 <crs_strlen>
 80142da:	4a0a      	ldr	r2, [pc, #40]	; (8014304 <CST_SimEventsCallback+0x98>)
 80142dc:	b283      	uxth	r3, r0
 80142de:	2101      	movs	r1, #1
 80142e0:	2002      	movs	r0, #2
}
 80142e2:	b003      	add	sp, #12
 80142e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		PRINT_CELLULAR_SERVICE(
 80142e8:	f004 b888 	b.w	80183fc <traceIF_uartPrint>
		} else if (sim_event.param1 == CS_SIMINFOS_CARD_REMOVED) {
 80142ec:	2d02      	cmp	r5, #2
			PRINT_CELLULAR_SERVICE(
 80142ee:	bf0c      	ite	eq
 80142f0:	4906      	ldreq	r1, [pc, #24]	; (801430c <CST_SimEventsCallback+0xa0>)
			PRINT_CELLULAR_SERVICE(
 80142f2:	4907      	ldrne	r1, [pc, #28]	; (8014310 <CST_SimEventsCallback+0xa4>)
 80142f4:	e7e2      	b.n	80142bc <CST_SimEventsCallback+0x50>
	} else if (sim_event.event == CS_SIMEVENT_SIM_REFRESH) {
 80142f6:	b90c      	cbnz	r4, 80142fc <CST_SimEventsCallback+0x90>
		PRINT_CELLULAR_SERVICE(
 80142f8:	4906      	ldr	r1, [pc, #24]	; (8014314 <CST_SimEventsCallback+0xa8>)
 80142fa:	e7df      	b.n	80142bc <CST_SimEventsCallback+0x50>
		PRINT_CELLULAR_SERVICE(
 80142fc:	4906      	ldr	r1, [pc, #24]	; (8014318 <CST_SimEventsCallback+0xac>)
 80142fe:	e7dd      	b.n	80142bc <CST_SimEventsCallback+0x50>
 8014300:	0802a23d 	.word	0x0802a23d
 8014304:	20008ff8 	.word	0x20008ff8
 8014308:	0802a26a 	.word	0x0802a26a
 801430c:	0802a29d 	.word	0x0802a29d
 8014310:	0802a2cf 	.word	0x0802a2cf
 8014314:	0802a308 	.word	0x0802a308
 8014318:	0802a33a 	.word	0x0802a33a

0801431c <CST_target_state_cmd_event_mngt>:
static void CST_target_state_cmd_event_mngt(void) {
 801431c:	b570      	push	{r4, r5, r6, lr}
	if (cst_cellular_params.target_state == DC_TARGET_STATE_SIM_ONLY) {
 801431e:	4b31      	ldr	r3, [pc, #196]	; (80143e4 <CST_target_state_cmd_event_mngt+0xc8>)
 8014320:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
 8014324:	2c01      	cmp	r4, #1
 8014326:	d13a      	bne.n	801439e <CST_target_state_cmd_event_mngt+0x82>
		PRINT_CELLULAR_SERVICE(
 8014328:	492f      	ldr	r1, [pc, #188]	; (80143e8 <CST_target_state_cmd_event_mngt+0xcc>)
 801432a:	4830      	ldr	r0, [pc, #192]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 801432c:	f008 fe34 	bl	801cf98 <strcpy>
 8014330:	482e      	ldr	r0, [pc, #184]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014332:	f003 fdff 	bl	8017f34 <crs_strlen>
 8014336:	4621      	mov	r1, r4
 8014338:	b283      	uxth	r3, r0
 801433a:	4a2c      	ldr	r2, [pc, #176]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 801433c:	2002      	movs	r0, #2
 801433e:	f003 fe37 	bl	8017fb0 <traceIF_itmPrint>
 8014342:	482a      	ldr	r0, [pc, #168]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014344:	f003 fdf6 	bl	8017f34 <crs_strlen>
 8014348:	4621      	mov	r1, r4
 801434a:	b283      	uxth	r3, r0
 801434c:	4a27      	ldr	r2, [pc, #156]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 801434e:	2002      	movs	r0, #2
 8014350:	f004 f854 	bl	80183fc <traceIF_uartPrint>
		(void) osCDS_init_modem(CS_CMI_SIM_ONLY, CELLULAR_FALSE,
 8014354:	4a26      	ldr	r2, [pc, #152]	; (80143f0 <CST_target_state_cmd_event_mngt+0xd4>)
 8014356:	2100      	movs	r1, #0
 8014358:	2002      	movs	r0, #2
 801435a:	f7ff fd17 	bl	8013d8c <osCDS_init_modem>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_SIM_CONNECTED,
 801435e:	4a25      	ldr	r2, [pc, #148]	; (80143f4 <CST_target_state_cmd_event_mngt+0xd8>)
 8014360:	4825      	ldr	r0, [pc, #148]	; (80143f8 <CST_target_state_cmd_event_mngt+0xdc>)
 8014362:	2102      	movs	r1, #2
 8014364:	f002 fdbc 	bl	8016ee0 <CST_set_modem_state>
		CST_set_state(CST_MODEM_SIM_ONLY_STATE);
 8014368:	200b      	movs	r0, #11
 801436a:	f7ff ff0d 	bl	8014188 <CST_set_state>
		PRINT_CELLULAR_SERVICE("****** CST_MODEM_SIM_ONLY_STATE *****\n\r")
 801436e:	4923      	ldr	r1, [pc, #140]	; (80143fc <CST_target_state_cmd_event_mngt+0xe0>)
 8014370:	481e      	ldr	r0, [pc, #120]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014372:	f008 fe11 	bl	801cf98 <strcpy>
 8014376:	481d      	ldr	r0, [pc, #116]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014378:	f003 fddc 	bl	8017f34 <crs_strlen>
 801437c:	4621      	mov	r1, r4
 801437e:	b283      	uxth	r3, r0
 8014380:	4a1a      	ldr	r2, [pc, #104]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014382:	2002      	movs	r0, #2
 8014384:	f003 fe14 	bl	8017fb0 <traceIF_itmPrint>
 8014388:	4818      	ldr	r0, [pc, #96]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 801438a:	f003 fdd3 	bl	8017f34 <crs_strlen>
 801438e:	4621      	mov	r1, r4
 8014390:	b283      	uxth	r3, r0
}
 8014392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		PRINT_CELLULAR_SERVICE("****** CST_MODEM_SIM_ONLY_STATE *****\n\r")
 8014396:	4a15      	ldr	r2, [pc, #84]	; (80143ec <CST_target_state_cmd_event_mngt+0xd0>)
 8014398:	2002      	movs	r0, #2
 801439a:	f004 b82f 	b.w	80183fc <traceIF_uartPrint>
	} else if (cst_cellular_params.target_state == DC_TARGET_STATE_OFF) {
 801439e:	b9f4      	cbnz	r4, 80143de <CST_target_state_cmd_event_mngt+0xc2>
		(void) dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 80143a0:	4d17      	ldr	r5, [pc, #92]	; (8014400 <CST_target_state_cmd_event_mngt+0xe4>)
 80143a2:	4a18      	ldr	r2, [pc, #96]	; (8014404 <CST_target_state_cmd_event_mngt+0xe8>)
 80143a4:	8829      	ldrh	r1, [r5, #0]
 80143a6:	4814      	ldr	r0, [pc, #80]	; (80143f8 <CST_target_state_cmd_event_mngt+0xdc>)
 80143a8:	2320      	movs	r3, #32
 80143aa:	f002 ff63 	bl	8017274 <dc_com_read>
		cst_sim_info.rt_state = DC_SERVICE_OFF;
 80143ae:	4a15      	ldr	r2, [pc, #84]	; (8014404 <CST_target_state_cmd_event_mngt+0xe8>)
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO,
 80143b0:	8829      	ldrh	r1, [r5, #0]
 80143b2:	4811      	ldr	r0, [pc, #68]	; (80143f8 <CST_target_state_cmd_event_mngt+0xdc>)
		cst_sim_info.rt_state = DC_SERVICE_OFF;
 80143b4:	2303      	movs	r3, #3
 80143b6:	7213      	strb	r3, [r2, #8]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO,
 80143b8:	2320      	movs	r3, #32
 80143ba:	f002 fef7 	bl	80171ac <dc_com_write>
		(void) CST_modem_power_off();
 80143be:	f002 fdc5 	bl	8016f4c <CST_modem_power_off>
		CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 80143c2:	21ff      	movs	r1, #255	; 0xff
 80143c4:	4a10      	ldr	r2, [pc, #64]	; (8014408 <CST_target_state_cmd_event_mngt+0xec>)
 80143c6:	480c      	ldr	r0, [pc, #48]	; (80143f8 <CST_target_state_cmd_event_mngt+0xdc>)
 80143c8:	f002 fd8a 	bl	8016ee0 <CST_set_modem_state>
		CST_set_state(CST_MODEM_OFF_STATE);
 80143cc:	200e      	movs	r0, #14
 80143ce:	f7ff fedb 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 80143d2:	4620      	mov	r0, r4
 80143d4:	2101      	movs	r1, #1
}
 80143d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 80143da:	f7ff be2d 	b.w	8014038 <CST_send_message>
		__NOP();
 80143de:	bf00      	nop
}
 80143e0:	bd70      	pop	{r4, r5, r6, pc}
 80143e2:	bf00      	nop
 80143e4:	20008ad0 	.word	0x20008ad0
 80143e8:	0802a368 	.word	0x0802a368
 80143ec:	20008ff8 	.word	0x20008ff8
 80143f0:	08028e1b 	.word	0x08028e1b
 80143f4:	0802a3a6 	.word	0x0802a3a6
 80143f8:	20008d7c 	.word	0x20008d7c
 80143fc:	0802a3c3 	.word	0x0802a3c3
 8014400:	20000248 	.word	0x20000248
 8014404:	20008d5c 	.word	0x20008d5c
 8014408:	0802a3eb 	.word	0x0802a3eb

0801440c <CST_fota_start_event_mngt>:
static void CST_fota_start_event_mngt(void) {
 801440c:	b570      	push	{r4, r5, r6, lr}
	PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_FOTA_START\n\r")
 801440e:	4c22      	ldr	r4, [pc, #136]	; (8014498 <CST_fota_start_event_mngt+0x8c>)
 8014410:	4922      	ldr	r1, [pc, #136]	; (801449c <CST_fota_start_event_mngt+0x90>)
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO,
 8014412:	4d23      	ldr	r5, [pc, #140]	; (80144a0 <CST_fota_start_event_mngt+0x94>)
	PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_FOTA_START\n\r")
 8014414:	4620      	mov	r0, r4
 8014416:	f008 fdbf 	bl	801cf98 <strcpy>
 801441a:	4620      	mov	r0, r4
 801441c:	f003 fd8a 	bl	8017f34 <crs_strlen>
 8014420:	4622      	mov	r2, r4
 8014422:	b283      	uxth	r3, r0
 8014424:	2101      	movs	r1, #1
 8014426:	2002      	movs	r0, #2
 8014428:	f003 fdc2 	bl	8017fb0 <traceIF_itmPrint>
 801442c:	4620      	mov	r0, r4
 801442e:	f003 fd81 	bl	8017f34 <crs_strlen>
 8014432:	4622      	mov	r2, r4
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO,
 8014434:	4c1b      	ldr	r4, [pc, #108]	; (80144a4 <CST_fota_start_event_mngt+0x98>)
	PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_FOTA_START\n\r")
 8014436:	b283      	uxth	r3, r0
 8014438:	2101      	movs	r1, #1
 801443a:	2002      	movs	r0, #2
 801443c:	f003 ffde 	bl	80183fc <traceIF_uartPrint>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO,
 8014440:	8829      	ldrh	r1, [r5, #0]
 8014442:	4a19      	ldr	r2, [pc, #100]	; (80144a8 <CST_fota_start_event_mngt+0x9c>)
 8014444:	2310      	movs	r3, #16
 8014446:	4620      	mov	r0, r4
 8014448:	f002 ff14 	bl	8017274 <dc_com_read>
	cst_cellular_data_info.rt_state = DC_SERVICE_SHUTTING_DOWN;
 801444c:	4a16      	ldr	r2, [pc, #88]	; (80144a8 <CST_fota_start_event_mngt+0x9c>)
 801444e:	2604      	movs	r6, #4
	CST_set_state(CST_MODEM_REPROG_STATE);
 8014450:	2009      	movs	r0, #9
	cst_cellular_data_info.rt_state = DC_SERVICE_SHUTTING_DOWN;
 8014452:	7216      	strb	r6, [r2, #8]
	CST_set_state(CST_MODEM_REPROG_STATE);
 8014454:	f7ff fe98 	bl	8014188 <CST_set_state>
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_DATA_INFO,
 8014458:	8829      	ldrh	r1, [r5, #0]
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 801445a:	4d14      	ldr	r5, [pc, #80]	; (80144ac <CST_fota_start_event_mngt+0xa0>)
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_DATA_INFO,
 801445c:	4a12      	ldr	r2, [pc, #72]	; (80144a8 <CST_fota_start_event_mngt+0x9c>)
 801445e:	2310      	movs	r3, #16
 8014460:	4620      	mov	r0, r4
 8014462:	f002 fea3 	bl	80171ac <dc_com_write>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 8014466:	8829      	ldrh	r1, [r5, #0]
 8014468:	4a11      	ldr	r2, [pc, #68]	; (80144b0 <CST_fota_start_event_mngt+0xa4>)
 801446a:	23dc      	movs	r3, #220	; 0xdc
 801446c:	4620      	mov	r0, r4
 801446e:	f002 ff01 	bl	8017274 <dc_com_read>
	cst_cellular_info.rt_state = DC_SERVICE_SHUTTING_DOWN;
 8014472:	4a0f      	ldr	r2, [pc, #60]	; (80144b0 <CST_fota_start_event_mngt+0xa4>)
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014474:	8829      	ldrh	r1, [r5, #0]
	cst_cellular_info.rt_state = DC_SERVICE_SHUTTING_DOWN;
 8014476:	7216      	strb	r6, [r2, #8]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014478:	23dc      	movs	r3, #220	; 0xdc
 801447a:	4620      	mov	r0, r4
 801447c:	f002 fe96 	bl	80171ac <dc_com_write>
	CST_set_modem_state(&dc_com_db, CA_MODEM_FOTA_INPROGRESS,
 8014480:	4620      	mov	r0, r4
 8014482:	2108      	movs	r1, #8
 8014484:	4a0b      	ldr	r2, [pc, #44]	; (80144b4 <CST_fota_start_event_mngt+0xa8>)
 8014486:	f002 fd2b 	bl	8016ee0 <CST_set_modem_state>
	(void) rtosalTimerStart(cst_fota_timer_handle, CST_FOTA_TIMEOUT);
 801448a:	4b0b      	ldr	r3, [pc, #44]	; (80144b8 <CST_fota_start_event_mngt+0xac>)
 801448c:	490b      	ldr	r1, [pc, #44]	; (80144bc <CST_fota_start_event_mngt+0xb0>)
 801448e:	6818      	ldr	r0, [r3, #0]
}
 8014490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void) rtosalTimerStart(cst_fota_timer_handle, CST_FOTA_TIMEOUT);
 8014494:	f003 bcc7 	b.w	8017e26 <rtosalTimerStart>
 8014498:	20008ff8 	.word	0x20008ff8
 801449c:	0802a3fe 	.word	0x0802a3fe
 80144a0:	2000023e 	.word	0x2000023e
 80144a4:	20008d7c 	.word	0x20008d7c
 80144a8:	20008a9c 	.word	0x20008a9c
 80144ac:	20000240 	.word	0x20000240
 80144b0:	20008c80 	.word	0x20008c80
 80144b4:	0802a42e 	.word	0x0802a42e
 80144b8:	20003f80 	.word	0x20003f80
 80144bc:	00057e40 	.word	0x00057e40

080144c0 <CST_network_event_mngt>:
static void CST_network_event_mngt(void) {
 80144c0:	b510      	push	{r4, lr}
	ret = CST_get_network_status();
 80144c2:	f002 fc83 	bl	8016dcc <CST_get_network_status>
	if (ret == CST_NET_REGISTERED) {
 80144c6:	b940      	cbnz	r0, 80144da <CST_network_event_mngt+0x1a>
		CST_set_state(CST_NETWORK_STATUS_OK_STATE);
 80144c8:	2005      	movs	r0, #5
 80144ca:	f7ff fe5d 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NETWORK_STATUS_OK_EVENT);
 80144ce:	2105      	movs	r1, #5
}
 80144d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NO_EVENT);
 80144d4:	2000      	movs	r0, #0
 80144d6:	f7ff bdaf 	b.w	8014038 <CST_send_message>
	} else if (ret == CST_NOT_REGISTERED) {
 80144da:	2801      	cmp	r0, #1
 80144dc:	d10d      	bne.n	80144fa <CST_network_event_mngt+0x3a>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 80144de:	2100      	movs	r1, #0
 80144e0:	2003      	movs	r0, #3
 80144e2:	f001 fb49 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_state(CST_WAITING_FOR_NETWORK_STATUS_STATE);
 80144e6:	2004      	movs	r0, #4
 80144e8:	f7ff fe4e 	bl	8014188 <CST_set_state>
}
 80144ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 80144f0:	4a15      	ldr	r2, [pc, #84]	; (8014548 <CST_network_event_mngt+0x88>)
 80144f2:	4816      	ldr	r0, [pc, #88]	; (801454c <CST_network_event_mngt+0x8c>)
 80144f4:	2103      	movs	r1, #3
 80144f6:	f002 bcf3 	b.w	8016ee0 <CST_set_modem_state>
	} else if (ret == CST_NET_UNKNOWN) {
 80144fa:	2803      	cmp	r0, #3
 80144fc:	d101      	bne.n	8014502 <CST_network_event_mngt+0x42>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NO_EVENT);
 80144fe:	210d      	movs	r1, #13
 8014500:	e7e6      	b.n	80144d0 <CST_network_event_mngt+0x10>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8014502:	2100      	movs	r1, #0
 8014504:	2003      	movs	r0, #3
 8014506:	f001 fb37 	bl	8015b78 <CST_data_cache_cellular_info_set>
		PRINT_CELLULAR_SERVICE(
 801450a:	4911      	ldr	r1, [pc, #68]	; (8014550 <CST_network_event_mngt+0x90>)
 801450c:	4811      	ldr	r0, [pc, #68]	; (8014554 <CST_network_event_mngt+0x94>)
 801450e:	f008 fd43 	bl	801cf98 <strcpy>
 8014512:	4810      	ldr	r0, [pc, #64]	; (8014554 <CST_network_event_mngt+0x94>)
 8014514:	f003 fd0e 	bl	8017f34 <crs_strlen>
 8014518:	4a0e      	ldr	r2, [pc, #56]	; (8014554 <CST_network_event_mngt+0x94>)
 801451a:	b283      	uxth	r3, r0
 801451c:	2101      	movs	r1, #1
 801451e:	2002      	movs	r0, #2
 8014520:	f003 fd46 	bl	8017fb0 <traceIF_itmPrint>
 8014524:	480b      	ldr	r0, [pc, #44]	; (8014554 <CST_network_event_mngt+0x94>)
 8014526:	f003 fd05 	bl	8017f34 <crs_strlen>
 801452a:	4a0a      	ldr	r2, [pc, #40]	; (8014554 <CST_network_event_mngt+0x94>)
 801452c:	b283      	uxth	r3, r0
 801452e:	2101      	movs	r1, #1
 8014530:	2002      	movs	r0, #2
 8014532:	f003 ff63 	bl	80183fc <traceIF_uartPrint>
		CST_config_fail(((uint8_t*) "CST_network_status_test_mngt"),
 8014536:	2305      	movs	r3, #5
}
 8014538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CST_config_fail(((uint8_t*) "CST_network_status_test_mngt"),
 801453c:	4a06      	ldr	r2, [pc, #24]	; (8014558 <CST_network_event_mngt+0x98>)
 801453e:	4807      	ldr	r0, [pc, #28]	; (801455c <CST_network_event_mngt+0x9c>)
 8014540:	4619      	mov	r1, r3
 8014542:	f001 bb6b 	b.w	8015c1c <CST_config_fail>
 8014546:	bf00      	nop
 8014548:	0802a447 	.word	0x0802a447
 801454c:	20008d7c 	.word	0x20008d7c
 8014550:	0802a462 	.word	0x0802a462
 8014554:	20008ff8 	.word	0x20008ff8
 8014558:	200002b4 	.word	0x200002b4
 801455c:	0802a4a4 	.word	0x0802a4a4

08014560 <CST_modem_activate_pdn_mngt>:
static void CST_modem_activate_pdn_mngt(void) {
 8014560:	b570      	push	{r4, r5, r6, lr}
					cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid));
 8014562:	4d2f      	ldr	r5, [pc, #188]	; (8014620 <CST_modem_activate_pdn_mngt+0xc0>)
	(void) osCDS_set_default_pdn(
 8014564:	4c2f      	ldr	r4, [pc, #188]	; (8014624 <CST_modem_activate_pdn_mngt+0xc4>)
	CST_set_state(CST_MODEM_PDN_ACTIVATING_STATE);
 8014566:	2007      	movs	r0, #7
 8014568:	f7ff fe0e 	bl	8014188 <CST_set_state>
					cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid));
 801456c:	7c2a      	ldrb	r2, [r5, #16]
	(void) osCDS_set_default_pdn(
 801456e:	2668      	movs	r6, #104	; 0x68
 8014570:	fb06 4202 	mla	r2, r6, r2, r4
 8014574:	f892 002e 	ldrb.w	r0, [r2, #46]	; 0x2e
 8014578:	f7ff fa26 	bl	80139c8 <cst_get_cid_value>
 801457c:	f7ff fc9a 	bl	8013eb4 <osCDS_set_default_pdn>
					cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid),
 8014580:	7c2b      	ldrb	r3, [r5, #16]
	(void) osCDS_register_pdn_event(
 8014582:	fb06 4303 	mla	r3, r6, r3, r4
 8014586:	462c      	mov	r4, r5
 8014588:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 801458c:	f7ff fa1c 	bl	80139c8 <cst_get_cid_value>
 8014590:	4925      	ldr	r1, [pc, #148]	; (8014628 <CST_modem_activate_pdn_mngt+0xc8>)
 8014592:	f7ff fc79 	bl	8013e88 <osCDS_register_pdn_event>
	cs_status = osCDS_activate_pdn(CS_PDN_CONFIG_DEFAULT);
 8014596:	200b      	movs	r0, #11
 8014598:	f7ff fca0 	bl	8013edc <osCDS_activate_pdn>
	if (cs_status != CELLULAR_OK) {
 801459c:	2800      	cmp	r0, #0
 801459e:	d038      	beq.n	8014612 <CST_modem_activate_pdn_mngt+0xb2>
		if (cst_nfmc_context.active == false) {
 80145a0:	4b22      	ldr	r3, [pc, #136]	; (801462c <CST_modem_activate_pdn_mngt+0xcc>)
 80145a2:	4d23      	ldr	r5, [pc, #140]	; (8014630 <CST_modem_activate_pdn_mngt+0xd0>)
 80145a4:	6818      	ldr	r0, [r3, #0]
 80145a6:	782b      	ldrb	r3, [r5, #0]
 80145a8:	bb1b      	cbnz	r3, 80145f2 <CST_modem_activate_pdn_mngt+0x92>
			(void) rtosalTimerStart(cst_pdn_activate_retry_timer_handle,
 80145aa:	f247 5130 	movw	r1, #30000	; 0x7530
 80145ae:	f003 fc3a 	bl	8017e26 <rtosalTimerStart>
			PRINT_CELLULAR_SERVICE(
 80145b2:	4920      	ldr	r1, [pc, #128]	; (8014634 <CST_modem_activate_pdn_mngt+0xd4>)
 80145b4:	4820      	ldr	r0, [pc, #128]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 80145b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80145ba:	f008 fc7d 	bl	801ceb8 <sprintf>
			PRINT_CELLULAR_SERVICE(
 80145be:	481e      	ldr	r0, [pc, #120]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 80145c0:	f003 fcb8 	bl	8017f34 <crs_strlen>
 80145c4:	4a1c      	ldr	r2, [pc, #112]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 80145c6:	b283      	uxth	r3, r0
 80145c8:	2101      	movs	r1, #1
 80145ca:	2002      	movs	r0, #2
 80145cc:	f003 fcf0 	bl	8017fb0 <traceIF_itmPrint>
 80145d0:	4819      	ldr	r0, [pc, #100]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 80145d2:	f003 fcaf 	bl	8017f34 <crs_strlen>
 80145d6:	4a18      	ldr	r2, [pc, #96]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 80145d8:	b283      	uxth	r3, r0
 80145da:	2101      	movs	r1, #1
 80145dc:	2002      	movs	r0, #2
 80145de:	f003 ff0d 	bl	80183fc <traceIF_uartPrint>
		cst_context.activate_pdn_nfmc_tempo_count++;
 80145e2:	89a3      	ldrh	r3, [r4, #12]
 80145e4:	3301      	adds	r3, #1
 80145e6:	b29b      	uxth	r3, r3
		if (cst_context.activate_pdn_nfmc_tempo_count >= CA_NFMC_VALUES_MAX_NB) {
 80145e8:	2b06      	cmp	r3, #6
			cst_context.activate_pdn_nfmc_tempo_count = 0U;
 80145ea:	bf88      	it	hi
 80145ec:	2300      	movhi	r3, #0
 80145ee:	81a3      	strh	r3, [r4, #12]
}
 80145f0:	bd70      	pop	{r4, r5, r6, pc}
					cst_nfmc_context.tempo[cst_context.activate_pdn_nfmc_tempo_count]);
 80145f2:	89a3      	ldrh	r3, [r4, #12]
			(void) rtosalTimerStart(cst_pdn_activate_retry_timer_handle,
 80145f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80145f8:	6859      	ldr	r1, [r3, #4]
 80145fa:	f003 fc14 	bl	8017e26 <rtosalTimerStart>
			PRINT_CELLULAR_SERVICE(
 80145fe:	89a2      	ldrh	r2, [r4, #12]
 8014600:	490e      	ldr	r1, [pc, #56]	; (801463c <CST_modem_activate_pdn_mngt+0xdc>)
 8014602:	480d      	ldr	r0, [pc, #52]	; (8014638 <CST_modem_activate_pdn_mngt+0xd8>)
 8014604:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8014608:	3201      	adds	r2, #1
 801460a:	686b      	ldr	r3, [r5, #4]
 801460c:	f008 fc54 	bl	801ceb8 <sprintf>
 8014610:	e7d5      	b.n	80145be <CST_modem_activate_pdn_mngt+0x5e>
		cst_context.activate_pdn_nfmc_tempo_count = 0U;
 8014612:	81a8      	strh	r0, [r5, #12]
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_PDP_ACTIVATED_EVENT);
 8014614:	2107      	movs	r1, #7
}
 8014616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_PDP_ACTIVATED_EVENT);
 801461a:	f7ff bd0d 	b.w	8014038 <CST_send_message>
 801461e:	bf00      	nop
 8014620:	2000029c 	.word	0x2000029c
 8014624:	20008ad0 	.word	0x20008ad0
 8014628:	08014135 	.word	0x08014135
 801462c:	20003f88 	.word	0x20003f88
 8014630:	20008ab0 	.word	0x20008ab0
 8014634:	0802a4c1 	.word	0x0802a4c1
 8014638:	20008ff8 	.word	0x20008ff8
 801463c:	0802a4fe 	.word	0x0802a4fe

08014640 <CST_pdn_event_mngt>:
static void CST_pdn_event_mngt(void) {
 8014640:	b538      	push	{r3, r4, r5, lr}
	if (cst_context.pdn_status == CS_PDN_EVENT_NW_DETACH) {
 8014642:	4d42      	ldr	r5, [pc, #264]	; (801474c <CST_pdn_event_mngt+0x10c>)
	CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8014644:	2100      	movs	r1, #0
 8014646:	2003      	movs	r0, #3
 8014648:	f001 fa96 	bl	8015b78 <CST_data_cache_cellular_info_set>
	if (cst_context.pdn_status == CS_PDN_EVENT_NW_DETACH) {
 801464c:	78ec      	ldrb	r4, [r5, #3]
 801464e:	2c01      	cmp	r4, #1
 8014650:	d155      	bne.n	80146fe <CST_pdn_event_mngt+0xbe>
	PRINT_CELLULAR_SERVICE(
 8014652:	493f      	ldr	r1, [pc, #252]	; (8014750 <CST_pdn_event_mngt+0x110>)
 8014654:	483f      	ldr	r0, [pc, #252]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014656:	f008 fc9f 	bl	801cf98 <strcpy>
 801465a:	483e      	ldr	r0, [pc, #248]	; (8014754 <CST_pdn_event_mngt+0x114>)
 801465c:	f003 fc6a 	bl	8017f34 <crs_strlen>
 8014660:	4a3c      	ldr	r2, [pc, #240]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014662:	b283      	uxth	r3, r0
 8014664:	4621      	mov	r1, r4
 8014666:	2002      	movs	r0, #2
 8014668:	f003 fca2 	bl	8017fb0 <traceIF_itmPrint>
 801466c:	4839      	ldr	r0, [pc, #228]	; (8014754 <CST_pdn_event_mngt+0x114>)
 801466e:	f003 fc61 	bl	8017f34 <crs_strlen>
 8014672:	4a38      	ldr	r2, [pc, #224]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014674:	b283      	uxth	r3, r0
 8014676:	4621      	mov	r1, r4
 8014678:	2002      	movs	r0, #2
 801467a:	f003 febf 	bl	80183fc <traceIF_uartPrint>
	if (cst_context.current_state == CST_MODEM_DATA_READY_STATE) {
 801467e:	882b      	ldrh	r3, [r5, #0]
 8014680:	2b08      	cmp	r3, #8
 8014682:	d108      	bne.n	8014696 <CST_pdn_event_mngt+0x56>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8014684:	2100      	movs	r1, #0
 8014686:	2003      	movs	r0, #3
 8014688:	f001 fa76 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 801468c:	4a32      	ldr	r2, [pc, #200]	; (8014758 <CST_pdn_event_mngt+0x118>)
 801468e:	4833      	ldr	r0, [pc, #204]	; (801475c <CST_pdn_event_mngt+0x11c>)
 8014690:	4621      	mov	r1, r4
 8014692:	f002 fc25 	bl	8016ee0 <CST_set_modem_state>
	ret = CST_get_network_status();
 8014696:	f002 fb99 	bl	8016dcc <CST_get_network_status>
	if (ret == CST_NET_REGISTERED) {
 801469a:	4604      	mov	r4, r0
 801469c:	b160      	cbz	r0, 80146b8 <CST_pdn_event_mngt+0x78>
	} else if (ret == CST_NOT_REGISTERED) {
 801469e:	2c01      	cmp	r4, #1
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 80146a0:	f04f 0100 	mov.w	r1, #0
 80146a4:	f04f 0003 	mov.w	r0, #3
	} else if (ret == CST_NOT_REGISTERED) {
 80146a8:	d10b      	bne.n	80146c2 <CST_pdn_event_mngt+0x82>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 80146aa:	f001 fa65 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 80146ae:	4a2a      	ldr	r2, [pc, #168]	; (8014758 <CST_pdn_event_mngt+0x118>)
 80146b0:	482a      	ldr	r0, [pc, #168]	; (801475c <CST_pdn_event_mngt+0x11c>)
 80146b2:	4621      	mov	r1, r4
 80146b4:	f002 fc14 	bl	8016ee0 <CST_set_modem_state>
}
 80146b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	CST_set_state(CST_WAITING_FOR_NETWORK_STATUS_STATE);
 80146bc:	2004      	movs	r0, #4
 80146be:	f7ff bd63 	b.w	8014188 <CST_set_state>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 80146c2:	f001 fa59 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 80146c6:	4a24      	ldr	r2, [pc, #144]	; (8014758 <CST_pdn_event_mngt+0x118>)
 80146c8:	4824      	ldr	r0, [pc, #144]	; (801475c <CST_pdn_event_mngt+0x11c>)
 80146ca:	2101      	movs	r1, #1
 80146cc:	f002 fc08 	bl	8016ee0 <CST_set_modem_state>
		PRINT_CELLULAR_SERVICE(
 80146d0:	4923      	ldr	r1, [pc, #140]	; (8014760 <CST_pdn_event_mngt+0x120>)
 80146d2:	4820      	ldr	r0, [pc, #128]	; (8014754 <CST_pdn_event_mngt+0x114>)
 80146d4:	f008 fc60 	bl	801cf98 <strcpy>
 80146d8:	481e      	ldr	r0, [pc, #120]	; (8014754 <CST_pdn_event_mngt+0x114>)
 80146da:	f003 fc2b 	bl	8017f34 <crs_strlen>
 80146de:	4a1d      	ldr	r2, [pc, #116]	; (8014754 <CST_pdn_event_mngt+0x114>)
 80146e0:	b283      	uxth	r3, r0
 80146e2:	2101      	movs	r1, #1
 80146e4:	2002      	movs	r0, #2
 80146e6:	f003 fc63 	bl	8017fb0 <traceIF_itmPrint>
 80146ea:	481a      	ldr	r0, [pc, #104]	; (8014754 <CST_pdn_event_mngt+0x114>)
 80146ec:	f003 fc22 	bl	8017f34 <crs_strlen>
 80146f0:	4a18      	ldr	r2, [pc, #96]	; (8014754 <CST_pdn_event_mngt+0x114>)
 80146f2:	b283      	uxth	r3, r0
 80146f4:	2101      	movs	r1, #1
 80146f6:	2002      	movs	r0, #2
 80146f8:	f003 fe80 	bl	80183fc <traceIF_uartPrint>
 80146fc:	e7dc      	b.n	80146b8 <CST_pdn_event_mngt+0x78>
	} else if ((cst_context.pdn_status == CS_PDN_EVENT_NW_DEACT)
 80146fe:	3c02      	subs	r4, #2
 8014700:	2c01      	cmp	r4, #1
 8014702:	d81e      	bhi.n	8014742 <CST_pdn_event_mngt+0x102>
		PRINT_CELLULAR_SERVICE(
 8014704:	4917      	ldr	r1, [pc, #92]	; (8014764 <CST_pdn_event_mngt+0x124>)
 8014706:	4813      	ldr	r0, [pc, #76]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014708:	f008 fc46 	bl	801cf98 <strcpy>
 801470c:	4811      	ldr	r0, [pc, #68]	; (8014754 <CST_pdn_event_mngt+0x114>)
 801470e:	f003 fc11 	bl	8017f34 <crs_strlen>
 8014712:	4a10      	ldr	r2, [pc, #64]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014714:	b283      	uxth	r3, r0
 8014716:	2101      	movs	r1, #1
 8014718:	2002      	movs	r0, #2
 801471a:	f003 fc49 	bl	8017fb0 <traceIF_itmPrint>
 801471e:	480d      	ldr	r0, [pc, #52]	; (8014754 <CST_pdn_event_mngt+0x114>)
 8014720:	f003 fc08 	bl	8017f34 <crs_strlen>
 8014724:	2101      	movs	r1, #1
 8014726:	b283      	uxth	r3, r0
 8014728:	4a0a      	ldr	r2, [pc, #40]	; (8014754 <CST_pdn_event_mngt+0x114>)
 801472a:	2002      	movs	r0, #2
 801472c:	f003 fe66 	bl	80183fc <traceIF_uartPrint>
		CST_set_state(CST_MODEM_REGISTERED_STATE);
 8014730:	2006      	movs	r0, #6
 8014732:	f7ff fd29 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_ATTACHED_EVENT);
 8014736:	2106      	movs	r1, #6
}
 8014738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NETWORK_CALLBACK_EVENT);
 801473c:	2000      	movs	r0, #0
 801473e:	f7ff bc7b 	b.w	8014038 <CST_send_message>
		CST_set_state(CST_WAITING_FOR_NETWORK_STATUS_STATE);
 8014742:	2004      	movs	r0, #4
 8014744:	f7ff fd20 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NETWORK_CALLBACK_EVENT);
 8014748:	2113      	movs	r1, #19
 801474a:	e7f5      	b.n	8014738 <CST_pdn_event_mngt+0xf8>
 801474c:	2000029c 	.word	0x2000029c
 8014750:	0802a53e 	.word	0x0802a53e
 8014754:	20008ff8 	.word	0x20008ff8
 8014758:	0802a572 	.word	0x0802a572
 801475c:	20008d7c 	.word	0x20008d7c
 8014760:	0802a58c 	.word	0x0802a58c
 8014764:	0802a5d4 	.word	0x0802a5d4

08014768 <CST_notif_callback>:
		const void *private_data) {
 8014768:	b538      	push	{r3, r4, r5, lr}
	PRINT_CELLULAR_SERVICE("=====>CST_notif_callback (Data Cache event=%d)\n\r",
 801476a:	4602      	mov	r2, r0
 801476c:	4920      	ldr	r1, [pc, #128]	; (80147f0 <CST_notif_callback+0x88>)
		const void *private_data) {
 801476e:	4604      	mov	r4, r0
	PRINT_CELLULAR_SERVICE("=====>CST_notif_callback (Data Cache event=%d)\n\r",
 8014770:	4820      	ldr	r0, [pc, #128]	; (80147f4 <CST_notif_callback+0x8c>)
 8014772:	f008 fba1 	bl	801ceb8 <sprintf>
 8014776:	481f      	ldr	r0, [pc, #124]	; (80147f4 <CST_notif_callback+0x8c>)
 8014778:	f003 fbdc 	bl	8017f34 <crs_strlen>
 801477c:	4a1d      	ldr	r2, [pc, #116]	; (80147f4 <CST_notif_callback+0x8c>)
 801477e:	b283      	uxth	r3, r0
 8014780:	2101      	movs	r1, #1
 8014782:	2002      	movs	r0, #2
 8014784:	f003 fc14 	bl	8017fb0 <traceIF_itmPrint>
 8014788:	481a      	ldr	r0, [pc, #104]	; (80147f4 <CST_notif_callback+0x8c>)
 801478a:	f003 fbd3 	bl	8017f34 <crs_strlen>
 801478e:	4a19      	ldr	r2, [pc, #100]	; (80147f4 <CST_notif_callback+0x8c>)
 8014790:	b283      	uxth	r3, r0
 8014792:	2101      	movs	r1, #1
 8014794:	2002      	movs	r0, #2
 8014796:	f003 fe31 	bl	80183fc <traceIF_uartPrint>
	if ((dc_event_id == DC_CELLULAR_DATA_INFO)
 801479a:	4b17      	ldr	r3, [pc, #92]	; (80147f8 <CST_notif_callback+0x90>)
 801479c:	881b      	ldrh	r3, [r3, #0]
 801479e:	42a3      	cmp	r3, r4
 80147a0:	d003      	beq.n	80147aa <CST_notif_callback+0x42>
			|| (dc_event_id == DC_CELLULAR_TARGET_STATE_CMD)) {
 80147a2:	4b16      	ldr	r3, [pc, #88]	; (80147fc <CST_notif_callback+0x94>)
 80147a4:	881b      	ldrh	r3, [r3, #0]
 80147a6:	42a3      	cmp	r3, r4
 80147a8:	d105      	bne.n	80147b6 <CST_notif_callback+0x4e>
		CST_send_message(CST_MESSAGE_DC_EVENT, (cst_autom_event_t) dc_event_id);
 80147aa:	4621      	mov	r1, r4
 80147ac:	2001      	movs	r0, #1
}
 80147ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			CST_send_message(CST_MESSAGE_CS_EVENT, CST_APN_CONFIG_EVENT);
 80147b2:	f7ff bc41 	b.w	8014038 <CST_send_message>
	} else if (dc_event_id == DC_CELLULAR_CONFIG) {
 80147b6:	4b12      	ldr	r3, [pc, #72]	; (8014800 <CST_notif_callback+0x98>)
 80147b8:	881b      	ldrh	r3, [r3, #0]
 80147ba:	429c      	cmp	r4, r3
 80147bc:	d115      	bne.n	80147ea <CST_notif_callback+0x82>
		(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 80147be:	4d11      	ldr	r5, [pc, #68]	; (8014804 <CST_notif_callback+0x9c>)
 80147c0:	4811      	ldr	r0, [pc, #68]	; (8014808 <CST_notif_callback+0xa0>)
 80147c2:	462a      	mov	r2, r5
 80147c4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80147c8:	4621      	mov	r1, r4
 80147ca:	f002 fd53 	bl	8017274 <dc_com_read>
		if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged
 80147ce:	4b0f      	ldr	r3, [pc, #60]	; (801480c <CST_notif_callback+0xa4>)
 80147d0:	7c1b      	ldrb	r3, [r3, #16]
 80147d2:	2268      	movs	r2, #104	; 0x68
 80147d4:	fb03 2202 	mla	r2, r3, r2, r2
 80147d8:	4415      	add	r5, r2
 80147da:	7a6b      	ldrb	r3, [r5, #9]
 80147dc:	b133      	cbz	r3, 80147ec <CST_notif_callback+0x84>
			CST_set_state(CST_APN_CONFIG_STATE);
 80147de:	2011      	movs	r0, #17
 80147e0:	f7ff fcd2 	bl	8014188 <CST_set_state>
			CST_send_message(CST_MESSAGE_CS_EVENT, CST_APN_CONFIG_EVENT);
 80147e4:	2110      	movs	r1, #16
 80147e6:	2000      	movs	r0, #0
 80147e8:	e7e1      	b.n	80147ae <CST_notif_callback+0x46>
		__NOP(); /* Nothing to do */
 80147ea:	bf00      	nop
}
 80147ec:	bd38      	pop	{r3, r4, r5, pc}
 80147ee:	bf00      	nop
 80147f0:	0802a608 	.word	0x0802a608
 80147f4:	20008ff8 	.word	0x20008ff8
 80147f8:	2000023e 	.word	0x2000023e
 80147fc:	2000024a 	.word	0x2000024a
 8014800:	2000023c 	.word	0x2000023c
 8014804:	20008ad0 	.word	0x20008ad0
 8014808:	20008d7c 	.word	0x20008d7c
 801480c:	2000029c 	.word	0x2000029c

08014810 <CST_get_state>:
 * @param  -
 * @retval CST_autom_state_t - automaton state
 */
CST_autom_state_t CST_get_state(void) {
	return cst_context.current_state;
}
 8014810:	4b01      	ldr	r3, [pc, #4]	; (8014818 <CST_get_state+0x8>)
 8014812:	8818      	ldrh	r0, [r3, #0]
 8014814:	4770      	bx	lr
 8014816:	bf00      	nop
 8014818:	2000029c 	.word	0x2000029c

0801481c <CST_radio_on>:
/**
 * @brief  allows to set radio on: start cellular automaton
 * @param  -
 * @retval CS_Status_t - return code
 */
CS_Status_t CST_radio_on(void) {
 801481c:	b508      	push	{r3, lr}
	/* Sends a message to start automaton */
	CST_send_message(CST_MESSAGE_CMD, CST_BOOT_EVENT);
 801481e:	2100      	movs	r1, #0
 8014820:	2002      	movs	r0, #2
 8014822:	f7ff fc09 	bl	8014038 <CST_send_message>
	return CELLULAR_OK;
}
 8014826:	2000      	movs	r0, #0
 8014828:	bd08      	pop	{r3, pc}
	...

0801482c <CST_get_dev_IP_address>:
 * @param  ip_addr_type - type of IP address
 * @param  p_ip_addr_value - IP address value returned by the function
 * @retval CS_Status_t - return code
 */
CS_Status_t CST_get_dev_IP_address(CS_IPaddrType_t *ip_addr_type,
		CS_CHAR_t *p_ip_addr_value) {
 801482c:	b513      	push	{r0, r1, r4, lr}
	return osCDS_get_dev_IP_address(
			cst_get_cid_value(
					cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid),
 801482e:	4b09      	ldr	r3, [pc, #36]	; (8014854 <CST_get_dev_IP_address+0x28>)
		CS_CHAR_t *p_ip_addr_value) {
 8014830:	9101      	str	r1, [sp, #4]
					cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid),
 8014832:	7c1b      	ldrb	r3, [r3, #16]
	return osCDS_get_dev_IP_address(
 8014834:	4908      	ldr	r1, [pc, #32]	; (8014858 <CST_get_dev_IP_address+0x2c>)
		CS_CHAR_t *p_ip_addr_value) {
 8014836:	4604      	mov	r4, r0
	return osCDS_get_dev_IP_address(
 8014838:	2068      	movs	r0, #104	; 0x68
 801483a:	fb00 1303 	mla	r3, r0, r3, r1
 801483e:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 8014842:	f7ff f8c1 	bl	80139c8 <cst_get_cid_value>
 8014846:	9a01      	ldr	r2, [sp, #4]
 8014848:	4621      	mov	r1, r4
			ip_addr_type, p_ip_addr_value);
}
 801484a:	b002      	add	sp, #8
 801484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return osCDS_get_dev_IP_address(
 8014850:	f7ff bb6e 	b.w	8013f30 <osCDS_get_dev_IP_address>
 8014854:	2000029c 	.word	0x2000029c
 8014858:	20008ad0 	.word	0x20008ad0

0801485c <CST_cellular_service_task>:
static void CST_cellular_service_task(void *argument) {
 801485c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if ((cst_context.current_state < CST_MAX_STATE)
 8014860:	4eb5      	ldr	r6, [pc, #724]	; (8014b38 <CST_cellular_service_task+0x2dc>)
		(void) rtosalMessageQueueGet((osMessageQId) cst_queue_id, &event,
 8014862:	4fb6      	ldr	r7, [pc, #728]	; (8014b3c <CST_cellular_service_task+0x2e0>)
static void CST_cellular_service_task(void *argument) {
 8014864:	b097      	sub	sp, #92	; 0x5c
 8014866:	4635      	mov	r5, r6
		event = 0xffffffffU;
 8014868:	f04f 32ff 	mov.w	r2, #4294967295
		(void) rtosalMessageQueueGet((osMessageQId) cst_queue_id, &event,
 801486c:	a901      	add	r1, sp, #4
 801486e:	6838      	ldr	r0, [r7, #0]
		event = 0xffffffffU;
 8014870:	9201      	str	r2, [sp, #4]
		(void) rtosalMessageQueueGet((osMessageQId) cst_queue_id, &event,
 8014872:	f003 fabd 	bl	8017df0 <rtosalMessageQueueGet>
		autom_event = CST_get_autom_event(event);
 8014876:	9801      	ldr	r0, [sp, #4]
 8014878:	f002 fa68 	bl	8016d4c <CST_get_autom_event>
		if ((cst_context.current_state < CST_MAX_STATE)
 801487c:	8832      	ldrh	r2, [r6, #0]
 801487e:	2a13      	cmp	r2, #19
		autom_event = CST_get_autom_event(event);
 8014880:	4604      	mov	r4, r0
		if ((cst_context.current_state < CST_MAX_STATE)
 8014882:	d847      	bhi.n	8014914 <CST_cellular_service_task+0xb8>
				&& (autom_event < CST_MAX_EVENT)) {
 8014884:	281d      	cmp	r0, #29
 8014886:	d929      	bls.n	80148dc <CST_cellular_service_task+0x80>
			switch (cst_context.current_state) {
 8014888:	882b      	ldrh	r3, [r5, #0]
 801488a:	2b11      	cmp	r3, #17
 801488c:	d8ec      	bhi.n	8014868 <CST_cellular_service_task+0xc>
 801488e:	a201      	add	r2, pc, #4	; (adr r2, 8014894 <CST_cellular_service_task+0x38>)
 8014890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014894:	0801491f 	.word	0x0801491f
 8014898:	080149af 	.word	0x080149af
 801489c:	08014be5 	.word	0x08014be5
 80148a0:	08014ccb 	.word	0x08014ccb
 80148a4:	08014d97 	.word	0x08014d97
 80148a8:	08014faf 	.word	0x08014faf
 80148ac:	080151e9 	.word	0x080151e9
 80148b0:	08015229 	.word	0x08015229
 80148b4:	080152e7 	.word	0x080152e7
 80148b8:	08015555 	.word	0x08015555
 80148bc:	08015521 	.word	0x08015521
 80148c0:	0801551d 	.word	0x0801551d
 80148c4:	080156d7 	.word	0x080156d7
 80148c8:	08015737 	.word	0x08015737
 80148cc:	08015441 	.word	0x08015441
 80148d0:	08014869 	.word	0x08014869
 80148d4:	08014869 	.word	0x08014869
 80148d8:	08015689 	.word	0x08015689
			PRINT_CELLULAR_SERVICE("AUTOM TASK:  %s - %s\n\r",
 80148dc:	4998      	ldr	r1, [pc, #608]	; (8014b40 <CST_cellular_service_task+0x2e4>)
 80148de:	4b99      	ldr	r3, [pc, #612]	; (8014b44 <CST_cellular_service_task+0x2e8>)
 80148e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80148e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80148e8:	4997      	ldr	r1, [pc, #604]	; (8014b48 <CST_cellular_service_task+0x2ec>)
 80148ea:	4898      	ldr	r0, [pc, #608]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 80148ec:	f008 fae4 	bl	801ceb8 <sprintf>
 80148f0:	4896      	ldr	r0, [pc, #600]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 80148f2:	f003 fb1f 	bl	8017f34 <crs_strlen>
 80148f6:	4a95      	ldr	r2, [pc, #596]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 80148f8:	b283      	uxth	r3, r0
 80148fa:	2101      	movs	r1, #1
 80148fc:	2002      	movs	r0, #2
 80148fe:	f003 fb57 	bl	8017fb0 <traceIF_itmPrint>
 8014902:	4892      	ldr	r0, [pc, #584]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014904:	f003 fb16 	bl	8017f34 <crs_strlen>
 8014908:	4a90      	ldr	r2, [pc, #576]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 801490a:	b283      	uxth	r3, r0
 801490c:	2101      	movs	r1, #1
 801490e:	2002      	movs	r0, #2
 8014910:	f003 fd74 	bl	80183fc <traceIF_uartPrint>
		if (autom_event != CST_NO_EVENT) {
 8014914:	2c0d      	cmp	r4, #13
 8014916:	d1b7      	bne.n	8014888 <CST_cellular_service_task+0x2c>
			PRINT_CELLULAR_SERVICE(
 8014918:	498d      	ldr	r1, [pc, #564]	; (8014b50 <CST_cellular_service_task+0x2f4>)
 801491a:	f000 bd64 	b.w	80153e6 <CST_cellular_service_task+0xb8a>
	switch (autom_event) {
 801491e:	2c11      	cmp	r4, #17
 8014920:	f000 8601 	beq.w	8015526 <CST_cellular_service_task+0xcca>
 8014924:	2c12      	cmp	r4, #18
 8014926:	d01f      	beq.n	8014968 <CST_cellular_service_task+0x10c>
 8014928:	2c00      	cmp	r4, #0
 801492a:	d19d      	bne.n	8014868 <CST_cellular_service_task+0xc>
	PRINT_CELLULAR_SERVICE("*********** CST_boot_event_mngt ********\n\r")
 801492c:	4989      	ldr	r1, [pc, #548]	; (8014b54 <CST_cellular_service_task+0x2f8>)
 801492e:	4887      	ldr	r0, [pc, #540]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014930:	f008 fb32 	bl	801cf98 <strcpy>
 8014934:	4885      	ldr	r0, [pc, #532]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014936:	f003 fafd 	bl	8017f34 <crs_strlen>
 801493a:	4a84      	ldr	r2, [pc, #528]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 801493c:	b283      	uxth	r3, r0
 801493e:	2101      	movs	r1, #1
 8014940:	2002      	movs	r0, #2
 8014942:	f003 fb35 	bl	8017fb0 <traceIF_itmPrint>
 8014946:	4881      	ldr	r0, [pc, #516]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014948:	f003 faf4 	bl	8017f34 <crs_strlen>
 801494c:	4a7f      	ldr	r2, [pc, #508]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 801494e:	b283      	uxth	r3, r0
 8014950:	2101      	movs	r1, #1
 8014952:	2002      	movs	r0, #2
 8014954:	f003 fd52 	bl	80183fc <traceIF_uartPrint>
	CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8014958:	4a7f      	ldr	r2, [pc, #508]	; (8014b58 <CST_cellular_service_task+0x2fc>)
 801495a:	21ff      	movs	r1, #255	; 0xff
		CST_set_modem_state(&dc_com_db, CA_MODEM_REBOOTING,
 801495c:	487f      	ldr	r0, [pc, #508]	; (8014b5c <CST_cellular_service_task+0x300>)
 801495e:	f002 fabf 	bl	8016ee0 <CST_set_modem_state>
		CST_set_state(CST_MODEM_INIT_STATE);
 8014962:	2001      	movs	r0, #1
 8014964:	f000 bdf1 	b.w	801554a <CST_cellular_service_task+0xcee>
	PRINT_CELLULAR_SERVICE(
 8014968:	497d      	ldr	r1, [pc, #500]	; (8014b60 <CST_cellular_service_task+0x304>)
 801496a:	4878      	ldr	r0, [pc, #480]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 801496c:	f008 fb14 	bl	801cf98 <strcpy>
 8014970:	4876      	ldr	r0, [pc, #472]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014972:	f003 fadf 	bl	8017f34 <crs_strlen>
 8014976:	4a75      	ldr	r2, [pc, #468]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014978:	b283      	uxth	r3, r0
 801497a:	2101      	movs	r1, #1
 801497c:	2002      	movs	r0, #2
 801497e:	f003 fb17 	bl	8017fb0 <traceIF_itmPrint>
 8014982:	4872      	ldr	r0, [pc, #456]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014984:	f003 fad6 	bl	8017f34 <crs_strlen>
 8014988:	4a70      	ldr	r2, [pc, #448]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 801498a:	b283      	uxth	r3, r0
 801498c:	2101      	movs	r1, #1
 801498e:	2002      	movs	r0, #2
 8014990:	f003 fd34 	bl	80183fc <traceIF_uartPrint>
	CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8014994:	21ff      	movs	r1, #255	; 0xff
 8014996:	4a70      	ldr	r2, [pc, #448]	; (8014b58 <CST_cellular_service_task+0x2fc>)
 8014998:	4870      	ldr	r0, [pc, #448]	; (8014b5c <CST_cellular_service_task+0x300>)
 801499a:	f002 faa1 	bl	8016ee0 <CST_set_modem_state>
	CST_set_state(CST_MODEM_INIT_STATE);
 801499e:	2001      	movs	r0, #1
 80149a0:	f7ff fbf2 	bl	8014188 <CST_set_state>
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_POWER_ON_ONLY_EVENT);
 80149a4:	4621      	mov	r1, r4
 80149a6:	2000      	movs	r0, #0
 80149a8:	f7ff fb46 	bl	8014038 <CST_send_message>
}
 80149ac:	e75c      	b.n	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 80149ae:	2c01      	cmp	r4, #1
 80149b0:	d016      	beq.n	80149e0 <CST_cellular_service_task+0x184>
 80149b2:	3c0f      	subs	r4, #15
 80149b4:	b2a3      	uxth	r3, r4
 80149b6:	2b0e      	cmp	r3, #14
 80149b8:	d85c      	bhi.n	8014a74 <CST_cellular_service_task+0x218>
 80149ba:	2c0e      	cmp	r4, #14
 80149bc:	d85a      	bhi.n	8014a74 <CST_cellular_service_task+0x218>
 80149be:	e8df f014 	tbh	[pc, r4, lsl #1]
 80149c2:	010b      	.short	0x010b
 80149c4:	01080059 	.word	0x01080059
 80149c8:	005900e7 	.word	0x005900e7
 80149cc:	010e0059 	.word	0x010e0059
 80149d0:	00590059 	.word	0x00590059
 80149d4:	00590059 	.word	0x00590059
 80149d8:	00590059 	.word	0x00590059
 80149dc:	00730059 	.word	0x00730059
	PRINT_CELLULAR_SERVICE("*********** CST_init_state_mngt ********\n\r")
 80149e0:	4960      	ldr	r1, [pc, #384]	; (8014b64 <CST_cellular_service_task+0x308>)
 80149e2:	485a      	ldr	r0, [pc, #360]	; (8014b4c <CST_cellular_service_task+0x2f0>)
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 80149e4:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014b8c <CST_cellular_service_task+0x330>
	PRINT_CELLULAR_SERVICE("*********** CST_init_state_mngt ********\n\r")
 80149e8:	f008 fad6 	bl	801cf98 <strcpy>
 80149ec:	4857      	ldr	r0, [pc, #348]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 80149ee:	f003 faa1 	bl	8017f34 <crs_strlen>
 80149f2:	4621      	mov	r1, r4
 80149f4:	b283      	uxth	r3, r0
 80149f6:	4a55      	ldr	r2, [pc, #340]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 80149f8:	2002      	movs	r0, #2
 80149fa:	f003 fad9 	bl	8017fb0 <traceIF_itmPrint>
 80149fe:	4853      	ldr	r0, [pc, #332]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014a00:	f003 fa98 	bl	8017f34 <crs_strlen>
 8014a04:	4621      	mov	r1, r4
 8014a06:	b283      	uxth	r3, r0
 8014a08:	4a50      	ldr	r2, [pc, #320]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014a0a:	4c57      	ldr	r4, [pc, #348]	; (8014b68 <CST_cellular_service_task+0x30c>)
 8014a0c:	2002      	movs	r0, #2
 8014a0e:	f003 fcf5 	bl	80183fc <traceIF_uartPrint>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8014a12:	f8b8 1000 	ldrh.w	r1, [r8]
 8014a16:	4851      	ldr	r0, [pc, #324]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014a18:	230c      	movs	r3, #12
 8014a1a:	aa02      	add	r2, sp, #8
 8014a1c:	f002 fc2a 	bl	8017274 <dc_com_read>
 8014a20:	b168      	cbz	r0, 8014a3e <CST_cellular_service_task+0x1e2>
		target_state.target_state = cst_cellular_params.target_state;
 8014a22:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 8014a26:	f88d 3012 	strb.w	r3, [sp, #18]
		target_state.rt_state = DC_SERVICE_ON;
 8014a2a:	2307      	movs	r3, #7
 8014a2c:	f8ad 3010 	strh.w	r3, [sp, #16]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8014a30:	f8b8 1000 	ldrh.w	r1, [r8]
 8014a34:	4849      	ldr	r0, [pc, #292]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014a36:	230c      	movs	r3, #12
 8014a38:	aa02      	add	r2, sp, #8
 8014a3a:	f002 fbb7 	bl	80171ac <dc_com_write>
	if (cst_cellular_params.target_state == DC_TARGET_STATE_OFF) {
 8014a3e:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 8014a42:	b943      	cbnz	r3, 8014a56 <CST_cellular_service_task+0x1fa>
		CST_set_state(CST_MODEM_OFF_STATE);
 8014a44:	200e      	movs	r0, #14
 8014a46:	f7ff fb9f 	bl	8014188 <CST_set_state>
		CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8014a4a:	4a43      	ldr	r2, [pc, #268]	; (8014b58 <CST_cellular_service_task+0x2fc>)
 8014a4c:	4843      	ldr	r0, [pc, #268]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014a4e:	21ff      	movs	r1, #255	; 0xff
 8014a50:	f002 fa46 	bl	8016ee0 <CST_set_modem_state>
 8014a54:	e00e      	b.n	8014a74 <CST_cellular_service_task+0x218>
		if (cst_nfmc_context.nfmc_timer_on_going == false) {
 8014a56:	4b45      	ldr	r3, [pc, #276]	; (8014b6c <CST_cellular_service_task+0x310>)
 8014a58:	785b      	ldrb	r3, [r3, #1]
 8014a5a:	b95b      	cbnz	r3, 8014a74 <CST_cellular_service_task+0x218>
			(void) CS_subscribe_sim_event(CST_SimEventsCallback);
 8014a5c:	4844      	ldr	r0, [pc, #272]	; (8014b70 <CST_cellular_service_task+0x314>)
 8014a5e:	f7fb f8ad 	bl	800fbbc <CS_subscribe_sim_event>
			cs_status = osCDS_power_on();
 8014a62:	f7ff f95f 	bl	8013d24 <osCDS_power_on>
			if (cs_status != CELLULAR_OK) {
 8014a66:	b140      	cbz	r0, 8014a7a <CST_cellular_service_task+0x21e>
				CST_config_fail(((uint8_t*) "CST_cmd"), CST_MODEM_POWER_ON_FAIL,
 8014a68:	4a42      	ldr	r2, [pc, #264]	; (8014b74 <CST_cellular_service_task+0x318>)
 8014a6a:	4843      	ldr	r0, [pc, #268]	; (8014b78 <CST_cellular_service_task+0x31c>)
 8014a6c:	2305      	movs	r3, #5
 8014a6e:	2101      	movs	r1, #1
 8014a70:	f001 f8d4 	bl	8015c1c <CST_config_fail>
	CST_subscribe_modem_events();
 8014a74:	f002 f946 	bl	8016d04 <CST_subscribe_modem_events>
}
 8014a78:	e6f6      	b.n	8014868 <CST_cellular_service_task+0xc>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 8014a7a:	4c40      	ldr	r4, [pc, #256]	; (8014b7c <CST_cellular_service_task+0x320>)
 8014a7c:	4a40      	ldr	r2, [pc, #256]	; (8014b80 <CST_cellular_service_task+0x324>)
 8014a7e:	8821      	ldrh	r1, [r4, #0]
 8014a80:	4836      	ldr	r0, [pc, #216]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014a82:	23dc      	movs	r3, #220	; 0xdc
 8014a84:	f002 fbf6 	bl	8017274 <dc_com_read>
				cst_cellular_info.rt_state = DC_SERVICE_RUN;
 8014a88:	4a3d      	ldr	r2, [pc, #244]	; (8014b80 <CST_cellular_service_task+0x324>)
				(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014a8a:	8821      	ldrh	r1, [r4, #0]
 8014a8c:	4833      	ldr	r0, [pc, #204]	; (8014b5c <CST_cellular_service_task+0x300>)
				cst_cellular_info.rt_state = DC_SERVICE_RUN;
 8014a8e:	2306      	movs	r3, #6
 8014a90:	7213      	strb	r3, [r2, #8]
				(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014a92:	23dc      	movs	r3, #220	; 0xdc
 8014a94:	f002 fb8a 	bl	80171ac <dc_com_write>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 8014a98:	4a3a      	ldr	r2, [pc, #232]	; (8014b84 <CST_cellular_service_task+0x328>)
 8014a9a:	4830      	ldr	r0, [pc, #192]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014a9c:	2101      	movs	r1, #1
 8014a9e:	f002 fa1f 	bl	8016ee0 <CST_set_modem_state>
		CST_modem_sim_init();
 8014aa2:	f001 f9a7 	bl	8015df4 <CST_modem_sim_init>
}
 8014aa6:	e7e5      	b.n	8014a74 <CST_cellular_service_task+0x218>
	PRINT_CELLULAR_SERVICE(
 8014aa8:	4937      	ldr	r1, [pc, #220]	; (8014b88 <CST_cellular_service_task+0x32c>)
 8014aaa:	4828      	ldr	r0, [pc, #160]	; (8014b4c <CST_cellular_service_task+0x2f0>)
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8014aac:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8014b8c <CST_cellular_service_task+0x330>
 8014ab0:	4c2d      	ldr	r4, [pc, #180]	; (8014b68 <CST_cellular_service_task+0x30c>)
	PRINT_CELLULAR_SERVICE(
 8014ab2:	f008 fa71 	bl	801cf98 <strcpy>
 8014ab6:	4825      	ldr	r0, [pc, #148]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014ab8:	f003 fa3c 	bl	8017f34 <crs_strlen>
 8014abc:	4a23      	ldr	r2, [pc, #140]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014abe:	b283      	uxth	r3, r0
 8014ac0:	2101      	movs	r1, #1
 8014ac2:	2002      	movs	r0, #2
 8014ac4:	f003 fa74 	bl	8017fb0 <traceIF_itmPrint>
 8014ac8:	4820      	ldr	r0, [pc, #128]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014aca:	f003 fa33 	bl	8017f34 <crs_strlen>
 8014ace:	4a1f      	ldr	r2, [pc, #124]	; (8014b4c <CST_cellular_service_task+0x2f0>)
 8014ad0:	b283      	uxth	r3, r0
 8014ad2:	2101      	movs	r1, #1
 8014ad4:	2002      	movs	r0, #2
 8014ad6:	f003 fc91 	bl	80183fc <traceIF_uartPrint>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8014ada:	f8b8 1000 	ldrh.w	r1, [r8]
 8014ade:	481f      	ldr	r0, [pc, #124]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014ae0:	230c      	movs	r3, #12
 8014ae2:	aa02      	add	r2, sp, #8
 8014ae4:	f002 fbc6 	bl	8017274 <dc_com_read>
 8014ae8:	b168      	cbz	r0, 8014b06 <CST_cellular_service_task+0x2aa>
		target_state.target_state = cst_cellular_params.target_state;
 8014aea:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 8014aee:	f88d 3012 	strb.w	r3, [sp, #18]
		target_state.rt_state = DC_SERVICE_ON;
 8014af2:	2307      	movs	r3, #7
 8014af4:	f8ad 3010 	strh.w	r3, [sp, #16]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8014af8:	f8b8 1000 	ldrh.w	r1, [r8]
 8014afc:	4817      	ldr	r0, [pc, #92]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014afe:	230c      	movs	r3, #12
 8014b00:	aa02      	add	r2, sp, #8
 8014b02:	f002 fb53 	bl	80171ac <dc_com_write>
	if (cst_cellular_params.target_state == DC_TARGET_STATE_OFF) {
 8014b06:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d09a      	beq.n	8014a44 <CST_cellular_service_task+0x1e8>
		(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 8014b0e:	4c1b      	ldr	r4, [pc, #108]	; (8014b7c <CST_cellular_service_task+0x320>)
 8014b10:	4a1b      	ldr	r2, [pc, #108]	; (8014b80 <CST_cellular_service_task+0x324>)
 8014b12:	8821      	ldrh	r1, [r4, #0]
 8014b14:	4811      	ldr	r0, [pc, #68]	; (8014b5c <CST_cellular_service_task+0x300>)
 8014b16:	23dc      	movs	r3, #220	; 0xdc
 8014b18:	f002 fbac 	bl	8017274 <dc_com_read>
		cst_cellular_info.rt_state = DC_SERVICE_RUN;
 8014b1c:	4a18      	ldr	r2, [pc, #96]	; (8014b80 <CST_cellular_service_task+0x324>)
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014b1e:	8821      	ldrh	r1, [r4, #0]
 8014b20:	480e      	ldr	r0, [pc, #56]	; (8014b5c <CST_cellular_service_task+0x300>)
		cst_cellular_info.rt_state = DC_SERVICE_RUN;
 8014b22:	2306      	movs	r3, #6
 8014b24:	7213      	strb	r3, [r2, #8]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8014b26:	23dc      	movs	r3, #220	; 0xdc
 8014b28:	f002 fb40 	bl	80171ac <dc_com_write>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	2003      	movs	r0, #3
 8014b30:	f001 f822 	bl	8015b78 <CST_data_cache_cellular_info_set>
 8014b34:	e7b0      	b.n	8014a98 <CST_cellular_service_task+0x23c>
 8014b36:	bf00      	nop
 8014b38:	2000029c 	.word	0x2000029c
 8014b3c:	20003f8c 	.word	0x20003f8c
 8014b40:	2000024c 	.word	0x2000024c
 8014b44:	0802afd8 	.word	0x0802afd8
 8014b48:	0802a639 	.word	0x0802a639
 8014b4c:	20008ff8 	.word	0x20008ff8
 8014b50:	0802ab7a 	.word	0x0802ab7a
 8014b54:	0802a650 	.word	0x0802a650
 8014b58:	0802a3eb 	.word	0x0802a3eb
 8014b5c:	20008d7c 	.word	0x20008d7c
 8014b60:	0802a67b 	.word	0x0802a67b
 8014b64:	0802a6b4 	.word	0x0802a6b4
 8014b68:	20008ad0 	.word	0x20008ad0
 8014b6c:	20008ab0 	.word	0x20008ab0
 8014b70:	0801426d 	.word	0x0801426d
 8014b74:	200002ae 	.word	0x200002ae
 8014b78:	0802a6df 	.word	0x0802a6df
 8014b7c:	20000240 	.word	0x20000240
 8014b80:	20008c80 	.word	0x20008c80
 8014b84:	0802a572 	.word	0x0802a572
 8014b88:	0802a6e7 	.word	0x0802a6e7
 8014b8c:	2000024a 	.word	0x2000024a
	PRINT_CELLULAR_SERVICE(
 8014b90:	49b7      	ldr	r1, [pc, #732]	; (8014e70 <CST_cellular_service_task+0x614>)
 8014b92:	48b8      	ldr	r0, [pc, #736]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014b94:	f008 fa00 	bl	801cf98 <strcpy>
 8014b98:	48b6      	ldr	r0, [pc, #728]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014b9a:	f003 f9cb 	bl	8017f34 <crs_strlen>
 8014b9e:	4ab5      	ldr	r2, [pc, #724]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014ba0:	b283      	uxth	r3, r0
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	2002      	movs	r0, #2
 8014ba6:	f003 fa03 	bl	8017fb0 <traceIF_itmPrint>
 8014baa:	48b2      	ldr	r0, [pc, #712]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014bac:	f003 f9c2 	bl	8017f34 <crs_strlen>
 8014bb0:	4ab0      	ldr	r2, [pc, #704]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014bb2:	b283      	uxth	r3, r0
 8014bb4:	2101      	movs	r1, #1
 8014bb6:	2002      	movs	r0, #2
 8014bb8:	f003 fc20 	bl	80183fc <traceIF_uartPrint>
	(void) osCDS_power_on();
 8014bbc:	f7ff f8b2 	bl	8013d24 <osCDS_power_on>
	CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 8014bc0:	4aad      	ldr	r2, [pc, #692]	; (8014e78 <CST_cellular_service_task+0x61c>)
 8014bc2:	48ae      	ldr	r0, [pc, #696]	; (8014e7c <CST_cellular_service_task+0x620>)
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	f002 f98b 	bl	8016ee0 <CST_set_modem_state>
	CST_set_state(CST_MODEM_POWER_ON_ONLY_STATE);
 8014bca:	200f      	movs	r0, #15
 8014bcc:	f7ff fadc 	bl	8014188 <CST_set_state>
}
 8014bd0:	e750      	b.n	8014a74 <CST_cellular_service_task+0x218>
		CST_reboot_modem_event_mngt();
 8014bd2:	f7ff fb11 	bl	80141f8 <CST_reboot_modem_event_mngt>
		break;
 8014bd6:	e74d      	b.n	8014a74 <CST_cellular_service_task+0x218>
		CST_target_state_cmd_event_mngt();
 8014bd8:	f7ff fba0 	bl	801431c <CST_target_state_cmd_event_mngt>
		break;
 8014bdc:	e74a      	b.n	8014a74 <CST_cellular_service_task+0x218>
		CST_fota_start_event_mngt();
 8014bde:	f7ff fc15 	bl	801440c <CST_fota_start_event_mngt>
		break;
 8014be2:	e747      	b.n	8014a74 <CST_cellular_service_task+0x218>
	switch (autom_event) {
 8014be4:	2c11      	cmp	r4, #17
 8014be6:	f000 849e 	beq.w	8015526 <CST_cellular_service_task+0xcca>
 8014bea:	f200 826e 	bhi.w	80150ca <CST_cellular_service_task+0x86e>
 8014bee:	2c02      	cmp	r4, #2
 8014bf0:	d005      	beq.n	8014bfe <CST_cellular_service_task+0x3a2>
	switch (autom_event) {
 8014bf2:	2c0f      	cmp	r4, #15
 8014bf4:	f47f ae38 	bne.w	8014868 <CST_cellular_service_task+0xc>
		CST_target_state_cmd_event_mngt();
 8014bf8:	f7ff fb90 	bl	801431c <CST_target_state_cmd_event_mngt>
 8014bfc:	e634      	b.n	8014868 <CST_cellular_service_task+0xc>
	PRINT_CELLULAR_SERVICE("=== CST_net_register_mngt ===\n\r")
 8014bfe:	49a0      	ldr	r1, [pc, #640]	; (8014e80 <CST_cellular_service_task+0x624>)
 8014c00:	489c      	ldr	r0, [pc, #624]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014c02:	f008 f9c9 	bl	801cf98 <strcpy>
 8014c06:	489b      	ldr	r0, [pc, #620]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014c08:	f003 f994 	bl	8017f34 <crs_strlen>
 8014c0c:	4a99      	ldr	r2, [pc, #612]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014c0e:	b283      	uxth	r3, r0
 8014c10:	2101      	movs	r1, #1
 8014c12:	4620      	mov	r0, r4
 8014c14:	f003 f9cc 	bl	8017fb0 <traceIF_itmPrint>
 8014c18:	4896      	ldr	r0, [pc, #600]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014c1a:	f003 f98b 	bl	8017f34 <crs_strlen>
 8014c1e:	4a95      	ldr	r2, [pc, #596]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014c20:	b283      	uxth	r3, r0
 8014c22:	2101      	movs	r1, #1
 8014c24:	4620      	mov	r0, r4
 8014c26:	f003 fbe9 	bl	80183fc <traceIF_uartPrint>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8014c2a:	4c96      	ldr	r4, [pc, #600]	; (8014e84 <CST_cellular_service_task+0x628>)
 8014c2c:	4996      	ldr	r1, [pc, #600]	; (8014e88 <CST_cellular_service_task+0x62c>)
 8014c2e:	4893      	ldr	r0, [pc, #588]	; (8014e7c <CST_cellular_service_task+0x620>)
 8014c30:	8809      	ldrh	r1, [r1, #0]
 8014c32:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8014c36:	4622      	mov	r2, r4
 8014c38:	f002 fb1c 	bl	8017274 <dc_com_read>
	ctxt_operator.mode =
 8014c3c:	4b93      	ldr	r3, [pc, #588]	; (8014e8c <CST_cellular_service_task+0x630>)
			(CS_NetworkRegMode_t) cst_cellular_params.operator_selector.network_reg_mode;
 8014c3e:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
 8014c42:	801a      	strh	r2, [r3, #0]
			(CS_OperatorNameFormat_t) cst_cellular_params.operator_selector.operator_name_format;
 8014c44:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
 8014c48:	805a      	strh	r2, [r3, #2]
	(void) memcpy(ctxt_operator.operator_name,
 8014c4a:	f504 71a5 	add.w	r1, r4, #330	; 0x14a
 8014c4e:	1d1a      	adds	r2, r3, #4
 8014c50:	f504 70c5 	add.w	r0, r4, #394	; 0x18a
 8014c54:	f851 cb04 	ldr.w	ip, [r1], #4
 8014c58:	f842 cb04 	str.w	ip, [r2], #4
 8014c5c:	4281      	cmp	r1, r0
 8014c5e:	d1f9      	bne.n	8014c54 <CST_cellular_service_task+0x3f8>
	if (cst_cellular_params.operator_selector.access_techno_present
 8014c60:	f894 118b 	ldrb.w	r1, [r4, #395]	; 0x18b
	cs_status = osCDS_register_net(&ctxt_operator, &cst_ctxt_reg_status);
 8014c64:	4889      	ldr	r0, [pc, #548]	; (8014e8c <CST_cellular_service_task+0x630>)
	if (cst_cellular_params.operator_selector.access_techno_present
 8014c66:	1e4a      	subs	r2, r1, #1
 8014c68:	4251      	negs	r1, r2
 8014c6a:	4151      	adcs	r1, r2
 8014c6c:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
			(CS_AccessTechno_t) cst_cellular_params.operator_selector.access_techno;
 8014c70:	f894 218c 	ldrb.w	r2, [r4, #396]	; 0x18c
 8014c74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	cs_status = osCDS_register_net(&ctxt_operator, &cst_ctxt_reg_status);
 8014c78:	a902      	add	r1, sp, #8
 8014c7a:	f7ff f89f 	bl	8013dbc <osCDS_register_net>
	if (cs_status == CELLULAR_OK) {
 8014c7e:	b9a0      	cbnz	r0, 8014caa <CST_cellular_service_task+0x44e>
		cst_context.current_EPS_NetworkRegState =
 8014c80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014c84:	80eb      	strh	r3, [r5, #6]
		cst_context.current_GPRS_NetworkRegState =
 8014c86:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014c8a:	812b      	strh	r3, [r5, #8]
		cst_context.current_CS_NetworkRegState =
 8014c8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014c90:	816b      	strh	r3, [r5, #10]
		(void) osCDS_attach_PS_domain();
 8014c92:	f7ff f8cf 	bl	8013e34 <osCDS_attach_PS_domain>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_REGISTERED,
 8014c96:	4a7e      	ldr	r2, [pc, #504]	; (8014e90 <CST_cellular_service_task+0x634>)
 8014c98:	2104      	movs	r1, #4
			CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 8014c9a:	4878      	ldr	r0, [pc, #480]	; (8014e7c <CST_cellular_service_task+0x620>)
 8014c9c:	f002 f920 	bl	8016ee0 <CST_set_modem_state>
			CST_set_state(CST_WAITING_FOR_SIGNAL_QUALITY_OK_STATE);
 8014ca0:	2003      	movs	r0, #3
 8014ca2:	f7ff fa71 	bl	8014188 <CST_set_state>
			CST_send_message(CST_MESSAGE_CS_EVENT,
 8014ca6:	2103      	movs	r1, #3
 8014ca8:	e67d      	b.n	80149a6 <CST_cellular_service_task+0x14a>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 8014caa:	4a7a      	ldr	r2, [pc, #488]	; (8014e94 <CST_cellular_service_task+0x638>)
 8014cac:	4873      	ldr	r0, [pc, #460]	; (8014e7c <CST_cellular_service_task+0x620>)
 8014cae:	2103      	movs	r1, #3
 8014cb0:	f002 f916 	bl	8016ee0 <CST_set_modem_state>
		CST_config_fail(((uint8_t*) "CST_net_register_mngt"),
 8014cb4:	2305      	movs	r3, #5
 8014cb6:	4a78      	ldr	r2, [pc, #480]	; (8014e98 <CST_cellular_service_task+0x63c>)
 8014cb8:	4878      	ldr	r0, [pc, #480]	; (8014e9c <CST_cellular_service_task+0x640>)
 8014cba:	2104      	movs	r1, #4
 8014cbc:	f000 ffae 	bl	8015c1c <CST_config_fail>
		cst_context.current_EPS_NetworkRegState =
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	80eb      	strh	r3, [r5, #6]
		cst_context.current_GPRS_NetworkRegState =
 8014cc4:	812b      	strh	r3, [r5, #8]
		cst_context.current_CS_NetworkRegState =
 8014cc6:	816b      	strh	r3, [r5, #10]
}
 8014cc8:	e5ce      	b.n	8014868 <CST_cellular_service_task+0xc>
	PRINT_CELLULAR_SERVICE(
 8014cca:	4975      	ldr	r1, [pc, #468]	; (8014ea0 <CST_cellular_service_task+0x644>)
 8014ccc:	4869      	ldr	r0, [pc, #420]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014cce:	f008 f963 	bl	801cf98 <strcpy>
 8014cd2:	4868      	ldr	r0, [pc, #416]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014cd4:	f003 f92e 	bl	8017f34 <crs_strlen>
 8014cd8:	4a66      	ldr	r2, [pc, #408]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014cda:	b283      	uxth	r3, r0
 8014cdc:	2101      	movs	r1, #1
 8014cde:	2002      	movs	r0, #2
 8014ce0:	f003 f966 	bl	8017fb0 <traceIF_itmPrint>
 8014ce4:	4863      	ldr	r0, [pc, #396]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014ce6:	f003 f925 	bl	8017f34 <crs_strlen>
 8014cea:	4a62      	ldr	r2, [pc, #392]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014cec:	b283      	uxth	r3, r0
 8014cee:	2101      	movs	r1, #1
 8014cf0:	2002      	movs	r0, #2
 8014cf2:	f003 fb83 	bl	80183fc <traceIF_uartPrint>
	switch (autom_event) {
 8014cf6:	2c03      	cmp	r4, #3
 8014cf8:	d020      	beq.n	8014d3c <CST_cellular_service_task+0x4e0>
 8014cfa:	3c0b      	subs	r4, #11
 8014cfc:	b2a3      	uxth	r3, r4
 8014cfe:	2b0a      	cmp	r3, #10
 8014d00:	f63f adb2 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 8014d04:	2c0a      	cmp	r4, #10
 8014d06:	f63f adaf 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 8014d0a:	a301      	add	r3, pc, #4	; (adr r3, 8014d10 <CST_cellular_service_task+0x4b4>)
 8014d0c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8014d10:	08014d3d 	.word	0x08014d3d
 8014d14:	08014869 	.word	0x08014869
 8014d18:	08014869 	.word	0x08014869
 8014d1c:	08014869 	.word	0x08014869
 8014d20:	08014bf9 	.word	0x08014bf9
 8014d24:	08014869 	.word	0x08014869
 8014d28:	08015527 	.word	0x08015527
 8014d2c:	08014869 	.word	0x08014869
 8014d30:	08014d91 	.word	0x08014d91
 8014d34:	08014869 	.word	0x08014869
 8014d38:	080150d1 	.word	0x080150d1
	cs_status = CST_set_signal_quality();
 8014d3c:	f001 ff2a 	bl	8016b94 <CST_set_signal_quality>
	if (cs_status == CELLULAR_OK) {
 8014d40:	2800      	cmp	r0, #0
 8014d42:	f47f ad91 	bne.w	8014868 <CST_cellular_service_task+0xc>
		(void) rtosalTimerStart(cst_network_status_timer_handle,
 8014d46:	4b57      	ldr	r3, [pc, #348]	; (8014ea4 <CST_cellular_service_task+0x648>)
 8014d48:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8014e84 <CST_cellular_service_task+0x628>
 8014d4c:	6818      	ldr	r0, [r3, #0]
 8014d4e:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
 8014d52:	f003 f868 	bl	8017e26 <rtosalTimerStart>
		PRINT_CELLULAR_SERVICE("-----> Start NW REG TIMEOUT TIMER   : %ld\n\r",
 8014d56:	f8d8 2144 	ldr.w	r2, [r8, #324]	; 0x144
 8014d5a:	4953      	ldr	r1, [pc, #332]	; (8014ea8 <CST_cellular_service_task+0x64c>)
 8014d5c:	4845      	ldr	r0, [pc, #276]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014d5e:	f008 f8ab 	bl	801ceb8 <sprintf>
 8014d62:	4844      	ldr	r0, [pc, #272]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014d64:	f003 f8e6 	bl	8017f34 <crs_strlen>
 8014d68:	4a42      	ldr	r2, [pc, #264]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014d6a:	b283      	uxth	r3, r0
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	2002      	movs	r0, #2
 8014d70:	f003 f91e 	bl	8017fb0 <traceIF_itmPrint>
 8014d74:	483f      	ldr	r0, [pc, #252]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014d76:	f003 f8dd 	bl	8017f34 <crs_strlen>
 8014d7a:	2101      	movs	r1, #1
 8014d7c:	b283      	uxth	r3, r0
 8014d7e:	4a3d      	ldr	r2, [pc, #244]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014d80:	2002      	movs	r0, #2
 8014d82:	f003 fb3b 	bl	80183fc <traceIF_uartPrint>
		CST_set_state(CST_WAITING_FOR_NETWORK_STATUS_STATE);
 8014d86:	2004      	movs	r0, #4
 8014d88:	f7ff f9fe 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT,
 8014d8c:	2104      	movs	r1, #4
 8014d8e:	e60a      	b.n	80149a6 <CST_cellular_service_task+0x14a>
		CST_network_event_mngt();
 8014d90:	f7ff fb96 	bl	80144c0 <CST_network_event_mngt>
		break;
 8014d94:	e568      	b.n	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 8014d96:	3c03      	subs	r4, #3
 8014d98:	2c12      	cmp	r4, #18
 8014d9a:	f63f ad65 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 8014d9e:	a301      	add	r3, pc, #4	; (adr r3, 8014da4 <CST_cellular_service_task+0x548>)
 8014da0:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8014da4:	08014df1 	.word	0x08014df1
 8014da8:	08014df1 	.word	0x08014df1
 8014dac:	08014869 	.word	0x08014869
 8014db0:	08014869 	.word	0x08014869
 8014db4:	08014869 	.word	0x08014869
 8014db8:	08014869 	.word	0x08014869
 8014dbc:	08014869 	.word	0x08014869
 8014dc0:	08014869 	.word	0x08014869
 8014dc4:	08014df1 	.word	0x08014df1
 8014dc8:	08014869 	.word	0x08014869
 8014dcc:	08014869 	.word	0x08014869
 8014dd0:	08014869 	.word	0x08014869
 8014dd4:	08014bf9 	.word	0x08014bf9
 8014dd8:	08014869 	.word	0x08014869
 8014ddc:	08015527 	.word	0x08015527
 8014de0:	08014869 	.word	0x08014869
 8014de4:	08014df1 	.word	0x08014df1
 8014de8:	08014f0b 	.word	0x08014f0b
 8014dec:	080150d1 	.word	0x080150d1
	PRINT_CELLULAR_SERVICE(
 8014df0:	492e      	ldr	r1, [pc, #184]	; (8014eac <CST_cellular_service_task+0x650>)
 8014df2:	4820      	ldr	r0, [pc, #128]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014df4:	f008 f8d0 	bl	801cf98 <strcpy>
 8014df8:	481e      	ldr	r0, [pc, #120]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014dfa:	f003 f89b 	bl	8017f34 <crs_strlen>
 8014dfe:	4a1d      	ldr	r2, [pc, #116]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e00:	b283      	uxth	r3, r0
 8014e02:	2101      	movs	r1, #1
 8014e04:	2002      	movs	r0, #2
 8014e06:	f003 f8d3 	bl	8017fb0 <traceIF_itmPrint>
 8014e0a:	481a      	ldr	r0, [pc, #104]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e0c:	f003 f892 	bl	8017f34 <crs_strlen>
 8014e10:	4a18      	ldr	r2, [pc, #96]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e12:	b283      	uxth	r3, r0
 8014e14:	2101      	movs	r1, #1
 8014e16:	2002      	movs	r0, #2
 8014e18:	f003 faf0 	bl	80183fc <traceIF_uartPrint>
	ret = CST_get_network_status();
 8014e1c:	f001 ffd6 	bl	8016dcc <CST_get_network_status>
	if (ret == CST_NET_REGISTERED) {
 8014e20:	4604      	mov	r4, r0
 8014e22:	2800      	cmp	r0, #0
 8014e24:	d146      	bne.n	8014eb4 <CST_cellular_service_task+0x658>
		(void) rtosalTimerStop(cst_network_status_timer_handle);
 8014e26:	4b1f      	ldr	r3, [pc, #124]	; (8014ea4 <CST_cellular_service_task+0x648>)
 8014e28:	6818      	ldr	r0, [r3, #0]
 8014e2a:	f002 fffe 	bl	8017e2a <rtosalTimerStop>
		PRINT_CELLULAR_SERVICE("-----> Stop NW REG TIMEOUT TIMER\n\r")
 8014e2e:	4920      	ldr	r1, [pc, #128]	; (8014eb0 <CST_cellular_service_task+0x654>)
 8014e30:	4810      	ldr	r0, [pc, #64]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e32:	f008 f8b1 	bl	801cf98 <strcpy>
 8014e36:	480f      	ldr	r0, [pc, #60]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e38:	f003 f87c 	bl	8017f34 <crs_strlen>
 8014e3c:	4a0d      	ldr	r2, [pc, #52]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e3e:	b283      	uxth	r3, r0
 8014e40:	2101      	movs	r1, #1
 8014e42:	2002      	movs	r0, #2
 8014e44:	f003 f8b4 	bl	8017fb0 <traceIF_itmPrint>
 8014e48:	480a      	ldr	r0, [pc, #40]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e4a:	f003 f873 	bl	8017f34 <crs_strlen>
 8014e4e:	4a09      	ldr	r2, [pc, #36]	; (8014e74 <CST_cellular_service_task+0x618>)
 8014e50:	b283      	uxth	r3, r0
 8014e52:	2101      	movs	r1, #1
 8014e54:	2002      	movs	r0, #2
 8014e56:	f003 fad1 	bl	80183fc <traceIF_uartPrint>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_REGISTERED,
 8014e5a:	2104      	movs	r1, #4
 8014e5c:	4a0c      	ldr	r2, [pc, #48]	; (8014e90 <CST_cellular_service_task+0x634>)
 8014e5e:	4807      	ldr	r0, [pc, #28]	; (8014e7c <CST_cellular_service_task+0x620>)
		cst_context.register_retry_tempo_count = 0U;
 8014e60:	81ec      	strh	r4, [r5, #14]
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_REGISTERED,
 8014e62:	f002 f83d 	bl	8016ee0 <CST_set_modem_state>
		CST_set_state(CST_NETWORK_STATUS_OK_STATE);
 8014e66:	2005      	movs	r0, #5
 8014e68:	f7ff f98e 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NETWORK_STATUS_OK_EVENT);
 8014e6c:	2105      	movs	r1, #5
 8014e6e:	e59a      	b.n	80149a6 <CST_cellular_service_task+0x14a>
 8014e70:	0802a71c 	.word	0x0802a71c
 8014e74:	20008ff8 	.word	0x20008ff8
 8014e78:	0802a572 	.word	0x0802a572
 8014e7c:	20008d7c 	.word	0x20008d7c
 8014e80:	0802a750 	.word	0x0802a750
 8014e84:	20008ad0 	.word	0x20008ad0
 8014e88:	2000023c 	.word	0x2000023c
 8014e8c:	20003f94 	.word	0x20003f94
 8014e90:	0802a770 	.word	0x0802a770
 8014e94:	0802a447 	.word	0x0802a447
 8014e98:	200002b3 	.word	0x200002b3
 8014e9c:	0802a78c 	.word	0x0802a78c
 8014ea0:	0802a7a2 	.word	0x0802a7a2
 8014ea4:	20003f84 	.word	0x20003f84
 8014ea8:	0802a7dd 	.word	0x0802a7dd
 8014eac:	0802a809 	.word	0x0802a809
 8014eb0:	0802a83d 	.word	0x0802a83d
	} else if (ret == CST_NOT_REGISTERED) {
 8014eb4:	2801      	cmp	r0, #1
 8014eb6:	d123      	bne.n	8014f00 <CST_cellular_service_task+0x6a4>
		cs_status = CST_set_signal_quality();
 8014eb8:	f001 fe6c 	bl	8016b94 <CST_set_signal_quality>
		if (cs_status != CELLULAR_OK) {
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	f43f acd3 	beq.w	8014868 <CST_cellular_service_task+0xc>
			(void) rtosalTimerStop(cst_network_status_timer_handle);
 8014ec2:	4bb3      	ldr	r3, [pc, #716]	; (8015190 <CST_cellular_service_task+0x934>)
 8014ec4:	6818      	ldr	r0, [r3, #0]
 8014ec6:	f002 ffb0 	bl	8017e2a <rtosalTimerStop>
			PRINT_CELLULAR_SERVICE(
 8014eca:	49b2      	ldr	r1, [pc, #712]	; (8015194 <CST_cellular_service_task+0x938>)
 8014ecc:	48b2      	ldr	r0, [pc, #712]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014ece:	f008 f863 	bl	801cf98 <strcpy>
 8014ed2:	48b1      	ldr	r0, [pc, #708]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014ed4:	f003 f82e 	bl	8017f34 <crs_strlen>
 8014ed8:	4621      	mov	r1, r4
 8014eda:	b283      	uxth	r3, r0
 8014edc:	4aae      	ldr	r2, [pc, #696]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014ede:	2002      	movs	r0, #2
 8014ee0:	f003 f866 	bl	8017fb0 <traceIF_itmPrint>
 8014ee4:	48ac      	ldr	r0, [pc, #688]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014ee6:	f003 f825 	bl	8017f34 <crs_strlen>
 8014eea:	4621      	mov	r1, r4
 8014eec:	4aaa      	ldr	r2, [pc, #680]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014eee:	b283      	uxth	r3, r0
			cst_context.register_retry_tempo_count = 0U;
 8014ef0:	2400      	movs	r4, #0
			PRINT_CELLULAR_SERVICE(
 8014ef2:	2002      	movs	r0, #2
 8014ef4:	f003 fa82 	bl	80183fc <traceIF_uartPrint>
			CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 8014ef8:	4aa8      	ldr	r2, [pc, #672]	; (801519c <CST_cellular_service_task+0x940>)
			cst_context.register_retry_tempo_count = 0U;
 8014efa:	81ec      	strh	r4, [r5, #14]
			CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 8014efc:	2103      	movs	r1, #3
 8014efe:	e6cc      	b.n	8014c9a <CST_cellular_service_task+0x43e>
	} else if (ret == CST_NET_UNKNOWN) {
 8014f00:	2803      	cmp	r0, #3
 8014f02:	f040 8257 	bne.w	80153b4 <CST_cellular_service_task+0xb58>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_NO_EVENT);
 8014f06:	210d      	movs	r1, #13
 8014f08:	e54d      	b.n	80149a6 <CST_cellular_service_task+0x14a>
	PRINT_CELLULAR_SERVICE(
 8014f0a:	49a5      	ldr	r1, [pc, #660]	; (80151a0 <CST_cellular_service_task+0x944>)
 8014f0c:	48a2      	ldr	r0, [pc, #648]	; (8015198 <CST_cellular_service_task+0x93c>)
	if (cst_nfmc_context.active == true) {
 8014f0e:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 80151e0 <CST_cellular_service_task+0x984>
	PRINT_CELLULAR_SERVICE(
 8014f12:	f008 f841 	bl	801cf98 <strcpy>
 8014f16:	48a0      	ldr	r0, [pc, #640]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f18:	f003 f80c 	bl	8017f34 <crs_strlen>
 8014f1c:	4a9e      	ldr	r2, [pc, #632]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f1e:	b283      	uxth	r3, r0
 8014f20:	2101      	movs	r1, #1
 8014f22:	2002      	movs	r0, #2
 8014f24:	f003 f844 	bl	8017fb0 <traceIF_itmPrint>
 8014f28:	489b      	ldr	r0, [pc, #620]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f2a:	f003 f803 	bl	8017f34 <crs_strlen>
 8014f2e:	4a9a      	ldr	r2, [pc, #616]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f30:	b283      	uxth	r3, r0
 8014f32:	2101      	movs	r1, #1
 8014f34:	2002      	movs	r0, #2
 8014f36:	f003 fa61 	bl	80183fc <traceIF_uartPrint>
	if (cst_nfmc_context.active == true) {
 8014f3a:	f898 3000 	ldrb.w	r3, [r8]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f43f ac92 	beq.w	8014868 <CST_cellular_service_task+0xc>
		cst_nfmc_context.nfmc_timer_on_going = true;
 8014f44:	2401      	movs	r4, #1
 8014f46:	f888 4001 	strb.w	r4, [r8, #1]
		(void) CST_modem_power_off();
 8014f4a:	f001 ffff 	bl	8016f4c <CST_modem_power_off>
		CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8014f4e:	4a95      	ldr	r2, [pc, #596]	; (80151a4 <CST_cellular_service_task+0x948>)
 8014f50:	4895      	ldr	r0, [pc, #596]	; (80151a8 <CST_cellular_service_task+0x94c>)
 8014f52:	21ff      	movs	r1, #255	; 0xff
 8014f54:	f001 ffc4 	bl	8016ee0 <CST_set_modem_state>
				cst_nfmc_context.tempo[cst_context.register_retry_tempo_count]);
 8014f58:	89ea      	ldrh	r2, [r5, #14]
		(void) rtosalTimerStart(cst_register_retry_timer_handle,
 8014f5a:	4b94      	ldr	r3, [pc, #592]	; (80151ac <CST_cellular_service_task+0x950>)
 8014f5c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8014f60:	6818      	ldr	r0, [r3, #0]
 8014f62:	6851      	ldr	r1, [r2, #4]
 8014f64:	f002 ff5f 	bl	8017e26 <rtosalTimerStart>
		PRINT_CELLULAR_SERVICE(
 8014f68:	89ea      	ldrh	r2, [r5, #14]
 8014f6a:	4991      	ldr	r1, [pc, #580]	; (80151b0 <CST_cellular_service_task+0x954>)
 8014f6c:	488a      	ldr	r0, [pc, #552]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f6e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8014f72:	4422      	add	r2, r4
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	f007 ff9f 	bl	801ceb8 <sprintf>
 8014f7a:	4887      	ldr	r0, [pc, #540]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f7c:	f002 ffda 	bl	8017f34 <crs_strlen>
 8014f80:	4a85      	ldr	r2, [pc, #532]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f82:	b283      	uxth	r3, r0
 8014f84:	4621      	mov	r1, r4
 8014f86:	2002      	movs	r0, #2
 8014f88:	f003 f812 	bl	8017fb0 <traceIF_itmPrint>
 8014f8c:	4882      	ldr	r0, [pc, #520]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f8e:	f002 ffd1 	bl	8017f34 <crs_strlen>
 8014f92:	4a81      	ldr	r2, [pc, #516]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014f94:	b283      	uxth	r3, r0
 8014f96:	4621      	mov	r1, r4
 8014f98:	2002      	movs	r0, #2
 8014f9a:	f003 fa2f 	bl	80183fc <traceIF_uartPrint>
		cst_context.register_retry_tempo_count++;
 8014f9e:	89eb      	ldrh	r3, [r5, #14]
 8014fa0:	4423      	add	r3, r4
 8014fa2:	b29b      	uxth	r3, r3
		if (cst_context.register_retry_tempo_count >= CA_NFMC_VALUES_MAX_NB) {
 8014fa4:	2b06      	cmp	r3, #6
			cst_context.register_retry_tempo_count = 0U;
 8014fa6:	bf88      	it	hi
 8014fa8:	2300      	movhi	r3, #0
 8014faa:	81eb      	strh	r3, [r5, #14]
 8014fac:	e45c      	b.n	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 8014fae:	2c11      	cmp	r4, #17
 8014fb0:	f000 82b9 	beq.w	8015526 <CST_cellular_service_task+0xcca>
 8014fb4:	f200 8089 	bhi.w	80150ca <CST_cellular_service_task+0x86e>
 8014fb8:	2c05      	cmp	r4, #5
 8014fba:	f47f ae1a 	bne.w	8014bf2 <CST_cellular_service_task+0x396>
	PRINT_CELLULAR_SERVICE("*********** CST_attach_modem_mngt ********\n\r")
 8014fbe:	497d      	ldr	r1, [pc, #500]	; (80151b4 <CST_cellular_service_task+0x958>)
 8014fc0:	4875      	ldr	r0, [pc, #468]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014fc2:	f007 ffe9 	bl	801cf98 <strcpy>
 8014fc6:	4874      	ldr	r0, [pc, #464]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014fc8:	f002 ffb4 	bl	8017f34 <crs_strlen>
 8014fcc:	4a72      	ldr	r2, [pc, #456]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014fce:	b283      	uxth	r3, r0
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	2002      	movs	r0, #2
 8014fd4:	f002 ffec 	bl	8017fb0 <traceIF_itmPrint>
 8014fd8:	486f      	ldr	r0, [pc, #444]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014fda:	f002 ffab 	bl	8017f34 <crs_strlen>
 8014fde:	4a6e      	ldr	r2, [pc, #440]	; (8015198 <CST_cellular_service_task+0x93c>)
 8014fe0:	b283      	uxth	r3, r0
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	2002      	movs	r0, #2
 8014fe6:	f003 fa09 	bl	80183fc <traceIF_uartPrint>
	(void) memset((void*) &reg_status, 0, sizeof(CS_RegistrationStatus_t));
 8014fea:	224e      	movs	r2, #78	; 0x4e
 8014fec:	2100      	movs	r1, #0
 8014fee:	a802      	add	r0, sp, #8
 8014ff0:	f007 ff32 	bl	801ce58 <memset>
	cs_status = osCDS_get_net_status(&reg_status);
 8014ff4:	a802      	add	r0, sp, #8
 8014ff6:	f7fe fe41 	bl	8013c7c <osCDS_get_net_status>
	if (cs_status == CELLULAR_OK) {
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d13d      	bne.n	801507a <CST_cellular_service_task+0x81e>
		if (((uint16_t) reg_status.optional_fields_presence
 8014ffe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015002:	07db      	lsls	r3, r3, #31
 8015004:	d539      	bpl.n	801507a <CST_cellular_service_task+0x81e>
			(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 8015006:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80151e4 <CST_cellular_service_task+0x988>
 801500a:	4a6b      	ldr	r2, [pc, #428]	; (80151b8 <CST_cellular_service_task+0x95c>)
 801500c:	f8b8 1000 	ldrh.w	r1, [r8]
 8015010:	4865      	ldr	r0, [pc, #404]	; (80151a8 <CST_cellular_service_task+0x94c>)
 8015012:	23dc      	movs	r3, #220	; 0xdc
 8015014:	f002 f92e 	bl	8017274 <dc_com_read>
			(void) memcpy(cst_cellular_info.mno_name, reg_status.operator_name,
 8015018:	ac05      	add	r4, sp, #20
 801501a:	4a68      	ldr	r2, [pc, #416]	; (80151bc <CST_cellular_service_task+0x960>)
 801501c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 8015020:	46a1      	mov	r9, r4
 8015022:	4623      	mov	r3, r4
 8015024:	cb03      	ldmia	r3!, {r0, r1}
 8015026:	4563      	cmp	r3, ip
 8015028:	6010      	str	r0, [r2, #0]
 801502a:	6051      	str	r1, [r2, #4]
 801502c:	461c      	mov	r4, r3
 801502e:	f102 0208 	add.w	r2, r2, #8
 8015032:	d1f6      	bne.n	8015022 <CST_cellular_service_task+0x7c6>
			cst_cellular_info.mno_name[CA_MNO_NAME_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 8015034:	4a60      	ldr	r2, [pc, #384]	; (80151b8 <CST_cellular_service_task+0x95c>)
			(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015036:	f8b8 1000 	ldrh.w	r1, [r8]
 801503a:	485b      	ldr	r0, [pc, #364]	; (80151a8 <CST_cellular_service_task+0x94c>)
			cst_cellular_info.mno_name[CA_MNO_NAME_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 801503c:	2300      	movs	r3, #0
 801503e:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
			cst_cellular_info.rt_state = DC_SERVICE_ON;
 8015042:	2307      	movs	r3, #7
 8015044:	7213      	strb	r3, [r2, #8]
			(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015046:	23dc      	movs	r3, #220	; 0xdc
 8015048:	f002 f8b0 	bl	80171ac <dc_com_write>
			PRINT_CELLULAR_SERVICE(" ->operator_name = %s\n\r",
 801504c:	495c      	ldr	r1, [pc, #368]	; (80151c0 <CST_cellular_service_task+0x964>)
 801504e:	4852      	ldr	r0, [pc, #328]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015050:	464a      	mov	r2, r9
 8015052:	f007 ff31 	bl	801ceb8 <sprintf>
 8015056:	4850      	ldr	r0, [pc, #320]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015058:	f002 ff6c 	bl	8017f34 <crs_strlen>
 801505c:	4a4e      	ldr	r2, [pc, #312]	; (8015198 <CST_cellular_service_task+0x93c>)
 801505e:	b283      	uxth	r3, r0
 8015060:	2101      	movs	r1, #1
 8015062:	2002      	movs	r0, #2
 8015064:	f002 ffa4 	bl	8017fb0 <traceIF_itmPrint>
 8015068:	484b      	ldr	r0, [pc, #300]	; (8015198 <CST_cellular_service_task+0x93c>)
 801506a:	f002 ff63 	bl	8017f34 <crs_strlen>
 801506e:	4a4a      	ldr	r2, [pc, #296]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015070:	b283      	uxth	r3, r0
 8015072:	2101      	movs	r1, #1
 8015074:	2002      	movs	r0, #2
 8015076:	f003 f9c1 	bl	80183fc <traceIF_uartPrint>
	cs_status = osCDS_get_attach_status(&cst_ctxt_attach_status);
 801507a:	f10d 0003 	add.w	r0, sp, #3
 801507e:	f7fe fec5 	bl	8013e0c <osCDS_get_attach_status>
	if (cs_status != CELLULAR_OK) {
 8015082:	b348      	cbz	r0, 80150d8 <CST_cellular_service_task+0x87c>
		PRINT_CELLULAR_SERVICE(
 8015084:	494f      	ldr	r1, [pc, #316]	; (80151c4 <CST_cellular_service_task+0x968>)
 8015086:	4844      	ldr	r0, [pc, #272]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015088:	f007 ff86 	bl	801cf98 <strcpy>
 801508c:	4842      	ldr	r0, [pc, #264]	; (8015198 <CST_cellular_service_task+0x93c>)
 801508e:	f002 ff51 	bl	8017f34 <crs_strlen>
 8015092:	4a41      	ldr	r2, [pc, #260]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015094:	b283      	uxth	r3, r0
 8015096:	2101      	movs	r1, #1
 8015098:	2002      	movs	r0, #2
 801509a:	f002 ff89 	bl	8017fb0 <traceIF_itmPrint>
 801509e:	483e      	ldr	r0, [pc, #248]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150a0:	f002 ff48 	bl	8017f34 <crs_strlen>
 80150a4:	4a3c      	ldr	r2, [pc, #240]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150a6:	b283      	uxth	r3, r0
 80150a8:	2101      	movs	r1, #1
 80150aa:	2002      	movs	r0, #2
 80150ac:	f003 f9a6 	bl	80183fc <traceIF_uartPrint>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 80150b0:	4a3a      	ldr	r2, [pc, #232]	; (801519c <CST_cellular_service_task+0x940>)
 80150b2:	483d      	ldr	r0, [pc, #244]	; (80151a8 <CST_cellular_service_task+0x94c>)
 80150b4:	2103      	movs	r1, #3
 80150b6:	f001 ff13 	bl	8016ee0 <CST_set_modem_state>
		CST_config_fail(((uint8_t*) "CS_get_attach_status FAIL"),
 80150ba:	4a43      	ldr	r2, [pc, #268]	; (80151c8 <CST_cellular_service_task+0x96c>)
 80150bc:	4843      	ldr	r0, [pc, #268]	; (80151cc <CST_cellular_service_task+0x970>)
 80150be:	2305      	movs	r3, #5
 80150c0:	2106      	movs	r1, #6
		CST_config_fail(((uint8_t*) "CST_modem_reboot_mngt"),
 80150c2:	f000 fdab 	bl	8015c1c <CST_config_fail>
 80150c6:	f7ff bbcf 	b.w	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 80150ca:	2c15      	cmp	r4, #21
 80150cc:	f47f abcc 	bne.w	8014868 <CST_cellular_service_task+0xc>
		CST_fota_start_event_mngt();
 80150d0:	f7ff f99c 	bl	801440c <CST_fota_start_event_mngt>
		break;
 80150d4:	f7ff bbc8 	b.w	8014868 <CST_cellular_service_task+0xc>
		if (cst_ctxt_attach_status == CS_PS_ATTACHED) {
 80150d8:	f89d 8003 	ldrb.w	r8, [sp, #3]
 80150dc:	f1b8 0f01 	cmp.w	r8, #1
 80150e0:	d11f      	bne.n	8015122 <CST_cellular_service_task+0x8c6>
			PRINT_CELLULAR_SERVICE(
 80150e2:	493b      	ldr	r1, [pc, #236]	; (80151d0 <CST_cellular_service_task+0x974>)
 80150e4:	482c      	ldr	r0, [pc, #176]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150e6:	f007 ff57 	bl	801cf98 <strcpy>
 80150ea:	482b      	ldr	r0, [pc, #172]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150ec:	f002 ff22 	bl	8017f34 <crs_strlen>
 80150f0:	4a29      	ldr	r2, [pc, #164]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150f2:	b283      	uxth	r3, r0
 80150f4:	4641      	mov	r1, r8
 80150f6:	2002      	movs	r0, #2
 80150f8:	f002 ff5a 	bl	8017fb0 <traceIF_itmPrint>
 80150fc:	4826      	ldr	r0, [pc, #152]	; (8015198 <CST_cellular_service_task+0x93c>)
 80150fe:	f002 ff19 	bl	8017f34 <crs_strlen>
 8015102:	4a25      	ldr	r2, [pc, #148]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015104:	b283      	uxth	r3, r0
 8015106:	4641      	mov	r1, r8
 8015108:	2002      	movs	r0, #2
 801510a:	f003 f977 	bl	80183fc <traceIF_uartPrint>
			CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_REGISTERED,
 801510e:	2104      	movs	r1, #4
 8015110:	4a30      	ldr	r2, [pc, #192]	; (80151d4 <CST_cellular_service_task+0x978>)
 8015112:	4825      	ldr	r0, [pc, #148]	; (80151a8 <CST_cellular_service_task+0x94c>)
 8015114:	f001 fee4 	bl	8016ee0 <CST_set_modem_state>
			CST_set_state(CST_MODEM_REGISTERED_STATE);
 8015118:	2006      	movs	r0, #6
 801511a:	f7ff f835 	bl	8014188 <CST_set_state>
			CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_ATTACHED_EVENT);
 801511e:	2106      	movs	r1, #6
 8015120:	e441      	b.n	80149a6 <CST_cellular_service_task+0x14a>
			PRINT_CELLULAR_SERVICE(
 8015122:	492d      	ldr	r1, [pc, #180]	; (80151d8 <CST_cellular_service_task+0x97c>)
 8015124:	481c      	ldr	r0, [pc, #112]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015126:	f007 ff37 	bl	801cf98 <strcpy>
 801512a:	481b      	ldr	r0, [pc, #108]	; (8015198 <CST_cellular_service_task+0x93c>)
 801512c:	f002 ff02 	bl	8017f34 <crs_strlen>
 8015130:	4a19      	ldr	r2, [pc, #100]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015132:	b283      	uxth	r3, r0
 8015134:	2101      	movs	r1, #1
 8015136:	2002      	movs	r0, #2
 8015138:	f002 ff3a 	bl	8017fb0 <traceIF_itmPrint>
 801513c:	4816      	ldr	r0, [pc, #88]	; (8015198 <CST_cellular_service_task+0x93c>)
 801513e:	f002 fef9 	bl	8017f34 <crs_strlen>
 8015142:	4a15      	ldr	r2, [pc, #84]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015144:	b283      	uxth	r3, r0
 8015146:	2101      	movs	r1, #1
 8015148:	2002      	movs	r0, #2
 801514a:	f003 f957 	bl	80183fc <traceIF_uartPrint>
			CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 801514e:	4a13      	ldr	r2, [pc, #76]	; (801519c <CST_cellular_service_task+0x940>)
 8015150:	4815      	ldr	r0, [pc, #84]	; (80151a8 <CST_cellular_service_task+0x94c>)
 8015152:	2103      	movs	r1, #3
 8015154:	f001 fec4 	bl	8016ee0 <CST_set_modem_state>
			PRINT_CELLULAR_SERVICE(
 8015158:	4920      	ldr	r1, [pc, #128]	; (80151dc <CST_cellular_service_task+0x980>)
 801515a:	480f      	ldr	r0, [pc, #60]	; (8015198 <CST_cellular_service_task+0x93c>)
 801515c:	f007 ff1c 	bl	801cf98 <strcpy>
 8015160:	480d      	ldr	r0, [pc, #52]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015162:	f002 fee7 	bl	8017f34 <crs_strlen>
 8015166:	4a0c      	ldr	r2, [pc, #48]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015168:	b283      	uxth	r3, r0
 801516a:	2101      	movs	r1, #1
 801516c:	2002      	movs	r0, #2
 801516e:	f002 ff1f 	bl	8017fb0 <traceIF_itmPrint>
 8015172:	4809      	ldr	r0, [pc, #36]	; (8015198 <CST_cellular_service_task+0x93c>)
 8015174:	f002 fede 	bl	8017f34 <crs_strlen>
 8015178:	4a07      	ldr	r2, [pc, #28]	; (8015198 <CST_cellular_service_task+0x93c>)
 801517a:	b283      	uxth	r3, r0
 801517c:	2101      	movs	r1, #1
 801517e:	2002      	movs	r0, #2
 8015180:	f003 f93c 	bl	80183fc <traceIF_uartPrint>
	CST_set_state(CST_WAITING_FOR_SIGNAL_QUALITY_OK_STATE);
 8015184:	2003      	movs	r0, #3
 8015186:	f7fe ffff 	bl	8014188 <CST_set_state>
}
 801518a:	f7ff bb6d 	b.w	8014868 <CST_cellular_service_task+0xc>
 801518e:	bf00      	nop
 8015190:	20003f84 	.word	0x20003f84
 8015194:	0802a860 	.word	0x0802a860
 8015198:	20008ff8 	.word	0x20008ff8
 801519c:	0802a447 	.word	0x0802a447
 80151a0:	0802a890 	.word	0x0802a890
 80151a4:	0802a3eb 	.word	0x0802a3eb
 80151a8:	20008d7c 	.word	0x20008d7c
 80151ac:	20003f90 	.word	0x20003f90
 80151b0:	0802a8c8 	.word	0x0802a8c8
 80151b4:	0802a90b 	.word	0x0802a90b
 80151b8:	20008c80 	.word	0x20008c80
 80151bc:	20008c9b 	.word	0x20008c9b
 80151c0:	0802a938 	.word	0x0802a938
 80151c4:	0802a950 	.word	0x0802a950
 80151c8:	200002b1 	.word	0x200002b1
 80151cc:	0802a982 	.word	0x0802a982
 80151d0:	0802a99c 	.word	0x0802a99c
 80151d4:	0802a770 	.word	0x0802a770
 80151d8:	0802a9cc 	.word	0x0802a9cc
 80151dc:	0802a9fe 	.word	0x0802a9fe
 80151e0:	20008ab0 	.word	0x20008ab0
 80151e4:	20000240 	.word	0x20000240
	switch (autom_event) {
 80151e8:	2c06      	cmp	r4, #6
 80151ea:	d019      	beq.n	8015220 <CST_cellular_service_task+0x9c4>
 80151ec:	3c0f      	subs	r4, #15
 80151ee:	b2a3      	uxth	r3, r4
 80151f0:	2b06      	cmp	r3, #6
 80151f2:	f63f ab39 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 80151f6:	2c06      	cmp	r4, #6
 80151f8:	f63f ab36 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 80151fc:	a301      	add	r3, pc, #4	; (adr r3, 8015204 <CST_cellular_service_task+0x9a8>)
 80151fe:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8015202:	bf00      	nop
 8015204:	08014bf9 	.word	0x08014bf9
 8015208:	08014869 	.word	0x08014869
 801520c:	08015527 	.word	0x08015527
 8015210:	08014869 	.word	0x08014869
 8015214:	08014d91 	.word	0x08014d91
 8015218:	08014869 	.word	0x08014869
 801521c:	080150d1 	.word	0x080150d1
		CST_modem_activate_pdn_mngt();
 8015220:	f7ff f99e 	bl	8014560 <CST_modem_activate_pdn_mngt>
		break;
 8015224:	f7ff bb20 	b.w	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 8015228:	3c07      	subs	r4, #7
 801522a:	2c0e      	cmp	r4, #14
 801522c:	f63f ab1c 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 8015230:	a301      	add	r3, pc, #4	; (adr r3, 8015238 <CST_cellular_service_task+0x9dc>)
 8015232:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8015236:	bf00      	nop
 8015238:	08015275 	.word	0x08015275
 801523c:	080152df 	.word	0x080152df
 8015240:	08015221 	.word	0x08015221
 8015244:	08014869 	.word	0x08014869
 8015248:	08014869 	.word	0x08014869
 801524c:	08014869 	.word	0x08014869
 8015250:	08014869 	.word	0x08014869
 8015254:	08014869 	.word	0x08014869
 8015258:	08014bf9 	.word	0x08014bf9
 801525c:	08014869 	.word	0x08014869
 8015260:	08015527 	.word	0x08015527
 8015264:	08014869 	.word	0x08014869
 8015268:	08014d91 	.word	0x08014d91
 801526c:	08014869 	.word	0x08014869
 8015270:	080150d1 	.word	0x080150d1
	cst_context.power_on_reset_count = 0U;
 8015274:	2400      	movs	r4, #0
	CST_set_state(CST_MODEM_DATA_READY_STATE);
 8015276:	2008      	movs	r0, #8
	cst_context.power_on_reset_count = 0U;
 8015278:	826c      	strh	r4, [r5, #18]
	cst_context.csq_reset_count = 0U;
 801527a:	82ac      	strh	r4, [r5, #20]
	cst_context.ppp_fail_count = 0U;
 801527c:	836c      	strh	r4, [r5, #26]
	(void) CST_get_dev_IP_address(&ip_addr_type, cs_ip_addr);
 801527e:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80155b8 <CST_cellular_service_task+0xd5c>
	cst_context.activate_pdn_reset_count = 0U;
 8015282:	75ac      	strb	r4, [r5, #22]
	cst_context.global_retry_count = 0U;
 8015284:	772c      	strb	r4, [r5, #28]
	CST_set_state(CST_MODEM_DATA_READY_STATE);
 8015286:	f7fe ff7f 	bl	8014188 <CST_set_state>
	CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_DATAREADY,
 801528a:	4ab7      	ldr	r2, [pc, #732]	; (8015568 <CST_cellular_service_task+0xd0c>)
 801528c:	48b7      	ldr	r0, [pc, #732]	; (801556c <CST_cellular_service_task+0xd10>)
 801528e:	2105      	movs	r1, #5
 8015290:	f001 fe26 	bl	8016ee0 <CST_set_modem_state>
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_NO_EVENT);
 8015294:	210d      	movs	r1, #13
 8015296:	4620      	mov	r0, r4
 8015298:	f7fe fece 	bl	8014038 <CST_send_message>
	(void) CST_get_dev_IP_address(&ip_addr_type, cs_ip_addr);
 801529c:	4641      	mov	r1, r8
 801529e:	f10d 0003 	add.w	r0, sp, #3
 80152a2:	f7ff fac3 	bl	801482c <CST_get_dev_IP_address>
	err = crc_get_ip_addr(&cs_ip_addr[1], cs_ip_addr, NULL);
 80152a6:	4622      	mov	r2, r4
 80152a8:	4641      	mov	r1, r8
 80152aa:	f108 0001 	add.w	r0, r8, #1
 80152ae:	f002 fdc0 	bl	8017e32 <crc_get_ip_addr>
	if (err == 0U) {
 80152b2:	b968      	cbnz	r0, 80152d0 <CST_cellular_service_task+0xa74>
				+ ((uint32_t) cs_ip_addr[2] << 16)
 80152b4:	f898 4002 	ldrb.w	r4, [r8, #2]
				+ ((uint32_t) cs_ip_addr[1] << 8)
 80152b8:	f898 3001 	ldrb.w	r3, [r8, #1]
				+ ((uint32_t) cs_ip_addr[2] << 16)
 80152bc:	0424      	lsls	r4, r4, #16
 80152be:	eb04 2403 	add.w	r4, r4, r3, lsl #8
		ip_addr.addr = (uint32_t) cs_ip_addr[0]
 80152c2:	f898 3000 	ldrb.w	r3, [r8]
				+ ((uint32_t) cs_ip_addr[2] << 16)
 80152c6:	441c      	add	r4, r3
				+ ((uint32_t) cs_ip_addr[3] << 24);
 80152c8:	f898 3003 	ldrb.w	r3, [r8, #3]
 80152cc:	eb04 6403 	add.w	r4, r4, r3, lsl #24
	CST_data_cache_cellular_info_set(DC_SERVICE_ON, &ip_addr);
 80152d0:	a902      	add	r1, sp, #8
 80152d2:	2007      	movs	r0, #7
 80152d4:	9402      	str	r4, [sp, #8]
 80152d6:	f000 fc4f 	bl	8015b78 <CST_data_cache_cellular_info_set>
}
 80152da:	f7ff bac5 	b.w	8014868 <CST_cellular_service_task+0xc>
		CST_pdn_event_mngt();
 80152de:	f7ff f9af 	bl	8014640 <CST_pdn_event_mngt>
		break;
 80152e2:	f7ff bac1 	b.w	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 80152e6:	3c08      	subs	r4, #8
 80152e8:	2c14      	cmp	r4, #20
 80152ea:	f63f aabd 	bhi.w	8014868 <CST_cellular_service_task+0xc>
 80152ee:	a301      	add	r3, pc, #4	; (adr r3, 80152f4 <CST_cellular_service_task+0xa98>)
 80152f0:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80152f4:	080152df 	.word	0x080152df
 80152f8:	08014869 	.word	0x08014869
 80152fc:	08015415 	.word	0x08015415
 8015300:	080153bf 	.word	0x080153bf
 8015304:	08014869 	.word	0x08014869
 8015308:	08014869 	.word	0x08014869
 801530c:	08014869 	.word	0x08014869
 8015310:	08015429 	.word	0x08015429
 8015314:	08014869 	.word	0x08014869
 8015318:	08015527 	.word	0x08015527
 801531c:	08014869 	.word	0x08014869
 8015320:	08015349 	.word	0x08015349
 8015324:	08014869 	.word	0x08014869
 8015328:	080150d1 	.word	0x080150d1
 801532c:	08014869 	.word	0x08014869
 8015330:	08014869 	.word	0x08014869
 8015334:	08014869 	.word	0x08014869
 8015338:	08014869 	.word	0x08014869
 801533c:	08014869 	.word	0x08014869
 8015340:	08014869 	.word	0x08014869
 8015344:	08015527 	.word	0x08015527
	ret = CST_get_network_status();
 8015348:	f001 fd40 	bl	8016dcc <CST_get_network_status>
	if (ret == CST_NET_REGISTERED) {
 801534c:	b928      	cbnz	r0, 801535a <CST_cellular_service_task+0xafe>
		CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_DATAREADY,
 801534e:	4a86      	ldr	r2, [pc, #536]	; (8015568 <CST_cellular_service_task+0xd0c>)
 8015350:	4886      	ldr	r0, [pc, #536]	; (801556c <CST_cellular_service_task+0xd10>)
 8015352:	2105      	movs	r1, #5
 8015354:	f001 fdc4 	bl	8016ee0 <CST_set_modem_state>
 8015358:	e5d5      	b.n	8014f06 <CST_cellular_service_task+0x6aa>
	} else if (ret == CST_NOT_REGISTERED) {
 801535a:	2801      	cmp	r0, #1
 801535c:	d10d      	bne.n	801537a <CST_cellular_service_task+0xb1e>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 801535e:	2100      	movs	r1, #0
 8015360:	2003      	movs	r0, #3
 8015362:	f000 fc09 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_state(CST_WAITING_FOR_NETWORK_STATUS_STATE);
 8015366:	2004      	movs	r0, #4
 8015368:	f7fe ff0e 	bl	8014188 <CST_set_state>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 801536c:	4a80      	ldr	r2, [pc, #512]	; (8015570 <CST_cellular_service_task+0xd14>)
 801536e:	2103      	movs	r1, #3
	CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8015370:	487e      	ldr	r0, [pc, #504]	; (801556c <CST_cellular_service_task+0xd10>)
 8015372:	f001 fdb5 	bl	8016ee0 <CST_set_modem_state>
}
 8015376:	f7ff ba77 	b.w	8014868 <CST_cellular_service_task+0xc>
	} else if (ret == CST_NET_UNKNOWN) {
 801537a:	2803      	cmp	r0, #3
 801537c:	f43f adc3 	beq.w	8014f06 <CST_cellular_service_task+0x6aa>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015380:	2100      	movs	r1, #0
 8015382:	2003      	movs	r0, #3
 8015384:	f000 fbf8 	bl	8015b78 <CST_data_cache_cellular_info_set>
		PRINT_CELLULAR_SERVICE(
 8015388:	497a      	ldr	r1, [pc, #488]	; (8015574 <CST_cellular_service_task+0xd18>)
 801538a:	487b      	ldr	r0, [pc, #492]	; (8015578 <CST_cellular_service_task+0xd1c>)
 801538c:	f007 fe04 	bl	801cf98 <strcpy>
 8015390:	4879      	ldr	r0, [pc, #484]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015392:	f002 fdcf 	bl	8017f34 <crs_strlen>
 8015396:	4a78      	ldr	r2, [pc, #480]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015398:	b283      	uxth	r3, r0
 801539a:	2101      	movs	r1, #1
 801539c:	2002      	movs	r0, #2
 801539e:	f002 fe07 	bl	8017fb0 <traceIF_itmPrint>
 80153a2:	4875      	ldr	r0, [pc, #468]	; (8015578 <CST_cellular_service_task+0xd1c>)
 80153a4:	f002 fdc6 	bl	8017f34 <crs_strlen>
 80153a8:	4a73      	ldr	r2, [pc, #460]	; (8015578 <CST_cellular_service_task+0xd1c>)
 80153aa:	b283      	uxth	r3, r0
 80153ac:	2101      	movs	r1, #1
 80153ae:	2002      	movs	r0, #2
 80153b0:	f003 f824 	bl	80183fc <traceIF_uartPrint>
		CST_config_fail(((uint8_t*) "CST_network_status_test_mngt"),
 80153b4:	2305      	movs	r3, #5
 80153b6:	4a71      	ldr	r2, [pc, #452]	; (801557c <CST_cellular_service_task+0xd20>)
 80153b8:	4871      	ldr	r0, [pc, #452]	; (8015580 <CST_cellular_service_task+0xd24>)
 80153ba:	4619      	mov	r1, r3
 80153bc:	e681      	b.n	80150c2 <CST_cellular_service_task+0x866>
	if (CST_polling_active == true) {
 80153be:	4b71      	ldr	r3, [pc, #452]	; (8015584 <CST_cellular_service_task+0xd28>)
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	f43f aa50 	beq.w	8014868 <CST_cellular_service_task+0xc>
		if (CST_polling_on_going == false) {
 80153c8:	4c6f      	ldr	r4, [pc, #444]	; (8015588 <CST_cellular_service_task+0xd2c>)
 80153ca:	f894 8000 	ldrb.w	r8, [r4]
 80153ce:	f1b8 0f00 	cmp.w	r8, #0
 80153d2:	d107      	bne.n	80153e4 <CST_cellular_service_task+0xb88>
			CST_polling_on_going = true;
 80153d4:	2301      	movs	r3, #1
 80153d6:	7023      	strb	r3, [r4, #0]
			(void) CST_set_signal_quality();
 80153d8:	f001 fbdc 	bl	8016b94 <CST_set_signal_quality>
			CST_polling_on_going = false;
 80153dc:	f884 8000 	strb.w	r8, [r4]
 80153e0:	f7ff ba42 	b.w	8014868 <CST_cellular_service_task+0xc>
			PRINT_CELLULAR_SERVICE(
 80153e4:	4969      	ldr	r1, [pc, #420]	; (801558c <CST_cellular_service_task+0xd30>)
			PRINT_CELLULAR_SERVICE(
 80153e6:	4864      	ldr	r0, [pc, #400]	; (8015578 <CST_cellular_service_task+0xd1c>)
 80153e8:	f007 fdd6 	bl	801cf98 <strcpy>
 80153ec:	4862      	ldr	r0, [pc, #392]	; (8015578 <CST_cellular_service_task+0xd1c>)
 80153ee:	f002 fda1 	bl	8017f34 <crs_strlen>
 80153f2:	4a61      	ldr	r2, [pc, #388]	; (8015578 <CST_cellular_service_task+0xd1c>)
 80153f4:	b283      	uxth	r3, r0
 80153f6:	2101      	movs	r1, #1
 80153f8:	2002      	movs	r0, #2
 80153fa:	f002 fdd9 	bl	8017fb0 <traceIF_itmPrint>
 80153fe:	485e      	ldr	r0, [pc, #376]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015400:	f002 fd98 	bl	8017f34 <crs_strlen>
 8015404:	4a5c      	ldr	r2, [pc, #368]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015406:	b283      	uxth	r3, r0
 8015408:	2101      	movs	r1, #1
 801540a:	2002      	movs	r0, #2
 801540c:	f002 fff6 	bl	80183fc <traceIF_uartPrint>
 8015410:	f7ff ba2a 	b.w	8014868 <CST_cellular_service_task+0xc>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015414:	2100      	movs	r1, #0
 8015416:	2003      	movs	r0, #3
 8015418:	f000 fbae 	bl	8015b78 <CST_data_cache_cellular_info_set>
		CST_set_modem_state(&dc_com_db, CA_MODEM_NETWORK_SEARCHING,
 801541c:	4a54      	ldr	r2, [pc, #336]	; (8015570 <CST_cellular_service_task+0xd14>)
 801541e:	4853      	ldr	r0, [pc, #332]	; (801556c <CST_cellular_service_task+0xd10>)
 8015420:	2103      	movs	r1, #3
 8015422:	f001 fd5d 	bl	8016ee0 <CST_set_modem_state>
 8015426:	e6ad      	b.n	8015184 <CST_cellular_service_task+0x928>
	if (cst_cellular_params.target_state != DC_TARGET_STATE_FULL) {
 8015428:	4b59      	ldr	r3, [pc, #356]	; (8015590 <CST_cellular_service_task+0xd34>)
 801542a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 801542e:	2b02      	cmp	r3, #2
 8015430:	f43f aa1a 	beq.w	8014868 <CST_cellular_service_task+0xc>
		CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015434:	2100      	movs	r1, #0
 8015436:	2003      	movs	r0, #3
 8015438:	f000 fb9e 	bl	8015b78 <CST_data_cache_cellular_info_set>
 801543c:	f7ff bbdc 	b.w	8014bf8 <CST_cellular_service_task+0x39c>
	switch (autom_event) {
 8015440:	2c0f      	cmp	r4, #15
 8015442:	d007      	beq.n	8015454 <CST_cellular_service_task+0xbf8>
 8015444:	2c11      	cmp	r4, #17
 8015446:	d06e      	beq.n	8015526 <CST_cellular_service_task+0xcca>
 8015448:	2c01      	cmp	r4, #1
 801544a:	f47f aa0d 	bne.w	8014868 <CST_cellular_service_task+0xc>
	CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 801544e:	4a51      	ldr	r2, [pc, #324]	; (8015594 <CST_cellular_service_task+0xd38>)
 8015450:	21ff      	movs	r1, #255	; 0xff
 8015452:	e78d      	b.n	8015370 <CST_cellular_service_task+0xb14>
	PRINT_CELLULAR_SERVICE("*********** CST_init_state_mngt ********\n\r")
 8015454:	4950      	ldr	r1, [pc, #320]	; (8015598 <CST_cellular_service_task+0xd3c>)
 8015456:	4848      	ldr	r0, [pc, #288]	; (8015578 <CST_cellular_service_task+0xd1c>)
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8015458:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80155bc <CST_cellular_service_task+0xd60>
 801545c:	4c4c      	ldr	r4, [pc, #304]	; (8015590 <CST_cellular_service_task+0xd34>)
	PRINT_CELLULAR_SERVICE("*********** CST_init_state_mngt ********\n\r")
 801545e:	f007 fd9b 	bl	801cf98 <strcpy>
 8015462:	4845      	ldr	r0, [pc, #276]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015464:	f002 fd66 	bl	8017f34 <crs_strlen>
 8015468:	4a43      	ldr	r2, [pc, #268]	; (8015578 <CST_cellular_service_task+0xd1c>)
 801546a:	b283      	uxth	r3, r0
 801546c:	2101      	movs	r1, #1
 801546e:	2002      	movs	r0, #2
 8015470:	f002 fd9e 	bl	8017fb0 <traceIF_itmPrint>
 8015474:	4840      	ldr	r0, [pc, #256]	; (8015578 <CST_cellular_service_task+0xd1c>)
 8015476:	f002 fd5d 	bl	8017f34 <crs_strlen>
 801547a:	4a3f      	ldr	r2, [pc, #252]	; (8015578 <CST_cellular_service_task+0xd1c>)
 801547c:	b283      	uxth	r3, r0
 801547e:	2101      	movs	r1, #1
 8015480:	2002      	movs	r0, #2
 8015482:	f002 ffbb 	bl	80183fc <traceIF_uartPrint>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8015486:	f8b8 1000 	ldrh.w	r1, [r8]
 801548a:	4838      	ldr	r0, [pc, #224]	; (801556c <CST_cellular_service_task+0xd10>)
 801548c:	230c      	movs	r3, #12
 801548e:	aa02      	add	r2, sp, #8
 8015490:	f001 fef0 	bl	8017274 <dc_com_read>
 8015494:	b168      	cbz	r0, 80154b2 <CST_cellular_service_task+0xc56>
		target_state.target_state = cst_cellular_params.target_state;
 8015496:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 801549a:	f88d 3012 	strb.w	r3, [sp, #18]
		target_state.rt_state = DC_SERVICE_ON;
 801549e:	2307      	movs	r3, #7
 80154a0:	f8ad 3010 	strh.w	r3, [sp, #16]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 80154a4:	f8b8 1000 	ldrh.w	r1, [r8]
 80154a8:	4830      	ldr	r0, [pc, #192]	; (801556c <CST_cellular_service_task+0xd10>)
 80154aa:	230c      	movs	r3, #12
 80154ac:	aa02      	add	r2, sp, #8
 80154ae:	f001 fe7d 	bl	80171ac <dc_com_write>
	if (cst_cellular_params.target_state == DC_TARGET_STATE_OFF) {
 80154b2:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 80154b6:	b91b      	cbnz	r3, 80154c0 <CST_cellular_service_task+0xc64>
		(void) CST_modem_power_off();
 80154b8:	f001 fd48 	bl	8016f4c <CST_modem_power_off>
 80154bc:	f7ff b9d4 	b.w	8014868 <CST_cellular_service_task+0xc>
	} else if (cst_cellular_params.target_state == DC_TARGET_STATE_MODEM_ONLY) {
 80154c0:	2b03      	cmp	r3, #3
 80154c2:	d103      	bne.n	80154cc <CST_cellular_service_task+0xc70>
		(void) osCDS_power_on();
 80154c4:	f7fe fc2e 	bl	8013d24 <osCDS_power_on>
 80154c8:	f7ff b9ce 	b.w	8014868 <CST_cellular_service_task+0xc>
		if (cst_nfmc_context.nfmc_timer_on_going == false) {
 80154cc:	4b33      	ldr	r3, [pc, #204]	; (801559c <CST_cellular_service_task+0xd40>)
 80154ce:	785b      	ldrb	r3, [r3, #1]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f47f a9c9 	bne.w	8014868 <CST_cellular_service_task+0xc>
			(void) CS_subscribe_sim_event(CST_SimEventsCallback);
 80154d6:	4832      	ldr	r0, [pc, #200]	; (80155a0 <CST_cellular_service_task+0xd44>)
 80154d8:	f7fa fb70 	bl	800fbbc <CS_subscribe_sim_event>
			cs_status = osCDS_power_on();
 80154dc:	f7fe fc22 	bl	8013d24 <osCDS_power_on>
			if (cs_status != CELLULAR_OK) {
 80154e0:	b120      	cbz	r0, 80154ec <CST_cellular_service_task+0xc90>
				CST_config_fail(((uint8_t*) "CST_cmd"), CST_MODEM_POWER_ON_FAIL,
 80154e2:	4a30      	ldr	r2, [pc, #192]	; (80155a4 <CST_cellular_service_task+0xd48>)
 80154e4:	4830      	ldr	r0, [pc, #192]	; (80155a8 <CST_cellular_service_task+0xd4c>)
 80154e6:	2305      	movs	r3, #5
 80154e8:	2101      	movs	r1, #1
 80154ea:	e5ea      	b.n	80150c2 <CST_cellular_service_task+0x866>
				(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 80154ec:	4c2f      	ldr	r4, [pc, #188]	; (80155ac <CST_cellular_service_task+0xd50>)
 80154ee:	4a30      	ldr	r2, [pc, #192]	; (80155b0 <CST_cellular_service_task+0xd54>)
 80154f0:	8821      	ldrh	r1, [r4, #0]
 80154f2:	481e      	ldr	r0, [pc, #120]	; (801556c <CST_cellular_service_task+0xd10>)
 80154f4:	23dc      	movs	r3, #220	; 0xdc
 80154f6:	f001 febd 	bl	8017274 <dc_com_read>
				cst_cellular_info.rt_state = DC_SERVICE_RUN;
 80154fa:	4a2d      	ldr	r2, [pc, #180]	; (80155b0 <CST_cellular_service_task+0xd54>)
				(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 80154fc:	8821      	ldrh	r1, [r4, #0]
 80154fe:	481b      	ldr	r0, [pc, #108]	; (801556c <CST_cellular_service_task+0xd10>)
				cst_cellular_info.rt_state = DC_SERVICE_RUN;
 8015500:	2306      	movs	r3, #6
 8015502:	7213      	strb	r3, [r2, #8]
				(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015504:	23dc      	movs	r3, #220	; 0xdc
 8015506:	f001 fe51 	bl	80171ac <dc_com_write>
				CST_set_modem_state(&dc_com_db, CA_MODEM_STATE_POWERED_ON,
 801550a:	4a2a      	ldr	r2, [pc, #168]	; (80155b4 <CST_cellular_service_task+0xd58>)
 801550c:	4817      	ldr	r0, [pc, #92]	; (801556c <CST_cellular_service_task+0xd10>)
 801550e:	2101      	movs	r1, #1
 8015510:	f001 fce6 	bl	8016ee0 <CST_set_modem_state>
		CST_modem_sim_init();
 8015514:	f000 fc6e 	bl	8015df4 <CST_modem_sim_init>
 8015518:	f7ff b9a6 	b.w	8014868 <CST_cellular_service_task+0xc>
	switch (autom_event) {
 801551c:	2c0f      	cmp	r4, #15
 801551e:	d006      	beq.n	801552e <CST_cellular_service_task+0xcd2>
	switch (autom_event) {
 8015520:	2c11      	cmp	r4, #17
 8015522:	f47f a9a1 	bne.w	8014868 <CST_cellular_service_task+0xc>
		CST_reboot_modem_event_mngt();
 8015526:	f7fe fe67 	bl	80141f8 <CST_reboot_modem_event_mngt>
		break;
 801552a:	f7ff b99d 	b.w	8014868 <CST_cellular_service_task+0xc>
	if (cst_cellular_params.target_state == DC_TARGET_STATE_FULL) {
 801552e:	4b18      	ldr	r3, [pc, #96]	; (8015590 <CST_cellular_service_task+0xd34>)
 8015530:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
 8015534:	2c02      	cmp	r4, #2
 8015536:	d0ed      	beq.n	8015514 <CST_cellular_service_task+0xcb8>
	} else if (cst_cellular_params.target_state == DC_TARGET_STATE_OFF) {
 8015538:	b99c      	cbnz	r4, 8015562 <CST_cellular_service_task+0xd06>
		(void) CST_modem_power_off();
 801553a:	f001 fd07 	bl	8016f4c <CST_modem_power_off>
		CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 801553e:	480b      	ldr	r0, [pc, #44]	; (801556c <CST_cellular_service_task+0xd10>)
 8015540:	4a14      	ldr	r2, [pc, #80]	; (8015594 <CST_cellular_service_task+0xd38>)
 8015542:	21ff      	movs	r1, #255	; 0xff
 8015544:	f001 fccc 	bl	8016ee0 <CST_set_modem_state>
		CST_set_state(CST_MODEM_OFF_STATE);
 8015548:	200e      	movs	r0, #14
		CST_set_state(CST_MODEM_INIT_STATE);
 801554a:	f7fe fe1d 	bl	8014188 <CST_set_state>
		CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_INIT_EVENT);
 801554e:	2101      	movs	r1, #1
 8015550:	f7ff ba29 	b.w	80149a6 <CST_cellular_service_task+0x14a>
	switch (autom_event) {
 8015554:	2c16      	cmp	r4, #22
 8015556:	d033      	beq.n	80155c0 <CST_cellular_service_task+0xd64>
 8015558:	2c17      	cmp	r4, #23
 801555a:	d06d      	beq.n	8015638 <CST_cellular_service_task+0xddc>
 801555c:	2c11      	cmp	r4, #17
 801555e:	f47f a983 	bne.w	8014868 <CST_cellular_service_task+0xc>
		__NOP();
 8015562:	bf00      	nop
		break;
 8015564:	f7ff b980 	b.w	8014868 <CST_cellular_service_task+0xc>
 8015568:	0802aa31 	.word	0x0802aa31
 801556c:	20008d7c 	.word	0x20008d7c
 8015570:	0802a447 	.word	0x0802a447
 8015574:	0802a462 	.word	0x0802a462
 8015578:	20008ff8 	.word	0x20008ff8
 801557c:	200002b4 	.word	0x200002b4
 8015580:	0802a4a4 	.word	0x0802a4a4
 8015584:	20008aac 	.word	0x20008aac
 8015588:	20003f3c 	.word	0x20003f3c
 801558c:	0802aa4a 	.word	0x0802aa4a
 8015590:	20008ad0 	.word	0x20008ad0
 8015594:	0802a3eb 	.word	0x0802a3eb
 8015598:	0802a6b4 	.word	0x0802a6b4
 801559c:	20008ab0 	.word	0x20008ab0
 80155a0:	0801426d 	.word	0x0801426d
 80155a4:	200002ae 	.word	0x200002ae
 80155a8:	0802a6df 	.word	0x0802a6df
 80155ac:	20000240 	.word	0x20000240
 80155b0:	20008c80 	.word	0x20008c80
 80155b4:	0802a572 	.word	0x0802a572
 80155b8:	20003f3d 	.word	0x20003f3d
 80155bc:	2000024a 	.word	0x2000024a
	(void) rtosalTimerStop(cst_fota_timer_handle);
 80155c0:	4b78      	ldr	r3, [pc, #480]	; (80157a4 <CST_cellular_service_task+0xf48>)
 80155c2:	6818      	ldr	r0, [r3, #0]
 80155c4:	f002 fc31 	bl	8017e2a <rtosalTimerStop>
	PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_FOTA_END\n\r")
 80155c8:	4977      	ldr	r1, [pc, #476]	; (80157a8 <CST_cellular_service_task+0xf4c>)
 80155ca:	4878      	ldr	r0, [pc, #480]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155cc:	f007 fce4 	bl	801cf98 <strcpy>
 80155d0:	4876      	ldr	r0, [pc, #472]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155d2:	f002 fcaf 	bl	8017f34 <crs_strlen>
 80155d6:	4a75      	ldr	r2, [pc, #468]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155d8:	b283      	uxth	r3, r0
 80155da:	2101      	movs	r1, #1
 80155dc:	2002      	movs	r0, #2
 80155de:	f002 fce7 	bl	8017fb0 <traceIF_itmPrint>
 80155e2:	4872      	ldr	r0, [pc, #456]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155e4:	f002 fca6 	bl	8017f34 <crs_strlen>
 80155e8:	4a70      	ldr	r2, [pc, #448]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155ea:	b283      	uxth	r3, r0
 80155ec:	2101      	movs	r1, #1
 80155ee:	2002      	movs	r0, #2
 80155f0:	f002 ff04 	bl	80183fc <traceIF_uartPrint>
	PRINT_CELLULAR_SERVICE("TRIGGER PLATFORM REBOOT AFTER FOTA UPDATE ...\n\r")
 80155f4:	496e      	ldr	r1, [pc, #440]	; (80157b0 <CST_cellular_service_task+0xf54>)
 80155f6:	486d      	ldr	r0, [pc, #436]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155f8:	f007 fcce 	bl	801cf98 <strcpy>
 80155fc:	486b      	ldr	r0, [pc, #428]	; (80157ac <CST_cellular_service_task+0xf50>)
 80155fe:	f002 fc99 	bl	8017f34 <crs_strlen>
 8015602:	4a6a      	ldr	r2, [pc, #424]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015604:	b283      	uxth	r3, r0
 8015606:	2101      	movs	r1, #1
 8015608:	2002      	movs	r0, #2
 801560a:	f002 fcd1 	bl	8017fb0 <traceIF_itmPrint>
 801560e:	4867      	ldr	r0, [pc, #412]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015610:	f002 fc90 	bl	8017f34 <crs_strlen>
 8015614:	4a65      	ldr	r2, [pc, #404]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015616:	b283      	uxth	r3, r0
 8015618:	2101      	movs	r1, #1
 801561a:	2002      	movs	r0, #2
 801561c:	f002 feee 	bl	80183fc <traceIF_uartPrint>
	CST_set_modem_state(&dc_com_db, CA_MODEM_REBOOTING,
 8015620:	4a64      	ldr	r2, [pc, #400]	; (80157b4 <CST_cellular_service_task+0xf58>)
 8015622:	4865      	ldr	r0, [pc, #404]	; (80157b8 <CST_cellular_service_task+0xf5c>)
 8015624:	2107      	movs	r1, #7
 8015626:	f001 fc5b 	bl	8016ee0 <CST_set_modem_state>
	ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 3, ERROR_FATAL);
 801562a:	2203      	movs	r2, #3
 801562c:	4611      	mov	r1, r2
	ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 4, ERROR_FATAL);
 801562e:	2002      	movs	r0, #2
 8015630:	f001 fe84 	bl	801733c <ERROR_Handler>
}
 8015634:	f7ff b918 	b.w	8014868 <CST_cellular_service_task+0xc>
	PRINT_CELLULAR_SERVICE("CST FOTA FAIL : Timeout expired RESTART\n\r")
 8015638:	4960      	ldr	r1, [pc, #384]	; (80157bc <CST_cellular_service_task+0xf60>)
 801563a:	485c      	ldr	r0, [pc, #368]	; (80157ac <CST_cellular_service_task+0xf50>)
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 801563c:	4c60      	ldr	r4, [pc, #384]	; (80157c0 <CST_cellular_service_task+0xf64>)
	PRINT_CELLULAR_SERVICE("CST FOTA FAIL : Timeout expired RESTART\n\r")
 801563e:	f007 fcab 	bl	801cf98 <strcpy>
 8015642:	485a      	ldr	r0, [pc, #360]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015644:	f002 fc76 	bl	8017f34 <crs_strlen>
 8015648:	4a58      	ldr	r2, [pc, #352]	; (80157ac <CST_cellular_service_task+0xf50>)
 801564a:	b283      	uxth	r3, r0
 801564c:	2101      	movs	r1, #1
 801564e:	2002      	movs	r0, #2
 8015650:	f002 fcae 	bl	8017fb0 <traceIF_itmPrint>
 8015654:	4855      	ldr	r0, [pc, #340]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015656:	f002 fc6d 	bl	8017f34 <crs_strlen>
 801565a:	4a54      	ldr	r2, [pc, #336]	; (80157ac <CST_cellular_service_task+0xf50>)
 801565c:	b283      	uxth	r3, r0
 801565e:	2101      	movs	r1, #1
 8015660:	2002      	movs	r0, #2
 8015662:	f002 fecb 	bl	80183fc <traceIF_uartPrint>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 8015666:	4a57      	ldr	r2, [pc, #348]	; (80157c4 <CST_cellular_service_task+0xf68>)
 8015668:	8821      	ldrh	r1, [r4, #0]
 801566a:	4853      	ldr	r0, [pc, #332]	; (80157b8 <CST_cellular_service_task+0xf5c>)
 801566c:	23dc      	movs	r3, #220	; 0xdc
 801566e:	f001 fe01 	bl	8017274 <dc_com_read>
	cst_cellular_info.modem_state = CA_MODEM_REBOOTING;
 8015672:	4a54      	ldr	r2, [pc, #336]	; (80157c4 <CST_cellular_service_task+0xf68>)
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015674:	8821      	ldrh	r1, [r4, #0]
 8015676:	4850      	ldr	r0, [pc, #320]	; (80157b8 <CST_cellular_service_task+0xf5c>)
	cst_cellular_info.modem_state = CA_MODEM_REBOOTING;
 8015678:	2307      	movs	r3, #7
 801567a:	7253      	strb	r3, [r2, #9]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 801567c:	23dc      	movs	r3, #220	; 0xdc
 801567e:	f001 fd95 	bl	80171ac <dc_com_write>
	ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 4, ERROR_FATAL);
 8015682:	2203      	movs	r2, #3
 8015684:	2104      	movs	r1, #4
 8015686:	e7d2      	b.n	801562e <CST_cellular_service_task+0xdd2>
	switch (autom_event) {
 8015688:	2c10      	cmp	r4, #16
 801568a:	f47f a8ed 	bne.w	8014868 <CST_cellular_service_task+0xc>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 801568e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80157d8 <CST_cellular_service_task+0xf7c>
 8015692:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80157dc <CST_cellular_service_task+0xf80>
 8015696:	4848      	ldr	r0, [pc, #288]	; (80157b8 <CST_cellular_service_task+0xf5c>)
 8015698:	f8b8 1000 	ldrh.w	r1, [r8]
 801569c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80156a0:	464a      	mov	r2, r9
 80156a2:	f001 fde7 	bl	8017274 <dc_com_read>
	cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged = false;
 80156a6:	7c2a      	ldrb	r2, [r5, #16]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 80156a8:	f8b8 1000 	ldrh.w	r1, [r8]
 80156ac:	4842      	ldr	r0, [pc, #264]	; (80157b8 <CST_cellular_service_task+0xf5c>)
	cst_cellular_params.rt_state = DC_SERVICE_ON;
 80156ae:	2307      	movs	r3, #7
 80156b0:	f889 3008 	strb.w	r3, [r9, #8]
	cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnChanged = false;
 80156b4:	2368      	movs	r3, #104	; 0x68
 80156b6:	fb02 3303 	mla	r3, r2, r3, r3
 80156ba:	444b      	add	r3, r9
 80156bc:	2400      	movs	r4, #0
 80156be:	725c      	strb	r4, [r3, #9]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG,
 80156c0:	464a      	mov	r2, r9
 80156c2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80156c6:	f001 fd71 	bl	80171ac <dc_com_write>
	CST_set_state(CST_MODEM_RESET_STATE);
 80156ca:	200c      	movs	r0, #12
 80156cc:	f7fe fd5c 	bl	8014188 <CST_set_state>
	CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_RESET_EVENT);
 80156d0:	2118      	movs	r1, #24
 80156d2:	f7ff b968 	b.w	80149a6 <CST_cellular_service_task+0x14a>
	PRINT_CELLULAR_SERVICE("*********** CST_modem_reset_mngt ********\n\r")
 80156d6:	493c      	ldr	r1, [pc, #240]	; (80157c8 <CST_cellular_service_task+0xf6c>)
 80156d8:	4834      	ldr	r0, [pc, #208]	; (80157ac <CST_cellular_service_task+0xf50>)
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 80156da:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80157c0 <CST_cellular_service_task+0xf64>
	PRINT_CELLULAR_SERVICE("*********** CST_modem_reset_mngt ********\n\r")
 80156de:	f007 fc5b 	bl	801cf98 <strcpy>
 80156e2:	4832      	ldr	r0, [pc, #200]	; (80157ac <CST_cellular_service_task+0xf50>)
 80156e4:	f002 fc26 	bl	8017f34 <crs_strlen>
 80156e8:	4a30      	ldr	r2, [pc, #192]	; (80157ac <CST_cellular_service_task+0xf50>)
 80156ea:	b283      	uxth	r3, r0
 80156ec:	2101      	movs	r1, #1
 80156ee:	2002      	movs	r0, #2
 80156f0:	f002 fc5e 	bl	8017fb0 <traceIF_itmPrint>
 80156f4:	482d      	ldr	r0, [pc, #180]	; (80157ac <CST_cellular_service_task+0xf50>)
 80156f6:	f002 fc1d 	bl	8017f34 <crs_strlen>
 80156fa:	4a2c      	ldr	r2, [pc, #176]	; (80157ac <CST_cellular_service_task+0xf50>)
 80156fc:	b283      	uxth	r3, r0
 80156fe:	2101      	movs	r1, #1
 8015700:	2002      	movs	r0, #2
 8015702:	f002 fe7b 	bl	80183fc <traceIF_uartPrint>
	CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015706:	2100      	movs	r1, #0
 8015708:	2003      	movs	r0, #3
 801570a:	f000 fa35 	bl	8015b78 <CST_data_cache_cellular_info_set>
	(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 801570e:	4a2d      	ldr	r2, [pc, #180]	; (80157c4 <CST_cellular_service_task+0xf68>)
 8015710:	f8b8 1000 	ldrh.w	r1, [r8]
 8015714:	4828      	ldr	r0, [pc, #160]	; (80157b8 <CST_cellular_service_task+0xf5c>)
 8015716:	23dc      	movs	r3, #220	; 0xdc
 8015718:	f001 fdac 	bl	8017274 <dc_com_read>
	cst_cellular_info.rt_state = DC_SERVICE_ON;
 801571c:	4a29      	ldr	r2, [pc, #164]	; (80157c4 <CST_cellular_service_task+0xf68>)
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 801571e:	f8b8 1000 	ldrh.w	r1, [r8]
 8015722:	4825      	ldr	r0, [pc, #148]	; (80157b8 <CST_cellular_service_task+0xf5c>)
	cst_cellular_info.rt_state = DC_SERVICE_ON;
 8015724:	2407      	movs	r4, #7
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015726:	23dc      	movs	r3, #220	; 0xdc
	cst_cellular_info.rt_state = DC_SERVICE_ON;
 8015728:	7214      	strb	r4, [r2, #8]
	(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 801572a:	f001 fd3f 	bl	80171ac <dc_com_write>
	CST_set_modem_state(&dc_com_db, CA_MODEM_REBOOTING,
 801572e:	4a21      	ldr	r2, [pc, #132]	; (80157b4 <CST_cellular_service_task+0xf58>)
 8015730:	4621      	mov	r1, r4
 8015732:	f7ff b913 	b.w	801495c <CST_cellular_service_task+0x100>
	PRINT_CELLULAR_SERVICE("*********** CST_modem_reboot_mngt ********\n\r")
 8015736:	4925      	ldr	r1, [pc, #148]	; (80157cc <CST_cellular_service_task+0xf70>)
 8015738:	481c      	ldr	r0, [pc, #112]	; (80157ac <CST_cellular_service_task+0xf50>)
 801573a:	f007 fc2d 	bl	801cf98 <strcpy>
 801573e:	481b      	ldr	r0, [pc, #108]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015740:	f002 fbf8 	bl	8017f34 <crs_strlen>
 8015744:	4a19      	ldr	r2, [pc, #100]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015746:	b283      	uxth	r3, r0
 8015748:	2101      	movs	r1, #1
 801574a:	2002      	movs	r0, #2
 801574c:	f002 fc30 	bl	8017fb0 <traceIF_itmPrint>
 8015750:	4816      	ldr	r0, [pc, #88]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015752:	f002 fbef 	bl	8017f34 <crs_strlen>
 8015756:	4a15      	ldr	r2, [pc, #84]	; (80157ac <CST_cellular_service_task+0xf50>)
 8015758:	b283      	uxth	r3, r0
 801575a:	2101      	movs	r1, #1
 801575c:	2002      	movs	r0, #2
 801575e:	f002 fe4d 	bl	80183fc <traceIF_uartPrint>
	cs_status = CST_modem_power_off();
 8015762:	f001 fbf3 	bl	8016f4c <CST_modem_power_off>
	if (cs_status != CELLULAR_OK) {
 8015766:	b120      	cbz	r0, 8015772 <CST_cellular_service_task+0xf16>
		CST_config_fail(((uint8_t*) "CST_modem_reboot_mngt"),
 8015768:	4a19      	ldr	r2, [pc, #100]	; (80157d0 <CST_cellular_service_task+0xf74>)
 801576a:	481a      	ldr	r0, [pc, #104]	; (80157d4 <CST_cellular_service_task+0xf78>)
 801576c:	2305      	movs	r3, #5
 801576e:	2102      	movs	r1, #2
 8015770:	e4a7      	b.n	80150c2 <CST_cellular_service_task+0x866>
		(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 8015772:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80157c0 <CST_cellular_service_task+0xf64>
 8015776:	4a13      	ldr	r2, [pc, #76]	; (80157c4 <CST_cellular_service_task+0xf68>)
 8015778:	f8b9 1000 	ldrh.w	r1, [r9]
 801577c:	480e      	ldr	r0, [pc, #56]	; (80157b8 <CST_cellular_service_task+0xf5c>)
 801577e:	23dc      	movs	r3, #220	; 0xdc
 8015780:	f001 fd78 	bl	8017274 <dc_com_read>
		cst_cellular_info.rt_state = DC_SERVICE_ON;
 8015784:	4a0f      	ldr	r2, [pc, #60]	; (80157c4 <CST_cellular_service_task+0xf68>)
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015786:	f8b9 1000 	ldrh.w	r1, [r9]
 801578a:	480b      	ldr	r0, [pc, #44]	; (80157b8 <CST_cellular_service_task+0xf5c>)
		cst_cellular_info.rt_state = DC_SERVICE_ON;
 801578c:	f04f 0807 	mov.w	r8, #7
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015790:	23dc      	movs	r3, #220	; 0xdc
		cst_cellular_info.rt_state = DC_SERVICE_ON;
 8015792:	f882 8008 	strb.w	r8, [r2, #8]
		(void) dc_com_write(&dc_com_db, DC_CELLULAR_INFO,
 8015796:	f001 fd09 	bl	80171ac <dc_com_write>
		CST_set_modem_state(&dc_com_db, CA_MODEM_REBOOTING,
 801579a:	4a06      	ldr	r2, [pc, #24]	; (80157b4 <CST_cellular_service_task+0xf58>)
 801579c:	4641      	mov	r1, r8
 801579e:	f7ff b8dd 	b.w	801495c <CST_cellular_service_task+0x100>
 80157a2:	bf00      	nop
 80157a4:	20003f80 	.word	0x20003f80
 80157a8:	0802aa83 	.word	0x0802aa83
 80157ac:	20008ff8 	.word	0x20008ff8
 80157b0:	0802aab1 	.word	0x0802aab1
 80157b4:	0802a22a 	.word	0x0802a22a
 80157b8:	20008d7c 	.word	0x20008d7c
 80157bc:	0802aae1 	.word	0x0802aae1
 80157c0:	20000240 	.word	0x20000240
 80157c4:	20008c80 	.word	0x20008c80
 80157c8:	0802ab0b 	.word	0x0802ab0b
 80157cc:	0802ab37 	.word	0x0802ab37
 80157d0:	200002af 	.word	0x200002af
 80157d4:	0802ab64 	.word	0x0802ab64
 80157d8:	20008ad0 	.word	0x20008ad0
 80157dc:	2000023c 	.word	0x2000023c

080157e0 <CST_cellular_service_init>:
/**
 * @brief  initializes cellular service component
 * @param  -
 * @retval CS_Status_t - return code
 */
CS_Status_t CST_cellular_service_init(void) {
 80157e0:	b530      	push	{r4, r5, lr}
	dc_cellular_target_state_t target_state;
	CS_Status_t ret;

	CST_set_state(CST_BOOT_STATE);
 80157e2:	2000      	movs	r0, #0
CS_Status_t CST_cellular_service_init(void) {
 80157e4:	b085      	sub	sp, #20
	CST_set_state(CST_BOOT_STATE);
 80157e6:	f7fe fccf 	bl	8014188 <CST_set_state>

	/* Init cellular service datacache entries */
	cellular_service_datacache_init();
 80157ea:	f7fe f8fd 	bl	80139e8 <cellular_service_datacache_init>

	/* request modem init to Cellular Service */
	ret = CS_init();
 80157ee:	f7f9 fded 	bl	800f3cc <CS_init>

	if (ret == CELLULAR_OK) {
 80157f2:	4604      	mov	r4, r0
 80157f4:	bb80      	cbnz	r0, 8015858 <CST_cellular_service_init+0x78>
#if (USE_CELLULAR_SERVICE_TASK_TEST == 1)
    /* instrumentation code to test automaton */
    CSTE_cellular_test_init();
#endif  /* (USE_CELLULAR_SERVICE_TASK_TEST == 1) */

		(void) osCDS_cellular_service_init();
 80157f6:	f7fe fa19 	bl	8013c2c <osCDS_cellular_service_init>
		cst_context.csq_count_fail = 0U;
 80157fa:	4b19      	ldr	r3, [pc, #100]	; (8015860 <CST_cellular_service_init+0x80>)

		/* No pooling is currently on going */
		CST_polling_on_going = false;

		/* Initialize modem target state with the one defined in plateform config */
		if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 80157fc:	4d19      	ldr	r5, [pc, #100]	; (8015864 <CST_cellular_service_init+0x84>)
		cst_context.csq_count_fail = 0U;
 80157fe:	775c      	strb	r4, [r3, #29]
		CST_polling_active = true;
 8015800:	4b19      	ldr	r3, [pc, #100]	; (8015868 <CST_cellular_service_init+0x88>)
		if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8015802:	8829      	ldrh	r1, [r5, #0]
 8015804:	4819      	ldr	r0, [pc, #100]	; (801586c <CST_cellular_service_init+0x8c>)
		CST_polling_active = true;
 8015806:	2201      	movs	r2, #1
 8015808:	701a      	strb	r2, [r3, #0]
		CST_polling_on_going = false;
 801580a:	4b19      	ldr	r3, [pc, #100]	; (8015870 <CST_cellular_service_init+0x90>)
		if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 801580c:	aa01      	add	r2, sp, #4
		CST_polling_on_going = false;
 801580e:	701c      	strb	r4, [r3, #0]
		if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8015810:	230c      	movs	r3, #12
 8015812:	f001 fd2f 	bl	8017274 <dc_com_read>
 8015816:	b158      	cbz	r0, 8015830 <CST_cellular_service_init+0x50>
				(void*) &target_state, sizeof(target_state)) == DC_COM_OK) {
			target_state.rt_state = DC_SERVICE_ON;
 8015818:	2307      	movs	r3, #7
 801581a:	f8ad 300c 	strh.w	r3, [sp, #12]
			target_state.target_state =
 801581e:	2302      	movs	r3, #2
 8015820:	f88d 300e 	strb.w	r3, [sp, #14]
					(dc_cs_target_state_t) PLF_CELLULAR_TARGET_STATE;
			target_state.callback = false;
			(void) dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD,
 8015824:	8829      	ldrh	r1, [r5, #0]
 8015826:	4811      	ldr	r0, [pc, #68]	; (801586c <CST_cellular_service_init+0x8c>)
 8015828:	230c      	movs	r3, #12
 801582a:	aa01      	add	r2, sp, #4
 801582c:	f001 fcbe 	bl	80171ac <dc_com_write>
					(void*) &target_state, sizeof(target_state));
		}

		/* initialize modem state */
		CST_set_modem_state(&dc_com_db, CA_MODEM_POWER_OFF,
 8015830:	4a10      	ldr	r2, [pc, #64]	; (8015874 <CST_cellular_service_init+0x94>)
 8015832:	480e      	ldr	r0, [pc, #56]	; (801586c <CST_cellular_service_init+0x8c>)
 8015834:	21ff      	movs	r1, #255	; 0xff
 8015836:	f001 fb53 	bl	8016ee0 <CST_set_modem_state>
				(uint8_t*) "CA_MODEM_POWER_OFF");

		(void) CST_config_init();
 801583a:	f7fe f8cf 	bl	80139dc <CST_config_init>
#if (USE_LOW_POWER == 1)
    CSP_Init();
#endif /* (USE_LOW_POWER == 1) */

		cst_queue_id = rtosalMessageQueueNew(NULL, CST_QUEUE_SIZE);
 801583e:	210f      	movs	r1, #15
 8015840:	2000      	movs	r0, #0
 8015842:	f002 fac8 	bl	8017dd6 <rtosalMessageQueueNew>
 8015846:	4b0c      	ldr	r3, [pc, #48]	; (8015878 <CST_cellular_service_init+0x98>)
 8015848:	6018      	str	r0, [r3, #0]
		if (cst_queue_id == NULL) {
 801584a:	b928      	cbnz	r0, 8015858 <CST_cellular_service_init+0x78>
			ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 5, ERROR_FATAL);
 801584c:	2203      	movs	r2, #3
 801584e:	2105      	movs	r1, #5
 8015850:	2002      	movs	r0, #2
 8015852:	f001 fd73 	bl	801733c <ERROR_Handler>
			ret = CELLULAR_ERROR;
 8015856:	2401      	movs	r4, #1
		}
	}
	return ret;
}
 8015858:	4620      	mov	r0, r4
 801585a:	b005      	add	sp, #20
 801585c:	bd30      	pop	{r4, r5, pc}
 801585e:	bf00      	nop
 8015860:	2000029c 	.word	0x2000029c
 8015864:	2000024a 	.word	0x2000024a
 8015868:	20008aac 	.word	0x20008aac
 801586c:	20008d7c 	.word	0x20008d7c
 8015870:	20003f3c 	.word	0x20003f3c
 8015874:	0802a3eb 	.word	0x0802a3eb
 8015878:	20003f8c 	.word	0x20003f8c

0801587c <CST_cellular_service_start>:
 * @brief  starts cellular service component
 * @note   cellular service task automaton and tempos are started
 * @param  -
 * @retval CS_Status_t - return code
 */
CS_Status_t CST_cellular_service_start(void) {
 801587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015880:	b08e      	sub	sp, #56	; 0x38
	cs_ret = 0U;

	osTimerId cst_polling_timer_handle;

#if (USE_CMD_CONSOLE == 1)
	(void) CST_cmd_cellular_service_start();
 8015882:	f7fd fffb 	bl	801387c <CST_cmd_cellular_service_start>
#endif /*  (USE_CMD_CONSOLE == 1) */

	/* reads cellular configuration in Data Cache */
	if (dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8015886:	495a      	ldr	r1, [pc, #360]	; (80159f0 <CST_cellular_service_start+0x174>)
 8015888:	4a5a      	ldr	r2, [pc, #360]	; (80159f4 <CST_cellular_service_start+0x178>)
 801588a:	8809      	ldrh	r1, [r1, #0]
 801588c:	485a      	ldr	r0, [pc, #360]	; (80159f8 <CST_cellular_service_start+0x17c>)
	DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	/* read Data Cache SIM slot entry  */
	if (dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 801588e:	4e5b      	ldr	r6, [pc, #364]	; (80159fc <CST_cellular_service_start+0x180>)
			sizeof(cst_sim_info)) == DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	/* read Data Cache NFMC entry  */
	if (dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 8015890:	4f5b      	ldr	r7, [pc, #364]	; (8015a00 <CST_cellular_service_start+0x184>)
			sizeof(nfmc_info)) == DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	/* read Data Cache cellular info entry  */
	if (dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 8015892:	4d5c      	ldr	r5, [pc, #368]	; (8015a04 <CST_cellular_service_start+0x188>)
	if (dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 8015894:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8015898:	f001 fcec 	bl	8017274 <dc_com_read>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 801589c:	4a5a      	ldr	r2, [pc, #360]	; (8015a08 <CST_cellular_service_start+0x18c>)
 801589e:	8831      	ldrh	r1, [r6, #0]
	if (dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG,
 80158a0:	4604      	mov	r4, r0
	if (dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 80158a2:	2320      	movs	r3, #32
 80158a4:	4854      	ldr	r0, [pc, #336]	; (80159f8 <CST_cellular_service_start+0x17c>)
 80158a6:	f001 fce5 	bl	8017274 <dc_com_read>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 80158aa:	8839      	ldrh	r1, [r7, #0]
		dc_ret = DC_COM_ERROR;
 80158ac:	2800      	cmp	r0, #0
	if (dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 80158ae:	f04f 032c 	mov.w	r3, #44	; 0x2c
 80158b2:	aa03      	add	r2, sp, #12
 80158b4:	4850      	ldr	r0, [pc, #320]	; (80159f8 <CST_cellular_service_start+0x17c>)
		dc_ret = DC_COM_ERROR;
 80158b6:	bf08      	it	eq
 80158b8:	2400      	moveq	r4, #0
	if (dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 80158ba:	f001 fcdb 	bl	8017274 <dc_com_read>
	if (dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 80158be:	8829      	ldrh	r1, [r5, #0]
 80158c0:	4a52      	ldr	r2, [pc, #328]	; (8015a0c <CST_cellular_service_start+0x190>)
		dc_ret = DC_COM_ERROR;
 80158c2:	2800      	cmp	r0, #0
	if (dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 80158c4:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 80158c8:	484b      	ldr	r0, [pc, #300]	; (80159f8 <CST_cellular_service_start+0x17c>)
		dc_ret = DC_COM_ERROR;
 80158ca:	bf08      	it	eq
 80158cc:	2400      	moveq	r4, #0
	if (dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 80158ce:	f001 fcd1 	bl	8017274 <dc_com_read>
			sizeof(cst_cellular_info)) == DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	cst_sim_info.sim_status[CA_SIM_REMOVABLE_SLOT] = CA_SIM_NOT_USED;
 80158d2:	4a4d      	ldr	r2, [pc, #308]	; (8015a08 <CST_cellular_service_start+0x18c>)
	cst_sim_info.sim_status[CA_SIM_INTERNAL_MODEM_SLOT] = CA_SIM_NOT_USED;
	cst_context.sim_slot_index = 0U;
	cst_sim_info.active_slot =
			cst_cellular_params.sim_slot[cst_context.sim_slot_index].sim_slot_type;
	cst_sim_info.index_slot = cst_context.sim_slot_index;
	if (dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 80158d4:	8831      	ldrh	r1, [r6, #0]
	cst_sim_info.sim_status[CA_SIM_REMOVABLE_SLOT] = CA_SIM_NOT_USED;
 80158d6:	2308      	movs	r3, #8
 80158d8:	76d3      	strb	r3, [r2, #27]
	cst_sim_info.sim_status[CA_SIM_EXTERNAL_MODEM_SLOT] = CA_SIM_NOT_USED;
 80158da:	f640 0308 	movw	r3, #2056	; 0x808
 80158de:	8393      	strh	r3, [r2, #28]
	cst_context.sim_slot_index = 0U;
 80158e0:	4b4b      	ldr	r3, [pc, #300]	; (8015a10 <CST_cellular_service_start+0x194>)
 80158e2:	46a8      	mov	r8, r5
 80158e4:	2500      	movs	r5, #0
 80158e6:	741d      	strb	r5, [r3, #16]
			cst_cellular_params.sim_slot[cst_context.sim_slot_index].sim_slot_type;
 80158e8:	4b42      	ldr	r3, [pc, #264]	; (80159f4 <CST_cellular_service_start+0x178>)
	cst_sim_info.index_slot = cst_context.sim_slot_index;
 80158ea:	7655      	strb	r5, [r2, #25]
	cst_sim_info.active_slot =
 80158ec:	7a9b      	ldrb	r3, [r3, #10]
 80158ee:	7693      	strb	r3, [r2, #26]
		dc_ret = DC_COM_ERROR;
 80158f0:	2800      	cmp	r0, #0
	if (dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 80158f2:	f04f 0320 	mov.w	r3, #32
 80158f6:	4840      	ldr	r0, [pc, #256]	; (80159f8 <CST_cellular_service_start+0x17c>)
		dc_ret = DC_COM_ERROR;
 80158f8:	bf08      	it	eq
 80158fa:	2400      	moveq	r4, #0
	if (dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void*) &cst_sim_info,
 80158fc:	f001 fc56 	bl	80171ac <dc_com_write>
			sizeof(cst_sim_info)) == DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	/* request AT core to start */
	if (atcore_task_start(ATCORE_THREAD_STACK_PRIO, ATCORE_THREAD_STACK_SIZE)
 8015900:	f44f 71c0 	mov.w	r1, #384	; 0x180
		dc_ret = DC_COM_ERROR;
 8015904:	42a8      	cmp	r0, r5
	if (atcore_task_start(ATCORE_THREAD_STACK_PRIO, ATCORE_THREAD_STACK_SIZE)
 8015906:	4628      	mov	r0, r5
		dc_ret = DC_COM_ERROR;
 8015908:	bf08      	it	eq
 801590a:	462c      	moveq	r4, r5
	if (atcore_task_start(ATCORE_THREAD_STACK_PRIO, ATCORE_THREAD_STACK_SIZE)
 801590c:	f7f2 f9fe 	bl	8007d0c <atcore_task_start>
 8015910:	2800      	cmp	r0, #0
 8015912:	d06a      	beq.n	80159ea <CST_cellular_service_start+0x16e>
			!= ATSTATUS_OK) {
		/* at core start fails */
		cs_ret |= (uint32_t) CELLULAR_ERROR;
		ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 6, ERROR_WARNING);
 8015914:	2202      	movs	r2, #2
 8015916:	2106      	movs	r1, #6
 8015918:	4610      	mov	r0, r2
 801591a:	f001 fd0f 	bl	801733c <ERROR_Handler>
		cs_ret |= (uint32_t) CELLULAR_ERROR;
 801591e:	2501      	movs	r5, #1
	}

	/* register component to Data Cache  */
	if (dc_com_core_register_gen_event_cb(&dc_com_db, CST_notif_callback,
 8015920:	493c      	ldr	r1, [pc, #240]	; (8015a14 <CST_cellular_service_start+0x198>)
 8015922:	4835      	ldr	r0, [pc, #212]	; (80159f8 <CST_cellular_service_start+0x17c>)
 8015924:	2200      	movs	r2, #0
 8015926:	f001 fbbd 	bl	80170a4 <dc_com_core_register_gen_event_cb>
			(const void*) NULL) == DC_COM_INVALID_ENTRY) {
		dc_ret = DC_COM_ERROR;
	}

	cst_cellular_info.mno_name[0] = 0U;
 801592a:	4a38      	ldr	r2, [pc, #224]	; (8015a0c <CST_cellular_service_start+0x190>)
	cst_cellular_info.rt_state = DC_SERVICE_UNAVAIL;

	/* write Data Cache cellular info entry  */
	if (dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 801592c:	f8b8 1000 	ldrh.w	r1, [r8]
 8015930:	2600      	movs	r6, #0
		dc_ret = DC_COM_ERROR;
 8015932:	28ff      	cmp	r0, #255	; 0xff
	if (dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 8015934:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 8015938:	482f      	ldr	r0, [pc, #188]	; (80159f8 <CST_cellular_service_start+0x17c>)
	cst_cellular_info.mno_name[0] = 0U;
 801593a:	76d6      	strb	r6, [r2, #27]
		dc_ret = DC_COM_ERROR;
 801593c:	bf08      	it	eq
 801593e:	4634      	moveq	r4, r6
	cst_cellular_info.rt_state = DC_SERVICE_UNAVAIL;
 8015940:	7216      	strb	r6, [r2, #8]
	if (dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void*) &cst_cellular_info,
 8015942:	f001 fc33 	bl	80171ac <dc_com_write>
		dc_ret = DC_COM_ERROR;
	}

	/* initializes Data Cache NFMC entry  */
	nfmc_info.rt_state = DC_SERVICE_UNAVAIL;
	if (dc_com_write(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 8015946:	8839      	ldrh	r1, [r7, #0]
	nfmc_info.rt_state = DC_SERVICE_UNAVAIL;
 8015948:	f88d 6014 	strb.w	r6, [sp, #20]
		dc_ret = DC_COM_ERROR;
 801594c:	42b0      	cmp	r0, r6
	if (dc_com_write(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 801594e:	f04f 032c 	mov.w	r3, #44	; 0x2c
 8015952:	aa03      	add	r2, sp, #12
 8015954:	4828      	ldr	r0, [pc, #160]	; (80159f8 <CST_cellular_service_start+0x17c>)
		dc_ret = DC_COM_ERROR;
 8015956:	bf08      	it	eq
 8015958:	4634      	moveq	r4, r6
	if (dc_com_write(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void*) &nfmc_info,
 801595a:	f001 fc27 	bl	80171ac <dc_com_write>
			sizeof(nfmc_info)) == DC_COM_ERROR) {
		dc_ret = DC_COM_ERROR;
	}

	/* creates and starts cellar service task automaton */
	cst_cellular_service_thread_id = rtosalThreadNew(
 801595e:	492e      	ldr	r1, [pc, #184]	; (8015a18 <CST_cellular_service_start+0x19c>)
 8015960:	9600      	str	r6, [sp, #0]
		dc_ret = DC_COM_ERROR;
 8015962:	42b0      	cmp	r0, r6
	cst_cellular_service_thread_id = rtosalThreadNew(
 8015964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015968:	482c      	ldr	r0, [pc, #176]	; (8015a1c <CST_cellular_service_start+0x1a0>)
 801596a:	4632      	mov	r2, r6
		dc_ret = DC_COM_ERROR;
 801596c:	bf08      	it	eq
 801596e:	4634      	moveq	r4, r6
	cst_cellular_service_thread_id = rtosalThreadNew(
 8015970:	f002 fa08 	bl	8017d84 <rtosalThreadNew>
			(const rtosal_char_t*) "CellularService",
			(os_pthread) CST_cellular_service_task,
			CELLULAR_SERVICE_THREAD_PRIO,
			CELLULAR_SERVICE_THREAD_STACK_SIZE, NULL);

	if (cst_cellular_service_thread_id == NULL) {
 8015974:	b928      	cbnz	r0, 8015982 <CST_cellular_service_start+0x106>
		/* thread creation fails */
		cs_ret |= (uint32_t) CELLULAR_ERROR;
		ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 7, ERROR_FATAL);
 8015976:	2203      	movs	r2, #3
 8015978:	2107      	movs	r1, #7
 801597a:	2002      	movs	r0, #2
 801597c:	f001 fcde 	bl	801733c <ERROR_Handler>
		cs_ret |= (uint32_t) CELLULAR_ERROR;
 8015980:	2501      	movs	r5, #1
	}

	/* creates and start modem polling timer */
	cst_polling_timer_handle = rtosalTimerNew(NULL,
 8015982:	2300      	movs	r3, #0
 8015984:	2201      	movs	r2, #1
 8015986:	4618      	mov	r0, r3
 8015988:	4925      	ldr	r1, [pc, #148]	; (8015a20 <CST_cellular_service_start+0x1a4>)
 801598a:	f002 fa41 	bl	8017e10 <rtosalTimerNew>
#if (CST_MODEM_POLLING_PERIOD == 0)
  cst_polling_period = CST_MODEM_POLLING_PERIOD_DEFAULT;
#else
	cst_polling_period = CST_MODEM_POLLING_PERIOD;
#endif /* (CST_MODEM_POLLING_PERIOD == 1) */
	os_ret = rtosalTimerStart(cst_polling_timer_handle, cst_polling_period);
 801598e:	f242 7110 	movw	r1, #10000	; 0x2710
 8015992:	f002 fa48 	bl	8017e26 <rtosalTimerStart>
	}

	/* creates timers */

	/* initializes pdn activation timer */
	cst_pdn_activate_retry_timer_handle = rtosalTimerNew(NULL,
 8015996:	2300      	movs	r3, #0
		cs_ret |= (uint32_t) CELLULAR_ERROR;
 8015998:	2800      	cmp	r0, #0
	cst_pdn_activate_retry_timer_handle = rtosalTimerNew(NULL,
 801599a:	461a      	mov	r2, r3
 801599c:	4921      	ldr	r1, [pc, #132]	; (8015a24 <CST_cellular_service_start+0x1a8>)
 801599e:	4618      	mov	r0, r3
		cs_ret |= (uint32_t) CELLULAR_ERROR;
 80159a0:	bf18      	it	ne
 80159a2:	2501      	movne	r5, #1
	cst_pdn_activate_retry_timer_handle = rtosalTimerNew(NULL,
 80159a4:	f002 fa34 	bl	8017e10 <rtosalTimerNew>
 80159a8:	4b1f      	ldr	r3, [pc, #124]	; (8015a28 <CST_cellular_service_start+0x1ac>)
			(os_ptimer) CST_pdn_activate_retry_timer_callback, osTimerOnce,
			NULL);

	/* initializes network monitoring state timer */
	cst_network_status_timer_handle = rtosalTimerNew(NULL,
 80159aa:	4920      	ldr	r1, [pc, #128]	; (8015a2c <CST_cellular_service_start+0x1b0>)
	cst_pdn_activate_retry_timer_handle = rtosalTimerNew(NULL,
 80159ac:	6018      	str	r0, [r3, #0]
	cst_network_status_timer_handle = rtosalTimerNew(NULL,
 80159ae:	2300      	movs	r3, #0
 80159b0:	461a      	mov	r2, r3
 80159b2:	4618      	mov	r0, r3
 80159b4:	f002 fa2c 	bl	8017e10 <rtosalTimerNew>
 80159b8:	4b1d      	ldr	r3, [pc, #116]	; (8015a30 <CST_cellular_service_start+0x1b4>)
			(os_ptimer) CST_network_status_timer_callback, osTimerOnce,
			NULL);

	/* initializes register timer */
	cst_register_retry_timer_handle = rtosalTimerNew(NULL,
 80159ba:	491e      	ldr	r1, [pc, #120]	; (8015a34 <CST_cellular_service_start+0x1b8>)
	cst_network_status_timer_handle = rtosalTimerNew(NULL,
 80159bc:	6018      	str	r0, [r3, #0]
	cst_register_retry_timer_handle = rtosalTimerNew(NULL,
 80159be:	2300      	movs	r3, #0
 80159c0:	461a      	mov	r2, r3
 80159c2:	4618      	mov	r0, r3
 80159c4:	f002 fa24 	bl	8017e10 <rtosalTimerNew>
 80159c8:	4b1b      	ldr	r3, [pc, #108]	; (8015a38 <CST_cellular_service_start+0x1bc>)
			(os_ptimer) CST_register_retry_timer_callback, osTimerOnce,
			NULL);

	/* initializes FOTA timer */
	cst_fota_timer_handle = rtosalTimerNew(NULL,
 80159ca:	491c      	ldr	r1, [pc, #112]	; (8015a3c <CST_cellular_service_start+0x1c0>)
	cst_register_retry_timer_handle = rtosalTimerNew(NULL,
 80159cc:	6018      	str	r0, [r3, #0]
	cst_fota_timer_handle = rtosalTimerNew(NULL,
 80159ce:	2300      	movs	r3, #0
 80159d0:	461a      	mov	r2, r3
 80159d2:	4618      	mov	r0, r3
 80159d4:	f002 fa1c 	bl	8017e10 <rtosalTimerNew>
 80159d8:	4b19      	ldr	r3, [pc, #100]	; (8015a40 <CST_cellular_service_start+0x1c4>)
  /* initializes low power inactivity timer */
  cst_lp_inactivity_timer_handle = rtosalTimerNew(NULL, (os_ptimer)CST_lp_inactivity_timer_callback, osTimerOnce,
                                                  NULL);
#endif /* (USE_LOW_POWER == 1) */

	if ((dc_ret != DC_COM_OK ) || (cs_ret != 0U)) {
 80159da:	2c00      	cmp	r4, #0
 80159dc:	bf08      	it	eq
 80159de:	2501      	moveq	r5, #1
	cst_fota_timer_handle = rtosalTimerNew(NULL,
 80159e0:	6018      	str	r0, [r3, #0]
		/* At least one error occurs during start function */
		cst_ret = CELLULAR_ERROR;
	}

	return cst_ret;
}
 80159e2:	b2e8      	uxtb	r0, r5
 80159e4:	b00e      	add	sp, #56	; 0x38
 80159e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cs_ret = 0U;
 80159ea:	4605      	mov	r5, r0
 80159ec:	e798      	b.n	8015920 <CST_cellular_service_start+0xa4>
 80159ee:	bf00      	nop
 80159f0:	2000023c 	.word	0x2000023c
 80159f4:	20008ad0 	.word	0x20008ad0
 80159f8:	20008d7c 	.word	0x20008d7c
 80159fc:	20000248 	.word	0x20000248
 8015a00:	20000242 	.word	0x20000242
 8015a04:	20000240 	.word	0x20000240
 8015a08:	20008d5c 	.word	0x20008d5c
 8015a0c:	20008c80 	.word	0x20008c80
 8015a10:	2000029c 	.word	0x2000029c
 8015a14:	08014769 	.word	0x08014769
 8015a18:	0801485d 	.word	0x0801485d
 8015a1c:	0802abbd 	.word	0x0802abbd
 8015a20:	080140fd 	.word	0x080140fd
 8015a24:	080140ad 	.word	0x080140ad
 8015a28:	20003f88 	.word	0x20003f88
 8015a2c:	08014095 	.word	0x08014095
 8015a30:	20003f84 	.word	0x20003f84
 8015a34:	080141d9 	.word	0x080141d9
 8015a38:	20003f90 	.word	0x20003f90
 8015a3c:	0801408d 	.word	0x0801408d
 8015a40:	20003f80 	.word	0x20003f80

08015a44 <CST_location_info_callback>:
  * @brief  location info callback callback
  * @param  -
  * @retval -
  */
static void CST_location_info_callback(void)
{
 8015a44:	b510      	push	{r4, lr}
  /* Not used yet: reserved for future usage */
  PRINT_CELLULAR_SERVICE("CST_location_info_callback\n\r")
 8015a46:	4c0c      	ldr	r4, [pc, #48]	; (8015a78 <CST_location_info_callback+0x34>)
 8015a48:	490c      	ldr	r1, [pc, #48]	; (8015a7c <CST_location_info_callback+0x38>)
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f007 faa4 	bl	801cf98 <strcpy>
 8015a50:	4620      	mov	r0, r4
 8015a52:	f002 fa6f 	bl	8017f34 <crs_strlen>
 8015a56:	4622      	mov	r2, r4
 8015a58:	b283      	uxth	r3, r0
 8015a5a:	2101      	movs	r1, #1
 8015a5c:	2002      	movs	r0, #2
 8015a5e:	f002 faa7 	bl	8017fb0 <traceIF_itmPrint>
 8015a62:	4620      	mov	r0, r4
 8015a64:	f002 fa66 	bl	8017f34 <crs_strlen>
 8015a68:	4622      	mov	r2, r4
 8015a6a:	b283      	uxth	r3, r0
}
 8015a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PRINT_CELLULAR_SERVICE("CST_location_info_callback\n\r")
 8015a70:	2101      	movs	r1, #1
 8015a72:	2002      	movs	r0, #2
 8015a74:	f002 bcc2 	b.w	80183fc <traceIF_uartPrint>
 8015a78:	20008ff8 	.word	0x20008ff8
 8015a7c:	0802b050 	.word	0x0802b050

08015a80 <CST_network_reg_callback>:
{
 8015a80:	b510      	push	{r4, lr}
  PRINT_CELLULAR_SERVICE("==================================CST_network_reg_callback\n\r")
 8015a82:	4c0e      	ldr	r4, [pc, #56]	; (8015abc <CST_network_reg_callback+0x3c>)
 8015a84:	490e      	ldr	r1, [pc, #56]	; (8015ac0 <CST_network_reg_callback+0x40>)
 8015a86:	4620      	mov	r0, r4
 8015a88:	f007 fa86 	bl	801cf98 <strcpy>
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	f002 fa51 	bl	8017f34 <crs_strlen>
 8015a92:	4622      	mov	r2, r4
 8015a94:	b283      	uxth	r3, r0
 8015a96:	2101      	movs	r1, #1
 8015a98:	2002      	movs	r0, #2
 8015a9a:	f002 fa89 	bl	8017fb0 <traceIF_itmPrint>
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	f002 fa48 	bl	8017f34 <crs_strlen>
 8015aa4:	4622      	mov	r2, r4
 8015aa6:	b283      	uxth	r3, r0
 8015aa8:	2101      	movs	r1, #1
 8015aaa:	2002      	movs	r0, #2
 8015aac:	f002 fca6 	bl	80183fc <traceIF_uartPrint>
}
 8015ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CST_send_message(CST_MESSAGE_CS_EVENT, CST_NETWORK_CALLBACK_EVENT);
 8015ab4:	2113      	movs	r1, #19
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	f7fe babe 	b.w	8014038 <CST_send_message>
 8015abc:	20008ff8 	.word	0x20008ff8
 8015ac0:	0802b06d 	.word	0x0802b06d

08015ac4 <CST_modem_event_callback>:
  * @brief  modem event callback
  * @param  event - modem event
  * @retval -
  */
static void CST_modem_event_callback(CS_ModemEvent_t event)
{
 8015ac4:	b510      	push	{r4, lr}
 8015ac6:	4604      	mov	r4, r0
  /* event is a bitmask, we can have more than one evt reported at the same time */
  if (((uint16_t)event & (uint16_t)CS_MDMEVENT_BOOT) != 0U)
 8015ac8:	07e0      	lsls	r0, r4, #31
 8015aca:	d503      	bpl.n	8015ad4 <CST_modem_event_callback+0x10>
  {
#if (USE_LOW_POWER == 1)
    (void)CSP_DataWakeup(MODEM_WAKEUP);
#endif /* (USE_LOW_POWER == 1) */
    /* reboot modem has occurred: sends a message to automaton */
    CST_send_message(CST_MESSAGE_CS_EVENT, CST_REBOOT_MODEM_EVENT);
 8015acc:	2111      	movs	r1, #17
 8015ace:	2000      	movs	r0, #0
 8015ad0:	f7fe fab2 	bl	8014038 <CST_send_message>
  }
  if (((uint16_t)event & (uint16_t)CS_MDMEVENT_POWER_DOWN) != 0U)
 8015ad4:	07a1      	lsls	r1, r4, #30
 8015ad6:	d519      	bpl.n	8015b0c <CST_modem_event_callback+0x48>
  {
    /* Modem power down event: sends a message to automaton */
    PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_POWER_DOWN\n\r")
 8015ad8:	4914      	ldr	r1, [pc, #80]	; (8015b2c <CST_modem_event_callback+0x68>)
 8015ada:	4815      	ldr	r0, [pc, #84]	; (8015b30 <CST_modem_event_callback+0x6c>)
 8015adc:	f007 fa5c 	bl	801cf98 <strcpy>
 8015ae0:	4813      	ldr	r0, [pc, #76]	; (8015b30 <CST_modem_event_callback+0x6c>)
 8015ae2:	f002 fa27 	bl	8017f34 <crs_strlen>
 8015ae6:	4a12      	ldr	r2, [pc, #72]	; (8015b30 <CST_modem_event_callback+0x6c>)
 8015ae8:	b283      	uxth	r3, r0
 8015aea:	2101      	movs	r1, #1
 8015aec:	2002      	movs	r0, #2
 8015aee:	f002 fa5f 	bl	8017fb0 <traceIF_itmPrint>
 8015af2:	480f      	ldr	r0, [pc, #60]	; (8015b30 <CST_modem_event_callback+0x6c>)
 8015af4:	f002 fa1e 	bl	8017f34 <crs_strlen>
 8015af8:	2101      	movs	r1, #1
 8015afa:	b283      	uxth	r3, r0
 8015afc:	4a0c      	ldr	r2, [pc, #48]	; (8015b30 <CST_modem_event_callback+0x6c>)
 8015afe:	2002      	movs	r0, #2
 8015b00:	f002 fc7c 	bl	80183fc <traceIF_uartPrint>
#if (USE_LOW_POWER == 1)
    (void)CSP_DataWakeup(MODEM_WAKEUP);
#endif /* (USE_LOW_POWER == 1) */
    /* We reboot the Modem if it power down */
    CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_POWER_DOWN_EVENT);
 8015b04:	211c      	movs	r1, #28
 8015b06:	2000      	movs	r0, #0
 8015b08:	f7fe fa96 	bl	8014038 <CST_send_message>

    /* Nothing to do */
  }
  if (((uint16_t)event & (uint16_t)CS_MDMEVENT_FOTA_START) != 0U)
 8015b0c:	0762      	lsls	r2, r4, #29
 8015b0e:	d503      	bpl.n	8015b18 <CST_modem_event_callback+0x54>
  {
    /* FOTA programmation start : send a message to automaton */
    CST_send_message(CST_MESSAGE_CS_EVENT, CST_FOTA_START_EVENT);
 8015b10:	2115      	movs	r1, #21
 8015b12:	2000      	movs	r0, #0
 8015b14:	f7fe fa90 	bl	8014038 <CST_send_message>
  }
  if (((uint16_t)event & (uint16_t)CS_MDMEVENT_FOTA_END) != 0U)
 8015b18:	0723      	lsls	r3, r4, #28
 8015b1a:	d505      	bpl.n	8015b28 <CST_modem_event_callback+0x64>
    /* Modem Leave Low Power state  */
    PRINT_CELLULAR_SERVICE("Modem event received:  CS_MDMEVENT_LP_LEAVE\n\r")
    /* Nothing to do */
  }
#endif /* (USE_LOW_POWER == 1) */
}
 8015b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CST_send_message(CST_MESSAGE_CS_EVENT, CST_FOTA_END_EVENT);
 8015b20:	2116      	movs	r1, #22
 8015b22:	2000      	movs	r0, #0
 8015b24:	f7fe ba88 	b.w	8014038 <CST_send_message>
}
 8015b28:	bd10      	pop	{r4, pc}
 8015b2a:	bf00      	nop
 8015b2c:	0802b0aa 	.word	0x0802b0aa
 8015b30:	20008ff8 	.word	0x20008ff8

08015b34 <cst_convert_access_techno>:
  */
ca_access_techno_t cst_convert_access_techno(CS_AccessTechno_t access_techno)
{
  ca_access_techno_t ret;

  switch (access_techno)
 8015b34:	2807      	cmp	r0, #7
{
 8015b36:	b508      	push	{r3, lr}
  switch (access_techno)
 8015b38:	d019      	beq.n	8015b6e <cst_convert_access_techno+0x3a>
 8015b3a:	2809      	cmp	r0, #9
 8015b3c:	d017      	beq.n	8015b6e <cst_convert_access_techno+0x3a>
 8015b3e:	b1b0      	cbz	r0, 8015b6e <cst_convert_access_techno+0x3a>
    case CS_ACT_E_UTRAN_NBS1:
      ret = CA_ACT_E_UTRAN_NBS1;
      break;
    default:
      ret = CA_ACT_GSM;
      PRINT_CELLULAR_SERVICE_ERR("=== CST_get_network_status === Invalid access techno value, use GSM\n\r")
 8015b40:	490b      	ldr	r1, [pc, #44]	; (8015b70 <cst_convert_access_techno+0x3c>)
 8015b42:	480c      	ldr	r0, [pc, #48]	; (8015b74 <cst_convert_access_techno+0x40>)
 8015b44:	f007 fa28 	bl	801cf98 <strcpy>
 8015b48:	480a      	ldr	r0, [pc, #40]	; (8015b74 <cst_convert_access_techno+0x40>)
 8015b4a:	f002 f9f3 	bl	8017f34 <crs_strlen>
 8015b4e:	4a09      	ldr	r2, [pc, #36]	; (8015b74 <cst_convert_access_techno+0x40>)
 8015b50:	b283      	uxth	r3, r0
 8015b52:	2110      	movs	r1, #16
 8015b54:	2002      	movs	r0, #2
 8015b56:	f002 fa2b 	bl	8017fb0 <traceIF_itmPrint>
 8015b5a:	4806      	ldr	r0, [pc, #24]	; (8015b74 <cst_convert_access_techno+0x40>)
 8015b5c:	f002 f9ea 	bl	8017f34 <crs_strlen>
 8015b60:	4a04      	ldr	r2, [pc, #16]	; (8015b74 <cst_convert_access_techno+0x40>)
 8015b62:	b283      	uxth	r3, r0
 8015b64:	2110      	movs	r1, #16
 8015b66:	2002      	movs	r0, #2
 8015b68:	f002 fc48 	bl	80183fc <traceIF_uartPrint>
 8015b6c:	2000      	movs	r0, #0
      break;
  }

  return (ret);
}
 8015b6e:	bd08      	pop	{r3, pc}
 8015b70:	0802b0da 	.word	0x0802b0da
 8015b74:	20008ff8 	.word	0x20008ff8

08015b78 <CST_data_cache_cellular_info_set>:
  * @param  dc_service_state - new entry state to set
  * @param  ip_addr - new IP address (null if not defined)
  * @retval -
  */
void  CST_data_cache_cellular_info_set(dc_service_rt_state_t dc_service_state, dc_network_addr_t *ip_addr)
{
 8015b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  dc_nifman_info_t nifman_info;
  dc_cellular_info_t cellular_info;

  (void)dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&nifman_info, sizeof(nifman_info));
 8015b7a:	4f23      	ldr	r7, [pc, #140]	; (8015c08 <CST_data_cache_cellular_info_set+0x90>)
  /* update of DC_CELLULAR_INFO */
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(cellular_info));
 8015b7c:	4e23      	ldr	r6, [pc, #140]	; (8015c0c <CST_data_cache_cellular_info_set+0x94>)
{
 8015b7e:	b0bd      	sub	sp, #244	; 0xf4
 8015b80:	4605      	mov	r5, r0
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&nifman_info, sizeof(nifman_info));
 8015b82:	2310      	movs	r3, #16
 8015b84:	aa01      	add	r2, sp, #4
 8015b86:	4822      	ldr	r0, [pc, #136]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
{
 8015b88:	460c      	mov	r4, r1
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&nifman_info, sizeof(nifman_info));
 8015b8a:	8839      	ldrh	r1, [r7, #0]
 8015b8c:	f001 fb72 	bl	8017274 <dc_com_read>
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(cellular_info));
 8015b90:	23dc      	movs	r3, #220	; 0xdc
 8015b92:	8831      	ldrh	r1, [r6, #0]
 8015b94:	481e      	ldr	r0, [pc, #120]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
 8015b96:	aa05      	add	r2, sp, #20
 8015b98:	f001 fb6c 	bl	8017274 <dc_com_read>

  if (nifman_info.rt_state != dc_service_state)
 8015b9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015ba0:	42ab      	cmp	r3, r5
 8015ba2:	d016      	beq.n	8015bd2 <CST_data_cache_cellular_info_set+0x5a>
    nifman_info.rt_state   =  dc_service_state;
    cellular_info.rt_state   =  dc_service_state;
#if (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)
    nifman_info.network    =  DC_CELLULAR_SOCKETS_LWIP;
#else
    nifman_info.network    =  DC_CELLULAR_SOCKET_MODEM;
 8015ba4:	2301      	movs	r3, #1
    nifman_info.rt_state   =  dc_service_state;
 8015ba6:	f88d 500c 	strb.w	r5, [sp, #12]
    cellular_info.rt_state   =  dc_service_state;
 8015baa:	f88d 501c 	strb.w	r5, [sp, #28]
    nifman_info.network    =  DC_CELLULAR_SOCKET_MODEM;
 8015bae:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /*  (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)*/
    if (ip_addr != NULL)
 8015bb2:	b33c      	cbz	r4, 8015c04 <CST_data_cache_cellular_info_set+0x8c>
    {
      (void)memcpy(&nifman_info.ip_addr, ip_addr, sizeof(dc_network_addr_t));
 8015bb4:	6823      	ldr	r3, [r4, #0]
 8015bb6:	9304      	str	r3, [sp, #16]
      (void)memcpy(&cellular_info.ip_addr, ip_addr, sizeof(dc_network_addr_t));
 8015bb8:	933b      	str	r3, [sp, #236]	; 0xec
    }
    else
    {
      nifman_info.ip_addr.addr = 0U;
    }
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&nifman_info, sizeof(nifman_info));
 8015bba:	8839      	ldrh	r1, [r7, #0]
 8015bbc:	4814      	ldr	r0, [pc, #80]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
 8015bbe:	2310      	movs	r3, #16
 8015bc0:	aa01      	add	r2, sp, #4
 8015bc2:	f001 faf3 	bl	80171ac <dc_com_write>
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(cellular_info));
 8015bc6:	8831      	ldrh	r1, [r6, #0]
 8015bc8:	4811      	ldr	r0, [pc, #68]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
 8015bca:	23dc      	movs	r3, #220	; 0xdc
 8015bcc:	aa05      	add	r2, sp, #20
 8015bce:	f001 faed 	bl	80171ac <dc_com_write>
  }

  /* DC_CELLULAR_DATA_INFO is used for call back matter on only some fields */
  /* but DC_CELLULAR_INFO has to be used to read data. So update of the two structures */
  /* update of DC_CELLULAR_DATA_INFO */
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8015bd2:	4e10      	ldr	r6, [pc, #64]	; (8015c14 <CST_data_cache_cellular_info_set+0x9c>)
 8015bd4:	4f10      	ldr	r7, [pc, #64]	; (8015c18 <CST_data_cache_cellular_info_set+0xa0>)
 8015bd6:	480e      	ldr	r0, [pc, #56]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
 8015bd8:	8839      	ldrh	r1, [r7, #0]
 8015bda:	2310      	movs	r3, #16
 8015bdc:	4632      	mov	r2, r6
 8015bde:	f001 fb49 	bl	8017274 <dc_com_read>
                    sizeof(cst_cellular_data_info));

  if (cst_cellular_data_info.rt_state != dc_service_state)
 8015be2:	7a33      	ldrb	r3, [r6, #8]
 8015be4:	42ab      	cmp	r3, r5
 8015be6:	d00b      	beq.n	8015c00 <CST_data_cache_cellular_info_set+0x88>
  {
    cst_cellular_data_info.rt_state   =  dc_service_state;
#if (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)
    cst_cellular_data_info.network    =  DC_NETWORK_SOCKETS_LWIP;
#else
    cst_cellular_data_info.network    =  DC_NETWORK_SOCKET_MODEM;
 8015be8:	2301      	movs	r3, #1
    cst_cellular_data_info.rt_state   =  dc_service_state;
 8015bea:	7235      	strb	r5, [r6, #8]
    cst_cellular_data_info.network    =  DC_NETWORK_SOCKET_MODEM;
 8015bec:	7273      	strb	r3, [r6, #9]
#endif /*  (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)*/
    if (ip_addr != NULL)
 8015bee:	b10c      	cbz	r4, 8015bf4 <CST_data_cache_cellular_info_set+0x7c>
    {
      (void)memcpy(&cst_cellular_data_info.ip_addr, ip_addr, sizeof(dc_network_addr_t));
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	60f3      	str	r3, [r6, #12]
    }

    (void)dc_com_write(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8015bf4:	4a07      	ldr	r2, [pc, #28]	; (8015c14 <CST_data_cache_cellular_info_set+0x9c>)
 8015bf6:	8839      	ldrh	r1, [r7, #0]
 8015bf8:	4805      	ldr	r0, [pc, #20]	; (8015c10 <CST_data_cache_cellular_info_set+0x98>)
 8015bfa:	2310      	movs	r3, #16
 8015bfc:	f001 fad6 	bl	80171ac <dc_com_write>
                       sizeof(cst_cellular_data_info));
  }
}
 8015c00:	b03d      	add	sp, #244	; 0xf4
 8015c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      nifman_info.ip_addr.addr = 0U;
 8015c04:	9404      	str	r4, [sp, #16]
 8015c06:	e7d8      	b.n	8015bba <CST_data_cache_cellular_info_set+0x42>
 8015c08:	20000244 	.word	0x20000244
 8015c0c:	20000240 	.word	0x20000240
 8015c10:	20008d7c 	.word	0x20008d7c
 8015c14:	20008a9c 	.word	0x20008a9c
 8015c18:	2000023e 	.word	0x2000023e

08015c1c <CST_config_fail>:
  * @param  fail_max   - max of allowed failures
  * @retval -
  */
void CST_config_fail(const uint8_t *msg_fail, cst_fail_cause_t fail_cause, uint8_t *fail_count,
                     uint8_t fail_max)
{
 8015c1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c20:	4615      	mov	r5, r2
 8015c22:	460e      	mov	r6, r1
#if (USE_TRACE_CELLULAR_SERVICE == 0)
  UNUSED(msg_fail);
#endif  /* (USE_TRACE_CELLULAR_SERVICE == 0) */

  PRINT_CELLULAR_SERVICE("=== %s Fail !!! === \r\n", msg_fail)
 8015c24:	4602      	mov	r2, r0
 8015c26:	4945      	ldr	r1, [pc, #276]	; (8015d3c <CST_config_fail+0x120>)
 8015c28:	4845      	ldr	r0, [pc, #276]	; (8015d40 <CST_config_fail+0x124>)
  ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 1, ERROR_WARNING);

  *fail_count = *fail_count + 1U;
  cst_context.global_retry_count++;
 8015c2a:	4c46      	ldr	r4, [pc, #280]	; (8015d44 <CST_config_fail+0x128>)
{
 8015c2c:	461f      	mov	r7, r3
  PRINT_CELLULAR_SERVICE("=== %s Fail !!! === \r\n", msg_fail)
 8015c2e:	f007 f943 	bl	801ceb8 <sprintf>
 8015c32:	4843      	ldr	r0, [pc, #268]	; (8015d40 <CST_config_fail+0x124>)
 8015c34:	f002 f97e 	bl	8017f34 <crs_strlen>
 8015c38:	4a41      	ldr	r2, [pc, #260]	; (8015d40 <CST_config_fail+0x124>)
 8015c3a:	b283      	uxth	r3, r0
 8015c3c:	2101      	movs	r1, #1
 8015c3e:	2002      	movs	r0, #2
 8015c40:	f002 f9b6 	bl	8017fb0 <traceIF_itmPrint>
 8015c44:	483e      	ldr	r0, [pc, #248]	; (8015d40 <CST_config_fail+0x124>)
 8015c46:	f002 f975 	bl	8017f34 <crs_strlen>
 8015c4a:	4a3d      	ldr	r2, [pc, #244]	; (8015d40 <CST_config_fail+0x124>)
 8015c4c:	b283      	uxth	r3, r0
 8015c4e:	2101      	movs	r1, #1
 8015c50:	2002      	movs	r0, #2
 8015c52:	f002 fbd3 	bl	80183fc <traceIF_uartPrint>
  ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 1, ERROR_WARNING);
 8015c56:	2202      	movs	r2, #2
 8015c58:	4610      	mov	r0, r2
 8015c5a:	2101      	movs	r1, #1
 8015c5c:	f001 fb6e 	bl	801733c <ERROR_Handler>
  *fail_count = *fail_count + 1U;
 8015c60:	782b      	ldrb	r3, [r5, #0]
 8015c62:	3301      	adds	r3, #1
 8015c64:	702b      	strb	r3, [r5, #0]
  cst_context.global_retry_count++;
 8015c66:	7f23      	ldrb	r3, [r4, #28]
 8015c68:	3301      	adds	r3, #1
 8015c6a:	7723      	strb	r3, [r4, #28]
  cst_context.reset_count++;
 8015c6c:	7ce3      	ldrb	r3, [r4, #19]

  CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015c6e:	2100      	movs	r1, #0
  cst_context.reset_count++;
 8015c70:	3301      	adds	r3, #1
  CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015c72:	2003      	movs	r0, #3
  cst_context.reset_count++;
 8015c74:	74e3      	strb	r3, [r4, #19]
  CST_data_cache_cellular_info_set(DC_SERVICE_OFF, NULL);
 8015c76:	f7ff ff7f 	bl	8015b78 <CST_data_cache_cellular_info_set>
  if ((*fail_count <= fail_max) && (cst_context.global_retry_count <= CST_GLOBAL_RETRY_MAX))
 8015c7a:	782b      	ldrb	r3, [r5, #0]
 8015c7c:	42bb      	cmp	r3, r7
 8015c7e:	46a0      	mov	r8, r4
 8015c80:	d80d      	bhi.n	8015c9e <CST_config_fail+0x82>
 8015c82:	7f23      	ldrb	r3, [r4, #28]
 8015c84:	2b05      	cmp	r3, #5
 8015c86:	d80a      	bhi.n	8015c9e <CST_config_fail+0x82>
  {
    /* maximal fail count not reached => restart automation */
    CST_set_state(CST_MODEM_REBOOT_STATE);
 8015c88:	200d      	movs	r0, #13
 8015c8a:	f7fe fa7d 	bl	8014188 <CST_set_state>
    CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_REBOOT_EVENT);
 8015c8e:	2119      	movs	r1, #25
 8015c90:	2000      	movs	r0, #0
 8015c92:	f7fe f9d1 	bl	8014038 <CST_send_message>
    cst_context.fail_cause    = fail_cause;
 8015c96:	70a6      	strb	r6, [r4, #2]
                               fail_cause,
                               cst_context.global_retry_count,
                               *fail_count)
    ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 2, ERROR_FATAL);
  }
}
 8015c98:	b002      	add	sp, #8
 8015c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  * @param  -
  * @retval -
  */
static void CST_fail_setting(void)
{
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8015c9e:	4f2a      	ldr	r7, [pc, #168]	; (8015d48 <CST_config_fail+0x12c>)
 8015ca0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8015d58 <CST_config_fail+0x13c>
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8015ca4:	4c29      	ldr	r4, [pc, #164]	; (8015d4c <CST_config_fail+0x130>)
 8015ca6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8015d5c <CST_config_fail+0x140>
    CST_set_state(CST_MODEM_FAIL_STATE);
 8015caa:	200a      	movs	r0, #10
 8015cac:	f7fe fa6c 	bl	8014188 <CST_set_state>
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8015cb0:	f8ba 1000 	ldrh.w	r1, [sl]
 8015cb4:	4826      	ldr	r0, [pc, #152]	; (8015d50 <CST_config_fail+0x134>)
 8015cb6:	463a      	mov	r2, r7
 8015cb8:	23dc      	movs	r3, #220	; 0xdc
 8015cba:	f001 fadb 	bl	8017274 <dc_com_read>
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8015cbe:	f8b9 1000 	ldrh.w	r1, [r9]
 8015cc2:	4823      	ldr	r0, [pc, #140]	; (8015d50 <CST_config_fail+0x134>)
 8015cc4:	4622      	mov	r2, r4
 8015cc6:	2310      	movs	r3, #16
 8015cc8:	f001 fad4 	bl	8017274 <dc_com_read>
                    sizeof(dc_cellular_data_info_t));
  cst_cellular_info.rt_state      = DC_SERVICE_FAIL;
 8015ccc:	2308      	movs	r3, #8
  cst_cellular_data_info.rt_state = DC_SERVICE_FAIL;
  (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8015cce:	f8ba 1000 	ldrh.w	r1, [sl]
  cst_cellular_info.rt_state      = DC_SERVICE_FAIL;
 8015cd2:	723b      	strb	r3, [r7, #8]
  cst_cellular_data_info.rt_state = DC_SERVICE_FAIL;
 8015cd4:	7223      	strb	r3, [r4, #8]
  (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8015cd6:	463a      	mov	r2, r7
 8015cd8:	23dc      	movs	r3, #220	; 0xdc
 8015cda:	481d      	ldr	r0, [pc, #116]	; (8015d50 <CST_config_fail+0x134>)
 8015cdc:	f001 fa66 	bl	80171ac <dc_com_write>
  (void)dc_com_write(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8015ce0:	f8b9 1000 	ldrh.w	r1, [r9]
 8015ce4:	481a      	ldr	r0, [pc, #104]	; (8015d50 <CST_config_fail+0x134>)
 8015ce6:	4622      	mov	r2, r4
 8015ce8:	2310      	movs	r3, #16
 8015cea:	f001 fa5f 	bl	80171ac <dc_com_write>
    cst_context.fail_cause    = CST_MODEM_POWER_ON_FAIL;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	f888 3002 	strb.w	r3, [r8, #2]
    PRINT_CELLULAR_SERVICE_ERR("=== CST_set_fail_state %d - count %d/%d FATAL !!! ===\n\r",
 8015cf4:	782b      	ldrb	r3, [r5, #0]
 8015cf6:	9300      	str	r3, [sp, #0]
 8015cf8:	f898 301c 	ldrb.w	r3, [r8, #28]
 8015cfc:	4915      	ldr	r1, [pc, #84]	; (8015d54 <CST_config_fail+0x138>)
 8015cfe:	4810      	ldr	r0, [pc, #64]	; (8015d40 <CST_config_fail+0x124>)
 8015d00:	4632      	mov	r2, r6
 8015d02:	f007 f8d9 	bl	801ceb8 <sprintf>
 8015d06:	480e      	ldr	r0, [pc, #56]	; (8015d40 <CST_config_fail+0x124>)
 8015d08:	f002 f914 	bl	8017f34 <crs_strlen>
 8015d0c:	4a0c      	ldr	r2, [pc, #48]	; (8015d40 <CST_config_fail+0x124>)
 8015d0e:	b283      	uxth	r3, r0
 8015d10:	2110      	movs	r1, #16
 8015d12:	2002      	movs	r0, #2
 8015d14:	f002 f94c 	bl	8017fb0 <traceIF_itmPrint>
 8015d18:	4809      	ldr	r0, [pc, #36]	; (8015d40 <CST_config_fail+0x124>)
 8015d1a:	f002 f90b 	bl	8017f34 <crs_strlen>
 8015d1e:	4a08      	ldr	r2, [pc, #32]	; (8015d40 <CST_config_fail+0x124>)
 8015d20:	b283      	uxth	r3, r0
 8015d22:	2110      	movs	r1, #16
 8015d24:	2002      	movs	r0, #2
 8015d26:	f002 fb69 	bl	80183fc <traceIF_uartPrint>
    ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 2, ERROR_FATAL);
 8015d2a:	2102      	movs	r1, #2
 8015d2c:	2203      	movs	r2, #3
 8015d2e:	4608      	mov	r0, r1
}
 8015d30:	b002      	add	sp, #8
 8015d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERROR_Handler(DBG_CHAN_CELLULAR_SERVICE, 2, ERROR_FATAL);
 8015d36:	f001 bb01 	b.w	801733c <ERROR_Handler>
 8015d3a:	bf00      	nop
 8015d3c:	0802b126 	.word	0x0802b126
 8015d40:	20008ff8 	.word	0x20008ff8
 8015d44:	2000029c 	.word	0x2000029c
 8015d48:	20008c80 	.word	0x20008c80
 8015d4c:	20008a9c 	.word	0x20008a9c
 8015d50:	20008d7c 	.word	0x20008d7c
 8015d54:	0802b13d 	.word	0x0802b13d
 8015d58:	20000240 	.word	0x20000240
 8015d5c:	2000023e 	.word	0x2000023e

08015d60 <CST_modem_define_pdn>:
{
 8015d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  size =  crs_strlen(cst_cellular_params.sim_slot[cst_context.sim_slot_index].username) + 1U;
 8015d64:	4d1f      	ldr	r5, [pc, #124]	; (8015de4 <CST_modem_define_pdn+0x84>)
 8015d66:	4c20      	ldr	r4, [pc, #128]	; (8015de8 <CST_modem_define_pdn+0x88>)
{
 8015d68:	b093      	sub	sp, #76	; 0x4c
 8015d6a:	4606      	mov	r6, r0
 8015d6c:	4689      	mov	r9, r1
 8015d6e:	4617      	mov	r7, r2
  (void)memset((void *)&pdn_conf, 0, sizeof(CS_PDN_configuration_t));
 8015d70:	2100      	movs	r1, #0
 8015d72:	2241      	movs	r2, #65	; 0x41
 8015d74:	a801      	add	r0, sp, #4
 8015d76:	f007 f86f 	bl	801ce58 <memset>
  size =  crs_strlen(cst_cellular_params.sim_slot[cst_context.sim_slot_index].username) + 1U;
 8015d7a:	7c28      	ldrb	r0, [r5, #16]
 8015d7c:	232f      	movs	r3, #47	; 0x2f
 8015d7e:	f04f 0868 	mov.w	r8, #104	; 0x68
 8015d82:	fb18 3000 	smlabb	r0, r8, r0, r3
 8015d86:	4420      	add	r0, r4
 8015d88:	f002 f8d4 	bl	8017f34 <crs_strlen>
 8015d8c:	1c42      	adds	r2, r0, #1
  if (size <= MAX_SIZE_USERNAME)
 8015d8e:	2a20      	cmp	r2, #32
 8015d90:	d812      	bhi.n	8015db8 <CST_modem_define_pdn+0x58>
    (void)memcpy((CRC_CHAR_t *)pdn_conf.username,
 8015d92:	4649      	mov	r1, r9
 8015d94:	f10d 0005 	add.w	r0, sp, #5
 8015d98:	f007 f850 	bl	801ce3c <memcpy>
    size =  crs_strlen(cst_cellular_params.sim_slot[cst_context.sim_slot_index].password) + 1U;
 8015d9c:	7c28      	ldrb	r0, [r5, #16]
 8015d9e:	fb08 4000 	mla	r0, r8, r0, r4
 8015da2:	3050      	adds	r0, #80	; 0x50
 8015da4:	f002 f8c6 	bl	8017f34 <crs_strlen>
 8015da8:	1c42      	adds	r2, r0, #1
    if (size <= MAX_SIZE_PASSWORD)
 8015daa:	2a20      	cmp	r2, #32
 8015dac:	d804      	bhi.n	8015db8 <CST_modem_define_pdn+0x58>
      (void)memcpy((CRC_CHAR_t *)pdn_conf.password,
 8015dae:	4639      	mov	r1, r7
 8015db0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8015db4:	f007 f842 	bl	801ce3c <memcpy>
  cs_status = osCDS_define_pdn(cst_get_cid_value(cst_cellular_params.sim_slot[cst_context.sim_slot_index].cid),
 8015db8:	7c2b      	ldrb	r3, [r5, #16]
 8015dba:	2268      	movs	r2, #104	; 0x68
 8015dbc:	fb02 4403 	mla	r4, r2, r3, r4
 8015dc0:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8015dc4:	f7fd fe00 	bl	80139c8 <cst_get_cid_value>
 8015dc8:	aa01      	add	r2, sp, #4
 8015dca:	4631      	mov	r1, r6
 8015dcc:	f7fe f844 	bl	8013e58 <osCDS_define_pdn>
  if (cs_status != CELLULAR_OK)
 8015dd0:	b128      	cbz	r0, 8015dde <CST_modem_define_pdn+0x7e>
    CST_config_fail(((uint8_t *)"CST_modem_define_pdn"),
 8015dd2:	4a06      	ldr	r2, [pc, #24]	; (8015dec <CST_modem_define_pdn+0x8c>)
 8015dd4:	4806      	ldr	r0, [pc, #24]	; (8015df0 <CST_modem_define_pdn+0x90>)
 8015dd6:	2305      	movs	r3, #5
 8015dd8:	2107      	movs	r1, #7
 8015dda:	f7ff ff1f 	bl	8015c1c <CST_config_fail>
}
 8015dde:	b013      	add	sp, #76	; 0x4c
 8015de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015de4:	2000029c 	.word	0x2000029c
 8015de8:	20008ad0 	.word	0x20008ad0
 8015dec:	200002b2 	.word	0x200002b2
 8015df0:	0802b17b 	.word	0x0802b17b

08015df4 <CST_modem_sim_init>:
{
 8015df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PRINT_CELLULAR_SERVICE("*********** CST_modem_sim_init ********\n\r")
 8015df8:	4975      	ldr	r1, [pc, #468]	; (8015fd0 <CST_modem_sim_init+0x1dc>)
 8015dfa:	4876      	ldr	r0, [pc, #472]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
  PRINT_CELLULAR_SERVICE("CST_modem_sim_init : CS_sim_select sim slot nb %d\n\r", cst_sim_info.active_slot)
 8015dfc:	4c76      	ldr	r4, [pc, #472]	; (8015fd8 <CST_modem_sim_init+0x1e4>)
{
 8015dfe:	b0cd      	sub	sp, #308	; 0x134
  PRINT_CELLULAR_SERVICE("*********** CST_modem_sim_init ********\n\r")
 8015e00:	f007 f8ca 	bl	801cf98 <strcpy>
 8015e04:	4873      	ldr	r0, [pc, #460]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e06:	f002 f895 	bl	8017f34 <crs_strlen>
 8015e0a:	4a72      	ldr	r2, [pc, #456]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e0c:	b283      	uxth	r3, r0
 8015e0e:	2101      	movs	r1, #1
 8015e10:	2002      	movs	r0, #2
 8015e12:	f002 f8cd 	bl	8017fb0 <traceIF_itmPrint>
 8015e16:	486f      	ldr	r0, [pc, #444]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e18:	f002 f88c 	bl	8017f34 <crs_strlen>
 8015e1c:	4a6d      	ldr	r2, [pc, #436]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e1e:	b283      	uxth	r3, r0
 8015e20:	2101      	movs	r1, #1
 8015e22:	2002      	movs	r0, #2
 8015e24:	f002 faea 	bl	80183fc <traceIF_uartPrint>
  PRINT_FORCE("Modem Boot OK\r\n")
 8015e28:	496c      	ldr	r1, [pc, #432]	; (8015fdc <CST_modem_sim_init+0x1e8>)
 8015e2a:	486a      	ldr	r0, [pc, #424]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e2c:	f007 f8b4 	bl	801cf98 <strcpy>
 8015e30:	4868      	ldr	r0, [pc, #416]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e32:	f002 f87f 	bl	8017f34 <crs_strlen>
 8015e36:	4a67      	ldr	r2, [pc, #412]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e38:	b283      	uxth	r3, r0
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	2002      	movs	r0, #2
 8015e3e:	f002 f8b7 	bl	8017fb0 <traceIF_itmPrint>
 8015e42:	4864      	ldr	r0, [pc, #400]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e44:	f002 f876 	bl	8017f34 <crs_strlen>
 8015e48:	4962      	ldr	r1, [pc, #392]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e4a:	b282      	uxth	r2, r0
 8015e4c:	2002      	movs	r0, #2
 8015e4e:	f002 faef 	bl	8018430 <traceIF_uartPrintForce>
  PRINT_CELLULAR_SERVICE("CST_modem_sim_init : CS_sim_select sim slot nb %d\n\r", cst_sim_info.active_slot)
 8015e52:	7ea2      	ldrb	r2, [r4, #26]
 8015e54:	4962      	ldr	r1, [pc, #392]	; (8015fe0 <CST_modem_sim_init+0x1ec>)
 8015e56:	485f      	ldr	r0, [pc, #380]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e58:	f007 f82e 	bl	801ceb8 <sprintf>
 8015e5c:	485d      	ldr	r0, [pc, #372]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e5e:	f002 f869 	bl	8017f34 <crs_strlen>
 8015e62:	4a5c      	ldr	r2, [pc, #368]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e64:	b283      	uxth	r3, r0
 8015e66:	2101      	movs	r1, #1
 8015e68:	2002      	movs	r0, #2
 8015e6a:	f002 f8a1 	bl	8017fb0 <traceIF_itmPrint>
 8015e6e:	4859      	ldr	r0, [pc, #356]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e70:	f002 f860 	bl	8017f34 <crs_strlen>
 8015e74:	4a57      	ldr	r2, [pc, #348]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e76:	b283      	uxth	r3, r0
 8015e78:	2101      	movs	r1, #1
 8015e7a:	2002      	movs	r0, #2
 8015e7c:	f002 fabe 	bl	80183fc <traceIF_uartPrint>
  switch (sim_slot_value)
 8015e80:	7ea0      	ldrb	r0, [r4, #26]
 8015e82:	3801      	subs	r0, #1
  if (osCS_sim_select(cst_convert_sim_socket_type(cst_sim_info.active_slot)) != CELLULAR_OK)
 8015e84:	2801      	cmp	r0, #1
 8015e86:	bf8c      	ite	hi
 8015e88:	2000      	movhi	r0, #0
 8015e8a:	2001      	movls	r0, #1
 8015e8c:	f7fe f868 	bl	8013f60 <osCS_sim_select>
 8015e90:	46a2      	mov	sl, r4
 8015e92:	4605      	mov	r5, r0
 8015e94:	b1f0      	cbz	r0, 8015ed4 <CST_modem_sim_init+0xe0>
    PRINT_CELLULAR_SERVICE("CST_modem_sim_init : sim slot requested is not actually in use by the modem.\
 8015e96:	4953      	ldr	r1, [pc, #332]	; (8015fe4 <CST_modem_sim_init+0x1f0>)
      PRINT_CELLULAR_SERVICE("CST_modem_sim_init : Reboot modem.\n\r")
 8015e98:	484e      	ldr	r0, [pc, #312]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015e9a:	f007 f87d 	bl	801cf98 <strcpy>
 8015e9e:	484d      	ldr	r0, [pc, #308]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015ea0:	f002 f848 	bl	8017f34 <crs_strlen>
 8015ea4:	4a4b      	ldr	r2, [pc, #300]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015ea6:	b283      	uxth	r3, r0
 8015ea8:	2101      	movs	r1, #1
 8015eaa:	2002      	movs	r0, #2
 8015eac:	f002 f880 	bl	8017fb0 <traceIF_itmPrint>
 8015eb0:	4848      	ldr	r0, [pc, #288]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015eb2:	f002 f83f 	bl	8017f34 <crs_strlen>
 8015eb6:	4a47      	ldr	r2, [pc, #284]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015eb8:	b283      	uxth	r3, r0
 8015eba:	2101      	movs	r1, #1
 8015ebc:	2002      	movs	r0, #2
 8015ebe:	f002 fa9d 	bl	80183fc <traceIF_uartPrint>
      CST_config_fail(((uint8_t *)"CST_modem_sim_init"),
 8015ec2:	4a49      	ldr	r2, [pc, #292]	; (8015fe8 <CST_modem_sim_init+0x1f4>)
 8015ec4:	4849      	ldr	r0, [pc, #292]	; (8015fec <CST_modem_sim_init+0x1f8>)
 8015ec6:	2305      	movs	r3, #5
 8015ec8:	2108      	movs	r1, #8
 8015eca:	f7ff fea7 	bl	8015c1c <CST_config_fail>
}
 8015ece:	b04d      	add	sp, #308	; 0x134
 8015ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    (void)rtosalDelay(10);  /* waiting for 10ms after sim selection */
 8015ed4:	200a      	movs	r0, #10
 8015ed6:	f001 ffaa 	bl	8017e2e <rtosalDelay>
    if (cst_cellular_params.target_state == DC_TARGET_STATE_SIM_ONLY)
 8015eda:	4b45      	ldr	r3, [pc, #276]	; (8015ff0 <CST_modem_sim_init+0x1fc>)
 8015edc:	f893 4142 	ldrb.w	r4, [r3, #322]	; 0x142
 8015ee0:	2c01      	cmp	r4, #1
 8015ee2:	469b      	mov	fp, r3
 8015ee4:	f040 8090 	bne.w	8016008 <CST_modem_sim_init+0x214>
      cs_status = osCDS_init_modem(CS_CMI_SIM_ONLY, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 8015ee8:	4a42      	ldr	r2, [pc, #264]	; (8015ff4 <CST_modem_sim_init+0x200>)
 8015eea:	4629      	mov	r1, r5
 8015eec:	2002      	movs	r0, #2
        cs_status = osCDS_init_modem(CS_CMI_FULL, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 8015eee:	f7fd ff4d 	bl	8013d8c <osCDS_init_modem>
 8015ef2:	4604      	mov	r4, r0
    if (cs_status == CELLULAR_SIM_INCORRECT_PASSWORD)
 8015ef4:	2c06      	cmp	r4, #6
 8015ef6:	f040 849a 	bne.w	801682e <CST_modem_sim_init+0xa3a>
      PRINT_FORCE("==================================\n\r")
 8015efa:	493f      	ldr	r1, [pc, #252]	; (8015ff8 <CST_modem_sim_init+0x204>)
 8015efc:	4835      	ldr	r0, [pc, #212]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015efe:	f007 f84b 	bl	801cf98 <strcpy>
 8015f02:	4834      	ldr	r0, [pc, #208]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f04:	f002 f816 	bl	8017f34 <crs_strlen>
 8015f08:	4a32      	ldr	r2, [pc, #200]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f0a:	b283      	uxth	r3, r0
 8015f0c:	2101      	movs	r1, #1
 8015f0e:	2002      	movs	r0, #2
 8015f10:	f002 f84e 	bl	8017fb0 <traceIF_itmPrint>
 8015f14:	482f      	ldr	r0, [pc, #188]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f16:	f002 f80d 	bl	8017f34 <crs_strlen>
 8015f1a:	492e      	ldr	r1, [pc, #184]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f1c:	b282      	uxth	r2, r0
 8015f1e:	2002      	movs	r0, #2
 8015f20:	f002 fa86 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE(" WARNING: WRONG PIN CODE !!!\n\r")
 8015f24:	4935      	ldr	r1, [pc, #212]	; (8015ffc <CST_modem_sim_init+0x208>)
 8015f26:	482b      	ldr	r0, [pc, #172]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f28:	f007 f836 	bl	801cf98 <strcpy>
 8015f2c:	4829      	ldr	r0, [pc, #164]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f2e:	f002 f801 	bl	8017f34 <crs_strlen>
 8015f32:	4a28      	ldr	r2, [pc, #160]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f34:	b283      	uxth	r3, r0
 8015f36:	2101      	movs	r1, #1
 8015f38:	2002      	movs	r0, #2
 8015f3a:	f002 f839 	bl	8017fb0 <traceIF_itmPrint>
 8015f3e:	4825      	ldr	r0, [pc, #148]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f40:	f001 fff8 	bl	8017f34 <crs_strlen>
 8015f44:	4923      	ldr	r1, [pc, #140]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f46:	b282      	uxth	r2, r0
 8015f48:	2002      	movs	r0, #2
 8015f4a:	f002 fa71 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE(" DO NOT RESTART THE BOARD WITHOUT SETTING A CORRECT PIN CODE\n\r")
 8015f4e:	492c      	ldr	r1, [pc, #176]	; (8016000 <CST_modem_sim_init+0x20c>)
 8015f50:	4820      	ldr	r0, [pc, #128]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f52:	f007 f821 	bl	801cf98 <strcpy>
 8015f56:	481f      	ldr	r0, [pc, #124]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f58:	f001 ffec 	bl	8017f34 <crs_strlen>
 8015f5c:	4a1d      	ldr	r2, [pc, #116]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f5e:	b283      	uxth	r3, r0
 8015f60:	2101      	movs	r1, #1
 8015f62:	2002      	movs	r0, #2
 8015f64:	f002 f824 	bl	8017fb0 <traceIF_itmPrint>
 8015f68:	481a      	ldr	r0, [pc, #104]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f6a:	f001 ffe3 	bl	8017f34 <crs_strlen>
 8015f6e:	4919      	ldr	r1, [pc, #100]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f70:	b282      	uxth	r2, r0
 8015f72:	2002      	movs	r0, #2
 8015f74:	f002 fa5c 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE(" TO AVOID LOCKING THE SIM ! \n\r")
 8015f78:	4922      	ldr	r1, [pc, #136]	; (8016004 <CST_modem_sim_init+0x210>)
 8015f7a:	4816      	ldr	r0, [pc, #88]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f7c:	f007 f80c 	bl	801cf98 <strcpy>
 8015f80:	4814      	ldr	r0, [pc, #80]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f82:	f001 ffd7 	bl	8017f34 <crs_strlen>
 8015f86:	4a13      	ldr	r2, [pc, #76]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f88:	b283      	uxth	r3, r0
 8015f8a:	2101      	movs	r1, #1
 8015f8c:	2002      	movs	r0, #2
 8015f8e:	f002 f80f 	bl	8017fb0 <traceIF_itmPrint>
 8015f92:	4810      	ldr	r0, [pc, #64]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f94:	f001 ffce 	bl	8017f34 <crs_strlen>
 8015f98:	490e      	ldr	r1, [pc, #56]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015f9a:	b282      	uxth	r2, r0
 8015f9c:	2002      	movs	r0, #2
 8015f9e:	f002 fa47 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE("==================================\n\r")
 8015fa2:	4915      	ldr	r1, [pc, #84]	; (8015ff8 <CST_modem_sim_init+0x204>)
 8015fa4:	480b      	ldr	r0, [pc, #44]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015fa6:	f006 fff7 	bl	801cf98 <strcpy>
 8015faa:	480a      	ldr	r0, [pc, #40]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015fac:	f001 ffc2 	bl	8017f34 <crs_strlen>
 8015fb0:	4a08      	ldr	r2, [pc, #32]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015fb2:	b283      	uxth	r3, r0
 8015fb4:	2101      	movs	r1, #1
 8015fb6:	2002      	movs	r0, #2
 8015fb8:	f001 fffa 	bl	8017fb0 <traceIF_itmPrint>
 8015fbc:	4805      	ldr	r0, [pc, #20]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015fbe:	f001 ffb9 	bl	8017f34 <crs_strlen>
 8015fc2:	4904      	ldr	r1, [pc, #16]	; (8015fd4 <CST_modem_sim_init+0x1e0>)
 8015fc4:	b282      	uxth	r2, r0
 8015fc6:	2002      	movs	r0, #2
 8015fc8:	f002 fa32 	bl	8018430 <traceIF_uartPrintForce>
        __NOP(); /* Nothing to do */
 8015fcc:	bf00      	nop
      for (;;)
 8015fce:	e7fd      	b.n	8015fcc <CST_modem_sim_init+0x1d8>
 8015fd0:	0802b190 	.word	0x0802b190
 8015fd4:	20008ff8 	.word	0x20008ff8
 8015fd8:	20008d5c 	.word	0x20008d5c
 8015fdc:	0802b1ba 	.word	0x0802b1ba
 8015fe0:	0802b1ca 	.word	0x0802b1ca
 8015fe4:	0802b1fe 	.word	0x0802b1fe
 8015fe8:	200002b5 	.word	0x200002b5
 8015fec:	0802b286 	.word	0x0802b286
 8015ff0:	20008ad0 	.word	0x20008ad0
 8015ff4:	08028e1b 	.word	0x08028e1b
 8015ff8:	0802b4e0 	.word	0x0802b4e0
 8015ffc:	0802b505 	.word	0x0802b505
 8016000:	0802b524 	.word	0x0802b524
 8016004:	0802b563 	.word	0x0802b563
    else if (cst_cellular_params.target_state == DC_TARGET_STATE_FULL)
 8016008:	2c02      	cmp	r4, #2
 801600a:	f040 81a9 	bne.w	8016360 <CST_modem_sim_init+0x56c>
      PRINT_CELLULAR_SERVICE("CST_modem_sim_init : check SIM First \n\r")
 801600e:	49c5      	ldr	r1, [pc, #788]	; (8016324 <CST_modem_sim_init+0x530>)
 8016010:	48c5      	ldr	r0, [pc, #788]	; (8016328 <CST_modem_sim_init+0x534>)
 8016012:	f006 ffc1 	bl	801cf98 <strcpy>
 8016016:	48c4      	ldr	r0, [pc, #784]	; (8016328 <CST_modem_sim_init+0x534>)
 8016018:	f001 ff8c 	bl	8017f34 <crs_strlen>
 801601c:	4ac2      	ldr	r2, [pc, #776]	; (8016328 <CST_modem_sim_init+0x534>)
 801601e:	b283      	uxth	r3, r0
 8016020:	2101      	movs	r1, #1
 8016022:	4620      	mov	r0, r4
 8016024:	f001 ffc4 	bl	8017fb0 <traceIF_itmPrint>
 8016028:	48bf      	ldr	r0, [pc, #764]	; (8016328 <CST_modem_sim_init+0x534>)
 801602a:	f001 ff83 	bl	8017f34 <crs_strlen>
 801602e:	4abe      	ldr	r2, [pc, #760]	; (8016328 <CST_modem_sim_init+0x534>)
 8016030:	b283      	uxth	r3, r0
 8016032:	2101      	movs	r1, #1
 8016034:	4620      	mov	r0, r4
 8016036:	f002 f9e1 	bl	80183fc <traceIF_uartPrint>
      cs_status = osCDS_init_modem(CS_CMI_SIM_ONLY, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 801603a:	4629      	mov	r1, r5
      if ((cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem !=
 801603c:	4dbb      	ldr	r5, [pc, #748]	; (801632c <CST_modem_sim_init+0x538>)
      cs_status = osCDS_init_modem(CS_CMI_SIM_ONLY, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 801603e:	4abc      	ldr	r2, [pc, #752]	; (8016330 <CST_modem_sim_init+0x53c>)
 8016040:	4620      	mov	r0, r4
 8016042:	f7fd fea3 	bl	8013d8c <osCDS_init_modem>
      if ((cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem !=
 8016046:	7c2b      	ldrb	r3, [r5, #16]
 8016048:	9502      	str	r5, [sp, #8]
 801604a:	2268      	movs	r2, #104	; 0x68
 801604c:	fb02 b303 	mla	r3, r2, r3, fp
      cs_status = osCDS_init_modem(CS_CMI_SIM_ONLY, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 8016050:	4604      	mov	r4, r0
           (cellular_apn_send_to_modem_t)CA_APN_SEND_TO_MODEM) &&
 8016052:	7ada      	ldrb	r2, [r3, #11]
      if ((cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem !=
 8016054:	3a01      	subs	r2, #1
 8016056:	2a01      	cmp	r2, #1
 8016058:	d909      	bls.n	801606e <CST_modem_sim_init+0x27a>
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&cst_cellular_params, sizeof(cst_cellular_params));
 801605a:	49b6      	ldr	r1, [pc, #728]	; (8016334 <CST_modem_sim_init+0x540>)
 801605c:	48b6      	ldr	r0, [pc, #728]	; (8016338 <CST_modem_sim_init+0x544>)
 801605e:	8809      	ldrh	r1, [r1, #0]
        cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem =
 8016060:	2201      	movs	r2, #1
 8016062:	72da      	strb	r2, [r3, #11]
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&cst_cellular_params, sizeof(cst_cellular_params));
 8016064:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8016068:	465a      	mov	r2, fp
 801606a:	f001 f89f 	bl	80171ac <dc_com_write>
      if (cs_status == CELLULAR_OK)
 801606e:	2c00      	cmp	r4, #0
 8016070:	f47f af40 	bne.w	8015ef4 <CST_modem_sim_init+0x100>
        cst_imsi_info.field_requested = CS_DIF_IMSI_PRESENT;
 8016074:	2320      	movs	r3, #32
        (void)osCDS_get_device_info(&cst_imsi_info);
 8016076:	a80b      	add	r0, sp, #44	; 0x2c
        (void)memcpy(mmc_mnc, cst_imsi_info.u.imsi, 5);
 8016078:	ae09      	add	r6, sp, #36	; 0x24
        cst_imsi_info.field_requested = CS_DIF_IMSI_PRESENT;
 801607a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        (void)osCDS_get_device_info(&cst_imsi_info);
 801607e:	f7fd fe11 	bl	8013ca4 <osCDS_get_device_info>
        (void)ATutil_convertHexaStringToInt64(cst_imsi_info.u.imsi, 15U, &cst_imsi_high, &cst_imsi_low);
 8016082:	ab08      	add	r3, sp, #32
 8016084:	aa07      	add	r2, sp, #28
 8016086:	210f      	movs	r1, #15
 8016088:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 801608c:	f7f8 fb6c 	bl	800e768 <ATutil_convertHexaStringToInt64>
        (void)memcpy(mmc_mnc, cst_imsi_info.u.imsi, 5);
 8016090:	f8dd 002e 	ldr.w	r0, [sp, #46]	; 0x2e
 8016094:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
        PRINT_CELLULAR_SERVICE(" -IMSI: %lx%lx\n\r -MMC/MNC: %s\n\r", cst_imsi_high, cst_imsi_low, mmc_mnc)
 8016098:	49a8      	ldr	r1, [pc, #672]	; (801633c <CST_modem_sim_init+0x548>)
        (void)memcpy(mmc_mnc, cst_imsi_info.u.imsi, 5);
 801609a:	6030      	str	r0, [r6, #0]
 801609c:	7133      	strb	r3, [r6, #4]
        mmc_mnc[5] = 0;
 801609e:	7174      	strb	r4, [r6, #5]
        PRINT_CELLULAR_SERVICE(" -IMSI: %lx%lx\n\r -MMC/MNC: %s\n\r", cst_imsi_high, cst_imsi_low, mmc_mnc)
 80160a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80160a4:	48a0      	ldr	r0, [pc, #640]	; (8016328 <CST_modem_sim_init+0x534>)
 80160a6:	9600      	str	r6, [sp, #0]
 80160a8:	f006 ff06 	bl	801ceb8 <sprintf>
 80160ac:	489e      	ldr	r0, [pc, #632]	; (8016328 <CST_modem_sim_init+0x534>)
 80160ae:	f001 ff41 	bl	8017f34 <crs_strlen>
 80160b2:	4a9d      	ldr	r2, [pc, #628]	; (8016328 <CST_modem_sim_init+0x534>)
 80160b4:	b283      	uxth	r3, r0
 80160b6:	2101      	movs	r1, #1
 80160b8:	2002      	movs	r0, #2
 80160ba:	f001 ff79 	bl	8017fb0 <traceIF_itmPrint>
 80160be:	489a      	ldr	r0, [pc, #616]	; (8016328 <CST_modem_sim_init+0x534>)
 80160c0:	f001 ff38 	bl	8017f34 <crs_strlen>
 80160c4:	4a98      	ldr	r2, [pc, #608]	; (8016328 <CST_modem_sim_init+0x534>)
 80160c6:	b283      	uxth	r3, r0
 80160c8:	2101      	movs	r1, #1
 80160ca:	2002      	movs	r0, #2
 80160cc:	f002 f996 	bl	80183fc <traceIF_uartPrint>
        if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem !=
 80160d0:	9b02      	ldr	r3, [sp, #8]
 80160d2:	7c18      	ldrb	r0, [r3, #16]
 80160d4:	2768      	movs	r7, #104	; 0x68
 80160d6:	fb07 b300 	mla	r3, r7, r0, fp
 80160da:	f893 800b 	ldrb.w	r8, [r3, #11]
 80160de:	f1b8 0f02 	cmp.w	r8, #2
 80160e2:	f000 8107 	beq.w	80162f4 <CST_modem_sim_init+0x500>
          if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent == false)
 80160e6:	f893 800c 	ldrb.w	r8, [r3, #12]
 80160ea:	f1b8 0f00 	cmp.w	r8, #0
 80160ee:	f040 80b8 	bne.w	8016262 <CST_modem_sim_init+0x46e>
 80160f2:	4d93      	ldr	r5, [pc, #588]	; (8016340 <CST_modem_sim_init+0x54c>)
                PRINT_CELLULAR_SERVICE(" -Found corresponding APN: \"%s\" in table\n\r", mmcmnc_apn_a[i].apn)
 80160f4:	4f8c      	ldr	r7, [pc, #560]	; (8016328 <CST_modem_sim_init+0x534>)
          if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnPresent == false)
 80160f6:	46a1      	mov	r9, r4
 80160f8:	fa5f f389 	uxtb.w	r3, r9
              if (memcmp(mmc_mnc, mmcmnc_apn_a[i].mmcmnc, sizeof(mmc_mnc)) == 0)
 80160fc:	2206      	movs	r2, #6
 80160fe:	4629      	mov	r1, r5
 8016100:	4630      	mov	r0, r6
 8016102:	9303      	str	r3, [sp, #12]
 8016104:	f006 fe8c 	bl	801ce20 <memcmp>
 8016108:	b9c8      	cbnz	r0, 801613e <CST_modem_sim_init+0x34a>
                PRINT_CELLULAR_SERVICE(" -Found corresponding APN: \"%s\" in table\n\r", mmcmnc_apn_a[i].apn)
 801610a:	498e      	ldr	r1, [pc, #568]	; (8016344 <CST_modem_sim_init+0x550>)
 801610c:	1daa      	adds	r2, r5, #6
 801610e:	4638      	mov	r0, r7
 8016110:	f006 fed2 	bl	801ceb8 <sprintf>
 8016114:	4638      	mov	r0, r7
 8016116:	f001 ff0d 	bl	8017f34 <crs_strlen>
 801611a:	463a      	mov	r2, r7
 801611c:	b283      	uxth	r3, r0
 801611e:	2101      	movs	r1, #1
 8016120:	2002      	movs	r0, #2
 8016122:	f001 ff45 	bl	8017fb0 <traceIF_itmPrint>
 8016126:	4638      	mov	r0, r7
 8016128:	f001 ff04 	bl	8017f34 <crs_strlen>
 801612c:	463a      	mov	r2, r7
 801612e:	b283      	uxth	r3, r0
 8016130:	2101      	movs	r1, #1
 8016132:	2002      	movs	r0, #2
 8016134:	f002 f962 	bl	80183fc <traceIF_uartPrint>
 8016138:	9c03      	ldr	r4, [sp, #12]
                apn_found = true;
 801613a:	f04f 0801 	mov.w	r8, #1
            for (uint8_t i = 0U; i < MMCMNC_APN_MAX; i++)
 801613e:	f109 0901 	add.w	r9, r9, #1
 8016142:	f1b9 0f08 	cmp.w	r9, #8
 8016146:	f105 0569 	add.w	r5, r5, #105	; 0x69
 801614a:	d1d5      	bne.n	80160f8 <CST_modem_sim_init+0x304>
            if (apn_found)
 801614c:	2668      	movs	r6, #104	; 0x68
 801614e:	f1b8 0f00 	cmp.w	r8, #0
 8016152:	d065      	beq.n	8016220 <CST_modem_sim_init+0x42c>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 8016154:	b224      	sxth	r4, r4
 8016156:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
                           mmcmnc_apn_a[idx_apn_found].apn,
 801615a:	4d79      	ldr	r5, [pc, #484]	; (8016340 <CST_modem_sim_init+0x54c>)
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 801615c:	f89a 8019 	ldrb.w	r8, [sl, #25]
 8016160:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                           mmcmnc_apn_a[idx_apn_found].apn,
 8016164:	1da7      	adds	r7, r4, #6
 8016166:	442f      	add	r7, r5
                           crs_strlen(mmcmnc_apn_a[idx_apn_found].apn) + 1U);
 8016168:	4638      	mov	r0, r7
 801616a:	f001 fee3 	bl	8017f34 <crs_strlen>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 801616e:	fb06 b808 	mla	r8, r6, r8, fp
 8016172:	f108 080d 	add.w	r8, r8, #13
 8016176:	1c42      	adds	r2, r0, #1
 8016178:	4640      	mov	r0, r8
                           mmcmnc_apn_a[idx_apn_found].username,
 801617a:	f104 0827 	add.w	r8, r4, #39	; 0x27
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 801617e:	4639      	mov	r1, r7
                           mmcmnc_apn_a[idx_apn_found].username,
 8016180:	44a8      	add	r8, r5
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 8016182:	f006 fe5b 	bl	801ce3c <memcpy>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].username,
 8016186:	f89a 9019 	ldrb.w	r9, [sl, #25]
                           crs_strlen(mmcmnc_apn_a[idx_apn_found].username) + 1U);
 801618a:	4640      	mov	r0, r8
 801618c:	f001 fed2 	bl	8017f34 <crs_strlen>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].username,
 8016190:	fb06 b909 	mla	r9, r6, r9, fp
 8016194:	f109 092f 	add.w	r9, r9, #47	; 0x2f
                           mmcmnc_apn_a[idx_apn_found].password,
 8016198:	3448      	adds	r4, #72	; 0x48
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].username,
 801619a:	1c42      	adds	r2, r0, #1
 801619c:	4641      	mov	r1, r8
                           mmcmnc_apn_a[idx_apn_found].password,
 801619e:	442c      	add	r4, r5
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].username,
 80161a0:	4648      	mov	r0, r9
 80161a2:	f006 fe4b 	bl	801ce3c <memcpy>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].password,
 80161a6:	f89a 9019 	ldrb.w	r9, [sl, #25]
                           crs_strlen(mmcmnc_apn_a[idx_apn_found].password) + 1U);
 80161aa:	4620      	mov	r0, r4
 80161ac:	f001 fec2 	bl	8017f34 <crs_strlen>
              (void)memcpy(cst_cellular_params.sim_slot[cst_sim_info.index_slot].password,
 80161b0:	fb06 b909 	mla	r9, r6, r9, fp
 80161b4:	f109 0950 	add.w	r9, r9, #80	; 0x50
 80161b8:	1c42      	adds	r2, r0, #1
 80161ba:	4621      	mov	r1, r4
 80161bc:	4648      	mov	r0, r9
 80161be:	f006 fe3d 	bl	801ce3c <memcpy>
              (void)dc_com_write(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&cst_cellular_params,
 80161c2:	495c      	ldr	r1, [pc, #368]	; (8016334 <CST_modem_sim_init+0x540>)
 80161c4:	4a60      	ldr	r2, [pc, #384]	; (8016348 <CST_modem_sim_init+0x554>)
 80161c6:	8809      	ldrh	r1, [r1, #0]
 80161c8:	485b      	ldr	r0, [pc, #364]	; (8016338 <CST_modem_sim_init+0x544>)
 80161ca:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80161ce:	f000 ffed 	bl	80171ac <dc_com_write>
              if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem ==
 80161d2:	9b02      	ldr	r3, [sp, #8]
 80161d4:	7c1b      	ldrb	r3, [r3, #16]
 80161d6:	fb06 b603 	mla	r6, r6, r3, fp
 80161da:	7af5      	ldrb	r5, [r6, #11]
 80161dc:	2d01      	cmp	r5, #1
 80161de:	d11b      	bne.n	8016218 <CST_modem_sim_init+0x424>
                PRINT_CELLULAR_SERVICE("CST_modem_sim_init : call CST_modem_define_pdn with APN in table: \"%s\"\n\r",
 80161e0:	495a      	ldr	r1, [pc, #360]	; (801634c <CST_modem_sim_init+0x558>)
 80161e2:	4851      	ldr	r0, [pc, #324]	; (8016328 <CST_modem_sim_init+0x534>)
 80161e4:	463a      	mov	r2, r7
 80161e6:	f006 fe67 	bl	801ceb8 <sprintf>
 80161ea:	484f      	ldr	r0, [pc, #316]	; (8016328 <CST_modem_sim_init+0x534>)
 80161ec:	f001 fea2 	bl	8017f34 <crs_strlen>
 80161f0:	4a4d      	ldr	r2, [pc, #308]	; (8016328 <CST_modem_sim_init+0x534>)
 80161f2:	b283      	uxth	r3, r0
 80161f4:	4629      	mov	r1, r5
 80161f6:	2002      	movs	r0, #2
 80161f8:	f001 feda 	bl	8017fb0 <traceIF_itmPrint>
 80161fc:	484a      	ldr	r0, [pc, #296]	; (8016328 <CST_modem_sim_init+0x534>)
 80161fe:	f001 fe99 	bl	8017f34 <crs_strlen>
 8016202:	4a49      	ldr	r2, [pc, #292]	; (8016328 <CST_modem_sim_init+0x534>)
 8016204:	b283      	uxth	r3, r0
 8016206:	4629      	mov	r1, r5
 8016208:	2002      	movs	r0, #2
 801620a:	f002 f8f7 	bl	80183fc <traceIF_uartPrint>
                CST_modem_define_pdn(mmcmnc_apn_a[idx_apn_found].apn,
 801620e:	4622      	mov	r2, r4
 8016210:	4641      	mov	r1, r8
 8016212:	4638      	mov	r0, r7
              CST_modem_define_pdn(NULL, (uint8_t *)"", (uint8_t *)"");
 8016214:	f7ff fda4 	bl	8015d60 <CST_modem_define_pdn>
        cs_status = osCDS_init_modem(CS_CMI_FULL, CELLULAR_FALSE, PLF_CELLULAR_SIM_PINCODE);
 8016218:	4a45      	ldr	r2, [pc, #276]	; (8016330 <CST_modem_sim_init+0x53c>)
 801621a:	2100      	movs	r1, #0
 801621c:	2001      	movs	r0, #1
 801621e:	e666      	b.n	8015eee <CST_modem_sim_init+0xfa>
              if (cst_cellular_params.sim_slot[cst_context.sim_slot_index].apnSendToModem ==
 8016220:	9b02      	ldr	r3, [sp, #8]
 8016222:	7c1b      	ldrb	r3, [r3, #16]
 8016224:	fb06 b603 	mla	r6, r6, r3, fp
 8016228:	7af4      	ldrb	r4, [r6, #11]
 801622a:	2c01      	cmp	r4, #1
 801622c:	d1f4      	bne.n	8016218 <CST_modem_sim_init+0x424>
                PRINT_CELLULAR_SERVICE("CST_modem_sim_init : MMC/MNC not in table \
 801622e:	4948      	ldr	r1, [pc, #288]	; (8016350 <CST_modem_sim_init+0x55c>)
 8016230:	483d      	ldr	r0, [pc, #244]	; (8016328 <CST_modem_sim_init+0x534>)
 8016232:	f006 feb1 	bl	801cf98 <strcpy>
 8016236:	483c      	ldr	r0, [pc, #240]	; (8016328 <CST_modem_sim_init+0x534>)
 8016238:	f001 fe7c 	bl	8017f34 <crs_strlen>
 801623c:	4a3a      	ldr	r2, [pc, #232]	; (8016328 <CST_modem_sim_init+0x534>)
 801623e:	b283      	uxth	r3, r0
 8016240:	4621      	mov	r1, r4
 8016242:	2002      	movs	r0, #2
 8016244:	f001 feb4 	bl	8017fb0 <traceIF_itmPrint>
 8016248:	4837      	ldr	r0, [pc, #220]	; (8016328 <CST_modem_sim_init+0x534>)
 801624a:	f001 fe73 	bl	8017f34 <crs_strlen>
 801624e:	4a36      	ldr	r2, [pc, #216]	; (8016328 <CST_modem_sim_init+0x534>)
 8016250:	b283      	uxth	r3, r0
 8016252:	4621      	mov	r1, r4
 8016254:	2002      	movs	r0, #2
 8016256:	f002 f8d1 	bl	80183fc <traceIF_uartPrint>
                CST_modem_define_pdn(NULL, (uint8_t *)"", (uint8_t *)"");
 801625a:	4a35      	ldr	r2, [pc, #212]	; (8016330 <CST_modem_sim_init+0x53c>)
 801625c:	4640      	mov	r0, r8
 801625e:	4611      	mov	r1, r2
 8016260:	e7d8      	b.n	8016214 <CST_modem_sim_init+0x420>
            if (crs_strlen(cst_cellular_params.sim_slot[cst_context.sim_slot_index].apn) == 0U)
 8016262:	250d      	movs	r5, #13
 8016264:	fb17 5000 	smlabb	r0, r7, r0, r5
 8016268:	4458      	add	r0, fp
 801626a:	f001 fe63 	bl	8017f34 <crs_strlen>
 801626e:	b9c8      	cbnz	r0, 80162a4 <CST_modem_sim_init+0x4b0>
              PRINT_CELLULAR_SERVICE("CST_modem_sim_init : APN is empty string \
 8016270:	4938      	ldr	r1, [pc, #224]	; (8016354 <CST_modem_sim_init+0x560>)
 8016272:	482d      	ldr	r0, [pc, #180]	; (8016328 <CST_modem_sim_init+0x534>)
 8016274:	f006 fe90 	bl	801cf98 <strcpy>
 8016278:	482b      	ldr	r0, [pc, #172]	; (8016328 <CST_modem_sim_init+0x534>)
 801627a:	f001 fe5b 	bl	8017f34 <crs_strlen>
 801627e:	4a2a      	ldr	r2, [pc, #168]	; (8016328 <CST_modem_sim_init+0x534>)
 8016280:	b283      	uxth	r3, r0
 8016282:	2101      	movs	r1, #1
 8016284:	2002      	movs	r0, #2
 8016286:	f001 fe93 	bl	8017fb0 <traceIF_itmPrint>
 801628a:	4827      	ldr	r0, [pc, #156]	; (8016328 <CST_modem_sim_init+0x534>)
 801628c:	f001 fe52 	bl	8017f34 <crs_strlen>
 8016290:	4a25      	ldr	r2, [pc, #148]	; (8016328 <CST_modem_sim_init+0x534>)
 8016292:	b283      	uxth	r3, r0
 8016294:	2101      	movs	r1, #1
 8016296:	2002      	movs	r0, #2
 8016298:	f002 f8b0 	bl	80183fc <traceIF_uartPrint>
              CST_modem_define_pdn(NULL, (uint8_t *)"", (uint8_t *)"");
 801629c:	4a24      	ldr	r2, [pc, #144]	; (8016330 <CST_modem_sim_init+0x53c>)
 801629e:	4620      	mov	r0, r4
 80162a0:	4611      	mov	r1, r2
 80162a2:	e7b7      	b.n	8016214 <CST_modem_sim_init+0x420>
              PRINT_CELLULAR_SERVICE("CST_modem_sim_init : call CST_modem_define_pdn with stored APN: \"%s\"\n\r",
 80162a4:	f89a 2019 	ldrb.w	r2, [sl, #25]
 80162a8:	492b      	ldr	r1, [pc, #172]	; (8016358 <CST_modem_sim_init+0x564>)
 80162aa:	481f      	ldr	r0, [pc, #124]	; (8016328 <CST_modem_sim_init+0x534>)
 80162ac:	fb17 5202 	smlabb	r2, r7, r2, r5
 80162b0:	445a      	add	r2, fp
 80162b2:	f006 fe01 	bl	801ceb8 <sprintf>
 80162b6:	481c      	ldr	r0, [pc, #112]	; (8016328 <CST_modem_sim_init+0x534>)
 80162b8:	f001 fe3c 	bl	8017f34 <crs_strlen>
 80162bc:	4a1a      	ldr	r2, [pc, #104]	; (8016328 <CST_modem_sim_init+0x534>)
 80162be:	b283      	uxth	r3, r0
 80162c0:	2101      	movs	r1, #1
 80162c2:	2002      	movs	r0, #2
 80162c4:	f001 fe74 	bl	8017fb0 <traceIF_itmPrint>
 80162c8:	4817      	ldr	r0, [pc, #92]	; (8016328 <CST_modem_sim_init+0x534>)
 80162ca:	f001 fe33 	bl	8017f34 <crs_strlen>
 80162ce:	4a16      	ldr	r2, [pc, #88]	; (8016328 <CST_modem_sim_init+0x534>)
 80162d0:	b283      	uxth	r3, r0
 80162d2:	2101      	movs	r1, #1
 80162d4:	2002      	movs	r0, #2
 80162d6:	f002 f891 	bl	80183fc <traceIF_uartPrint>
              CST_modem_define_pdn(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 80162da:	f89a 0019 	ldrb.w	r0, [sl, #25]
 80162de:	fb10 f007 	smulbb	r0, r0, r7
                                   cst_cellular_params.sim_slot[cst_sim_info.index_slot].password);
 80162e2:	f100 0250 	add.w	r2, r0, #80	; 0x50
                                   cst_cellular_params.sim_slot[cst_sim_info.index_slot].username,
 80162e6:	f100 012f 	add.w	r1, r0, #47	; 0x2f
              CST_modem_define_pdn(cst_cellular_params.sim_slot[cst_sim_info.index_slot].apn,
 80162ea:	300d      	adds	r0, #13
 80162ec:	445a      	add	r2, fp
 80162ee:	4459      	add	r1, fp
 80162f0:	4458      	add	r0, fp
 80162f2:	e78f      	b.n	8016214 <CST_modem_sim_init+0x420>
          PRINT_CELLULAR_SERVICE("CST_modem_sim_init : \
 80162f4:	4919      	ldr	r1, [pc, #100]	; (801635c <CST_modem_sim_init+0x568>)
 80162f6:	480c      	ldr	r0, [pc, #48]	; (8016328 <CST_modem_sim_init+0x534>)
 80162f8:	f006 fe4e 	bl	801cf98 <strcpy>
 80162fc:	480a      	ldr	r0, [pc, #40]	; (8016328 <CST_modem_sim_init+0x534>)
 80162fe:	f001 fe19 	bl	8017f34 <crs_strlen>
 8016302:	4a09      	ldr	r2, [pc, #36]	; (8016328 <CST_modem_sim_init+0x534>)
 8016304:	b283      	uxth	r3, r0
 8016306:	2101      	movs	r1, #1
 8016308:	4640      	mov	r0, r8
 801630a:	f001 fe51 	bl	8017fb0 <traceIF_itmPrint>
 801630e:	4806      	ldr	r0, [pc, #24]	; (8016328 <CST_modem_sim_init+0x534>)
 8016310:	f001 fe10 	bl	8017f34 <crs_strlen>
 8016314:	4a04      	ldr	r2, [pc, #16]	; (8016328 <CST_modem_sim_init+0x534>)
 8016316:	b283      	uxth	r3, r0
 8016318:	2101      	movs	r1, #1
 801631a:	4640      	mov	r0, r8
 801631c:	f002 f86e 	bl	80183fc <traceIF_uartPrint>
 8016320:	e77a      	b.n	8016218 <CST_modem_sim_init+0x424>
 8016322:	bf00      	nop
 8016324:	0802b299 	.word	0x0802b299
 8016328:	20008ff8 	.word	0x20008ff8
 801632c:	2000029c 	.word	0x2000029c
 8016330:	08028e1b 	.word	0x08028e1b
 8016334:	2000023c 	.word	0x2000023c
 8016338:	20008d7c 	.word	0x20008d7c
 801633c:	0802b2c1 	.word	0x0802b2c1
 8016340:	200002ba 	.word	0x200002ba
 8016344:	0802b2e1 	.word	0x0802b2e1
 8016348:	20008ad0 	.word	0x20008ad0
 801634c:	0802b30c 	.word	0x0802b30c
 8016350:	0802b355 	.word	0x0802b355
 8016354:	0802b3bc 	.word	0x0802b3bc
 8016358:	0802b422 	.word	0x0802b422
 801635c:	0802b469 	.word	0x0802b469
      __NOP(); /* Nothing to do */
 8016360:	bf00      	nop
      __NOP(); /* Nothing to do */
 8016362:	bf00      	nop
  PRINT_CELLULAR_SERVICE("Subscribe URC events: Network registration\n\r")
 8016364:	49be      	ldr	r1, [pc, #760]	; (8016660 <CST_modem_sim_init+0x86c>)
 8016366:	48bf      	ldr	r0, [pc, #764]	; (8016664 <CST_modem_sim_init+0x870>)
  (void)memset((void *)&cst_device_info, 0, sizeof(CS_DeviceInfo_t));
 8016368:	4dbf      	ldr	r5, [pc, #764]	; (8016668 <CST_modem_sim_init+0x874>)
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 801636a:	4cc0      	ldr	r4, [pc, #768]	; (801666c <CST_modem_sim_init+0x878>)
 801636c:	4ec0      	ldr	r6, [pc, #768]	; (8016670 <CST_modem_sim_init+0x87c>)
  PRINT_CELLULAR_SERVICE("Subscribe URC events: Network registration\n\r")
 801636e:	f006 fe13 	bl	801cf98 <strcpy>
 8016372:	48bc      	ldr	r0, [pc, #752]	; (8016664 <CST_modem_sim_init+0x870>)
 8016374:	f001 fdde 	bl	8017f34 <crs_strlen>
 8016378:	4aba      	ldr	r2, [pc, #744]	; (8016664 <CST_modem_sim_init+0x870>)
 801637a:	b283      	uxth	r3, r0
 801637c:	2101      	movs	r1, #1
 801637e:	2002      	movs	r0, #2
 8016380:	f001 fe16 	bl	8017fb0 <traceIF_itmPrint>
 8016384:	48b7      	ldr	r0, [pc, #732]	; (8016664 <CST_modem_sim_init+0x870>)
 8016386:	f001 fdd5 	bl	8017f34 <crs_strlen>
 801638a:	4ab6      	ldr	r2, [pc, #728]	; (8016664 <CST_modem_sim_init+0x870>)
 801638c:	b283      	uxth	r3, r0
 801638e:	2101      	movs	r1, #1
 8016390:	2002      	movs	r0, #2
 8016392:	f002 f833 	bl	80183fc <traceIF_uartPrint>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_CS_NETWORK_REG_STAT, CST_network_reg_callback);
 8016396:	49b7      	ldr	r1, [pc, #732]	; (8016674 <CST_modem_sim_init+0x880>)
 8016398:	2005      	movs	r0, #5
 801639a:	f7fd fc97 	bl	8013ccc <osCDS_subscribe_net_event>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_GPRS_NETWORK_REG_STAT, CST_network_reg_callback);
 801639e:	49b5      	ldr	r1, [pc, #724]	; (8016674 <CST_modem_sim_init+0x880>)
 80163a0:	2003      	movs	r0, #3
 80163a2:	f7fd fc93 	bl	8013ccc <osCDS_subscribe_net_event>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_EPS_NETWORK_REG_STAT, CST_network_reg_callback);
 80163a6:	49b3      	ldr	r1, [pc, #716]	; (8016674 <CST_modem_sim_init+0x880>)
 80163a8:	2001      	movs	r0, #1
 80163aa:	f7fd fc8f 	bl	8013ccc <osCDS_subscribe_net_event>
  PRINT_CELLULAR_SERVICE("Subscribe URC events: Location info\n\r")
 80163ae:	49b2      	ldr	r1, [pc, #712]	; (8016678 <CST_modem_sim_init+0x884>)
 80163b0:	48ac      	ldr	r0, [pc, #688]	; (8016664 <CST_modem_sim_init+0x870>)
 80163b2:	f006 fdf1 	bl	801cf98 <strcpy>
 80163b6:	48ab      	ldr	r0, [pc, #684]	; (8016664 <CST_modem_sim_init+0x870>)
 80163b8:	f001 fdbc 	bl	8017f34 <crs_strlen>
 80163bc:	4aa9      	ldr	r2, [pc, #676]	; (8016664 <CST_modem_sim_init+0x870>)
 80163be:	b283      	uxth	r3, r0
 80163c0:	2101      	movs	r1, #1
 80163c2:	2002      	movs	r0, #2
 80163c4:	f001 fdf4 	bl	8017fb0 <traceIF_itmPrint>
 80163c8:	48a6      	ldr	r0, [pc, #664]	; (8016664 <CST_modem_sim_init+0x870>)
 80163ca:	f001 fdb3 	bl	8017f34 <crs_strlen>
 80163ce:	4aa5      	ldr	r2, [pc, #660]	; (8016664 <CST_modem_sim_init+0x870>)
 80163d0:	b283      	uxth	r3, r0
 80163d2:	2101      	movs	r1, #1
 80163d4:	2002      	movs	r0, #2
 80163d6:	f002 f811 	bl	80183fc <traceIF_uartPrint>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_EPS_LOCATION_INFO, CST_location_info_callback);
 80163da:	49a8      	ldr	r1, [pc, #672]	; (801667c <CST_modem_sim_init+0x888>)
 80163dc:	2002      	movs	r0, #2
 80163de:	f7fd fc75 	bl	8013ccc <osCDS_subscribe_net_event>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_GPRS_LOCATION_INFO, CST_location_info_callback);
 80163e2:	49a6      	ldr	r1, [pc, #664]	; (801667c <CST_modem_sim_init+0x888>)
 80163e4:	2004      	movs	r0, #4
 80163e6:	f7fd fc71 	bl	8013ccc <osCDS_subscribe_net_event>
  (void)osCDS_subscribe_net_event(CS_URCEVENT_CS_LOCATION_INFO, CST_location_info_callback);
 80163ea:	49a4      	ldr	r1, [pc, #656]	; (801667c <CST_modem_sim_init+0x888>)
 80163ec:	2006      	movs	r0, #6
 80163ee:	f7fd fc6d 	bl	8013ccc <osCDS_subscribe_net_event>
  (void)memset((void *)&cst_device_info, 0, sizeof(CS_DeviceInfo_t));
 80163f2:	f44f 7281 	mov.w	r2, #258	; 0x102
 80163f6:	2100      	movs	r1, #0
 80163f8:	4628      	mov	r0, r5
      CST_get_device_all_infos(cst_cellular_params.target_state);
 80163fa:	f89b 8142 	ldrb.w	r8, [fp, #322]	; 0x142
  (void)memset((void *)&cst_device_info, 0, sizeof(CS_DeviceInfo_t));
 80163fe:	f006 fd2b 	bl	801ce58 <memset>
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016402:	8831      	ldrh	r1, [r6, #0]
 8016404:	489e      	ldr	r0, [pc, #632]	; (8016680 <CST_modem_sim_init+0x88c>)
 8016406:	23dc      	movs	r3, #220	; 0xdc
 8016408:	4622      	mov	r2, r4
 801640a:	f000 ff33 	bl	8017274 <dc_com_read>
  cst_device_info.field_requested = CS_DIF_IMEI_PRESENT;
 801640e:	2701      	movs	r7, #1
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016410:	4628      	mov	r0, r5
  cst_device_info.field_requested = CS_DIF_IMEI_PRESENT;
 8016412:	802f      	strh	r7, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016414:	f7fd fc46 	bl	8013ca4 <osCDS_get_device_info>
 8016418:	2800      	cmp	r0, #0
 801641a:	f040 82e9 	bne.w	80169f0 <CST_modem_sim_init+0xbfc>
    (void)memcpy(cst_cellular_info.imei, cst_device_info.u.imei, CA_IMEI_SIZE_MAX - 1U);
 801641e:	1cab      	adds	r3, r5, #2
 8016420:	f104 020a 	add.w	r2, r4, #10
 8016424:	f105 0112 	add.w	r1, r5, #18
 8016428:	f853 0b04 	ldr.w	r0, [r3], #4
 801642c:	f842 0b04 	str.w	r0, [r2], #4
 8016430:	428b      	cmp	r3, r1
 8016432:	d1f9      	bne.n	8016428 <CST_modem_sim_init+0x634>
    cst_cellular_info.imei[CA_IMEI_SIZE_MAX - 1U] = 0U;     /* to avoid a non null terminated string */
 8016434:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -IMEI: %s\n\r", cst_device_info.u.imei)
 8016436:	4a93      	ldr	r2, [pc, #588]	; (8016684 <CST_modem_sim_init+0x890>)
 8016438:	4993      	ldr	r1, [pc, #588]	; (8016688 <CST_modem_sim_init+0x894>)
 801643a:	488a      	ldr	r0, [pc, #552]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.imei[CA_IMEI_SIZE_MAX - 1U] = 0U;     /* to avoid a non null terminated string */
 801643c:	76a3      	strb	r3, [r4, #26]
    PRINT_CELLULAR_SERVICE(" -IMEI: %s\n\r", cst_device_info.u.imei)
 801643e:	f006 fd3b 	bl	801ceb8 <sprintf>
 8016442:	4888      	ldr	r0, [pc, #544]	; (8016664 <CST_modem_sim_init+0x870>)
 8016444:	f001 fd76 	bl	8017f34 <crs_strlen>
 8016448:	4a86      	ldr	r2, [pc, #536]	; (8016664 <CST_modem_sim_init+0x870>)
 801644a:	b283      	uxth	r3, r0
 801644c:	2101      	movs	r1, #1
 801644e:	2002      	movs	r0, #2
 8016450:	f001 fdae 	bl	8017fb0 <traceIF_itmPrint>
 8016454:	4883      	ldr	r0, [pc, #524]	; (8016664 <CST_modem_sim_init+0x870>)
 8016456:	f001 fd6d 	bl	8017f34 <crs_strlen>
 801645a:	4a82      	ldr	r2, [pc, #520]	; (8016664 <CST_modem_sim_init+0x870>)
 801645c:	b283      	uxth	r3, r0
 801645e:	2101      	movs	r1, #1
    PRINT_CELLULAR_SERVICE("IMEI error\n\r")
 8016460:	2002      	movs	r0, #2
 8016462:	f001 ffcb 	bl	80183fc <traceIF_uartPrint>
  cst_device_info.field_requested = CS_DIF_MANUF_NAME_PRESENT;
 8016466:	2702      	movs	r7, #2
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016468:	487f      	ldr	r0, [pc, #508]	; (8016668 <CST_modem_sim_init+0x874>)
  cst_device_info.field_requested = CS_DIF_MANUF_NAME_PRESENT;
 801646a:	802f      	strh	r7, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 801646c:	f7fd fc1a 	bl	8013ca4 <osCDS_get_device_info>
 8016470:	2800      	cmp	r0, #0
 8016472:	f040 82d3 	bne.w	8016a1c <CST_modem_sim_init+0xc28>
    (void)memcpy((CRC_CHAR_t *)cst_cellular_info.manufacturer_name,
 8016476:	4b83      	ldr	r3, [pc, #524]	; (8016684 <CST_modem_sim_init+0x890>)
 8016478:	4f84      	ldr	r7, [pc, #528]	; (801668c <CST_modem_sim_init+0x898>)
 801647a:	f103 0c20 	add.w	ip, r3, #32
 801647e:	6818      	ldr	r0, [r3, #0]
 8016480:	6859      	ldr	r1, [r3, #4]
 8016482:	463a      	mov	r2, r7
 8016484:	c203      	stmia	r2!, {r0, r1}
 8016486:	3308      	adds	r3, #8
 8016488:	4563      	cmp	r3, ip
 801648a:	4617      	mov	r7, r2
 801648c:	d1f7      	bne.n	801647e <CST_modem_sim_init+0x68a>
    cst_cellular_info.manufacturer_name[CA_MANUFACTURER_ID_SIZE_MAX - 1U] = 0U;
 801648e:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -MANUFACTURER: %s\n\r", cst_device_info.u.manufacturer_name)
 8016490:	4a7c      	ldr	r2, [pc, #496]	; (8016684 <CST_modem_sim_init+0x890>)
 8016492:	497f      	ldr	r1, [pc, #508]	; (8016690 <CST_modem_sim_init+0x89c>)
 8016494:	4873      	ldr	r0, [pc, #460]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.manufacturer_name[CA_MANUFACTURER_ID_SIZE_MAX - 1U] = 0U;
 8016496:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    PRINT_CELLULAR_SERVICE(" -MANUFACTURER: %s\n\r", cst_device_info.u.manufacturer_name)
 801649a:	f006 fd0d 	bl	801ceb8 <sprintf>
 801649e:	4871      	ldr	r0, [pc, #452]	; (8016664 <CST_modem_sim_init+0x870>)
 80164a0:	f001 fd48 	bl	8017f34 <crs_strlen>
 80164a4:	4a6f      	ldr	r2, [pc, #444]	; (8016664 <CST_modem_sim_init+0x870>)
 80164a6:	b283      	uxth	r3, r0
 80164a8:	2101      	movs	r1, #1
 80164aa:	2002      	movs	r0, #2
 80164ac:	f001 fd80 	bl	8017fb0 <traceIF_itmPrint>
 80164b0:	486c      	ldr	r0, [pc, #432]	; (8016664 <CST_modem_sim_init+0x870>)
 80164b2:	f001 fd3f 	bl	8017f34 <crs_strlen>
 80164b6:	4a6b      	ldr	r2, [pc, #428]	; (8016664 <CST_modem_sim_init+0x870>)
 80164b8:	b283      	uxth	r3, r0
 80164ba:	2101      	movs	r1, #1
 80164bc:	2002      	movs	r0, #2
    PRINT_CELLULAR_SERVICE("Manufacturer Name error\n\r")
 80164be:	f001 ff9d 	bl	80183fc <traceIF_uartPrint>
  cst_device_info.field_requested = CS_DIF_MODEL_PRESENT;
 80164c2:	2304      	movs	r3, #4
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 80164c4:	4868      	ldr	r0, [pc, #416]	; (8016668 <CST_modem_sim_init+0x874>)
  cst_device_info.field_requested = CS_DIF_MODEL_PRESENT;
 80164c6:	802b      	strh	r3, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 80164c8:	f7fd fbec 	bl	8013ca4 <osCDS_get_device_info>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	f040 82bd 	bne.w	8016a4c <CST_modem_sim_init+0xc58>
    (void)memcpy((CRC_CHAR_t *)cst_cellular_info.model,
 80164d2:	4b6c      	ldr	r3, [pc, #432]	; (8016684 <CST_modem_sim_init+0x890>)
 80164d4:	4a6f      	ldr	r2, [pc, #444]	; (8016694 <CST_modem_sim_init+0x8a0>)
 80164d6:	f103 0120 	add.w	r1, r3, #32
 80164da:	f853 0b04 	ldr.w	r0, [r3], #4
 80164de:	f842 0b04 	str.w	r0, [r2], #4
 80164e2:	428b      	cmp	r3, r1
 80164e4:	d1f9      	bne.n	80164da <CST_modem_sim_init+0x6e6>
    cst_cellular_info.model[CA_MODEL_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 80164e6:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -MODEL: %s\n\r", cst_device_info.u.model)
 80164e8:	4a66      	ldr	r2, [pc, #408]	; (8016684 <CST_modem_sim_init+0x890>)
 80164ea:	496b      	ldr	r1, [pc, #428]	; (8016698 <CST_modem_sim_init+0x8a4>)
 80164ec:	485d      	ldr	r0, [pc, #372]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.model[CA_MODEL_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 80164ee:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    PRINT_CELLULAR_SERVICE(" -MODEL: %s\n\r", cst_device_info.u.model)
 80164f2:	f006 fce1 	bl	801ceb8 <sprintf>
    PRINT_CELLULAR_SERVICE("Model error\n\r")
 80164f6:	485b      	ldr	r0, [pc, #364]	; (8016664 <CST_modem_sim_init+0x870>)
 80164f8:	f001 fd1c 	bl	8017f34 <crs_strlen>
 80164fc:	4a59      	ldr	r2, [pc, #356]	; (8016664 <CST_modem_sim_init+0x870>)
 80164fe:	b283      	uxth	r3, r0
 8016500:	2101      	movs	r1, #1
 8016502:	2002      	movs	r0, #2
 8016504:	f001 fd54 	bl	8017fb0 <traceIF_itmPrint>
 8016508:	4856      	ldr	r0, [pc, #344]	; (8016664 <CST_modem_sim_init+0x870>)
 801650a:	f001 fd13 	bl	8017f34 <crs_strlen>
 801650e:	4a55      	ldr	r2, [pc, #340]	; (8016664 <CST_modem_sim_init+0x870>)
 8016510:	b283      	uxth	r3, r0
 8016512:	2101      	movs	r1, #1
 8016514:	2002      	movs	r0, #2
 8016516:	f001 ff71 	bl	80183fc <traceIF_uartPrint>
  cst_device_info.field_requested = CS_DIF_REV_PRESENT;
 801651a:	2308      	movs	r3, #8
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 801651c:	4852      	ldr	r0, [pc, #328]	; (8016668 <CST_modem_sim_init+0x874>)
  cst_device_info.field_requested = CS_DIF_REV_PRESENT;
 801651e:	802b      	strh	r3, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016520:	f7fd fbc0 	bl	8013ca4 <osCDS_get_device_info>
 8016524:	2800      	cmp	r0, #0
 8016526:	f040 8299 	bne.w	8016a5c <CST_modem_sim_init+0xc68>
    (void)memcpy((CRC_CHAR_t *)cst_cellular_info.revision,
 801652a:	4b56      	ldr	r3, [pc, #344]	; (8016684 <CST_modem_sim_init+0x890>)
 801652c:	4a5b      	ldr	r2, [pc, #364]	; (801669c <CST_modem_sim_init+0x8a8>)
 801652e:	f103 0120 	add.w	r1, r3, #32
 8016532:	f853 0b04 	ldr.w	r0, [r3], #4
 8016536:	f842 0b04 	str.w	r0, [r2], #4
 801653a:	428b      	cmp	r3, r1
 801653c:	d1f9      	bne.n	8016532 <CST_modem_sim_init+0x73e>
    cst_cellular_info.revision[CA_REVISION_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 801653e:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -REVISION: %s\n\r", cst_device_info.u.revision)
 8016540:	4a50      	ldr	r2, [pc, #320]	; (8016684 <CST_modem_sim_init+0x890>)
 8016542:	4957      	ldr	r1, [pc, #348]	; (80166a0 <CST_modem_sim_init+0x8ac>)
 8016544:	4847      	ldr	r0, [pc, #284]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.revision[CA_REVISION_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 8016546:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
    PRINT_CELLULAR_SERVICE(" -REVISION: %s\n\r", cst_device_info.u.revision)
 801654a:	f006 fcb5 	bl	801ceb8 <sprintf>
    PRINT_CELLULAR_SERVICE("Revision error\n\r")
 801654e:	4845      	ldr	r0, [pc, #276]	; (8016664 <CST_modem_sim_init+0x870>)
 8016550:	f001 fcf0 	bl	8017f34 <crs_strlen>
 8016554:	4a43      	ldr	r2, [pc, #268]	; (8016664 <CST_modem_sim_init+0x870>)
 8016556:	b283      	uxth	r3, r0
 8016558:	2101      	movs	r1, #1
 801655a:	2002      	movs	r0, #2
 801655c:	f001 fd28 	bl	8017fb0 <traceIF_itmPrint>
 8016560:	4840      	ldr	r0, [pc, #256]	; (8016664 <CST_modem_sim_init+0x870>)
 8016562:	f001 fce7 	bl	8017f34 <crs_strlen>
 8016566:	4a3f      	ldr	r2, [pc, #252]	; (8016664 <CST_modem_sim_init+0x870>)
 8016568:	b283      	uxth	r3, r0
 801656a:	2101      	movs	r1, #1
 801656c:	2002      	movs	r0, #2
 801656e:	f001 ff45 	bl	80183fc <traceIF_uartPrint>
  cst_device_info.field_requested = CS_DIF_SN_PRESENT;
 8016572:	2310      	movs	r3, #16
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016574:	483c      	ldr	r0, [pc, #240]	; (8016668 <CST_modem_sim_init+0x874>)
  cst_device_info.field_requested = CS_DIF_SN_PRESENT;
 8016576:	802b      	strh	r3, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 8016578:	f7fd fb94 	bl	8013ca4 <osCDS_get_device_info>
 801657c:	2800      	cmp	r0, #0
 801657e:	f040 8275 	bne.w	8016a6c <CST_modem_sim_init+0xc78>
    (void)memcpy((CRC_CHAR_t *)cst_cellular_info.serial_number,
 8016582:	4b40      	ldr	r3, [pc, #256]	; (8016684 <CST_modem_sim_init+0x890>)
 8016584:	4a47      	ldr	r2, [pc, #284]	; (80166a4 <CST_modem_sim_init+0x8b0>)
 8016586:	f103 0120 	add.w	r1, r3, #32
 801658a:	f853 0b04 	ldr.w	r0, [r3], #4
 801658e:	f842 0b04 	str.w	r0, [r2], #4
 8016592:	428b      	cmp	r3, r1
 8016594:	d1f9      	bne.n	801658a <CST_modem_sim_init+0x796>
    cst_cellular_info.serial_number[CA_SERIAL_NUMBER_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 8016596:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -SERIAL NBR: %s\n\r", cst_device_info.u.serial_number)
 8016598:	4a3a      	ldr	r2, [pc, #232]	; (8016684 <CST_modem_sim_init+0x890>)
 801659a:	4943      	ldr	r1, [pc, #268]	; (80166a8 <CST_modem_sim_init+0x8b4>)
 801659c:	4831      	ldr	r0, [pc, #196]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.serial_number[CA_SERIAL_NUMBER_ID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 801659e:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
    PRINT_CELLULAR_SERVICE(" -SERIAL NBR: %s\n\r", cst_device_info.u.serial_number)
 80165a2:	f006 fc89 	bl	801ceb8 <sprintf>
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 80165a6:	482f      	ldr	r0, [pc, #188]	; (8016664 <CST_modem_sim_init+0x870>)
 80165a8:	f001 fcc4 	bl	8017f34 <crs_strlen>
 80165ac:	4a2d      	ldr	r2, [pc, #180]	; (8016664 <CST_modem_sim_init+0x870>)
 80165ae:	b283      	uxth	r3, r0
 80165b0:	2101      	movs	r1, #1
 80165b2:	2002      	movs	r0, #2
 80165b4:	f001 fcfc 	bl	8017fb0 <traceIF_itmPrint>
 80165b8:	482a      	ldr	r0, [pc, #168]	; (8016664 <CST_modem_sim_init+0x870>)
 80165ba:	f001 fcbb 	bl	8017f34 <crs_strlen>
 80165be:	4a29      	ldr	r2, [pc, #164]	; (8016664 <CST_modem_sim_init+0x870>)
 80165c0:	b283      	uxth	r3, r0
 80165c2:	2101      	movs	r1, #1
 80165c4:	2002      	movs	r0, #2
 80165c6:	f001 ff19 	bl	80183fc <traceIF_uartPrint>
  cst_device_info.field_requested = CS_DIF_ICCID_PRESENT;
 80165ca:	2380      	movs	r3, #128	; 0x80
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 80165cc:	4826      	ldr	r0, [pc, #152]	; (8016668 <CST_modem_sim_init+0x874>)
  cst_device_info.field_requested = CS_DIF_ICCID_PRESENT;
 80165ce:	802b      	strh	r3, [r5, #0]
  if (osCDS_get_device_info(&cst_device_info) == CELLULAR_OK)
 80165d0:	f7fd fb68 	bl	8013ca4 <osCDS_get_device_info>
 80165d4:	2800      	cmp	r0, #0
 80165d6:	f040 8251 	bne.w	8016a7c <CST_modem_sim_init+0xc88>
    (void)memcpy((CRC_CHAR_t *)cst_cellular_info.iccid,
 80165da:	4b2a      	ldr	r3, [pc, #168]	; (8016684 <CST_modem_sim_init+0x890>)
 80165dc:	4a33      	ldr	r2, [pc, #204]	; (80166ac <CST_modem_sim_init+0x8b8>)
 80165de:	f103 0c10 	add.w	ip, r3, #16
 80165e2:	6818      	ldr	r0, [r3, #0]
 80165e4:	6859      	ldr	r1, [r3, #4]
 80165e6:	4617      	mov	r7, r2
 80165e8:	c703      	stmia	r7!, {r0, r1}
 80165ea:	3308      	adds	r3, #8
 80165ec:	4563      	cmp	r3, ip
 80165ee:	463a      	mov	r2, r7
 80165f0:	d1f7      	bne.n	80165e2 <CST_modem_sim_init+0x7ee>
 80165f2:	6818      	ldr	r0, [r3, #0]
 80165f4:	6038      	str	r0, [r7, #0]
    cst_cellular_info.iccid[CA_ICCID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 80165f6:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE(" -ICCID: %s\n\r", cst_device_info.u.iccid)
 80165f8:	4a22      	ldr	r2, [pc, #136]	; (8016684 <CST_modem_sim_init+0x890>)
 80165fa:	492d      	ldr	r1, [pc, #180]	; (80166b0 <CST_modem_sim_init+0x8bc>)
 80165fc:	4819      	ldr	r0, [pc, #100]	; (8016664 <CST_modem_sim_init+0x870>)
    cst_cellular_info.iccid[CA_ICCID_SIZE_MAX - 1U] = 0U; /* to avoid a non null terminated string */
 80165fe:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    PRINT_CELLULAR_SERVICE(" -ICCID: %s\n\r", cst_device_info.u.iccid)
 8016602:	f006 fc59 	bl	801ceb8 <sprintf>
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 8016606:	4817      	ldr	r0, [pc, #92]	; (8016664 <CST_modem_sim_init+0x870>)
 8016608:	f001 fc94 	bl	8017f34 <crs_strlen>
 801660c:	4a15      	ldr	r2, [pc, #84]	; (8016664 <CST_modem_sim_init+0x870>)
 801660e:	b283      	uxth	r3, r0
 8016610:	2101      	movs	r1, #1
 8016612:	2002      	movs	r0, #2
 8016614:	f001 fccc 	bl	8017fb0 <traceIF_itmPrint>
 8016618:	4812      	ldr	r0, [pc, #72]	; (8016664 <CST_modem_sim_init+0x870>)
 801661a:	f001 fc8b 	bl	8017f34 <crs_strlen>
 801661e:	4a11      	ldr	r2, [pc, #68]	; (8016664 <CST_modem_sim_init+0x870>)
 8016620:	b283      	uxth	r3, r0
 8016622:	2101      	movs	r1, #1
 8016624:	2002      	movs	r0, #2
 8016626:	f001 fee9 	bl	80183fc <traceIF_uartPrint>
  (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 801662a:	4a10      	ldr	r2, [pc, #64]	; (801666c <CST_modem_sim_init+0x878>)
 801662c:	8831      	ldrh	r1, [r6, #0]
 801662e:	4814      	ldr	r0, [pc, #80]	; (8016680 <CST_modem_sim_init+0x88c>)
 8016630:	23dc      	movs	r3, #220	; 0xdc
 8016632:	f000 fdbb 	bl	80171ac <dc_com_write>
  if (target_state == DC_TARGET_STATE_FULL)
 8016636:	f1b8 0f02 	cmp.w	r8, #2
 801663a:	f040 80ea 	bne.w	8016812 <CST_modem_sim_init+0xa1e>
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 801663e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80166bc <CST_modem_sim_init+0x8c8>
 8016642:	4a1c      	ldr	r2, [pc, #112]	; (80166b4 <CST_modem_sim_init+0x8c0>)
 8016644:	f8b9 1000 	ldrh.w	r1, [r9]
 8016648:	480d      	ldr	r0, [pc, #52]	; (8016680 <CST_modem_sim_init+0x88c>)
    cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_CONNECTION_ONGOING;
 801664a:	4f1b      	ldr	r7, [pc, #108]	; (80166b8 <CST_modem_sim_init+0x8c4>)
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 801664c:	2320      	movs	r3, #32
 801664e:	f000 fe11 	bl	8017274 <dc_com_read>
    cst_sim_info.rt_state   = DC_SERVICE_ON;
 8016652:	2307      	movs	r3, #7
 8016654:	f88a 3008 	strb.w	r3, [sl, #8]
    cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_CONNECTION_ONGOING;
 8016658:	7c3b      	ldrb	r3, [r7, #16]
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 801665a:	f8b9 1000 	ldrh.w	r1, [r9]
 801665e:	e02f      	b.n	80166c0 <CST_modem_sim_init+0x8cc>
 8016660:	0802b66c 	.word	0x0802b66c
 8016664:	20008ff8 	.word	0x20008ff8
 8016668:	20003fdc 	.word	0x20003fdc
 801666c:	20008c80 	.word	0x20008c80
 8016670:	20000240 	.word	0x20000240
 8016674:	08015a81 	.word	0x08015a81
 8016678:	0802b699 	.word	0x0802b699
 801667c:	08015a45 	.word	0x08015a45
 8016680:	20008d7c 	.word	0x20008d7c
 8016684:	20003fde 	.word	0x20003fde
 8016688:	0802b6bf 	.word	0x0802b6bf
 801668c:	20008cbc 	.word	0x20008cbc
 8016690:	0802b6d9 	.word	0x0802b6d9
 8016694:	20008cdd 	.word	0x20008cdd
 8016698:	0802b708 	.word	0x0802b708
 801669c:	20008cfe 	.word	0x20008cfe
 80166a0:	0802b724 	.word	0x0802b724
 80166a4:	20008d1f 	.word	0x20008d1f
 80166a8:	0802b746 	.word	0x0802b746
 80166ac:	20008d40 	.word	0x20008d40
 80166b0:	0802b76f 	.word	0x0802b76f
 80166b4:	20008d5c 	.word	0x20008d5c
 80166b8:	2000029c 	.word	0x2000029c
 80166bc:	20000248 	.word	0x20000248
 80166c0:	4ab8      	ldr	r2, [pc, #736]	; (80169a4 <CST_modem_sim_init+0xbb0>)
 80166c2:	48b9      	ldr	r0, [pc, #740]	; (80169a8 <CST_modem_sim_init+0xbb4>)
    cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_CONNECTION_ONGOING;
 80166c4:	4453      	add	r3, sl
    while (end_of_loop != false)
 80166c6:	f04f 09c9 	mov.w	r9, #201	; 0xc9
    cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_CONNECTION_ONGOING;
 80166ca:	f883 801b 	strb.w	r8, [r3, #27]
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 80166ce:	2320      	movs	r3, #32
 80166d0:	f000 fd6c 	bl	80171ac <dc_com_write>
      cs_status = osCDS_get_device_info(&cst_device_info);
 80166d4:	f8df 8310 	ldr.w	r8, [pc, #784]	; 80169e8 <CST_modem_sim_init+0xbf4>
      cst_device_info.field_requested = CS_DIF_IMSI_PRESENT;
 80166d8:	f04f 0320 	mov.w	r3, #32
      cs_status = osCDS_get_device_info(&cst_device_info);
 80166dc:	4640      	mov	r0, r8
      cst_device_info.field_requested = CS_DIF_IMSI_PRESENT;
 80166de:	802b      	strh	r3, [r5, #0]
      cs_status = osCDS_get_device_info(&cst_device_info);
 80166e0:	f7fd fae0 	bl	8013ca4 <osCDS_get_device_info>
      if (cs_status == CELLULAR_OK)
 80166e4:	4602      	mov	r2, r0
 80166e6:	2800      	cmp	r0, #0
 80166e8:	f040 81f1 	bne.w	8016ace <CST_modem_sim_init+0xcda>
        (void)ATutil_convertHexaStringToInt64(cst_device_info.u.imsi, 15U, &cst_imsi_high, &cst_imsi_low);
 80166ec:	ab09      	add	r3, sp, #36	; 0x24
 80166ee:	aa08      	add	r2, sp, #32
 80166f0:	210f      	movs	r1, #15
 80166f2:	48ae      	ldr	r0, [pc, #696]	; (80169ac <CST_modem_sim_init+0xbb8>)
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void *)&nfmc_info, sizeof(nfmc_info));
 80166f4:	4dae      	ldr	r5, [pc, #696]	; (80169b0 <CST_modem_sim_init+0xbbc>)
        (void)ATutil_convertHexaStringToInt64(cst_device_info.u.imsi, 15U, &cst_imsi_high, &cst_imsi_low);
 80166f6:	f7f8 f837 	bl	800e768 <ATutil_convertHexaStringToInt64>
        PRINT_CELLULAR_SERVICE(" -IMSI: %s\n\r", cst_device_info.u.imsi)
 80166fa:	4aac      	ldr	r2, [pc, #688]	; (80169ac <CST_modem_sim_init+0xbb8>)
 80166fc:	49ad      	ldr	r1, [pc, #692]	; (80169b4 <CST_modem_sim_init+0xbc0>)
 80166fe:	48ae      	ldr	r0, [pc, #696]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016700:	f006 fbda 	bl	801ceb8 <sprintf>
 8016704:	48ac      	ldr	r0, [pc, #688]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016706:	f001 fc15 	bl	8017f34 <crs_strlen>
 801670a:	4aab      	ldr	r2, [pc, #684]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801670c:	b283      	uxth	r3, r0
 801670e:	2101      	movs	r1, #1
 8016710:	2002      	movs	r0, #2
 8016712:	f001 fc4d 	bl	8017fb0 <traceIF_itmPrint>
 8016716:	48a8      	ldr	r0, [pc, #672]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016718:	f001 fc0c 	bl	8017f34 <crs_strlen>
 801671c:	4aa6      	ldr	r2, [pc, #664]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801671e:	b283      	uxth	r3, r0
 8016720:	2101      	movs	r1, #1
 8016722:	2002      	movs	r0, #2
 8016724:	f001 fe6a 	bl	80183fc <traceIF_uartPrint>
        CST_fill_nfmc_tempo(cst_imsi_high, cst_imsi_low);
 8016728:	9b08      	ldr	r3, [sp, #32]
 801672a:	9302      	str	r3, [sp, #8]
 801672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801672e:	9303      	str	r3, [sp, #12]
  (void)dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void *)&nfmc_info, sizeof(nfmc_info));
 8016730:	232c      	movs	r3, #44	; 0x2c
 8016732:	eb0d 0203 	add.w	r2, sp, r3
 8016736:	8829      	ldrh	r1, [r5, #0]
 8016738:	489b      	ldr	r0, [pc, #620]	; (80169a8 <CST_modem_sim_init+0xbb4>)
 801673a:	f000 fd9b 	bl	8017274 <dc_com_read>
  if (cst_cellular_params.nfmc_active != 0U)
 801673e:	f89b 218d 	ldrb.w	r2, [fp, #397]	; 0x18d
 8016742:	4b9e      	ldr	r3, [pc, #632]	; (80169bc <CST_modem_sim_init+0xbc8>)
 8016744:	9505      	str	r5, [sp, #20]
 8016746:	2a00      	cmp	r2, #0
 8016748:	f000 81bb 	beq.w	8016ac2 <CST_modem_sim_init+0xcce>
    cst_nfmc_context.active = true;
 801674c:	2501      	movs	r5, #1
 801674e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80169ec <CST_modem_sim_init+0xbf8>
      PRINT_CELLULAR_SERVICE("VALUE/TEMPO %ld/%ld\n\r",  cst_cellular_params.nfmc_value[i], cst_nfmc_context.tempo[i])
 8016752:	4f99      	ldr	r7, [pc, #612]	; (80169b8 <CST_modem_sim_init+0xbc4>)
    cst_nfmc_context.active = true;
 8016754:	701d      	strb	r5, [r3, #0]
    nfmc_info.activate = 1U;
 8016756:	950e      	str	r5, [sp, #56]	; 0x38
    for (i = 0U; i < CA_NFMC_VALUES_MAX_NB; i++)
 8016758:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
      cst_nfmc_context.tempo[i] = (0xffffffffU & temp_value32);
 801675c:	9304      	str	r3, [sp, #16]
      if (cst_cellular_params.nfmc_value[i] != 0U)
 801675e:	f859 2b04 	ldr.w	r2, [r9], #4
 8016762:	2a00      	cmp	r2, #0
 8016764:	f000 81ab 	beq.w	8016abe <CST_modem_sim_init+0xcca>
    tmp_m = val_m % div_m;
 8016768:	9b02      	ldr	r3, [sp, #8]
    tmp_l = val_l;
 801676a:	9803      	ldr	r0, [sp, #12]
    tmp_m = val_m % div_m;
 801676c:	fbb3 f1f2 	udiv	r1, r3, r2
    while (tmp_m > 0U)
 8016770:	4694      	mov	ip, r2
    tmp_m = val_m % div_m;
 8016772:	fb02 3111 	mls	r1, r2, r1, r3
  div_l = 0U;
 8016776:	2300      	movs	r3, #0
    while (tmp_m > 0U)
 8016778:	2900      	cmp	r1, #0
 801677a:	f040 8187 	bne.w	8016a8c <CST_modem_sim_init+0xc98>
    tmp_l = tmp_l % div;
 801677e:	fbb0 f3f2 	udiv	r3, r0, r2
 8016782:	fb02 0313 	mls	r3, r2, r3, r0
      cst_nfmc_context.tempo[i] = (0xffffffffU & temp_value32);
 8016786:	9904      	ldr	r1, [sp, #16]
      temp_value32 = temp_value32 + cst_cellular_params.nfmc_value[i];
 8016788:	4413      	add	r3, r2
      cst_nfmc_context.tempo[i] = (0xffffffffU & temp_value32);
 801678a:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
      nfmc_info.tempo[i] = cst_nfmc_context.tempo[i];
 801678e:	f848 3b04 	str.w	r3, [r8], #4
      PRINT_CELLULAR_SERVICE("VALUE/TEMPO %ld/%ld\n\r",  cst_cellular_params.nfmc_value[i], cst_nfmc_context.tempo[i])
 8016792:	498b      	ldr	r1, [pc, #556]	; (80169c0 <CST_modem_sim_init+0xbcc>)
 8016794:	4638      	mov	r0, r7
 8016796:	f006 fb8f 	bl	801ceb8 <sprintf>
 801679a:	4638      	mov	r0, r7
 801679c:	f001 fbca 	bl	8017f34 <crs_strlen>
 80167a0:	463a      	mov	r2, r7
 80167a2:	b283      	uxth	r3, r0
 80167a4:	2101      	movs	r1, #1
 80167a6:	2002      	movs	r0, #2
 80167a8:	f001 fc02 	bl	8017fb0 <traceIF_itmPrint>
 80167ac:	4638      	mov	r0, r7
 80167ae:	f001 fbc1 	bl	8017f34 <crs_strlen>
 80167b2:	3501      	adds	r5, #1
 80167b4:	b283      	uxth	r3, r0
 80167b6:	463a      	mov	r2, r7
 80167b8:	2101      	movs	r1, #1
 80167ba:	2002      	movs	r0, #2
 80167bc:	f001 fe1e 	bl	80183fc <traceIF_uartPrint>
    for (i = 0U; i < CA_NFMC_VALUES_MAX_NB; i++)
 80167c0:	2d08      	cmp	r5, #8
 80167c2:	d1cc      	bne.n	801675e <CST_modem_sim_init+0x96a>
    nfmc_info.rt_state = DC_SERVICE_ON;
 80167c4:	2307      	movs	r3, #7
 80167c6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  (void)dc_com_write(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void *)&nfmc_info, sizeof(nfmc_info));
 80167ca:	9905      	ldr	r1, [sp, #20]
 80167cc:	4876      	ldr	r0, [pc, #472]	; (80169a8 <CST_modem_sim_init+0xbb4>)
 80167ce:	8809      	ldrh	r1, [r1, #0]
 80167d0:	232c      	movs	r3, #44	; 0x2c
 80167d2:	eb0d 0203 	add.w	r2, sp, r3
 80167d6:	f000 fce9 	bl	80171ac <dc_com_write>
        (void)memcpy((CRC_CHAR_t *)cst_sim_info.imsi,
 80167da:	4b74      	ldr	r3, [pc, #464]	; (80169ac <CST_modem_sim_init+0xbb8>)
 80167dc:	4a79      	ldr	r2, [pc, #484]	; (80169c4 <CST_modem_sim_init+0xbd0>)
 80167de:	f103 010c 	add.w	r1, r3, #12
 80167e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80167e6:	f842 0b04 	str.w	r0, [r2], #4
 80167ea:	428b      	cmp	r3, r1
 80167ec:	d1f9      	bne.n	80167e2 <CST_modem_sim_init+0x9ee>
 80167ee:	8819      	ldrh	r1, [r3, #0]
 80167f0:	8011      	strh	r1, [r2, #0]
 80167f2:	789b      	ldrb	r3, [r3, #2]
 80167f4:	7093      	strb	r3, [r2, #2]
        cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_READY;
 80167f6:	4b74      	ldr	r3, [pc, #464]	; (80169c8 <CST_modem_sim_init+0xbd4>)
 80167f8:	7c1b      	ldrb	r3, [r3, #16]
        cst_sim_info.imsi[CA_IMSI_SIZE_MAX - 1U] = 0;  /* to avoid a non null terminated string */
 80167fa:	2200      	movs	r2, #0
 80167fc:	f88a 2018 	strb.w	r2, [sl, #24]
        cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_READY;
 8016800:	4453      	add	r3, sl
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 8016802:	4972      	ldr	r1, [pc, #456]	; (80169cc <CST_modem_sim_init+0xbd8>)
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_ERROR;
 8016804:	76da      	strb	r2, [r3, #27]
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 8016806:	8809      	ldrh	r1, [r1, #0]
 8016808:	4a66      	ldr	r2, [pc, #408]	; (80169a4 <CST_modem_sim_init+0xbb0>)
 801680a:	4867      	ldr	r0, [pc, #412]	; (80169a8 <CST_modem_sim_init+0xbb4>)
 801680c:	2320      	movs	r3, #32
 801680e:	f000 fccd 	bl	80171ac <dc_com_write>
      if (cst_cellular_params.target_state != DC_TARGET_STATE_SIM_ONLY)
 8016812:	f89b 5142 	ldrb.w	r5, [fp, #322]	; 0x142
 8016816:	2d01      	cmp	r5, #1
 8016818:	f000 8180 	beq.w	8016b1c <CST_modem_sim_init+0xd28>
        CST_set_state(CST_MODEM_READY_STATE);
 801681c:	2002      	movs	r0, #2
 801681e:	f7fd fcb3 	bl	8014188 <CST_set_state>
        CST_send_message(CST_MESSAGE_CS_EVENT, CST_MODEM_READY_EVENT);
 8016822:	2102      	movs	r1, #2
 8016824:	2000      	movs	r0, #0
 8016826:	f7fd fc07 	bl	8014038 <CST_send_message>
 801682a:	f7ff bb50 	b.w	8015ece <CST_modem_sim_init+0xda>
    else if (cs_status == CELLULAR_SIM_PIN_OR_PUK_LOCKED)
 801682e:	2c05      	cmp	r4, #5
 8016830:	d155      	bne.n	80168de <CST_modem_sim_init+0xaea>
      PRINT_FORCE("==================================\n\r")
 8016832:	4967      	ldr	r1, [pc, #412]	; (80169d0 <CST_modem_sim_init+0xbdc>)
 8016834:	4860      	ldr	r0, [pc, #384]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016836:	f006 fbaf 	bl	801cf98 <strcpy>
 801683a:	485f      	ldr	r0, [pc, #380]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801683c:	f001 fb7a 	bl	8017f34 <crs_strlen>
 8016840:	4a5d      	ldr	r2, [pc, #372]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016842:	b283      	uxth	r3, r0
 8016844:	2101      	movs	r1, #1
 8016846:	2002      	movs	r0, #2
 8016848:	f001 fbb2 	bl	8017fb0 <traceIF_itmPrint>
 801684c:	485a      	ldr	r0, [pc, #360]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801684e:	f001 fb71 	bl	8017f34 <crs_strlen>
 8016852:	4959      	ldr	r1, [pc, #356]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016854:	b282      	uxth	r2, r0
 8016856:	2002      	movs	r0, #2
 8016858:	f001 fdea 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE(" WARNING: PIN OK PUK LOCKED !!!  \n\r")
 801685c:	495d      	ldr	r1, [pc, #372]	; (80169d4 <CST_modem_sim_init+0xbe0>)
 801685e:	4856      	ldr	r0, [pc, #344]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016860:	f006 fb9a 	bl	801cf98 <strcpy>
 8016864:	4854      	ldr	r0, [pc, #336]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016866:	f001 fb65 	bl	8017f34 <crs_strlen>
 801686a:	4a53      	ldr	r2, [pc, #332]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801686c:	b283      	uxth	r3, r0
 801686e:	2101      	movs	r1, #1
 8016870:	2002      	movs	r0, #2
 8016872:	f001 fb9d 	bl	8017fb0 <traceIF_itmPrint>
 8016876:	4850      	ldr	r0, [pc, #320]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016878:	f001 fb5c 	bl	8017f34 <crs_strlen>
 801687c:	494e      	ldr	r1, [pc, #312]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801687e:	b282      	uxth	r2, r0
 8016880:	2002      	movs	r0, #2
 8016882:	f001 fdd5 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE(" PROCESSING STOPPED\n\r")
 8016886:	4954      	ldr	r1, [pc, #336]	; (80169d8 <CST_modem_sim_init+0xbe4>)
 8016888:	484b      	ldr	r0, [pc, #300]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801688a:	f006 fb85 	bl	801cf98 <strcpy>
 801688e:	484a      	ldr	r0, [pc, #296]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016890:	f001 fb50 	bl	8017f34 <crs_strlen>
 8016894:	4a48      	ldr	r2, [pc, #288]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016896:	b283      	uxth	r3, r0
 8016898:	2101      	movs	r1, #1
 801689a:	2002      	movs	r0, #2
 801689c:	f001 fb88 	bl	8017fb0 <traceIF_itmPrint>
 80168a0:	4845      	ldr	r0, [pc, #276]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168a2:	f001 fb47 	bl	8017f34 <crs_strlen>
 80168a6:	4944      	ldr	r1, [pc, #272]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168a8:	b282      	uxth	r2, r0
 80168aa:	2002      	movs	r0, #2
 80168ac:	f001 fdc0 	bl	8018430 <traceIF_uartPrintForce>
      PRINT_FORCE("==================================\n\r")
 80168b0:	4947      	ldr	r1, [pc, #284]	; (80169d0 <CST_modem_sim_init+0xbdc>)
 80168b2:	4841      	ldr	r0, [pc, #260]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168b4:	f006 fb70 	bl	801cf98 <strcpy>
 80168b8:	483f      	ldr	r0, [pc, #252]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168ba:	f001 fb3b 	bl	8017f34 <crs_strlen>
 80168be:	4a3e      	ldr	r2, [pc, #248]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168c0:	b283      	uxth	r3, r0
 80168c2:	2101      	movs	r1, #1
 80168c4:	2002      	movs	r0, #2
 80168c6:	f001 fb73 	bl	8017fb0 <traceIF_itmPrint>
 80168ca:	483b      	ldr	r0, [pc, #236]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168cc:	f001 fb32 	bl	8017f34 <crs_strlen>
 80168d0:	4939      	ldr	r1, [pc, #228]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 80168d2:	b282      	uxth	r2, r0
 80168d4:	2002      	movs	r0, #2
 80168d6:	f001 fdab 	bl	8018430 <traceIF_uartPrintForce>
        __NOP(); /* Nothing to do */
 80168da:	bf00      	nop
      for (;;)
 80168dc:	e7fd      	b.n	80168da <CST_modem_sim_init+0xae6>
      __NOP(); /* Nothing to do */
 80168de:	bf00      	nop
    if ((cs_status == CELLULAR_SIM_NOT_INSERTED) || (cs_status == CELLULAR_ERROR) || (cs_status == CELLULAR_SIM_ERROR))
 80168e0:	2c07      	cmp	r4, #7
 80168e2:	f63f ad3f 	bhi.w	8016364 <CST_modem_sim_init+0x570>
 80168e6:	2092      	movs	r0, #146	; 0x92
 80168e8:	fa20 f404 	lsr.w	r4, r0, r4
 80168ec:	43e4      	mvns	r4, r4
 80168ee:	f014 0401 	ands.w	r4, r4, #1
 80168f2:	f47f ad37 	bne.w	8016364 <CST_modem_sim_init+0x570>
      PRINT_CELLULAR_SERVICE("CST_modem_sim_init : Can't find sim on current slot. Increment sim slot.\n\r")
 80168f6:	4939      	ldr	r1, [pc, #228]	; (80169dc <CST_modem_sim_init+0xbe8>)
 80168f8:	482f      	ldr	r0, [pc, #188]	; (80169b8 <CST_modem_sim_init+0xbc4>)
      (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 80168fa:	4d34      	ldr	r5, [pc, #208]	; (80169cc <CST_modem_sim_init+0xbd8>)
      cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_ERROR;
 80168fc:	4e32      	ldr	r6, [pc, #200]	; (80169c8 <CST_modem_sim_init+0xbd4>)
      PRINT_CELLULAR_SERVICE("CST_modem_sim_init : Can't find sim on current slot. Increment sim slot.\n\r")
 80168fe:	f006 fb4b 	bl	801cf98 <strcpy>
 8016902:	482d      	ldr	r0, [pc, #180]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016904:	f001 fb16 	bl	8017f34 <crs_strlen>
 8016908:	4a2b      	ldr	r2, [pc, #172]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801690a:	b283      	uxth	r3, r0
 801690c:	2101      	movs	r1, #1
 801690e:	2002      	movs	r0, #2
 8016910:	f001 fb4e 	bl	8017fb0 <traceIF_itmPrint>
 8016914:	4828      	ldr	r0, [pc, #160]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016916:	f001 fb0d 	bl	8017f34 <crs_strlen>
 801691a:	4a27      	ldr	r2, [pc, #156]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801691c:	b283      	uxth	r3, r0
 801691e:	2101      	movs	r1, #1
 8016920:	2002      	movs	r0, #2
 8016922:	f001 fd6b 	bl	80183fc <traceIF_uartPrint>
      (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 8016926:	8829      	ldrh	r1, [r5, #0]
 8016928:	4a1e      	ldr	r2, [pc, #120]	; (80169a4 <CST_modem_sim_init+0xbb0>)
 801692a:	481f      	ldr	r0, [pc, #124]	; (80169a8 <CST_modem_sim_init+0xbb4>)
 801692c:	2320      	movs	r3, #32
 801692e:	f000 fca1 	bl	8017274 <dc_com_read>
      cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_ERROR;
 8016932:	7c33      	ldrb	r3, [r6, #16]
 8016934:	eb0a 0103 	add.w	r1, sl, r3
 8016938:	2006      	movs	r0, #6
 801693a:	76c8      	strb	r0, [r1, #27]
      cst_sim_info.rt_state   = DC_SERVICE_ON;
 801693c:	2107      	movs	r1, #7
 801693e:	f88a 1008 	strb.w	r1, [sl, #8]
      cst_context.sim_slot_index++;
 8016942:	3301      	adds	r3, #1
      if (cst_context.sim_slot_index  >= cst_cellular_params.sim_slot_nb)
 8016944:	f89b 1009 	ldrb.w	r1, [fp, #9]
      cst_context.sim_slot_index++;
 8016948:	b2db      	uxtb	r3, r3
      if (cst_context.sim_slot_index  >= cst_cellular_params.sim_slot_nb)
 801694a:	4299      	cmp	r1, r3
      cst_context.sim_slot_index++;
 801694c:	7433      	strb	r3, [r6, #16]
      if (cst_context.sim_slot_index  >= cst_cellular_params.sim_slot_nb)
 801694e:	d816      	bhi.n	801697e <CST_modem_sim_init+0xb8a>
        PRINT_CELLULAR_SERVICE("CST_modem_sim_init : No more sim slot, no SIM found. Retry...\n\r")
 8016950:	4923      	ldr	r1, [pc, #140]	; (80169e0 <CST_modem_sim_init+0xbec>)
 8016952:	4819      	ldr	r0, [pc, #100]	; (80169b8 <CST_modem_sim_init+0xbc4>)
        cst_context.sim_slot_index = 0U;
 8016954:	7434      	strb	r4, [r6, #16]
        PRINT_CELLULAR_SERVICE("CST_modem_sim_init : No more sim slot, no SIM found. Retry...\n\r")
 8016956:	f006 fb1f 	bl	801cf98 <strcpy>
 801695a:	4817      	ldr	r0, [pc, #92]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801695c:	f001 faea 	bl	8017f34 <crs_strlen>
 8016960:	4a15      	ldr	r2, [pc, #84]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016962:	b283      	uxth	r3, r0
 8016964:	2101      	movs	r1, #1
 8016966:	2002      	movs	r0, #2
 8016968:	f001 fb22 	bl	8017fb0 <traceIF_itmPrint>
 801696c:	4812      	ldr	r0, [pc, #72]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 801696e:	f001 fae1 	bl	8017f34 <crs_strlen>
 8016972:	4a11      	ldr	r2, [pc, #68]	; (80169b8 <CST_modem_sim_init+0xbc4>)
 8016974:	b283      	uxth	r3, r0
 8016976:	2101      	movs	r1, #1
 8016978:	2002      	movs	r0, #2
 801697a:	f001 fd3f 	bl	80183fc <traceIF_uartPrint>
      cst_sim_info.active_slot = cst_cellular_params.sim_slot[cst_context.sim_slot_index].sim_slot_type;
 801697e:	7c32      	ldrb	r2, [r6, #16]
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 8016980:	8829      	ldrh	r1, [r5, #0]
      cst_sim_info.index_slot  = cst_context.sim_slot_index;
 8016982:	f88a 2019 	strb.w	r2, [sl, #25]
      cst_sim_info.active_slot = cst_cellular_params.sim_slot[cst_context.sim_slot_index].sim_slot_type;
 8016986:	2368      	movs	r3, #104	; 0x68
 8016988:	fb03 b302 	mla	r3, r3, r2, fp
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 801698c:	4806      	ldr	r0, [pc, #24]	; (80169a8 <CST_modem_sim_init+0xbb4>)
      cst_sim_info.active_slot = cst_cellular_params.sim_slot[cst_context.sim_slot_index].sim_slot_type;
 801698e:	7a9b      	ldrb	r3, [r3, #10]
 8016990:	f88a 301a 	strb.w	r3, [sl, #26]
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&cst_sim_info, sizeof(cst_sim_info));
 8016994:	4a03      	ldr	r2, [pc, #12]	; (80169a4 <CST_modem_sim_init+0xbb0>)
 8016996:	2320      	movs	r3, #32
 8016998:	f000 fc08 	bl	80171ac <dc_com_write>
      PRINT_CELLULAR_SERVICE("CST_modem_sim_init : Reboot modem.\n\r")
 801699c:	4911      	ldr	r1, [pc, #68]	; (80169e4 <CST_modem_sim_init+0xbf0>)
 801699e:	f7ff ba7b 	b.w	8015e98 <CST_modem_sim_init+0xa4>
 80169a2:	bf00      	nop
 80169a4:	20008d5c 	.word	0x20008d5c
 80169a8:	20008d7c 	.word	0x20008d7c
 80169ac:	20003fde 	.word	0x20003fde
 80169b0:	20000242 	.word	0x20000242
 80169b4:	0802b77d 	.word	0x0802b77d
 80169b8:	20008ff8 	.word	0x20008ff8
 80169bc:	20008ab0 	.word	0x20008ab0
 80169c0:	0802b78a 	.word	0x0802b78a
 80169c4:	20008d65 	.word	0x20008d65
 80169c8:	2000029c 	.word	0x2000029c
 80169cc:	20000248 	.word	0x20000248
 80169d0:	0802b4e0 	.word	0x0802b4e0
 80169d4:	0802b582 	.word	0x0802b582
 80169d8:	0802b5a6 	.word	0x0802b5a6
 80169dc:	0802b5bc 	.word	0x0802b5bc
 80169e0:	0802b607 	.word	0x0802b607
 80169e4:	0802b647 	.word	0x0802b647
 80169e8:	20003fdc 	.word	0x20003fdc
 80169ec:	20008c60 	.word	0x20008c60
    cst_cellular_info.imei[0] = 0U;
 80169f0:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("IMEI error\n\r")
 80169f2:	495f      	ldr	r1, [pc, #380]	; (8016b70 <CST_modem_sim_init+0xd7c>)
 80169f4:	485f      	ldr	r0, [pc, #380]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.imei[0] = 0U;
 80169f6:	72a3      	strb	r3, [r4, #10]
    PRINT_CELLULAR_SERVICE("IMEI error\n\r")
 80169f8:	f006 face 	bl	801cf98 <strcpy>
 80169fc:	485d      	ldr	r0, [pc, #372]	; (8016b74 <CST_modem_sim_init+0xd80>)
 80169fe:	f001 fa99 	bl	8017f34 <crs_strlen>
 8016a02:	4a5c      	ldr	r2, [pc, #368]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a04:	b283      	uxth	r3, r0
 8016a06:	4639      	mov	r1, r7
 8016a08:	2002      	movs	r0, #2
 8016a0a:	f001 fad1 	bl	8017fb0 <traceIF_itmPrint>
 8016a0e:	4859      	ldr	r0, [pc, #356]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a10:	f001 fa90 	bl	8017f34 <crs_strlen>
 8016a14:	4a57      	ldr	r2, [pc, #348]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a16:	b283      	uxth	r3, r0
 8016a18:	4639      	mov	r1, r7
 8016a1a:	e521      	b.n	8016460 <CST_modem_sim_init+0x66c>
    cst_cellular_info.manufacturer_name[0] = 0U;
 8016a1c:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("Manufacturer Name error\n\r")
 8016a1e:	4956      	ldr	r1, [pc, #344]	; (8016b78 <CST_modem_sim_init+0xd84>)
 8016a20:	4854      	ldr	r0, [pc, #336]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.manufacturer_name[0] = 0U;
 8016a22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    PRINT_CELLULAR_SERVICE("Manufacturer Name error\n\r")
 8016a26:	f006 fab7 	bl	801cf98 <strcpy>
 8016a2a:	4852      	ldr	r0, [pc, #328]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a2c:	f001 fa82 	bl	8017f34 <crs_strlen>
 8016a30:	4a50      	ldr	r2, [pc, #320]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a32:	b283      	uxth	r3, r0
 8016a34:	2101      	movs	r1, #1
 8016a36:	4638      	mov	r0, r7
 8016a38:	f001 faba 	bl	8017fb0 <traceIF_itmPrint>
 8016a3c:	484d      	ldr	r0, [pc, #308]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a3e:	f001 fa79 	bl	8017f34 <crs_strlen>
 8016a42:	4a4c      	ldr	r2, [pc, #304]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016a44:	b283      	uxth	r3, r0
 8016a46:	2101      	movs	r1, #1
 8016a48:	4638      	mov	r0, r7
 8016a4a:	e538      	b.n	80164be <CST_modem_sim_init+0x6ca>
    cst_cellular_info.model[0] = 0U;
 8016a4c:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("Model error\n\r")
 8016a4e:	494b      	ldr	r1, [pc, #300]	; (8016b7c <CST_modem_sim_init+0xd88>)
 8016a50:	4848      	ldr	r0, [pc, #288]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.model[0] = 0U;
 8016a52:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    PRINT_CELLULAR_SERVICE("Model error\n\r")
 8016a56:	f006 fa9f 	bl	801cf98 <strcpy>
 8016a5a:	e54c      	b.n	80164f6 <CST_modem_sim_init+0x702>
    cst_cellular_info.revision[0] = 0U;
 8016a5c:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("Revision error\n\r")
 8016a5e:	4948      	ldr	r1, [pc, #288]	; (8016b80 <CST_modem_sim_init+0xd8c>)
 8016a60:	4844      	ldr	r0, [pc, #272]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.revision[0] = 0U;
 8016a62:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    PRINT_CELLULAR_SERVICE("Revision error\n\r")
 8016a66:	f006 fa97 	bl	801cf98 <strcpy>
 8016a6a:	e570      	b.n	801654e <CST_modem_sim_init+0x75a>
    cst_cellular_info.serial_number[0] = 0U;
 8016a6c:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 8016a6e:	4945      	ldr	r1, [pc, #276]	; (8016b84 <CST_modem_sim_init+0xd90>)
 8016a70:	4840      	ldr	r0, [pc, #256]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.serial_number[0] = 0U;
 8016a72:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 8016a76:	f006 fa8f 	bl	801cf98 <strcpy>
 8016a7a:	e594      	b.n	80165a6 <CST_modem_sim_init+0x7b2>
    cst_cellular_info.serial_number[0] = 0U;
 8016a7c:	2300      	movs	r3, #0
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 8016a7e:	4941      	ldr	r1, [pc, #260]	; (8016b84 <CST_modem_sim_init+0xd90>)
 8016a80:	483c      	ldr	r0, [pc, #240]	; (8016b74 <CST_modem_sim_init+0xd80>)
    cst_cellular_info.serial_number[0] = 0U;
 8016a82:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
    PRINT_CELLULAR_SERVICE("Serial Number error\n\r")
 8016a86:	f006 fa87 	bl	801cf98 <strcpy>
 8016a8a:	e5bc      	b.n	8016606 <CST_modem_sim_init+0x812>
      if ((div_m > tmp_m) || ((div_m == tmp_m) && (div_l > tmp_l)))
 8016a8c:	458c      	cmp	ip, r1
 8016a8e:	d80c      	bhi.n	8016aaa <CST_modem_sim_init+0xcb6>
 8016a90:	d105      	bne.n	8016a9e <CST_modem_sim_init+0xcaa>
 8016a92:	4283      	cmp	r3, r0
 8016a94:	d809      	bhi.n	8016aaa <CST_modem_sim_init+0xcb6>
        tmp_m = tmp_m - div_m;
 8016a96:	eba1 010c 	sub.w	r1, r1, ip
        tmp_l = tmp_l - div_l;
 8016a9a:	1ac0      	subs	r0, r0, r3
 8016a9c:	e005      	b.n	8016aaa <CST_modem_sim_init+0xcb6>
      else if (div_l > tmp_l)
 8016a9e:	4283      	cmp	r3, r0
 8016aa0:	d9f9      	bls.n	8016a96 <CST_modem_sim_init+0xca2>
        tmp_m--;
 8016aa2:	3901      	subs	r1, #1
 8016aa4:	1ac0      	subs	r0, r0, r3
        tmp_m = tmp_m - div_m;
 8016aa6:	eba1 010c 	sub.w	r1, r1, ip
      if ((div_m & 1U) == 1U)
 8016aaa:	f01c 0f01 	tst.w	ip, #1
      div_l = div_l >> 1;
 8016aae:	ea4f 0353 	mov.w	r3, r3, lsr #1
        div_l = div_l | 0x80000000U;
 8016ab2:	bf18      	it	ne
 8016ab4:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
      div_m = div_m >> 1U;
 8016ab8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016abc:	e65c      	b.n	8016778 <CST_modem_sim_init+0x984>
        temp_value32 = imsi_low;  /* parameter value == 0 => value set to imsi_low */
 8016abe:	9b03      	ldr	r3, [sp, #12]
 8016ac0:	e661      	b.n	8016786 <CST_modem_sim_init+0x992>
    nfmc_info.rt_state = DC_SERVICE_OFF;
 8016ac2:	2103      	movs	r1, #3
    nfmc_info.activate = 0U;
 8016ac4:	920e      	str	r2, [sp, #56]	; 0x38
    nfmc_info.rt_state = DC_SERVICE_OFF;
 8016ac6:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34
    cst_nfmc_context.active = false;
 8016aca:	701a      	strb	r2, [r3, #0]
 8016acc:	e67d      	b.n	80167ca <CST_modem_sim_init+0x9d6>
      else if ((cs_status == CELLULAR_SIM_BUSY)
 8016ace:	f002 03fb 	and.w	r3, r2, #251	; 0xfb
 8016ad2:	2b03      	cmp	r3, #3
 8016ad4:	d112      	bne.n	8016afc <CST_modem_sim_init+0xd08>
        (void)rtosalDelay(100U);
 8016ad6:	2064      	movs	r0, #100	; 0x64
 8016ad8:	9202      	str	r2, [sp, #8]
 8016ada:	f001 f9a8 	bl	8017e2e <rtosalDelay>
        if (sim_poll_count > CST_SIM_POLL_COUNT)
 8016ade:	f109 33ff 	add.w	r3, r9, #4294967295
 8016ae2:	fa1f f983 	uxth.w	r9, r3
 8016ae6:	9a02      	ldr	r2, [sp, #8]
 8016ae8:	f1b9 0f00 	cmp.w	r9, #0
 8016aec:	f47f adf4 	bne.w	80166d8 <CST_modem_sim_init+0x8e4>
          if (cs_status == CELLULAR_SIM_BUSY)
 8016af0:	7c3b      	ldrb	r3, [r7, #16]
 8016af2:	2a03      	cmp	r2, #3
            cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_BUSY;
 8016af4:	4453      	add	r3, sl
          if (cs_status == CELLULAR_SIM_BUSY)
 8016af6:	d10f      	bne.n	8016b18 <CST_modem_sim_init+0xd24>
            cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_BUSY;
 8016af8:	2205      	movs	r2, #5
 8016afa:	e682      	b.n	8016802 <CST_modem_sim_init+0xa0e>
        if (cs_status == CELLULAR_SIM_NOT_INSERTED)
 8016afc:	7c3b      	ldrb	r3, [r7, #16]
 8016afe:	2a04      	cmp	r2, #4
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_NOT_INSERTED;
 8016b00:	4453      	add	r3, sl
        if (cs_status == CELLULAR_SIM_NOT_INSERTED)
 8016b02:	d101      	bne.n	8016b08 <CST_modem_sim_init+0xd14>
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_NOT_INSERTED;
 8016b04:	2207      	movs	r2, #7
 8016b06:	e67c      	b.n	8016802 <CST_modem_sim_init+0xa0e>
        else if (cs_status == CELLULAR_SIM_PIN_OR_PUK_LOCKED)
 8016b08:	2a05      	cmp	r2, #5
 8016b0a:	d101      	bne.n	8016b10 <CST_modem_sim_init+0xd1c>
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_PIN_OR_PUK_LOCKED;
 8016b0c:	2203      	movs	r2, #3
 8016b0e:	e678      	b.n	8016802 <CST_modem_sim_init+0xa0e>
        else if (cs_status == CELLULAR_SIM_INCORRECT_PASSWORD)
 8016b10:	2a06      	cmp	r2, #6
 8016b12:	d101      	bne.n	8016b18 <CST_modem_sim_init+0xd24>
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_INCORRECT_PIN;
 8016b14:	2204      	movs	r2, #4
 8016b16:	e674      	b.n	8016802 <CST_modem_sim_init+0xa0e>
          cst_sim_info.sim_status[cst_context.sim_slot_index] = CA_SIM_ERROR;
 8016b18:	2206      	movs	r2, #6
 8016b1a:	e672      	b.n	8016802 <CST_modem_sim_init+0xa0e>
        (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8016b1c:	8831      	ldrh	r1, [r6, #0]
 8016b1e:	4a1a      	ldr	r2, [pc, #104]	; (8016b88 <CST_modem_sim_init+0xd94>)
 8016b20:	481a      	ldr	r0, [pc, #104]	; (8016b8c <CST_modem_sim_init+0xd98>)
 8016b22:	23dc      	movs	r3, #220	; 0xdc
 8016b24:	f000 fba6 	bl	8017274 <dc_com_read>
        cst_cellular_info.rt_state    = DC_SERVICE_ON;
 8016b28:	f240 2307 	movw	r3, #519	; 0x207
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8016b2c:	4a16      	ldr	r2, [pc, #88]	; (8016b88 <CST_modem_sim_init+0xd94>)
 8016b2e:	8831      	ldrh	r1, [r6, #0]
        cst_cellular_info.rt_state    = DC_SERVICE_ON;
 8016b30:	8123      	strh	r3, [r4, #8]
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(dc_cellular_info_t));
 8016b32:	4816      	ldr	r0, [pc, #88]	; (8016b8c <CST_modem_sim_init+0xd98>)
 8016b34:	23dc      	movs	r3, #220	; 0xdc
 8016b36:	f000 fb39 	bl	80171ac <dc_com_write>
        PRINT_CELLULAR_SERVICE("*********** modem state : CA_MODEM_STATE_SIM_CONNECTED\n\r")
 8016b3a:	4915      	ldr	r1, [pc, #84]	; (8016b90 <CST_modem_sim_init+0xd9c>)
 8016b3c:	480d      	ldr	r0, [pc, #52]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016b3e:	f006 fa2b 	bl	801cf98 <strcpy>
 8016b42:	480c      	ldr	r0, [pc, #48]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016b44:	f001 f9f6 	bl	8017f34 <crs_strlen>
 8016b48:	4629      	mov	r1, r5
 8016b4a:	b283      	uxth	r3, r0
 8016b4c:	4a09      	ldr	r2, [pc, #36]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016b4e:	2002      	movs	r0, #2
 8016b50:	f001 fa2e 	bl	8017fb0 <traceIF_itmPrint>
 8016b54:	4807      	ldr	r0, [pc, #28]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016b56:	f001 f9ed 	bl	8017f34 <crs_strlen>
 8016b5a:	4a06      	ldr	r2, [pc, #24]	; (8016b74 <CST_modem_sim_init+0xd80>)
 8016b5c:	b283      	uxth	r3, r0
 8016b5e:	4629      	mov	r1, r5
 8016b60:	2002      	movs	r0, #2
 8016b62:	f001 fc4b 	bl	80183fc <traceIF_uartPrint>
        CST_set_state(CST_MODEM_SIM_ONLY_STATE);
 8016b66:	200b      	movs	r0, #11
 8016b68:	f7fd fb0e 	bl	8014188 <CST_set_state>
}
 8016b6c:	f7ff b9af 	b.w	8015ece <CST_modem_sim_init+0xda>
 8016b70:	0802b6cc 	.word	0x0802b6cc
 8016b74:	20008ff8 	.word	0x20008ff8
 8016b78:	0802b6ee 	.word	0x0802b6ee
 8016b7c:	0802b716 	.word	0x0802b716
 8016b80:	0802b735 	.word	0x0802b735
 8016b84:	0802b759 	.word	0x0802b759
 8016b88:	20008c80 	.word	0x20008c80
 8016b8c:	20008d7c 	.word	0x20008d7c
 8016b90:	0802b7a0 	.word	0x0802b7a0

08016b94 <CST_set_signal_quality>:
{
 8016b94:	b530      	push	{r4, r5, lr}
 8016b96:	b087      	sub	sp, #28
  if (osCS_get_signal_quality(&sig_quality) == CELLULAR_OK)
 8016b98:	4668      	mov	r0, sp
 8016b9a:	f7fd f833 	bl	8013c04 <osCS_get_signal_quality>
 8016b9e:	4c50      	ldr	r4, [pc, #320]	; (8016ce0 <CST_set_signal_quality+0x14c>)
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	d15f      	bne.n	8016c66 <CST_set_signal_quality+0xd2>
    if ((sig_quality.rssi != cst_context.signal_quality.rssi) || (sig_quality.ber != cst_context.signal_quality.ber))
 8016ba6:	f89d 2000 	ldrb.w	r2, [sp]
 8016baa:	7921      	ldrb	r1, [r4, #4]
 8016bac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    cst_context.csq_count_fail = 0U;
 8016bb0:	7760      	strb	r0, [r4, #29]
    if ((sig_quality.rssi != cst_context.signal_quality.rssi) || (sig_quality.ber != cst_context.signal_quality.ber))
 8016bb2:	4291      	cmp	r1, r2
 8016bb4:	d102      	bne.n	8016bbc <CST_set_signal_quality+0x28>
 8016bb6:	7961      	ldrb	r1, [r4, #5]
 8016bb8:	4299      	cmp	r1, r3
 8016bba:	d021      	beq.n	8016c00 <CST_set_signal_quality+0x6c>
      cst_context.signal_quality.rssi = sig_quality.rssi;
 8016bbc:	7122      	strb	r2, [r4, #4]
      cst_context.signal_quality.ber  = sig_quality.ber;
 8016bbe:	7163      	strb	r3, [r4, #5]
      (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016bc0:	4c48      	ldr	r4, [pc, #288]	; (8016ce4 <CST_set_signal_quality+0x150>)
 8016bc2:	4849      	ldr	r0, [pc, #292]	; (8016ce8 <CST_set_signal_quality+0x154>)
 8016bc4:	8821      	ldrh	r1, [r4, #0]
 8016bc6:	2314      	movs	r3, #20
 8016bc8:	aa01      	add	r2, sp, #4
 8016bca:	f000 fb53 	bl	8017274 <dc_com_read>
      if (sig_quality.rssi == CST_BAD_SIG_RSSI)
 8016bce:	f89d 2000 	ldrb.w	r2, [sp]
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016bd2:	8821      	ldrh	r1, [r4, #0]
 8016bd4:	4844      	ldr	r0, [pc, #272]	; (8016ce8 <CST_set_signal_quality+0x154>)
      if (sig_quality.rssi == CST_BAD_SIG_RSSI)
 8016bd6:	2a63      	cmp	r2, #99	; 0x63
        signal_info.cs_signal_level_db  = (-113 + (2 * (int32_t)sig_quality.rssi)); /* dBm value   */
 8016bd8:	bf15      	itete	ne
 8016bda:	f06f 0370 	mvnne.w	r3, #112	; 0x70
        signal_info.cs_signal_level    = DC_NO_ATTACHED;
 8016bde:	2300      	moveq	r3, #0
        signal_info.cs_signal_level_db  = (-113 + (2 * (int32_t)sig_quality.rssi)); /* dBm value   */
 8016be0:	eb03 0342 	addne.w	r3, r3, r2, lsl #1
        signal_info.cs_signal_level    = DC_NO_ATTACHED;
 8016be4:	f88d 300d 	strbeq.w	r3, [sp, #13]
        signal_info.cs_signal_level_db = (int32_t)DC_NO_ATTACHED;
 8016be8:	bf0e      	itee	eq
 8016bea:	9304      	streq	r3, [sp, #16]
        signal_info.cs_signal_level     = sig_quality.rssi;                         /* range 0..99 */
 8016bec:	f88d 200d 	strbne.w	r2, [sp, #13]
        signal_info.cs_signal_level_db  = (-113 + (2 * (int32_t)sig_quality.rssi)); /* dBm value   */
 8016bf0:	9304      	strne	r3, [sp, #16]
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016bf2:	aa01      	add	r2, sp, #4
 8016bf4:	f04f 0314 	mov.w	r3, #20
        cs_status = CELLULAR_ERROR;
 8016bf8:	bf08      	it	eq
 8016bfa:	2501      	moveq	r5, #1
      (void)dc_com_write(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016bfc:	f000 fad6 	bl	80171ac <dc_com_write>
    PRINT_CELLULAR_SERVICE(" -Sig quality rssi : %d\n\r", sig_quality.rssi)
 8016c00:	f89d 2000 	ldrb.w	r2, [sp]
 8016c04:	4939      	ldr	r1, [pc, #228]	; (8016cec <CST_set_signal_quality+0x158>)
 8016c06:	483a      	ldr	r0, [pc, #232]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c08:	f006 f956 	bl	801ceb8 <sprintf>
 8016c0c:	4838      	ldr	r0, [pc, #224]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c0e:	f001 f991 	bl	8017f34 <crs_strlen>
 8016c12:	4a37      	ldr	r2, [pc, #220]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c14:	b283      	uxth	r3, r0
 8016c16:	2101      	movs	r1, #1
 8016c18:	2002      	movs	r0, #2
 8016c1a:	f001 f9c9 	bl	8017fb0 <traceIF_itmPrint>
 8016c1e:	4834      	ldr	r0, [pc, #208]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c20:	f001 f988 	bl	8017f34 <crs_strlen>
 8016c24:	4a32      	ldr	r2, [pc, #200]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c26:	b283      	uxth	r3, r0
 8016c28:	2101      	movs	r1, #1
 8016c2a:	2002      	movs	r0, #2
 8016c2c:	f001 fbe6 	bl	80183fc <traceIF_uartPrint>
    PRINT_CELLULAR_SERVICE(" -Sig quality ber  : %d\n\r", sig_quality.ber)
 8016c30:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8016c34:	492f      	ldr	r1, [pc, #188]	; (8016cf4 <CST_set_signal_quality+0x160>)
 8016c36:	482e      	ldr	r0, [pc, #184]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c38:	f006 f93e 	bl	801ceb8 <sprintf>
 8016c3c:	482c      	ldr	r0, [pc, #176]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c3e:	f001 f979 	bl	8017f34 <crs_strlen>
 8016c42:	4a2b      	ldr	r2, [pc, #172]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c44:	b283      	uxth	r3, r0
 8016c46:	2101      	movs	r1, #1
 8016c48:	2002      	movs	r0, #2
 8016c4a:	f001 f9b1 	bl	8017fb0 <traceIF_itmPrint>
 8016c4e:	4828      	ldr	r0, [pc, #160]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c50:	f001 f970 	bl	8017f34 <crs_strlen>
 8016c54:	4a26      	ldr	r2, [pc, #152]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c56:	b283      	uxth	r3, r0
 8016c58:	2101      	movs	r1, #1
 8016c5a:	2002      	movs	r0, #2
 8016c5c:	f001 fbce 	bl	80183fc <traceIF_uartPrint>
}
 8016c60:	4628      	mov	r0, r5
 8016c62:	b007      	add	sp, #28
 8016c64:	bd30      	pop	{r4, r5, pc}
    cst_context.csq_count_fail++;
 8016c66:	7f63      	ldrb	r3, [r4, #29]
    PRINT_CELLULAR_SERVICE("Modem signal quality error\n\r")
 8016c68:	4923      	ldr	r1, [pc, #140]	; (8016cf8 <CST_set_signal_quality+0x164>)
 8016c6a:	4821      	ldr	r0, [pc, #132]	; (8016cf0 <CST_set_signal_quality+0x15c>)
    cst_context.csq_count_fail++;
 8016c6c:	3301      	adds	r3, #1
 8016c6e:	7763      	strb	r3, [r4, #29]
    PRINT_CELLULAR_SERVICE("Modem signal quality error\n\r")
 8016c70:	f006 f992 	bl	801cf98 <strcpy>
 8016c74:	481e      	ldr	r0, [pc, #120]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c76:	f001 f95d 	bl	8017f34 <crs_strlen>
 8016c7a:	4a1d      	ldr	r2, [pc, #116]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c7c:	b283      	uxth	r3, r0
 8016c7e:	2101      	movs	r1, #1
 8016c80:	2002      	movs	r0, #2
 8016c82:	f001 f995 	bl	8017fb0 <traceIF_itmPrint>
 8016c86:	481a      	ldr	r0, [pc, #104]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c88:	f001 f954 	bl	8017f34 <crs_strlen>
 8016c8c:	4a18      	ldr	r2, [pc, #96]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016c8e:	b283      	uxth	r3, r0
 8016c90:	2101      	movs	r1, #1
 8016c92:	2002      	movs	r0, #2
 8016c94:	f001 fbb2 	bl	80183fc <traceIF_uartPrint>
    if (cst_context.csq_count_fail >= CST_COUNT_FAIL_MAX)
 8016c98:	7f63      	ldrb	r3, [r4, #29]
 8016c9a:	2b04      	cmp	r3, #4
 8016c9c:	d91e      	bls.n	8016cdc <CST_set_signal_quality+0x148>
      PRINT_CELLULAR_SERVICE("Modem signal quality error max\n\r")
 8016c9e:	4917      	ldr	r1, [pc, #92]	; (8016cfc <CST_set_signal_quality+0x168>)
 8016ca0:	4813      	ldr	r0, [pc, #76]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016ca2:	f006 f979 	bl	801cf98 <strcpy>
 8016ca6:	4812      	ldr	r0, [pc, #72]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016ca8:	f001 f944 	bl	8017f34 <crs_strlen>
 8016cac:	4a10      	ldr	r2, [pc, #64]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016cae:	b283      	uxth	r3, r0
 8016cb0:	2101      	movs	r1, #1
 8016cb2:	2002      	movs	r0, #2
 8016cb4:	f001 f97c 	bl	8017fb0 <traceIF_itmPrint>
 8016cb8:	480d      	ldr	r0, [pc, #52]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016cba:	f001 f93b 	bl	8017f34 <crs_strlen>
 8016cbe:	4a0c      	ldr	r2, [pc, #48]	; (8016cf0 <CST_set_signal_quality+0x15c>)
 8016cc0:	b283      	uxth	r3, r0
 8016cc2:	2101      	movs	r1, #1
 8016cc4:	2002      	movs	r0, #2
 8016cc6:	f001 fb99 	bl	80183fc <traceIF_uartPrint>
      cst_context.csq_count_fail = 0U;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	7763      	strb	r3, [r4, #29]
      CST_config_fail(((uint8_t *)"CS_get_signal_quality"),
 8016cce:	480c      	ldr	r0, [pc, #48]	; (8016d00 <CST_set_signal_quality+0x16c>)
 8016cd0:	2305      	movs	r3, #5
 8016cd2:	f104 0214 	add.w	r2, r4, #20
 8016cd6:	2103      	movs	r1, #3
 8016cd8:	f7fe ffa0 	bl	8015c1c <CST_config_fail>
    cs_status = CELLULAR_ERROR;
 8016cdc:	2501      	movs	r5, #1
 8016cde:	e7bf      	b.n	8016c60 <CST_set_signal_quality+0xcc>
 8016ce0:	2000029c 	.word	0x2000029c
 8016ce4:	20000246 	.word	0x20000246
 8016ce8:	20008d7c 	.word	0x20008d7c
 8016cec:	0802b7d9 	.word	0x0802b7d9
 8016cf0:	20008ff8 	.word	0x20008ff8
 8016cf4:	0802b7f3 	.word	0x0802b7f3
 8016cf8:	0802b80d 	.word	0x0802b80d
 8016cfc:	0802b82a 	.word	0x0802b82a
 8016d00:	0802b84b 	.word	0x0802b84b

08016d04 <CST_subscribe_modem_events>:
{
 8016d04:	b510      	push	{r4, lr}
  PRINT_CELLULAR_SERVICE("Subscribe modems events\n\r")
 8016d06:	4c0e      	ldr	r4, [pc, #56]	; (8016d40 <CST_subscribe_modem_events+0x3c>)
 8016d08:	490e      	ldr	r1, [pc, #56]	; (8016d44 <CST_subscribe_modem_events+0x40>)
 8016d0a:	4620      	mov	r0, r4
 8016d0c:	f006 f944 	bl	801cf98 <strcpy>
 8016d10:	4620      	mov	r0, r4
 8016d12:	f001 f90f 	bl	8017f34 <crs_strlen>
 8016d16:	4622      	mov	r2, r4
 8016d18:	b283      	uxth	r3, r0
 8016d1a:	2101      	movs	r1, #1
 8016d1c:	2002      	movs	r0, #2
 8016d1e:	f001 f947 	bl	8017fb0 <traceIF_itmPrint>
 8016d22:	4620      	mov	r0, r4
 8016d24:	f001 f906 	bl	8017f34 <crs_strlen>
 8016d28:	4622      	mov	r2, r4
 8016d2a:	b283      	uxth	r3, r0
 8016d2c:	2101      	movs	r1, #1
 8016d2e:	2002      	movs	r0, #2
 8016d30:	f001 fb64 	bl	80183fc <traceIF_uartPrint>
}
 8016d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)osCDS_subscribe_modem_event(events_mask, CST_modem_event_callback);
 8016d38:	4903      	ldr	r1, [pc, #12]	; (8016d48 <CST_subscribe_modem_events+0x44>)
 8016d3a:	200f      	movs	r0, #15
 8016d3c:	f7fc bfdc 	b.w	8013cf8 <osCDS_subscribe_modem_event>
 8016d40:	20008ff8 	.word	0x20008ff8
 8016d44:	0802b861 	.word	0x0802b861
 8016d48:	08015ac5 	.word	0x08015ac5

08016d4c <CST_get_autom_event>:
  if (GET_AUTOMATON_MSG_TYPE(event) == CST_MESSAGE_CS_EVENT)
 8016d4c:	b283      	uxth	r3, r0
 8016d4e:	f023 0202 	bic.w	r2, r3, #2
{
 8016d52:	b510      	push	{r4, lr}
  if (GET_AUTOMATON_MSG_TYPE(event) == CST_MESSAGE_CS_EVENT)
 8016d54:	b90a      	cbnz	r2, 8016d5a <CST_get_autom_event+0xe>
    autom_event = (cst_autom_event_t)GET_AUTOMATON_MSG_ID(event);
 8016d56:	0c00      	lsrs	r0, r0, #16
}
 8016d58:	bd10      	pop	{r4, pc}
  else if (GET_AUTOMATON_MSG_TYPE(event) == CST_MESSAGE_DC_EVENT)
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d126      	bne.n	8016dac <CST_get_autom_event+0x60>
    if (GET_AUTOMATON_MSG_ID(event) == (uint16_t)DC_CELLULAR_DATA_INFO)
 8016d5e:	4b15      	ldr	r3, [pc, #84]	; (8016db4 <CST_get_autom_event+0x68>)
 8016d60:	881b      	ldrh	r3, [r3, #0]
 8016d62:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8016d66:	ea4f 4110 	mov.w	r1, r0, lsr #16
 8016d6a:	d10a      	bne.n	8016d82 <CST_get_autom_event+0x36>
      (void)dc_com_read(&dc_com_db, DC_CELLULAR_DATA_INFO, (void *)&cst_cellular_data_info,
 8016d6c:	4c12      	ldr	r4, [pc, #72]	; (8016db8 <CST_get_autom_event+0x6c>)
 8016d6e:	4813      	ldr	r0, [pc, #76]	; (8016dbc <CST_get_autom_event+0x70>)
 8016d70:	2310      	movs	r3, #16
 8016d72:	4622      	mov	r2, r4
 8016d74:	f000 fa7e 	bl	8017274 <dc_com_read>
      if (cst_cellular_data_info.rt_state == DC_SERVICE_FAIL)
 8016d78:	7a23      	ldrb	r3, [r4, #8]
 8016d7a:	2b08      	cmp	r3, #8
 8016d7c:	d018      	beq.n	8016db0 <CST_get_autom_event+0x64>
  autom_event = CST_NO_EVENT;
 8016d7e:	200d      	movs	r0, #13
 8016d80:	e7ea      	b.n	8016d58 <CST_get_autom_event+0xc>
    else if (GET_AUTOMATON_MSG_ID(event) == (uint16_t)DC_CELLULAR_TARGET_STATE_CMD)
 8016d82:	4b0f      	ldr	r3, [pc, #60]	; (8016dc0 <CST_get_autom_event+0x74>)
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	4299      	cmp	r1, r3
 8016d88:	d110      	bne.n	8016dac <CST_get_autom_event+0x60>
      (void)dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&cst_target_state, sizeof(cst_target_state));
 8016d8a:	4c0e      	ldr	r4, [pc, #56]	; (8016dc4 <CST_get_autom_event+0x78>)
 8016d8c:	480b      	ldr	r0, [pc, #44]	; (8016dbc <CST_get_autom_event+0x70>)
 8016d8e:	230c      	movs	r3, #12
 8016d90:	4622      	mov	r2, r4
 8016d92:	f000 fa6f 	bl	8017274 <dc_com_read>
      if ((cst_target_state.rt_state == DC_SERVICE_ON) && (cst_target_state.callback == true))
 8016d96:	8922      	ldrh	r2, [r4, #8]
 8016d98:	f240 1307 	movw	r3, #263	; 0x107
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d1ee      	bne.n	8016d7e <CST_get_autom_event+0x32>
        cst_cellular_params.target_state = cst_target_state.target_state;
 8016da0:	4b09      	ldr	r3, [pc, #36]	; (8016dc8 <CST_get_autom_event+0x7c>)
 8016da2:	7aa2      	ldrb	r2, [r4, #10]
 8016da4:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
        autom_event = CST_TARGET_STATE_CMD_EVENT;
 8016da8:	200f      	movs	r0, #15
 8016daa:	e7d5      	b.n	8016d58 <CST_get_autom_event+0xc>
    __NOP(); /* Nothing to do */
 8016dac:	bf00      	nop
 8016dae:	e7e6      	b.n	8016d7e <CST_get_autom_event+0x32>
        autom_event = CST_CELLULAR_DATA_FAIL_EVENT;
 8016db0:	200a      	movs	r0, #10
 8016db2:	e7d1      	b.n	8016d58 <CST_get_autom_event+0xc>
 8016db4:	2000023e 	.word	0x2000023e
 8016db8:	20008a9c 	.word	0x20008a9c
 8016dbc:	20008d7c 	.word	0x20008d7c
 8016dc0:	2000024a 	.word	0x2000024a
 8016dc4:	200040e0 	.word	0x200040e0
 8016dc8:	20008ad0 	.word	0x20008ad0

08016dcc <CST_get_network_status>:
{
 8016dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dce:	b09b      	sub	sp, #108	; 0x6c
  (void)memset((void *)&reg_status, 0, sizeof(reg_status));
 8016dd0:	224e      	movs	r2, #78	; 0x4e
 8016dd2:	2100      	movs	r1, #0
 8016dd4:	a806      	add	r0, sp, #24
 8016dd6:	f006 f83f 	bl	801ce58 <memset>
  cs_status = osCDS_get_net_status(&reg_status);
 8016dda:	a806      	add	r0, sp, #24
 8016ddc:	f7fc ff4e 	bl	8013c7c <osCDS_get_net_status>
  if (cs_status == CELLULAR_OK)
 8016de0:	4b37      	ldr	r3, [pc, #220]	; (8016ec0 <CST_get_network_status+0xf4>)
 8016de2:	2800      	cmp	r0, #0
 8016de4:	d167      	bne.n	8016eb6 <CST_get_network_status+0xea>
    cst_context.current_EPS_NetworkRegState  = reg_status.EPS_NetworkRegState;
 8016de6:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8016dea:	80d9      	strh	r1, [r3, #6]
    if ((cst_context.current_EPS_NetworkRegState  != CS_NRS_REGISTERED_HOME_NETWORK)
 8016dec:	f021 0104 	bic.w	r1, r1, #4
    cst_context.current_GPRS_NetworkRegState = reg_status.GPRS_NetworkRegState;
 8016df0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    cst_context.current_CS_NetworkRegState   = reg_status.CS_NetworkRegState;
 8016df4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    cst_context.current_GPRS_NetworkRegState = reg_status.GPRS_NetworkRegState;
 8016df8:	811a      	strh	r2, [r3, #8]
    if ((cst_context.current_EPS_NetworkRegState  != CS_NRS_REGISTERED_HOME_NETWORK)
 8016dfa:	2901      	cmp	r1, #1
    cst_context.current_CS_NetworkRegState   = reg_status.CS_NetworkRegState;
 8016dfc:	8158      	strh	r0, [r3, #10]
    if ((cst_context.current_EPS_NetworkRegState  != CS_NRS_REGISTERED_HOME_NETWORK)
 8016dfe:	d009      	beq.n	8016e14 <CST_get_network_status+0x48>
        && (cst_context.current_GPRS_NetworkRegState != CS_NRS_REGISTERED_HOME_NETWORK)
 8016e00:	f022 0204 	bic.w	r2, r2, #4
 8016e04:	2a01      	cmp	r2, #1
 8016e06:	d005      	beq.n	8016e14 <CST_get_network_status+0x48>
        ret = CST_NOT_REGISTERED;
 8016e08:	2804      	cmp	r0, #4
 8016e0a:	bf0c      	ite	eq
 8016e0c:	2003      	moveq	r0, #3
 8016e0e:	2001      	movne	r0, #1
}
 8016e10:	b01b      	add	sp, #108	; 0x6c
 8016e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((uint16_t)reg_status.optional_fields_presence & (uint16_t)CS_RSF_FORMAT_PRESENT) != 0U)
 8016e14:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8016e18:	f010 0001 	ands.w	r0, r0, #1
 8016e1c:	d0f8      	beq.n	8016e10 <CST_get_network_status+0x44>
        (void)dc_com_read(&dc_com_db,  DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016e1e:	4d29      	ldr	r5, [pc, #164]	; (8016ec4 <CST_get_network_status+0xf8>)
 8016e20:	4a29      	ldr	r2, [pc, #164]	; (8016ec8 <CST_get_network_status+0xfc>)
 8016e22:	8829      	ldrh	r1, [r5, #0]
 8016e24:	4829      	ldr	r0, [pc, #164]	; (8016ecc <CST_get_network_status+0x100>)
 8016e26:	23dc      	movs	r3, #220	; 0xdc
 8016e28:	f000 fa24 	bl	8017274 <dc_com_read>
        (void)memcpy(cst_cellular_info.mno_name, reg_status.operator_name, CA_MNO_NAME_SIZE_MAX - 1U);
 8016e2c:	ae09      	add	r6, sp, #36	; 0x24
 8016e2e:	4a28      	ldr	r2, [pc, #160]	; (8016ed0 <CST_get_network_status+0x104>)
 8016e30:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016e34:	4637      	mov	r7, r6
 8016e36:	4633      	mov	r3, r6
 8016e38:	cb03      	ldmia	r3!, {r0, r1}
 8016e3a:	4563      	cmp	r3, ip
 8016e3c:	6010      	str	r0, [r2, #0]
 8016e3e:	6051      	str	r1, [r2, #4]
 8016e40:	461e      	mov	r6, r3
 8016e42:	f102 0208 	add.w	r2, r2, #8
 8016e46:	d1f6      	bne.n	8016e36 <CST_get_network_status+0x6a>
        cst_cellular_info.mno_name[CA_MNO_NAME_SIZE_MAX - 1U] = 0;  /* to avoid a non null terminated string */
 8016e48:	4a1f      	ldr	r2, [pc, #124]	; (8016ec8 <CST_get_network_status+0xfc>)
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016e4a:	8829      	ldrh	r1, [r5, #0]
        (void)dc_com_read(&dc_com_db,  DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016e4c:	4d21      	ldr	r5, [pc, #132]	; (8016ed4 <CST_get_network_status+0x108>)
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016e4e:	481f      	ldr	r0, [pc, #124]	; (8016ecc <CST_get_network_status+0x100>)
        cst_cellular_info.rt_state = DC_SERVICE_ON;
 8016e50:	2307      	movs	r3, #7
 8016e52:	7213      	strb	r3, [r2, #8]
        cst_cellular_info.mno_name[CA_MNO_NAME_SIZE_MAX - 1U] = 0;  /* to avoid a non null terminated string */
 8016e54:	2400      	movs	r4, #0
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016e56:	23dc      	movs	r3, #220	; 0xdc
        cst_cellular_info.mno_name[CA_MNO_NAME_SIZE_MAX - 1U] = 0;  /* to avoid a non null terminated string */
 8016e58:	f882 403b 	strb.w	r4, [r2, #59]	; 0x3b
        (void)dc_com_write(&dc_com_db, DC_CELLULAR_INFO, (void *)&cst_cellular_info, sizeof(cst_cellular_info));
 8016e5c:	f000 f9a6 	bl	80171ac <dc_com_write>
        (void)dc_com_read(&dc_com_db,  DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016e60:	8829      	ldrh	r1, [r5, #0]
 8016e62:	481a      	ldr	r0, [pc, #104]	; (8016ecc <CST_get_network_status+0x100>)
 8016e64:	2314      	movs	r3, #20
 8016e66:	aa01      	add	r2, sp, #4
 8016e68:	f000 fa04 	bl	8017274 <dc_com_read>
        signal_info.access_techno = cst_convert_access_techno(reg_status.AcT);
 8016e6c:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
 8016e70:	f7fe fe60 	bl	8015b34 <cst_convert_access_techno>
        (void)dc_com_write(&dc_com_db,  DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016e74:	2314      	movs	r3, #20
 8016e76:	8829      	ldrh	r1, [r5, #0]
        signal_info.access_techno = cst_convert_access_techno(reg_status.AcT);
 8016e78:	f88d 0014 	strb.w	r0, [sp, #20]
        (void)dc_com_write(&dc_com_db,  DC_CELLULAR_SIGNAL_INFO, (void *)&signal_info, sizeof(signal_info));
 8016e7c:	aa01      	add	r2, sp, #4
 8016e7e:	4813      	ldr	r0, [pc, #76]	; (8016ecc <CST_get_network_status+0x100>)
 8016e80:	f000 f994 	bl	80171ac <dc_com_write>
        PRINT_CELLULAR_SERVICE(" ->operator_name = %s", reg_status.operator_name)
 8016e84:	4914      	ldr	r1, [pc, #80]	; (8016ed8 <CST_get_network_status+0x10c>)
 8016e86:	4815      	ldr	r0, [pc, #84]	; (8016edc <CST_get_network_status+0x110>)
 8016e88:	463a      	mov	r2, r7
 8016e8a:	f006 f815 	bl	801ceb8 <sprintf>
 8016e8e:	4813      	ldr	r0, [pc, #76]	; (8016edc <CST_get_network_status+0x110>)
 8016e90:	f001 f850 	bl	8017f34 <crs_strlen>
 8016e94:	4a11      	ldr	r2, [pc, #68]	; (8016edc <CST_get_network_status+0x110>)
 8016e96:	b283      	uxth	r3, r0
 8016e98:	2101      	movs	r1, #1
 8016e9a:	2002      	movs	r0, #2
 8016e9c:	f001 f888 	bl	8017fb0 <traceIF_itmPrint>
 8016ea0:	480e      	ldr	r0, [pc, #56]	; (8016edc <CST_get_network_status+0x110>)
 8016ea2:	f001 f847 	bl	8017f34 <crs_strlen>
 8016ea6:	4a0d      	ldr	r2, [pc, #52]	; (8016edc <CST_get_network_status+0x110>)
 8016ea8:	b283      	uxth	r3, r0
 8016eaa:	2101      	movs	r1, #1
 8016eac:	2002      	movs	r0, #2
 8016eae:	f001 faa5 	bl	80183fc <traceIF_uartPrint>
      ret = CST_NET_REGISTERED;
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	e7ac      	b.n	8016e10 <CST_get_network_status+0x44>
    cst_context.current_EPS_NetworkRegState  = CS_NRS_NOT_REGISTERED_SEARCHING;
 8016eb6:	2002      	movs	r0, #2
 8016eb8:	80d8      	strh	r0, [r3, #6]
    cst_context.current_GPRS_NetworkRegState = CS_NRS_NOT_REGISTERED_SEARCHING;
 8016eba:	8118      	strh	r0, [r3, #8]
    cst_context.current_CS_NetworkRegState   = CS_NRS_NOT_REGISTERED_SEARCHING;
 8016ebc:	8158      	strh	r0, [r3, #10]
    ret = CST_NET_STATUS_ERROR;
 8016ebe:	e7a7      	b.n	8016e10 <CST_get_network_status+0x44>
 8016ec0:	2000029c 	.word	0x2000029c
 8016ec4:	20000240 	.word	0x20000240
 8016ec8:	20008c80 	.word	0x20008c80
 8016ecc:	20008d7c 	.word	0x20008d7c
 8016ed0:	20008c9b 	.word	0x20008c9b
 8016ed4:	20000246 	.word	0x20000246
 8016ed8:	0802b87b 	.word	0x0802b87b
 8016edc:	20008ff8 	.word	0x20008ff8

08016ee0 <CST_set_modem_state>:
  * @param  state     - state to be set in modem state entry
  * @param  chr       - text associated to "state" that will be displayed for debug
  * @retval -
  */
void CST_set_modem_state(dc_com_db_t *db, ca_modem_state_t state, const uint8_t *chr)
{
 8016ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  dc_cellular_info_t cellular_info;

  (void)dc_com_read(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016ee2:	4f17      	ldr	r7, [pc, #92]	; (8016f40 <CST_set_modem_state+0x60>)
{
 8016ee4:	b0b9      	sub	sp, #228	; 0xe4
 8016ee6:	460c      	mov	r4, r1
  (void)dc_com_read(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016ee8:	23dc      	movs	r3, #220	; 0xdc
 8016eea:	8839      	ldrh	r1, [r7, #0]
{
 8016eec:	4615      	mov	r5, r2
  (void)dc_com_read(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016eee:	aa01      	add	r2, sp, #4
{
 8016ef0:	4606      	mov	r6, r0
  (void)dc_com_read(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016ef2:	f000 f9bf 	bl	8017274 <dc_com_read>
  if (cellular_info.modem_state != state)
 8016ef6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016efa:	42a3      	cmp	r3, r4
 8016efc:	d01e      	beq.n	8016f3c <CST_set_modem_state+0x5c>
  {
    cellular_info.modem_state = state;
    (void)dc_com_write(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016efe:	23dc      	movs	r3, #220	; 0xdc
 8016f00:	8839      	ldrh	r1, [r7, #0]
    cellular_info.modem_state = state;
 8016f02:	f88d 400d 	strb.w	r4, [sp, #13]
    (void)dc_com_write(db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016f06:	aa01      	add	r2, sp, #4
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f000 f94f 	bl	80171ac <dc_com_write>
#if (USE_TRACE_CELLULAR_SERVICE == 1U)
    PRINT_CELLULAR_SERVICE("*********** modem state : %s\n\r", chr)
 8016f0e:	490d      	ldr	r1, [pc, #52]	; (8016f44 <CST_set_modem_state+0x64>)
 8016f10:	480d      	ldr	r0, [pc, #52]	; (8016f48 <CST_set_modem_state+0x68>)
 8016f12:	462a      	mov	r2, r5
 8016f14:	f005 ffd0 	bl	801ceb8 <sprintf>
 8016f18:	480b      	ldr	r0, [pc, #44]	; (8016f48 <CST_set_modem_state+0x68>)
 8016f1a:	f001 f80b 	bl	8017f34 <crs_strlen>
 8016f1e:	4a0a      	ldr	r2, [pc, #40]	; (8016f48 <CST_set_modem_state+0x68>)
 8016f20:	b283      	uxth	r3, r0
 8016f22:	2101      	movs	r1, #1
 8016f24:	2002      	movs	r0, #2
 8016f26:	f001 f843 	bl	8017fb0 <traceIF_itmPrint>
 8016f2a:	4807      	ldr	r0, [pc, #28]	; (8016f48 <CST_set_modem_state+0x68>)
 8016f2c:	f001 f802 	bl	8017f34 <crs_strlen>
 8016f30:	4a05      	ldr	r2, [pc, #20]	; (8016f48 <CST_set_modem_state+0x68>)
 8016f32:	b283      	uxth	r3, r0
 8016f34:	2101      	movs	r1, #1
 8016f36:	2002      	movs	r0, #2
 8016f38:	f001 fa60 	bl	80183fc <traceIF_uartPrint>
#else
    UNUSED(chr);
#endif /* (USE_TRACE_CELLULAR_SERVICE == 1U) */
  }
}
 8016f3c:	b039      	add	sp, #228	; 0xe4
 8016f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f40:	20000240 	.word	0x20000240
 8016f44:	0802b891 	.word	0x0802b891
 8016f48:	20008ff8 	.word	0x20008ff8

08016f4c <CST_modem_power_off>:
  * @brief  Clean switch off of modem
  * @param  -
  * @retval -
  */
CS_Status_t CST_modem_power_off(void)
{
 8016f4c:	b500      	push	{lr}
  dc_cellular_info_t cellular_info;
#if (USE_LOW_POWER == 1)
  dc_cellular_power_status_t dc_power_status;
#endif /* (USE_LOW_POWER == 1) */

  PRINT_CELLULAR_SERVICE("CST_modem_power_off\n\r")
 8016f4e:	492c      	ldr	r1, [pc, #176]	; (8017000 <CST_modem_power_off+0xb4>)
 8016f50:	482c      	ldr	r0, [pc, #176]	; (8017004 <CST_modem_power_off+0xb8>)
{
 8016f52:	b0b9      	sub	sp, #228	; 0xe4
  PRINT_CELLULAR_SERVICE("CST_modem_power_off\n\r")
 8016f54:	f006 f820 	bl	801cf98 <strcpy>
 8016f58:	482a      	ldr	r0, [pc, #168]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f5a:	f000 ffeb 	bl	8017f34 <crs_strlen>
 8016f5e:	4a29      	ldr	r2, [pc, #164]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f60:	b283      	uxth	r3, r0
 8016f62:	2101      	movs	r1, #1
 8016f64:	2002      	movs	r0, #2
 8016f66:	f001 f823 	bl	8017fb0 <traceIF_itmPrint>
 8016f6a:	4826      	ldr	r0, [pc, #152]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f6c:	f000 ffe2 	bl	8017f34 <crs_strlen>
 8016f70:	4a24      	ldr	r2, [pc, #144]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f72:	b283      	uxth	r3, r0
 8016f74:	2101      	movs	r1, #1
 8016f76:	2002      	movs	r0, #2
 8016f78:	f001 fa40 	bl	80183fc <traceIF_uartPrint>
  cs_status = CELLULAR_OK;

  (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&cellular_info, sizeof(dc_cellular_info_t));
 8016f7c:	4922      	ldr	r1, [pc, #136]	; (8017008 <CST_modem_power_off+0xbc>)
 8016f7e:	4823      	ldr	r0, [pc, #140]	; (801700c <CST_modem_power_off+0xc0>)
 8016f80:	8809      	ldrh	r1, [r1, #0]
 8016f82:	23dc      	movs	r3, #220	; 0xdc
 8016f84:	aa01      	add	r2, sp, #4
 8016f86:	f000 f975 	bl	8017274 <dc_com_read>
  if ((cellular_info.modem_state == CA_MODEM_NETWORK_REGISTERED) ||
 8016f8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8016f8e:	3b04      	subs	r3, #4
 8016f90:	2b01      	cmp	r3, #1
 8016f92:	d91a      	bls.n	8016fca <CST_modem_power_off+0x7e>
#if (USE_LOW_POWER == 1)
  CSP_StopTimeout();
#endif /* (USE_LOW_POWER == 1) */
  if (cs_status == CELLULAR_OK)
  {
    PRINT_CELLULAR_SERVICE("  Power off modem\n\r")
 8016f94:	491e      	ldr	r1, [pc, #120]	; (8017010 <CST_modem_power_off+0xc4>)
 8016f96:	481b      	ldr	r0, [pc, #108]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f98:	f005 fffe 	bl	801cf98 <strcpy>
 8016f9c:	4819      	ldr	r0, [pc, #100]	; (8017004 <CST_modem_power_off+0xb8>)
 8016f9e:	f000 ffc9 	bl	8017f34 <crs_strlen>
 8016fa2:	4a18      	ldr	r2, [pc, #96]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fa4:	b283      	uxth	r3, r0
 8016fa6:	2101      	movs	r1, #1
 8016fa8:	2002      	movs	r0, #2
 8016faa:	f001 f801 	bl	8017fb0 <traceIF_itmPrint>
 8016fae:	4815      	ldr	r0, [pc, #84]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fb0:	f000 ffc0 	bl	8017f34 <crs_strlen>
 8016fb4:	4a13      	ldr	r2, [pc, #76]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fb6:	b283      	uxth	r3, r0
 8016fb8:	2101      	movs	r1, #1
 8016fba:	2002      	movs	r0, #2
 8016fbc:	f001 fa1e 	bl	80183fc <traceIF_uartPrint>
    cs_status = osCDS_power_off();
 8016fc0:	f7fc fecc 	bl	8013d5c <osCDS_power_off>
  }

  return (cs_status);
}
 8016fc4:	b039      	add	sp, #228	; 0xe4
 8016fc6:	f85d fb04 	ldr.w	pc, [sp], #4
      PRINT_CELLULAR_SERVICE("  Detach from network\n\r")
 8016fca:	4912      	ldr	r1, [pc, #72]	; (8017014 <CST_modem_power_off+0xc8>)
 8016fcc:	480d      	ldr	r0, [pc, #52]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fce:	f005 ffe3 	bl	801cf98 <strcpy>
 8016fd2:	480c      	ldr	r0, [pc, #48]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fd4:	f000 ffae 	bl	8017f34 <crs_strlen>
 8016fd8:	4a0a      	ldr	r2, [pc, #40]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fda:	b283      	uxth	r3, r0
 8016fdc:	2101      	movs	r1, #1
 8016fde:	2002      	movs	r0, #2
 8016fe0:	f000 ffe6 	bl	8017fb0 <traceIF_itmPrint>
 8016fe4:	4807      	ldr	r0, [pc, #28]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fe6:	f000 ffa5 	bl	8017f34 <crs_strlen>
 8016fea:	4a06      	ldr	r2, [pc, #24]	; (8017004 <CST_modem_power_off+0xb8>)
 8016fec:	b283      	uxth	r3, r0
 8016fee:	2101      	movs	r1, #1
 8016ff0:	2002      	movs	r0, #2
 8016ff2:	f001 fa03 	bl	80183fc <traceIF_uartPrint>
      cs_status = osCS_detach_PS_domain();
 8016ff6:	f7fc fef7 	bl	8013de8 <osCS_detach_PS_domain>
  if (cs_status == CELLULAR_OK)
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0ca      	beq.n	8016f94 <CST_modem_power_off+0x48>
 8016ffe:	e7e1      	b.n	8016fc4 <CST_modem_power_off+0x78>
 8017000:	0802b8b0 	.word	0x0802b8b0
 8017004:	20008ff8 	.word	0x20008ff8
 8017008:	20000240 	.word	0x20000240
 801700c:	20008d7c 	.word	0x20008d7c
 8017010:	0802b8c6 	.word	0x0802b8c6
 8017014:	0802b8da 	.word	0x0802b8da

08017018 <dc_com_register_serv>:
 * @note                     this structure must be a persistent variable.
 * @param size             - size of p_data structure.
 * @retval dc_com_res_id_t - returns the identifier of the registered Data Cache entry
 */
dc_com_res_id_t dc_com_register_serv(dc_com_db_t *p_dc_db, void *p_data,
		uint16_t size) {
 8017018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801701c:	460e      	mov	r6, r1
 801701e:	4617      	mov	r7, r2
	dc_com_res_id_t res_id;
	dc_base_rt_info_t *p_base_rt;

	if ((p_dc_db != NULL) && (p_dc_db->serv_number < DC_COM_ENTRY_MAX_NB)
 8017020:	4604      	mov	r4, r0
 8017022:	b308      	cbz	r0, 8017068 <dc_com_register_serv+0x50>
 8017024:	8843      	ldrh	r3, [r0, #2]
 8017026:	2b07      	cmp	r3, #7
 8017028:	d81e      	bhi.n	8017068 <dc_com_register_serv+0x50>
			&& (size >= sizeof(dc_base_rt_info_t))) {
 801702a:	2a0b      	cmp	r2, #11
 801702c:	d91c      	bls.n	8017068 <dc_com_register_serv+0x50>
		(void) rtosalMutexAcquire(dc_common_mutex, RTOSAL_WAIT_FOREVER);
 801702e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80170a0 <dc_com_register_serv+0x88>
 8017032:	f04f 31ff 	mov.w	r1, #4294967295
 8017036:	f8d8 0000 	ldr.w	r0, [r8]
 801703a:	f000 fec8 	bl	8017dce <rtosalMutexAcquire>
		res_id = p_dc_db->serv_number;
 801703e:	8865      	ldrh	r5, [r4, #2]
		p_base_rt->header.res_id = res_id;
		p_base_rt->header.size = size;
		p_base_rt->rt_state = DC_SERVICE_OFF;

		p_dc_db->serv_number++;
		(void) rtosalMutexRelease(dc_common_mutex);
 8017040:	f8d8 0000 	ldr.w	r0, [r8]
		p_dc_db->p_dc_db[res_id] = p_data;
 8017044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017048:	635e      	str	r6, [r3, #52]	; 0x34
		p_dc_db->dc_db_len[res_id] = size;
 801704a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801704e:	f8a3 7054 	strh.w	r7, [r3, #84]	; 0x54
		p_base_rt->rt_state = DC_SERVICE_OFF;
 8017052:	2303      	movs	r3, #3
 8017054:	7233      	strb	r3, [r6, #8]
		p_dc_db->serv_number++;
 8017056:	1c6b      	adds	r3, r5, #1
		p_base_rt->header.res_id = res_id;
 8017058:	8035      	strh	r5, [r6, #0]
		p_base_rt->header.size = size;
 801705a:	6077      	str	r7, [r6, #4]
		p_dc_db->serv_number++;
 801705c:	8063      	strh	r3, [r4, #2]
		(void) rtosalMutexRelease(dc_common_mutex);
 801705e:	f000 feb8 	bl	8017dd2 <rtosalMutexRelease>
		res_id = DC_COM_INVALID_ENTRY;
		PRINT_ERR("dc_com_register_serv : Impossible to register")
	}

	return res_id;
}
 8017062:	4628      	mov	r0, r5
 8017064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PRINT_ERR("dc_com_register_serv : Impossible to register")
 8017068:	490b      	ldr	r1, [pc, #44]	; (8017098 <dc_com_register_serv+0x80>)
 801706a:	480c      	ldr	r0, [pc, #48]	; (801709c <dc_com_register_serv+0x84>)
 801706c:	f005 ff94 	bl	801cf98 <strcpy>
 8017070:	480a      	ldr	r0, [pc, #40]	; (801709c <dc_com_register_serv+0x84>)
 8017072:	f000 ff5f 	bl	8017f34 <crs_strlen>
 8017076:	4a09      	ldr	r2, [pc, #36]	; (801709c <dc_com_register_serv+0x84>)
 8017078:	b283      	uxth	r3, r0
 801707a:	2110      	movs	r1, #16
 801707c:	2000      	movs	r0, #0
 801707e:	f000 ff97 	bl	8017fb0 <traceIF_itmPrint>
 8017082:	4806      	ldr	r0, [pc, #24]	; (801709c <dc_com_register_serv+0x84>)
 8017084:	f000 ff56 	bl	8017f34 <crs_strlen>
 8017088:	4a04      	ldr	r2, [pc, #16]	; (801709c <dc_com_register_serv+0x84>)
 801708a:	b283      	uxth	r3, r0
 801708c:	2110      	movs	r1, #16
 801708e:	2000      	movs	r0, #0
 8017090:	f001 f9b4 	bl	80183fc <traceIF_uartPrint>
		res_id = DC_COM_INVALID_ENTRY;
 8017094:	25ff      	movs	r5, #255	; 0xff
 8017096:	e7e4      	b.n	8017062 <dc_com_register_serv+0x4a>
 8017098:	0802b8f2 	.word	0x0802b8f2
 801709c:	20008df8 	.word	0x20008df8
 80170a0:	200040ec 	.word	0x200040ec

080170a4 <dc_com_core_register_gen_event_cb>:
 * @note                     This address is passed as a parameter of the callback
 * @retval dc_com_reg_id_t - return the identifier of the registered consumer or
 *                           DC_COM_INVALID_ENTRY in case of error
 */
dc_com_reg_id_t dc_com_core_register_gen_event_cb(dc_com_db_t *p_dc_db,
		dc_com_gen_event_callback_t notif_cb, const void *p_private_data) {
 80170a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a8:	460e      	mov	r6, r1
 80170aa:	4690      	mov	r8, r2
	dc_com_reg_id_t consumer_id;

	if ((p_dc_db != NULL) && (notif_cb != NULL)
 80170ac:	4604      	mov	r4, r0
 80170ae:	b1e8      	cbz	r0, 80170ec <dc_com_core_register_gen_event_cb+0x48>
 80170b0:	b1e1      	cbz	r1, 80170ec <dc_com_core_register_gen_event_cb+0x48>
			&& (p_dc_db->consumer_core_number < DC_COM_MAX_NB_CORE_SUBSCRIBER)) {
 80170b2:	7805      	ldrb	r5, [r0, #0]
 80170b4:	2d02      	cmp	r5, #2
 80170b6:	d819      	bhi.n	80170ec <dc_com_core_register_gen_event_cb+0x48>
		consumer_id = p_dc_db->consumer_core_number;
		(void) rtosalMutexAcquire(dc_common_mutex, RTOSAL_WAIT_FOREVER);
 80170b8:	4f18      	ldr	r7, [pc, #96]	; (801711c <dc_com_core_register_gen_event_cb+0x78>)
 80170ba:	f04f 31ff 	mov.w	r1, #4294967295
 80170be:	6838      	ldr	r0, [r7, #0]
 80170c0:	f000 fe85 	bl	8017dce <rtosalMutexAcquire>
 * @retval dc_com_reg_id_t - return the identifier of the registered consumer or
 *                           DC_COM_INVALID_ENTRY in case of error
 */
void dc_com_register_gen_event_cb_common(dc_com_db_t *p_dc_db, uint8_t id,
		dc_com_gen_event_callback_t notif_cb, const void *p_private_data) {
	p_dc_db->consumer_info[id].consumer_reg_id = id;
 80170c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80170c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		(void) rtosalMutexRelease(dc_common_mutex);
 80170cc:	6838      	ldr	r0, [r7, #0]
	p_dc_db->consumer_info[id].consumer_reg_id = id;
 80170ce:	711d      	strb	r5, [r3, #4]
	p_dc_db->consumer_info[id].notif_cb = notif_cb;
 80170d0:	609e      	str	r6, [r3, #8]
	p_dc_db->consumer_info[id].private_consumer_data = p_private_data;
 80170d2:	230c      	movs	r3, #12
 80170d4:	fb03 4305 	mla	r3, r3, r5, r4
 80170d8:	f8c3 800c 	str.w	r8, [r3, #12]
		p_dc_db->consumer_core_number++;
 80170dc:	7823      	ldrb	r3, [r4, #0]
 80170de:	3301      	adds	r3, #1
 80170e0:	7023      	strb	r3, [r4, #0]
		(void) rtosalMutexRelease(dc_common_mutex);
 80170e2:	f000 fe76 	bl	8017dd2 <rtosalMutexRelease>
}
 80170e6:	4628      	mov	r0, r5
 80170e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PRINT_ERR(
 80170ec:	490c      	ldr	r1, [pc, #48]	; (8017120 <dc_com_core_register_gen_event_cb+0x7c>)
 80170ee:	480d      	ldr	r0, [pc, #52]	; (8017124 <dc_com_core_register_gen_event_cb+0x80>)
 80170f0:	f005 ff52 	bl	801cf98 <strcpy>
 80170f4:	480b      	ldr	r0, [pc, #44]	; (8017124 <dc_com_core_register_gen_event_cb+0x80>)
 80170f6:	f000 ff1d 	bl	8017f34 <crs_strlen>
 80170fa:	4a0a      	ldr	r2, [pc, #40]	; (8017124 <dc_com_core_register_gen_event_cb+0x80>)
 80170fc:	b283      	uxth	r3, r0
 80170fe:	2110      	movs	r1, #16
 8017100:	2000      	movs	r0, #0
 8017102:	f000 ff55 	bl	8017fb0 <traceIF_itmPrint>
 8017106:	4807      	ldr	r0, [pc, #28]	; (8017124 <dc_com_core_register_gen_event_cb+0x80>)
 8017108:	f000 ff14 	bl	8017f34 <crs_strlen>
 801710c:	4a05      	ldr	r2, [pc, #20]	; (8017124 <dc_com_core_register_gen_event_cb+0x80>)
 801710e:	b283      	uxth	r3, r0
 8017110:	2110      	movs	r1, #16
 8017112:	2000      	movs	r0, #0
 8017114:	f001 f972 	bl	80183fc <traceIF_uartPrint>
		consumer_id = DC_COM_INVALID_ENTRY;
 8017118:	25ff      	movs	r5, #255	; 0xff
 801711a:	e7e4      	b.n	80170e6 <dc_com_core_register_gen_event_cb+0x42>
 801711c:	200040ec 	.word	0x200040ec
 8017120:	0802b932 	.word	0x0802b932
 8017124:	20008df8 	.word	0x20008df8

08017128 <dc_com_register_gen_event_cb>:
		dc_com_gen_event_callback_t notif_cb, const void *p_private_data) {
 8017128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712c:	460e      	mov	r6, r1
 801712e:	4690      	mov	r8, r2
	if ((p_dc_db != NULL) && (notif_cb != NULL)
 8017130:	4604      	mov	r4, r0
 8017132:	b1e8      	cbz	r0, 8017170 <dc_com_register_gen_event_cb+0x48>
 8017134:	b1e1      	cbz	r1, 8017170 <dc_com_register_gen_event_cb+0x48>
			&& (p_dc_db->consumer_appli_number < DC_COM_MAX_NB_SUBSCRIBER)) {
 8017136:	7845      	ldrb	r5, [r0, #1]
 8017138:	2d03      	cmp	r5, #3
 801713a:	d819      	bhi.n	8017170 <dc_com_register_gen_event_cb+0x48>
		(void) rtosalMutexAcquire(dc_common_mutex, RTOSAL_WAIT_FOREVER);
 801713c:	4f18      	ldr	r7, [pc, #96]	; (80171a0 <dc_com_register_gen_event_cb+0x78>)
 801713e:	f04f 31ff 	mov.w	r1, #4294967295
 8017142:	6838      	ldr	r0, [r7, #0]
 8017144:	f000 fe43 	bl	8017dce <rtosalMutexAcquire>
	p_dc_db->consumer_info[id].consumer_reg_id = id;
 8017148:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801714c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		(void) rtosalMutexRelease(dc_common_mutex);
 8017150:	6838      	ldr	r0, [r7, #0]
	p_dc_db->consumer_info[id].consumer_reg_id = id;
 8017152:	711d      	strb	r5, [r3, #4]
	p_dc_db->consumer_info[id].notif_cb = notif_cb;
 8017154:	609e      	str	r6, [r3, #8]
	p_dc_db->consumer_info[id].private_consumer_data = p_private_data;
 8017156:	230c      	movs	r3, #12
 8017158:	fb03 4305 	mla	r3, r3, r5, r4
 801715c:	f8c3 800c 	str.w	r8, [r3, #12]
		p_dc_db->consumer_appli_number++;
 8017160:	7863      	ldrb	r3, [r4, #1]
 8017162:	3301      	adds	r3, #1
 8017164:	7063      	strb	r3, [r4, #1]
		(void) rtosalMutexRelease(dc_common_mutex);
 8017166:	f000 fe34 	bl	8017dd2 <rtosalMutexRelease>
}
 801716a:	4628      	mov	r0, r5
 801716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PRINT_ERR(
 8017170:	490c      	ldr	r1, [pc, #48]	; (80171a4 <dc_com_register_gen_event_cb+0x7c>)
 8017172:	480d      	ldr	r0, [pc, #52]	; (80171a8 <dc_com_register_gen_event_cb+0x80>)
 8017174:	f005 ff10 	bl	801cf98 <strcpy>
 8017178:	480b      	ldr	r0, [pc, #44]	; (80171a8 <dc_com_register_gen_event_cb+0x80>)
 801717a:	f000 fedb 	bl	8017f34 <crs_strlen>
 801717e:	4a0a      	ldr	r2, [pc, #40]	; (80171a8 <dc_com_register_gen_event_cb+0x80>)
 8017180:	b283      	uxth	r3, r0
 8017182:	2110      	movs	r1, #16
 8017184:	2000      	movs	r0, #0
 8017186:	f000 ff13 	bl	8017fb0 <traceIF_itmPrint>
 801718a:	4807      	ldr	r0, [pc, #28]	; (80171a8 <dc_com_register_gen_event_cb+0x80>)
 801718c:	f000 fed2 	bl	8017f34 <crs_strlen>
 8017190:	4a05      	ldr	r2, [pc, #20]	; (80171a8 <dc_com_register_gen_event_cb+0x80>)
 8017192:	b283      	uxth	r3, r0
 8017194:	2110      	movs	r1, #16
 8017196:	2000      	movs	r0, #0
 8017198:	f001 f930 	bl	80183fc <traceIF_uartPrint>
		consumer_id = DC_COM_INVALID_ENTRY;
 801719c:	25ff      	movs	r5, #255	; 0xff
 801719e:	e7e4      	b.n	801716a <dc_com_register_gen_event_cb+0x42>
 80171a0:	200040ec 	.word	0x200040ec
 80171a4:	0802b989 	.word	0x0802b989
 80171a8:	20008df8 	.word	0x20008df8

080171ac <dc_com_write>:
 * @param  p_data          - data to write
 * @param  len             - length of p_data to write
 * @retval dc_com_status_t - return status with DC_COM_OK or DC_COM_ERROR
 */
dc_com_status_t dc_com_write(dc_com_db_t *p_dc, dc_com_res_id_t res_id,
		const void *p_data, uint32_t len) {
 80171ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171b0:	460d      	mov	r5, r1
 80171b2:	4617      	mov	r7, r2
 80171b4:	461e      	mov	r6, r3
	dc_com_reg_id_t reg_id;
	dc_base_rt_info_t *dc_base_rt_info;
	dc_com_status_t res;
	dc_com_db_t *com_db = (dc_com_db_t*) p_dc;

	if ((p_dc != NULL) && (res_id != DC_COM_INVALID_ENTRY)
 80171b6:	4604      	mov	r4, r0
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d03b      	beq.n	8017234 <dc_com_write+0x88>
 80171bc:	29ff      	cmp	r1, #255	; 0xff
 80171be:	d039      	beq.n	8017234 <dc_com_write+0x88>
			&& (res_id < com_db->serv_number)
 80171c0:	8843      	ldrh	r3, [r0, #2]
 80171c2:	428b      	cmp	r3, r1
 80171c4:	d936      	bls.n	8017234 <dc_com_write+0x88>
			&& (com_db->dc_db_len[res_id] >= len) && (p_data != NULL)) {
 80171c6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 80171ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80171ce:	42b3      	cmp	r3, r6
 80171d0:	d330      	bcc.n	8017234 <dc_com_write+0x88>
 80171d2:	b37a      	cbz	r2, 8017234 <dc_com_write+0x88>
		/* check that something has changed in data to write */
		/* if nothing changed, just do nothing */
		if (memcmp(com_db->p_dc_db[res_id], p_data, len) != 0) {
 80171d4:	eb00 0981 	add.w	r9, r0, r1, lsl #2
 80171d8:	4632      	mov	r2, r6
 80171da:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 80171de:	4639      	mov	r1, r7
 80171e0:	f005 fe1e 	bl	801ce20 <memcmp>
 80171e4:	b1d8      	cbz	r0, 801721e <dc_com_write+0x72>
			/* Something changed, in the input data (p_data). Write the new data to the Data Cache structure */
			/* Avoid to be interrupted by another event before the end of first event processing */
			(void) rtosalMutexAcquire(dc_common_mutex, RTOSAL_WAIT_FOREVER);
 80171e6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8017270 <dc_com_write+0xc4>
 80171ea:	f04f 31ff 	mov.w	r1, #4294967295
 80171ee:	f8d8 0000 	ldr.w	r0, [r8]
 80171f2:	f000 fdec 	bl	8017dce <rtosalMutexAcquire>

			(void) memcpy((void*) (com_db->p_dc_db[res_id]), p_data,
 80171f6:	4632      	mov	r2, r6
 80171f8:	4639      	mov	r1, r7
 80171fa:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
 80171fe:	f005 fe1d 	bl	801ce3c <memcpy>
					(uint32_t) len);
			dc_base_rt_info = (dc_base_rt_info_t*) (com_db->p_dc_db[res_id]);
 8017202:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
			/* So for loops from the beginning to the last application registered */
			for (reg_id = 0U; reg_id < p_dc->consumer_appli_number; reg_id++) {
				dc_com_consumer_info_t *consumer_info;
				consumer_info = &(com_db->consumer_info[reg_id]);

				if (consumer_info->notif_cb != NULL) {
 8017206:	270c      	movs	r7, #12
			dc_base_rt_info->header.size = len;
 8017208:	605e      	str	r6, [r3, #4]
			dc_base_rt_info->header.res_id = res_id;
 801720a:	801d      	strh	r5, [r3, #0]
			for (reg_id = 0U; reg_id < p_dc->consumer_appli_number; reg_id++) {
 801720c:	2600      	movs	r6, #0
 801720e:	7862      	ldrb	r2, [r4, #1]
 8017210:	b2f3      	uxtb	r3, r6
 8017212:	429a      	cmp	r2, r3
 8017214:	d805      	bhi.n	8017222 <dc_com_write+0x76>
					/* let's call now the call back                                                  */
					consumer_info->notif_cb((dc_com_event_id_t) res_id,
							consumer_info->private_consumer_data);
				}
			}
			(void) rtosalMutexRelease(dc_common_mutex);
 8017216:	f8d8 0000 	ldr.w	r0, [r8]
 801721a:	f000 fdda 	bl	8017dd2 <rtosalMutexRelease>
		}
		res = DC_COM_OK;
 801721e:	2001      	movs	r0, #1
 8017220:	e01f      	b.n	8017262 <dc_com_write+0xb6>
				if (consumer_info->notif_cb != NULL) {
 8017222:	fb07 4303 	mla	r3, r7, r3, r4
 8017226:	689a      	ldr	r2, [r3, #8]
 8017228:	b112      	cbz	r2, 8017230 <dc_com_write+0x84>
					consumer_info->notif_cb((dc_com_event_id_t) res_id,
 801722a:	68d9      	ldr	r1, [r3, #12]
 801722c:	4628      	mov	r0, r5
 801722e:	4790      	blx	r2
			for (reg_id = 0U; reg_id < p_dc->consumer_appli_number; reg_id++) {
 8017230:	3601      	adds	r6, #1
 8017232:	e7ec      	b.n	801720e <dc_com_write+0x62>
	} else {
		res = DC_COM_ERROR;
		PRINT_ERR(
 8017234:	490c      	ldr	r1, [pc, #48]	; (8017268 <dc_com_write+0xbc>)
 8017236:	480d      	ldr	r0, [pc, #52]	; (801726c <dc_com_write+0xc0>)
 8017238:	f005 feae 	bl	801cf98 <strcpy>
 801723c:	480b      	ldr	r0, [pc, #44]	; (801726c <dc_com_write+0xc0>)
 801723e:	f000 fe79 	bl	8017f34 <crs_strlen>
 8017242:	4a0a      	ldr	r2, [pc, #40]	; (801726c <dc_com_write+0xc0>)
 8017244:	b283      	uxth	r3, r0
 8017246:	2110      	movs	r1, #16
 8017248:	2000      	movs	r0, #0
 801724a:	f000 feb1 	bl	8017fb0 <traceIF_itmPrint>
 801724e:	4807      	ldr	r0, [pc, #28]	; (801726c <dc_com_write+0xc0>)
 8017250:	f000 fe70 	bl	8017f34 <crs_strlen>
 8017254:	4a05      	ldr	r2, [pc, #20]	; (801726c <dc_com_write+0xc0>)
 8017256:	b283      	uxth	r3, r0
 8017258:	2110      	movs	r1, #16
 801725a:	2000      	movs	r0, #0
 801725c:	f001 f8ce 	bl	80183fc <traceIF_uartPrint>
		res = DC_COM_ERROR;
 8017260:	2000      	movs	r0, #0
				"dc_com_write : Impossible to write to datacache. Verify parameters.")
	}
	return res;
}
 8017262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017266:	bf00      	nop
 8017268:	0802b9db 	.word	0x0802b9db
 801726c:	20008df8 	.word	0x20008df8
 8017270:	200040ec 	.word	0x200040ec

08017274 <dc_com_read>:
 * @param  p_data          - data to read
 * @param  len             - length of p_data to read
 * @retval dc_com_status_t - return status with DC_COM_OK or DC_COM_ERROR
 */
dc_com_status_t dc_com_read(dc_com_db_t *p_dc, dc_com_res_id_t res_id,
		void *p_data, uint32_t len) {
 8017274:	b510      	push	{r4, lr}
 8017276:	4604      	mov	r4, r0
 8017278:	4610      	mov	r0, r2
 801727a:	461a      	mov	r2, r3
	dc_com_status_t res;

	if ((p_dc != NULL) && (res_id != DC_COM_INVALID_ENTRY)
 801727c:	b18c      	cbz	r4, 80172a2 <dc_com_read+0x2e>
 801727e:	29ff      	cmp	r1, #255	; 0xff
 8017280:	d00f      	beq.n	80172a2 <dc_com_read+0x2e>
			&& (res_id < p_dc->serv_number)
 8017282:	8863      	ldrh	r3, [r4, #2]
 8017284:	428b      	cmp	r3, r1
 8017286:	d90c      	bls.n	80172a2 <dc_com_read+0x2e>
			&& (p_dc->dc_db_len[res_id] >= len)) {
 8017288:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801728c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017290:	4293      	cmp	r3, r2
 8017292:	d306      	bcc.n	80172a2 <dc_com_read+0x2e>
		(void) memcpy(p_data, (void*) p_dc->p_dc_db[res_id], (uint32_t) len);
 8017294:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801729a:	f005 fdcf 	bl	801ce3c <memcpy>
		res = DC_COM_OK;
 801729e:	2001      	movs	r0, #1
		res = DC_COM_ERROR;
		PRINT_ERR(
				"dc_com_write : Impossible to read from datacache. Verify parameters.")
	}
	return res;
}
 80172a0:	bd10      	pop	{r4, pc}
		(void) memset(p_data, 0, (uint32_t) len); /* p_data->rt_state == 0 is DC_SERVICE_UNAVAIL */
 80172a2:	2100      	movs	r1, #0
 80172a4:	f005 fdd8 	bl	801ce58 <memset>
		PRINT_ERR(
 80172a8:	490b      	ldr	r1, [pc, #44]	; (80172d8 <dc_com_read+0x64>)
 80172aa:	480c      	ldr	r0, [pc, #48]	; (80172dc <dc_com_read+0x68>)
 80172ac:	f005 fe74 	bl	801cf98 <strcpy>
 80172b0:	480a      	ldr	r0, [pc, #40]	; (80172dc <dc_com_read+0x68>)
 80172b2:	f000 fe3f 	bl	8017f34 <crs_strlen>
 80172b6:	4a09      	ldr	r2, [pc, #36]	; (80172dc <dc_com_read+0x68>)
 80172b8:	b283      	uxth	r3, r0
 80172ba:	2110      	movs	r1, #16
 80172bc:	2000      	movs	r0, #0
 80172be:	f000 fe77 	bl	8017fb0 <traceIF_itmPrint>
 80172c2:	4806      	ldr	r0, [pc, #24]	; (80172dc <dc_com_read+0x68>)
 80172c4:	f000 fe36 	bl	8017f34 <crs_strlen>
 80172c8:	4a04      	ldr	r2, [pc, #16]	; (80172dc <dc_com_read+0x68>)
 80172ca:	b283      	uxth	r3, r0
 80172cc:	2110      	movs	r1, #16
 80172ce:	2000      	movs	r0, #0
 80172d0:	f001 f894 	bl	80183fc <traceIF_uartPrint>
		res = DC_COM_ERROR;
 80172d4:	2000      	movs	r0, #0
 80172d6:	e7e3      	b.n	80172a0 <dc_com_read+0x2c>
 80172d8:	0802ba31 	.word	0x0802ba31
 80172dc:	20008df8 	.word	0x20008df8

080172e0 <dc_com_init>:
/**
 * @brief  Initialize the Data Cache module.
 * @param  p_dc - data base reference (Must be set to &dc_com_db)
 * @retval -
 */
void dc_com_init(dc_com_db_t *p_dc) {
 80172e0:	b538      	push	{r3, r4, r5, lr}
 80172e2:	4604      	mov	r4, r0
	(void) memset(p_dc, 0, sizeof(dc_com_db_t));
 80172e4:	2264      	movs	r2, #100	; 0x64
 80172e6:	2100      	movs	r1, #0
	/* Start to register the appli consumers after all the core consumers. */
	p_dc->consumer_appli_number = DC_COM_MAX_NB_CORE_SUBSCRIBER;
 80172e8:	2503      	movs	r5, #3
	(void) memset(p_dc, 0, sizeof(dc_com_db_t));
 80172ea:	f005 fdb5 	bl	801ce58 <memset>
	p_dc->consumer_appli_number = DC_COM_MAX_NB_CORE_SUBSCRIBER;
 80172ee:	7065      	strb	r5, [r4, #1]

	dc_common_mutex = rtosalMutexNew(NULL);
 80172f0:	2000      	movs	r0, #0
 80172f2:	f000 fd63 	bl	8017dbc <rtosalMutexNew>
 80172f6:	4b05      	ldr	r3, [pc, #20]	; (801730c <dc_com_init+0x2c>)
 80172f8:	6018      	str	r0, [r3, #0]
	if (dc_common_mutex == NULL) {
 80172fa:	b930      	cbnz	r0, 801730a <dc_com_init+0x2a>
		ERROR_Handler(DBG_CHAN_UTILITIES, 1, ERROR_FATAL);
 80172fc:	462a      	mov	r2, r5
 80172fe:	2101      	movs	r1, #1
	}
}
 8017300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ERROR_Handler(DBG_CHAN_UTILITIES, 1, ERROR_FATAL);
 8017304:	2005      	movs	r0, #5
 8017306:	f000 b819 	b.w	801733c <ERROR_Handler>
}
 801730a:	bd38      	pop	{r3, r4, r5, pc}
 801730c:	200040ec 	.word	0x200040ec

08017310 <dc_com_start>:
 * @retval -
 */
void dc_com_start(dc_com_db_t *p_dc) {
	UNUSED(p_dc);
	/* Nothing to do */
	__NOP();
 8017310:	bf00      	nop
}
 8017312:	4770      	bx	lr

08017314 <ERROR_Handler_Init>:
void ERROR_Handler_Init(void)
{
  uint32_t i;

  /* initialize error array */
  for (i = 0U; i < MAX_ERROR_ENTRIES; i++)
 8017314:	2200      	movs	r2, #0
 8017316:	4b07      	ldr	r3, [pc, #28]	; (8017334 <ERROR_Handler_Init+0x20>)
  {
    errors_table[i].channel = DBG_CHAN_ERROR_HANDLER; /* default value = self (ie no error) */
 8017318:	2006      	movs	r0, #6
    errors_table[i].errorId = 0;
 801731a:	4611      	mov	r1, r2
  for (i = 0U; i < MAX_ERROR_ENTRIES; i++)
 801731c:	3201      	adds	r2, #1
 801731e:	2a20      	cmp	r2, #32
    errors_table[i].channel = DBG_CHAN_ERROR_HANDLER; /* default value = self (ie no error) */
 8017320:	7018      	strb	r0, [r3, #0]
    errors_table[i].errorId = 0;
 8017322:	6059      	str	r1, [r3, #4]
    errors_table[i].gravity = ERROR_NO;
 8017324:	7219      	strb	r1, [r3, #8]
  for (i = 0U; i < MAX_ERROR_ENTRIES; i++)
 8017326:	f103 0310 	add.w	r3, r3, #16
 801732a:	d1f7      	bne.n	801731c <ERROR_Handler_Init+0x8>
  }
  error_index = 0U; /* current error index */
 801732c:	4b02      	ldr	r3, [pc, #8]	; (8017338 <ERROR_Handler_Init+0x24>)
 801732e:	8019      	strh	r1, [r3, #0]
}
 8017330:	4770      	bx	lr
 8017332:	bf00      	nop
 8017334:	200040f4 	.word	0x200040f4
 8017338:	200040f2 	.word	0x200040f2

0801733c <ERROR_Handler>:

void ERROR_Handler(dbg_channels_t chan, int32_t errorId, error_gravity_t gravity)
{
  /* if this is the very first error, init error array */
  if (error_counter == 0U)
 801733c:	4b2b      	ldr	r3, [pc, #172]	; (80173ec <ERROR_Handler+0xb0>)
{
 801733e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017342:	4616      	mov	r6, r2
  if (error_counter == 0U)
 8017344:	881a      	ldrh	r2, [r3, #0]
{
 8017346:	4607      	mov	r7, r0
 8017348:	4688      	mov	r8, r1
 801734a:	4699      	mov	r9, r3
  if (error_counter == 0U)
 801734c:	b91a      	cbnz	r2, 8017356 <ERROR_Handler+0x1a>
  {
    ERROR_Handler_Init();
 801734e:	f7ff ffe1 	bl	8017314 <ERROR_Handler_Init>
#if (USE_PRINTF == 0U)
    /* Error Handler may use trace print */
    traceIF_init();
 8017352:	f001 f941 	bl	80185d8 <traceIF_init>
#endif /* (USE_PRINTF == 0U)  */
  }

  /* log the error */
  error_counter = (error_counter + 1U) % MAX_ERROR_COUNTER;
 8017356:	f8b9 4000 	ldrh.w	r4, [r9]
  errors_table[error_index].count = error_counter;
 801735a:	4b25      	ldr	r3, [pc, #148]	; (80173f0 <ERROR_Handler+0xb4>)
  errors_table[error_index].channel = chan;
  errors_table[error_index].errorId = errorId;
  errors_table[error_index].gravity = gravity;

  PRINT_INFO("LOG ERROR #%d: channel=%d / errorId=%ld / gravity=%d", error_counter, chan, errorId, gravity)
 801735c:	4825      	ldr	r0, [pc, #148]	; (80173f4 <ERROR_Handler+0xb8>)
  error_counter = (error_counter + 1U) % MAX_ERROR_COUNTER;
 801735e:	3401      	adds	r4, #1
 8017360:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8017364:	fbb4 f5f5 	udiv	r5, r4, r5
 8017368:	ebc5 4505 	rsb	r5, r5, r5, lsl #16
 801736c:	1b62      	subs	r2, r4, r5
  errors_table[error_index].count = error_counter;
 801736e:	4d22      	ldr	r5, [pc, #136]	; (80173f8 <ERROR_Handler+0xbc>)
  error_counter = (error_counter + 1U) % MAX_ERROR_COUNTER;
 8017370:	f8a9 2000 	strh.w	r2, [r9]
  errors_table[error_index].count = error_counter;
 8017374:	882c      	ldrh	r4, [r5, #0]
 8017376:	0121      	lsls	r1, r4, #4
 8017378:	eb03 1404 	add.w	r4, r3, r4, lsl #4
  errors_table[error_index].channel = chan;
 801737c:	545f      	strb	r7, [r3, r1]
  errors_table[error_index].count = error_counter;
 801737e:	60e2      	str	r2, [r4, #12]
  PRINT_INFO("LOG ERROR #%d: channel=%d / errorId=%ld / gravity=%d", error_counter, chan, errorId, gravity)
 8017380:	491e      	ldr	r1, [pc, #120]	; (80173fc <ERROR_Handler+0xc0>)
  errors_table[error_index].errorId = errorId;
 8017382:	f8c4 8004 	str.w	r8, [r4, #4]
  PRINT_INFO("LOG ERROR #%d: channel=%d / errorId=%ld / gravity=%d", error_counter, chan, errorId, gravity)
 8017386:	463b      	mov	r3, r7
  errors_table[error_index].gravity = gravity;
 8017388:	7226      	strb	r6, [r4, #8]
  PRINT_INFO("LOG ERROR #%d: channel=%d / errorId=%ld / gravity=%d", error_counter, chan, errorId, gravity)
 801738a:	e9cd 8600 	strd	r8, r6, [sp]
 801738e:	f005 fd93 	bl	801ceb8 <sprintf>
 8017392:	4818      	ldr	r0, [pc, #96]	; (80173f4 <ERROR_Handler+0xb8>)
 8017394:	f000 fdce 	bl	8017f34 <crs_strlen>
 8017398:	4a16      	ldr	r2, [pc, #88]	; (80173f4 <ERROR_Handler+0xb8>)
 801739a:	b283      	uxth	r3, r0
 801739c:	2101      	movs	r1, #1
 801739e:	2006      	movs	r0, #6
 80173a0:	f000 fe06 	bl	8017fb0 <traceIF_itmPrint>
 80173a4:	4813      	ldr	r0, [pc, #76]	; (80173f4 <ERROR_Handler+0xb8>)
 80173a6:	f000 fdc5 	bl	8017f34 <crs_strlen>
 80173aa:	4a12      	ldr	r2, [pc, #72]	; (80173f4 <ERROR_Handler+0xb8>)
 80173ac:	b283      	uxth	r3, r0
 80173ae:	2101      	movs	r1, #1
 80173b0:	2006      	movs	r0, #6
 80173b2:	f001 f823 	bl	80183fc <traceIF_uartPrint>

  /* endless loop if error is fatal */
  if (gravity == ERROR_FATAL)
 80173b6:	2e03      	cmp	r6, #3
 80173b8:	d110      	bne.n	80173dc <ERROR_Handler+0xa0>
  {
    HAL_Delay(1000U);
 80173ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80173be:	f7ec fe99 	bl	80040f4 <HAL_Delay>
  __ASM volatile ("dsb 0xF":::"memory");
 80173c2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80173c6:	490e      	ldr	r1, [pc, #56]	; (8017400 <ERROR_Handler+0xc4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80173c8:	4b0e      	ldr	r3, [pc, #56]	; (8017404 <ERROR_Handler+0xc8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80173ca:	68ca      	ldr	r2, [r1, #12]
 80173cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80173d0:	4313      	orrs	r3, r2
 80173d2:	60cb      	str	r3, [r1, #12]
 80173d4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80173d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80173da:	e7fd      	b.n	80173d8 <ERROR_Handler+0x9c>
    NVIC_SystemReset();
    /* Infinite loop is done in NVIC_SystemReset(); */
  }

  /* increment error index */
  error_index = (error_index + 1U) %  MAX_ERROR_ENTRIES;
 80173dc:	882b      	ldrh	r3, [r5, #0]
 80173de:	3301      	adds	r3, #1
 80173e0:	f003 031f 	and.w	r3, r3, #31
 80173e4:	802b      	strh	r3, [r5, #0]
}
 80173e6:	b003      	add	sp, #12
 80173e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173ec:	200040f0 	.word	0x200040f0
 80173f0:	200040f4 	.word	0x200040f4
 80173f4:	200093f8 	.word	0x200093f8
 80173f8:	200040f2 	.word	0x200040f2
 80173fc:	0802ba88 	.word	0x0802ba88
 8017400:	e000ed00 	.word	0xe000ed00
 8017404:	05fa0004 	.word	0x05fa0004

08017408 <HAL_GPIO_EXTI_Callback>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == MODEM_RING_PIN) {
 8017408:	2802      	cmp	r0, #2
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 801740a:	b508      	push	{r3, lr}
 801740c:	4601      	mov	r1, r0
	if (GPIO_Pin == MODEM_RING_PIN) {
 801740e:	d109      	bne.n	8017424 <HAL_GPIO_EXTI_Callback+0x1c>
		GPIO_PinState gstate = HAL_GPIO_ReadPin(MODEM_RING_GPIO_PORT,
 8017410:	4805      	ldr	r0, [pc, #20]	; (8017428 <HAL_GPIO_EXTI_Callback+0x20>)
 8017412:	f7ed f8c1 	bl	8004598 <HAL_GPIO_ReadPin>
		atcc_hw_event(DEVTYPE_MODEM_CELLULAR, HWEVT_MODEM_RING, gstate);
	} else {
		/* Nothing to do */
		__NOP();
	}
}
 8017416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GPIO_PinState gstate = HAL_GPIO_ReadPin(MODEM_RING_GPIO_PORT,
 801741a:	4602      	mov	r2, r0
		atcc_hw_event(DEVTYPE_MODEM_CELLULAR, HWEVT_MODEM_RING, gstate);
 801741c:	2101      	movs	r1, #1
 801741e:	2000      	movs	r0, #0
 8017420:	f7f0 bfec 	b.w	80083fc <atcc_hw_event>
		__NOP();
 8017424:	bf00      	nop
}
 8017426:	bd08      	pop	{r3, pc}
 8017428:	48000800 	.word	0x48000800

0801742c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == MODEM_UART_INSTANCE) {
 801742c:	6803      	ldr	r3, [r0, #0]
 801742e:	4a06      	ldr	r2, [pc, #24]	; (8017448 <HAL_UART_RxCpltCallback+0x1c>)
 8017430:	4293      	cmp	r3, r2
 8017432:	d101      	bne.n	8017438 <HAL_UART_RxCpltCallback+0xc>
		IPC_UART_RxCpltCallback(huart);
 8017434:	f000 bc76 	b.w	8017d24 <IPC_UART_RxCpltCallback>
	}
#if (USE_CMD_CONSOLE == 1)
	else if (huart->Instance == TRACE_INTERFACE_INSTANCE) {
 8017438:	4a04      	ldr	r2, [pc, #16]	; (801744c <HAL_UART_RxCpltCallback+0x20>)
 801743a:	4293      	cmp	r3, r2
 801743c:	d101      	bne.n	8017442 <HAL_UART_RxCpltCallback+0x16>
		CMD_RxCpltCallback(huart);
 801743e:	f004 bbd1 	b.w	801bbe4 <CMD_RxCpltCallback>
	}
#endif  /* USE_CMD_CONSOLE */
	else {
		/* Nothing to do */
		__NOP();
 8017442:	bf00      	nop
	}
}
 8017444:	4770      	bx	lr
 8017446:	bf00      	nop
 8017448:	40004c00 	.word	0x40004c00
 801744c:	40013800 	.word	0x40013800

08017450 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == MODEM_UART_INSTANCE) {
 8017450:	6802      	ldr	r2, [r0, #0]
 8017452:	4b03      	ldr	r3, [pc, #12]	; (8017460 <HAL_UART_TxCpltCallback+0x10>)
 8017454:	429a      	cmp	r2, r3
 8017456:	d101      	bne.n	801745c <HAL_UART_TxCpltCallback+0xc>
		IPC_UART_TxCpltCallback(huart);
 8017458:	f000 bc74 	b.w	8017d44 <IPC_UART_TxCpltCallback>
	}
}
 801745c:	4770      	bx	lr
 801745e:	bf00      	nop
 8017460:	40004c00 	.word	0x40004c00

08017464 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == MODEM_UART_INSTANCE) {
 8017464:	6802      	ldr	r2, [r0, #0]
 8017466:	4b03      	ldr	r3, [pc, #12]	; (8017474 <HAL_UART_ErrorCallback+0x10>)
 8017468:	429a      	cmp	r2, r3
 801746a:	d101      	bne.n	8017470 <HAL_UART_ErrorCallback+0xc>
		IPC_UART_ErrorCallback(huart);
 801746c:	f000 bc78 	b.w	8017d60 <IPC_UART_ErrorCallback>
	}
}
 8017470:	4770      	bx	lr
 8017472:	bf00      	nop
 8017474:	40004c00 	.word	0x40004c00

08017478 <IPC_init>:
IPC_Status_t IPC_init(IPC_Device_t device, IPC_Interface_t itf_type,
		void *const hitf) {
	IPC_Status_t status;

	/* check that device value is valid */
	if (device >= IPC_MAX_DEVICES) {
 8017478:	b928      	cbnz	r0, 8017486 <IPC_init+0xe>
		/* IPC device id exceed maximum size defined */
		status = IPC_ERROR;
	} else if (hitf == NULL) {
 801747a:	b122      	cbz	r2, 8017486 <IPC_init+0xe>
		status = IPC_ERROR;
	} else {
		if (itf_type == IPC_INTERFACE_UART) {
 801747c:	2901      	cmp	r1, #1
 801747e:	d102      	bne.n	8017486 <IPC_init+0xe>
#if (IPC_USE_UART == 1U)
			status = IPC_UART_init(device, (UART_HandleTypeDef*) hitf);
 8017480:	4611      	mov	r1, r2
 8017482:	f000 b975 	b.w	8017770 <IPC_UART_init>
			/* interface not supported yet */
			status = IPC_ERROR;
		}
	}
	return (status);
}
 8017486:	2001      	movs	r0, #1
 8017488:	4770      	bx	lr
	...

0801748c <IPC_open>:
 */
IPC_Status_t IPC_open(IPC_Handle_t *const hipc, IPC_Device_t device,
		IPC_Mode_t mode, IPC_RxCallbackTypeDef pRxClientCallback,
		IPC_TxCallbackTypeDef pTxClientCallback,
		IPC_ErrCallbackTypeDef pErrorClientCallback,
		IPC_CheckEndOfMsgCallbackTypeDef pCheckEndOfMsg) {
 801748c:	b470      	push	{r4, r5, r6}
 801748e:	9e03      	ldr	r6, [sp, #12]
	IPC_Status_t status;

	/* check pointers */
	if ((hipc == NULL) || (pRxClientCallback == NULL)
 8017490:	b160      	cbz	r0, 80174ac <IPC_open+0x20>
 8017492:	b15b      	cbz	r3, 80174ac <IPC_open+0x20>
			|| (pTxClientCallback == NULL)) {
 8017494:	b156      	cbz	r6, 80174ac <IPC_open+0x20>
		status = IPC_ERROR;
	} else if (device >= IPC_MAX_DEVICES) {
 8017496:	b949      	cbnz	r1, 80174ac <IPC_open+0x20>
		/* IPC device id exceed maximum size defined */
		status = IPC_ERROR;
	}
	/* check if the device has been correctly initialized */
	else if (IPC_DevicesList[device].state != IPC_STATE_INITIALIZED) {
 8017498:	4c06      	ldr	r4, [pc, #24]	; (80174b4 <IPC_open+0x28>)
 801749a:	7825      	ldrb	r5, [r4, #0]
 801749c:	2d01      	cmp	r5, #1
 801749e:	d105      	bne.n	80174ac <IPC_open+0x20>
		status = IPC_ERROR;
	} else {
		if (IPC_DevicesList[device].phy_int.interface_type
 80174a0:	7924      	ldrb	r4, [r4, #4]
 80174a2:	2c01      	cmp	r4, #1
 80174a4:	d102      	bne.n	80174ac <IPC_open+0x20>
			status = IPC_ERROR;
		}
	}

	return (status);
}
 80174a6:	bc70      	pop	{r4, r5, r6}
			status = IPC_UART_open(hipc, device, mode, pRxClientCallback,
 80174a8:	f000 b976 	b.w	8017798 <IPC_UART_open>
}
 80174ac:	2001      	movs	r0, #1
 80174ae:	bc70      	pop	{r4, r5, r6}
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	20008de0 	.word	0x20008de0

080174b8 <IPC_close>:
 * @retval status
 */
IPC_Status_t IPC_close(IPC_Handle_t *const hipc) {
	IPC_Status_t status;

	if (hipc != NULL) {
 80174b8:	b108      	cbz	r0, 80174be <IPC_close+0x6>
		status = IPC_UART_close(hipc);
 80174ba:	f000 ba47 	b.w	801794c <IPC_UART_close>
	} else {
		status = IPC_ERROR;
	}

	return (status);
}
 80174be:	2001      	movs	r0, #1
 80174c0:	4770      	bx	lr

080174c2 <IPC_abort>:
 * @retval status
 */
IPC_Status_t IPC_abort(IPC_Handle_t *const hipc) {
	IPC_Status_t status;

	if (hipc != NULL) {
 80174c2:	b108      	cbz	r0, 80174c8 <IPC_abort+0x6>
		status = IPC_UART_abort(hipc);
 80174c4:	f000 bade 	b.w	8017a84 <IPC_UART_abort>
	} else {
		status = IPC_ERROR;
	}

	return (status);
}
 80174c8:	2001      	movs	r0, #1
 80174ca:	4770      	bx	lr

080174cc <IPC_select>:
 * @retval status
 */
IPC_Status_t IPC_select(IPC_Handle_t *const hipc) {
	IPC_Status_t status;

	if (hipc != NULL) {
 80174cc:	b108      	cbz	r0, 80174d2 <IPC_select+0x6>
		status = IPC_UART_select(hipc);
 80174ce:	f000 baff 	b.w	8017ad0 <IPC_UART_select>
	} else {
		status = IPC_ERROR;
	}

	return (status);
}
 80174d2:	2001      	movs	r0, #1
 80174d4:	4770      	bx	lr

080174d6 <IPC_get_other_channel>:
 * @brief  Get other channel handle if exists.
 * @param  hipc IPC handle.
 * @retval IPC_Handle_t*
 */
IPC_Handle_t* IPC_get_other_channel(IPC_Handle_t *const hipc) {
	return (IPC_UART_get_other_channel(hipc));
 80174d6:	f000 bb91 	b.w	8017bfc <IPC_UART_get_other_channel>

080174da <IPC_send>:
 */
IPC_Status_t IPC_send(IPC_Handle_t *const hipc, uint8_t *p_TxBuffer,
		uint16_t bufsize) {
	IPC_Status_t status;

	if ((hipc != NULL) && (p_TxBuffer != NULL)) {
 80174da:	b110      	cbz	r0, 80174e2 <IPC_send+0x8>
 80174dc:	b109      	cbz	r1, 80174e2 <IPC_send+0x8>
		status = IPC_UART_send(hipc, p_TxBuffer, bufsize);
 80174de:	f000 bba1 	b.w	8017c24 <IPC_UART_send>
	} else {
		status = IPC_ERROR;
	}

	return (status);
}
 80174e2:	2001      	movs	r0, #1
 80174e4:	4770      	bx	lr

080174e6 <IPC_receive>:
 * @retval status
 */
IPC_Status_t IPC_receive(IPC_Handle_t *const hipc, IPC_RxMessage_t *const p_msg) {
	IPC_Status_t status;

	if (hipc != NULL) {
 80174e6:	b108      	cbz	r0, 80174ec <IPC_receive+0x6>
		status = IPC_UART_receive(hipc, p_msg);
 80174e8:	f000 bbae 	b.w	8017c48 <IPC_UART_receive>
	} else {
		status = IPC_ERROR;
	}

	return (status);
}
 80174ec:	2001      	movs	r0, #1
 80174ee:	4770      	bx	lr

080174f0 <IPC_RXFIFO_init>:
/**
 * @brief  The function initialize the IPC RX FIFO.
 * @param  hipc IPC handle.
 * @retval none.
 */
void IPC_RXFIFO_init(IPC_Handle_t *const hipc) {
 80174f0:	b510      	push	{r4, lr}
	(void) memset(hipc->RxQueue.data, 0, sizeof(uint8_t) * IPC_RXBUF_MAXSIZE);
 80174f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
void IPC_RXFIFO_init(IPC_Handle_t *const hipc) {
 80174f6:	4604      	mov	r4, r0
	(void) memset(hipc->RxQueue.data, 0, sizeof(uint8_t) * IPC_RXBUF_MAXSIZE);
 80174f8:	2100      	movs	r1, #0
 80174fa:	300e      	adds	r0, #14
 80174fc:	f005 fcac 	bl	801ce58 <memset>
	hipc->RxQueue.index_read = 0U;
 8017500:	2300      	movs	r3, #0
	hipc->RxQueue.index_write = IPC_RXMSG_HEADER_SIZE;
 8017502:	2202      	movs	r2, #2
	hipc->RxQueue.index_read = 0U;
 8017504:	f8a4 37de 	strh.w	r3, [r4, #2014]	; 0x7de
	hipc->RxQueue.index_write = IPC_RXMSG_HEADER_SIZE;
 8017508:	f8c4 27e0 	str.w	r2, [r4, #2016]	; 0x7e0
	hipc->RxQueue.current_msg_index = 0U;
	hipc->RxQueue.current_msg_size = 0U;
 801750c:	f8a4 37e4 	strh.w	r3, [r4, #2020]	; 0x7e4
	hipc->RxQueue.nb_unread_msg = 0U;
 8017510:	f884 37e6 	strb.w	r3, [r4, #2022]	; 0x7e6
  hipc->dbgRxQueue.queue_pos = 0U;
  hipc->dbgRxQueue.msg_info_queue[0].start_pos = hipc->RxQueue.index_read;
  hipc->dbgRxQueue.msg_info_queue[0].size = 0U;
  hipc->dbgRxQueue.msg_info_queue[0].complete = 0U;
#endif /* DBG_IPC_RX_FIFO */
}
 8017514:	bd10      	pop	{r4, pc}

08017516 <IPC_RXFIFO_getFreeBytes>:
 * @retval Number of free bytes in the IPC RX FIFO.
 */
uint16_t IPC_RXFIFO_getFreeBytes(IPC_Handle_t *const hipc) {
	uint16_t free_bytes;

	if (hipc != NULL) {
 8017516:	b148      	cbz	r0, 801752c <IPC_RXFIFO_getFreeBytes+0x16>
		if (hipc->RxQueue.index_write > hipc->RxQueue.index_read) {
 8017518:	f8b0 37e0 	ldrh.w	r3, [r0, #2016]	; 0x7e0
 801751c:	f8b0 07de 	ldrh.w	r0, [r0, #2014]	; 0x7de
 8017520:	4283      	cmp	r3, r0
			free_bytes = (IPC_RXBUF_MAXSIZE - hipc->RxQueue.index_write
 8017522:	bf88      	it	hi
 8017524:	f500 60fa 	addhi.w	r0, r0, #2000	; 0x7d0
					+ hipc->RxQueue.index_read);
		} else {
			free_bytes = hipc->RxQueue.index_read - hipc->RxQueue.index_write;
 8017528:	1ac0      	subs	r0, r0, r3
 801752a:	b280      	uxth	r0, r0
		/* error: hipc is NULL */
		free_bytes = 0U;
	}

	return (free_bytes);
}
 801752c:	4770      	bx	lr

0801752e <RXFIFO_incrementHead>:
 * @retval none.
 */
static void RXFIFO_incrementHead(IPC_Handle_t *const hipc) {
	uint16_t free_bytes;

	hipc->RxQueue.index_write = (hipc->RxQueue.index_write + 1U)
 801752e:	f8b0 37e0 	ldrh.w	r3, [r0, #2016]	; 0x7e0
static void RXFIFO_incrementHead(IPC_Handle_t *const hipc) {
 8017532:	b510      	push	{r4, lr}
	hipc->RxQueue.index_write = (hipc->RxQueue.index_write + 1U)
 8017534:	3301      	adds	r3, #1
			% IPC_RXBUF_MAXSIZE;
 8017536:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 801753a:	fbb3 f1f4 	udiv	r1, r3, r4
 801753e:	fb04 3311 	mls	r3, r4, r1, r3
	hipc->RxQueue.index_write = (hipc->RxQueue.index_write + 1U)
 8017542:	f8a0 37e0 	strh.w	r3, [r0, #2016]	; 0x7e0
static void RXFIFO_incrementHead(IPC_Handle_t *const hipc) {
 8017546:	4602      	mov	r2, r0
	free_bytes = IPC_RXFIFO_getFreeBytes(hipc);
 8017548:	f7ff ffe5 	bl	8017516 <IPC_RXFIFO_getFreeBytes>

#if (DBG_IPC_RX_FIFO == 1U)
  hipc->dbgRxQueue.free_bytes = free_bytes;
#endif /* DBG_IPC_RX_FIFO */

	if (free_bytes <= IPC_RXBUF_THRESHOLD) {
 801754c:	2814      	cmp	r0, #20
		hipc->State = IPC_STATE_PAUSED;
 801754e:	bf9c      	itt	ls
 8017550:	2303      	movls	r3, #3
 8017552:	7353      	strbls	r3, [r2, #13]

#if (DBG_IPC_RX_FIFO == 1U)
    hipc->dbgRxQueue.cpt_RXPause++;
#endif /* DBG_IPC_RX_FIFO */
	}
}
 8017554:	bd10      	pop	{r4, pc}

08017556 <IPC_RXFIFO_writeCharacter>:
void IPC_RXFIFO_writeCharacter(IPC_Handle_t *const hipc, uint8_t rxChar) {
 8017556:	b570      	push	{r4, r5, r6, lr}
 8017558:	460d      	mov	r5, r1
	if (hipc != NULL) {
 801755a:	4604      	mov	r4, r0
 801755c:	2800      	cmp	r0, #0
 801755e:	d047      	beq.n	80175f0 <IPC_RXFIFO_writeCharacter+0x9a>
		hipc->RxQueue.data[hipc->RxQueue.index_write] = rxChar;
 8017560:	f8b0 37e0 	ldrh.w	r3, [r0, #2016]	; 0x7e0
 8017564:	4403      	add	r3, r0
 8017566:	7399      	strb	r1, [r3, #14]
		hipc->RxQueue.current_msg_size++;
 8017568:	f8b0 37e4 	ldrh.w	r3, [r0, #2020]	; 0x7e4
 801756c:	3301      	adds	r3, #1
 801756e:	f8a0 37e4 	strh.w	r3, [r0, #2020]	; 0x7e4
		RXFIFO_incrementHead(hipc);
 8017572:	f7ff ffdc 	bl	801752e <RXFIFO_incrementHead>
		if (hipc->State != IPC_STATE_PAUSED) {
 8017576:	7b63      	ldrb	r3, [r4, #13]
 8017578:	2b03      	cmp	r3, #3
 801757a:	d002      	beq.n	8017582 <IPC_RXFIFO_writeCharacter+0x2c>
	}
}

static void RXFIFO_rearm_RX_IT(IPC_Handle_t *const hipc) {
#if (IPC_USE_UART == 1U)
	IPC_UART_rearm_RX_IT(hipc);
 801757c:	4620      	mov	r0, r4
 801757e:	f000 fbbb 	bl	8017cf8 <IPC_UART_rearm_RX_IT>
		if ((*hipc->CheckEndOfMsgCallback)(rxChar) == 1U) {
 8017582:	f8d4 37f4 	ldr.w	r3, [r4, #2036]	; 0x7f4
 8017586:	4628      	mov	r0, r5
 8017588:	4798      	blx	r3
 801758a:	2801      	cmp	r0, #1
 801758c:	d130      	bne.n	80175f0 <IPC_RXFIFO_writeCharacter+0x9a>
			hipc->RxQueue.nb_unread_msg++;
 801758e:	f894 37e6 	ldrb.w	r3, [r4, #2022]	; 0x7e6
			| ((hipc->RxQueue.current_msg_size >> 8) & 0x9FU));
 8017592:	f8b4 17e4 	ldrh.w	r1, [r4, #2020]	; 0x7e4
			hipc->RxQueue.nb_unread_msg++;
 8017596:	3301      	adds	r3, #1
 8017598:	f884 37e6 	strb.w	r3, [r4, #2022]	; 0x7e6
	index = hipc->RxQueue.current_msg_index;
 801759c:	f8b4 37e2 	ldrh.w	r3, [r4, #2018]	; 0x7e2
			| ((hipc->RxQueue.current_msg_size >> 8) & 0x9FU));
 80175a0:	f3c1 2204 	ubfx	r2, r1, #8, #5
	hipc->RxQueue.data[index] = header_byte1;
 80175a4:	18e0      	adds	r0, r4, r3
	header_byte1 = (uint8_t) (IPC_RXMSG_HEADER_COMPLETE_MASK
 80175a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
	hipc->RxQueue.data[index] = header_byte1;
 80175aa:	7382      	strb	r2, [r0, #14]
	index = (index + 1U) % IPC_RXBUF_MAXSIZE;
 80175ac:	1c5a      	adds	r2, r3, #1
 80175ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80175b2:	fbb2 f3f0 	udiv	r3, r2, r0
 80175b6:	fb00 2313 	mls	r3, r0, r3, r2
	hipc->RxQueue.data[index] = header_byte2;
 80175ba:	4423      	add	r3, r4
			hipc->RxQueue.current_msg_size = 0U;
 80175bc:	2500      	movs	r5, #0
	header_byte2 = (uint8_t) (hipc->RxQueue.current_msg_size & 0x00FFU);
 80175be:	7399      	strb	r1, [r3, #14]
			hipc->RxQueue.current_msg_index = hipc->RxQueue.index_write;
 80175c0:	f8b4 37e0 	ldrh.w	r3, [r4, #2016]	; 0x7e0
 80175c4:	f8a4 37e2 	strh.w	r3, [r4, #2018]	; 0x7e2
		hipc->RxQueue.data[hipc->RxQueue.index_write] = 0U;
 80175c8:	4423      	add	r3, r4
			hipc->RxQueue.current_msg_size = 0U;
 80175ca:	f8a4 57e4 	strh.w	r5, [r4, #2020]	; 0x7e4
		RXFIFO_incrementHead(hipc);
 80175ce:	4620      	mov	r0, r4
		hipc->RxQueue.data[hipc->RxQueue.index_write] = 0U;
 80175d0:	739d      	strb	r5, [r3, #14]
		RXFIFO_incrementHead(hipc);
 80175d2:	f7ff ffac 	bl	801752e <RXFIFO_incrementHead>
		hipc->RxQueue.data[hipc->RxQueue.index_write] = 0U;
 80175d6:	f8b4 37e0 	ldrh.w	r3, [r4, #2016]	; 0x7e0
 80175da:	4423      	add	r3, r4
		RXFIFO_incrementHead(hipc);
 80175dc:	4620      	mov	r0, r4
		hipc->RxQueue.data[hipc->RxQueue.index_write] = 0U;
 80175de:	739d      	strb	r5, [r3, #14]
		RXFIFO_incrementHead(hipc);
 80175e0:	f7ff ffa5 	bl	801752e <RXFIFO_incrementHead>
			(*hipc->RxClientCallback)((IPC_Handle_t*) hipc);
 80175e4:	f8d4 37e8 	ldr.w	r3, [r4, #2024]	; 0x7e8
 80175e8:	4620      	mov	r0, r4
}
 80175ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(*hipc->RxClientCallback)((IPC_Handle_t*) hipc);
 80175ee:	4718      	bx	r3
}
 80175f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080175f4 <IPC_RXFIFO_readMsgHeader_at_pos>:
		IPC_RxHeader_t *pHeader, uint16_t pos) {
 80175f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f8:	460f      	mov	r7, r1
 80175fa:	4616      	mov	r6, r2
	if (hipc != NULL) {
 80175fc:	4605      	mov	r5, r0
 80175fe:	2800      	cmp	r0, #0
 8017600:	d059      	beq.n	80176b6 <IPC_RXFIFO_readMsgHeader_at_pos+0xc2>
		PRINT_DBG("DBG IPC_RXFIFO_readMsgHeader: index_read = %d",
 8017602:	f8b0 27de 	ldrh.w	r2, [r0, #2014]	; 0x7de
 8017606:	492d      	ldr	r1, [pc, #180]	; (80176bc <IPC_RXFIFO_readMsgHeader_at_pos+0xc8>)
 8017608:	482d      	ldr	r0, [pc, #180]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 801760a:	f005 fc55 	bl	801ceb8 <sprintf>
 801760e:	482c      	ldr	r0, [pc, #176]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017610:	f000 fc90 	bl	8017f34 <crs_strlen>
 8017614:	4a2a      	ldr	r2, [pc, #168]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017616:	b283      	uxth	r3, r0
 8017618:	2102      	movs	r1, #2
 801761a:	2004      	movs	r0, #4
 801761c:	f000 fcc8 	bl	8017fb0 <traceIF_itmPrint>
 8017620:	4827      	ldr	r0, [pc, #156]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017622:	f000 fc87 	bl	8017f34 <crs_strlen>
 8017626:	4a26      	ldr	r2, [pc, #152]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017628:	b283      	uxth	r3, r0
 801762a:	2102      	movs	r1, #2
 801762c:	2004      	movs	r0, #4
 801762e:	f000 fee5 	bl	80183fc <traceIF_uartPrint>
		header_byte1 = hipc->RxQueue.data[index];
 8017632:	19ab      	adds	r3, r5, r6
		index = (index + 1U) % IPC_RXBUF_MAXSIZE;
 8017634:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8017638:	3601      	adds	r6, #1
 801763a:	fbb6 f0f2 	udiv	r0, r6, r2
 801763e:	fb02 6610 	mls	r6, r2, r0, r6
		header_byte2 = hipc->RxQueue.data[index];
 8017642:	4435      	add	r5, r6
		header_byte1 = hipc->RxQueue.data[index];
 8017644:	7b9c      	ldrb	r4, [r3, #14]
		header_byte2 = hipc->RxQueue.data[index];
 8017646:	7bad      	ldrb	r5, [r5, #14]
		PRINT_DBG("header_byte1[0x%x] header_byte2[0x%x]", header_byte1,
 8017648:	491e      	ldr	r1, [pc, #120]	; (80176c4 <IPC_RXFIFO_readMsgHeader_at_pos+0xd0>)
 801764a:	481d      	ldr	r0, [pc, #116]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 801764c:	462b      	mov	r3, r5
 801764e:	4622      	mov	r2, r4
 8017650:	f005 fc32 	bl	801ceb8 <sprintf>
 8017654:	481a      	ldr	r0, [pc, #104]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017656:	f000 fc6d 	bl	8017f34 <crs_strlen>
 801765a:	4a19      	ldr	r2, [pc, #100]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 801765c:	b283      	uxth	r3, r0
 801765e:	2102      	movs	r1, #2
 8017660:	2004      	movs	r0, #4
 8017662:	f000 fca5 	bl	8017fb0 <traceIF_itmPrint>
 8017666:	4816      	ldr	r0, [pc, #88]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017668:	f000 fc64 	bl	8017f34 <crs_strlen>
 801766c:	4a14      	ldr	r2, [pc, #80]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 801766e:	b283      	uxth	r3, r0
 8017670:	2102      	movs	r1, #2
 8017672:	2004      	movs	r0, #4
 8017674:	f000 fec2 	bl	80183fc <traceIF_uartPrint>
				& (uint16_t) header_byte1) << 8);
 8017678:	0223      	lsls	r3, r4, #8
 801767a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
		pHeader->complete = (IPC_RXMSG_HEADER_COMPLETE_MASK & header_byte1)
 801767e:	09e2      	lsrs	r2, r4, #7
		pHeader->size = pHeader->size + header_byte2;
 8017680:	442b      	add	r3, r5
		pHeader->complete = (IPC_RXMSG_HEADER_COMPLETE_MASK & header_byte1)
 8017682:	703a      	strb	r2, [r7, #0]
		pHeader->size = pHeader->size + header_byte2;
 8017684:	807b      	strh	r3, [r7, #2]
		PRINT_DBG("complete=%d size=%d", pHeader->complete, pHeader->size)
 8017686:	4910      	ldr	r1, [pc, #64]	; (80176c8 <IPC_RXFIFO_readMsgHeader_at_pos+0xd4>)
 8017688:	480d      	ldr	r0, [pc, #52]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 801768a:	f005 fc15 	bl	801ceb8 <sprintf>
 801768e:	480c      	ldr	r0, [pc, #48]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017690:	f000 fc50 	bl	8017f34 <crs_strlen>
 8017694:	4a0a      	ldr	r2, [pc, #40]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 8017696:	b283      	uxth	r3, r0
 8017698:	2102      	movs	r1, #2
 801769a:	2004      	movs	r0, #4
 801769c:	f000 fc88 	bl	8017fb0 <traceIF_itmPrint>
 80176a0:	4807      	ldr	r0, [pc, #28]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 80176a2:	f000 fc47 	bl	8017f34 <crs_strlen>
}
 80176a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		PRINT_DBG("complete=%d size=%d", pHeader->complete, pHeader->size)
 80176aa:	b283      	uxth	r3, r0
 80176ac:	4a04      	ldr	r2, [pc, #16]	; (80176c0 <IPC_RXFIFO_readMsgHeader_at_pos+0xcc>)
 80176ae:	2102      	movs	r1, #2
 80176b0:	2004      	movs	r0, #4
 80176b2:	f000 bea3 	b.w	80183fc <traceIF_uartPrint>
}
 80176b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ba:	bf00      	nop
 80176bc:	0802babf 	.word	0x0802babf
 80176c0:	200091f8 	.word	0x200091f8
 80176c4:	0802baf3 	.word	0x0802baf3
 80176c8:	0802bb1f 	.word	0x0802bb1f

080176cc <IPC_RXFIFO_read>:
int16_t IPC_RXFIFO_read(IPC_Handle_t *const hipc, IPC_RxMessage_t *pMsg) {
 80176cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80176d0:	460f      	mov	r7, r1
	if (hipc != NULL) {
 80176d2:	4604      	mov	r4, r0
 80176d4:	b920      	cbnz	r0, 80176e0 <IPC_RXFIFO_read+0x14>
		retval = -1;
 80176d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80176da:	b002      	add	sp, #8
 80176dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		IPC_RXFIFO_readMsgHeader_at_pos(hipc, &header,
 80176e0:	f8b0 27de 	ldrh.w	r2, [r0, #2014]	; 0x7de
 80176e4:	a901      	add	r1, sp, #4
 80176e6:	f7ff ff85 	bl	80175f4 <IPC_RXFIFO_readMsgHeader_at_pos>
		if (header.complete != 1U) {
 80176ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80176ee:	2b01      	cmp	r3, #1
 80176f0:	d1f1      	bne.n	80176d6 <IPC_RXFIFO_read+0xa>
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 80176f2:	f8b4 37de 	ldrh.w	r3, [r4, #2014]	; 0x7de
			pMsg->size = header.size;
 80176f6:	f8bd 6006 	ldrh.w	r6, [sp, #6]
			% IPC_RXBUF_MAXSIZE;
 80176fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 80176fe:	1c9a      	adds	r2, r3, #2
			% IPC_RXBUF_MAXSIZE;
 8017700:	fbb2 f3f1 	udiv	r3, r2, r1
 8017704:	fb01 2313 	mls	r3, r1, r3, r2
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 8017708:	b29d      	uxth	r5, r3
 801770a:	f103 010e 	add.w	r1, r3, #14
			if ((hipc->RxQueue.index_read + header.size) > IPC_RXBUF_MAXSIZE) {
 801770e:	4433      	add	r3, r6
 8017710:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 8017714:	f8a4 57de 	strh.w	r5, [r4, #2014]	; 0x7de
			pMsg->size = header.size;
 8017718:	4421      	add	r1, r4
 801771a:	f8a7 67d0 	strh.w	r6, [r7, #2000]	; 0x7d0
			if ((hipc->RxQueue.index_read + header.size) > IPC_RXBUF_MAXSIZE) {
 801771e:	dd24      	ble.n	801776a <IPC_RXFIFO_read+0x9e>
				oversize = (hipc->RxQueue.index_read + header.size
 8017720:	f5a6 63fa 	sub.w	r3, r6, #2000	; 0x7d0
 8017724:	441d      	add	r5, r3
 8017726:	b2ad      	uxth	r5, r5
				uint16_t remaining_size = header.size - oversize;
 8017728:	eba6 0805 	sub.w	r8, r6, r5
				(void) memcpy((void*) &(pMsg->buffer[0]),
 801772c:	fa1f f288 	uxth.w	r2, r8
 8017730:	4638      	mov	r0, r7
 8017732:	f005 fb83 	bl	801ce3c <memcpy>
				(void) memcpy((void*) &(pMsg->buffer[header.size - oversize]),
 8017736:	462a      	mov	r2, r5
 8017738:	f104 010e 	add.w	r1, r4, #14
 801773c:	eb07 0008 	add.w	r0, r7, r8
				(void) memcpy((void*) pMsg->buffer,
 8017740:	f005 fb7c 	bl	801ce3c <memcpy>
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 8017744:	f8b4 37de 	ldrh.w	r3, [r4, #2014]	; 0x7de
			hipc->RxQueue.nb_unread_msg--;
 8017748:	f894 07e6 	ldrb.w	r0, [r4, #2022]	; 0x7e6
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 801774c:	441e      	add	r6, r3
			% IPC_RXBUF_MAXSIZE;
 801774e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
			hipc->RxQueue.nb_unread_msg--;
 8017752:	3801      	subs	r0, #1
 8017754:	b2c0      	uxtb	r0, r0
			% IPC_RXBUF_MAXSIZE;
 8017756:	fbb6 f3f2 	udiv	r3, r6, r2
 801775a:	fb02 6613 	mls	r6, r2, r3, r6
			hipc->RxQueue.nb_unread_msg--;
 801775e:	f884 07e6 	strb.w	r0, [r4, #2022]	; 0x7e6
	hipc->RxQueue.index_read = (hipc->RxQueue.index_read + inc_size)
 8017762:	f8a4 67de 	strh.w	r6, [r4, #2014]	; 0x7de
			retval = (int16_t) hipc->RxQueue.nb_unread_msg;
 8017766:	b200      	sxth	r0, r0
 8017768:	e7b7      	b.n	80176da <IPC_RXFIFO_read+0xe>
				(void) memcpy((void*) pMsg->buffer,
 801776a:	4632      	mov	r2, r6
 801776c:	4638      	mov	r0, r7
 801776e:	e7e7      	b.n	8017740 <IPC_RXFIFO_read+0x74>

08017770 <IPC_UART_init>:
{
  IPC_Status_t retval;
  /* input parameters validity has been tested in calling function */

  /* check if this device has not been already initialized */
  if (IPC_DevicesList[device].state != IPC_STATE_NOT_INITIALIZED)
 8017770:	2218      	movs	r2, #24
{
 8017772:	b530      	push	{r4, r5, lr}
  if (IPC_DevicesList[device].state != IPC_STATE_NOT_INITIALIZED)
 8017774:	fb02 f300 	mul.w	r3, r2, r0
 8017778:	4d06      	ldr	r5, [pc, #24]	; (8017794 <IPC_UART_init+0x24>)
 801777a:	5ce8      	ldrb	r0, [r5, r3]
 801777c:	18ea      	adds	r2, r5, r3
 801777e:	2401      	movs	r4, #1
 8017780:	b928      	cbnz	r0, 801778e <IPC_UART_init+0x1e>
  {
    IPC_DevicesList[device].state = IPC_STATE_INITIALIZED;
    IPC_DevicesList[device].phy_int.interface_type = IPC_INTERFACE_UART;
    IPC_DevicesList[device].phy_int.h_uart = huart;
    IPC_DevicesList[device].h_current_channel = NULL;
    IPC_DevicesList[device].h_inactive_channel = NULL;
 8017782:	e9c2 0004 	strd	r0, r0, [r2, #16]
    IPC_DevicesList[device].state = IPC_STATE_INITIALIZED;
 8017786:	54ec      	strb	r4, [r5, r3]
    IPC_DevicesList[device].phy_int.interface_type = IPC_INTERFACE_UART;
 8017788:	7114      	strb	r4, [r2, #4]
    IPC_DevicesList[device].phy_int.h_uart = huart;
 801778a:	6091      	str	r1, [r2, #8]
    retval = IPC_OK;
  }

  return (retval);
}
 801778c:	bd30      	pop	{r4, r5, pc}
    retval = IPC_ERROR;
 801778e:	4620      	mov	r0, r4
 8017790:	e7fc      	b.n	801778c <IPC_UART_init+0x1c>
 8017792:	bf00      	nop
 8017794:	20008de0 	.word	0x20008de0

08017798 <IPC_UART_open>:
                           IPC_Mode_t    mode,
                           IPC_RxCallbackTypeDef pRxClientCallback,
                           IPC_TxCallbackTypeDef pTxClientCallback,
                           IPC_ErrCallbackTypeDef pErrorClientCallback,
                           IPC_CheckEndOfMsgCallbackTypeDef pCheckEndOfMsg)
{
 8017798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPC_Status_t retval;
  HAL_StatusTypeDef uart_status;

  /* some input parameters have been already tested in calling function */
  if ((mode != IPC_MODE_UART_CHARACTER) && (mode != IPC_MODE_UART_STREAM))
 801779c:	2a01      	cmp	r2, #1
{
 801779e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80177a2:	4604      	mov	r4, r0
 80177a4:	460d      	mov	r5, r1
 80177a6:	4616      	mov	r6, r2
 80177a8:	4698      	mov	r8, r3
  if ((mode != IPC_MODE_UART_CHARACTER) && (mode != IPC_MODE_UART_STREAM))
 80177aa:	f200 80b4 	bhi.w	8017916 <IPC_UART_open+0x17e>
  {
    retval = IPC_ERROR;
  }
  else if ((mode == IPC_MODE_UART_CHARACTER) && (pCheckEndOfMsg == NULL))
 80177ae:	b91a      	cbnz	r2, 80177b8 <IPC_UART_open+0x20>
 80177b0:	f1b9 0f00 	cmp.w	r9, #0
 80177b4:	f000 80af 	beq.w	8017916 <IPC_UART_open+0x17e>
    retval = IPC_ERROR;
  }
  else
  {
    /* Register this channel into the IPC devices list */
    if (IPC_DevicesList[device].h_current_channel == NULL)
 80177b8:	4f5c      	ldr	r7, [pc, #368]	; (801792c <IPC_UART_open+0x194>)
 80177ba:	2218      	movs	r2, #24
 80177bc:	fb02 7205 	mla	r2, r2, r5, r7
 80177c0:	6913      	ldr	r3, [r2, #16]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	f040 80a9 	bne.w	801791a <IPC_UART_open+0x182>
    {
      /* register this channel as default channel (first call) */
      IPC_DevicesList[device].h_current_channel = hipc;
 80177c8:	6114      	str	r4, [r2, #16]
  }

  if (retval != IPC_ERROR)
  {
    /* initialize common RX buffer */
    IPC_DevicesList[device].RxChar[0] = (IPC_CHAR_t)('\0');
 80177ca:	f04f 0b18 	mov.w	fp, #24
 80177ce:	fb0b fb05 	mul.w	fp, fp, r5
 80177d2:	eb07 0a0b 	add.w	sl, r7, fp
 80177d6:	2300      	movs	r3, #0

    PRINT_DBG("IPC channel %p registered", IPC_DevicesList[device].h_current_channel)
 80177d8:	f8da 2010 	ldr.w	r2, [sl, #16]
 80177dc:	4954      	ldr	r1, [pc, #336]	; (8017930 <IPC_UART_open+0x198>)
    IPC_DevicesList[device].RxChar[0] = (IPC_CHAR_t)('\0');
 80177de:	f88a 300c 	strb.w	r3, [sl, #12]
    PRINT_DBG("IPC channel %p registered", IPC_DevicesList[device].h_current_channel)
 80177e2:	4854      	ldr	r0, [pc, #336]	; (8017934 <IPC_UART_open+0x19c>)
 80177e4:	f005 fb68 	bl	801ceb8 <sprintf>
 80177e8:	4852      	ldr	r0, [pc, #328]	; (8017934 <IPC_UART_open+0x19c>)
 80177ea:	f000 fba3 	bl	8017f34 <crs_strlen>
 80177ee:	4a51      	ldr	r2, [pc, #324]	; (8017934 <IPC_UART_open+0x19c>)
 80177f0:	b283      	uxth	r3, r0
 80177f2:	2102      	movs	r1, #2
 80177f4:	2004      	movs	r0, #4
 80177f6:	f000 fbdb 	bl	8017fb0 <traceIF_itmPrint>
 80177fa:	484e      	ldr	r0, [pc, #312]	; (8017934 <IPC_UART_open+0x19c>)
 80177fc:	f000 fb9a 	bl	8017f34 <crs_strlen>
 8017800:	4a4c      	ldr	r2, [pc, #304]	; (8017934 <IPC_UART_open+0x19c>)
 8017802:	b283      	uxth	r3, r0
 8017804:	2102      	movs	r1, #2
 8017806:	2004      	movs	r0, #4
 8017808:	f000 fdf8 	bl	80183fc <traceIF_uartPrint>
    PRINT_DBG("state 0x%x", IPC_DevicesList[device].state)
 801780c:	f817 200b 	ldrb.w	r2, [r7, fp]
 8017810:	4949      	ldr	r1, [pc, #292]	; (8017938 <IPC_UART_open+0x1a0>)
 8017812:	4848      	ldr	r0, [pc, #288]	; (8017934 <IPC_UART_open+0x19c>)
 8017814:	f005 fb50 	bl	801ceb8 <sprintf>
 8017818:	4846      	ldr	r0, [pc, #280]	; (8017934 <IPC_UART_open+0x19c>)
 801781a:	f000 fb8b 	bl	8017f34 <crs_strlen>
 801781e:	4a45      	ldr	r2, [pc, #276]	; (8017934 <IPC_UART_open+0x19c>)
 8017820:	b283      	uxth	r3, r0
 8017822:	2102      	movs	r1, #2
 8017824:	2004      	movs	r0, #4
 8017826:	f000 fbc3 	bl	8017fb0 <traceIF_itmPrint>
 801782a:	4842      	ldr	r0, [pc, #264]	; (8017934 <IPC_UART_open+0x19c>)
 801782c:	f000 fb82 	bl	8017f34 <crs_strlen>
 8017830:	4a40      	ldr	r2, [pc, #256]	; (8017934 <IPC_UART_open+0x19c>)
 8017832:	b283      	uxth	r3, r0
 8017834:	2102      	movs	r1, #2
 8017836:	2004      	movs	r0, #4
 8017838:	f000 fde0 	bl	80183fc <traceIF_uartPrint>
    PRINT_DBG("active channel handle: %p", IPC_DevicesList[device].h_current_channel)
 801783c:	f8da 2010 	ldr.w	r2, [sl, #16]
 8017840:	493e      	ldr	r1, [pc, #248]	; (801793c <IPC_UART_open+0x1a4>)
 8017842:	483c      	ldr	r0, [pc, #240]	; (8017934 <IPC_UART_open+0x19c>)
 8017844:	f005 fb38 	bl	801ceb8 <sprintf>
 8017848:	483a      	ldr	r0, [pc, #232]	; (8017934 <IPC_UART_open+0x19c>)
 801784a:	f000 fb73 	bl	8017f34 <crs_strlen>
 801784e:	4a39      	ldr	r2, [pc, #228]	; (8017934 <IPC_UART_open+0x19c>)
 8017850:	b283      	uxth	r3, r0
 8017852:	2102      	movs	r1, #2
 8017854:	2004      	movs	r0, #4
 8017856:	f000 fbab 	bl	8017fb0 <traceIF_itmPrint>
 801785a:	4836      	ldr	r0, [pc, #216]	; (8017934 <IPC_UART_open+0x19c>)
 801785c:	f000 fb6a 	bl	8017f34 <crs_strlen>
 8017860:	4a34      	ldr	r2, [pc, #208]	; (8017934 <IPC_UART_open+0x19c>)
 8017862:	b283      	uxth	r3, r0
 8017864:	2102      	movs	r1, #2
 8017866:	2004      	movs	r0, #4
 8017868:	f000 fdc8 	bl	80183fc <traceIF_uartPrint>
    PRINT_DBG("inactive channel handle: %p", IPC_DevicesList[device].h_inactive_channel)
 801786c:	f8da 2014 	ldr.w	r2, [sl, #20]
 8017870:	4933      	ldr	r1, [pc, #204]	; (8017940 <IPC_UART_open+0x1a8>)
 8017872:	4830      	ldr	r0, [pc, #192]	; (8017934 <IPC_UART_open+0x19c>)
 8017874:	f005 fb20 	bl	801ceb8 <sprintf>
 8017878:	482e      	ldr	r0, [pc, #184]	; (8017934 <IPC_UART_open+0x19c>)
 801787a:	f000 fb5b 	bl	8017f34 <crs_strlen>
 801787e:	4a2d      	ldr	r2, [pc, #180]	; (8017934 <IPC_UART_open+0x19c>)
 8017880:	b283      	uxth	r3, r0
 8017882:	2102      	movs	r1, #2
 8017884:	2004      	movs	r0, #4
 8017886:	f000 fb93 	bl	8017fb0 <traceIF_itmPrint>
 801788a:	482a      	ldr	r0, [pc, #168]	; (8017934 <IPC_UART_open+0x19c>)
 801788c:	f000 fb52 	bl	8017f34 <crs_strlen>
 8017890:	4a28      	ldr	r2, [pc, #160]	; (8017934 <IPC_UART_open+0x19c>)
 8017892:	b283      	uxth	r3, r0
 8017894:	2102      	movs	r1, #2
 8017896:	2004      	movs	r0, #4
 8017898:	f000 fdb0 	bl	80183fc <traceIF_uartPrint>

    /* select default queue (character or stream) */
    if (mode == IPC_MODE_UART_CHARACTER)
 801789c:	b916      	cbnz	r6, 80178a4 <IPC_UART_open+0x10c>
    {
      hipc->RxFifoWrite = IPC_RXFIFO_writeCharacter;
 801789e:	4b29      	ldr	r3, [pc, #164]	; (8017944 <IPC_UART_open+0x1ac>)
 80178a0:	f8c4 37f8 	str.w	r3, [r4, #2040]	; 0x7f8
    }
#endif /* IPC_USE_STREAM_MODE */

    /* initialize IPC channel parameters */
    hipc->Device_ID = device;
    hipc->Interface.interface_type = IPC_DevicesList[device].phy_int.interface_type;
 80178a4:	f8df a084 	ldr.w	sl, [pc, #132]	; 801792c <IPC_UART_open+0x194>
    hipc->Device_ID = device;
 80178a8:	7025      	strb	r5, [r4, #0]
    hipc->Interface.interface_type = IPC_DevicesList[device].phy_int.interface_type;
 80178aa:	f04f 0b18 	mov.w	fp, #24
 80178ae:	fb0b a305 	mla	r3, fp, r5, sl
    hipc->Interface.h_uart = IPC_DevicesList[device].phy_int.h_uart;
    hipc->State = IPC_STATE_INITIALIZED;
 80178b2:	2701      	movs	r7, #1
    hipc->Interface.interface_type = IPC_DevicesList[device].phy_int.interface_type;
 80178b4:	791a      	ldrb	r2, [r3, #4]
 80178b6:	7122      	strb	r2, [r4, #4]
    hipc->Interface.h_uart = IPC_DevicesList[device].phy_int.h_uart;
 80178b8:	689b      	ldr	r3, [r3, #8]
 80178ba:	60a3      	str	r3, [r4, #8]

    /* register client callback */
    hipc->RxClientCallback = pRxClientCallback;
    hipc->TxClientCallback = pTxClientCallback;
 80178bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178be:	f8c4 37ec 	str.w	r3, [r4, #2028]	; 0x7ec
    hipc->ErrorCallback = pErrorClientCallback;
 80178c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    hipc->State = IPC_STATE_INITIALIZED;
 80178c4:	7367      	strb	r7, [r4, #13]
    hipc->CheckEndOfMsgCallback = pCheckEndOfMsg;
    hipc->Mode = mode;

    /* init RXFIFO */
    IPC_RXFIFO_init(hipc);
 80178c6:	4620      	mov	r0, r4
    hipc->RxClientCallback = pRxClientCallback;
 80178c8:	f8c4 87e8 	str.w	r8, [r4, #2024]	; 0x7e8
    hipc->ErrorCallback = pErrorClientCallback;
 80178cc:	f8c4 37f0 	str.w	r3, [r4, #2032]	; 0x7f0
    hipc->CheckEndOfMsgCallback = pCheckEndOfMsg;
 80178d0:	f8c4 97f4 	str.w	r9, [r4, #2036]	; 0x7f4
    hipc->Mode = mode;
 80178d4:	7326      	strb	r6, [r4, #12]
    IPC_RXFIFO_init(hipc);
 80178d6:	f7ff fe0b 	bl	80174f0 <IPC_RXFIFO_init>
#if (IPC_USE_STREAM_MODE == 1U)
    IPC_RXFIFO_stream_init(hipc);
#endif /* IPC_USE_STREAM_MODE */

    /* start RX IT */
    uart_status = HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[device].RxChar, 1U);
 80178da:	fb0b a105 	mla	r1, fp, r5, sl
 80178de:	68a0      	ldr	r0, [r4, #8]
 80178e0:	463a      	mov	r2, r7
 80178e2:	310c      	adds	r1, #12
 80178e4:	f7ef fbd0 	bl	8007088 <HAL_UART_Receive_IT>
    if (uart_status != HAL_OK)
 80178e8:	b1e0      	cbz	r0, 8017924 <IPC_UART_open+0x18c>
    {
      PRINT_DBG("HAL_UART_Receive_IT error")
 80178ea:	4917      	ldr	r1, [pc, #92]	; (8017948 <IPC_UART_open+0x1b0>)
 80178ec:	4811      	ldr	r0, [pc, #68]	; (8017934 <IPC_UART_open+0x19c>)
 80178ee:	f005 fb53 	bl	801cf98 <strcpy>
 80178f2:	4810      	ldr	r0, [pc, #64]	; (8017934 <IPC_UART_open+0x19c>)
 80178f4:	f000 fb1e 	bl	8017f34 <crs_strlen>
 80178f8:	4a0e      	ldr	r2, [pc, #56]	; (8017934 <IPC_UART_open+0x19c>)
 80178fa:	b283      	uxth	r3, r0
 80178fc:	2102      	movs	r1, #2
 80178fe:	2004      	movs	r0, #4
 8017900:	f000 fb56 	bl	8017fb0 <traceIF_itmPrint>
 8017904:	480b      	ldr	r0, [pc, #44]	; (8017934 <IPC_UART_open+0x19c>)
 8017906:	f000 fb15 	bl	8017f34 <crs_strlen>
 801790a:	4a0a      	ldr	r2, [pc, #40]	; (8017934 <IPC_UART_open+0x19c>)
 801790c:	b283      	uxth	r3, r0
 801790e:	2102      	movs	r1, #2
 8017910:	2004      	movs	r0, #4
 8017912:	f000 fd73 	bl	80183fc <traceIF_uartPrint>
    retval = IPC_ERROR;
 8017916:	2001      	movs	r0, #1
 8017918:	e006      	b.n	8017928 <IPC_UART_open+0x190>
    else if (IPC_DevicesList[device].h_inactive_channel == NULL)
 801791a:	6953      	ldr	r3, [r2, #20]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d1fa      	bne.n	8017916 <IPC_UART_open+0x17e>
      IPC_DevicesList[device].h_inactive_channel = hipc;
 8017920:	6154      	str	r4, [r2, #20]
  if (retval != IPC_ERROR)
 8017922:	e752      	b.n	80177ca <IPC_UART_open+0x32>
    else
    {
      /* if we fall here, retval was equal to IPC_OK after parameters check
       * no error detected, IPC becomes active
       */
      hipc->State = IPC_STATE_ACTIVE;
 8017924:	2302      	movs	r3, #2
 8017926:	7363      	strb	r3, [r4, #13]
    }
  }
  return (retval);
}
 8017928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792c:	20008de0 	.word	0x20008de0
 8017930:	0802bb39 	.word	0x0802bb39
 8017934:	200091f8 	.word	0x200091f8
 8017938:	0802bb59 	.word	0x0802bb59
 801793c:	0802bb6a 	.word	0x0802bb6a
 8017940:	0802bb8a 	.word	0x0802bb8a
 8017944:	08017557 	.word	0x08017557
 8017948:	0802bbac 	.word	0x0802bbac

0801794c <IPC_UART_close>:
  * @brief  Close a specific channel.
  * @param  hipc IPC handle to close.
  * @retval status
  */
IPC_Status_t IPC_UART_close(IPC_Handle_t *const hipc)
{
 801794c:	b570      	push	{r4, r5, r6, lr}
  IPC_Status_t retval;

  /* input parameters validity has been tested in calling function */
  if (hipc->State != IPC_STATE_NOT_INITIALIZED)
 801794e:	7b43      	ldrb	r3, [r0, #13]
{
 8017950:	4604      	mov	r4, r0
  if (hipc->State != IPC_STATE_NOT_INITIALIZED)
 8017952:	b90b      	cbnz	r3, 8017958 <IPC_UART_close+0xc>
    }
  }
  else
  {
    /* ipc not initialized */
    retval = IPC_ERROR;
 8017954:	2001      	movs	r0, #1
  }

  return (retval);
}
 8017956:	bd70      	pop	{r4, r5, r6, pc}
    hipc->State = IPC_STATE_NOT_INITIALIZED;
 8017958:	2600      	movs	r6, #0
 801795a:	7346      	strb	r6, [r0, #13]
    hipc->RxClientCallback = NULL;
 801795c:	f8c0 67e8 	str.w	r6, [r0, #2024]	; 0x7e8
    hipc->CheckEndOfMsgCallback = NULL;
 8017960:	f8c0 67f4 	str.w	r6, [r0, #2036]	; 0x7f4
    IPC_RXFIFO_init(hipc);
 8017964:	f7ff fdc4 	bl	80174f0 <IPC_RXFIFO_init>
    uint8_t device_id = hipc->Device_ID;
 8017968:	7822      	ldrb	r2, [r4, #0]
    if (device_id != IPC_DEVICE_NOT_FOUND)
 801796a:	2aff      	cmp	r2, #255	; 0xff
 801796c:	d0f2      	beq.n	8017954 <IPC_UART_close+0x8>
      if (IPC_DevicesList[device_id].h_current_channel == hipc)
 801796e:	4d3f      	ldr	r5, [pc, #252]	; (8017a6c <IPC_UART_close+0x120>)
 8017970:	2318      	movs	r3, #24
 8017972:	fb03 5302 	mla	r3, r3, r2, r5
 8017976:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801797a:	42a0      	cmp	r0, r4
 801797c:	d102      	bne.n	8017984 <IPC_UART_close+0x38>
        IPC_DevicesList[device_id].h_current_channel = IPC_DevicesList[device_id].h_inactive_channel;
 801797e:	6119      	str	r1, [r3, #16]
        IPC_DevicesList[device_id].h_inactive_channel = NULL;
 8017980:	615e      	str	r6, [r3, #20]
 8017982:	e001      	b.n	8017988 <IPC_UART_close+0x3c>
      else if (IPC_DevicesList[device_id].h_inactive_channel == hipc)
 8017984:	428c      	cmp	r4, r1
 8017986:	d0fb      	beq.n	8017980 <IPC_UART_close+0x34>
      if ((IPC_DevicesList[device_id].h_current_channel == NULL) &&
 8017988:	2318      	movs	r3, #24
 801798a:	fb03 5202 	mla	r2, r3, r2, r5
 801798e:	6913      	ldr	r3, [r2, #16]
 8017990:	b92b      	cbnz	r3, 801799e <IPC_UART_close+0x52>
 8017992:	6953      	ldr	r3, [r2, #20]
 8017994:	b91b      	cbnz	r3, 801799e <IPC_UART_close+0x52>
        if (hipc->Interface.h_uart != NULL)
 8017996:	68a0      	ldr	r0, [r4, #8]
 8017998:	b108      	cbz	r0, 801799e <IPC_UART_close+0x52>
          (void)HAL_UART_AbortTransmit_IT(hipc->Interface.h_uart);
 801799a:	f7ee fd05 	bl	80063a8 <HAL_UART_AbortTransmit_IT>
      PRINT_DBG("IPC channel %p closed", hipc)
 801799e:	4934      	ldr	r1, [pc, #208]	; (8017a70 <IPC_UART_close+0x124>)
 80179a0:	4834      	ldr	r0, [pc, #208]	; (8017a74 <IPC_UART_close+0x128>)
 80179a2:	4622      	mov	r2, r4
 80179a4:	f005 fa88 	bl	801ceb8 <sprintf>
 80179a8:	4832      	ldr	r0, [pc, #200]	; (8017a74 <IPC_UART_close+0x128>)
 80179aa:	f000 fac3 	bl	8017f34 <crs_strlen>
 80179ae:	4a31      	ldr	r2, [pc, #196]	; (8017a74 <IPC_UART_close+0x128>)
 80179b0:	b283      	uxth	r3, r0
 80179b2:	2102      	movs	r1, #2
 80179b4:	2004      	movs	r0, #4
 80179b6:	f000 fafb 	bl	8017fb0 <traceIF_itmPrint>
 80179ba:	482e      	ldr	r0, [pc, #184]	; (8017a74 <IPC_UART_close+0x128>)
 80179bc:	f000 faba 	bl	8017f34 <crs_strlen>
 80179c0:	4a2c      	ldr	r2, [pc, #176]	; (8017a74 <IPC_UART_close+0x128>)
 80179c2:	b283      	uxth	r3, r0
 80179c4:	2102      	movs	r1, #2
 80179c6:	2004      	movs	r0, #4
 80179c8:	f000 fd18 	bl	80183fc <traceIF_uartPrint>
      PRINT_DBG("state 0x%x", IPC_DevicesList[hipc->Device_ID].state)
 80179cc:	7823      	ldrb	r3, [r4, #0]
 80179ce:	492a      	ldr	r1, [pc, #168]	; (8017a78 <IPC_UART_close+0x12c>)
 80179d0:	4828      	ldr	r0, [pc, #160]	; (8017a74 <IPC_UART_close+0x128>)
 80179d2:	2618      	movs	r6, #24
 80179d4:	4373      	muls	r3, r6
 80179d6:	5cea      	ldrb	r2, [r5, r3]
 80179d8:	f005 fa6e 	bl	801ceb8 <sprintf>
 80179dc:	4825      	ldr	r0, [pc, #148]	; (8017a74 <IPC_UART_close+0x128>)
 80179de:	f000 faa9 	bl	8017f34 <crs_strlen>
 80179e2:	4a24      	ldr	r2, [pc, #144]	; (8017a74 <IPC_UART_close+0x128>)
 80179e4:	b283      	uxth	r3, r0
 80179e6:	2102      	movs	r1, #2
 80179e8:	2004      	movs	r0, #4
 80179ea:	f000 fae1 	bl	8017fb0 <traceIF_itmPrint>
 80179ee:	4821      	ldr	r0, [pc, #132]	; (8017a74 <IPC_UART_close+0x128>)
 80179f0:	f000 faa0 	bl	8017f34 <crs_strlen>
 80179f4:	4a1f      	ldr	r2, [pc, #124]	; (8017a74 <IPC_UART_close+0x128>)
 80179f6:	b283      	uxth	r3, r0
 80179f8:	2102      	movs	r1, #2
 80179fa:	2004      	movs	r0, #4
 80179fc:	f000 fcfe 	bl	80183fc <traceIF_uartPrint>
      PRINT_DBG("active channel handle: %p", IPC_DevicesList[hipc->Device_ID].h_current_channel)
 8017a00:	7823      	ldrb	r3, [r4, #0]
 8017a02:	491e      	ldr	r1, [pc, #120]	; (8017a7c <IPC_UART_close+0x130>)
 8017a04:	481b      	ldr	r0, [pc, #108]	; (8017a74 <IPC_UART_close+0x128>)
 8017a06:	fb06 5303 	mla	r3, r6, r3, r5
 8017a0a:	691a      	ldr	r2, [r3, #16]
 8017a0c:	f005 fa54 	bl	801ceb8 <sprintf>
 8017a10:	4818      	ldr	r0, [pc, #96]	; (8017a74 <IPC_UART_close+0x128>)
 8017a12:	f000 fa8f 	bl	8017f34 <crs_strlen>
 8017a16:	4a17      	ldr	r2, [pc, #92]	; (8017a74 <IPC_UART_close+0x128>)
 8017a18:	b283      	uxth	r3, r0
 8017a1a:	2102      	movs	r1, #2
 8017a1c:	2004      	movs	r0, #4
 8017a1e:	f000 fac7 	bl	8017fb0 <traceIF_itmPrint>
 8017a22:	4814      	ldr	r0, [pc, #80]	; (8017a74 <IPC_UART_close+0x128>)
 8017a24:	f000 fa86 	bl	8017f34 <crs_strlen>
 8017a28:	4a12      	ldr	r2, [pc, #72]	; (8017a74 <IPC_UART_close+0x128>)
 8017a2a:	b283      	uxth	r3, r0
 8017a2c:	2102      	movs	r1, #2
 8017a2e:	2004      	movs	r0, #4
 8017a30:	f000 fce4 	bl	80183fc <traceIF_uartPrint>
      PRINT_DBG("inactive channel handle: %p", IPC_DevicesList[hipc->Device_ID].h_inactive_channel)
 8017a34:	7823      	ldrb	r3, [r4, #0]
 8017a36:	4912      	ldr	r1, [pc, #72]	; (8017a80 <IPC_UART_close+0x134>)
 8017a38:	480e      	ldr	r0, [pc, #56]	; (8017a74 <IPC_UART_close+0x128>)
 8017a3a:	fb06 5503 	mla	r5, r6, r3, r5
 8017a3e:	696a      	ldr	r2, [r5, #20]
 8017a40:	f005 fa3a 	bl	801ceb8 <sprintf>
 8017a44:	480b      	ldr	r0, [pc, #44]	; (8017a74 <IPC_UART_close+0x128>)
 8017a46:	f000 fa75 	bl	8017f34 <crs_strlen>
 8017a4a:	4a0a      	ldr	r2, [pc, #40]	; (8017a74 <IPC_UART_close+0x128>)
 8017a4c:	b283      	uxth	r3, r0
 8017a4e:	2102      	movs	r1, #2
 8017a50:	2004      	movs	r0, #4
 8017a52:	f000 faad 	bl	8017fb0 <traceIF_itmPrint>
 8017a56:	4807      	ldr	r0, [pc, #28]	; (8017a74 <IPC_UART_close+0x128>)
 8017a58:	f000 fa6c 	bl	8017f34 <crs_strlen>
 8017a5c:	4a05      	ldr	r2, [pc, #20]	; (8017a74 <IPC_UART_close+0x128>)
 8017a5e:	b283      	uxth	r3, r0
 8017a60:	2102      	movs	r1, #2
 8017a62:	2004      	movs	r0, #4
 8017a64:	f000 fcca 	bl	80183fc <traceIF_uartPrint>
      retval = IPC_OK;
 8017a68:	2000      	movs	r0, #0
 8017a6a:	e774      	b.n	8017956 <IPC_UART_close+0xa>
 8017a6c:	20008de0 	.word	0x20008de0
 8017a70:	0802bbcc 	.word	0x0802bbcc
 8017a74:	200091f8 	.word	0x200091f8
 8017a78:	0802bb59 	.word	0x0802bb59
 8017a7c:	0802bb6a 	.word	0x0802bb6a
 8017a80:	0802bb8a 	.word	0x0802bb8a

08017a84 <IPC_UART_abort>:
/**
  * @brief  Abort IPC transaction.
  * @retval status
  */
IPC_Status_t IPC_UART_abort(IPC_Handle_t *const hipc)
{
 8017a84:	b510      	push	{r4, lr}
  PRINT_DBG("IPC abort %p", hipc)
 8017a86:	4602      	mov	r2, r0
 8017a88:	490f      	ldr	r1, [pc, #60]	; (8017ac8 <IPC_UART_abort+0x44>)
{
 8017a8a:	4604      	mov	r4, r0
  PRINT_DBG("IPC abort %p", hipc)
 8017a8c:	480f      	ldr	r0, [pc, #60]	; (8017acc <IPC_UART_abort+0x48>)
 8017a8e:	f005 fa13 	bl	801ceb8 <sprintf>
 8017a92:	480e      	ldr	r0, [pc, #56]	; (8017acc <IPC_UART_abort+0x48>)
 8017a94:	f000 fa4e 	bl	8017f34 <crs_strlen>
 8017a98:	4a0c      	ldr	r2, [pc, #48]	; (8017acc <IPC_UART_abort+0x48>)
 8017a9a:	b283      	uxth	r3, r0
 8017a9c:	2102      	movs	r1, #2
 8017a9e:	2004      	movs	r0, #4
 8017aa0:	f000 fa86 	bl	8017fb0 <traceIF_itmPrint>
 8017aa4:	4809      	ldr	r0, [pc, #36]	; (8017acc <IPC_UART_abort+0x48>)
 8017aa6:	f000 fa45 	bl	8017f34 <crs_strlen>
 8017aaa:	4a08      	ldr	r2, [pc, #32]	; (8017acc <IPC_UART_abort+0x48>)
 8017aac:	b283      	uxth	r3, r0
 8017aae:	2102      	movs	r1, #2
 8017ab0:	2004      	movs	r0, #4
 8017ab2:	f000 fca3 	bl	80183fc <traceIF_uartPrint>
  /* input parameters validity has been tested in calling function */

  if (hipc->Interface.h_uart != NULL)
 8017ab6:	68a0      	ldr	r0, [r4, #8]
 8017ab8:	b120      	cbz	r0, 8017ac4 <IPC_UART_abort+0x40>
  {
    if (hipc->Interface.h_uart->gState != HAL_UART_STATE_RESET)
 8017aba:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017abe:	b10b      	cbz	r3, 8017ac4 <IPC_UART_abort+0x40>
    {
      (void)HAL_UART_AbortTransmit_IT(hipc->Interface.h_uart);
 8017ac0:	f7ee fc72 	bl	80063a8 <HAL_UART_AbortTransmit_IT>
    }
  }

  return (IPC_OK);
}
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	bd10      	pop	{r4, pc}
 8017ac8:	0802bbe8 	.word	0x0802bbe8
 8017acc:	200091f8 	.word	0x200091f8

08017ad0 <IPC_UART_select>:
  * @brief  Select current channel.
  * @param  hipc IPC handle to select.
  * @retval status
  */
IPC_Status_t IPC_UART_select(IPC_Handle_t *const hipc)
{
 8017ad0:	b570      	push	{r4, r5, r6, lr}
  PRINT_DBG("IPC select %p", hipc)
 8017ad2:	4602      	mov	r2, r0
 8017ad4:	4942      	ldr	r1, [pc, #264]	; (8017be0 <IPC_UART_select+0x110>)
  if (hipc != IPC_DevicesList[hipc->Device_ID].h_current_channel)
 8017ad6:	4d43      	ldr	r5, [pc, #268]	; (8017be4 <IPC_UART_select+0x114>)
{
 8017ad8:	4604      	mov	r4, r0
  PRINT_DBG("IPC select %p", hipc)
 8017ada:	4843      	ldr	r0, [pc, #268]	; (8017be8 <IPC_UART_select+0x118>)
 8017adc:	f005 f9ec 	bl	801ceb8 <sprintf>
 8017ae0:	4841      	ldr	r0, [pc, #260]	; (8017be8 <IPC_UART_select+0x118>)
 8017ae2:	f000 fa27 	bl	8017f34 <crs_strlen>
 8017ae6:	4a40      	ldr	r2, [pc, #256]	; (8017be8 <IPC_UART_select+0x118>)
 8017ae8:	b283      	uxth	r3, r0
 8017aea:	2102      	movs	r1, #2
 8017aec:	2004      	movs	r0, #4
 8017aee:	f000 fa5f 	bl	8017fb0 <traceIF_itmPrint>
 8017af2:	483d      	ldr	r0, [pc, #244]	; (8017be8 <IPC_UART_select+0x118>)
 8017af4:	f000 fa1e 	bl	8017f34 <crs_strlen>
 8017af8:	4a3b      	ldr	r2, [pc, #236]	; (8017be8 <IPC_UART_select+0x118>)
 8017afa:	b283      	uxth	r3, r0
 8017afc:	2102      	movs	r1, #2
 8017afe:	2004      	movs	r0, #4
 8017b00:	f000 fc7c 	bl	80183fc <traceIF_uartPrint>
  if (hipc != IPC_DevicesList[hipc->Device_ID].h_current_channel)
 8017b04:	7823      	ldrb	r3, [r4, #0]
 8017b06:	2618      	movs	r6, #24
 8017b08:	fb06 5303 	mla	r3, r6, r3, r5
 8017b0c:	691a      	ldr	r2, [r3, #16]
 8017b0e:	42a2      	cmp	r2, r4
 8017b10:	d064      	beq.n	8017bdc <IPC_UART_select+0x10c>
  IPC_Handle_t *tmp_handle;
  tmp_handle = IPC_DevicesList[hipc->Device_ID].h_current_channel;

  /* swap channels */
  IPC_DevicesList[hipc->Device_ID].h_current_channel = hipc;
  IPC_DevicesList[hipc->Device_ID].h_inactive_channel = tmp_handle;
 8017b12:	e9c3 4204 	strd	r4, r2, [r3, #16]

  PRINT_DBG("Change IPC channels")
 8017b16:	4935      	ldr	r1, [pc, #212]	; (8017bec <IPC_UART_select+0x11c>)
 8017b18:	4833      	ldr	r0, [pc, #204]	; (8017be8 <IPC_UART_select+0x118>)
 8017b1a:	f005 fa3d 	bl	801cf98 <strcpy>
 8017b1e:	4832      	ldr	r0, [pc, #200]	; (8017be8 <IPC_UART_select+0x118>)
 8017b20:	f000 fa08 	bl	8017f34 <crs_strlen>
 8017b24:	4a30      	ldr	r2, [pc, #192]	; (8017be8 <IPC_UART_select+0x118>)
 8017b26:	b283      	uxth	r3, r0
 8017b28:	2102      	movs	r1, #2
 8017b2a:	2004      	movs	r0, #4
 8017b2c:	f000 fa40 	bl	8017fb0 <traceIF_itmPrint>
 8017b30:	482d      	ldr	r0, [pc, #180]	; (8017be8 <IPC_UART_select+0x118>)
 8017b32:	f000 f9ff 	bl	8017f34 <crs_strlen>
 8017b36:	4a2c      	ldr	r2, [pc, #176]	; (8017be8 <IPC_UART_select+0x118>)
 8017b38:	b283      	uxth	r3, r0
 8017b3a:	2102      	movs	r1, #2
 8017b3c:	2004      	movs	r0, #4
 8017b3e:	f000 fc5d 	bl	80183fc <traceIF_uartPrint>
  PRINT_DBG("state 0x%x", IPC_DevicesList[hipc->Device_ID].state)
 8017b42:	7823      	ldrb	r3, [r4, #0]
 8017b44:	492a      	ldr	r1, [pc, #168]	; (8017bf0 <IPC_UART_select+0x120>)
 8017b46:	4828      	ldr	r0, [pc, #160]	; (8017be8 <IPC_UART_select+0x118>)
 8017b48:	4373      	muls	r3, r6
 8017b4a:	5cea      	ldrb	r2, [r5, r3]
 8017b4c:	f005 f9b4 	bl	801ceb8 <sprintf>
 8017b50:	4825      	ldr	r0, [pc, #148]	; (8017be8 <IPC_UART_select+0x118>)
 8017b52:	f000 f9ef 	bl	8017f34 <crs_strlen>
 8017b56:	4a24      	ldr	r2, [pc, #144]	; (8017be8 <IPC_UART_select+0x118>)
 8017b58:	b283      	uxth	r3, r0
 8017b5a:	2102      	movs	r1, #2
 8017b5c:	2004      	movs	r0, #4
 8017b5e:	f000 fa27 	bl	8017fb0 <traceIF_itmPrint>
 8017b62:	4821      	ldr	r0, [pc, #132]	; (8017be8 <IPC_UART_select+0x118>)
 8017b64:	f000 f9e6 	bl	8017f34 <crs_strlen>
 8017b68:	4a1f      	ldr	r2, [pc, #124]	; (8017be8 <IPC_UART_select+0x118>)
 8017b6a:	b283      	uxth	r3, r0
 8017b6c:	2102      	movs	r1, #2
 8017b6e:	2004      	movs	r0, #4
 8017b70:	f000 fc44 	bl	80183fc <traceIF_uartPrint>
  PRINT_DBG("active channel handle: %p", IPC_DevicesList[hipc->Device_ID].h_current_channel)
 8017b74:	7823      	ldrb	r3, [r4, #0]
 8017b76:	491f      	ldr	r1, [pc, #124]	; (8017bf4 <IPC_UART_select+0x124>)
 8017b78:	481b      	ldr	r0, [pc, #108]	; (8017be8 <IPC_UART_select+0x118>)
 8017b7a:	fb06 5303 	mla	r3, r6, r3, r5
 8017b7e:	691a      	ldr	r2, [r3, #16]
 8017b80:	f005 f99a 	bl	801ceb8 <sprintf>
 8017b84:	4818      	ldr	r0, [pc, #96]	; (8017be8 <IPC_UART_select+0x118>)
 8017b86:	f000 f9d5 	bl	8017f34 <crs_strlen>
 8017b8a:	4a17      	ldr	r2, [pc, #92]	; (8017be8 <IPC_UART_select+0x118>)
 8017b8c:	b283      	uxth	r3, r0
 8017b8e:	2102      	movs	r1, #2
 8017b90:	2004      	movs	r0, #4
 8017b92:	f000 fa0d 	bl	8017fb0 <traceIF_itmPrint>
 8017b96:	4814      	ldr	r0, [pc, #80]	; (8017be8 <IPC_UART_select+0x118>)
 8017b98:	f000 f9cc 	bl	8017f34 <crs_strlen>
 8017b9c:	4a12      	ldr	r2, [pc, #72]	; (8017be8 <IPC_UART_select+0x118>)
 8017b9e:	b283      	uxth	r3, r0
 8017ba0:	2102      	movs	r1, #2
 8017ba2:	2004      	movs	r0, #4
 8017ba4:	f000 fc2a 	bl	80183fc <traceIF_uartPrint>
  PRINT_DBG("inactive channel handle: %p", IPC_DevicesList[hipc->Device_ID].h_inactive_channel)
 8017ba8:	7823      	ldrb	r3, [r4, #0]
 8017baa:	4913      	ldr	r1, [pc, #76]	; (8017bf8 <IPC_UART_select+0x128>)
 8017bac:	480e      	ldr	r0, [pc, #56]	; (8017be8 <IPC_UART_select+0x118>)
 8017bae:	fb06 5503 	mla	r5, r6, r3, r5
 8017bb2:	696a      	ldr	r2, [r5, #20]
 8017bb4:	f005 f980 	bl	801ceb8 <sprintf>
 8017bb8:	480b      	ldr	r0, [pc, #44]	; (8017be8 <IPC_UART_select+0x118>)
 8017bba:	f000 f9bb 	bl	8017f34 <crs_strlen>
 8017bbe:	4a0a      	ldr	r2, [pc, #40]	; (8017be8 <IPC_UART_select+0x118>)
 8017bc0:	b283      	uxth	r3, r0
 8017bc2:	2102      	movs	r1, #2
 8017bc4:	2004      	movs	r0, #4
 8017bc6:	f000 f9f3 	bl	8017fb0 <traceIF_itmPrint>
 8017bca:	4807      	ldr	r0, [pc, #28]	; (8017be8 <IPC_UART_select+0x118>)
 8017bcc:	f000 f9b2 	bl	8017f34 <crs_strlen>
 8017bd0:	4a05      	ldr	r2, [pc, #20]	; (8017be8 <IPC_UART_select+0x118>)
 8017bd2:	b283      	uxth	r3, r0
 8017bd4:	2102      	movs	r1, #2
 8017bd6:	2004      	movs	r0, #4
 8017bd8:	f000 fc10 	bl	80183fc <traceIF_uartPrint>
}
 8017bdc:	2000      	movs	r0, #0
 8017bde:	bd70      	pop	{r4, r5, r6, pc}
 8017be0:	0802bbfb 	.word	0x0802bbfb
 8017be4:	20008de0 	.word	0x20008de0
 8017be8:	200091f8 	.word	0x200091f8
 8017bec:	0802bc0f 	.word	0x0802bc0f
 8017bf0:	0802bb59 	.word	0x0802bb59
 8017bf4:	0802bb6a 	.word	0x0802bb6a
 8017bf8:	0802bb8a 	.word	0x0802bb8a

08017bfc <IPC_UART_get_other_channel>:
  if ((IPC_DevicesList[hipc->Device_ID].h_current_channel == hipc) &&
 8017bfc:	4a08      	ldr	r2, [pc, #32]	; (8017c20 <IPC_UART_get_other_channel+0x24>)
 8017bfe:	7803      	ldrb	r3, [r0, #0]
 8017c00:	2118      	movs	r1, #24
 8017c02:	fb01 2303 	mla	r3, r1, r3, r2
 8017c06:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
  IPC_Handle_t *handle = NULL;
 8017c0a:	4282      	cmp	r2, r0
 8017c0c:	bf0c      	ite	eq
 8017c0e:	460b      	moveq	r3, r1
 8017c10:	2300      	movne	r3, #0
  if ((IPC_DevicesList[hipc->Device_ID].h_inactive_channel == hipc) &&
 8017c12:	4288      	cmp	r0, r1
 8017c14:	d102      	bne.n	8017c1c <IPC_UART_get_other_channel+0x20>
 8017c16:	2a00      	cmp	r2, #0
 8017c18:	bf18      	it	ne
 8017c1a:	4613      	movne	r3, r2
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	4770      	bx	lr
 8017c20:	20008de0 	.word	0x20008de0

08017c24 <IPC_UART_send>:
{
 8017c24:	b538      	push	{r3, r4, r5, lr}
  if (hipc != IPC_DevicesList[hipc->Device_ID].h_current_channel)
 8017c26:	4c07      	ldr	r4, [pc, #28]	; (8017c44 <IPC_UART_send+0x20>)
 8017c28:	7803      	ldrb	r3, [r0, #0]
 8017c2a:	2518      	movs	r5, #24
 8017c2c:	fb05 4303 	mla	r3, r5, r3, r4
 8017c30:	691b      	ldr	r3, [r3, #16]
 8017c32:	4283      	cmp	r3, r0
 8017c34:	d104      	bne.n	8017c40 <IPC_UART_send+0x1c>
    (void)HAL_UART_Transmit_IT(hipc->Interface.h_uart, (uint8_t *)p_TxBuffer, bufsize);
 8017c36:	6898      	ldr	r0, [r3, #8]
 8017c38:	f7ee fb52 	bl	80062e0 <HAL_UART_Transmit_IT>
    retval = IPC_OK;
 8017c3c:	2000      	movs	r0, #0
}
 8017c3e:	bd38      	pop	{r3, r4, r5, pc}
    retval = IPC_ERROR;
 8017c40:	2001      	movs	r0, #1
 8017c42:	e7fc      	b.n	8017c3e <IPC_UART_send+0x1a>
 8017c44:	20008de0 	.word	0x20008de0

08017c48 <IPC_UART_receive>:
{
 8017c48:	b538      	push	{r3, r4, r5, lr}
  if (hipc->Mode == IPC_MODE_UART_CHARACTER)
 8017c4a:	7b02      	ldrb	r2, [r0, #12]
{
 8017c4c:	4604      	mov	r4, r0
  if (hipc->Mode == IPC_MODE_UART_CHARACTER)
 8017c4e:	2a00      	cmp	r2, #0
 8017c50:	d146      	bne.n	8017ce0 <IPC_UART_receive+0x98>
    if (p_msg == NULL)
 8017c52:	b999      	cbnz	r1, 8017c7c <IPC_UART_receive+0x34>
      PRINT_ERR("IPC_receive err - p_msg NULL")
 8017c54:	4923      	ldr	r1, [pc, #140]	; (8017ce4 <IPC_UART_receive+0x9c>)
    PRINT_ERR("IPC_receive err - IPC mode not matching")
 8017c56:	4824      	ldr	r0, [pc, #144]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c58:	f005 f99e 	bl	801cf98 <strcpy>
 8017c5c:	4822      	ldr	r0, [pc, #136]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c5e:	f000 f969 	bl	8017f34 <crs_strlen>
 8017c62:	4a21      	ldr	r2, [pc, #132]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c64:	b283      	uxth	r3, r0
 8017c66:	2110      	movs	r1, #16
 8017c68:	2004      	movs	r0, #4
 8017c6a:	f000 f9a1 	bl	8017fb0 <traceIF_itmPrint>
 8017c6e:	481e      	ldr	r0, [pc, #120]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c70:	f000 f960 	bl	8017f34 <crs_strlen>
 8017c74:	4a1c      	ldr	r2, [pc, #112]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c76:	b283      	uxth	r3, r0
 8017c78:	2110      	movs	r1, #16
 8017c7a:	e017      	b.n	8017cac <IPC_UART_receive+0x64>
      unread_msg = IPC_RXFIFO_read(hipc, p_msg);
 8017c7c:	f7ff fd26 	bl	80176cc <IPC_RXFIFO_read>
      if (unread_msg == -1)
 8017c80:	1c43      	adds	r3, r0, #1
      unread_msg = IPC_RXFIFO_read(hipc, p_msg);
 8017c82:	4605      	mov	r5, r0
      if (unread_msg == -1)
 8017c84:	d117      	bne.n	8017cb6 <IPC_UART_receive+0x6e>
        PRINT_DBG("IPC_receive err - no unread msg")
 8017c86:	4919      	ldr	r1, [pc, #100]	; (8017cec <IPC_UART_receive+0xa4>)
 8017c88:	4817      	ldr	r0, [pc, #92]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c8a:	f005 f985 	bl	801cf98 <strcpy>
 8017c8e:	4816      	ldr	r0, [pc, #88]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c90:	f000 f950 	bl	8017f34 <crs_strlen>
 8017c94:	4a14      	ldr	r2, [pc, #80]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017c96:	b283      	uxth	r3, r0
 8017c98:	2102      	movs	r1, #2
 8017c9a:	2004      	movs	r0, #4
 8017c9c:	f000 f988 	bl	8017fb0 <traceIF_itmPrint>
 8017ca0:	4811      	ldr	r0, [pc, #68]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017ca2:	f000 f947 	bl	8017f34 <crs_strlen>
 8017ca6:	4a10      	ldr	r2, [pc, #64]	; (8017ce8 <IPC_UART_receive+0xa0>)
 8017ca8:	b283      	uxth	r3, r0
 8017caa:	2102      	movs	r1, #2
    PRINT_ERR("IPC_receive err - IPC mode not matching")
 8017cac:	2004      	movs	r0, #4
 8017cae:	f000 fba5 	bl	80183fc <traceIF_uartPrint>
    retval = IPC_ERROR;
 8017cb2:	2001      	movs	r0, #1
 8017cb4:	e013      	b.n	8017cde <IPC_UART_receive+0x96>
        if (hipc->State == IPC_STATE_PAUSED)
 8017cb6:	7b63      	ldrb	r3, [r4, #13]
 8017cb8:	2b03      	cmp	r3, #3
 8017cba:	d10c      	bne.n	8017cd6 <IPC_UART_receive+0x8e>
          (void) HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[hipc->Device_ID].RxChar, 1U);
 8017cbc:	7822      	ldrb	r2, [r4, #0]
 8017cbe:	68a0      	ldr	r0, [r4, #8]
          hipc->State = IPC_STATE_ACTIVE;
 8017cc0:	2302      	movs	r3, #2
          (void) HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[hipc->Device_ID].RxChar, 1U);
 8017cc2:	210c      	movs	r1, #12
          hipc->State = IPC_STATE_ACTIVE;
 8017cc4:	7363      	strb	r3, [r4, #13]
          (void) HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[hipc->Device_ID].RxChar, 1U);
 8017cc6:	2318      	movs	r3, #24
 8017cc8:	fb13 1302 	smlabb	r3, r3, r2, r1
 8017ccc:	4908      	ldr	r1, [pc, #32]	; (8017cf0 <IPC_UART_receive+0xa8>)
 8017cce:	2201      	movs	r2, #1
 8017cd0:	4419      	add	r1, r3
 8017cd2:	f7ef f9d9 	bl	8007088 <HAL_UART_Receive_IT>
        if (unread_msg == 0)
 8017cd6:	2d00      	cmp	r5, #0
          retval = IPC_RXQUEUE_MSG_AVAIL;
 8017cd8:	bf0c      	ite	eq
 8017cda:	2002      	moveq	r0, #2
 8017cdc:	2003      	movne	r0, #3
}
 8017cde:	bd38      	pop	{r3, r4, r5, pc}
    PRINT_ERR("IPC_receive err - IPC mode not matching")
 8017ce0:	4904      	ldr	r1, [pc, #16]	; (8017cf4 <IPC_UART_receive+0xac>)
 8017ce2:	e7b8      	b.n	8017c56 <IPC_UART_receive+0xe>
 8017ce4:	0802bc29 	.word	0x0802bc29
 8017ce8:	200091f8 	.word	0x200091f8
 8017cec:	0802bc52 	.word	0x0802bc52
 8017cf0:	20008de0 	.word	0x20008de0
 8017cf4:	0802bc78 	.word	0x0802bc78

08017cf8 <IPC_UART_rearm_RX_IT>:
{
 8017cf8:	b410      	push	{r4}
  if (hipc != NULL)
 8017cfa:	b170      	cbz	r0, 8017d1a <IPC_UART_rearm_RX_IT+0x22>
    if (hipc->Interface.interface_type == IPC_INTERFACE_UART)
 8017cfc:	7902      	ldrb	r2, [r0, #4]
 8017cfe:	2a01      	cmp	r2, #1
 8017d00:	d10b      	bne.n	8017d1a <IPC_UART_rearm_RX_IT+0x22>
      (void)HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[hipc->Device_ID].RxChar, 1U);
 8017d02:	7804      	ldrb	r4, [r0, #0]
 8017d04:	6880      	ldr	r0, [r0, #8]
 8017d06:	210c      	movs	r1, #12
 8017d08:	2318      	movs	r3, #24
 8017d0a:	fb13 1304 	smlabb	r3, r3, r4, r1
 8017d0e:	4904      	ldr	r1, [pc, #16]	; (8017d20 <IPC_UART_rearm_RX_IT+0x28>)
}
 8017d10:	f85d 4b04 	ldr.w	r4, [sp], #4
      (void)HAL_UART_Receive_IT(hipc->Interface.h_uart, (uint8_t *)IPC_DevicesList[hipc->Device_ID].RxChar, 1U);
 8017d14:	4419      	add	r1, r3
 8017d16:	f7ef b9b7 	b.w	8007088 <HAL_UART_Receive_IT>
}
 8017d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d1e:	4770      	bx	lr
 8017d20:	20008de0 	.word	0x20008de0

08017d24 <IPC_UART_RxCpltCallback>:
    if (huart->Instance == IPC_DevicesList[idx].phy_int.h_uart->Instance)
 8017d24:	4b06      	ldr	r3, [pc, #24]	; (8017d40 <IPC_UART_RxCpltCallback+0x1c>)
 8017d26:	6801      	ldr	r1, [r0, #0]
 8017d28:	689a      	ldr	r2, [r3, #8]
 8017d2a:	6812      	ldr	r2, [r2, #0]
 8017d2c:	4291      	cmp	r1, r2
 8017d2e:	d105      	bne.n	8017d3c <IPC_UART_RxCpltCallback+0x18>
    if (IPC_DevicesList[device_id].h_current_channel != NULL)
 8017d30:	6918      	ldr	r0, [r3, #16]
 8017d32:	b118      	cbz	r0, 8017d3c <IPC_UART_RxCpltCallback+0x18>
      IPC_DevicesList[device_id].h_current_channel->RxFifoWrite(IPC_DevicesList[device_id].h_current_channel,
 8017d34:	f8d0 27f8 	ldr.w	r2, [r0, #2040]	; 0x7f8
 8017d38:	7b19      	ldrb	r1, [r3, #12]
 8017d3a:	4710      	bx	r2
}
 8017d3c:	4770      	bx	lr
 8017d3e:	bf00      	nop
 8017d40:	20008de0 	.word	0x20008de0

08017d44 <IPC_UART_TxCpltCallback>:
    if (huart->Instance == IPC_DevicesList[idx].phy_int.h_uart->Instance)
 8017d44:	4b05      	ldr	r3, [pc, #20]	; (8017d5c <IPC_UART_TxCpltCallback+0x18>)
 8017d46:	6801      	ldr	r1, [r0, #0]
 8017d48:	689a      	ldr	r2, [r3, #8]
 8017d4a:	6812      	ldr	r2, [r2, #0]
 8017d4c:	4291      	cmp	r1, r2
 8017d4e:	d104      	bne.n	8017d5a <IPC_UART_TxCpltCallback+0x16>
    if (IPC_DevicesList[device_id].h_current_channel != NULL)
 8017d50:	6918      	ldr	r0, [r3, #16]
 8017d52:	b110      	cbz	r0, 8017d5a <IPC_UART_TxCpltCallback+0x16>
      IPC_DevicesList[device_id].h_current_channel->TxClientCallback(
 8017d54:	f8d0 37ec 	ldr.w	r3, [r0, #2028]	; 0x7ec
 8017d58:	4718      	bx	r3
}
 8017d5a:	4770      	bx	lr
 8017d5c:	20008de0 	.word	0x20008de0

08017d60 <IPC_UART_ErrorCallback>:
    if (huart->Instance == IPC_DevicesList[idx].phy_int.h_uart->Instance)
 8017d60:	4b06      	ldr	r3, [pc, #24]	; (8017d7c <IPC_UART_ErrorCallback+0x1c>)
 8017d62:	6801      	ldr	r1, [r0, #0]
 8017d64:	689a      	ldr	r2, [r3, #8]
 8017d66:	6812      	ldr	r2, [r2, #0]
 8017d68:	4291      	cmp	r1, r2
 8017d6a:	d105      	bne.n	8017d78 <IPC_UART_ErrorCallback+0x18>
    if (IPC_DevicesList[device_id].h_current_channel != NULL)
 8017d6c:	6918      	ldr	r0, [r3, #16]
 8017d6e:	b118      	cbz	r0, 8017d78 <IPC_UART_ErrorCallback+0x18>
      if (IPC_DevicesList[device_id].h_current_channel->ErrorCallback != NULL)
 8017d70:	f8d0 37f0 	ldr.w	r3, [r0, #2032]	; 0x7f0
 8017d74:	b103      	cbz	r3, 8017d78 <IPC_UART_ErrorCallback+0x18>
        IPC_DevicesList[device_id].h_current_channel->ErrorCallback(
 8017d76:	4718      	bx	r3
}
 8017d78:	4770      	bx	lr
 8017d7a:	bf00      	nop
 8017d7c:	20008de0 	.word	0x20008de0

08017d80 <rtosalGetSysTimerCount>:
 * @retval uint32_t - RTOS kernel current system timer count as 32-bit value.
 */
uint32_t rtosalGetSysTimerCount(void) {
	uint32_t retval;
#if (osCMSIS < 0x20000U)
	retval = osKernelSysTick();
 8017d80:	f001 babf 	b.w	8019302 <osKernelSysTick>

08017d84 <rtosalThreadNew>:
 * @note   To be independent osCMSIS version used, allocated size is : stacksize * sizeof(StackType_t)
 * @param  p_arg      - argument passed to the thread function when it is started.
 * @retval osThreadId - thread ID for reference by other functions or NULL in case of error.
 */
osThreadId rtosalThreadNew(const rtosal_char_t *p_name, os_pthread func,
		osPriority priority, uint32_t stacksize, void *p_arg) {
 8017d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	osThreadId retval;

#if (osCMSIS < 0x20000U)
	/* Thread definition */

	const osThreadDef_t rtosal_thread_def = { .name = (RTOS_CHAR_t*) p_name,
 8017d86:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8017d8a:	f8ad 200c 	strh.w	r2, [sp, #12]
			.pthread = func, .tpriority = priority, .instances = 0U,
			.stacksize = stacksize /* allocated size : stacksize * sizeof(StackType_t) done by CMSIS */
	};

	retval = osThreadCreate(&rtosal_thread_def, p_arg);
 8017d8e:	9908      	ldr	r1, [sp, #32]
	const osThreadDef_t rtosal_thread_def = { .name = (RTOS_CHAR_t*) p_name,
 8017d90:	2200      	movs	r2, #0
	retval = osThreadCreate(&rtosal_thread_def, p_arg);
 8017d92:	a801      	add	r0, sp, #4
	const osThreadDef_t rtosal_thread_def = { .name = (RTOS_CHAR_t*) p_name,
 8017d94:	e9cd 2304 	strd	r2, r3, [sp, #16]
	retval = osThreadCreate(&rtosal_thread_def, p_arg);
 8017d98:	f001 faba 	bl	8019310 <osThreadCreate>

  retval = osThreadNew((osThreadFunc_t)func, p_arg, &rtosal_thread_attr);
#endif /* osCMSIS < 0x20000U */

	return (retval);
}
 8017d9c:	b007      	add	sp, #28
 8017d9e:	f85d fb04 	ldr.w	pc, [sp], #4

08017da2 <rtosalSemaphoreNew>:
 * @note   With CMSIS RTOS V1, name is unused.
 * @param  count         - number of available resources.
 * @note   At creation semaphore max count is set to count.
 * @retval osSemaphoreId - semaphore ID for reference by other functions or NULL in case of error.
 */
osSemaphoreId rtosalSemaphoreNew(const rtosal_char_t *p_name, uint32_t count) {
 8017da2:	b507      	push	{r0, r1, r2, lr}
	osSemaphoreId retval;

#if (osCMSIS < 0x20000U)
	(void) (p_name); /* To avoid gcc/g++ warnings */
	osSemaphoreDef(SEM); /* true name can not be used when (osCMSIS < 0x20000U) */
 8017da4:	2300      	movs	r3, #0
	retval = osSemaphoreCreate(osSemaphore(SEM), (int32_t) count); /* No issue with cast to (int32_t) */
 8017da6:	a801      	add	r0, sp, #4
	osSemaphoreDef(SEM); /* true name can not be used when (osCMSIS < 0x20000U) */
 8017da8:	9301      	str	r3, [sp, #4]
	retval = osSemaphoreCreate(osSemaphore(SEM), (int32_t) count); /* No issue with cast to (int32_t) */
 8017daa:	f001 fb81 	bl	80194b0 <osSemaphoreCreate>

  retval = osSemaphoreNew(count, count, &rtosal_sem_attr); /* maximum count is set to initial count */
#endif /* osCMSIS < 0x20000U */

	return (retval);
}
 8017dae:	b003      	add	sp, #12
 8017db0:	f85d fb04 	ldr.w	pc, [sp], #4

08017db4 <rtosalSemaphoreAcquire>:
	rtosalStatus status;

#if (osCMSIS < 0x20000U)
	/* Due to incompatibility between V1 and V2 return type retval is converted to osStatus
	 see V1 API documentation for more details */
	status = (osStatus) osSemaphoreWait(semaphore_id, timeout);
 8017db4:	f001 bb92 	b.w	80194dc <osSemaphoreWait>

08017db8 <rtosalSemaphoreRelease>:
 * @param  semaphore_id - semaphore ID obtained by rtosalSemaphoreNew.
 * @retval rtosalStatus - indicate the execution status of the function.
 */
rtosalStatus rtosalSemaphoreRelease(osSemaphoreId semaphore_id) {
	rtosalStatus status;
	status = osSemaphoreRelease(semaphore_id);
 8017db8:	f001 bbb6 	b.w	8019528 <osSemaphoreRelease>

08017dbc <rtosalMutexNew>:
 * @note   With CMSIS RTOS V2, this function creates a non-recursive mutex.
 * @param  p_name    - mutex name.
 * @note   With CMSIS RTOS V1, name is unused.
 * @retval osMutexId - mutex ID for reference by other functions or NULL in case of error.
 */
osMutexId rtosalMutexNew(const rtosal_char_t *p_name) {
 8017dbc:	b507      	push	{r0, r1, r2, lr}
	osMutexId retval;

#if (osCMSIS < 0x20000U)
	(void) (p_name); /* To avoid gcc/g++ warnings */
	osMutexDef(MUTEX); /* true name can not be used when (osCMSIS < 0x20000U) */
 8017dbe:	2300      	movs	r3, #0
	retval = osMutexCreate(osMutex(MUTEX));
 8017dc0:	a801      	add	r0, sp, #4
	osMutexDef(MUTEX); /* true name can not be used when (osCMSIS < 0x20000U) */
 8017dc2:	9301      	str	r3, [sp, #4]
	retval = osMutexCreate(osMutex(MUTEX));
 8017dc4:	f001 fb26 	bl	8019414 <osMutexCreate>

  retval = osMutexNew(&rtosal_mutex_attr);
#endif /* osCMSIS < 0x20000U */

	return (retval);
}
 8017dc8:	b003      	add	sp, #12
 8017dca:	f85d fb04 	ldr.w	pc, [sp], #4

08017dce <rtosalMutexAcquire>:
 */
rtosalStatus rtosalMutexAcquire(osMutexId mutex_id, uint32_t timeout) {
	rtosalStatus status;

#if (osCMSIS < 0x20000U)
	status = osMutexWait(mutex_id, timeout);
 8017dce:	f001 bb25 	b.w	801941c <osMutexWait>

08017dd2 <rtosalMutexRelease>:
 * @param  mutex_id     - mutex ID obtained by rtosalMutexNew.
 * @retval rtosalStatus - indicate the execution status of the function.
 */
rtosalStatus rtosalMutexRelease(osMutexId mutex_id) {
	rtosalStatus status;
	status = osMutexRelease(mutex_id);
 8017dd2:	f001 bb49 	b.w	8019468 <osMutexRelease>

08017dd6 <rtosalMessageQueueNew>:
 * @note   With CMSIS RTOS V1, name is unused.
 * @param  queue_size   - maximum number of messages in queue.
 * @retval osMessageQId - message queue ID for reference by other functions or NULL in case of error.
 */
osMessageQId rtosalMessageQueueNew(const rtosal_char_t *p_name,
		uint32_t queue_size) {
 8017dd6:	b507      	push	{r0, r1, r2, lr}
	osMessageQId retval;

#if (osCMSIS < 0x20000U)
	(void) (p_name); /* To avoid gcc/g++ warnings */
	const osMessageQDef_t rtosal_queue_def = { .queue_sz = queue_size,
 8017dd8:	2304      	movs	r3, #4
 8017dda:	9100      	str	r1, [sp, #0]
			.item_sz = sizeof(uint32_t) /* This implementation supports 32-bit sized messages only */
	};

	retval = osMessageCreate(&rtosal_queue_def, NULL);
 8017ddc:	4668      	mov	r0, sp
 8017dde:	2100      	movs	r1, #0
	const osMessageQDef_t rtosal_queue_def = { .queue_sz = queue_size,
 8017de0:	9301      	str	r3, [sp, #4]
	retval = osMessageCreate(&rtosal_queue_def, NULL);
 8017de2:	f001 fba3 	bl	801952c <osMessageCreate>
  /* This implementation supports 32-bit sized messages only */
  retval = osMessageQueueNew(queue_size, sizeof(uint32_t), &rtosal_message_attr);
#endif /* osCMSIS < 0x20000U */

	return (retval);
}
 8017de6:	b003      	add	sp, #12
 8017de8:	f85d fb04 	ldr.w	pc, [sp], #4

08017dec <rtosalMessageQueuePut>:
rtosalStatus rtosalMessageQueuePut(osMessageQId mq_id, uint32_t msg,
		uint32_t timeout) {
	rtosalStatus status;

#if (osCMSIS < 0x20000U)
	status = osMessagePut(mq_id, msg, timeout);
 8017dec:	f001 bba4 	b.w	8019538 <osMessagePut>

08017df0 <rtosalMessageQueueGet>:
 *       Conclusion: initialize p_msg to an impossible value
 *                   test (rtosalStatus == osEventTimeout) to treat timeout (if any)
 *                   then test (*p_msg != impossible value) to ensure a msg is available
 */
rtosalStatus rtosalMessageQueueGet(osMessageQId mq_id, uint32_t *p_msg,
		uint32_t timeout) {
 8017df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	rtosalStatus status;

#if (osCMSIS < 0x20000U)
	osEvent event;

	if (p_msg == NULL) /* Check parameter */
 8017df2:	460c      	mov	r4, r1
 8017df4:	b151      	cbz	r1, 8017e0c <rtosalMessageQueueGet+0x1c>
	{
		status = osErrorParameter;
	} else {
		event = osMessageGet(mq_id, timeout);
 8017df6:	4601      	mov	r1, r0
 8017df8:	a801      	add	r0, sp, #4
 8017dfa:	f001 fbc5 	bl	8019588 <osMessageGet>

		/* Retrieve the status from the returned structure */
		status = event.status;
 8017dfe:	9801      	ldr	r0, [sp, #4]
		/* if a msg has been received then store it in user buffer */
		if (status == osEventMessage) {
 8017e00:	2810      	cmp	r0, #16
 8017e02:	d101      	bne.n	8017e08 <rtosalMessageQueueGet+0x18>
			*p_msg = event.value.v;
 8017e04:	9b02      	ldr	r3, [sp, #8]
 8017e06:	6023      	str	r3, [r4, #0]
  /* msg_prio is not managed, so set to NULL */
  status = osMessageQueueGet(mq_id, p_msg, NULL, timeout);
#endif /* osCMSIS < 0x20000U */

	return (status);
}
 8017e08:	b004      	add	sp, #16
 8017e0a:	bd10      	pop	{r4, pc}
		status = osErrorParameter;
 8017e0c:	2080      	movs	r0, #128	; 0x80
	return (status);
 8017e0e:	e7fb      	b.n	8017e08 <rtosalMessageQueueGet+0x18>

08017e10 <rtosalTimerNew>:
 * @param   type     - osTimerOnce for one-shot or osTimerPeriodic for periodic behavior
 * @param   p_arg    - argument passed to the timer callback function when it is called.
 * @retval osTimerId - timer ID for reference by other functions or NULL in case of error.
 */
osTimerId rtosalTimerNew(const rtosal_char_t *p_name, os_ptimer func,
		os_timer_type type, void *p_arg) {
 8017e10:	b507      	push	{r0, r1, r2, lr}
 8017e12:	4608      	mov	r0, r1
	osTimerId retval;

#if (osCMSIS < 0x20000U)
	(void) (p_name); /* To avoid gcc/g++ warnings */
	osTimerDef(TIM, func); /* true name can not be used when (osCMSIS < 0x20000U) */
 8017e14:	9001      	str	r0, [sp, #4]
		os_timer_type type, void *p_arg) {
 8017e16:	4611      	mov	r1, r2
	retval = osTimerCreate(osTimer(TIM), type, p_arg);
 8017e18:	a801      	add	r0, sp, #4
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	f001 fa98 	bl	8019350 <osTimerCreate>

  retval = osTimerNew((osTimerFunc_t)func, (osTimerType_t)type, p_arg, &rtosal_timer_attr);
#endif /* osCMSIS < 0x20000U */

	return (retval);
}
 8017e20:	b003      	add	sp, #12
 8017e22:	f85d fb04 	ldr.w	pc, [sp], #4

08017e26 <rtosalTimerStart>:
 * @param  ticks        - "time ticks" value of the timer.
 * @retval rtosalStatus - indicate the execution status of the function.
 */
rtosalStatus rtosalTimerStart(osTimerId timer_id, uint32_t ticks) {
	rtosalStatus status;
	status = osTimerStart(timer_id, ticks);
 8017e26:	f001 baa3 	b.w	8019370 <osTimerStart>

08017e2a <rtosalTimerStop>:
 * @note   With CMSIS RTOS V1, this function returns osOK if the timer is not started.
 *         With CMSIS RTOS V2, this function returns osErrorResource if the timer is not started.
 */
rtosalStatus rtosalTimerStop(osTimerId timer_id) {
	rtosalStatus status;
	status = osTimerStop(timer_id);
 8017e2a:	f001 bacb 	b.w	80193c4 <osTimerStop>

08017e2e <rtosalDelay>:
 * @param ticks         - "time ticks" value.
 * @retval rtosalStatus - indicate the execution status of the function.
 */
rtosalStatus rtosalDelay(uint32_t ticks) {
	rtosalStatus status;
	status = osDelay(ticks);
 8017e2e:	f001 ba87 	b.w	8019340 <osDelay>

08017e32 <crc_get_ip_addr>:
 * @param  addr      (out) uint8_t[4]   4 bytes of ipp addr
 * @param  port      (out) optional ip port
 * @note             if no port is needed put this parameter to NULL
 * @retval validity of conversion: retval==0 conversion OK /   retval!=0 conversion KO
 */
uint32_t crc_get_ip_addr(uint8_t *string, uint8_t *addr, uint16_t *port) {
 8017e32:	e92d 47e8 	stmdb	sp!, {r3, r5, r6, r7, r8, r9, sl, lr}
 8017e36:	4680      	mov	r8, r0
	uint32_t ret;
	uint32_t offset;
	bool leave;

	ret = 0U;
	offset = 0;
 8017e38:	2000      	movs	r0, #0
uint32_t crc_get_ip_addr(uint8_t *string, uint8_t *addr, uint16_t *port) {
 8017e3a:	460e      	mov	r6, r1
 8017e3c:	4617      	mov	r7, r2
	ret = 0U;
 8017e3e:	4605      	mov	r5, r0

	leave = false;

	/* parse the 4 byte of the IP addr */
	for (i = 0U; (i < 4U) && (leave == false); i++) {
 8017e40:	4681      	mov	r9, r0
		/* parse the digits (max 3) of the IP addr */
		for (j = 0U; j <= CRC_IP_ADDR_DIGIT_SIZE; j++) {
 8017e42:	4603      	mov	r3, r0
			if ((string[j + offset] < (uint8_t) '0')
 8017e44:	eb03 0a00 	add.w	sl, r3, r0
					|| (string[j + offset] > (uint8_t) '9')) {
 8017e48:	f818 200a 	ldrb.w	r2, [r8, sl]
			if ((string[j + offset] < (uint8_t) '0')
 8017e4c:	3a30      	subs	r2, #48	; 0x30
 8017e4e:	2a09      	cmp	r2, #9
 8017e50:	d80b      	bhi.n	8017e6a <crc_get_ip_addr+0x38>
		for (j = 0U; j <= CRC_IP_ADDR_DIGIT_SIZE; j++) {
 8017e52:	3301      	adds	r3, #1
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	2b04      	cmp	r3, #4
 8017e58:	d1f4      	bne.n	8017e44 <crc_get_ip_addr+0x12>
		}

		if ((j == (CRC_IP_ADDR_DIGIT_SIZE + 1U)) || (j == 0U)) {
			/* not a correct addr byte found => return error */
			ret = 1;
			leave = true;
 8017e5a:	2501      	movs	r5, #1
			ret = 1;
 8017e5c:	462b      	mov	r3, r5
 8017e5e:	e012      	b.n	8017e86 <crc_get_ip_addr+0x54>
			if (string[offset - 1U] == (uint8_t) ':') {
				/*  port number separation found => convert port number to integer */
				*port = (uint16_t) crs_atoi(&string[offset]);
			} else {
				/* no port number separation found => no port number */
				*port = 0;
 8017e60:	2300      	movs	r3, #0
 8017e62:	803b      	strh	r3, [r7, #0]
 8017e64:	e02a      	b.n	8017ebc <crc_get_ip_addr+0x8a>
		addr[1] = 0U;
		addr[2] = 0U;
		addr[3] = 0U;
		if (port != NULL) {
			/* set returned port number to 0  */
			*port = 0;
 8017e66:	803b      	strh	r3, [r7, #0]
 8017e68:	e01d      	b.n	8017ea6 <crc_get_ip_addr+0x74>
		if ((j == (CRC_IP_ADDR_DIGIT_SIZE + 1U)) || (j == 0U)) {
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d0f5      	beq.n	8017e5a <crc_get_ip_addr+0x28>
			addr[i] = (uint8_t) crs_atoi(&string[offset]);
 8017e6e:	4440      	add	r0, r8
 8017e70:	f000 f829 	bl	8017ec6 <crs_atoi>
 8017e74:	f806 0009 	strb.w	r0, [r6, r9]
			if (string[offset + j] != (uint8_t) '.') {
 8017e78:	f818 300a 	ldrb.w	r3, [r8, sl]
 8017e7c:	3b2e      	subs	r3, #46	; 0x2e
 8017e7e:	bf18      	it	ne
 8017e80:	2301      	movne	r3, #1
			offset = offset + j + 1U;
 8017e82:	f10a 0001 	add.w	r0, sl, #1
	for (i = 0U; (i < 4U) && (leave == false); i++) {
 8017e86:	f109 0901 	add.w	r9, r9, #1
 8017e8a:	fa5f f989 	uxtb.w	r9, r9
 8017e8e:	f1b9 0f04 	cmp.w	r9, #4
 8017e92:	d00a      	beq.n	8017eaa <crc_get_ip_addr+0x78>
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d0d5      	beq.n	8017e44 <crc_get_ip_addr+0x12>
		addr[0] = 0U;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	7033      	strb	r3, [r6, #0]
		addr[1] = 0U;
 8017e9c:	7073      	strb	r3, [r6, #1]
		addr[2] = 0U;
 8017e9e:	70b3      	strb	r3, [r6, #2]
		addr[3] = 0U;
 8017ea0:	70f3      	strb	r3, [r6, #3]
		if (port != NULL) {
 8017ea2:	2f00      	cmp	r7, #0
 8017ea4:	d1df      	bne.n	8017e66 <crc_get_ip_addr+0x34>
			*port = 0;
 8017ea6:	2501      	movs	r5, #1
		}
	}
	return ret;
 8017ea8:	e00a      	b.n	8017ec0 <crc_get_ip_addr+0x8e>
		if (port != NULL) {
 8017eaa:	b13f      	cbz	r7, 8017ebc <crc_get_ip_addr+0x8a>
			if (string[offset - 1U] == (uint8_t) ':') {
 8017eac:	4440      	add	r0, r8
 8017eae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8017eb2:	2b3a      	cmp	r3, #58	; 0x3a
 8017eb4:	d1d4      	bne.n	8017e60 <crc_get_ip_addr+0x2e>
				*port = (uint16_t) crs_atoi(&string[offset]);
 8017eb6:	f000 f806 	bl	8017ec6 <crs_atoi>
 8017eba:	8038      	strh	r0, [r7, #0]
	if (ret == 1U) {
 8017ebc:	2d00      	cmp	r5, #0
 8017ebe:	d1eb      	bne.n	8017e98 <crc_get_ip_addr+0x66>
}
 8017ec0:	4628      	mov	r0, r5
 8017ec2:	e8bd 87e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, r9, sl, pc}

08017ec6 <crs_atoi>:
/**
 * @brief  convert a ascci number to an integer
 * @param  string  ascii string number to convert
 * @retval result of conversion
 */
int32_t crs_atoi(const uint8_t *string) {
 8017ec6:	b510      	push	{r4, lr}
	bool leave;

	result = 0;
	offset = 0U;

	if (*string == (uint8_t) '-') {
 8017ec8:	7803      	ldrb	r3, [r0, #0]
 8017eca:	2b2d      	cmp	r3, #45	; 0x2d
 8017ecc:	d010      	beq.n	8017ef0 <crs_atoi+0x2a>
		sign = 1;
		offset++;
	} else {
		/* positive number */
		sign = 0;
		if (string[offset] == (uint8_t) '+') {
 8017ece:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
 8017ed2:	4253      	negs	r3, r2
 8017ed4:	4153      	adcs	r3, r2
		sign = 0;
 8017ed6:	2100      	movs	r1, #0
	}

	leave = false;

	/* partsing string while decimal digit are found */
	while (leave == false) {
 8017ed8:	4403      	add	r3, r0
			leave = true;
		} else {
			/* digit found => adding it in the integer result */
			digit8 = string[offset] - (uint8_t) '0';
			digit = (int32_t) digit8;
			result = (10 * result) + digit;
 8017eda:	240a      	movs	r4, #10
	result = 0;
 8017edc:	2000      	movs	r0, #0
		if ((string[offset] < (uint8_t) '0')
 8017ede:	f813 2b01 	ldrb.w	r2, [r3], #1
				|| (string[offset] > (uint8_t) '9')) {
 8017ee2:	3a30      	subs	r2, #48	; 0x30
 8017ee4:	b2d2      	uxtb	r2, r2
		if ((string[offset] < (uint8_t) '0')
 8017ee6:	2a09      	cmp	r2, #9
 8017ee8:	d905      	bls.n	8017ef6 <crs_atoi+0x30>
			offset++;
		}
	}

	if (sign != 0) {
 8017eea:	b101      	cbz	r1, 8017eee <crs_atoi+0x28>
		/* negative number => set the opposite */
		result = -result;
 8017eec:	4240      	negs	r0, r0
	}
	return result;
}
 8017eee:	bd10      	pop	{r4, pc}
		sign = 1;
 8017ef0:	2101      	movs	r1, #1
		offset++;
 8017ef2:	460b      	mov	r3, r1
 8017ef4:	e7f0      	b.n	8017ed8 <crs_atoi+0x12>
			result = (10 * result) + digit;
 8017ef6:	fb04 2000 	mla	r0, r4, r0, r2
			offset++;
 8017efa:	e7f0      	b.n	8017ede <crs_atoi+0x18>

08017efc <crs_atoi_hex>:
	uint32_t offset;

	result = 0;
	offset = 0;

	if (string != NULL) {
 8017efc:	b1c8      	cbz	r0, 8017f32 <crs_atoi_hex+0x36>
 8017efe:	1e41      	subs	r1, r0, #1
	result = 0;
 8017f00:	2000      	movs	r0, #0
		/* partsing string while hexadecimal digit are found */
		while (true) {
			if ((string[offset] >= (uint8_t) '0')
 8017f02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
					&& (string[offset] <= (uint8_t) '9')) {
 8017f06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017f0a:	b2d2      	uxtb	r2, r2
			if ((string[offset] >= (uint8_t) '0')
 8017f0c:	2a09      	cmp	r2, #9
 8017f0e:	d803      	bhi.n	8017f18 <crs_atoi_hex+0x1c>
				/* decimal digit found */
				digit8 = string[offset] - (uint8_t) '0';
				digit = (uint32_t) digit8;
 8017f10:	4613      	mov	r3, r2
				/* not a digit => end of number */
				break;
			}

			/*  adding the current digit in the integer result */
			result = (16 * result) + (int32_t) digit;
 8017f12:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			if ((string[offset] >= (uint8_t) '0')
 8017f16:	e7f4      	b.n	8017f02 <crs_atoi_hex+0x6>
			} else if ((string[offset] >= (uint8_t) 'a')
 8017f18:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017f1c:	2a05      	cmp	r2, #5
 8017f1e:	d802      	bhi.n	8017f26 <crs_atoi_hex+0x2a>
				digit8 = string[offset] - (uint8_t) 'a' + 10U;
 8017f20:	3b57      	subs	r3, #87	; 0x57
				digit = (uint32_t) digit8;
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	e7f5      	b.n	8017f12 <crs_atoi_hex+0x16>
			} else if ((string[offset] >= (uint8_t) 'A')
 8017f26:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017f2a:	2a05      	cmp	r2, #5
 8017f2c:	d801      	bhi.n	8017f32 <crs_atoi_hex+0x36>
				digit8 = string[offset] - (uint8_t) 'A' + 10U;
 8017f2e:	3b37      	subs	r3, #55	; 0x37
 8017f30:	e7f7      	b.n	8017f22 <crs_atoi_hex+0x26>
			offset++;
		}
	}
	return result;
}
 8017f32:	4770      	bx	lr

08017f34 <crs_strlen>:
uint32_t crs_strlen(const uint8_t *string) {
	uint32_t i;
	uint32_t res;
	res = 0;

	if (string != NULL) {
 8017f34:	4603      	mov	r3, r0
 8017f36:	b140      	cbz	r0, 8017f4a <crs_strlen+0x16>
		/* parsing string looking for '0' char */
		for (i = 0U; i < CRS_STRLEN_MAX; i++) {
 8017f38:	2000      	movs	r0, #0
			if (string[i] == 0U) {
 8017f3a:	5c1a      	ldrb	r2, [r3, r0]
 8017f3c:	b12a      	cbz	r2, 8017f4a <crs_strlen+0x16>
		for (i = 0U; i < CRS_STRLEN_MAX; i++) {
 8017f3e:	3001      	adds	r0, #1
 8017f40:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8017f44:	d1f9      	bne.n	8017f3a <crs_strlen+0x6>
	res = 0;
 8017f46:	2000      	movs	r0, #0
 8017f48:	4770      	bx	lr
				break;
			}
		}
	}
	return res;
}
 8017f4a:	4770      	bx	lr

08017f4c <traceIF_uartTransmit>:
 * @brief  Print a trace through UART
 * @param  ptr - pointer on the trace string
 * @param  len - length of the trace string
 * @retval -
 */
static void traceIF_uartTransmit(uint8_t *ptr, uint16_t len) {
 8017f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Mutex is used to avoid trace mixing between components */
	(void) rtosalMutexAcquire(traceIF_uart_mutex, RTOSAL_WAIT_FOREVER);
 8017f4e:	4d0a      	ldr	r5, [pc, #40]	; (8017f78 <traceIF_uartTransmit+0x2c>)
static void traceIF_uartTransmit(uint8_t *ptr, uint16_t len) {
 8017f50:	9101      	str	r1, [sp, #4]
 8017f52:	4604      	mov	r4, r0
	(void) rtosalMutexAcquire(traceIF_uart_mutex, RTOSAL_WAIT_FOREVER);
 8017f54:	f04f 31ff 	mov.w	r1, #4294967295
 8017f58:	6828      	ldr	r0, [r5, #0]
 8017f5a:	f7ff ff38 	bl	8017dce <rtosalMutexAcquire>

	/* Send the trace */
	(void) HAL_UART_Transmit(&TRACE_INTERFACE_UART_HANDLE, (uint8_t*) ptr, len,
 8017f5e:	9a01      	ldr	r2, [sp, #4]
 8017f60:	4806      	ldr	r0, [pc, #24]	; (8017f7c <traceIF_uartTransmit+0x30>)
 8017f62:	f04f 33ff 	mov.w	r3, #4294967295
 8017f66:	4621      	mov	r1, r4
 8017f68:	f7ee ff62 	bl	8006e30 <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	(void) rtosalMutexRelease(traceIF_uart_mutex);
 8017f6c:	6828      	ldr	r0, [r5, #0]
}
 8017f6e:	b003      	add	sp, #12
 8017f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	(void) rtosalMutexRelease(traceIF_uart_mutex);
 8017f74:	f7ff bf2d 	b.w	8017dd2 <rtosalMutexRelease>
 8017f78:	200042f4 	.word	0x200042f4
 8017f7c:	20008614 	.word	0x20008614

08017f80 <ITM_Out>:
	if (port <= 31U) {
 8017f80:	281f      	cmp	r0, #31
 8017f82:	d812      	bhi.n	8017faa <ITM_Out+0x2a>
		tmp_mask = (ITM->TER & (1UL << port));
 8017f84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017f88:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled ? */
 8017f8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8017f90:	07db      	lsls	r3, r3, #31
 8017f92:	d50a      	bpl.n	8017faa <ITM_Out+0x2a>
		tmp_mask = (ITM->TER & (1UL << port));
 8017f94:	2301      	movs	r3, #1
 8017f96:	4083      	lsls	r3, r0
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled ? */
 8017f98:	4213      	tst	r3, r2
 8017f9a:	d006      	beq.n	8017faa <ITM_Out+0x2a>
 8017f9c:	0080      	lsls	r0, r0, #2
 8017f9e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
			while (ITM->PORT[port].u32 == 0UL) {
 8017fa2:	6803      	ldr	r3, [r0, #0]
 8017fa4:	b113      	cbz	r3, 8017fac <ITM_Out+0x2c>
			ITM->PORT[port].u8 = (uint8_t) ch;
 8017fa6:	b2c9      	uxtb	r1, r1
 8017fa8:	7001      	strb	r1, [r0, #0]
}
 8017faa:	4770      	bx	lr
				__NOP();
 8017fac:	bf00      	nop
 8017fae:	e7f8      	b.n	8017fa2 <ITM_Out+0x22>

08017fb0 <traceIF_itmPrint>:
 * @param  lvl - trace level
 * @param  pptr - pointer on the trace
 * @param  len - length of the trace
 * @retval -
 */
void traceIF_itmPrint(uint8_t port, uint8_t lvl, uint8_t *pptr, uint16_t len) {
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	4614      	mov	r4, r2
	/* Is trace enable ? */
	if (traceIF_traceEnable == true) {
 8017fb4:	4a0a      	ldr	r2, [pc, #40]	; (8017fe0 <traceIF_itmPrint+0x30>)
 8017fb6:	7812      	ldrb	r2, [r2, #0]
void traceIF_itmPrint(uint8_t port, uint8_t lvl, uint8_t *pptr, uint16_t len) {
 8017fb8:	4606      	mov	r6, r0
	if (traceIF_traceEnable == true) {
 8017fba:	b14a      	cbz	r2, 8017fd0 <traceIF_itmPrint+0x20>
		/* Is this level of trace activated ? */
		if ((traceIF_Level & lvl) != 0U) {
 8017fbc:	4a09      	ldr	r2, [pc, #36]	; (8017fe4 <traceIF_itmPrint+0x34>)
 8017fbe:	6812      	ldr	r2, [r2, #0]
 8017fc0:	4211      	tst	r1, r2
 8017fc2:	d005      	beq.n	8017fd0 <traceIF_itmPrint+0x20>
			/* Is the trace for this component activated ? */
			if (traceIF_traceComponent[port] != 0U) {
 8017fc4:	4a08      	ldr	r2, [pc, #32]	; (8017fe8 <traceIF_itmPrint+0x38>)
 8017fc6:	5c12      	ldrb	r2, [r2, r0]
 8017fc8:	b112      	cbz	r2, 8017fd0 <traceIF_itmPrint+0x20>
 8017fca:	18e5      	adds	r5, r4, r3
				uint8_t *ptr;
				ptr = pptr;

				/* Print bytes of the trace one by one */
				for (uint16_t i = 0U; i < len; i++) {
 8017fcc:	42a5      	cmp	r5, r4
 8017fce:	d100      	bne.n	8017fd2 <traceIF_itmPrint+0x22>
					ptr++;
				}
			}
		}
	}
}
 8017fd0:	bd70      	pop	{r4, r5, r6, pc}
					ITM_Out((uint32_t) port, (uint32_t) *ptr);
 8017fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fd6:	4630      	mov	r0, r6
 8017fd8:	f7ff ffd2 	bl	8017f80 <ITM_Out>
				for (uint16_t i = 0U; i < len; i++) {
 8017fdc:	e7f6      	b.n	8017fcc <traceIF_itmPrint+0x1c>
 8017fde:	bf00      	nop
 8017fe0:	20000611 	.word	0x20000611
 8017fe4:	20000604 	.word	0x20000604
 8017fe8:	20000608 	.word	0x20000608

08017fec <CMD_ComponentEnableDisable>:
static void CMD_ComponentEnableDisable(uint8_t *component, uint8_t enable) {
 8017fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	460e      	mov	r6, r1
	if (strncmp((CRC_CHAR_t*) component, "all", strlen((CRC_CHAR_t*) component))
 8017ff4:	f7e8 f90e 	bl	8000214 <strlen>
 8017ff8:	491b      	ldr	r1, [pc, #108]	; (8018068 <CMD_ComponentEnableDisable+0x7c>)
 8017ffa:	4607      	mov	r7, r0
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	4620      	mov	r0, r4
 8018000:	f004 ffd2 	bl	801cfa8 <strncmp>
 8018004:	b948      	cbnz	r0, 801801a <CMD_ComponentEnableDisable+0x2e>
 8018006:	4a19      	ldr	r2, [pc, #100]	; (801806c <CMD_ComponentEnableDisable+0x80>)
 8018008:	2309      	movs	r3, #9
			traceIF_traceComponent[i] = enable;
 801800a:	3b01      	subs	r3, #1
		for (i = 0U; i < (uint8_t) DBG_CHAN_MAX_VALUE; i++) {
 801800c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			traceIF_traceComponent[i] = enable;
 8018010:	f802 6b01 	strb.w	r6, [r2], #1
		for (i = 0U; i < (uint8_t) DBG_CHAN_MAX_VALUE; i++) {
 8018014:	d1f9      	bne.n	801800a <CMD_ComponentEnableDisable+0x1e>
}
 8018016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801801a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8018078 <CMD_ComponentEnableDisable+0x8c>
	if (strncmp((CRC_CHAR_t*) component, "all", strlen((CRC_CHAR_t*) component))
 801801e:	2500      	movs	r5, #0
			if (strncmp((CRC_CHAR_t*) component,
 8018020:	f858 1b04 	ldr.w	r1, [r8], #4
 8018024:	463a      	mov	r2, r7
 8018026:	4620      	mov	r0, r4
 8018028:	f004 ffbe 	bl	801cfa8 <strncmp>
 801802c:	b1c8      	cbz	r0, 8018062 <CMD_ComponentEnableDisable+0x76>
		for (i = 0U; i < (uint8_t) DBG_CHAN_MAX_VALUE; i++) {
 801802e:	3501      	adds	r5, #1
 8018030:	2d09      	cmp	r5, #9
 8018032:	d1f5      	bne.n	8018020 <CMD_ComponentEnableDisable+0x34>
			PRINT_FORCE("invalid canal name %s\r\n", component);
 8018034:	4622      	mov	r2, r4
 8018036:	490e      	ldr	r1, [pc, #56]	; (8018070 <CMD_ComponentEnableDisable+0x84>)
 8018038:	480e      	ldr	r0, [pc, #56]	; (8018074 <CMD_ComponentEnableDisable+0x88>)
 801803a:	f004 ff3d 	bl	801ceb8 <sprintf>
 801803e:	480d      	ldr	r0, [pc, #52]	; (8018074 <CMD_ComponentEnableDisable+0x88>)
 8018040:	f7ff ff78 	bl	8017f34 <crs_strlen>
 8018044:	2101      	movs	r1, #1
 8018046:	b283      	uxth	r3, r0
 8018048:	4a0a      	ldr	r2, [pc, #40]	; (8018074 <CMD_ComponentEnableDisable+0x88>)
 801804a:	2005      	movs	r0, #5
 801804c:	f7ff ffb0 	bl	8017fb0 <traceIF_itmPrint>
 8018050:	4808      	ldr	r0, [pc, #32]	; (8018074 <CMD_ComponentEnableDisable+0x88>)
 8018052:	f7ff ff6f 	bl	8017f34 <crs_strlen>
}
 8018056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	uint8_t *ptr;
	ptr = pptr;

	/* Print bytes of the trace */
	traceIF_uartTransmit(ptr, len);
 801805a:	b281      	uxth	r1, r0
 801805c:	4805      	ldr	r0, [pc, #20]	; (8018074 <CMD_ComponentEnableDisable+0x88>)
 801805e:	f7ff bf75 	b.w	8017f4c <traceIF_uartTransmit>
			traceIF_traceComponent[i] = enable;
 8018062:	4b02      	ldr	r3, [pc, #8]	; (801806c <CMD_ComponentEnableDisable+0x80>)
 8018064:	555e      	strb	r6, [r3, r5]
 8018066:	e7d6      	b.n	8018016 <CMD_ComponentEnableDisable+0x2a>
 8018068:	0802bcac 	.word	0x0802bcac
 801806c:	20000608 	.word	0x20000608
 8018070:	0802bcb0 	.word	0x0802bcb0
 8018074:	200092f8 	.word	0x200092f8
 8018078:	0802bf40 	.word	0x0802bf40

0801807c <traceIF_cmd_Help>:
static void traceIF_cmd_Help(void) {
 801807c:	b538      	push	{r3, r4, r5, lr}
	CMD_print_help(trace_cmd_label);
 801807e:	4d4c      	ldr	r5, [pc, #304]	; (80181b0 <traceIF_cmd_Help+0x134>)
	PRINT_FORCE("%s help\r\n", trace_cmd_label);
 8018080:	4c4c      	ldr	r4, [pc, #304]	; (80181b4 <traceIF_cmd_Help+0x138>)
	CMD_print_help(trace_cmd_label);
 8018082:	4628      	mov	r0, r5
 8018084:	f003 fde8 	bl	801bc58 <CMD_print_help>
	PRINT_FORCE("%s help\r\n", trace_cmd_label);
 8018088:	462a      	mov	r2, r5
 801808a:	494b      	ldr	r1, [pc, #300]	; (80181b8 <traceIF_cmd_Help+0x13c>)
 801808c:	4620      	mov	r0, r4
 801808e:	f004 ff13 	bl	801ceb8 <sprintf>
 8018092:	4620      	mov	r0, r4
 8018094:	f7ff ff4e 	bl	8017f34 <crs_strlen>
 8018098:	4622      	mov	r2, r4
 801809a:	b283      	uxth	r3, r0
 801809c:	2101      	movs	r1, #1
 801809e:	2005      	movs	r0, #5
 80180a0:	f7ff ff86 	bl	8017fb0 <traceIF_itmPrint>
 80180a4:	4620      	mov	r0, r4
 80180a6:	f7ff ff45 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80180aa:	b281      	uxth	r1, r0
 80180ac:	4620      	mov	r0, r4
 80180ae:	f7ff ff4d 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE("%s on (activate traces)\r\n", trace_cmd_label);
 80180b2:	462a      	mov	r2, r5
 80180b4:	4941      	ldr	r1, [pc, #260]	; (80181bc <traceIF_cmd_Help+0x140>)
 80180b6:	4620      	mov	r0, r4
 80180b8:	f004 fefe 	bl	801ceb8 <sprintf>
 80180bc:	4620      	mov	r0, r4
 80180be:	f7ff ff39 	bl	8017f34 <crs_strlen>
 80180c2:	4622      	mov	r2, r4
 80180c4:	b283      	uxth	r3, r0
 80180c6:	2101      	movs	r1, #1
 80180c8:	2005      	movs	r0, #5
 80180ca:	f7ff ff71 	bl	8017fb0 <traceIF_itmPrint>
 80180ce:	4620      	mov	r0, r4
 80180d0:	f7ff ff30 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80180d4:	b281      	uxth	r1, r0
 80180d6:	4620      	mov	r0, r4
 80180d8:	f7ff ff38 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE("%s off (deactivate traces)\r\n", trace_cmd_label);
 80180dc:	462a      	mov	r2, r5
 80180de:	4938      	ldr	r1, [pc, #224]	; (80181c0 <traceIF_cmd_Help+0x144>)
 80180e0:	4620      	mov	r0, r4
 80180e2:	f004 fee9 	bl	801ceb8 <sprintf>
 80180e6:	4620      	mov	r0, r4
 80180e8:	f7ff ff24 	bl	8017f34 <crs_strlen>
 80180ec:	4622      	mov	r2, r4
 80180ee:	b283      	uxth	r3, r0
 80180f0:	2101      	movs	r1, #1
 80180f2:	2005      	movs	r0, #5
 80180f4:	f7ff ff5c 	bl	8017fb0 <traceIF_itmPrint>
 80180f8:	4620      	mov	r0, r4
 80180fa:	f7ff ff1b 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80180fe:	b281      	uxth	r1, r0
 8018100:	4620      	mov	r0, r4
 8018102:	f7ff ff23 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE(
 8018106:	462a      	mov	r2, r5
 8018108:	492e      	ldr	r1, [pc, #184]	; (80181c4 <traceIF_cmd_Help+0x148>)
 801810a:	4620      	mov	r0, r4
 801810c:	f004 fed4 	bl	801ceb8 <sprintf>
 8018110:	4620      	mov	r0, r4
 8018112:	f7ff ff0f 	bl	8017f34 <crs_strlen>
 8018116:	4622      	mov	r2, r4
 8018118:	b283      	uxth	r3, r0
 801811a:	2101      	movs	r1, #1
 801811c:	2005      	movs	r0, #5
 801811e:	f7ff ff47 	bl	8017fb0 <traceIF_itmPrint>
 8018122:	4620      	mov	r0, r4
 8018124:	f7ff ff06 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 8018128:	b281      	uxth	r1, r0
 801812a:	4620      	mov	r0, r4
 801812c:	f7ff ff0e 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE(" -> enable traces of selected component\r\n")
 8018130:	4925      	ldr	r1, [pc, #148]	; (80181c8 <traceIF_cmd_Help+0x14c>)
 8018132:	4620      	mov	r0, r4
 8018134:	f004 ff30 	bl	801cf98 <strcpy>
 8018138:	4620      	mov	r0, r4
 801813a:	f7ff fefb 	bl	8017f34 <crs_strlen>
 801813e:	4622      	mov	r2, r4
 8018140:	b283      	uxth	r3, r0
 8018142:	2101      	movs	r1, #1
 8018144:	2005      	movs	r0, #5
 8018146:	f7ff ff33 	bl	8017fb0 <traceIF_itmPrint>
 801814a:	4620      	mov	r0, r4
 801814c:	f7ff fef2 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 8018150:	b281      	uxth	r1, r0
 8018152:	4620      	mov	r0, r4
 8018154:	f7ff fefa 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE(
 8018158:	462a      	mov	r2, r5
 801815a:	491c      	ldr	r1, [pc, #112]	; (80181cc <traceIF_cmd_Help+0x150>)
 801815c:	4620      	mov	r0, r4
 801815e:	f004 feab 	bl	801ceb8 <sprintf>
 8018162:	4620      	mov	r0, r4
 8018164:	f7ff fee6 	bl	8017f34 <crs_strlen>
 8018168:	4622      	mov	r2, r4
 801816a:	b283      	uxth	r3, r0
 801816c:	2101      	movs	r1, #1
 801816e:	2005      	movs	r0, #5
 8018170:	f7ff ff1e 	bl	8017fb0 <traceIF_itmPrint>
 8018174:	4620      	mov	r0, r4
 8018176:	f7ff fedd 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 801817a:	b281      	uxth	r1, r0
 801817c:	4620      	mov	r0, r4
 801817e:	f7ff fee5 	bl	8017f4c <traceIF_uartTransmit>
	PRINT_FORCE(" -> disable traces of selected component\r\n")
 8018182:	4913      	ldr	r1, [pc, #76]	; (80181d0 <traceIF_cmd_Help+0x154>)
 8018184:	4620      	mov	r0, r4
 8018186:	f004 ff07 	bl	801cf98 <strcpy>
 801818a:	4620      	mov	r0, r4
 801818c:	f7ff fed2 	bl	8017f34 <crs_strlen>
 8018190:	4622      	mov	r2, r4
 8018192:	b283      	uxth	r3, r0
 8018194:	2101      	movs	r1, #1
 8018196:	2005      	movs	r0, #5
 8018198:	f7ff ff0a 	bl	8017fb0 <traceIF_itmPrint>
 801819c:	4620      	mov	r0, r4
 801819e:	f7ff fec9 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80181a2:	b281      	uxth	r1, r0
 80181a4:	4620      	mov	r0, r4
}
 80181a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	traceIF_uartTransmit(ptr, len);
 80181aa:	f7ff becf 	b.w	8017f4c <traceIF_uartTransmit>
 80181ae:	bf00      	nop
 80181b0:	0802bcc8 	.word	0x0802bcc8
 80181b4:	200092f8 	.word	0x200092f8
 80181b8:	0802bcce 	.word	0x0802bcce
 80181bc:	0802bcd8 	.word	0x0802bcd8
 80181c0:	0802bcf2 	.word	0x0802bcf2
 80181c4:	0802bd0f 	.word	0x0802bd0f
 80181c8:	0802bd63 	.word	0x0802bd63
 80181cc:	0802bd8d 	.word	0x0802bd8d
 80181d0:	0802bde1 	.word	0x0802bde1

080181d4 <traceIF_cmd>:
static cmd_status_t traceIF_cmd(uint8_t *cmd_line_p) {
 80181d4:	b570      	push	{r4, r5, r6, lr}
	cmd_p = (uint8_t*) strtok((CRC_CHAR_t*) cmd_line_p, " \t");
 80181d6:	4977      	ldr	r1, [pc, #476]	; (80183b4 <traceIF_cmd+0x1e0>)
static cmd_status_t traceIF_cmd(uint8_t *cmd_line_p) {
 80181d8:	b08e      	sub	sp, #56	; 0x38
	cmd_p = (uint8_t*) strtok((CRC_CHAR_t*) cmd_line_p, " \t");
 80181da:	f004 ff21 	bl	801d020 <strtok>
	if (cmd_p != NULL) {
 80181de:	4604      	mov	r4, r0
 80181e0:	2800      	cmp	r0, #0
 80181e2:	d067      	beq.n	80182b4 <traceIF_cmd+0xe0>
		if (strncmp((const CRC_CHAR_t*) cmd_p,
 80181e4:	f7e8 f816 	bl	8000214 <strlen>
 80181e8:	4973      	ldr	r1, [pc, #460]	; (80183b8 <traceIF_cmd+0x1e4>)
 80181ea:	4602      	mov	r2, r0
 80181ec:	4620      	mov	r0, r4
 80181ee:	f004 fedb 	bl	801cfa8 <strncmp>
 80181f2:	2800      	cmp	r0, #0
 80181f4:	f040 80bc 	bne.w	8018370 <traceIF_cmd+0x19c>
				argv_p[argc] = (uint8_t*) strtok(NULL, " \t");
 80181f8:	4e6e      	ldr	r6, [pc, #440]	; (80183b4 <traceIF_cmd+0x1e0>)
 80181fa:	ad04      	add	r5, sp, #16
			for (argc = 0U; argc < 10U; argc++) {
 80181fc:	4604      	mov	r4, r0
				argv_p[argc] = (uint8_t*) strtok(NULL, " \t");
 80181fe:	4631      	mov	r1, r6
 8018200:	2000      	movs	r0, #0
 8018202:	f004 ff0d 	bl	801d020 <strtok>
 8018206:	f845 0b04 	str.w	r0, [r5], #4
				if (argv_p[argc] == NULL) {
 801820a:	b370      	cbz	r0, 801826a <traceIF_cmd+0x96>
			for (argc = 0U; argc < 10U; argc++) {
 801820c:	3401      	adds	r4, #1
 801820e:	2c0a      	cmp	r4, #10
 8018210:	d1f5      	bne.n	80181fe <traceIF_cmd+0x2a>
					|| (strncmp((CRC_CHAR_t*) argv_p[0], "help",
 8018212:	9d04      	ldr	r5, [sp, #16]
 8018214:	4628      	mov	r0, r5
 8018216:	f7e7 fffd 	bl	8000214 <strlen>
 801821a:	4968      	ldr	r1, [pc, #416]	; (80183bc <traceIF_cmd+0x1e8>)
 801821c:	9001      	str	r0, [sp, #4]
 801821e:	4602      	mov	r2, r0
 8018220:	4628      	mov	r0, r5
 8018222:	f004 fec1 	bl	801cfa8 <strncmp>
 8018226:	9a01      	ldr	r2, [sp, #4]
 8018228:	b308      	cbz	r0, 801826e <traceIF_cmd+0x9a>
			else if (strncmp((CRC_CHAR_t*) argv_p[0], "on",
 801822a:	4965      	ldr	r1, [pc, #404]	; (80183c0 <traceIF_cmd+0x1ec>)
 801822c:	9201      	str	r2, [sp, #4]
 801822e:	4628      	mov	r0, r5
 8018230:	f004 feba 	bl	801cfa8 <strncmp>
 8018234:	9a01      	ldr	r2, [sp, #4]
 8018236:	4604      	mov	r4, r0
 8018238:	b9e0      	cbnz	r0, 8018274 <traceIF_cmd+0xa0>
				traceIF_traceEnable = true;
 801823a:	4b62      	ldr	r3, [pc, #392]	; (80183c4 <traceIF_cmd+0x1f0>)
				PRINT_FORCE("\n\r <<< TRACE ACTIVE >>>\n\r")
 801823c:	4962      	ldr	r1, [pc, #392]	; (80183c8 <traceIF_cmd+0x1f4>)
				traceIF_traceEnable = true;
 801823e:	2501      	movs	r5, #1
 8018240:	701d      	strb	r5, [r3, #0]
				PRINT_FORCE("\n\r <<< TRACE INACTIVE >>>\n\r")
 8018242:	4862      	ldr	r0, [pc, #392]	; (80183cc <traceIF_cmd+0x1f8>)
 8018244:	f004 fea8 	bl	801cf98 <strcpy>
 8018248:	4860      	ldr	r0, [pc, #384]	; (80183cc <traceIF_cmd+0x1f8>)
 801824a:	f7ff fe73 	bl	8017f34 <crs_strlen>
 801824e:	4a5f      	ldr	r2, [pc, #380]	; (80183cc <traceIF_cmd+0x1f8>)
 8018250:	b283      	uxth	r3, r0
 8018252:	2101      	movs	r1, #1
 8018254:	2005      	movs	r0, #5
 8018256:	f7ff feab 	bl	8017fb0 <traceIF_itmPrint>
 801825a:	485c      	ldr	r0, [pc, #368]	; (80183cc <traceIF_cmd+0x1f8>)
 801825c:	f7ff fe6a 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 8018260:	b281      	uxth	r1, r0
 8018262:	485a      	ldr	r0, [pc, #360]	; (80183cc <traceIF_cmd+0x1f8>)
 8018264:	f7ff fe72 	bl	8017f4c <traceIF_uartTransmit>
}
 8018268:	e024      	b.n	80182b4 <traceIF_cmd+0xe0>
			if ((argc == 0U)
 801826a:	2c00      	cmp	r4, #0
 801826c:	d1d1      	bne.n	8018212 <traceIF_cmd+0x3e>
				traceIF_cmd_Help();
 801826e:	f7ff ff05 	bl	801807c <traceIF_cmd_Help>
 8018272:	e07d      	b.n	8018370 <traceIF_cmd+0x19c>
			else if (strncmp((CRC_CHAR_t*) argv_p[0], "enable",
 8018274:	4956      	ldr	r1, [pc, #344]	; (80183d0 <traceIF_cmd+0x1fc>)
 8018276:	9201      	str	r2, [sp, #4]
 8018278:	4628      	mov	r0, r5
 801827a:	f004 fe95 	bl	801cfa8 <strncmp>
 801827e:	9a01      	ldr	r2, [sp, #4]
 8018280:	4604      	mov	r4, r0
 8018282:	b9d0      	cbnz	r0, 80182ba <traceIF_cmd+0xe6>
				PRINT_FORCE("\n\r <<< TRACE ENABLE >>>\n\r")
 8018284:	4953      	ldr	r1, [pc, #332]	; (80183d4 <traceIF_cmd+0x200>)
 8018286:	4851      	ldr	r0, [pc, #324]	; (80183cc <traceIF_cmd+0x1f8>)
 8018288:	f004 fe86 	bl	801cf98 <strcpy>
 801828c:	484f      	ldr	r0, [pc, #316]	; (80183cc <traceIF_cmd+0x1f8>)
 801828e:	f7ff fe51 	bl	8017f34 <crs_strlen>
 8018292:	4a4e      	ldr	r2, [pc, #312]	; (80183cc <traceIF_cmd+0x1f8>)
 8018294:	b283      	uxth	r3, r0
 8018296:	2101      	movs	r1, #1
 8018298:	2005      	movs	r0, #5
 801829a:	f7ff fe89 	bl	8017fb0 <traceIF_itmPrint>
 801829e:	484b      	ldr	r0, [pc, #300]	; (80183cc <traceIF_cmd+0x1f8>)
 80182a0:	f7ff fe48 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80182a4:	b281      	uxth	r1, r0
 80182a6:	4849      	ldr	r0, [pc, #292]	; (80183cc <traceIF_cmd+0x1f8>)
 80182a8:	f7ff fe50 	bl	8017f4c <traceIF_uartTransmit>
				CMD_ComponentEnableDisable(argv_p[1], 1);
 80182ac:	2101      	movs	r1, #1
				CMD_ComponentEnableDisable(argv_p[1], 0);
 80182ae:	9805      	ldr	r0, [sp, #20]
 80182b0:	f7ff fe9c 	bl	8017fec <CMD_ComponentEnableDisable>
}
 80182b4:	4620      	mov	r0, r4
 80182b6:	b00e      	add	sp, #56	; 0x38
 80182b8:	bd70      	pop	{r4, r5, r6, pc}
			else if (strncmp((CRC_CHAR_t*) argv_p[0], "disable",
 80182ba:	4947      	ldr	r1, [pc, #284]	; (80183d8 <traceIF_cmd+0x204>)
 80182bc:	9201      	str	r2, [sp, #4]
 80182be:	4628      	mov	r0, r5
 80182c0:	f004 fe72 	bl	801cfa8 <strncmp>
 80182c4:	9a01      	ldr	r2, [sp, #4]
 80182c6:	4604      	mov	r4, r0
 80182c8:	b9a8      	cbnz	r0, 80182f6 <traceIF_cmd+0x122>
				PRINT_FORCE("\n\r <<< TRACE DISABLE >>>\n\r")
 80182ca:	4944      	ldr	r1, [pc, #272]	; (80183dc <traceIF_cmd+0x208>)
 80182cc:	483f      	ldr	r0, [pc, #252]	; (80183cc <traceIF_cmd+0x1f8>)
 80182ce:	f004 fe63 	bl	801cf98 <strcpy>
 80182d2:	483e      	ldr	r0, [pc, #248]	; (80183cc <traceIF_cmd+0x1f8>)
 80182d4:	f7ff fe2e 	bl	8017f34 <crs_strlen>
 80182d8:	4a3c      	ldr	r2, [pc, #240]	; (80183cc <traceIF_cmd+0x1f8>)
 80182da:	b283      	uxth	r3, r0
 80182dc:	2101      	movs	r1, #1
 80182de:	2005      	movs	r0, #5
 80182e0:	f7ff fe66 	bl	8017fb0 <traceIF_itmPrint>
 80182e4:	4839      	ldr	r0, [pc, #228]	; (80183cc <traceIF_cmd+0x1f8>)
 80182e6:	f7ff fe25 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80182ea:	b281      	uxth	r1, r0
 80182ec:	4837      	ldr	r0, [pc, #220]	; (80183cc <traceIF_cmd+0x1f8>)
 80182ee:	f7ff fe2d 	bl	8017f4c <traceIF_uartTransmit>
				CMD_ComponentEnableDisable(argv_p[1], 0);
 80182f2:	4621      	mov	r1, r4
 80182f4:	e7db      	b.n	80182ae <traceIF_cmd+0xda>
			else if (strncmp((CRC_CHAR_t*) argv_p[0], "level",
 80182f6:	493a      	ldr	r1, [pc, #232]	; (80183e0 <traceIF_cmd+0x20c>)
 80182f8:	9201      	str	r2, [sp, #4]
 80182fa:	4628      	mov	r0, r5
 80182fc:	f004 fe54 	bl	801cfa8 <strncmp>
 8018300:	9a01      	ldr	r2, [sp, #4]
 8018302:	2800      	cmp	r0, #0
 8018304:	d136      	bne.n	8018374 <traceIF_cmd+0x1a0>
				PRINT_FORCE("\n\r <<< TRACE LEVEL >>>\n\r")
 8018306:	4937      	ldr	r1, [pc, #220]	; (80183e4 <traceIF_cmd+0x210>)
 8018308:	4830      	ldr	r0, [pc, #192]	; (80183cc <traceIF_cmd+0x1f8>)
 801830a:	f004 fe45 	bl	801cf98 <strcpy>
 801830e:	482f      	ldr	r0, [pc, #188]	; (80183cc <traceIF_cmd+0x1f8>)
 8018310:	f7ff fe10 	bl	8017f34 <crs_strlen>
 8018314:	4a2d      	ldr	r2, [pc, #180]	; (80183cc <traceIF_cmd+0x1f8>)
 8018316:	b283      	uxth	r3, r0
 8018318:	2101      	movs	r1, #1
 801831a:	2005      	movs	r0, #5
 801831c:	f7ff fe48 	bl	8017fb0 <traceIF_itmPrint>
 8018320:	482a      	ldr	r0, [pc, #168]	; (80183cc <traceIF_cmd+0x1f8>)
 8018322:	f7ff fe07 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 8018326:	b281      	uxth	r1, r0
 8018328:	4828      	ldr	r0, [pc, #160]	; (80183cc <traceIF_cmd+0x1f8>)
 801832a:	f7ff fe0f 	bl	8017f4c <traceIF_uartTransmit>
				ret = CMD_GetValue(argv_p[1], (uint32_t*) &level);
 801832e:	9a05      	ldr	r2, [sp, #20]
 8018330:	9201      	str	r2, [sp, #4]
 8018332:	4610      	mov	r0, r2
 8018334:	a903      	add	r1, sp, #12
 8018336:	f003 fc1d 	bl	801bb74 <CMD_GetValue>
				if (ret != 0U) {
 801833a:	9a01      	ldr	r2, [sp, #4]
 801833c:	b1a8      	cbz	r0, 801836a <traceIF_cmd+0x196>
					PRINT_FORCE("invalid level %s\r\n", argv_p[1]);
 801833e:	492a      	ldr	r1, [pc, #168]	; (80183e8 <traceIF_cmd+0x214>)
 8018340:	4822      	ldr	r0, [pc, #136]	; (80183cc <traceIF_cmd+0x1f8>)
 8018342:	f004 fdb9 	bl	801ceb8 <sprintf>
 8018346:	4821      	ldr	r0, [pc, #132]	; (80183cc <traceIF_cmd+0x1f8>)
 8018348:	f7ff fdf4 	bl	8017f34 <crs_strlen>
 801834c:	4a1f      	ldr	r2, [pc, #124]	; (80183cc <traceIF_cmd+0x1f8>)
 801834e:	b283      	uxth	r3, r0
 8018350:	2101      	movs	r1, #1
 8018352:	2005      	movs	r0, #5
 8018354:	f7ff fe2c 	bl	8017fb0 <traceIF_itmPrint>
 8018358:	481c      	ldr	r0, [pc, #112]	; (80183cc <traceIF_cmd+0x1f8>)
 801835a:	f7ff fdeb 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 801835e:	b281      	uxth	r1, r0
 8018360:	481a      	ldr	r0, [pc, #104]	; (80183cc <traceIF_cmd+0x1f8>)
 8018362:	f7ff fdf3 	bl	8017f4c <traceIF_uartTransmit>
					cmd_status = CMD_SYNTAX_ERROR;
 8018366:	2401      	movs	r4, #1
 8018368:	e7a4      	b.n	80182b4 <traceIF_cmd+0xe0>
					traceIF_Level = level;
 801836a:	4b20      	ldr	r3, [pc, #128]	; (80183ec <traceIF_cmd+0x218>)
 801836c:	9a03      	ldr	r2, [sp, #12]
 801836e:	601a      	str	r2, [r3, #0]
	cmd_status = CMD_OK;
 8018370:	2400      	movs	r4, #0
 8018372:	e79f      	b.n	80182b4 <traceIF_cmd+0xe0>
			else if (strncmp((CRC_CHAR_t*) argv_p[0], "off",
 8018374:	491e      	ldr	r1, [pc, #120]	; (80183f0 <traceIF_cmd+0x21c>)
 8018376:	4628      	mov	r0, r5
 8018378:	f004 fe16 	bl	801cfa8 <strncmp>
 801837c:	4604      	mov	r4, r0
 801837e:	b918      	cbnz	r0, 8018388 <traceIF_cmd+0x1b4>
				traceIF_traceEnable = false;
 8018380:	4b10      	ldr	r3, [pc, #64]	; (80183c4 <traceIF_cmd+0x1f0>)
				PRINT_FORCE("\n\r <<< TRACE INACTIVE >>>\n\r")
 8018382:	491c      	ldr	r1, [pc, #112]	; (80183f4 <traceIF_cmd+0x220>)
				traceIF_traceEnable = false;
 8018384:	7018      	strb	r0, [r3, #0]
				PRINT_FORCE("\n\r <<< TRACE INACTIVE >>>\n\r")
 8018386:	e75c      	b.n	8018242 <traceIF_cmd+0x6e>
				PRINT_FORCE("\n\rTRACE usage\n\r")
 8018388:	491b      	ldr	r1, [pc, #108]	; (80183f8 <traceIF_cmd+0x224>)
 801838a:	4810      	ldr	r0, [pc, #64]	; (80183cc <traceIF_cmd+0x1f8>)
 801838c:	f004 fe04 	bl	801cf98 <strcpy>
 8018390:	480e      	ldr	r0, [pc, #56]	; (80183cc <traceIF_cmd+0x1f8>)
 8018392:	f7ff fdcf 	bl	8017f34 <crs_strlen>
 8018396:	4a0d      	ldr	r2, [pc, #52]	; (80183cc <traceIF_cmd+0x1f8>)
 8018398:	b283      	uxth	r3, r0
 801839a:	2101      	movs	r1, #1
 801839c:	2005      	movs	r0, #5
 801839e:	f7ff fe07 	bl	8017fb0 <traceIF_itmPrint>
 80183a2:	480a      	ldr	r0, [pc, #40]	; (80183cc <traceIF_cmd+0x1f8>)
 80183a4:	f7ff fdc6 	bl	8017f34 <crs_strlen>
	traceIF_uartTransmit(ptr, len);
 80183a8:	b281      	uxth	r1, r0
 80183aa:	4808      	ldr	r0, [pc, #32]	; (80183cc <traceIF_cmd+0x1f8>)
 80183ac:	f7ff fdce 	bl	8017f4c <traceIF_uartTransmit>
 80183b0:	e75d      	b.n	801826e <traceIF_cmd+0x9a>
 80183b2:	bf00      	nop
 80183b4:	08028e19 	.word	0x08028e19
 80183b8:	0802bcc8 	.word	0x0802bcc8
 80183bc:	08028e1c 	.word	0x08028e1c
 80183c0:	080291e1 	.word	0x080291e1
 80183c4:	20000611 	.word	0x20000611
 80183c8:	0802be0c 	.word	0x0802be0c
 80183cc:	200092f8 	.word	0x200092f8
 80183d0:	0802be26 	.word	0x0802be26
 80183d4:	0802be2d 	.word	0x0802be2d
 80183d8:	0802be47 	.word	0x0802be47
 80183dc:	0802be4f 	.word	0x0802be4f
 80183e0:	0802be6a 	.word	0x0802be6a
 80183e4:	0802be70 	.word	0x0802be70
 80183e8:	0802be89 	.word	0x0802be89
 80183ec:	20000604 	.word	0x20000604
 80183f0:	080292b8 	.word	0x080292b8
 80183f4:	0802be9c 	.word	0x0802be9c
 80183f8:	0802beb8 	.word	0x0802beb8

080183fc <traceIF_uartPrint>:
void traceIF_uartPrint(uint8_t port, uint8_t lvl, uint8_t *pptr, uint16_t len) {
 80183fc:	b430      	push	{r4, r5}
 80183fe:	460d      	mov	r5, r1
 8018400:	4619      	mov	r1, r3
	if (traceIF_traceEnable == true) {
 8018402:	4b08      	ldr	r3, [pc, #32]	; (8018424 <traceIF_uartPrint+0x28>)
 8018404:	781b      	ldrb	r3, [r3, #0]
void traceIF_uartPrint(uint8_t port, uint8_t lvl, uint8_t *pptr, uint16_t len) {
 8018406:	4604      	mov	r4, r0
 8018408:	4610      	mov	r0, r2
	if (traceIF_traceEnable == true) {
 801840a:	b14b      	cbz	r3, 8018420 <traceIF_uartPrint+0x24>
		if ((traceIF_Level & lvl) != 0U) {
 801840c:	4b06      	ldr	r3, [pc, #24]	; (8018428 <traceIF_uartPrint+0x2c>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	421d      	tst	r5, r3
 8018412:	d005      	beq.n	8018420 <traceIF_uartPrint+0x24>
			if (traceIF_traceComponent[port] != 0U) {
 8018414:	4b05      	ldr	r3, [pc, #20]	; (801842c <traceIF_uartPrint+0x30>)
 8018416:	5d1b      	ldrb	r3, [r3, r4]
 8018418:	b113      	cbz	r3, 8018420 <traceIF_uartPrint+0x24>
}
 801841a:	bc30      	pop	{r4, r5}
				traceIF_uartTransmit(ptr, len);
 801841c:	f7ff bd96 	b.w	8017f4c <traceIF_uartTransmit>
}
 8018420:	bc30      	pop	{r4, r5}
 8018422:	4770      	bx	lr
 8018424:	20000611 	.word	0x20000611
 8018428:	20000604 	.word	0x20000604
 801842c:	20000608 	.word	0x20000608

08018430 <traceIF_uartPrintForce>:
void traceIF_uartPrintForce(uint8_t port, uint8_t *pptr, uint16_t len) {
 8018430:	4608      	mov	r0, r1
	traceIF_uartTransmit(ptr, len);
 8018432:	4611      	mov	r1, r2
 8018434:	f7ff bd8a 	b.w	8017f4c <traceIF_uartTransmit>

08018438 <traceIF_BufCharPrint>:
 * @param  buf   - pointer on the trace
 * @param  size  - size of the trace
 * @retval -
 */
void traceIF_BufCharPrint(dbg_channels_t chan, dbg_levels_t level,
		const CRC_CHAR_t *buf, uint16_t size) {
 8018438:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			TRACE_PRINT(chan, level, "%c", buf[cpt])
		} else {
#if defined(USER_FLAG_TRACE_NO_SPECIAL_CHAR)
#else
			/* Special Character - not printable */
			TRACE_PRINT(chan, level, "<SC>")
 801843c:	4c2c      	ldr	r4, [pc, #176]	; (80184f0 <traceIF_BufCharPrint+0xb8>)
 801843e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8018504 <traceIF_BufCharPrint+0xcc>
			TRACE_PRINT(chan, level, "%c", buf[cpt])
 8018442:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018508 <traceIF_BufCharPrint+0xd0>
			TRACE_PRINT(chan, level, "<CTRL-Z>")
 8018446:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801850c <traceIF_BufCharPrint+0xd4>
		const CRC_CHAR_t *buf, uint16_t size) {
 801844a:	4605      	mov	r5, r0
 801844c:	460e      	mov	r6, r1
			TRACE_PRINT(chan, level, "<SC>")
 801844e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8018452:	4617      	mov	r7, r2
 8018454:	eb02 0803 	add.w	r8, r2, r3
	for (uint16_t cpt = 0U; cpt < size; cpt++) {
 8018458:	4547      	cmp	r7, r8
 801845a:	d118      	bne.n	801848e <traceIF_BufCharPrint+0x56>
#endif /* defined(USER_FLAG_TRACE_NO_SPECIAL_CHAR) */
		}
	}

	/* Force to go to next line to prepare next trace */
	TRACE_PRINT(chan, level, "\n\r")
 801845c:	4925      	ldr	r1, [pc, #148]	; (80184f4 <traceIF_BufCharPrint+0xbc>)
 801845e:	4620      	mov	r0, r4
 8018460:	f004 fd9a 	bl	801cf98 <strcpy>
 8018464:	4620      	mov	r0, r4
 8018466:	f7ff fd65 	bl	8017f34 <crs_strlen>
 801846a:	4622      	mov	r2, r4
 801846c:	b283      	uxth	r3, r0
 801846e:	4631      	mov	r1, r6
 8018470:	4628      	mov	r0, r5
 8018472:	f7ff fd9d 	bl	8017fb0 <traceIF_itmPrint>
 8018476:	4620      	mov	r0, r4
 8018478:	f7ff fd5c 	bl	8017f34 <crs_strlen>
 801847c:	4622      	mov	r2, r4
 801847e:	b283      	uxth	r3, r0
 8018480:	4631      	mov	r1, r6
 8018482:	4628      	mov	r0, r5
}
 8018484:	b001      	add	sp, #4
 8018486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TRACE_PRINT(chan, level, "\n\r")
 801848a:	f7ff bfb7 	b.w	80183fc <traceIF_uartPrint>
		if (buf[cpt] == (CRC_CHAR_t) 0) {
 801848e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8018492:	b922      	cbnz	r2, 801849e <traceIF_BufCharPrint+0x66>
			TRACE_PRINT(chan, level, "<NULL CHAR>")
 8018494:	4918      	ldr	r1, [pc, #96]	; (80184f8 <traceIF_BufCharPrint+0xc0>)
			TRACE_PRINT(chan, level, "<SC>")
 8018496:	4620      	mov	r0, r4
 8018498:	f004 fd7e 	bl	801cf98 <strcpy>
 801849c:	e013      	b.n	80184c6 <traceIF_BufCharPrint+0x8e>
		} else if (buf[cpt] == '\r') {
 801849e:	2a0d      	cmp	r2, #13
 80184a0:	d101      	bne.n	80184a6 <traceIF_BufCharPrint+0x6e>
			TRACE_PRINT(chan, level, "<CR>")
 80184a2:	4916      	ldr	r1, [pc, #88]	; (80184fc <traceIF_BufCharPrint+0xc4>)
 80184a4:	e7f7      	b.n	8018496 <traceIF_BufCharPrint+0x5e>
		} else if (buf[cpt] == '\n') {
 80184a6:	2a0a      	cmp	r2, #10
 80184a8:	d101      	bne.n	80184ae <traceIF_BufCharPrint+0x76>
			TRACE_PRINT(chan, level, "<LF>")
 80184aa:	4915      	ldr	r1, [pc, #84]	; (8018500 <traceIF_BufCharPrint+0xc8>)
 80184ac:	e7f3      	b.n	8018496 <traceIF_BufCharPrint+0x5e>
		} else if (buf[cpt] == (CRC_CHAR_t) 0x1A) {
 80184ae:	2a1a      	cmp	r2, #26
 80184b0:	d101      	bne.n	80184b6 <traceIF_BufCharPrint+0x7e>
			TRACE_PRINT(chan, level, "<CTRL-Z>")
 80184b2:	4659      	mov	r1, fp
 80184b4:	e7ef      	b.n	8018496 <traceIF_BufCharPrint+0x5e>
		} else if ((buf[cpt] >= (CRC_CHAR_t) 0x20)
 80184b6:	f1a2 0320 	sub.w	r3, r2, #32
 80184ba:	2b5e      	cmp	r3, #94	; 0x5e
 80184bc:	d816      	bhi.n	80184ec <traceIF_BufCharPrint+0xb4>
			TRACE_PRINT(chan, level, "%c", buf[cpt])
 80184be:	4651      	mov	r1, sl
 80184c0:	4620      	mov	r0, r4
 80184c2:	f004 fcf9 	bl	801ceb8 <sprintf>
			TRACE_PRINT(chan, level, "<SC>")
 80184c6:	4620      	mov	r0, r4
 80184c8:	f7ff fd34 	bl	8017f34 <crs_strlen>
 80184cc:	4622      	mov	r2, r4
 80184ce:	b283      	uxth	r3, r0
 80184d0:	4631      	mov	r1, r6
 80184d2:	4628      	mov	r0, r5
 80184d4:	f7ff fd6c 	bl	8017fb0 <traceIF_itmPrint>
 80184d8:	4620      	mov	r0, r4
 80184da:	f7ff fd2b 	bl	8017f34 <crs_strlen>
 80184de:	4622      	mov	r2, r4
 80184e0:	b283      	uxth	r3, r0
 80184e2:	4631      	mov	r1, r6
 80184e4:	4628      	mov	r0, r5
 80184e6:	f7ff ff89 	bl	80183fc <traceIF_uartPrint>
	for (uint16_t cpt = 0U; cpt < size; cpt++) {
 80184ea:	e7b5      	b.n	8018458 <traceIF_BufCharPrint+0x20>
			TRACE_PRINT(chan, level, "<SC>")
 80184ec:	4649      	mov	r1, r9
 80184ee:	e7d2      	b.n	8018496 <traceIF_BufCharPrint+0x5e>
 80184f0:	20008df8 	.word	0x20008df8
 80184f4:	080246fe 	.word	0x080246fe
 80184f8:	0802bec8 	.word	0x0802bec8
 80184fc:	0802bed4 	.word	0x0802bed4
 8018500:	0802bed9 	.word	0x0802bed9
 8018504:	0802beea 	.word	0x0802beea
 8018508:	0802bee7 	.word	0x0802bee7
 801850c:	0802bede 	.word	0x0802bede

08018510 <traceIF_BufHexPrint>:
 * @param  buf   - pointer on the trace
 * @param  size  - size of the trace
 * @retval -
 */
void traceIF_BufHexPrint(dbg_channels_t chan, dbg_levels_t level,
		const CRC_CHAR_t *buf, uint16_t size) {
 8018510:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t cpt = 0U; cpt < size; cpt++) {
		/* Print bytes one per one */
		TRACE_PRINT(chan, level, "0x%02x ", (uint8_t ) buf[cpt])
 8018514:	4c2d      	ldr	r4, [pc, #180]	; (80185cc <traceIF_BufHexPrint+0xbc>)
 8018516:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80185d4 <traceIF_BufHexPrint+0xc4>

		/* Print only 16 bytes on same line */
		if ((cpt != 0U) && (((cpt + 1U) % 16U) == 0U)) {
			/* Force to go to next line to prepare next trace */
			TRACE_PRINT(chan, level, "\n\r")
 801851a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80185d0 <traceIF_BufHexPrint+0xc0>
		const CRC_CHAR_t *buf, uint16_t size) {
 801851e:	4605      	mov	r5, r0
 8018520:	460e      	mov	r6, r1
 8018522:	4691      	mov	r9, r2
 8018524:	4698      	mov	r8, r3
		TRACE_PRINT(chan, level, "0x%02x ", (uint8_t ) buf[cpt])
 8018526:	eb04 2400 	add.w	r4, r4, r0, lsl #8
	for (uint16_t cpt = 0U; cpt < size; cpt++) {
 801852a:	2700      	movs	r7, #0
 801852c:	4547      	cmp	r7, r8
 801852e:	d118      	bne.n	8018562 <traceIF_BufHexPrint+0x52>
		}
	}

	/* Force to go to next line to prepare next trace */
	TRACE_PRINT(chan, level, "\n\r")
 8018530:	4927      	ldr	r1, [pc, #156]	; (80185d0 <traceIF_BufHexPrint+0xc0>)
 8018532:	4620      	mov	r0, r4
 8018534:	f004 fd30 	bl	801cf98 <strcpy>
 8018538:	4620      	mov	r0, r4
 801853a:	f7ff fcfb 	bl	8017f34 <crs_strlen>
 801853e:	4622      	mov	r2, r4
 8018540:	b283      	uxth	r3, r0
 8018542:	4631      	mov	r1, r6
 8018544:	4628      	mov	r0, r5
 8018546:	f7ff fd33 	bl	8017fb0 <traceIF_itmPrint>
 801854a:	4620      	mov	r0, r4
 801854c:	f7ff fcf2 	bl	8017f34 <crs_strlen>
 8018550:	4622      	mov	r2, r4
 8018552:	b283      	uxth	r3, r0
 8018554:	4631      	mov	r1, r6
 8018556:	4628      	mov	r0, r5
}
 8018558:	b001      	add	sp, #4
 801855a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TRACE_PRINT(chan, level, "\n\r")
 801855e:	f7ff bf4d 	b.w	80183fc <traceIF_uartPrint>
		TRACE_PRINT(chan, level, "0x%02x ", (uint8_t ) buf[cpt])
 8018562:	f819 2007 	ldrb.w	r2, [r9, r7]
 8018566:	4651      	mov	r1, sl
 8018568:	4620      	mov	r0, r4
 801856a:	f004 fca5 	bl	801ceb8 <sprintf>
 801856e:	4620      	mov	r0, r4
 8018570:	f7ff fce0 	bl	8017f34 <crs_strlen>
 8018574:	4622      	mov	r2, r4
 8018576:	b283      	uxth	r3, r0
 8018578:	4631      	mov	r1, r6
 801857a:	4628      	mov	r0, r5
 801857c:	f7ff fd18 	bl	8017fb0 <traceIF_itmPrint>
 8018580:	4620      	mov	r0, r4
 8018582:	f7ff fcd7 	bl	8017f34 <crs_strlen>
 8018586:	4622      	mov	r2, r4
 8018588:	b283      	uxth	r3, r0
 801858a:	4631      	mov	r1, r6
 801858c:	4628      	mov	r0, r5
 801858e:	f7ff ff35 	bl	80183fc <traceIF_uartPrint>
		if ((cpt != 0U) && (((cpt + 1U) % 16U) == 0U)) {
 8018592:	b2bb      	uxth	r3, r7
 8018594:	3701      	adds	r7, #1
 8018596:	2b00      	cmp	r3, #0
 8018598:	d0c8      	beq.n	801852c <traceIF_BufHexPrint+0x1c>
 801859a:	073b      	lsls	r3, r7, #28
 801859c:	d1c6      	bne.n	801852c <traceIF_BufHexPrint+0x1c>
			TRACE_PRINT(chan, level, "\n\r")
 801859e:	4659      	mov	r1, fp
 80185a0:	4620      	mov	r0, r4
 80185a2:	f004 fcf9 	bl	801cf98 <strcpy>
 80185a6:	4620      	mov	r0, r4
 80185a8:	f7ff fcc4 	bl	8017f34 <crs_strlen>
 80185ac:	4622      	mov	r2, r4
 80185ae:	b283      	uxth	r3, r0
 80185b0:	4631      	mov	r1, r6
 80185b2:	4628      	mov	r0, r5
 80185b4:	f7ff fcfc 	bl	8017fb0 <traceIF_itmPrint>
 80185b8:	4620      	mov	r0, r4
 80185ba:	f7ff fcbb 	bl	8017f34 <crs_strlen>
 80185be:	4622      	mov	r2, r4
 80185c0:	b283      	uxth	r3, r0
 80185c2:	4631      	mov	r1, r6
 80185c4:	4628      	mov	r0, r5
 80185c6:	f7ff ff19 	bl	80183fc <traceIF_uartPrint>
	for (uint16_t cpt = 0U; cpt < size; cpt++) {
 80185ca:	e7af      	b.n	801852c <traceIF_BufHexPrint+0x1c>
 80185cc:	20008df8 	.word	0x20008df8
 80185d0:	080246fe 	.word	0x080246fe
 80185d4:	0802beef 	.word	0x0802beef

080185d8 <traceIF_init>:
 * @note   must be called only one time :
 *         - before using any other functions of traceIF_*
 * @param  -
 * @retval -
 */
void traceIF_init(void) {
 80185d8:	b510      	push	{r4, lr}
	/* Multi call protection */
	if (traceIF_uart_mutex == NULL) {
 80185da:	4c03      	ldr	r4, [pc, #12]	; (80185e8 <traceIF_init+0x10>)
 80185dc:	6820      	ldr	r0, [r4, #0]
 80185de:	b910      	cbnz	r0, 80185e6 <traceIF_init+0xe>
		traceIF_uart_mutex = rtosalMutexNew(NULL);
 80185e0:	f7ff fbec 	bl	8017dbc <rtosalMutexNew>
 80185e4:	6020      	str	r0, [r4, #0]
	}
}
 80185e6:	bd10      	pop	{r4, pc}
 80185e8:	200042f4 	.word	0x200042f4

080185ec <traceIF_start>:
 */
void traceIF_start(void) {
#if (USE_CMD_CONSOLE == 1)
#if (SW_DEBUG_VERSION == 1)
	/* Registration to cmd module to support cmd 'trace' */
	CMD_Declare((uint8_t*) "trace", traceIF_cmd, (uint8_t*) "trace management");
 80185ec:	4a02      	ldr	r2, [pc, #8]	; (80185f8 <traceIF_start+0xc>)
 80185ee:	4903      	ldr	r1, [pc, #12]	; (80185fc <traceIF_start+0x10>)
 80185f0:	4803      	ldr	r0, [pc, #12]	; (8018600 <traceIF_start+0x14>)
 80185f2:	f003 badd 	b.w	801bbb0 <CMD_Declare>
 80185f6:	bf00      	nop
 80185f8:	0802bef7 	.word	0x0802bef7
 80185fc:	080181d5 	.word	0x080181d5
 8018600:	0802bcc8 	.word	0x0802bcc8

08018604 <com_core_cmd_help>:
 * @brief  console cmd help
 * @param  -
 * @note   -
 * @retval -
 */
static void com_core_cmd_help(void) {
 8018604:	b510      	push	{r4, lr}
	CMD_print_help((uint8_t*) "comlib");
	PRINT_FORCE("comlib help")
 8018606:	4c18      	ldr	r4, [pc, #96]	; (8018668 <com_core_cmd_help+0x64>)
	CMD_print_help((uint8_t*) "comlib");
 8018608:	4818      	ldr	r0, [pc, #96]	; (801866c <com_core_cmd_help+0x68>)
 801860a:	f003 fb25 	bl	801bc58 <CMD_print_help>
	PRINT_FORCE("comlib help")
 801860e:	4918      	ldr	r1, [pc, #96]	; (8018670 <com_core_cmd_help+0x6c>)
 8018610:	4620      	mov	r0, r4
 8018612:	f004 fcc1 	bl	801cf98 <strcpy>
 8018616:	4620      	mov	r0, r4
 8018618:	f7ff fc8c 	bl	8017f34 <crs_strlen>
 801861c:	4622      	mov	r2, r4
 801861e:	b283      	uxth	r3, r0
 8018620:	2101      	movs	r1, #1
 8018622:	2003      	movs	r0, #3
 8018624:	f7ff fcc4 	bl	8017fb0 <traceIF_itmPrint>
 8018628:	4620      	mov	r0, r4
 801862a:	f7ff fc83 	bl	8017f34 <crs_strlen>
 801862e:	4621      	mov	r1, r4
 8018630:	b282      	uxth	r2, r0
 8018632:	2003      	movs	r0, #3
 8018634:	f7ff fefc 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("comlib stat : display com statitistics\n\r")
 8018638:	490e      	ldr	r1, [pc, #56]	; (8018674 <com_core_cmd_help+0x70>)
 801863a:	4620      	mov	r0, r4
 801863c:	f004 fcac 	bl	801cf98 <strcpy>
 8018640:	4620      	mov	r0, r4
 8018642:	f7ff fc77 	bl	8017f34 <crs_strlen>
 8018646:	4622      	mov	r2, r4
 8018648:	b283      	uxth	r3, r0
 801864a:	2101      	movs	r1, #1
 801864c:	2003      	movs	r0, #3
 801864e:	f7ff fcaf 	bl	8017fb0 <traceIF_itmPrint>
 8018652:	4620      	mov	r0, r4
 8018654:	f7ff fc6e 	bl	8017f34 <crs_strlen>
 8018658:	4621      	mov	r1, r4
 801865a:	b282      	uxth	r2, r0
}
 801865c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PRINT_FORCE("comlib stat : display com statitistics\n\r")
 8018660:	2003      	movs	r0, #3
 8018662:	f7ff bee5 	b.w	8018430 <traceIF_uartPrintForce>
 8018666:	bf00      	nop
 8018668:	200090f8 	.word	0x200090f8
 801866c:	0802bf1e 	.word	0x0802bf1e
 8018670:	0802bf64 	.word	0x0802bf64
 8018674:	0802bf72 	.word	0x0802bf72

08018678 <com_core_cmd>:
/**
 * @brief  cmd management
 * @param  p_cmd_line - pointer on command parameters
 * @retval cmd_status_t - status of cmd management CMD_OK or CMD_SYNTAX_ERROR
 */
static cmd_status_t com_core_cmd(uint8_t *p_cmd_line) {
 8018678:	b570      	push	{r4, r5, r6, lr}
	uint32_t argc;
	uint32_t len;
	uint8_t *p_argv[COM_CORE_CMD_ARG_MAX_NB];
	const uint8_t *p_cmd;

	PRINT_FORCE("")
 801867a:	4935      	ldr	r1, [pc, #212]	; (8018750 <com_core_cmd+0xd8>)
static cmd_status_t com_core_cmd(uint8_t *p_cmd_line) {
 801867c:	b088      	sub	sp, #32
 801867e:	4604      	mov	r4, r0
	PRINT_FORCE("")
 8018680:	4834      	ldr	r0, [pc, #208]	; (8018754 <com_core_cmd+0xdc>)
 8018682:	f004 fc89 	bl	801cf98 <strcpy>
 8018686:	4833      	ldr	r0, [pc, #204]	; (8018754 <com_core_cmd+0xdc>)
 8018688:	f7ff fc54 	bl	8017f34 <crs_strlen>
 801868c:	4a31      	ldr	r2, [pc, #196]	; (8018754 <com_core_cmd+0xdc>)
 801868e:	b283      	uxth	r3, r0
 8018690:	2101      	movs	r1, #1
 8018692:	2003      	movs	r0, #3
 8018694:	f7ff fc8c 	bl	8017fb0 <traceIF_itmPrint>
 8018698:	482e      	ldr	r0, [pc, #184]	; (8018754 <com_core_cmd+0xdc>)
 801869a:	f7ff fc4b 	bl	8017f34 <crs_strlen>
 801869e:	492d      	ldr	r1, [pc, #180]	; (8018754 <com_core_cmd+0xdc>)
 80186a0:	b282      	uxth	r2, r0
 80186a2:	2003      	movs	r0, #3
 80186a4:	f7ff fec4 	bl	8018430 <traceIF_uartPrintForce>
	p_cmd = (uint8_t*) strtok((CRC_CHAR_t*) p_cmd_line, " \t");
 80186a8:	4620      	mov	r0, r4
 80186aa:	492b      	ldr	r1, [pc, #172]	; (8018758 <com_core_cmd+0xe0>)
 80186ac:	f004 fcb8 	bl	801d020 <strtok>

	if (p_cmd != NULL) {
 80186b0:	4604      	mov	r4, r0
 80186b2:	b908      	cbnz	r0, 80186b8 <com_core_cmd+0x40>
	cmd_status_t result = CMD_SYNTAX_ERROR;
 80186b4:	2001      	movs	r0, #1
					com_core_cmd_help();
				}
			}
		}
	}
	return (result);
 80186b6:	e025      	b.n	8018704 <com_core_cmd+0x8c>
		if (memcmp((const CRC_CHAR_t*) p_cmd, "comlib", crs_strlen(p_cmd))
 80186b8:	f7ff fc3c 	bl	8017f34 <crs_strlen>
 80186bc:	4927      	ldr	r1, [pc, #156]	; (801875c <com_core_cmd+0xe4>)
 80186be:	4602      	mov	r2, r0
 80186c0:	4620      	mov	r0, r4
 80186c2:	f004 fbad 	bl	801ce20 <memcmp>
 80186c6:	2800      	cmp	r0, #0
 80186c8:	d1f4      	bne.n	80186b4 <com_core_cmd+0x3c>
				p_argv[argc] = (uint8_t*) strtok(NULL, " \t");
 80186ca:	4e23      	ldr	r6, [pc, #140]	; (8018758 <com_core_cmd+0xe0>)
 80186cc:	ad03      	add	r5, sp, #12
			for (argc = 0U; argc < COM_CORE_CMD_ARG_MAX_NB; argc++) {
 80186ce:	4604      	mov	r4, r0
				p_argv[argc] = (uint8_t*) strtok(NULL, " \t");
 80186d0:	4631      	mov	r1, r6
 80186d2:	2000      	movs	r0, #0
 80186d4:	f004 fca4 	bl	801d020 <strtok>
 80186d8:	f845 0b04 	str.w	r0, [r5], #4
				if (p_argv[argc] == NULL) {
 80186dc:	b1a0      	cbz	r0, 8018708 <com_core_cmd+0x90>
			for (argc = 0U; argc < COM_CORE_CMD_ARG_MAX_NB; argc++) {
 80186de:	3401      	adds	r4, #1
 80186e0:	2c05      	cmp	r4, #5
 80186e2:	d1f5      	bne.n	80186d0 <com_core_cmd+0x58>
				len = crs_strlen(p_argv[0]);
 80186e4:	9d03      	ldr	r5, [sp, #12]
 80186e6:	4628      	mov	r0, r5
 80186e8:	f7ff fc24 	bl	8017f34 <crs_strlen>
				if (memcmp((CRC_CHAR_t*) p_argv[0], "help", len) == 0) {
 80186ec:	491c      	ldr	r1, [pc, #112]	; (8018760 <com_core_cmd+0xe8>)
 80186ee:	9001      	str	r0, [sp, #4]
				len = crs_strlen(p_argv[0]);
 80186f0:	4602      	mov	r2, r0
				if (memcmp((CRC_CHAR_t*) p_argv[0], "help", len) == 0) {
 80186f2:	4628      	mov	r0, r5
 80186f4:	f004 fb94 	bl	801ce20 <memcmp>
 80186f8:	9a01      	ldr	r2, [sp, #4]
 80186fa:	4604      	mov	r4, r0
 80186fc:	b948      	cbnz	r0, 8018712 <com_core_cmd+0x9a>
					com_core_cmd_help();
 80186fe:	f7ff ff81 	bl	8018604 <com_core_cmd_help>
					result = CMD_OK;
 8018702:	4620      	mov	r0, r4
}
 8018704:	b008      	add	sp, #32
 8018706:	bd70      	pop	{r4, r5, r6, pc}
			if (argc == 0U) /* No parameters */
 8018708:	2c00      	cmp	r4, #0
 801870a:	d1eb      	bne.n	80186e4 <com_core_cmd+0x6c>
					com_core_cmd_help();
 801870c:	f7ff ff7a 	bl	8018604 <com_core_cmd_help>
 8018710:	e7d0      	b.n	80186b4 <com_core_cmd+0x3c>
				} else if (memcmp((CRC_CHAR_t*) p_argv[0], "stat", len) == 0) {
 8018712:	4914      	ldr	r1, [pc, #80]	; (8018764 <com_core_cmd+0xec>)
 8018714:	4628      	mov	r0, r5
 8018716:	f004 fb83 	bl	801ce20 <memcmp>
 801871a:	4604      	mov	r4, r0
 801871c:	b910      	cbnz	r0, 8018724 <com_core_cmd+0xac>
					com_sockets_statistic_display();
 801871e:	f000 fa53 	bl	8018bc8 <com_sockets_statistic_display>
 8018722:	e7ee      	b.n	8018702 <com_core_cmd+0x8a>
					PRINT_FORCE("comlib: Unrecognized command. Usage:")
 8018724:	4910      	ldr	r1, [pc, #64]	; (8018768 <com_core_cmd+0xf0>)
 8018726:	480b      	ldr	r0, [pc, #44]	; (8018754 <com_core_cmd+0xdc>)
 8018728:	f004 fc36 	bl	801cf98 <strcpy>
 801872c:	4809      	ldr	r0, [pc, #36]	; (8018754 <com_core_cmd+0xdc>)
 801872e:	f7ff fc01 	bl	8017f34 <crs_strlen>
 8018732:	4a08      	ldr	r2, [pc, #32]	; (8018754 <com_core_cmd+0xdc>)
 8018734:	b283      	uxth	r3, r0
 8018736:	2101      	movs	r1, #1
 8018738:	2003      	movs	r0, #3
 801873a:	f7ff fc39 	bl	8017fb0 <traceIF_itmPrint>
 801873e:	4805      	ldr	r0, [pc, #20]	; (8018754 <com_core_cmd+0xdc>)
 8018740:	f7ff fbf8 	bl	8017f34 <crs_strlen>
 8018744:	4903      	ldr	r1, [pc, #12]	; (8018754 <com_core_cmd+0xdc>)
 8018746:	b282      	uxth	r2, r0
 8018748:	2003      	movs	r0, #3
 801874a:	f7ff fe71 	bl	8018430 <traceIF_uartPrintForce>
 801874e:	e7dd      	b.n	801870c <com_core_cmd+0x94>
 8018750:	080246fe 	.word	0x080246fe
 8018754:	200090f8 	.word	0x200090f8
 8018758:	08028e19 	.word	0x08028e19
 801875c:	0802bf1e 	.word	0x0802bf1e
 8018760:	08028e1c 	.word	0x08028e1c
 8018764:	0802bf9d 	.word	0x0802bf9d
 8018768:	0802bfa2 	.word	0x0802bfa2

0801876c <com_init>:
 * @note   must be called only one time :
 *         - before using any other functions of com_*
 * @param  -
 * @retval bool      - true/false init ok/nok
 */
bool com_init(void) {
 801876c:	b538      	push	{r3, r4, r5, lr}
	bool init_socket, init_icc, result;

	/* Init socket services */
	init_socket = com_sockets_init();
 801876e:	f000 f941 	bl	80189f4 <com_sockets_init>
 8018772:	4605      	mov	r5, r0

	/* Init icc services */
#if (USE_COM_ICC == 1)
	init_icc = com_icc_init();
 8018774:	f000 f88a 	bl	801888c <com_icc_init>
 8018778:	4604      	mov	r4, r0
  init_icc    = true;
#endif /* USE_COM_ICC == 1 */

  /*init mdm services */
#if defined(USE_COM_MDM)
  com_mdm_init();
 801877a:	f000 f92f 	bl	80189dc <com_mdm_init>
#endif /* defined(USE_COM_MDM) */

	result = true;
	if ((init_socket == false) || (init_icc == false)) {
 801877e:	2d00      	cmp	r5, #0
		result = false;
 8018780:	bf08      	it	eq
 8018782:	2400      	moveq	r4, #0
	}

	/* RandomNumberGenerator - needed by com_icc and com_sockets as fallback solution */
	srand(rtosalGetSysTimerCount());
 8018784:	f7ff fafc 	bl	8017d80 <rtosalGetSysTimerCount>
 8018788:	f004 fb6e 	bl	801ce68 <srand>

	return (result);
}
 801878c:	4620      	mov	r0, r4
 801878e:	bd38      	pop	{r3, r4, r5, pc}

08018790 <com_start>:
 after com_init and dc_start
 and before using any other functions of com_*
 * @param  -
 * @retval bool      - true/false start ok/nok
 */
bool com_start(void) {
 8018790:	b508      	push	{r3, lr}
	bool result;

	result = true;

	/* Start socket services */
	com_sockets_start();
 8018792:	f000 f93b 	bl	8018a0c <com_sockets_start>

#if (USE_COM_ICC == 1)
	/* Start icc services */
	com_icc_start();
 8018796:	f000 f8a1 	bl	80188dc <com_icc_start>
#endif /* USE_COM_ICC == 1 */

  /* start mdm services */
#if defined(USE_COM_MDM)
  com_mdm_start();
 801879a:	f000 f929 	bl	80189f0 <com_mdm_start>
#endif /* defined(USE_COM_MDM) */

#if (USE_CMD_CONSOLE == 1)
	CMD_Declare((uint8_t*) "comlib", com_core_cmd,
 801879e:	4a03      	ldr	r2, [pc, #12]	; (80187ac <com_start+0x1c>)
 80187a0:	4903      	ldr	r1, [pc, #12]	; (80187b0 <com_start+0x20>)
 80187a2:	4804      	ldr	r0, [pc, #16]	; (80187b4 <com_start+0x24>)
 80187a4:	f003 fa04 	bl	801bbb0 <CMD_Declare>
			(uint8_t*) "com library commands");
#endif /* USE_CMD_CONSOLE == 1 */

	return (result);
}
 80187a8:	2001      	movs	r0, #1
 80187aa:	bd08      	pop	{r3, pc}
 80187ac:	0802bfc9 	.word	0x0802bfc9
 80187b0:	08018679 	.word	0x08018679
 80187b4:	0802bf1e 	.word	0x0802bf1e

080187b8 <com_icc_datacache_cb>:
 * @param  p_private_gui_data - value provided at service subscription
 * @note   Unused
 * @retval -
 */
static void com_icc_datacache_cb(dc_com_event_id_t dc_event_id,
		const void *p_private_gui_data) {
 80187b8:	b570      	push	{r4, r5, r6, lr}
	UNUSED(p_private_gui_data);

	/* Used to know Icc status */
	if (dc_event_id == DC_CELLULAR_SIM_INFO) {
 80187ba:	4b2c      	ldr	r3, [pc, #176]	; (801886c <com_icc_datacache_cb+0xb4>)
 80187bc:	8819      	ldrh	r1, [r3, #0]
 80187be:	4281      	cmp	r1, r0
		const void *p_private_gui_data) {
 80187c0:	b0ba      	sub	sp, #232	; 0xe8
	if (dc_event_id == DC_CELLULAR_SIM_INFO) {
 80187c2:	d13c      	bne.n	801883e <com_icc_datacache_cb+0x86>
		dc_sim_info_t dc_sim_rt_info;

		com_icc_is_available[0] = false;
 80187c4:	4e2a      	ldr	r6, [pc, #168]	; (8018870 <com_icc_datacache_cb+0xb8>)
		com_icc_is_power_on[0] = false;
 80187c6:	4c2b      	ldr	r4, [pc, #172]	; (8018874 <com_icc_datacache_cb+0xbc>)
		com_icc_is_initialized[0] = false;
 80187c8:	4d2b      	ldr	r5, [pc, #172]	; (8018878 <com_icc_datacache_cb+0xc0>)
		if (dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 80187ca:	482c      	ldr	r0, [pc, #176]	; (801887c <com_icc_datacache_cb+0xc4>)
		com_icc_is_available[0] = false;
 80187cc:	2300      	movs	r3, #0
 80187ce:	7033      	strb	r3, [r6, #0]
		com_icc_is_power_on[0] = false;
 80187d0:	7023      	strb	r3, [r4, #0]
		com_icc_is_initialized[0] = false;
 80187d2:	702b      	strb	r3, [r5, #0]
		if (dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO,
 80187d4:	aa03      	add	r2, sp, #12
 80187d6:	2320      	movs	r3, #32
 80187d8:	f7fe fd4c 	bl	8017274 <dc_com_read>
 80187dc:	b368      	cbz	r0, 801883a <com_icc_datacache_cb+0x82>
				(void*) &dc_sim_rt_info, sizeof(dc_sim_rt_info)) == DC_COM_OK) {
			PRINT_DBG("sim state: rt_state:%d index_slot:%d sim_status:%d",
 80187de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80187e2:	4927      	ldr	r1, [pc, #156]	; (8018880 <com_icc_datacache_cb+0xc8>)
 80187e4:	4827      	ldr	r0, [pc, #156]	; (8018884 <com_icc_datacache_cb+0xcc>)
 80187e6:	aa3a      	add	r2, sp, #232	; 0xe8
 80187e8:	441a      	add	r2, r3
 80187ea:	f812 2cc1 	ldrb.w	r2, [r2, #-193]
 80187ee:	9200      	str	r2, [sp, #0]
 80187f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80187f4:	f004 fb60 	bl	801ceb8 <sprintf>
 80187f8:	4822      	ldr	r0, [pc, #136]	; (8018884 <com_icc_datacache_cb+0xcc>)
 80187fa:	f7ff fb9b 	bl	8017f34 <crs_strlen>
 80187fe:	4a21      	ldr	r2, [pc, #132]	; (8018884 <com_icc_datacache_cb+0xcc>)
 8018800:	b283      	uxth	r3, r0
 8018802:	2102      	movs	r1, #2
 8018804:	2003      	movs	r0, #3
 8018806:	f7ff fbd3 	bl	8017fb0 <traceIF_itmPrint>
 801880a:	481e      	ldr	r0, [pc, #120]	; (8018884 <com_icc_datacache_cb+0xcc>)
 801880c:	f7ff fb92 	bl	8017f34 <crs_strlen>
 8018810:	4a1c      	ldr	r2, [pc, #112]	; (8018884 <com_icc_datacache_cb+0xcc>)
 8018812:	b283      	uxth	r3, r0
 8018814:	2102      	movs	r1, #2
 8018816:	2003      	movs	r0, #3
 8018818:	f7ff fdf0 	bl	80183fc <traceIF_uartPrint>
					dc_sim_rt_info.rt_state, dc_sim_rt_info.index_slot,
					dc_sim_rt_info.sim_status[dc_sim_rt_info.index_slot])

			if (dc_sim_rt_info.rt_state == DC_SERVICE_ON) {
 801881c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018820:	2b07      	cmp	r3, #7
 8018822:	d10a      	bne.n	801883a <com_icc_datacache_cb+0x82>
				 {
				 sim_available = true;
				 }
				 }
				 */
				if (dc_sim_rt_info.sim_status[dc_sim_rt_info.index_slot]
 8018824:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018828:	aa3a      	add	r2, sp, #232	; 0xe8
 801882a:	4413      	add	r3, r2
 801882c:	f813 3cc1 	ldrb.w	r3, [r3, #-193]
 8018830:	b91b      	cbnz	r3, 801883a <com_icc_datacache_cb+0x82>
						== CA_SIM_READY) {
					com_icc_is_available[0] = true;
 8018832:	2301      	movs	r3, #1
 8018834:	7033      	strb	r3, [r6, #0]
					com_icc_is_initialized[0] = true;
 8018836:	702b      	strb	r3, [r5, #0]
					com_icc_is_power_on[0] = true;
 8018838:	7023      	strb	r3, [r4, #0]
	} else {
		/* Nothing to do */
		__NOP();
	}

}
 801883a:	b03a      	add	sp, #232	; 0xe8
 801883c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (dc_event_id == DC_CELLULAR_INFO) {
 801883e:	4b12      	ldr	r3, [pc, #72]	; (8018888 <com_icc_datacache_cb+0xd0>)
 8018840:	8819      	ldrh	r1, [r3, #0]
 8018842:	4281      	cmp	r1, r0
 8018844:	d110      	bne.n	8018868 <com_icc_datacache_cb+0xb0>
		(void) dc_com_read(&dc_com_db, DC_CELLULAR_INFO,
 8018846:	23dc      	movs	r3, #220	; 0xdc
 8018848:	480c      	ldr	r0, [pc, #48]	; (801887c <com_icc_datacache_cb+0xc4>)
 801884a:	aa03      	add	r2, sp, #12
 801884c:	f7fe fd12 	bl	8017274 <dc_com_read>
		if (dc_cellular_info.modem_state == CA_MODEM_POWER_OFF) {
 8018850:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8018854:	2bff      	cmp	r3, #255	; 0xff
 8018856:	d107      	bne.n	8018868 <com_icc_datacache_cb+0xb0>
				com_icc_is_available[i] = false;
 8018858:	4a05      	ldr	r2, [pc, #20]	; (8018870 <com_icc_datacache_cb+0xb8>)
 801885a:	2300      	movs	r3, #0
 801885c:	7013      	strb	r3, [r2, #0]
				com_icc_is_initialized[i] = false;
 801885e:	4a06      	ldr	r2, [pc, #24]	; (8018878 <com_icc_datacache_cb+0xc0>)
 8018860:	7013      	strb	r3, [r2, #0]
				com_icc_is_power_on[i] = false;
 8018862:	4a04      	ldr	r2, [pc, #16]	; (8018874 <com_icc_datacache_cb+0xbc>)
 8018864:	7013      	strb	r3, [r2, #0]
			for (uint8_t i = 0U; i < COM_ICC_SESSION_MAX_NB; i++) {
 8018866:	e7e8      	b.n	801883a <com_icc_datacache_cb+0x82>
		__NOP();
 8018868:	bf00      	nop
}
 801886a:	e7e6      	b.n	801883a <com_icc_datacache_cb+0x82>
 801886c:	20000248 	.word	0x20000248
 8018870:	20004304 	.word	0x20004304
 8018874:	20004306 	.word	0x20004306
 8018878:	20004305 	.word	0x20004305
 801887c:	20008d7c 	.word	0x20008d7c
 8018880:	0802bfde 	.word	0x0802bfde
 8018884:	200090f8 	.word	0x200090f8
 8018888:	20000240 	.word	0x20000240

0801888c <com_icc_init>:
bool com_icc_init(void) {
	bool result = true;

	/* Initialize ICC availability */
	for (uint8_t i = 0U; i < COM_ICC_SESSION_MAX_NB; i++) {
		com_icc_is_available[i] = false;
 801888c:	4b0e      	ldr	r3, [pc, #56]	; (80188c8 <com_icc_init+0x3c>)
 801888e:	2000      	movs	r0, #0
bool com_icc_init(void) {
 8018890:	b510      	push	{r4, lr}
		com_icc_is_available[i] = false;
 8018892:	7018      	strb	r0, [r3, #0]
		com_icc_is_initialized[i] = false;
 8018894:	4b0d      	ldr	r3, [pc, #52]	; (80188cc <com_icc_init+0x40>)
		com_icc_is_power_on[i] = false;
	}

	/* Initialize Mutex to protect ICC handle descriptor access */
	ComIccMutexHandle = rtosalMutexNew(NULL);
 8018896:	4c0e      	ldr	r4, [pc, #56]	; (80188d0 <com_icc_init+0x44>)
		com_icc_is_initialized[i] = false;
 8018898:	7018      	strb	r0, [r3, #0]
		com_icc_is_power_on[i] = false;
 801889a:	4b0e      	ldr	r3, [pc, #56]	; (80188d4 <com_icc_init+0x48>)
 801889c:	7018      	strb	r0, [r3, #0]
	ComIccMutexHandle = rtosalMutexNew(NULL);
 801889e:	f7ff fa8d 	bl	8017dbc <rtosalMutexNew>
 80188a2:	6020      	str	r0, [r4, #0]
	if (ComIccMutexHandle != NULL) {
 80188a4:	b170      	cbz	r0, 80188c4 <com_icc_init+0x38>
	(void) rtosalMutexAcquire(ComIccMutexHandle, RTOSAL_WAIT_FOREVER);
 80188a6:	f04f 31ff 	mov.w	r1, #4294967295
 80188aa:	f7ff fa90 	bl	8017dce <rtosalMutexAcquire>
	com_icc_desc[icc_index].state = COM_ICC_INVALID;
 80188ae:	4b0a      	ldr	r3, [pc, #40]	; (80188d8 <com_icc_init+0x4c>)
	(void) rtosalMutexRelease(ComIccMutexHandle);
 80188b0:	6820      	ldr	r0, [r4, #0]
	com_icc_desc[icc_index].state = COM_ICC_INVALID;
 80188b2:	f44f 4211 	mov.w	r2, #37120	; 0x9100
 80188b6:	801a      	strh	r2, [r3, #0]
	com_icc_desc[icc_index].handle = COM_HANDLE_INVALID_ID;
 80188b8:	f04f 32ff 	mov.w	r2, #4294967295
 80188bc:	605a      	str	r2, [r3, #4]
	(void) rtosalMutexRelease(ComIccMutexHandle);
 80188be:	f7ff fa88 	bl	8017dd2 <rtosalMutexRelease>
	bool result = true;
 80188c2:	2001      	movs	r0, #1
	} else {
		result = false;
	}

	return (result);
}
 80188c4:	bd10      	pop	{r4, pc}
 80188c6:	bf00      	nop
 80188c8:	20004304 	.word	0x20004304
 80188cc:	20004305 	.word	0x20004305
 80188d0:	200042f8 	.word	0x200042f8
 80188d4:	20004306 	.word	0x20004306
 80188d8:	200042fc 	.word	0x200042fc

080188dc <com_icc_start>:
 * @param  -
 * @retval -
 */
void com_icc_start(void) {
	/* Datacache registration for icc status */
	(void) dc_com_core_register_gen_event_cb(&dc_com_db, com_icc_datacache_cb,
 80188dc:	4902      	ldr	r1, [pc, #8]	; (80188e8 <com_icc_start+0xc>)
 80188de:	4803      	ldr	r0, [pc, #12]	; (80188ec <com_icc_start+0x10>)
 80188e0:	2200      	movs	r2, #0
 80188e2:	f7fe bbdf 	b.w	80170a4 <dc_com_core_register_gen_event_cb>
 80188e6:	bf00      	nop
 80188e8:	080187b9 	.word	0x080187b9
 80188ec:	20008d7c 	.word	0x20008d7c

080188f0 <com_mdm_cb>:
/* Private function Definition -----------------------------------------------*/

void com_mdm_cb(CS_comMdm_status_t comMdmd_event_infos)
{
  UNUSED(comMdmd_event_infos);
  if (com_mdm_app_cb != NULL)
 80188f0:	4b02      	ldr	r3, [pc, #8]	; (80188fc <com_mdm_cb+0xc>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	b103      	cbz	r3, 80188f8 <com_mdm_cb+0x8>
  {
    /* if the application MDM URC call back is registered/defined, then call it */
    com_mdm_app_cb();
 80188f6:	4718      	bx	r3
  }
}
 80188f8:	4770      	bx	lr
 80188fa:	bf00      	nop
 80188fc:	20004308 	.word	0x20004308

08018900 <com_mdm_subscribe_event>:
  * @retval -
  * @note   the provided call back function should execute a minimum of code.
  *         Application should create an event or message to trigger a receive of a message to be treated later
  */
com_err_t com_mdm_subscribe_event(uint8_t handle, com_mdm_urc_callback_t callback)
{
 8018900:	b510      	push	{r4, lr}
 8018902:	460c      	mov	r4, r1
  com_err_t error = COM_ERR_GENERAL;
  CS_Status_t cs_return;

  if ((handle < 1U) && (com_mdm_desc.handle == COM_MDM_USED))
 8018904:	b110      	cbz	r0, 801890c <com_mdm_subscribe_event+0xc>
  com_err_t error = COM_ERR_GENERAL;
 8018906:	f04f 30ff 	mov.w	r0, #4294967295
    {
      error = COM_ERR_GENERAL;
    }
  }
  return (error);
}
 801890a:	bd10      	pop	{r4, pc}
  if ((handle < 1U) && (com_mdm_desc.handle == COM_MDM_USED))
 801890c:	4b05      	ldr	r3, [pc, #20]	; (8018924 <com_mdm_subscribe_event+0x24>)
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	2b01      	cmp	r3, #1
 8018912:	d1f8      	bne.n	8018906 <com_mdm_subscribe_event+0x6>
    cs_return = osCS_ComMdm_subscribe_event(com_mdm_cb);
 8018914:	4804      	ldr	r0, [pc, #16]	; (8018928 <com_mdm_subscribe_event+0x28>)
 8018916:	f7fb fb37 	bl	8013f88 <osCS_ComMdm_subscribe_event>
    if (cs_return == CELLULAR_OK)
 801891a:	2800      	cmp	r0, #0
 801891c:	d1f3      	bne.n	8018906 <com_mdm_subscribe_event+0x6>
      com_mdm_app_cb = callback;
 801891e:	4b03      	ldr	r3, [pc, #12]	; (801892c <com_mdm_subscribe_event+0x2c>)
 8018920:	601c      	str	r4, [r3, #0]
  return (error);
 8018922:	e7f2      	b.n	801890a <com_mdm_subscribe_event+0xa>
 8018924:	2000430c 	.word	0x2000430c
 8018928:	080188f1 	.word	0x080188f1
 801892c:	20004308 	.word	0x20004308

08018930 <com_mdm_open>:
uint8_t com_mdm_open(void)
{
  uint8_t   i = 0;
  uint8_t   handle = COM_MDM_HANDLE_ERROR;

  if (com_mdm_desc.handle == COM_MDM_NOT_USED)
 8018930:	4b03      	ldr	r3, [pc, #12]	; (8018940 <com_mdm_open+0x10>)
 8018932:	7818      	ldrb	r0, [r3, #0]
 8018934:	b910      	cbnz	r0, 801893c <com_mdm_open+0xc>
  {
    /* An available handle exists, use it */
    com_mdm_desc.handle = COM_MDM_USED;
 8018936:	2201      	movs	r2, #1
 8018938:	701a      	strb	r2, [r3, #0]
    handle = i;
 801893a:	4770      	bx	lr
  uint8_t   handle = COM_MDM_HANDLE_ERROR;
 801893c:	20ff      	movs	r0, #255	; 0xff
  }

  /* Return the found available handle, or COM_MDM_HANDLE_ERROR if no available handle found */
  return (handle);
}
 801893e:	4770      	bx	lr
 8018940:	2000430c 	.word	0x2000430c

08018944 <com_mdm_send>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t com_mdm_send(uint8_t handle, com_char_t *command, uint32_t length, int32_t *command_err_code)
{
 8018944:	b513      	push	{r0, r1, r4, lr}
 8018946:	460c      	mov	r4, r1
 8018948:	4619      	mov	r1, r3
  com_err_t error = COM_ERR_DESCRIPTOR;
  CS_Status_t cs_return;
  CS_Tx_Buffer_t cs_tx_buffer;

  if ((handle < 1U) && (com_mdm_desc.handle == COM_MDM_USED))
 801894a:	b970      	cbnz	r0, 801896a <com_mdm_send+0x26>
 801894c:	4b08      	ldr	r3, [pc, #32]	; (8018970 <com_mdm_send+0x2c>)
 801894e:	781b      	ldrb	r3, [r3, #0]
 8018950:	2b01      	cmp	r3, #1
 8018952:	d10a      	bne.n	801896a <com_mdm_send+0x26>
  {
    cs_tx_buffer.p_buffer = command;
    cs_tx_buffer.buffer_size = length;

    cs_return = osCS_ComMdm_send(&cs_tx_buffer, command_err_code);
 8018954:	4668      	mov	r0, sp
    cs_tx_buffer.buffer_size = length;
 8018956:	e9cd 4200 	strd	r4, r2, [sp]
    cs_return = osCS_ComMdm_send(&cs_tx_buffer, command_err_code);
 801895a:	f7fb fb41 	bl	8013fe0 <osCS_ComMdm_send>
    if (cs_return == CELLULAR_OK)
 801895e:	3800      	subs	r0, #0
 8018960:	bf18      	it	ne
 8018962:	2001      	movne	r0, #1
 8018964:	4240      	negs	r0, r0
    {
      error = COM_ERR_GENERAL;
    }
  }
  return (error);
}
 8018966:	b002      	add	sp, #8
 8018968:	bd10      	pop	{r4, pc}
  com_err_t error = COM_ERR_DESCRIPTOR;
 801896a:	f06f 0001 	mvn.w	r0, #1
  return (error);
 801896e:	e7fa      	b.n	8018966 <com_mdm_send+0x22>
 8018970:	2000430c 	.word	0x2000430c

08018974 <com_mdm_transaction>:
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t com_mdm_transaction(uint8_t handle, com_char_t *cmd_buff, uint32_t cmd_length,
                              com_char_t *rsp_buf, uint32_t rsp_length, int32_t *command_err_code)
{
 8018974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  com_err_t error = COM_ERR_DESCRIPTOR;
  CS_Status_t cs_return;
  CS_Tx_Buffer_t cs_tx_buffer;
  CS_Rx_Buffer_t cs_rx_buffer;

  if ((handle < 1U) && (com_mdm_desc.handle == COM_MDM_USED))
 8018976:	b9a0      	cbnz	r0, 80189a2 <com_mdm_transaction+0x2e>
 8018978:	480b      	ldr	r0, [pc, #44]	; (80189a8 <com_mdm_transaction+0x34>)
 801897a:	7800      	ldrb	r0, [r0, #0]
 801897c:	2801      	cmp	r0, #1
 801897e:	d110      	bne.n	80189a2 <com_mdm_transaction+0x2e>
  {
    cs_tx_buffer.p_buffer = cmd_buff;
    cs_tx_buffer.buffer_size = cmd_length;
 8018980:	e9cd 1201 	strd	r1, r2, [sp, #4]

    cs_rx_buffer.p_buffer = rsp_buf;
 8018984:	9304      	str	r3, [sp, #16]
    cs_rx_buffer.max_buffer_size = rsp_length;
    cs_return = osCS_ComMdm_transaction(&cs_tx_buffer, &cs_rx_buffer, command_err_code);
 8018986:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cs_rx_buffer.max_buffer_size = rsp_length;
 8018988:	9b08      	ldr	r3, [sp, #32]
 801898a:	9303      	str	r3, [sp, #12]
    cs_return = osCS_ComMdm_transaction(&cs_tx_buffer, &cs_rx_buffer, command_err_code);
 801898c:	a903      	add	r1, sp, #12
 801898e:	a801      	add	r0, sp, #4
 8018990:	f7fb fb0e 	bl	8013fb0 <osCS_ComMdm_transaction>

    if (cs_return == CELLULAR_OK)
 8018994:	3800      	subs	r0, #0
 8018996:	bf18      	it	ne
 8018998:	2001      	movne	r0, #1
 801899a:	4240      	negs	r0, r0
    {
      error = COM_ERR_GENERAL;
    }
  }
  return (error);
}
 801899c:	b007      	add	sp, #28
 801899e:	f85d fb04 	ldr.w	pc, [sp], #4
  com_err_t error = COM_ERR_DESCRIPTOR;
 80189a2:	f06f 0001 	mvn.w	r0, #1
  return (error);
 80189a6:	e7f9      	b.n	801899c <com_mdm_transaction+0x28>
 80189a8:	2000430c 	.word	0x2000430c

080189ac <com_mdm_receive>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         message is not receive correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t com_mdm_receive(uint8_t handle, com_char_t *resp, uint32_t length, int32_t *command_err_code)
{
 80189ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80189ae:	460c      	mov	r4, r1
 80189b0:	4619      	mov	r1, r3
  com_err_t error = COM_ERR_DESCRIPTOR;
  CS_Status_t cs_return;
  CS_Rx_Buffer_t cs_rx_buffer;

  if ((handle < 1U) && (com_mdm_desc.handle == COM_MDM_USED))
 80189b2:	b970      	cbnz	r0, 80189d2 <com_mdm_receive+0x26>
 80189b4:	4b08      	ldr	r3, [pc, #32]	; (80189d8 <com_mdm_receive+0x2c>)
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	2b01      	cmp	r3, #1
 80189ba:	d10a      	bne.n	80189d2 <com_mdm_receive+0x26>
  {
    cs_rx_buffer.p_buffer = resp;
    cs_rx_buffer.max_buffer_size = length;

    cs_return = osCS_ComMdm_receive(&cs_rx_buffer, command_err_code);
 80189bc:	a801      	add	r0, sp, #4
    cs_rx_buffer.max_buffer_size = length;
 80189be:	e9cd 2401 	strd	r2, r4, [sp, #4]
    cs_return = osCS_ComMdm_receive(&cs_rx_buffer, command_err_code);
 80189c2:	f7fb fb23 	bl	801400c <osCS_ComMdm_receive>

    if (cs_return == CELLULAR_OK)
 80189c6:	3800      	subs	r0, #0
 80189c8:	bf18      	it	ne
 80189ca:	2001      	movne	r0, #1
 80189cc:	4240      	negs	r0, r0
    {
      error = COM_ERR_GENERAL;
    }
  }
  return (error);
}
 80189ce:	b004      	add	sp, #16
 80189d0:	bd10      	pop	{r4, pc}
  com_err_t error = COM_ERR_DESCRIPTOR;
 80189d2:	f06f 0001 	mvn.w	r0, #1
  return (error);
 80189d6:	e7fa      	b.n	80189ce <com_mdm_receive+0x22>
 80189d8:	2000430c 	.word	0x2000430c

080189dc <com_mdm_init>:
  * @retval bool      - true/false init ok/nok
  */
void com_mdm_init(void)
{
  /* Initialize com_mdm descriptor */
  com_mdm_desc.handle = COM_MDM_NOT_USED;
 80189dc:	4a02      	ldr	r2, [pc, #8]	; (80189e8 <com_mdm_init+0xc>)
 80189de:	2300      	movs	r3, #0
 80189e0:	7013      	strb	r3, [r2, #0]
  /* Initialize registered application callback */
  com_mdm_app_cb = NULL;
 80189e2:	4a02      	ldr	r2, [pc, #8]	; (80189ec <com_mdm_init+0x10>)
 80189e4:	6013      	str	r3, [r2, #0]
}
 80189e6:	4770      	bx	lr
 80189e8:	2000430c 	.word	0x2000430c
 80189ec:	20004308 	.word	0x20004308

080189f0 <com_mdm_start>:
  * @param  -
  * @retval -
  */
void com_mdm_start(void)
{
  __NOP();
 80189f0:	bf00      	nop
}
 80189f2:	4770      	bx	lr

080189f4 <com_sockets_init>:
 * @note   must be called only one time :
 *         - before using any other functions of com_*
 * @param  -
 * @retval bool      - true/false init ok/nok
 */
bool com_sockets_init(void) {
 80189f4:	b507      	push	{r0, r1, r2, lr}
	bool result;

	(void) osCDS_cellular_service_init();
 80189f6:	f7fb f919 	bl	8013c2c <osCDS_cellular_service_init>

#if (USE_SOCKETS_TYPE == USE_SOCKETS_MODEM)
	result = com_init_ip_modem();
 80189fa:	f000 f84f 	bl	8018a9c <com_init_ip_modem>
 80189fe:	9001      	str	r0, [sp, #4]
#else
  result = com_init_lwip_mcu();
#endif /* USE_SOCKETS_TYPE == USE_SOCKETS_MODEM */

	com_sockets_statistic_init();
 8018a00:	f000 f890 	bl	8018b24 <com_sockets_statistic_init>

	return (result);
}
 8018a04:	9801      	ldr	r0, [sp, #4]
 8018a06:	b003      	add	sp, #12
 8018a08:	f85d fb04 	ldr.w	pc, [sp], #4

08018a0c <com_sockets_start>:
 * @param  -
 * @retval -
 */
void com_sockets_start(void) {
#if (USE_SOCKETS_TYPE == USE_SOCKETS_MODEM)
	com_start_ip_modem();
 8018a0c:	f000 b86c 	b.w	8018ae8 <com_start_ip_modem>

08018a10 <com_socket_datacache_cb>:
  * @param  p_private_gui_data - value provided at service subscription
  * @note   Unused
  * @retval -
  */
static void com_socket_datacache_cb(dc_com_event_id_t dc_event_id, const void *p_private_gui_data)
{
 8018a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /** Using DC_CELLULAR_INFO in case of LowPower com_socket_datacache_cb to update LowPower state
    * but soft is still in function com_ip_modem_idlemode_request so ComTimerInactivityMutexHandle is still acquire
    * possible to be blocked on: else (void)rtosalMutexAcquire(ComTimerInactivityMutexHandle, RTOSAL_WAIT_FOREVER);
    */
  if (dc_event_id == DC_CELLULAR_NIFMAN_INFO)
 8018a12:	4b0f      	ldr	r3, [pc, #60]	; (8018a50 <com_socket_datacache_cb+0x40>)
 8018a14:	8819      	ldrh	r1, [r3, #0]
 8018a16:	4281      	cmp	r1, r0
 8018a18:	d111      	bne.n	8018a3e <com_socket_datacache_cb+0x2e>
  {
    dc_nifman_info_t dc_nifman_rt_info;

    if (dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&dc_nifman_rt_info, sizeof(dc_nifman_rt_info))
 8018a1a:	480e      	ldr	r0, [pc, #56]	; (8018a54 <com_socket_datacache_cb+0x44>)
 8018a1c:	2310      	movs	r3, #16
 8018a1e:	466a      	mov	r2, sp
 8018a20:	f7fe fc28 	bl	8017274 <dc_com_read>
 8018a24:	b158      	cbz	r0, 8018a3e <com_socket_datacache_cb+0x2e>
        == DC_COM_OK)
    {
      /* Is Data ready or not ? */
      if (dc_nifman_rt_info.rt_state == DC_SERVICE_ON)
 8018a26:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8018a2a:	4b0b      	ldr	r3, [pc, #44]	; (8018a58 <com_socket_datacache_cb+0x48>)
 8018a2c:	2907      	cmp	r1, #7
 8018a2e:	781a      	ldrb	r2, [r3, #0]
 8018a30:	d108      	bne.n	8018a44 <com_socket_datacache_cb+0x34>
      {
        if (com_ip_modem_is_network_up() == false)
 8018a32:	b922      	cbnz	r2, 8018a3e <com_socket_datacache_cb+0x2e>
        {
          com_sockets_network_is_up = true;
 8018a34:	2201      	movs	r2, #1
 8018a36:	701a      	strb	r2, [r3, #0]
          com_sockets_statistic_update(COM_SOCKET_STAT_NWK_UP);
 8018a38:	200a      	movs	r0, #10
      else
      {
        if (com_ip_modem_is_network_up() == true)
        {
          com_sockets_network_is_up = false;
          com_sockets_statistic_update(COM_SOCKET_STAT_NWK_DWN);
 8018a3a:	f000 f87b 	bl	8018b34 <com_sockets_statistic_update>
  }
  else
  {
    /* Nothing to do */
  }
}
 8018a3e:	b005      	add	sp, #20
 8018a40:	f85d fb04 	ldr.w	pc, [sp], #4
        if (com_ip_modem_is_network_up() == true)
 8018a44:	2a00      	cmp	r2, #0
 8018a46:	d0fa      	beq.n	8018a3e <com_socket_datacache_cb+0x2e>
          com_sockets_network_is_up = false;
 8018a48:	2200      	movs	r2, #0
 8018a4a:	701a      	strb	r2, [r3, #0]
          com_sockets_statistic_update(COM_SOCKET_STAT_NWK_DWN);
 8018a4c:	200b      	movs	r0, #11
 8018a4e:	e7f4      	b.n	8018a3a <com_socket_datacache_cb+0x2a>
 8018a50:	20000244 	.word	0x20000244
 8018a54:	20008d7c 	.word	0x20008d7c
 8018a58:	20004316 	.word	0x20004316

08018a5c <com_ip_modem_create_socket_desc>:
{
 8018a5c:	b538      	push	{r3, r4, r5, lr}
  socket_desc = (socket_desc_t *)pvPortMalloc(sizeof(socket_desc_t));
 8018a5e:	2028      	movs	r0, #40	; 0x28
 8018a60:	f000 fdee 	bl	8019640 <pvPortMalloc>
  if (socket_desc != NULL)
 8018a64:	4604      	mov	r4, r0
 8018a66:	b158      	cbz	r0, 8018a80 <com_ip_modem_create_socket_desc+0x24>
    socket_desc->queue = rtosalMessageQueueNew(NULL, 4U);
 8018a68:	2104      	movs	r1, #4
 8018a6a:	2000      	movs	r0, #0
 8018a6c:	f7ff f9b3 	bl	8017dd6 <rtosalMessageQueueNew>
 8018a70:	2300      	movs	r3, #0
 8018a72:	4605      	mov	r5, r0
 8018a74:	61e0      	str	r0, [r4, #28]
    if (socket_desc->queue == NULL)
 8018a76:	b928      	cbnz	r0, 8018a84 <com_ip_modem_create_socket_desc+0x28>
      vPortFree(socket_desc);
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f000 fe6d 	bl	8019758 <vPortFree>
      socket_desc = NULL;
 8018a7e:	462c      	mov	r4, r5
}
 8018a80:	4620      	mov	r0, r4
 8018a82:	bd38      	pop	{r3, r4, r5, pc}
  socket_desc->rcv_timeout      = RTOSAL_WAIT_FOREVER;
 8018a84:	f04f 32ff 	mov.w	r2, #4294967295
  socket_desc->snd_timeout      = RTOSAL_WAIT_FOREVER;
 8018a88:	e9c4 2205 	strd	r2, r2, [r4, #20]
  socket_desc->id               = COM_SOCKET_INVALID_ID;
 8018a8c:	e9c4 3201 	strd	r3, r2, [r4, #4]
      socket_desc->next = NULL;
 8018a90:	6263      	str	r3, [r4, #36]	; 0x24
  socket_desc->state            = COM_SOCKET_INVALID;
 8018a92:	8023      	strh	r3, [r4, #0]
  socket_desc->closing          = false;
 8018a94:	70a3      	strb	r3, [r4, #2]
  (void)memset((void *)&socket_desc->remote_addr, 0, sizeof(socket_desc->remote_addr));
 8018a96:	6123      	str	r3, [r4, #16]
  socket_desc->local_port       = 0U;
 8018a98:	60e3      	str	r3, [r4, #12]
  return socket_desc;
 8018a9a:	e7f1      	b.n	8018a80 <com_ip_modem_create_socket_desc+0x24>

08018a9c <com_init_ip_modem>:
  *         before using any other functions of com_*
  * @param  -
  * @retval bool      - true/false init ok/nok
  */
bool com_init_ip_modem(void)
{
 8018a9c:	b508      	push	{r3, lr}
  bool result;

  result = false;

  /* Inititalize Network status */
  com_sockets_network_is_up = false; /* Network status update by Datacache see com_socket_datacache_cb() */
 8018a9e:	4b0c      	ldr	r3, [pc, #48]	; (8018ad0 <com_init_ip_modem+0x34>)
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	7018      	strb	r0, [r3, #0]

#if (USE_COM_PING == 1)
  ping_socket_id = COM_SOCKET_INVALID_ID;
 8018aa4:	4b0b      	ldr	r3, [pc, #44]	; (8018ad4 <com_init_ip_modem+0x38>)
 8018aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8018aaa:	601a      	str	r2, [r3, #0]
#endif /* USE_COM_PING == 1 */

  for (uint8_t i = 0U; i < COM_SOCKET_LOCAL_ID_NB; i++)
  {
    socket_local_id[i] = false; /* set socket local id to unused */
 8018aac:	4b0a      	ldr	r3, [pc, #40]	; (8018ad8 <com_init_ip_modem+0x3c>)
 8018aae:	7018      	strb	r0, [r3, #0]
  }

  /* Initialize Mutex to protect socket descriptor list access */
  ComSocketsMutexHandle = rtosalMutexNew(NULL);
 8018ab0:	f7ff f984 	bl	8017dbc <rtosalMutexNew>
 8018ab4:	4b09      	ldr	r3, [pc, #36]	; (8018adc <com_init_ip_modem+0x40>)
 8018ab6:	6018      	str	r0, [r3, #0]
  if (ComSocketsMutexHandle != NULL)
 8018ab8:	b130      	cbz	r0, 8018ac8 <com_init_ip_modem+0x2c>
  {
    /* Create always the first element of the list */
    socket_desc_list = com_ip_modem_create_socket_desc();
 8018aba:	f7ff ffcf 	bl	8018a5c <com_ip_modem_create_socket_desc>
 8018abe:	4b08      	ldr	r3, [pc, #32]	; (8018ae0 <com_init_ip_modem+0x44>)
 8018ac0:	6018      	str	r0, [r3, #0]
    if (socket_desc_list != NULL)
 8018ac2:	3800      	subs	r0, #0
 8018ac4:	bf18      	it	ne
 8018ac6:	2001      	movne	r0, #1
  }
  com_nb_wake_up = 0U;
#endif /* USE_LOW_POWER == 1 */

#if (UDP_SERVICE_SUPPORTED == 1U)
  com_local_port = 0U; /* com_start_ip in charge to initialize it to a random value */
 8018ac8:	4b06      	ldr	r3, [pc, #24]	; (8018ae4 <com_init_ip_modem+0x48>)
 8018aca:	2200      	movs	r2, #0
 8018acc:	801a      	strh	r2, [r3, #0]
#endif /* UDP_SERVICE_SUPPORTED == 1U */

  return result;
}
 8018ace:	bd08      	pop	{r3, pc}
 8018ad0:	20004316 	.word	0x20004316
 8018ad4:	20004318 	.word	0x20004318
 8018ad8:	20004320 	.word	0x20004320
 8018adc:	20004310 	.word	0x20004310
 8018ae0:	2000431c 	.word	0x2000431c
 8018ae4:	20004314 	.word	0x20004314

08018ae8 <com_start_ip_modem>:
  *         and before using any other functions of com_*
  * @param  -
  * @retval -
  */
void com_start_ip_modem(void)
{
 8018ae8:	b507      	push	{r0, r1, r2, lr}
  /* Datacache registration for netwok on/off status */
  (void)dc_com_core_register_gen_event_cb(&dc_com_db, com_socket_datacache_cb, (void *)NULL);
 8018aea:	490a      	ldr	r1, [pc, #40]	; (8018b14 <com_start_ip_modem+0x2c>)
 8018aec:	480a      	ldr	r0, [pc, #40]	; (8018b18 <com_start_ip_modem+0x30>)
 8018aee:	2200      	movs	r2, #0
 8018af0:	f7fe fad8 	bl	80170a4 <dc_com_core_register_gen_event_cb>

#if (UDP_SERVICE_SUPPORTED == 1U)
  uint32_t random;

  /* Initialize local port to a random value */
  if (HAL_OK != HAL_RNG_GenerateRandomNumber(&hrng, &random))
 8018af4:	4809      	ldr	r0, [pc, #36]	; (8018b1c <com_start_ip_modem+0x34>)
 8018af6:	a901      	add	r1, sp, #4
 8018af8:	f7ed f8cc 	bl	8005c94 <HAL_RNG_GenerateRandomNumber>
 8018afc:	b110      	cbz	r0, 8018b04 <com_start_ip_modem+0x1c>
  {
    random = (uint32_t)rand();
 8018afe:	f004 f9bd 	bl	801ce7c <rand>
 8018b02:	9001      	str	r0, [sp, #4]
  }
  random = random & ~COM_LOCAL_PORT_BEGIN;
  random = random + COM_LOCAL_PORT_BEGIN;
 8018b04:	9b01      	ldr	r3, [sp, #4]
  com_local_port = (uint16_t)(random);
 8018b06:	4a06      	ldr	r2, [pc, #24]	; (8018b20 <com_start_ip_modem+0x38>)
  random = random + COM_LOCAL_PORT_BEGIN;
 8018b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
  com_local_port = (uint16_t)(random);
 8018b0c:	8013      	strh	r3, [r2, #0]
#endif /* UDP_SERVICE_SUPPORTED == 1U */
}
 8018b0e:	b003      	add	sp, #12
 8018b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b14:	08018a11 	.word	0x08018a11
 8018b18:	20008d7c 	.word	0x20008d7c
 8018b1c:	20008590 	.word	0x20008590
 8018b20:	20004314 	.word	0x20004314

08018b24 <com_sockets_statistic_init>:
  /* Statistic display timer */
  static osTimerId com_socket_statistic_timer_handle;
#endif /* COM_SOCKETS_STATISTIC_PERIOD != 0U */

	/* Initialize socket statistics structure to 0U */
	(void) memset(&com_socket_statistic, 0, sizeof(com_socket_statistic_t));
 8018b24:	4802      	ldr	r0, [pc, #8]	; (8018b30 <com_sockets_statistic_init+0xc>)
 8018b26:	2218      	movs	r2, #24
 8018b28:	2100      	movs	r1, #0
 8018b2a:	f004 b995 	b.w	801ce58 <memset>
 8018b2e:	bf00      	nop
 8018b30:	20004322 	.word	0x20004322

08018b34 <com_sockets_statistic_update>:
 * @param  stat - to know what the function has to do
 * @note   statistic update
 * @retval -
 */
void com_sockets_statistic_update(com_sockets_stat_update_t stat) {
	switch (stat) {
 8018b34:	280b      	cmp	r0, #11
 8018b36:	d843      	bhi.n	8018bc0 <com_sockets_statistic_update+0x8c>
 8018b38:	e8df f000 	tbb	[pc, r0]
 8018b3c:	1f1a1510 	.word	0x1f1a1510
 8018b40:	332e2924 	.word	0x332e2924
 8018b44:	0b063d38 	.word	0x0b063d38
	case COM_SOCKET_STAT_NWK_UP:
		com_socket_statistic.network.ok++;
 8018b48:	4a1e      	ldr	r2, [pc, #120]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b4a:	8a93      	ldrh	r3, [r2, #20]
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	8293      	strh	r3, [r2, #20]
		break;
 8018b50:	4770      	bx	lr
	case COM_SOCKET_STAT_NWK_DWN:
		com_socket_statistic.network.nok++;
 8018b52:	4a1c      	ldr	r2, [pc, #112]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b54:	8ad3      	ldrh	r3, [r2, #22]
 8018b56:	3301      	adds	r3, #1
 8018b58:	82d3      	strh	r3, [r2, #22]
		break;
 8018b5a:	4770      	bx	lr
	case COM_SOCKET_STAT_CRE_OK:
		com_socket_statistic.create.ok++;
 8018b5c:	4a19      	ldr	r2, [pc, #100]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b5e:	8813      	ldrh	r3, [r2, #0]
 8018b60:	3301      	adds	r3, #1
 8018b62:	8013      	strh	r3, [r2, #0]
		break;
 8018b64:	4770      	bx	lr
	case COM_SOCKET_STAT_CRE_NOK:
		com_socket_statistic.create.nok++;
 8018b66:	4a17      	ldr	r2, [pc, #92]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b68:	8853      	ldrh	r3, [r2, #2]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	8053      	strh	r3, [r2, #2]
		break;
 8018b6e:	4770      	bx	lr
	case COM_SOCKET_STAT_CNT_OK:
		com_socket_statistic.connect.ok++;
 8018b70:	4a14      	ldr	r2, [pc, #80]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b72:	8893      	ldrh	r3, [r2, #4]
 8018b74:	3301      	adds	r3, #1
 8018b76:	8093      	strh	r3, [r2, #4]
		break;
 8018b78:	4770      	bx	lr
	case COM_SOCKET_STAT_CNT_NOK:
		com_socket_statistic.connect.nok++;
 8018b7a:	4a12      	ldr	r2, [pc, #72]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b7c:	88d3      	ldrh	r3, [r2, #6]
 8018b7e:	3301      	adds	r3, #1
 8018b80:	80d3      	strh	r3, [r2, #6]
		break;
 8018b82:	4770      	bx	lr
	case COM_SOCKET_STAT_SND_OK:
		com_socket_statistic.send.ok++;
 8018b84:	4a0f      	ldr	r2, [pc, #60]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b86:	8913      	ldrh	r3, [r2, #8]
 8018b88:	3301      	adds	r3, #1
 8018b8a:	8113      	strh	r3, [r2, #8]
		break;
 8018b8c:	4770      	bx	lr
	case COM_SOCKET_STAT_SND_NOK:
		com_socket_statistic.send.nok++;
 8018b8e:	4a0d      	ldr	r2, [pc, #52]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b90:	8953      	ldrh	r3, [r2, #10]
 8018b92:	3301      	adds	r3, #1
 8018b94:	8153      	strh	r3, [r2, #10]
		break;
 8018b96:	4770      	bx	lr
	case COM_SOCKET_STAT_RCV_OK:
		com_socket_statistic.receive.ok++;
 8018b98:	4a0a      	ldr	r2, [pc, #40]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018b9a:	8993      	ldrh	r3, [r2, #12]
 8018b9c:	3301      	adds	r3, #1
 8018b9e:	8193      	strh	r3, [r2, #12]
		break;
 8018ba0:	4770      	bx	lr
	case COM_SOCKET_STAT_RCV_NOK:
		com_socket_statistic.receive.nok++;
 8018ba2:	4a08      	ldr	r2, [pc, #32]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018ba4:	89d3      	ldrh	r3, [r2, #14]
 8018ba6:	3301      	adds	r3, #1
 8018ba8:	81d3      	strh	r3, [r2, #14]
		break;
 8018baa:	4770      	bx	lr
	case COM_SOCKET_STAT_CLS_OK:
		com_socket_statistic.close.ok++;
 8018bac:	4a05      	ldr	r2, [pc, #20]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018bae:	8a13      	ldrh	r3, [r2, #16]
 8018bb0:	3301      	adds	r3, #1
 8018bb2:	8213      	strh	r3, [r2, #16]
		break;
 8018bb4:	4770      	bx	lr
	case COM_SOCKET_STAT_CLS_NOK:
		com_socket_statistic.close.nok++;
 8018bb6:	4a03      	ldr	r2, [pc, #12]	; (8018bc4 <com_sockets_statistic_update+0x90>)
 8018bb8:	8a53      	ldrh	r3, [r2, #18]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	8253      	strh	r3, [r2, #18]
		break;
 8018bbe:	4770      	bx	lr
	default:
		__NOP(); /* Nothing to do */
 8018bc0:	bf00      	nop
		break;
	}
}
 8018bc2:	4770      	bx	lr
 8018bc4:	20004322 	.word	0x20004322

08018bc8 <com_sockets_statistic_display>:
 * @brief  Display com sockets statistics
 * @note   COM_SOCKETS_STATISTIC and USE_TRACE_COM_SOCKETS must be set to 1
 * @param  -
 * @retval -
 */
void com_sockets_statistic_display(void) {
 8018bc8:	b513      	push	{r0, r1, r4, lr}
  socket_desc_t *socket_desc;
  socket_desc = socket_desc_list;
#endif /* not yet supported */

	/* Check that at least one socket has run */
	if (com_socket_statistic.create.ok != 0U) {
 8018bca:	4c70      	ldr	r4, [pc, #448]	; (8018d8c <com_sockets_statistic_display+0x1c4>)
		PRINT_FORCE("*** Socket Stat Begin ***")
 8018bcc:	4970      	ldr	r1, [pc, #448]	; (8018d90 <com_sockets_statistic_display+0x1c8>)
	if (com_socket_statistic.create.ok != 0U) {
 8018bce:	8823      	ldrh	r3, [r4, #0]
		PRINT_FORCE("*** Socket Stat Begin ***")
 8018bd0:	4870      	ldr	r0, [pc, #448]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
	if (com_socket_statistic.create.ok != 0U) {
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	f000 80c1 	beq.w	8018d5a <com_sockets_statistic_display+0x192>
		PRINT_FORCE("*** Socket Stat Begin ***")
 8018bd8:	f004 f9de 	bl	801cf98 <strcpy>
 8018bdc:	486d      	ldr	r0, [pc, #436]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018bde:	f7ff f9a9 	bl	8017f34 <crs_strlen>
 8018be2:	4a6c      	ldr	r2, [pc, #432]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018be4:	b283      	uxth	r3, r0
 8018be6:	2101      	movs	r1, #1
 8018be8:	2003      	movs	r0, #3
 8018bea:	f7ff f9e1 	bl	8017fb0 <traceIF_itmPrint>
 8018bee:	4869      	ldr	r0, [pc, #420]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018bf0:	f7ff f9a0 	bl	8017f34 <crs_strlen>
 8018bf4:	4967      	ldr	r1, [pc, #412]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018bf6:	b282      	uxth	r2, r0
 8018bf8:	2003      	movs	r0, #3
 8018bfa:	f7ff fc19 	bl	8018430 <traceIF_uartPrintForce>

		PRINT_FORCE("ComLibStat: Nwk: up:%5d - dwn:%5d - tot:%6d",
 8018bfe:	8aa2      	ldrh	r2, [r4, #20]
 8018c00:	8ae3      	ldrh	r3, [r4, #22]
 8018c02:	4864      	ldr	r0, [pc, #400]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c04:	18d1      	adds	r1, r2, r3
 8018c06:	9100      	str	r1, [sp, #0]
 8018c08:	4963      	ldr	r1, [pc, #396]	; (8018d98 <com_sockets_statistic_display+0x1d0>)
 8018c0a:	f004 f955 	bl	801ceb8 <sprintf>
 8018c0e:	4861      	ldr	r0, [pc, #388]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c10:	f7ff f990 	bl	8017f34 <crs_strlen>
 8018c14:	4a5f      	ldr	r2, [pc, #380]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c16:	b283      	uxth	r3, r0
 8018c18:	2101      	movs	r1, #1
 8018c1a:	2003      	movs	r0, #3
 8018c1c:	f7ff f9c8 	bl	8017fb0 <traceIF_itmPrint>
 8018c20:	485c      	ldr	r0, [pc, #368]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c22:	f7ff f987 	bl	8017f34 <crs_strlen>
 8018c26:	495b      	ldr	r1, [pc, #364]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c28:	b282      	uxth	r2, r0
 8018c2a:	2003      	movs	r0, #3
 8018c2c:	f7ff fc00 	bl	8018430 <traceIF_uartPrintForce>
				com_socket_statistic.network.ok,
				com_socket_statistic.network.nok,
				(com_socket_statistic.network.ok
						+ com_socket_statistic.network.nok))
		PRINT_FORCE("ComLibStat: Cre: ok:%5d - nok:%5d - tot:%6d",
 8018c30:	8822      	ldrh	r2, [r4, #0]
 8018c32:	8863      	ldrh	r3, [r4, #2]
 8018c34:	4857      	ldr	r0, [pc, #348]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c36:	18d1      	adds	r1, r2, r3
 8018c38:	9100      	str	r1, [sp, #0]
 8018c3a:	4958      	ldr	r1, [pc, #352]	; (8018d9c <com_sockets_statistic_display+0x1d4>)
 8018c3c:	f004 f93c 	bl	801ceb8 <sprintf>
 8018c40:	4854      	ldr	r0, [pc, #336]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c42:	f7ff f977 	bl	8017f34 <crs_strlen>
 8018c46:	4a53      	ldr	r2, [pc, #332]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c48:	b283      	uxth	r3, r0
 8018c4a:	2101      	movs	r1, #1
 8018c4c:	2003      	movs	r0, #3
 8018c4e:	f7ff f9af 	bl	8017fb0 <traceIF_itmPrint>
 8018c52:	4850      	ldr	r0, [pc, #320]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c54:	f7ff f96e 	bl	8017f34 <crs_strlen>
 8018c58:	494e      	ldr	r1, [pc, #312]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c5a:	b282      	uxth	r2, r0
 8018c5c:	2003      	movs	r0, #3
 8018c5e:	f7ff fbe7 	bl	8018430 <traceIF_uartPrintForce>
				com_socket_statistic.create.ok, com_socket_statistic.create.nok,
				(com_socket_statistic.create.ok
						+ com_socket_statistic.create.nok))
		PRINT_FORCE("ComLibStat: Con: ok:%5d - nok:%5d - tot:%6d",
 8018c62:	88a2      	ldrh	r2, [r4, #4]
 8018c64:	88e3      	ldrh	r3, [r4, #6]
 8018c66:	484b      	ldr	r0, [pc, #300]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c68:	18d1      	adds	r1, r2, r3
 8018c6a:	9100      	str	r1, [sp, #0]
 8018c6c:	494c      	ldr	r1, [pc, #304]	; (8018da0 <com_sockets_statistic_display+0x1d8>)
 8018c6e:	f004 f923 	bl	801ceb8 <sprintf>
 8018c72:	4848      	ldr	r0, [pc, #288]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c74:	f7ff f95e 	bl	8017f34 <crs_strlen>
 8018c78:	4a46      	ldr	r2, [pc, #280]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c7a:	b283      	uxth	r3, r0
 8018c7c:	2101      	movs	r1, #1
 8018c7e:	2003      	movs	r0, #3
 8018c80:	f7ff f996 	bl	8017fb0 <traceIF_itmPrint>
 8018c84:	4843      	ldr	r0, [pc, #268]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c86:	f7ff f955 	bl	8017f34 <crs_strlen>
 8018c8a:	4942      	ldr	r1, [pc, #264]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c8c:	b282      	uxth	r2, r0
 8018c8e:	2003      	movs	r0, #3
 8018c90:	f7ff fbce 	bl	8018430 <traceIF_uartPrintForce>
				com_socket_statistic.connect.ok,
				com_socket_statistic.connect.nok,
				(com_socket_statistic.connect.ok
						+ com_socket_statistic.connect.nok))
		PRINT_FORCE("ComLibStat: Snd: ok:%5d - nok:%5d - tot:%6d",
 8018c94:	8922      	ldrh	r2, [r4, #8]
 8018c96:	8963      	ldrh	r3, [r4, #10]
 8018c98:	483e      	ldr	r0, [pc, #248]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018c9a:	18d1      	adds	r1, r2, r3
 8018c9c:	9100      	str	r1, [sp, #0]
 8018c9e:	4941      	ldr	r1, [pc, #260]	; (8018da4 <com_sockets_statistic_display+0x1dc>)
 8018ca0:	f004 f90a 	bl	801ceb8 <sprintf>
 8018ca4:	483b      	ldr	r0, [pc, #236]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018ca6:	f7ff f945 	bl	8017f34 <crs_strlen>
 8018caa:	4a3a      	ldr	r2, [pc, #232]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cac:	b283      	uxth	r3, r0
 8018cae:	2101      	movs	r1, #1
 8018cb0:	2003      	movs	r0, #3
 8018cb2:	f7ff f97d 	bl	8017fb0 <traceIF_itmPrint>
 8018cb6:	4837      	ldr	r0, [pc, #220]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cb8:	f7ff f93c 	bl	8017f34 <crs_strlen>
 8018cbc:	4935      	ldr	r1, [pc, #212]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cbe:	b282      	uxth	r2, r0
 8018cc0:	2003      	movs	r0, #3
 8018cc2:	f7ff fbb5 	bl	8018430 <traceIF_uartPrintForce>
				com_socket_statistic.send.ok, com_socket_statistic.send.nok,
				(com_socket_statistic.send.ok + com_socket_statistic.send.nok))
		PRINT_FORCE("ComLibStat: Rcv: ok:%5d - nok:%5d - tot:%6d",
 8018cc6:	89a2      	ldrh	r2, [r4, #12]
 8018cc8:	89e3      	ldrh	r3, [r4, #14]
 8018cca:	4832      	ldr	r0, [pc, #200]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018ccc:	18d1      	adds	r1, r2, r3
 8018cce:	9100      	str	r1, [sp, #0]
 8018cd0:	4935      	ldr	r1, [pc, #212]	; (8018da8 <com_sockets_statistic_display+0x1e0>)
 8018cd2:	f004 f8f1 	bl	801ceb8 <sprintf>
 8018cd6:	482f      	ldr	r0, [pc, #188]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cd8:	f7ff f92c 	bl	8017f34 <crs_strlen>
 8018cdc:	4a2d      	ldr	r2, [pc, #180]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cde:	b283      	uxth	r3, r0
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	2003      	movs	r0, #3
 8018ce4:	f7ff f964 	bl	8017fb0 <traceIF_itmPrint>
 8018ce8:	482a      	ldr	r0, [pc, #168]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cea:	f7ff f923 	bl	8017f34 <crs_strlen>
 8018cee:	4929      	ldr	r1, [pc, #164]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cf0:	b282      	uxth	r2, r0
 8018cf2:	2003      	movs	r0, #3
 8018cf4:	f7ff fb9c 	bl	8018430 <traceIF_uartPrintForce>
				com_socket_statistic.receive.ok,
				com_socket_statistic.receive.nok,
				(com_socket_statistic.receive.ok
						+ com_socket_statistic.receive.nok))
		PRINT_FORCE("ComLibStat: Cls: ok:%5d - nok:%5d - tot:%6d",
 8018cf8:	8a22      	ldrh	r2, [r4, #16]
 8018cfa:	8a63      	ldrh	r3, [r4, #18]
 8018cfc:	4825      	ldr	r0, [pc, #148]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018cfe:	18d1      	adds	r1, r2, r3
 8018d00:	9100      	str	r1, [sp, #0]
 8018d02:	492a      	ldr	r1, [pc, #168]	; (8018dac <com_sockets_statistic_display+0x1e4>)
 8018d04:	f004 f8d8 	bl	801ceb8 <sprintf>
    }
#endif /* not yet supported */
		PRINT_FORCE("*** Socket Stat End ***")
	} else {
		PRINT_FORCE("*** Socket Stat Begin ***")
		PRINT_FORCE("ComLibStat: No connection or exchange done !")
 8018d08:	4822      	ldr	r0, [pc, #136]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d0a:	f7ff f913 	bl	8017f34 <crs_strlen>
 8018d0e:	4a21      	ldr	r2, [pc, #132]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d10:	b283      	uxth	r3, r0
 8018d12:	2101      	movs	r1, #1
 8018d14:	2003      	movs	r0, #3
 8018d16:	f7ff f94b 	bl	8017fb0 <traceIF_itmPrint>
 8018d1a:	481e      	ldr	r0, [pc, #120]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d1c:	f7ff f90a 	bl	8017f34 <crs_strlen>
 8018d20:	491c      	ldr	r1, [pc, #112]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d22:	b282      	uxth	r2, r0
 8018d24:	2003      	movs	r0, #3
 8018d26:	f7ff fb83 	bl	8018430 <traceIF_uartPrintForce>
		PRINT_FORCE("*** Socket Stat End ***")
 8018d2a:	4921      	ldr	r1, [pc, #132]	; (8018db0 <com_sockets_statistic_display+0x1e8>)
 8018d2c:	4819      	ldr	r0, [pc, #100]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d2e:	f004 f933 	bl	801cf98 <strcpy>
 8018d32:	4818      	ldr	r0, [pc, #96]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d34:	f7ff f8fe 	bl	8017f34 <crs_strlen>
 8018d38:	4a16      	ldr	r2, [pc, #88]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d3a:	b283      	uxth	r3, r0
 8018d3c:	2101      	movs	r1, #1
 8018d3e:	2003      	movs	r0, #3
 8018d40:	f7ff f936 	bl	8017fb0 <traceIF_itmPrint>
 8018d44:	4813      	ldr	r0, [pc, #76]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d46:	f7ff f8f5 	bl	8017f34 <crs_strlen>
 8018d4a:	4912      	ldr	r1, [pc, #72]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d4c:	b282      	uxth	r2, r0
 8018d4e:	2003      	movs	r0, #3
	}
}
 8018d50:	b002      	add	sp, #8
 8018d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PRINT_FORCE("*** Socket Stat End ***")
 8018d56:	f7ff bb6b 	b.w	8018430 <traceIF_uartPrintForce>
		PRINT_FORCE("*** Socket Stat Begin ***")
 8018d5a:	f004 f91d 	bl	801cf98 <strcpy>
 8018d5e:	480d      	ldr	r0, [pc, #52]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d60:	f7ff f8e8 	bl	8017f34 <crs_strlen>
 8018d64:	4a0b      	ldr	r2, [pc, #44]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d66:	b283      	uxth	r3, r0
 8018d68:	2101      	movs	r1, #1
 8018d6a:	2003      	movs	r0, #3
 8018d6c:	f7ff f920 	bl	8017fb0 <traceIF_itmPrint>
 8018d70:	4808      	ldr	r0, [pc, #32]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d72:	f7ff f8df 	bl	8017f34 <crs_strlen>
 8018d76:	4907      	ldr	r1, [pc, #28]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d78:	b282      	uxth	r2, r0
 8018d7a:	2003      	movs	r0, #3
 8018d7c:	f7ff fb58 	bl	8018430 <traceIF_uartPrintForce>
		PRINT_FORCE("ComLibStat: No connection or exchange done !")
 8018d80:	490c      	ldr	r1, [pc, #48]	; (8018db4 <com_sockets_statistic_display+0x1ec>)
 8018d82:	4804      	ldr	r0, [pc, #16]	; (8018d94 <com_sockets_statistic_display+0x1cc>)
 8018d84:	f004 f908 	bl	801cf98 <strcpy>
 8018d88:	e7be      	b.n	8018d08 <com_sockets_statistic_display+0x140>
 8018d8a:	bf00      	nop
 8018d8c:	20004322 	.word	0x20004322
 8018d90:	0802c01b 	.word	0x0802c01b
 8018d94:	200090f8 	.word	0x200090f8
 8018d98:	0802c037 	.word	0x0802c037
 8018d9c:	0802c065 	.word	0x0802c065
 8018da0:	0802c093 	.word	0x0802c093
 8018da4:	0802c0c1 	.word	0x0802c0c1
 8018da8:	0802c0ef 	.word	0x0802c0ef
 8018dac:	0802c11d 	.word	0x0802c11d
 8018db0:	0802c14b 	.word	0x0802c14b
 8018db4:	0802c165 	.word	0x0802c165

08018db8 <cellular_api_fill_string>:
  * @param[in,out] p_out_value  - The output string content (empty string if length "str" is greater than "max_len").
  * @retval -
  */
static void cellular_api_fill_string(const uint8_t *p_in_str, uint8_t max_len, uint8_t *const p_out_length,
                                     uint8_t *const p_out_value)
{
 8018db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dba:	460f      	mov	r7, r1
 8018dbc:	4615      	mov	r5, r2
 8018dbe:	4606      	mov	r6, r0
 8018dc0:	461c      	mov	r4, r3
  uint32_t size;

  /* Get size of string */
  size = crs_strlen(p_in_str);
 8018dc2:	f7ff f8b7 	bl	8017f34 <crs_strlen>
  /* Check if size can fit in destination string */
  if ((size + 1U) <= max_len)
 8018dc6:	1c42      	adds	r2, r0, #1
 8018dc8:	42ba      	cmp	r2, r7
 8018dca:	d806      	bhi.n	8018dda <cellular_api_fill_string+0x22>
  {
    /* If yes, fill output data */
    *p_out_length = (uint8_t)size;
 8018dcc:	7028      	strb	r0, [r5, #0]
    (void)memcpy((void *)p_out_value, p_in_str, size + 1U);
 8018dce:	4631      	mov	r1, r6
 8018dd0:	4620      	mov	r0, r4
  {
    /* String size too big, return an empty string */
    *p_out_length = 0U;
    p_out_value[0] = (uint8_t)'\0';
  }
}
 8018dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)memcpy((void *)p_out_value, p_in_str, size + 1U);
 8018dd6:	f004 b831 	b.w	801ce3c <memcpy>
    *p_out_length = 0U;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	702b      	strb	r3, [r5, #0]
    p_out_value[0] = (uint8_t)'\0';
 8018dde:	7023      	strb	r3, [r4, #0]
}
 8018de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018de4 <cellular_api_register_general_cb>:

/**
  * @brief Register cellular api global call back to Data Cache if needed
  */
static cellular_result_t cellular_api_register_general_cb(void)
{
 8018de4:	b538      	push	{r3, r4, r5, lr}
  static bool cellular_api_global_cb_registered = false;

  cellular_result_t ret = CELLULAR_SUCCESS;

  /* if global call back not already registered to Data Cache */
  if (cellular_api_global_cb_registered == false)
 8018de6:	4d0a      	ldr	r5, [pc, #40]	; (8018e10 <cellular_api_register_general_cb+0x2c>)
 8018de8:	782c      	ldrb	r4, [r5, #0]
 8018dea:	b96c      	cbnz	r4, 8018e08 <cellular_api_register_general_cb+0x24>
  {
    /* register general call back to Data Cache  */
    if (dc_com_register_gen_event_cb(&dc_com_db, cellular_api_general_data_cache_callback, (const void *)NULL) ==
 8018dec:	4909      	ldr	r1, [pc, #36]	; (8018e14 <cellular_api_register_general_cb+0x30>)
 8018dee:	480a      	ldr	r0, [pc, #40]	; (8018e18 <cellular_api_register_general_cb+0x34>)
 8018df0:	4622      	mov	r2, r4
 8018df2:	f7fe f999 	bl	8017128 <dc_com_register_gen_event_cb>
 8018df6:	28ff      	cmp	r0, #255	; 0xff
 8018df8:	d008      	beq.n	8018e0c <cellular_api_register_general_cb+0x28>
      ret = CELLULAR_ERR_INTERNAL;
    }
    else
    {
      /* Data Cache registration is OK, store the fact that cellular api global call back is now registered */
      cellular_api_global_cb_registered = true;
 8018dfa:	2301      	movs	r3, #1
      /* Reset the content of the structure containing the call back information */
      (void)memset((void *)cellular_api_registration_cb, 0,
 8018dfc:	4807      	ldr	r0, [pc, #28]	; (8018e1c <cellular_api_register_general_cb+0x38>)
      cellular_api_global_cb_registered = true;
 8018dfe:	702b      	strb	r3, [r5, #0]
      (void)memset((void *)cellular_api_registration_cb, 0,
 8018e00:	2228      	movs	r2, #40	; 0x28
 8018e02:	4621      	mov	r1, r4
 8018e04:	f004 f828 	bl	801ce58 <memset>
  cellular_result_t ret = CELLULAR_SUCCESS;
 8018e08:	2000      	movs	r0, #0
                   sizeof(cellular_api_cb_t) * CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB);
    }
  }

  return (ret);
}
 8018e0a:	bd38      	pop	{r3, r4, r5, pc}
      ret = CELLULAR_ERR_INTERNAL;
 8018e0c:	2005      	movs	r0, #5
 8018e0e:	e7fc      	b.n	8018e0a <cellular_api_register_general_cb+0x26>
 8018e10:	2000433a 	.word	0x2000433a
 8018e14:	0801908d 	.word	0x0801908d
 8018e18:	20008d7c 	.word	0x20008d7c
 8018e1c:	2000433c 	.word	0x2000433c

08018e20 <cellular_get_cellular_info.part.0>:
/**
  * @brief         Get Cellular information.
  * @param[in,out] p_cellular_info - The cellular info structure to contain the response.
  * @retval -
  */
void cellular_get_cellular_info(cellular_info_t *const p_cellular_info)
 8018e20:	b530      	push	{r4, r5, lr}
  dc_sim_info_t             datacache_sim_info;            /* Sim information */

  if (p_cellular_info != NULL)
  {
    /* Get needed data from Data Cache */
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&datacache_cellular_info, sizeof(dc_cellular_info_t));
 8018e22:	492f      	ldr	r1, [pc, #188]	; (8018ee0 <cellular_get_cellular_info.part.0+0xc0>)
 8018e24:	4d2f      	ldr	r5, [pc, #188]	; (8018ee4 <cellular_get_cellular_info.part.0+0xc4>)
 8018e26:	8809      	ldrh	r1, [r1, #0]
void cellular_get_cellular_info(cellular_info_t *const p_cellular_info)
 8018e28:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
 8018e2c:	4604      	mov	r4, r0
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&datacache_cellular_info, sizeof(dc_cellular_info_t));
 8018e2e:	aa09      	add	r2, sp, #36	; 0x24
 8018e30:	23dc      	movs	r3, #220	; 0xdc
 8018e32:	4628      	mov	r0, r5
 8018e34:	f7fe fa1e 	bl	8017274 <dc_com_read>
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&datacache_cellular_param, sizeof(dc_cellular_params_t));
 8018e38:	492b      	ldr	r1, [pc, #172]	; (8018ee8 <cellular_get_cellular_info.part.0+0xc8>)
 8018e3a:	aa40      	add	r2, sp, #256	; 0x100
 8018e3c:	8809      	ldrh	r1, [r1, #0]
 8018e3e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8018e42:	4628      	mov	r0, r5
 8018e44:	f7fe fa16 	bl	8017274 <dc_com_read>
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&datacache_sim_info, sizeof(dc_sim_info_t));
 8018e48:	4928      	ldr	r1, [pc, #160]	; (8018eec <cellular_get_cellular_info.part.0+0xcc>)
 8018e4a:	aa01      	add	r2, sp, #4
 8018e4c:	8809      	ldrh	r1, [r1, #0]
 8018e4e:	2320      	movs	r3, #32
 8018e50:	4628      	mov	r0, r5
 8018e52:	f7fe fa0f 	bl	8017274 <dc_com_read>

    /* Set sockets_type modem or LWIP */
#if (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)
    p_cellular_info->sockets_type    =  CA_SOCKETS_LWIP;
#else
    p_cellular_info->sockets_type    =  CA_SOCKETS_MODEM;
 8018e56:	2301      	movs	r3, #1
 8018e58:	7023      	strb	r3, [r4, #0]
#endif /*  (USE_SOCKETS_TYPE == USE_SOCKETS_LWIP)*/
    /* Set modem state */
    p_cellular_info->modem_state = datacache_cellular_info.modem_state;
 8018e5a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8018e5e:	7063      	strb	r3, [r4, #1]

    /* Modem identity : manufacturer, model, revision and serial */
    cellular_api_fill_string(datacache_cellular_info.manufacturer_name, CA_MANUFACTURER_ID_SIZE_MAX,
 8018e60:	1ca2      	adds	r2, r4, #2
 8018e62:	1ce3      	adds	r3, r4, #3
 8018e64:	a818      	add	r0, sp, #96	; 0x60
 8018e66:	2121      	movs	r1, #33	; 0x21
 8018e68:	f7ff ffa6 	bl	8018db8 <cellular_api_fill_string>
                             &p_cellular_info->identity.manufacturer_id.len,
                             p_cellular_info->identity.manufacturer_id.value);
    cellular_api_fill_string(datacache_cellular_info.model, CA_MODEL_ID_SIZE_MAX,
 8018e6c:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8018e70:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8018e74:	f10d 0081 	add.w	r0, sp, #129	; 0x81
 8018e78:	2121      	movs	r1, #33	; 0x21
 8018e7a:	f7ff ff9d 	bl	8018db8 <cellular_api_fill_string>
                             &p_cellular_info->identity.model_id.len, p_cellular_info->identity.model_id.value);
    cellular_api_fill_string(datacache_cellular_info.revision, CA_REVISION_ID_SIZE_MAX,
 8018e7e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e82:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8018e86:	f10d 00a2 	add.w	r0, sp, #162	; 0xa2
 8018e8a:	2121      	movs	r1, #33	; 0x21
 8018e8c:	f7ff ff94 	bl	8018db8 <cellular_api_fill_string>
                             &p_cellular_info->identity.revision_id.len, p_cellular_info->identity.revision_id.value);
    cellular_api_fill_string(datacache_cellular_info.serial_number, CA_SERIAL_NUMBER_ID_SIZE_MAX,
 8018e90:	f104 0369 	add.w	r3, r4, #105	; 0x69
 8018e94:	f104 0268 	add.w	r2, r4, #104	; 0x68
 8018e98:	f10d 00c3 	add.w	r0, sp, #195	; 0xc3
 8018e9c:	2121      	movs	r1, #33	; 0x21
 8018e9e:	f7ff ff8b 	bl	8018db8 <cellular_api_fill_string>
                             &p_cellular_info->identity.serial_number_id.len,
                             p_cellular_info->identity.serial_number_id.value);

    /* Imei */
    cellular_api_fill_string(datacache_cellular_info.imei, CA_IMEI_SIZE_MAX, &p_cellular_info->imei.len,
 8018ea2:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 8018ea6:	f104 028a 	add.w	r2, r4, #138	; 0x8a
 8018eaa:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8018eae:	2111      	movs	r1, #17
 8018eb0:	f7ff ff82 	bl	8018db8 <cellular_api_fill_string>
                             p_cellular_info->imei.value);

    /* Network attachment timeout */
    p_cellular_info->nwk_attachment_timeout = datacache_cellular_param.attachment_timeout;
 8018eb4:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8018eb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    p_cellular_info->nwk_inactivity_timeout = datacache_cellular_param.lp_inactivity_timeout;
 8018eba:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
 8018ebc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0

    /* Mobile Network Operator Name returned by network*/
    cellular_api_fill_string(datacache_cellular_info.mno_name, CA_MNO_NAME_SIZE_MAX,
 8018ec0:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8018ec4:	f104 03a5 	add.w	r3, r4, #165	; 0xa5
 8018ec8:	2121      	movs	r1, #33	; 0x21
 8018eca:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 8018ece:	f7ff ff73 	bl	8018db8 <cellular_api_fill_string>
                             &p_cellular_info->mno_name.len, p_cellular_info->mno_name.value);

    /* Socket modem IP address */
    p_cellular_info->ip_addr.addr = datacache_cellular_info.ip_addr.addr;
 8018ed2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8018ed4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  }
}
 8018ed8:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
 8018edc:	bd30      	pop	{r4, r5, pc}
 8018ede:	bf00      	nop
 8018ee0:	20000240 	.word	0x20000240
 8018ee4:	20008d7c 	.word	0x20008d7c
 8018ee8:	2000023c 	.word	0x2000023c
 8018eec:	20000248 	.word	0x20000248

08018ef0 <cellular_get_signal_info.part.0>:
/**
  * @brief         Get signal strength and access techno information.
  * @param[in,out] p_signal_info - The signal info structure to contain the response.
  * @retval -
  */
void cellular_get_signal_info(cellular_signal_info_t *const p_signal_info)
 8018ef0:	b510      	push	{r4, lr}
  dc_signal_info_t        datacache_signal_info;           /* Cellular infos                                          */

  if (p_signal_info != NULL)
  {
    /* Get needed data from Data Cache */
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&datacache_signal_info, sizeof(dc_signal_info_t));
 8018ef2:	4909      	ldr	r1, [pc, #36]	; (8018f18 <cellular_get_signal_info.part.0+0x28>)
void cellular_get_signal_info(cellular_signal_info_t *const p_signal_info)
 8018ef4:	b086      	sub	sp, #24
 8018ef6:	4604      	mov	r4, r0
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIGNAL_INFO, (void *)&datacache_signal_info, sizeof(dc_signal_info_t));
 8018ef8:	8809      	ldrh	r1, [r1, #0]
 8018efa:	4808      	ldr	r0, [pc, #32]	; (8018f1c <cellular_get_signal_info.part.0+0x2c>)
 8018efc:	2314      	movs	r3, #20
 8018efe:	aa01      	add	r2, sp, #4
 8018f00:	f7fe f9b8 	bl	8017274 <dc_com_read>

    /* Retrieve signal strength raw and in db and copy it to response structure */
    p_signal_info->signal_strength.raw_value = datacache_signal_info.cs_signal_level;
 8018f04:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018f08:	7023      	strb	r3, [r4, #0]
    p_signal_info->signal_strength.db_value = datacache_signal_info.cs_signal_level_db;
 8018f0a:	9b04      	ldr	r3, [sp, #16]
 8018f0c:	6063      	str	r3, [r4, #4]

    /* Get access techno from Data Cache and copy to response structure */
    p_signal_info->access_techno = datacache_signal_info.access_techno;
 8018f0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018f12:	7223      	strb	r3, [r4, #8]
  }
}
 8018f14:	b006      	add	sp, #24
 8018f16:	bd10      	pop	{r4, pc}
 8018f18:	20000246 	.word	0x20000246
 8018f1c:	20008d7c 	.word	0x20008d7c

08018f20 <cellular_get_sim_info.part.0>:
/**
  * @brief         Get SIM information.
  * @param[in,out] p_sim_info - The sim info structure to contain the response.
  * @retval -
  */
void cellular_get_sim_info(cellular_sim_info_t *const p_sim_info)
 8018f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t                   idx;                           /* Loop index                                              */

  if (p_sim_info != NULL)
  {
    /* Get needed data from Data Cache */
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&datacache_cellular_param, sizeof(dc_cellular_params_t));
 8018f24:	493c      	ldr	r1, [pc, #240]	; (8019018 <cellular_get_sim_info.part.0+0xf8>)
void cellular_get_sim_info(cellular_sim_info_t *const p_sim_info)
 8018f26:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8018f2a:	4604      	mov	r4, r0
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_CONFIG, (void *)&datacache_cellular_param, sizeof(dc_cellular_params_t));
 8018f2c:	8809      	ldrh	r1, [r1, #0]
 8018f2e:	483b      	ldr	r0, [pc, #236]	; (801901c <cellular_get_sim_info.part.0+0xfc>)
 8018f30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8018f34:	aa40      	add	r2, sp, #256	; 0x100
 8018f36:	f7fe f99d 	bl	8017274 <dc_com_read>
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_INFO, (void *)&datacache_cellular_info, sizeof(dc_cellular_info_t));
 8018f3a:	4939      	ldr	r1, [pc, #228]	; (8019020 <cellular_get_sim_info.part.0+0x100>)
 8018f3c:	4837      	ldr	r0, [pc, #220]	; (801901c <cellular_get_sim_info.part.0+0xfc>)
 8018f3e:	8809      	ldrh	r1, [r1, #0]
 8018f40:	23dc      	movs	r3, #220	; 0xdc
 8018f42:	aa09      	add	r2, sp, #36	; 0x24
 8018f44:	f7fe f996 	bl	8017274 <dc_com_read>
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_SIM_INFO, (void *)&datacache_sim_info, sizeof(dc_sim_info_t));
 8018f48:	4936      	ldr	r1, [pc, #216]	; (8019024 <cellular_get_sim_info.part.0+0x104>)
 8018f4a:	4834      	ldr	r0, [pc, #208]	; (801901c <cellular_get_sim_info.part.0+0xfc>)
 8018f4c:	8809      	ldrh	r1, [r1, #0]
 8018f4e:	2320      	movs	r3, #32
 8018f50:	aa01      	add	r2, sp, #4
 8018f52:	f7fe f98f 	bl	8017274 <dc_com_read>

    /* Fill response structure */
    /* ICCID of SIM card */
    cellular_api_fill_string(datacache_cellular_info.iccid, CA_ICCID_SIZE_MAX, &p_sim_info->iccid.len,
 8018f56:	1c63      	adds	r3, r4, #1
 8018f58:	4622      	mov	r2, r4
 8018f5a:	2115      	movs	r1, #21
 8018f5c:	a839      	add	r0, sp, #228	; 0xe4
 8018f5e:	f7ff ff2b 	bl	8018db8 <cellular_api_fill_string>
                             p_sim_info->iccid.value);

    /* Actual IMSI used */
    cellular_api_fill_string(datacache_sim_info.imsi, CA_IMSI_SIZE_MAX, &p_sim_info->imsi.len, p_sim_info->imsi.value);
 8018f62:	f104 0317 	add.w	r3, r4, #23
 8018f66:	f104 0216 	add.w	r2, r4, #22
 8018f6a:	2110      	movs	r1, #16
 8018f6c:	f10d 000d 	add.w	r0, sp, #13
 8018f70:	f7ff ff22 	bl	8018db8 <cellular_api_fill_string>

    /* Current index of sim used */
    p_sim_info->sim_index = datacache_sim_info.index_slot;
 8018f74:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018f78:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27

    /* Number of sim slots */
    p_sim_info->sim_slot_nb = datacache_cellular_param.sim_slot_nb;
 8018f7c:	f89d 3109 	ldrb.w	r3, [sp, #265]	; 0x109
 8018f80:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    /* Parse all sim slots to get info */
    for (idx = 0; idx < datacache_cellular_param.sim_slot_nb; idx++)
 8018f84:	2600      	movs	r6, #0
    {
      /* Sim slot type */
      p_sim_info->sim_slot_type[idx] = datacache_cellular_param.sim_slot[idx].sim_slot_type;
 8018f86:	2768      	movs	r7, #104	; 0x68
    for (idx = 0; idx < datacache_cellular_param.sim_slot_nb; idx++)
 8018f88:	f89d 2109 	ldrb.w	r2, [sp, #265]	; 0x109
 8018f8c:	b2f3      	uxtb	r3, r6
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d803      	bhi.n	8018f9a <cellular_get_sim_info.part.0+0x7a>
      /* Password for APN */
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].password, CA_PASSWORD_SIZE_MAX,
                               &p_sim_info->pdn[idx].password.len, p_sim_info->pdn[idx].password.value);
    } /* For loop */
  }
}
 8018f92:	f50d 7d2c 	add.w	sp, sp, #688	; 0x2b0
 8018f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      p_sim_info->sim_slot_type[idx] = datacache_cellular_param.sim_slot[idx].sim_slot_type;
 8018f9a:	fb07 f503 	mul.w	r5, r7, r3
 8018f9e:	aa40      	add	r2, sp, #256	; 0x100
 8018fa0:	442a      	add	r2, r5
 8018fa2:	18e1      	adds	r1, r4, r3
 8018fa4:	7a90      	ldrb	r0, [r2, #10]
 8018fa6:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
      p_sim_info->sim_status[idx] = datacache_sim_info.sim_status[idx];
 8018faa:	a801      	add	r0, sp, #4
 8018fac:	4403      	add	r3, r0
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].apn, CA_APN_SIZE_MAX,
 8018fae:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
      p_sim_info->sim_status[idx] = datacache_sim_info.sim_status[idx];
 8018fb2:	7edb      	ldrb	r3, [r3, #27]
 8018fb4:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
      p_sim_info->pdn[idx].apn_send_to_modem = datacache_cellular_param.sim_slot[idx].apnSendToModem;
 8018fb8:	1963      	adds	r3, r4, r5
 8018fba:	7ad1      	ldrb	r1, [r2, #11]
      p_sim_info->pdn[idx].cid = datacache_cellular_param.sim_slot[idx].cid;
 8018fbc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
      p_sim_info->pdn[idx].apn_send_to_modem = datacache_cellular_param.sim_slot[idx].apnSendToModem;
 8018fc0:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
      p_sim_info->pdn[idx].cid = datacache_cellular_param.sim_slot[idx].cid;
 8018fc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].apn, CA_APN_SIZE_MAX,
 8018fc8:	f105 000d 	add.w	r0, r5, #13
                               &p_sim_info->pdn[idx].apn.len, p_sim_info->pdn[idx].apn.value);
 8018fcc:	f105 032e 	add.w	r3, r5, #46	; 0x2e
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].apn, CA_APN_SIZE_MAX,
 8018fd0:	f105 022d 	add.w	r2, r5, #45	; 0x2d
 8018fd4:	4460      	add	r0, ip
 8018fd6:	4423      	add	r3, r4
 8018fd8:	4422      	add	r2, r4
 8018fda:	2121      	movs	r1, #33	; 0x21
 8018fdc:	f7ff feec 	bl	8018db8 <cellular_api_fill_string>
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].username, CA_USERNAME_SIZE_MAX,
 8018fe0:	f105 0850 	add.w	r8, r5, #80	; 0x50
 8018fe4:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 8018fe8:	f105 024f 	add.w	r2, r5, #79	; 0x4f
 8018fec:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8018ff0:	4460      	add	r0, ip
 8018ff2:	eb04 0308 	add.w	r3, r4, r8
 8018ff6:	4422      	add	r2, r4
 8018ff8:	2121      	movs	r1, #33	; 0x21
 8018ffa:	f7ff fedd 	bl	8018db8 <cellular_api_fill_string>
                               &p_sim_info->pdn[idx].password.len, p_sim_info->pdn[idx].password.value);
 8018ffe:	f105 0372 	add.w	r3, r5, #114	; 0x72
      cellular_api_fill_string(datacache_cellular_param.sim_slot[idx].password, CA_PASSWORD_SIZE_MAX,
 8019002:	f105 0271 	add.w	r2, r5, #113	; 0x71
 8019006:	a840      	add	r0, sp, #256	; 0x100
 8019008:	4423      	add	r3, r4
 801900a:	4422      	add	r2, r4
 801900c:	2121      	movs	r1, #33	; 0x21
 801900e:	4440      	add	r0, r8
 8019010:	f7ff fed2 	bl	8018db8 <cellular_api_fill_string>
    for (idx = 0; idx < datacache_cellular_param.sim_slot_nb; idx++)
 8019014:	3601      	adds	r6, #1
 8019016:	e7b7      	b.n	8018f88 <cellular_get_sim_info.part.0+0x68>
 8019018:	2000023c 	.word	0x2000023c
 801901c:	20008d7c 	.word	0x20008d7c
 8019020:	20000240 	.word	0x20000240
 8019024:	20000248 	.word	0x20000248

08019028 <cellular_get_nfmc_info.part.0>:
/**
  * @brief         Get NFMC information.
  * @param[in,out] p_nfmc_info - The nfmc info structure to contain the response.
  * @retval -
  */
void cellular_get_nfmc_info(cellular_nfmc_info_t *const p_nfmc_info)
 8019028:	b510      	push	{r4, lr}
  dc_nfmc_info_t           datacache_nfmc_info;            /* Cellular parameters used to configure the modem.        */

  if (p_nfmc_info != NULL)
  {
    /* Get needed data from Data Cache */
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void *)&datacache_nfmc_info, sizeof(dc_nfmc_info_t));
 801902a:	490d      	ldr	r1, [pc, #52]	; (8019060 <cellular_get_nfmc_info.part.0+0x38>)
void cellular_get_nfmc_info(cellular_nfmc_info_t *const p_nfmc_info)
 801902c:	b08c      	sub	sp, #48	; 0x30
 801902e:	4604      	mov	r4, r0
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_NFMC_INFO, (void *)&datacache_nfmc_info, sizeof(dc_nfmc_info_t));
 8019030:	232c      	movs	r3, #44	; 0x2c
 8019032:	aa01      	add	r2, sp, #4
 8019034:	8809      	ldrh	r1, [r1, #0]
 8019036:	480b      	ldr	r0, [pc, #44]	; (8019064 <cellular_get_nfmc_info.part.0+0x3c>)
 8019038:	f7fe f91c 	bl	8017274 <dc_com_read>

    /* NMFC parameters */
    /* NFMC enable or not */
    p_nfmc_info->enable = (datacache_nfmc_info.activate == 1U);
 801903c:	9b04      	ldr	r3, [sp, #16]
 801903e:	1e5a      	subs	r2, r3, #1
 8019040:	4253      	negs	r3, r2
 8019042:	4153      	adcs	r3, r2
 8019044:	7023      	strb	r3, [r4, #0]
    /* Number of NFMC tempo */
    p_nfmc_info->tempo_nb = CA_NFMC_VALUES_MAX_NB;
 8019046:	2307      	movs	r3, #7
 8019048:	7063      	strb	r3, [r4, #1]
    /* Get all NFMC tempo values */
    for (uint8_t i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++)
 801904a:	aa05      	add	r2, sp, #20
 801904c:	1d23      	adds	r3, r4, #4
 801904e:	3420      	adds	r4, #32
    {
      /* No need to checks if the cellular API NFMC value array index "i" exists */
      /*  CA_NFMC_VALUES_MAX_NB should be equal to CA_NFMC_VALUES_MAX_NB   */
      p_nfmc_info->tempo_values[i] = datacache_nfmc_info.tempo[i];
 8019050:	f852 1b04 	ldr.w	r1, [r2], #4
 8019054:	f843 1b04 	str.w	r1, [r3], #4
    for (uint8_t i = 0U; i < CA_NFMC_VALUES_MAX_NB ; i++)
 8019058:	42a3      	cmp	r3, r4
 801905a:	d1f9      	bne.n	8019050 <cellular_get_nfmc_info.part.0+0x28>
    }
  }
}
 801905c:	b00c      	add	sp, #48	; 0x30
 801905e:	bd10      	pop	{r4, pc}
 8019060:	20000242 	.word	0x20000242
 8019064:	20008d7c 	.word	0x20008d7c

08019068 <cellular_get_ip_info.part.0>:
/**
  * @brief         Get IP information.
  * @param[in,out] p_ip_info - The ip info structure to contain the response.
  * @retval -
  */
void cellular_get_ip_info(cellular_ip_info_t *const p_ip_info)
 8019068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  dc_nifman_info_t         datacache_nifman_info;          /* Cellular parameters used to get IP address.             */

  if (p_ip_info != NULL)
  {
    /* Get needed data from Data Cache */
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&datacache_nifman_info, sizeof(dc_nifman_info_t));
 801906a:	4906      	ldr	r1, [pc, #24]	; (8019084 <cellular_get_ip_info.part.0+0x1c>)
void cellular_get_ip_info(cellular_ip_info_t *const p_ip_info)
 801906c:	4604      	mov	r4, r0
    (void)dc_com_read(&dc_com_db, DC_CELLULAR_NIFMAN_INFO, (void *)&datacache_nifman_info, sizeof(dc_nifman_info_t));
 801906e:	8809      	ldrh	r1, [r1, #0]
 8019070:	4805      	ldr	r0, [pc, #20]	; (8019088 <cellular_get_ip_info.part.0+0x20>)
 8019072:	2310      	movs	r3, #16
 8019074:	466a      	mov	r2, sp
 8019076:	f7fe f8fd 	bl	8017274 <dc_com_read>

    /* IP parameters */
    p_ip_info->ip_addr.addr = datacache_nifman_info.ip_addr.addr;
 801907a:	9b03      	ldr	r3, [sp, #12]
 801907c:	6023      	str	r3, [r4, #0]
  }
}
 801907e:	b004      	add	sp, #16
 8019080:	bd10      	pop	{r4, pc}
 8019082:	bf00      	nop
 8019084:	20000244 	.word	0x20000244
 8019088:	20008d7c 	.word	0x20008d7c

0801908c <cellular_api_general_data_cache_callback>:
    if (datacache_event_id == DC_CELLULAR_INFO)
 801908c:	4b28      	ldr	r3, [pc, #160]	; (8019130 <cellular_api_general_data_cache_callback+0xa4>)
 801908e:	881b      	ldrh	r3, [r3, #0]
 8019090:	4283      	cmp	r3, r0
{
 8019092:	b510      	push	{r4, lr}
    if (datacache_event_id == DC_CELLULAR_INFO)
 8019094:	d10d      	bne.n	80190b2 <cellular_api_general_data_cache_callback+0x26>
      if (cellular_api_registration_cb[idx].cellular_info_cb != NULL)
 8019096:	4c27      	ldr	r4, [pc, #156]	; (8019134 <cellular_api_general_data_cache_callback+0xa8>)
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d047      	beq.n	801912e <cellular_api_general_data_cache_callback+0xa2>
  if (p_cellular_info != NULL)
 801909e:	4826      	ldr	r0, [pc, #152]	; (8019138 <cellular_api_general_data_cache_callback+0xac>)
 80190a0:	f7ff febe 	bl	8018e20 <cellular_get_cellular_info.part.0>
        cellular_api_registration_cb[idx].cellular_info_cb(CA_CELLULAR_INFO_EVENT, &cellular_info,
 80190a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80190a8:	4923      	ldr	r1, [pc, #140]	; (8019138 <cellular_api_general_data_cache_callback+0xac>)
 80190aa:	2001      	movs	r0, #1
}
 80190ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        cellular_api_registration_cb[idx].cellular_ip_info_cb \
 80190b0:	4718      	bx	r3
    else if (datacache_event_id == DC_CELLULAR_SIGNAL_INFO)
 80190b2:	4b22      	ldr	r3, [pc, #136]	; (801913c <cellular_api_general_data_cache_callback+0xb0>)
 80190b4:	881b      	ldrh	r3, [r3, #0]
 80190b6:	4283      	cmp	r3, r0
 80190b8:	d10b      	bne.n	80190d2 <cellular_api_general_data_cache_callback+0x46>
      if (cellular_api_registration_cb[idx].cellular_signal_info_cb != NULL)
 80190ba:	4c1e      	ldr	r4, [pc, #120]	; (8019134 <cellular_api_general_data_cache_callback+0xa8>)
 80190bc:	68a3      	ldr	r3, [r4, #8]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d035      	beq.n	801912e <cellular_api_general_data_cache_callback+0xa2>
  if (p_signal_info != NULL)
 80190c2:	481f      	ldr	r0, [pc, #124]	; (8019140 <cellular_api_general_data_cache_callback+0xb4>)
 80190c4:	f7ff ff14 	bl	8018ef0 <cellular_get_signal_info.part.0>
        cellular_api_registration_cb[idx].cellular_signal_info_cb \
 80190c8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80190cc:	491c      	ldr	r1, [pc, #112]	; (8019140 <cellular_api_general_data_cache_callback+0xb4>)
 80190ce:	2002      	movs	r0, #2
 80190d0:	e7ec      	b.n	80190ac <cellular_api_general_data_cache_callback+0x20>
    else if (datacache_event_id == DC_CELLULAR_SIM_INFO)
 80190d2:	4b1c      	ldr	r3, [pc, #112]	; (8019144 <cellular_api_general_data_cache_callback+0xb8>)
 80190d4:	881b      	ldrh	r3, [r3, #0]
 80190d6:	4283      	cmp	r3, r0
 80190d8:	d10a      	bne.n	80190f0 <cellular_api_general_data_cache_callback+0x64>
      if (cellular_api_registration_cb[idx].cellular_sim_info_cb != NULL)
 80190da:	4c16      	ldr	r4, [pc, #88]	; (8019134 <cellular_api_general_data_cache_callback+0xa8>)
 80190dc:	6923      	ldr	r3, [r4, #16]
 80190de:	b333      	cbz	r3, 801912e <cellular_api_general_data_cache_callback+0xa2>
  if (p_sim_info != NULL)
 80190e0:	4819      	ldr	r0, [pc, #100]	; (8019148 <cellular_api_general_data_cache_callback+0xbc>)
 80190e2:	f7ff ff1d 	bl	8018f20 <cellular_get_sim_info.part.0>
        cellular_api_registration_cb[idx].cellular_sim_info_cb \
 80190e6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80190ea:	4917      	ldr	r1, [pc, #92]	; (8019148 <cellular_api_general_data_cache_callback+0xbc>)
 80190ec:	2003      	movs	r0, #3
 80190ee:	e7dd      	b.n	80190ac <cellular_api_general_data_cache_callback+0x20>
    else if (datacache_event_id == DC_CELLULAR_NFMC_INFO)
 80190f0:	4b16      	ldr	r3, [pc, #88]	; (801914c <cellular_api_general_data_cache_callback+0xc0>)
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	4283      	cmp	r3, r0
 80190f6:	d10a      	bne.n	801910e <cellular_api_general_data_cache_callback+0x82>
      if (cellular_api_registration_cb[idx].cellular_nfmc_info_cb != NULL)
 80190f8:	4c0e      	ldr	r4, [pc, #56]	; (8019134 <cellular_api_general_data_cache_callback+0xa8>)
 80190fa:	69a3      	ldr	r3, [r4, #24]
 80190fc:	b1bb      	cbz	r3, 801912e <cellular_api_general_data_cache_callback+0xa2>
  if (p_nfmc_info != NULL)
 80190fe:	4814      	ldr	r0, [pc, #80]	; (8019150 <cellular_api_general_data_cache_callback+0xc4>)
 8019100:	f7ff ff92 	bl	8019028 <cellular_get_nfmc_info.part.0>
        cellular_api_registration_cb[idx].cellular_nfmc_info_cb \
 8019104:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8019108:	4911      	ldr	r1, [pc, #68]	; (8019150 <cellular_api_general_data_cache_callback+0xc4>)
 801910a:	2004      	movs	r0, #4
 801910c:	e7ce      	b.n	80190ac <cellular_api_general_data_cache_callback+0x20>
    else if (datacache_event_id == DC_CELLULAR_NIFMAN_INFO)
 801910e:	4b11      	ldr	r3, [pc, #68]	; (8019154 <cellular_api_general_data_cache_callback+0xc8>)
 8019110:	881b      	ldrh	r3, [r3, #0]
 8019112:	4283      	cmp	r3, r0
 8019114:	d10a      	bne.n	801912c <cellular_api_general_data_cache_callback+0xa0>
      if (cellular_api_registration_cb[idx].cellular_ip_info_cb != NULL)
 8019116:	4c07      	ldr	r4, [pc, #28]	; (8019134 <cellular_api_general_data_cache_callback+0xa8>)
 8019118:	6a23      	ldr	r3, [r4, #32]
 801911a:	b143      	cbz	r3, 801912e <cellular_api_general_data_cache_callback+0xa2>
  if (p_ip_info != NULL)
 801911c:	480e      	ldr	r0, [pc, #56]	; (8019158 <cellular_api_general_data_cache_callback+0xcc>)
 801911e:	f7ff ffa3 	bl	8019068 <cellular_get_ip_info.part.0>
        cellular_api_registration_cb[idx].cellular_ip_info_cb \
 8019122:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8019126:	490c      	ldr	r1, [pc, #48]	; (8019158 <cellular_api_general_data_cache_callback+0xcc>)
 8019128:	2005      	movs	r0, #5
 801912a:	e7bf      	b.n	80190ac <cellular_api_general_data_cache_callback+0x20>
      __NOP(); /* Nothing to do */
 801912c:	bf00      	nop
}
 801912e:	bd10      	pop	{r4, pc}
 8019130:	20000240 	.word	0x20000240
 8019134:	2000433c 	.word	0x2000433c
 8019138:	20004364 	.word	0x20004364
 801913c:	20000246 	.word	0x20000246
 8019140:	20004454 	.word	0x20004454
 8019144:	20000248 	.word	0x20000248
 8019148:	20004460 	.word	0x20004460
 801914c:	20000242 	.word	0x20000242
 8019150:	20004434 	.word	0x20004434
 8019154:	20000244 	.word	0x20000244
 8019158:	20004430 	.word	0x20004430

0801915c <cellular_init>:
{
 801915c:	b530      	push	{r4, r5, lr}
 801915e:	b08f      	sub	sp, #60	; 0x3c
  traceIF_init();
 8019160:	f7ff fa3a 	bl	80185d8 <traceIF_init>
    PRINT_FORCE("\n\r===== X-Cube-Cellular version : %s =====\n\r", cellular_version);
 8019164:	4c16      	ldr	r4, [pc, #88]	; (80191c0 <cellular_init+0x64>)
    (void) sprintf((CRC_CHAR_t *)p_ret_version, "%.*s-%d.%d.%d",
 8019166:	4917      	ldr	r1, [pc, #92]	; (80191c4 <cellular_init+0x68>)
 8019168:	2500      	movs	r5, #0
 801916a:	2306      	movs	r3, #6
 801916c:	9300      	str	r3, [sp, #0]
 801916e:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8019172:	4b15      	ldr	r3, [pc, #84]	; (80191c8 <cellular_init+0x6c>)
 8019174:	220f      	movs	r2, #15
 8019176:	a805      	add	r0, sp, #20
 8019178:	f003 fe9e 	bl	801ceb8 <sprintf>
    PRINT_FORCE("\n\r===== X-Cube-Cellular version : %s =====\n\r", cellular_version);
 801917c:	aa05      	add	r2, sp, #20
 801917e:	4913      	ldr	r1, [pc, #76]	; (80191cc <cellular_init+0x70>)
 8019180:	4620      	mov	r0, r4
 8019182:	f003 fe99 	bl	801ceb8 <sprintf>
 8019186:	4620      	mov	r0, r4
 8019188:	f7fe fed4 	bl	8017f34 <crs_strlen>
 801918c:	4622      	mov	r2, r4
 801918e:	b283      	uxth	r3, r0
 8019190:	2101      	movs	r1, #1
 8019192:	4628      	mov	r0, r5
 8019194:	f7fe ff0c 	bl	8017fb0 <traceIF_itmPrint>
 8019198:	4620      	mov	r0, r4
 801919a:	f7fe fecb 	bl	8017f34 <crs_strlen>
 801919e:	4621      	mov	r1, r4
 80191a0:	b282      	uxth	r2, r0
 80191a2:	4628      	mov	r0, r5
 80191a4:	f7ff f944 	bl	8018430 <traceIF_uartPrintForce>
  CMD_init();
 80191a8:	f002 fd74 	bl	801bc94 <CMD_init>
  (void)dc_com_init(&dc_com_db);
 80191ac:	4808      	ldr	r0, [pc, #32]	; (80191d0 <cellular_init+0x74>)
 80191ae:	f7fe f897 	bl	80172e0 <dc_com_init>
  (void)com_init();
 80191b2:	f7ff fadb 	bl	801876c <com_init>
  (void)CST_cellular_service_init();
 80191b6:	f7fc fb13 	bl	80157e0 <CST_cellular_service_init>
}
 80191ba:	b00f      	add	sp, #60	; 0x3c
 80191bc:	bd30      	pop	{r4, r5, pc}
 80191be:	bf00      	nop
 80191c0:	20008df8 	.word	0x20008df8
 80191c4:	0802c1a4 	.word	0x0802c1a4
 80191c8:	0802c194 	.word	0x0802c194
 80191cc:	0802c1b2 	.word	0x0802c1b2
 80191d0:	20008d7c 	.word	0x20008d7c

080191d4 <cellular_start>:
{
 80191d4:	b508      	push	{r3, lr}
  traceIF_start();
 80191d6:	f7ff fa09 	bl	80185ec <traceIF_start>
  CMD_start();
 80191da:	f002 fdab 	bl	801bd34 <CMD_start>
  dc_com_start(&dc_com_db);
 80191de:	4805      	ldr	r0, [pc, #20]	; (80191f4 <cellular_start+0x20>)
 80191e0:	f7fe f896 	bl	8017310 <dc_com_start>
  (void)com_start();
 80191e4:	f7ff fad4 	bl	8018790 <com_start>
  (void)CST_cellular_service_start();
 80191e8:	f7fc fb48 	bl	801587c <CST_cellular_service_start>
}
 80191ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void)CST_radio_on();
 80191f0:	f7fb bb14 	b.w	801481c <CST_radio_on>
 80191f4:	20008d7c 	.word	0x20008d7c

080191f8 <cellular_modem_stop>:
{
 80191f8:	b530      	push	{r4, r5, lr}
  if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state)) == DC_COM_OK)
 80191fa:	4d0d      	ldr	r5, [pc, #52]	; (8019230 <cellular_modem_stop+0x38>)
 80191fc:	480d      	ldr	r0, [pc, #52]	; (8019234 <cellular_modem_stop+0x3c>)
 80191fe:	8829      	ldrh	r1, [r5, #0]
{
 8019200:	b085      	sub	sp, #20
  if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state)) == DC_COM_OK)
 8019202:	230c      	movs	r3, #12
 8019204:	aa01      	add	r2, sp, #4
 8019206:	f7fe f835 	bl	8017274 <dc_com_read>
 801920a:	b178      	cbz	r0, 801922c <cellular_modem_stop+0x34>
    target_state.rt_state     = DC_SERVICE_ON;
 801920c:	f240 1307 	movw	r3, #263	; 0x107
 8019210:	f8ad 300c 	strh.w	r3, [sp, #12]
    target_state.target_state = DC_TARGET_STATE_OFF;
 8019214:	2400      	movs	r4, #0
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state));
 8019216:	8829      	ldrh	r1, [r5, #0]
 8019218:	4806      	ldr	r0, [pc, #24]	; (8019234 <cellular_modem_stop+0x3c>)
    target_state.target_state = DC_TARGET_STATE_OFF;
 801921a:	f88d 400e 	strb.w	r4, [sp, #14]
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state));
 801921e:	230c      	movs	r3, #12
 8019220:	aa01      	add	r2, sp, #4
 8019222:	f7fd ffc3 	bl	80171ac <dc_com_write>
  cellular_result_t ret = CELLULAR_SUCCESS;
 8019226:	4620      	mov	r0, r4
}
 8019228:	b005      	add	sp, #20
 801922a:	bd30      	pop	{r4, r5, pc}
    ret = CELLULAR_ERR_INTERNAL;
 801922c:	2005      	movs	r0, #5
 801922e:	e7fb      	b.n	8019228 <cellular_modem_stop+0x30>
 8019230:	2000024a 	.word	0x2000024a
 8019234:	20008d7c 	.word	0x20008d7c

08019238 <cellular_connect>:
{
 8019238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (dc_com_read(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state)) == DC_COM_OK)
 801923a:	4c0d      	ldr	r4, [pc, #52]	; (8019270 <cellular_connect+0x38>)
 801923c:	480d      	ldr	r0, [pc, #52]	; (8019274 <cellular_connect+0x3c>)
 801923e:	8821      	ldrh	r1, [r4, #0]
 8019240:	230c      	movs	r3, #12
 8019242:	aa01      	add	r2, sp, #4
 8019244:	f7fe f816 	bl	8017274 <dc_com_read>
 8019248:	b178      	cbz	r0, 801926a <cellular_connect+0x32>
    target_state.rt_state     = DC_SERVICE_ON;
 801924a:	f240 1307 	movw	r3, #263	; 0x107
 801924e:	f8ad 300c 	strh.w	r3, [sp, #12]
    target_state.target_state = DC_TARGET_STATE_FULL;
 8019252:	2302      	movs	r3, #2
 8019254:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)dc_com_write(&dc_com_db, DC_CELLULAR_TARGET_STATE_CMD, (void *)&target_state, sizeof(target_state));
 8019258:	8821      	ldrh	r1, [r4, #0]
 801925a:	4806      	ldr	r0, [pc, #24]	; (8019274 <cellular_connect+0x3c>)
 801925c:	230c      	movs	r3, #12
 801925e:	aa01      	add	r2, sp, #4
 8019260:	f7fd ffa4 	bl	80171ac <dc_com_write>
  cellular_result_t ret = CELLULAR_SUCCESS;
 8019264:	2000      	movs	r0, #0
}
 8019266:	b004      	add	sp, #16
 8019268:	bd10      	pop	{r4, pc}
    ret = CELLULAR_ERR_INTERNAL;
 801926a:	2005      	movs	r0, #5
 801926c:	e7fb      	b.n	8019266 <cellular_connect+0x2e>
 801926e:	bf00      	nop
 8019270:	2000024a 	.word	0x2000024a
 8019274:	20008d7c 	.word	0x20008d7c

08019278 <cellular_get_cellular_info>:
  if (p_cellular_info != NULL)
 8019278:	b108      	cbz	r0, 801927e <cellular_get_cellular_info+0x6>
 801927a:	f7ff bdd1 	b.w	8018e20 <cellular_get_cellular_info.part.0>
}
 801927e:	4770      	bx	lr

08019280 <cellular_get_signal_info>:
  if (p_signal_info != NULL)
 8019280:	b108      	cbz	r0, 8019286 <cellular_get_signal_info+0x6>
 8019282:	f7ff be35 	b.w	8018ef0 <cellular_get_signal_info.part.0>
}
 8019286:	4770      	bx	lr

08019288 <cellular_get_sim_info>:
  if (p_sim_info != NULL)
 8019288:	b108      	cbz	r0, 801928e <cellular_get_sim_info+0x6>
 801928a:	f7ff be49 	b.w	8018f20 <cellular_get_sim_info.part.0>
}
 801928e:	4770      	bx	lr

08019290 <cellular_info_cb_registration>:
  *            CELLULAR_SUCCESS          The operation is successful.\n
  *            CELLULAR_ERR_NOMEMORY     No more memory to register the callback.\n
  *            CELLULAR_ERR_INTERNAL     Error while executing X-Cube-Cellular internal function.
  */
cellular_result_t cellular_info_cb_registration(cellular_info_cb_t cellular_info_cb, void *const p_callback_ctx)
{
 8019290:	b570      	push	{r4, r5, r6, lr}
  /* Parse the call back information to find */
  /* - If actual new call back to be registered if already registered. */
  /* - the first empty place to register the new call back */
  for (idx = 0; idx < CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB; idx++)
  {
    if (cellular_api_registration_cb[idx].cellular_info_cb == cellular_info_cb)
 8019292:	4d0b      	ldr	r5, [pc, #44]	; (80192c0 <cellular_info_cb_registration+0x30>)
    {
      /* Actual new call back already exists, do not re-register it */
      ret = CELLULAR_ERR_BADARGUMENT;
    }
    if ((cellular_api_registration_cb[idx].cellular_info_cb == NULL) && (free_idx == 0xFFU))
 8019294:	682b      	ldr	r3, [r5, #0]
      /* found the first free empty place to store new call back. store the index */
      free_idx = idx;
    }
  }

  if ((free_idx >= CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB))
 8019296:	2b00      	cmp	r3, #0
 8019298:	bf14      	ite	ne
 801929a:	23ff      	movne	r3, #255	; 0xff
 801929c:	2300      	moveq	r3, #0
{
 801929e:	4604      	mov	r4, r0
 80192a0:	460e      	mov	r6, r1
  if ((free_idx >= CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB))
 80192a2:	b10b      	cbz	r3, 80192a8 <cellular_info_cb_registration+0x18>
  {
    /* did not found an empty place to store new call back */
    ret = CELLULAR_ERR_INTERNAL;
 80192a4:	2005      	movs	r0, #5
  {
    __NOP(); /* Nothing to do */
  }

  return (ret);
}
 80192a6:	bd70      	pop	{r4, r5, r6, pc}
  else if (ret == CELLULAR_SUCCESS)
 80192a8:	b130      	cbz	r0, 80192b8 <cellular_info_cb_registration+0x28>
    if (cellular_api_register_general_cb() == CELLULAR_SUCCESS)
 80192aa:	f7ff fd9b 	bl	8018de4 <cellular_api_register_general_cb>
 80192ae:	2800      	cmp	r0, #0
 80192b0:	d1f8      	bne.n	80192a4 <cellular_info_cb_registration+0x14>
      cellular_api_registration_cb[free_idx].p_cellular_info_cb_ctx = p_callback_ctx;
 80192b2:	e9c5 4600 	strd	r4, r6, [r5]
 80192b6:	e7f6      	b.n	80192a6 <cellular_info_cb_registration+0x16>
    __NOP(); /* Nothing to do */
 80192b8:	bf00      	nop
 80192ba:	2001      	movs	r0, #1
 80192bc:	e7f3      	b.n	80192a6 <cellular_info_cb_registration+0x16>
 80192be:	bf00      	nop
 80192c0:	2000433c 	.word	0x2000433c

080192c4 <cellular_ip_info_cb_registration>:
  *            CELLULAR_SUCCESS          The operation is successful.\n
  *            CELLULAR_ERR_NOMEMORY     No more memory to register the callback.
  */
cellular_result_t cellular_ip_info_cb_registration(cellular_ip_info_cb_t cellular_ip_info_cb,
                                                   void *const p_callback_ctx)
{
 80192c4:	b570      	push	{r4, r5, r6, lr}
  /* Parse the call back information to find */
  /* - If actual new call back to be registered if already registered. */
  /* - the first empty place to register the new call back */
  for (idx = 0; idx < CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB; idx++)
  {
    if (cellular_api_registration_cb[idx].cellular_ip_info_cb == cellular_ip_info_cb)
 80192c6:	4d0b      	ldr	r5, [pc, #44]	; (80192f4 <cellular_ip_info_cb_registration+0x30>)
    {
      /* Actual new call back already exists, do not re-register it */
      ret = CELLULAR_ERR_BADARGUMENT;
    }
    if ((cellular_api_registration_cb[idx].cellular_ip_info_cb == NULL) && (free_idx == 0xFFU))
 80192c8:	6a2b      	ldr	r3, [r5, #32]
      /* found the first free empty place to store new call back. store the index */
      free_idx = idx;
    }
  }

  if ((free_idx >= CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB))
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	bf14      	ite	ne
 80192ce:	23ff      	movne	r3, #255	; 0xff
 80192d0:	2300      	moveq	r3, #0
{
 80192d2:	4604      	mov	r4, r0
 80192d4:	460e      	mov	r6, r1
  if ((free_idx >= CELLULAR_CONCURENT_REGISTRATION_CB_MAX_NB))
 80192d6:	b10b      	cbz	r3, 80192dc <cellular_ip_info_cb_registration+0x18>
  {
    /* did not found an empty place to store new call back */
    ret = CELLULAR_ERR_INTERNAL;
 80192d8:	2005      	movs	r0, #5
  {
    __NOP(); /* Nothing to do */
  }

  return (ret);
}
 80192da:	bd70      	pop	{r4, r5, r6, pc}
  else if (ret == CELLULAR_SUCCESS)
 80192dc:	b130      	cbz	r0, 80192ec <cellular_ip_info_cb_registration+0x28>
    if (cellular_api_register_general_cb() == CELLULAR_SUCCESS)
 80192de:	f7ff fd81 	bl	8018de4 <cellular_api_register_general_cb>
 80192e2:	2800      	cmp	r0, #0
 80192e4:	d1f8      	bne.n	80192d8 <cellular_ip_info_cb_registration+0x14>
      cellular_api_registration_cb[free_idx].p_cellular_ip_info_cb_ctx = p_callback_ctx;
 80192e6:	e9c5 4608 	strd	r4, r6, [r5, #32]
 80192ea:	e7f6      	b.n	80192da <cellular_ip_info_cb_registration+0x16>
    __NOP(); /* Nothing to do */
 80192ec:	bf00      	nop
 80192ee:	2001      	movs	r0, #1
 80192f0:	e7f3      	b.n	80192da <cellular_ip_info_cb_registration+0x16>
 80192f2:	bf00      	nop
 80192f4:	2000433c 	.word	0x2000433c

080192f8 <osKernelStart>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osKernelStart(void) {
 80192f8:	b508      	push	{r3, lr}
	vTaskStartScheduler();
 80192fa:	f001 fa57 	bl	801a7ac <vTaskStartScheduler>

	return osOK;
}
 80192fe:	2000      	movs	r0, #0
 8019300:	bd08      	pop	{r3, pc}

08019302 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019302:	f3ef 8305 	mrs	r3, IPSR
 * @param  None
 * @retval None
 * @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
 */
uint32_t osKernelSysTick(void) {
	if (inHandlerMode()) {
 8019306:	b10b      	cbz	r3, 801930c <osKernelSysTick+0xa>
		return xTaskGetTickCountFromISR();
 8019308:	f001 ba9e 	b.w	801a848 <xTaskGetTickCountFromISR>
	} else {
		return xTaskGetTickCount();
 801930c:	f001 ba96 	b.w	801a83c <xTaskGetTickCount>

08019310 <osThreadCreate>:
 * @param  thread_def    thread definition referenced with \ref osThread.
 * @param  argument      pointer that is passed to the thread function as start argument.
 * @retval thread ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
 */
osThreadId osThreadCreate(const osThreadDef_t *thread_def, void *argument) {
 8019310:	b530      	push	{r4, r5, lr}
 8019312:	4604      	mov	r4, r0
 8019314:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
	if (xTaskCreate((TaskFunction_t) thread_def->pthread,
 8019316:	8a22      	ldrh	r2, [r4, #16]
 8019318:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
	if (priority != osPriorityError) {
 801931c:	2c84      	cmp	r4, #132	; 0x84
		fpriority += (priority - osPriorityIdle);
 801931e:	bf14      	ite	ne
 8019320:	3403      	addne	r4, #3
	unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8019322:	2400      	moveq	r4, #0
	if (xTaskCreate((TaskFunction_t) thread_def->pthread,
 8019324:	ad03      	add	r5, sp, #12
osThreadId osThreadCreate(const osThreadDef_t *thread_def, void *argument) {
 8019326:	460b      	mov	r3, r1
			(const portCHAR*) thread_def->name, thread_def->stacksize, argument,
 8019328:	e9d0 1000 	ldrd	r1, r0, [r0]
	if (xTaskCreate((TaskFunction_t) thread_def->pthread,
 801932c:	e9cd 4500 	strd	r4, r5, [sp]
 8019330:	f001 f94c 	bl	801a5cc <xTaskCreate>
 8019334:	2801      	cmp	r0, #1
			makeFreeRtosPriority(thread_def->tpriority), &handle) != pdPASS) {
		return NULL;
	}
#endif

	return handle;
 8019336:	bf0c      	ite	eq
 8019338:	9803      	ldreq	r0, [sp, #12]
		return NULL;
 801933a:	2000      	movne	r0, #0
}
 801933c:	b005      	add	sp, #20
 801933e:	bd30      	pop	{r4, r5, pc}

08019340 <osDelay>:
/**
 * @brief   Wait for Timeout (Time Delay)
 * @param   millisec      time delay value
 * @retval  status code that indicates the execution status of the function.
 */
osStatus osDelay(uint32_t millisec) {
 8019340:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
	TickType_t ticks = millisec / portTICK_PERIOD_MS;

	vTaskDelay(ticks ? ticks : 1); /* Minimum delay = 1 tick */
 8019342:	2801      	cmp	r0, #1
 8019344:	bf38      	it	cc
 8019346:	2001      	movcc	r0, #1
 8019348:	f001 fb96 	bl	801aa78 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801934c:	2000      	movs	r0, #0
 801934e:	bd08      	pop	{r3, pc}

08019350 <osTimerCreate>:
 * @param  argument      argument to the timer call back function.
 * @retval  timer ID for reference by other functions or NULL in case of error.
 * @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
 */
osTimerId osTimerCreate(const osTimerDef_t *timer_def, os_timer_type type,
		void *argument) {
 8019350:	b507      	push	{r0, r1, r2, lr}
 8019352:	4613      	mov	r3, r2
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
	return xTimerCreate((const char*) "",
 8019354:	3901      	subs	r1, #1
 8019356:	6802      	ldr	r2, [r0, #0]
 8019358:	9200      	str	r2, [sp, #0]
 801935a:	424a      	negs	r2, r1
 801935c:	414a      	adcs	r2, r1
 801935e:	4803      	ldr	r0, [pc, #12]	; (801936c <osTimerCreate+0x1c>)
 8019360:	2101      	movs	r1, #1
 8019362:	f001 fe41 	bl	801afe8 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 8019366:	b003      	add	sp, #12
 8019368:	f85d fb04 	ldr.w	pc, [sp], #4
 801936c:	08028e1b 	.word	0x08028e1b

08019370 <osTimerStart>:
 * @param  timer_id      timer ID obtained by \ref osTimerCreate.
 * @param  millisec      time delay value of the timer.
 * @retval  status code that indicates the execution status of the function
 * @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
 */
osStatus osTimerStart(osTimerId timer_id, uint32_t millisec) {
 8019370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019372:	2901      	cmp	r1, #1
	osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
	portBASE_TYPE taskWoken = pdFALSE;
 8019374:	f04f 0400 	mov.w	r4, #0
 8019378:	460a      	mov	r2, r1
 801937a:	9403      	str	r4, [sp, #12]
	TickType_t ticks = millisec / portTICK_PERIOD_MS;

	if (ticks == 0)
 801937c:	bf38      	it	cc
 801937e:	2201      	movcc	r2, #1
 8019380:	f3ef 8305 	mrs	r3, IPSR
		ticks = 1;

	if (inHandlerMode()) {
 8019384:	b1a3      	cbz	r3, 80193b0 <osTimerStart+0x40>
		if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS) {
 8019386:	9400      	str	r4, [sp, #0]
 8019388:	ab03      	add	r3, sp, #12
 801938a:	2109      	movs	r1, #9
 801938c:	f001 fe5a 	bl	801b044 <xTimerGenericCommand>
 8019390:	2801      	cmp	r0, #1
 8019392:	d113      	bne.n	80193bc <osTimerStart+0x4c>
			result = osErrorOS;
		} else {
			portEND_SWITCHING_ISR(taskWoken);
 8019394:	9b03      	ldr	r3, [sp, #12]
 8019396:	b913      	cbnz	r3, 801939e <osTimerStart+0x2e>
	osStatus result = osOK;
 8019398:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
	return result;
}
 801939a:	b004      	add	sp, #16
 801939c:	bd10      	pop	{r4, pc}
			portEND_SWITCHING_ISR(taskWoken);
 801939e:	4b08      	ldr	r3, [pc, #32]	; (80193c0 <osTimerStart+0x50>)
 80193a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193a4:	601a      	str	r2, [r3, #0]
 80193a6:	f3bf 8f4f 	dsb	sy
 80193aa:	f3bf 8f6f 	isb	sy
 80193ae:	e7f3      	b.n	8019398 <osTimerStart+0x28>
		if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	2104      	movs	r1, #4
 80193b4:	f001 fe46 	bl	801b044 <xTimerGenericCommand>
 80193b8:	2801      	cmp	r0, #1
 80193ba:	d0ed      	beq.n	8019398 <osTimerStart+0x28>
			result = osErrorOS;
 80193bc:	20ff      	movs	r0, #255	; 0xff
	return result;
 80193be:	e7ec      	b.n	801939a <osTimerStart+0x2a>
 80193c0:	e000ed04 	.word	0xe000ed04

080193c4 <osTimerStop>:
 * @brief  Stop a timer.
 * @param  timer_id      timer ID obtained by \ref osTimerCreate
 * @retval  status code that indicates the execution status of the function.
 * @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
 */
osStatus osTimerStop(osTimerId timer_id) {
 80193c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
	portBASE_TYPE taskWoken = pdFALSE;
 80193c6:	2400      	movs	r4, #0
 80193c8:	9403      	str	r4, [sp, #12]
 80193ca:	f3ef 8305 	mrs	r3, IPSR

	if (inHandlerMode()) {
 80193ce:	b1ab      	cbz	r3, 80193fc <osTimerStop+0x38>
		if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80193d0:	9400      	str	r4, [sp, #0]
 80193d2:	ab03      	add	r3, sp, #12
 80193d4:	4622      	mov	r2, r4
 80193d6:	2108      	movs	r1, #8
 80193d8:	f001 fe34 	bl	801b044 <xTimerGenericCommand>
 80193dc:	2801      	cmp	r0, #1
 80193de:	d114      	bne.n	801940a <osTimerStop+0x46>
			return osErrorOS;
		}
		portEND_SWITCHING_ISR(taskWoken);
 80193e0:	9b03      	ldr	r3, [sp, #12]
 80193e2:	b913      	cbnz	r3, 80193ea <osTimerStop+0x26>
	osStatus result = osOK;
 80193e4:	2000      	movs	r0, #0
	}
#else 
  result = osErrorOS;
#endif 
	return result;
}
 80193e6:	b004      	add	sp, #16
 80193e8:	bd10      	pop	{r4, pc}
		portEND_SWITCHING_ISR(taskWoken);
 80193ea:	4b09      	ldr	r3, [pc, #36]	; (8019410 <osTimerStop+0x4c>)
 80193ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193f0:	601a      	str	r2, [r3, #0]
 80193f2:	f3bf 8f4f 	dsb	sy
 80193f6:	f3bf 8f6f 	isb	sy
 80193fa:	e7f3      	b.n	80193e4 <osTimerStop+0x20>
		if (xTimerStop(timer_id, 0) != pdPASS) {
 80193fc:	9300      	str	r3, [sp, #0]
 80193fe:	461a      	mov	r2, r3
 8019400:	2103      	movs	r1, #3
 8019402:	f001 fe1f 	bl	801b044 <xTimerGenericCommand>
 8019406:	2801      	cmp	r0, #1
 8019408:	d0ec      	beq.n	80193e4 <osTimerStop+0x20>
			result = osErrorOS;
 801940a:	20ff      	movs	r0, #255	; 0xff
 801940c:	e7eb      	b.n	80193e6 <osTimerStop+0x22>
 801940e:	bf00      	nop
 8019410:	e000ed04 	.word	0xe000ed04

08019414 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
	return xSemaphoreCreateMutex();
 8019414:	2001      	movs	r0, #1
 8019416:	f000 bd91 	b.w	8019f3c <xQueueCreateMutex>
	...

0801941c <osMutexWait>:
 * @param mutex_id      mutex ID obtained by \ref osMutexCreate.
 * @param millisec      timeout value or 0 in case of no time-out.
 * @retval  status code that indicates the execution status of the function.
 * @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
 */
osStatus osMutexWait(osMutexId mutex_id, uint32_t millisec) {
 801941c:	b513      	push	{r0, r1, r4, lr}
	TickType_t ticks;
	portBASE_TYPE taskWoken = pdFALSE;
 801941e:	2400      	movs	r4, #0
 8019420:	9401      	str	r4, [sp, #4]

	if (mutex_id == NULL) {
 8019422:	b1e0      	cbz	r0, 801945e <osMutexWait+0x42>
 8019424:	f3ef 8305 	mrs	r3, IPSR
		if (ticks == 0) {
			ticks = 1;
		}
	}

	if (inHandlerMode()) {
 8019428:	b19b      	cbz	r3, 8019452 <osMutexWait+0x36>
		if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801942a:	aa01      	add	r2, sp, #4
 801942c:	4621      	mov	r1, r4
 801942e:	f000 ffb9 	bl	801a3a4 <xQueueReceiveFromISR>
 8019432:	2801      	cmp	r0, #1
 8019434:	d111      	bne.n	801945a <osMutexWait+0x3e>
			return osErrorOS;
		}
		portEND_SWITCHING_ISR(taskWoken);
 8019436:	9b01      	ldr	r3, [sp, #4]
 8019438:	b913      	cbnz	r3, 8019440 <osMutexWait+0x24>
	} else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
		return osErrorOS;
	}

	return osOK;
 801943a:	2000      	movs	r0, #0
}
 801943c:	b002      	add	sp, #8
 801943e:	bd10      	pop	{r4, pc}
		portEND_SWITCHING_ISR(taskWoken);
 8019440:	4b08      	ldr	r3, [pc, #32]	; (8019464 <osMutexWait+0x48>)
 8019442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019446:	601a      	str	r2, [r3, #0]
 8019448:	f3bf 8f4f 	dsb	sy
 801944c:	f3bf 8f6f 	isb	sy
 8019450:	e7f3      	b.n	801943a <osMutexWait+0x1e>
	} else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8019452:	f000 fee3 	bl	801a21c <xQueueSemaphoreTake>
 8019456:	2801      	cmp	r0, #1
 8019458:	d0ef      	beq.n	801943a <osMutexWait+0x1e>
		return osErrorOS;
 801945a:	20ff      	movs	r0, #255	; 0xff
 801945c:	e7ee      	b.n	801943c <osMutexWait+0x20>
		return osErrorParameter;
 801945e:	2080      	movs	r0, #128	; 0x80
 8019460:	e7ec      	b.n	801943c <osMutexWait+0x20>
 8019462:	bf00      	nop
 8019464:	e000ed04 	.word	0xe000ed04

08019468 <osMutexRelease>:
 * @brief Release a Mutex that was obtained by \ref osMutexWait
 * @param mutex_id      mutex ID obtained by \ref osMutexCreate.
 * @retval  status code that indicates the execution status of the function.
 * @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
 */
osStatus osMutexRelease(osMutexId mutex_id) {
 8019468:	b513      	push	{r0, r1, r4, lr}
	osStatus result = osOK;
	portBASE_TYPE taskWoken = pdFALSE;
 801946a:	2400      	movs	r4, #0
 801946c:	9401      	str	r4, [sp, #4]
 801946e:	f3ef 8305 	mrs	r3, IPSR

	if (inHandlerMode()) {
 8019472:	b193      	cbz	r3, 801949a <osMutexRelease+0x32>
		if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8019474:	a901      	add	r1, sp, #4
 8019476:	f000 fddd 	bl	801a034 <xQueueGiveFromISR>
 801947a:	2801      	cmp	r0, #1
 801947c:	d113      	bne.n	80194a6 <osMutexRelease+0x3e>
			return osErrorOS;
		}
		portEND_SWITCHING_ISR(taskWoken);
 801947e:	9b01      	ldr	r3, [sp, #4]
 8019480:	b913      	cbnz	r3, 8019488 <osMutexRelease+0x20>
	osStatus result = osOK;
 8019482:	2000      	movs	r0, #0
	} else if (xSemaphoreGive(mutex_id) != pdTRUE) {
		result = osErrorOS;
	}
	return result;
}
 8019484:	b002      	add	sp, #8
 8019486:	bd10      	pop	{r4, pc}
		portEND_SWITCHING_ISR(taskWoken);
 8019488:	4b08      	ldr	r3, [pc, #32]	; (80194ac <osMutexRelease+0x44>)
 801948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801948e:	601a      	str	r2, [r3, #0]
 8019490:	f3bf 8f4f 	dsb	sy
 8019494:	f3bf 8f6f 	isb	sy
 8019498:	e7f3      	b.n	8019482 <osMutexRelease+0x1a>
	} else if (xSemaphoreGive(mutex_id) != pdTRUE) {
 801949a:	461a      	mov	r2, r3
 801949c:	4619      	mov	r1, r3
 801949e:	f000 fc9b 	bl	8019dd8 <xQueueGenericSend>
 80194a2:	2801      	cmp	r0, #1
 80194a4:	d0ed      	beq.n	8019482 <osMutexRelease+0x1a>
		result = osErrorOS;
 80194a6:	20ff      	movs	r0, #255	; 0xff
 80194a8:	e7ec      	b.n	8019484 <osMutexRelease+0x1c>
 80194aa:	bf00      	nop
 80194ac:	e000ed04 	.word	0xe000ed04

080194b0 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
	osSemaphoreId sema;

	if (count == 1) {
 80194b0:	2901      	cmp	r1, #1
		int32_t count) {
 80194b2:	b510      	push	{r4, lr}
 80194b4:	4608      	mov	r0, r1
	if (count == 1) {
 80194b6:	d10c      	bne.n	80194d2 <osSemaphoreCreate+0x22>
		vSemaphoreCreateBinary(sema);
 80194b8:	2203      	movs	r2, #3
 80194ba:	2100      	movs	r1, #0
 80194bc:	f000 fc4a 	bl	8019d54 <xQueueGenericCreate>
 80194c0:	4604      	mov	r4, r0
 80194c2:	b120      	cbz	r0, 80194ce <osSemaphoreCreate+0x1e>
 80194c4:	2300      	movs	r3, #0
 80194c6:	461a      	mov	r2, r3
 80194c8:	4619      	mov	r1, r3
 80194ca:	f000 fc85 	bl	8019dd8 <xQueueGenericSend>
#else
    return NULL;
#endif
	}
#endif
}
 80194ce:	4620      	mov	r0, r4
 80194d0:	bd10      	pop	{r4, pc}
 80194d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return xSemaphoreCreateCounting(count, count);
 80194d6:	f000 bc61 	b.w	8019d9c <xQueueCreateCountingSemaphore>
	...

080194dc <osSemaphoreWait>:
 * @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
 * @param  millisec      timeout value or 0 in case of no time-out.
 * @retval  number of available tokens, or -1 in case of incorrect parameters.
 * @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
 */
int32_t osSemaphoreWait(osSemaphoreId semaphore_id, uint32_t millisec) {
 80194dc:	b513      	push	{r0, r1, r4, lr}
	TickType_t ticks;
	portBASE_TYPE taskWoken = pdFALSE;
 80194de:	2400      	movs	r4, #0
 80194e0:	9401      	str	r4, [sp, #4]

	if (semaphore_id == NULL) {
 80194e2:	b1e0      	cbz	r0, 801951e <osSemaphoreWait+0x42>
 80194e4:	f3ef 8305 	mrs	r3, IPSR
		if (ticks == 0) {
			ticks = 1;
		}
	}

	if (inHandlerMode()) {
 80194e8:	b19b      	cbz	r3, 8019512 <osSemaphoreWait+0x36>
		if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80194ea:	aa01      	add	r2, sp, #4
 80194ec:	4621      	mov	r1, r4
 80194ee:	f000 ff59 	bl	801a3a4 <xQueueReceiveFromISR>
 80194f2:	2801      	cmp	r0, #1
 80194f4:	d111      	bne.n	801951a <osSemaphoreWait+0x3e>
			return osErrorOS;
		}
		portEND_SWITCHING_ISR(taskWoken);
 80194f6:	9b01      	ldr	r3, [sp, #4]
 80194f8:	b913      	cbnz	r3, 8019500 <osSemaphoreWait+0x24>
	} else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
		return osErrorOS;
	}

	return osOK;
 80194fa:	2000      	movs	r0, #0
}
 80194fc:	b002      	add	sp, #8
 80194fe:	bd10      	pop	{r4, pc}
		portEND_SWITCHING_ISR(taskWoken);
 8019500:	4b08      	ldr	r3, [pc, #32]	; (8019524 <osSemaphoreWait+0x48>)
 8019502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019506:	601a      	str	r2, [r3, #0]
 8019508:	f3bf 8f4f 	dsb	sy
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	e7f3      	b.n	80194fa <osSemaphoreWait+0x1e>
	} else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8019512:	f000 fe83 	bl	801a21c <xQueueSemaphoreTake>
 8019516:	2801      	cmp	r0, #1
 8019518:	d0ef      	beq.n	80194fa <osSemaphoreWait+0x1e>
		return osErrorOS;
 801951a:	20ff      	movs	r0, #255	; 0xff
 801951c:	e7ee      	b.n	80194fc <osSemaphoreWait+0x20>
		return osErrorParameter;
 801951e:	2080      	movs	r0, #128	; 0x80
 8019520:	e7ec      	b.n	80194fc <osSemaphoreWait+0x20>
 8019522:	bf00      	nop
 8019524:	e000ed04 	.word	0xe000ed04

08019528 <osSemaphoreRelease>:
 8019528:	f7ff bf9e 	b.w	8019468 <osMutexRelease>

0801952c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
	return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801952c:	e9d0 0100 	ldrd	r0, r1, [r0]
 8019530:	2200      	movs	r2, #0
 8019532:	f000 bc0f 	b.w	8019d54 <xQueueGenericCreate>
	...

08019538 <osMessagePut>:
 * @param  info      message information.
 * @param  millisec  timeout value or 0 in case of no time-out.
 * @retval status code that indicates the execution status of the function.
 * @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
 */
osStatus osMessagePut(osMessageQId queue_id, uint32_t info, uint32_t millisec) {
 8019538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	portBASE_TYPE taskWoken = pdFALSE;
 801953a:	2400      	movs	r4, #0
osStatus osMessagePut(osMessageQId queue_id, uint32_t info, uint32_t millisec) {
 801953c:	9101      	str	r1, [sp, #4]
	portBASE_TYPE taskWoken = pdFALSE;
 801953e:	9403      	str	r4, [sp, #12]
 8019540:	f3ef 8305 	mrs	r3, IPSR
	ticks = millisec / portTICK_PERIOD_MS;
	if (ticks == 0) {
		ticks = 1;
	}

	if (inHandlerMode()) {
 8019544:	b1a3      	cbz	r3, 8019570 <osMessagePut+0x38>
		if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8019546:	4623      	mov	r3, r4
 8019548:	aa03      	add	r2, sp, #12
 801954a:	a901      	add	r1, sp, #4
 801954c:	f000 fd11 	bl	8019f72 <xQueueGenericSendFromISR>
 8019550:	2801      	cmp	r0, #1
 8019552:	d115      	bne.n	8019580 <osMessagePut+0x48>
			return osErrorOS;
		}
		portEND_SWITCHING_ISR(taskWoken);
 8019554:	9b03      	ldr	r3, [sp, #12]
 8019556:	b913      	cbnz	r3, 801955e <osMessagePut+0x26>
		if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
			return osErrorOS;
		}
	}

	return osOK;
 8019558:	2000      	movs	r0, #0
}
 801955a:	b004      	add	sp, #16
 801955c:	bd10      	pop	{r4, pc}
		portEND_SWITCHING_ISR(taskWoken);
 801955e:	4b09      	ldr	r3, [pc, #36]	; (8019584 <osMessagePut+0x4c>)
 8019560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019564:	601a      	str	r2, [r3, #0]
 8019566:	f3bf 8f4f 	dsb	sy
 801956a:	f3bf 8f6f 	isb	sy
 801956e:	e7f3      	b.n	8019558 <osMessagePut+0x20>
		if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8019570:	2a01      	cmp	r2, #1
 8019572:	bf38      	it	cc
 8019574:	2201      	movcc	r2, #1
 8019576:	a901      	add	r1, sp, #4
 8019578:	f000 fc2e 	bl	8019dd8 <xQueueGenericSend>
 801957c:	2801      	cmp	r0, #1
 801957e:	d0eb      	beq.n	8019558 <osMessagePut+0x20>
			return osErrorOS;
 8019580:	20ff      	movs	r0, #255	; 0xff
 8019582:	e7ea      	b.n	801955a <osMessagePut+0x22>
 8019584:	e000ed04 	.word	0xe000ed04

08019588 <osMessageGet>:
 * @param  queue_id  message queue ID obtained with \ref osMessageCreate.
 * @param  millisec  timeout value or 0 in case of no time-out.
 * @retval event information that includes status code.
 * @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
 */
osEvent osMessageGet(osMessageQId queue_id, uint32_t millisec) {
 8019588:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	portBASE_TYPE taskWoken;
	TickType_t ticks;
	osEvent event;

	event.def.message_id = queue_id;
	event.value.v = 0;
 801958a:	2300      	movs	r3, #0
osEvent osMessageGet(osMessageQId queue_id, uint32_t millisec) {
 801958c:	4604      	mov	r4, r0
 801958e:	4616      	mov	r6, r2
 8019590:	4608      	mov	r0, r1
	event.def.message_id = queue_id;
 8019592:	9103      	str	r1, [sp, #12]
	event.value.v = 0;
 8019594:	9302      	str	r3, [sp, #8]

	if (queue_id == NULL) {
 8019596:	ad01      	add	r5, sp, #4
 8019598:	b911      	cbnz	r1, 80195a0 <osMessageGet+0x18>
		event.status = osErrorParameter;
 801959a:	2380      	movs	r3, #128	; 0x80
		}
		portEND_SWITCHING_ISR(taskWoken);
	} else {
		if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
			/* We have mail */
			event.status = osEventMessage;
 801959c:	9301      	str	r3, [sp, #4]
 801959e:	e016      	b.n	80195ce <osMessageGet+0x46>
	taskWoken = pdFALSE;
 80195a0:	9300      	str	r3, [sp, #0]
 80195a2:	f3ef 8305 	mrs	r3, IPSR
	if (inHandlerMode()) {
 80195a6:	b1cb      	cbz	r3, 80195dc <osMessageGet+0x54>
		if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80195a8:	466a      	mov	r2, sp
 80195aa:	a902      	add	r1, sp, #8
 80195ac:	f000 fefa 	bl	801a3a4 <xQueueReceiveFromISR>
			event.status = osOK;
 80195b0:	2801      	cmp	r0, #1
 80195b2:	bf0c      	ite	eq
 80195b4:	2310      	moveq	r3, #16
 80195b6:	2300      	movne	r3, #0
 80195b8:	9301      	str	r3, [sp, #4]
		portEND_SWITCHING_ISR(taskWoken);
 80195ba:	9b00      	ldr	r3, [sp, #0]
 80195bc:	b13b      	cbz	r3, 80195ce <osMessageGet+0x46>
 80195be:	4b0d      	ldr	r3, [pc, #52]	; (80195f4 <osMessageGet+0x6c>)
 80195c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195c4:	601a      	str	r2, [r3, #0]
 80195c6:	f3bf 8f4f 	dsb	sy
 80195ca:	f3bf 8f6f 	isb	sy
		} else {
			event.status = (ticks == 0) ? osOK : osEventTimeout;
		}
	}

	return event;
 80195ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80195d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80195d6:	4620      	mov	r0, r4
 80195d8:	b004      	add	sp, #16
 80195da:	bd70      	pop	{r4, r5, r6, pc}
		if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80195dc:	a902      	add	r1, sp, #8
 80195de:	f000 fd7d 	bl	801a0dc <xQueueReceive>
 80195e2:	2801      	cmp	r0, #1
 80195e4:	d101      	bne.n	80195ea <osMessageGet+0x62>
			event.status = osEventMessage;
 80195e6:	2310      	movs	r3, #16
 80195e8:	e7d8      	b.n	801959c <osMessageGet+0x14>
			event.status = (ticks == 0) ? osOK : osEventTimeout;
 80195ea:	2e00      	cmp	r6, #0
 80195ec:	bf18      	it	ne
 80195ee:	2640      	movne	r6, #64	; 0x40
 80195f0:	9601      	str	r6, [sp, #4]
 80195f2:	e7ec      	b.n	80195ce <osMessageGet+0x46>
 80195f4:	e000ed04 	.word	0xe000ed04

080195f8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ((size_t) 1)
			<< ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 80195f8:	b510      	push	{r4, lr}
	BlockLink_t *pxIterator;
	uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 than the block being inserted. */
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 80195fa:	4b0f      	ldr	r3, [pc, #60]	; (8019638 <prvInsertBlockIntoFreeList+0x40>)
 80195fc:	461a      	mov	r2, r3
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	4283      	cmp	r3, r0
 8019602:	d3fb      	bcc.n	80195fc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxIterator;
	if ((puc + pxIterator->xBlockSize) == (uint8_t*) pxBlockToInsert) {
 8019604:	6854      	ldr	r4, [r2, #4]
 8019606:	1911      	adds	r1, r2, r4
 8019608:	4288      	cmp	r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801960a:	bf01      	itttt	eq
 801960c:	6841      	ldreq	r1, [r0, #4]
 801960e:	4610      	moveq	r0, r2
 8019610:	1909      	addeq	r1, r1, r4
 8019612:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxBlockToInsert;
	if ((puc + pxBlockToInsert->xBlockSize)
 8019614:	6844      	ldr	r4, [r0, #4]
 8019616:	1901      	adds	r1, r0, r4
 8019618:	428b      	cmp	r3, r1
 801961a:	d107      	bne.n	801962c <prvInsertBlockIntoFreeList+0x34>
			== (uint8_t*) pxIterator->pxNextFreeBlock) {
		if (pxIterator->pxNextFreeBlock != pxEnd) {
 801961c:	4907      	ldr	r1, [pc, #28]	; (801963c <prvInsertBlockIntoFreeList+0x44>)
 801961e:	6809      	ldr	r1, [r1, #0]
 8019620:	428b      	cmp	r3, r1
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize +=
 8019622:	bf1f      	itttt	ne
 8019624:	6859      	ldrne	r1, [r3, #4]
					pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock =
					pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019626:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize +=
 8019628:	1909      	addne	r1, r1, r4
 801962a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	 before and the block after, then it's pxNextFreeBlock pointer will have
	 already been set, and should not be set here as that would make it point
	 to itself. */
	if (pxIterator != pxBlockToInsert) {
 801962c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801962e:	6003      	str	r3, [r0, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019630:	bf18      	it	ne
 8019632:	6010      	strne	r0, [r2, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019634:	bd10      	pop	{r4, pc}
 8019636:	bf00      	nop
 8019638:	20007b50 	.word	0x20007b50
 801963c:	200044f4 	.word	0x200044f4

08019640 <pvPortMalloc>:
void* pvPortMalloc(size_t xWantedSize) {
 8019640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019644:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8019646:	f001 f8f1 	bl	801a82c <vTaskSuspendAll>
		if (pxEnd == NULL) {
 801964a:	4b3c      	ldr	r3, [pc, #240]	; (801973c <pvPortMalloc+0xfc>)
 801964c:	483c      	ldr	r0, [pc, #240]	; (8019740 <pvPortMalloc+0x100>)
 801964e:	681a      	ldr	r2, [r3, #0]
 8019650:	469c      	mov	ip, r3
 8019652:	b9d2      	cbnz	r2, 801968a <pvPortMalloc+0x4a>
	uxAddress = (size_t) ucHeap;
 8019654:	4a3b      	ldr	r2, [pc, #236]	; (8019744 <pvPortMalloc+0x104>)
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 8019656:	4b3c      	ldr	r3, [pc, #240]	; (8019748 <pvPortMalloc+0x108>)
	if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
 8019658:	0755      	lsls	r5, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1);
 801965a:	bf1c      	itt	ne
 801965c:	3207      	addne	r2, #7
		uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 801965e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = (size_t) 0;
 8019662:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 8019664:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = (size_t) 0;
 8019666:	6059      	str	r1, [r3, #4]
	uxAddress -= xHeapStructSize;
 8019668:	4b38      	ldr	r3, [pc, #224]	; (801974c <pvPortMalloc+0x10c>)
	uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 801966a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 801966e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - (size_t) pxFirstFreeBlock;
 8019672:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019674:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = (void*) uxAddress;
 8019678:	f8cc 3000 	str.w	r3, [ip]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801967c:	4b34      	ldr	r3, [pc, #208]	; (8019750 <pvPortMalloc+0x110>)
 801967e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019680:	4b34      	ldr	r3, [pc, #208]	; (8019754 <pvPortMalloc+0x114>)
 8019682:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ((size_t) 1)
 8019684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019688:	6003      	str	r3, [r0, #0]
		if ((xWantedSize & xBlockAllocatedBit) == 0) {
 801968a:	6807      	ldr	r7, [r0, #0]
 801968c:	4227      	tst	r7, r4
 801968e:	d14f      	bne.n	8019730 <pvPortMalloc+0xf0>
			if (xWantedSize > 0) {
 8019690:	2c00      	cmp	r4, #0
 8019692:	d040      	beq.n	8019716 <pvPortMalloc+0xd6>
				xWantedSize += xHeapStructSize;
 8019694:	f104 0308 	add.w	r3, r4, #8
				if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
 8019698:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT
 801969a:	bf1c      	itt	ne
 801969c:	f023 0307 	bicne.w	r3, r3, #7
 80196a0:	3308      	addne	r3, #8
			if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d044      	beq.n	8019730 <pvPortMalloc+0xf0>
 80196a6:	4a2b      	ldr	r2, [pc, #172]	; (8019754 <pvPortMalloc+0x114>)
 80196a8:	6816      	ldr	r6, [r2, #0]
 80196aa:	429e      	cmp	r6, r3
 80196ac:	4690      	mov	r8, r2
 80196ae:	d33f      	bcc.n	8019730 <pvPortMalloc+0xf0>
				pxBlock = xStart.pxNextFreeBlock;
 80196b0:	4a25      	ldr	r2, [pc, #148]	; (8019748 <pvPortMalloc+0x108>)
 80196b2:	6815      	ldr	r5, [r2, #0]
				while ((pxBlock->xBlockSize < xWantedSize)
 80196b4:	6869      	ldr	r1, [r5, #4]
 80196b6:	4299      	cmp	r1, r3
 80196b8:	d201      	bcs.n	80196be <pvPortMalloc+0x7e>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
 80196ba:	6828      	ldr	r0, [r5, #0]
 80196bc:	b9a8      	cbnz	r0, 80196ea <pvPortMalloc+0xaa>
				if (pxBlock != pxEnd) {
 80196be:	f8dc 0000 	ldr.w	r0, [ip]
 80196c2:	42a8      	cmp	r0, r5
 80196c4:	d034      	beq.n	8019730 <pvPortMalloc+0xf0>
					if ((pxBlock->xBlockSize - xWantedSize)
 80196c6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80196c8:	6828      	ldr	r0, [r5, #0]
							(void*) (((uint8_t*) pxPreviousBlock->pxNextFreeBlock)
 80196ca:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80196cc:	6010      	str	r0, [r2, #0]
					if ((pxBlock->xBlockSize - xWantedSize)
 80196ce:	2910      	cmp	r1, #16
 80196d0:	d912      	bls.n	80196f8 <pvPortMalloc+0xb8>
						pxNewBlockLink = (void*) (((uint8_t*) pxBlock)
 80196d2:	18e8      	adds	r0, r5, r3
						configASSERT(
 80196d4:	0742      	lsls	r2, r0, #29
 80196d6:	d00b      	beq.n	80196f0 <pvPortMalloc+0xb0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80196d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196dc:	f383 8811 	msr	BASEPRI, r3
 80196e0:	f3bf 8f6f 	isb	sy
 80196e4:	f3bf 8f4f 	dsb	sy
 80196e8:	e7fe      	b.n	80196e8 <pvPortMalloc+0xa8>
 80196ea:	462a      	mov	r2, r5
 80196ec:	4605      	mov	r5, r0
 80196ee:	e7e1      	b.n	80196b4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 80196f0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80196f2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList(pxNewBlockLink);
 80196f4:	f7ff ff80 	bl	80195f8 <prvInsertBlockIntoFreeList>
					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 80196f8:	4915      	ldr	r1, [pc, #84]	; (8019750 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80196fa:	686b      	ldr	r3, [r5, #4]
					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 80196fc:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80196fe:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019700:	431f      	orrs	r7, r3
					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 8019702:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8019704:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019708:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801970c:	bf38      	it	cc
 801970e:	600e      	strcc	r6, [r1, #0]
					pvReturn =
 8019710:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019712:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019714:	602b      	str	r3, [r5, #0]
	(void) xTaskResumeAll();
 8019716:	f001 f937 	bl	801a988 <xTaskResumeAll>
	configASSERT(
 801971a:	0763      	lsls	r3, r4, #29
 801971c:	d00a      	beq.n	8019734 <pvPortMalloc+0xf4>
 801971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019722:	f383 8811 	msr	BASEPRI, r3
 8019726:	f3bf 8f6f 	isb	sy
 801972a:	f3bf 8f4f 	dsb	sy
 801972e:	e7fe      	b.n	801972e <pvPortMalloc+0xee>
	void *pvReturn = NULL;
 8019730:	2400      	movs	r4, #0
 8019732:	e7f0      	b.n	8019716 <pvPortMalloc+0xd6>
}
 8019734:	4620      	mov	r0, r4
 8019736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801973a:	bf00      	nop
 801973c:	200044f4 	.word	0x200044f4
 8019740:	20007b44 	.word	0x20007b44
 8019744:	200044f8 	.word	0x200044f8
 8019748:	20007b50 	.word	0x20007b50
 801974c:	20007b3a 	.word	0x20007b3a
 8019750:	20007b4c 	.word	0x20007b4c
 8019754:	20007b48 	.word	0x20007b48

08019758 <vPortFree>:
void vPortFree(void *pv) {
 8019758:	b510      	push	{r4, lr}
	if (pv != NULL) {
 801975a:	4604      	mov	r4, r0
 801975c:	b370      	cbz	r0, 80197bc <vPortFree+0x64>
		configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 801975e:	4a18      	ldr	r2, [pc, #96]	; (80197c0 <vPortFree+0x68>)
 8019760:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019764:	6812      	ldr	r2, [r2, #0]
 8019766:	4213      	tst	r3, r2
 8019768:	d108      	bne.n	801977c <vPortFree+0x24>
 801976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801976e:	f383 8811 	msr	BASEPRI, r3
 8019772:	f3bf 8f6f 	isb	sy
 8019776:	f3bf 8f4f 	dsb	sy
 801977a:	e7fe      	b.n	801977a <vPortFree+0x22>
		configASSERT(pxLink->pxNextFreeBlock == NULL);
 801977c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8019780:	b141      	cbz	r1, 8019794 <vPortFree+0x3c>
 8019782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019786:	f383 8811 	msr	BASEPRI, r3
 801978a:	f3bf 8f6f 	isb	sy
 801978e:	f3bf 8f4f 	dsb	sy
 8019792:	e7fe      	b.n	8019792 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019794:	ea23 0302 	bic.w	r3, r3, r2
 8019798:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801979c:	f001 f846 	bl	801a82c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80197a0:	4a08      	ldr	r2, [pc, #32]	; (80197c4 <vPortFree+0x6c>)
 80197a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80197a6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 80197a8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80197ac:	440b      	add	r3, r1
 80197ae:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 80197b0:	f7ff ff22 	bl	80195f8 <prvInsertBlockIntoFreeList>
}
 80197b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				(void) xTaskResumeAll();
 80197b8:	f001 b8e6 	b.w	801a988 <xTaskResumeAll>
}
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	bf00      	nop
 80197c0:	20007b44 	.word	0x20007b44
 80197c4:	20007b48 	.word	0x20007b48

080197c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197c8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80197cc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197d4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80197d6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80197d8:	2300      	movs	r3, #0
 80197da:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80197dc:	4770      	bx	lr

080197de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80197de:	2300      	movs	r3, #0
 80197e0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80197e2:	4770      	bx	lr

080197e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80197e4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80197e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80197e8:	689a      	ldr	r2, [r3, #8]
 80197ea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80197ec:	689a      	ldr	r2, [r3, #8]
 80197ee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80197f0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80197f2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80197f4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80197f6:	3301      	adds	r3, #1
 80197f8:	6003      	str	r3, [r0, #0]
}
 80197fa:	4770      	bx	lr

080197fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80197fc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80197fe:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019800:	1c63      	adds	r3, r4, #1
 8019802:	d10a      	bne.n	801981a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019804:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019806:	685a      	ldr	r2, [r3, #4]
 8019808:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801980a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801980c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801980e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8019810:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8019812:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8019814:	3301      	adds	r3, #1
 8019816:	6003      	str	r3, [r0, #0]
}
 8019818:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801981a:	f100 0208 	add.w	r2, r0, #8
 801981e:	4613      	mov	r3, r2
 8019820:	6852      	ldr	r2, [r2, #4]
 8019822:	6815      	ldr	r5, [r2, #0]
 8019824:	42a5      	cmp	r5, r4
 8019826:	d9fa      	bls.n	801981e <vListInsert+0x22>
 8019828:	e7ed      	b.n	8019806 <vListInsert+0xa>

0801982a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801982a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 801982e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019830:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019832:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019834:	6859      	ldr	r1, [r3, #4]
 8019836:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019838:	bf08      	it	eq
 801983a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801983c:	2200      	movs	r2, #0
 801983e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8019840:	681a      	ldr	r2, [r3, #0]
 8019842:	3a01      	subs	r2, #1
 8019844:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019846:	6818      	ldr	r0, [r3, #0]
}
 8019848:	4770      	bx	lr
	...

0801984c <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 801984c:	4808      	ldr	r0, [pc, #32]	; (8019870 <prvPortStartFirstTask+0x24>)
 801984e:	6800      	ldr	r0, [r0, #0]
 8019850:	6800      	ldr	r0, [r0, #0]
 8019852:	f380 8808 	msr	MSP, r0
 8019856:	f04f 0000 	mov.w	r0, #0
 801985a:	f380 8814 	msr	CONTROL, r0
 801985e:	b662      	cpsie	i
 8019860:	b661      	cpsie	f
 8019862:	f3bf 8f4f 	dsb	sy
 8019866:	f3bf 8f6f 	isb	sy
 801986a:	df00      	svc	0
 801986c:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 801986e:	0000      	.short	0x0000
 8019870:	e000ed08 	.word	0xe000ed08

08019874 <vPortEnableVFP>:
}
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8019874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019884 <vPortEnableVFP+0x10>
 8019878:	6801      	ldr	r1, [r0, #0]
 801987a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801987e:	6001      	str	r1, [r0, #0]
 8019880:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 8019882:	0000      	.short	0x0000
 8019884:	e000ed88 	.word	0xe000ed88

08019888 <prvTaskExitError>:
static void prvTaskExitError(void) {
 8019888:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
 801988a:	2300      	movs	r3, #0
 801988c:	9301      	str	r3, [sp, #4]
	configASSERT(uxCriticalNesting == ~0UL);
 801988e:	4b0d      	ldr	r3, [pc, #52]	; (80198c4 <prvTaskExitError+0x3c>)
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	3301      	adds	r3, #1
 8019894:	d008      	beq.n	80198a8 <prvTaskExitError+0x20>
 8019896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801989a:	f383 8811 	msr	BASEPRI, r3
 801989e:	f3bf 8f6f 	isb	sy
 80198a2:	f3bf 8f4f 	dsb	sy
 80198a6:	e7fe      	b.n	80198a6 <prvTaskExitError+0x1e>
 80198a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198ac:	f383 8811 	msr	BASEPRI, r3
 80198b0:	f3bf 8f6f 	isb	sy
 80198b4:	f3bf 8f4f 	dsb	sy
	while (ulDummy == 0) {
 80198b8:	9b01      	ldr	r3, [sp, #4]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d0fc      	beq.n	80198b8 <prvTaskExitError+0x30>
}
 80198be:	b002      	add	sp, #8
 80198c0:	4770      	bx	lr
 80198c2:	bf00      	nop
 80198c4:	20000614 	.word	0x20000614

080198c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 80198c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80198cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 80198d0:	4b07      	ldr	r3, [pc, #28]	; (80198f0 <pxPortInitialiseStack+0x28>)
 80198d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 80198d6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80198da:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 80198de:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 80198e2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80198e6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80198ea:	3844      	subs	r0, #68	; 0x44
 80198ec:	4770      	bx	lr
 80198ee:	bf00      	nop
 80198f0:	08019889 	.word	0x08019889
	...

08019900 <SVC_Handler>:
	__asm volatile (
 8019900:	4b07      	ldr	r3, [pc, #28]	; (8019920 <pxCurrentTCBConst2>)
 8019902:	6819      	ldr	r1, [r3, #0]
 8019904:	6808      	ldr	r0, [r1, #0]
 8019906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990a:	f380 8809 	msr	PSP, r0
 801990e:	f3bf 8f6f 	isb	sy
 8019912:	f04f 0000 	mov.w	r0, #0
 8019916:	f380 8811 	msr	BASEPRI, r0
 801991a:	4770      	bx	lr
 801991c:	f3af 8000 	nop.w

08019920 <pxCurrentTCBConst2>:
 8019920:	20007b60 	.word	0x20007b60

08019924 <vPortEnterCritical>:
 8019924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019928:	f383 8811 	msr	BASEPRI, r3
 801992c:	f3bf 8f6f 	isb	sy
 8019930:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8019934:	4a0a      	ldr	r2, [pc, #40]	; (8019960 <vPortEnterCritical+0x3c>)
 8019936:	6813      	ldr	r3, [r2, #0]
 8019938:	3301      	adds	r3, #1
	if (uxCriticalNesting == 1) {
 801993a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 801993c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
 801993e:	d10d      	bne.n	801995c <vPortEnterCritical+0x38>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8019940:	4b08      	ldr	r3, [pc, #32]	; (8019964 <vPortEnterCritical+0x40>)
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019948:	d008      	beq.n	801995c <vPortEnterCritical+0x38>
 801994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801994e:	f383 8811 	msr	BASEPRI, r3
 8019952:	f3bf 8f6f 	isb	sy
 8019956:	f3bf 8f4f 	dsb	sy
 801995a:	e7fe      	b.n	801995a <vPortEnterCritical+0x36>
}
 801995c:	4770      	bx	lr
 801995e:	bf00      	nop
 8019960:	20000614 	.word	0x20000614
 8019964:	e000ed04 	.word	0xe000ed04

08019968 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
 8019968:	4a08      	ldr	r2, [pc, #32]	; (801998c <vPortExitCritical+0x24>)
 801996a:	6813      	ldr	r3, [r2, #0]
 801996c:	b943      	cbnz	r3, 8019980 <vPortExitCritical+0x18>
 801996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019972:	f383 8811 	msr	BASEPRI, r3
 8019976:	f3bf 8f6f 	isb	sy
 801997a:	f3bf 8f4f 	dsb	sy
 801997e:	e7fe      	b.n	801997e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8019980:	3b01      	subs	r3, #1
 8019982:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8019984:	b90b      	cbnz	r3, 801998a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019986:	f383 8811 	msr	BASEPRI, r3
}
 801998a:	4770      	bx	lr
 801998c:	20000614 	.word	0x20000614

08019990 <PendSV_Handler>:
	__asm volatile
 8019990:	f3ef 8009 	mrs	r0, PSP
 8019994:	f3bf 8f6f 	isb	sy
 8019998:	4b15      	ldr	r3, [pc, #84]	; (80199f0 <pxCurrentTCBConst>)
 801999a:	681a      	ldr	r2, [r3, #0]
 801999c:	f01e 0f10 	tst.w	lr, #16
 80199a0:	bf08      	it	eq
 80199a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80199a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199aa:	6010      	str	r0, [r2, #0]
 80199ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80199b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80199b4:	f380 8811 	msr	BASEPRI, r0
 80199b8:	f3bf 8f4f 	dsb	sy
 80199bc:	f3bf 8f6f 	isb	sy
 80199c0:	f001 f87e 	bl	801aac0 <vTaskSwitchContext>
 80199c4:	f04f 0000 	mov.w	r0, #0
 80199c8:	f380 8811 	msr	BASEPRI, r0
 80199cc:	bc09      	pop	{r0, r3}
 80199ce:	6819      	ldr	r1, [r3, #0]
 80199d0:	6808      	ldr	r0, [r1, #0]
 80199d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199d6:	f01e 0f10 	tst.w	lr, #16
 80199da:	bf08      	it	eq
 80199dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80199e0:	f380 8809 	msr	PSP, r0
 80199e4:	f3bf 8f6f 	isb	sy
 80199e8:	4770      	bx	lr
 80199ea:	bf00      	nop
 80199ec:	f3af 8000 	nop.w

080199f0 <pxCurrentTCBConst>:
 80199f0:	20007b60 	.word	0x20007b60

080199f4 <SysTick_Handler>:
void xPortSysTickHandler(void) {
 80199f4:	b508      	push	{r3, lr}
	__asm volatile
 80199f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199fa:	f383 8811 	msr	BASEPRI, r3
 80199fe:	f3bf 8f6f 	isb	sy
 8019a02:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
 8019a06:	f000 ff27 	bl	801a858 <xTaskIncrementTick>
 8019a0a:	b118      	cbz	r0, 8019a14 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019a0c:	4b03      	ldr	r3, [pc, #12]	; (8019a1c <SysTick_Handler+0x28>)
 8019a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a12:	601a      	str	r2, [r3, #0]
	__asm volatile
 8019a14:	2300      	movs	r3, #0
 8019a16:	f383 8811 	msr	BASEPRI, r3
}
 8019a1a:	bd08      	pop	{r3, pc}
 8019a1c:	e000ed04 	.word	0xe000ed04

08019a20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019a20:	4a08      	ldr	r2, [pc, #32]	; (8019a44 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a22:	4909      	ldr	r1, [pc, #36]	; (8019a48 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019a24:	2300      	movs	r3, #0
 8019a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a28:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8019a2a:	4b08      	ldr	r3, [pc, #32]	; (8019a4c <vPortSetupTimerInterrupt+0x2c>)
 8019a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a36:	4906      	ldr	r1, [pc, #24]	; (8019a50 <vPortSetupTimerInterrupt+0x30>)
			- 1UL;
 8019a38:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8019a3a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 8019a3c:	2307      	movs	r3, #7
 8019a3e:	6013      	str	r3, [r2, #0]
}
 8019a40:	4770      	bx	lr
 8019a42:	bf00      	nop
 8019a44:	e000e010 	.word	0xe000e010
 8019a48:	e000e018 	.word	0xe000e018
 8019a4c:	20000210 	.word	0x20000210
 8019a50:	e000e014 	.word	0xe000e014

08019a54 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8019a54:	4b38      	ldr	r3, [pc, #224]	; (8019b38 <xPortStartScheduler+0xe4>)
 8019a56:	4a39      	ldr	r2, [pc, #228]	; (8019b3c <xPortStartScheduler+0xe8>)
BaseType_t xPortStartScheduler(void) {
 8019a58:	b513      	push	{r0, r1, r4, lr}
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8019a5a:	6819      	ldr	r1, [r3, #0]
 8019a5c:	4291      	cmp	r1, r2
 8019a5e:	d108      	bne.n	8019a72 <xPortStartScheduler+0x1e>
	__asm volatile
 8019a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a64:	f383 8811 	msr	BASEPRI, r3
 8019a68:	f3bf 8f6f 	isb	sy
 8019a6c:	f3bf 8f4f 	dsb	sy
 8019a70:	e7fe      	b.n	8019a70 <xPortStartScheduler+0x1c>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8019a72:	681a      	ldr	r2, [r3, #0]
 8019a74:	4b32      	ldr	r3, [pc, #200]	; (8019b40 <xPortStartScheduler+0xec>)
 8019a76:	429a      	cmp	r2, r3
 8019a78:	d108      	bne.n	8019a8c <xPortStartScheduler+0x38>
 8019a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a7e:	f383 8811 	msr	BASEPRI, r3
 8019a82:	f3bf 8f6f 	isb	sy
 8019a86:	f3bf 8f4f 	dsb	sy
 8019a8a:	e7fe      	b.n	8019a8a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019a8c:	4b2d      	ldr	r3, [pc, #180]	; (8019b44 <xPortStartScheduler+0xf0>)
 8019a8e:	781a      	ldrb	r2, [r3, #0]
 8019a90:	b2d2      	uxtb	r2, r2
 8019a92:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019a94:	22ff      	movs	r2, #255	; 0xff
 8019a96:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019a98:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8019a9a:	4a2b      	ldr	r2, [pc, #172]	; (8019b48 <xPortStartScheduler+0xf4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019a9c:	b2db      	uxtb	r3, r3
 8019a9e:	f88d 3003 	strb.w	r3, [sp, #3]
				& ucMaxPriorityValue;
 8019aa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019aa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8019aaa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019aac:	4a27      	ldr	r2, [pc, #156]	; (8019b4c <xPortStartScheduler+0xf8>)
 8019aae:	2307      	movs	r3, #7
 8019ab0:	6013      	str	r3, [r2, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8019ab2:	2100      	movs	r1, #0
 8019ab4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8019ab8:	0600      	lsls	r0, r0, #24
 8019aba:	f103 34ff 	add.w	r4, r3, #4294967295
 8019abe:	d40c      	bmi.n	8019ada <xPortStartScheduler+0x86>
 8019ac0:	b111      	cbz	r1, 8019ac8 <xPortStartScheduler+0x74>
			configASSERT(
 8019ac2:	2b03      	cmp	r3, #3
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	d011      	beq.n	8019aec <xPortStartScheduler+0x98>
 8019ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019acc:	f383 8811 	msr	BASEPRI, r3
 8019ad0:	f3bf 8f6f 	isb	sy
 8019ad4:	f3bf 8f4f 	dsb	sy
 8019ad8:	e7fe      	b.n	8019ad8 <xPortStartScheduler+0x84>
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 8019ada:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019ade:	005b      	lsls	r3, r3, #1
 8019ae0:	b2db      	uxtb	r3, r3
 8019ae2:	f88d 3003 	strb.w	r3, [sp, #3]
 8019ae6:	2101      	movs	r1, #1
 8019ae8:	4623      	mov	r3, r4
 8019aea:	e7e3      	b.n	8019ab4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019af0:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019af2:	9b01      	ldr	r3, [sp, #4]
 8019af4:	4a13      	ldr	r2, [pc, #76]	; (8019b44 <xPortStartScheduler+0xf0>)
 8019af6:	b2db      	uxtb	r3, r3
 8019af8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019afa:	4b15      	ldr	r3, [pc, #84]	; (8019b50 <xPortStartScheduler+0xfc>)
 8019afc:	681a      	ldr	r2, [r3, #0]
 8019afe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8019b02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019b04:	681a      	ldr	r2, [r3, #0]
 8019b06:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8019b0a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8019b0c:	f7ff ff88 	bl	8019a20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8019b10:	4b10      	ldr	r3, [pc, #64]	; (8019b54 <xPortStartScheduler+0x100>)
 8019b12:	2400      	movs	r4, #0
 8019b14:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8019b16:	f7ff fead 	bl	8019874 <vPortEnableVFP>
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8019b1a:	4a0f      	ldr	r2, [pc, #60]	; (8019b58 <xPortStartScheduler+0x104>)
 8019b1c:	6813      	ldr	r3, [r2, #0]
 8019b1e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019b22:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8019b24:	f7ff fe92 	bl	801984c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8019b28:	f000 ffca 	bl	801aac0 <vTaskSwitchContext>
	prvTaskExitError();
 8019b2c:	f7ff feac 	bl	8019888 <prvTaskExitError>
}
 8019b30:	4620      	mov	r0, r4
 8019b32:	b002      	add	sp, #8
 8019b34:	bd10      	pop	{r4, pc}
 8019b36:	bf00      	nop
 8019b38:	e000ed00 	.word	0xe000ed00
 8019b3c:	410fc271 	.word	0x410fc271
 8019b40:	410fc270 	.word	0x410fc270
 8019b44:	e000e400 	.word	0xe000e400
 8019b48:	20007b58 	.word	0x20007b58
 8019b4c:	20007b5c 	.word	0x20007b5c
 8019b50:	e000ed20 	.word	0xe000ed20
 8019b54:	20000614 	.word	0x20000614
 8019b58:	e000ef34 	.word	0xe000ef34

08019b5c <vPortValidateInterruptPriority>:
void vPortValidateInterruptPriority(void) {
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019b5c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8019b60:	2b0f      	cmp	r3, #15
 8019b62:	d90e      	bls.n	8019b82 <vPortValidateInterruptPriority+0x26>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8019b64:	4a10      	ldr	r2, [pc, #64]	; (8019ba8 <vPortValidateInterruptPriority+0x4c>)
 8019b66:	5c9b      	ldrb	r3, [r3, r2]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8019b68:	4a10      	ldr	r2, [pc, #64]	; (8019bac <vPortValidateInterruptPriority+0x50>)
 8019b6a:	7812      	ldrb	r2, [r2, #0]
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d908      	bls.n	8019b82 <vPortValidateInterruptPriority+0x26>
 8019b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b74:	f383 8811 	msr	BASEPRI, r3
 8019b78:	f3bf 8f6f 	isb	sy
 8019b7c:	f3bf 8f4f 	dsb	sy
 8019b80:	e7fe      	b.n	8019b80 <vPortValidateInterruptPriority+0x24>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 8019b82:	4b0b      	ldr	r3, [pc, #44]	; (8019bb0 <vPortValidateInterruptPriority+0x54>)
 8019b84:	4a0b      	ldr	r2, [pc, #44]	; (8019bb4 <vPortValidateInterruptPriority+0x58>)
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	6812      	ldr	r2, [r2, #0]
 8019b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019b8e:	4293      	cmp	r3, r2
 8019b90:	d908      	bls.n	8019ba4 <vPortValidateInterruptPriority+0x48>
 8019b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b96:	f383 8811 	msr	BASEPRI, r3
 8019b9a:	f3bf 8f6f 	isb	sy
 8019b9e:	f3bf 8f4f 	dsb	sy
 8019ba2:	e7fe      	b.n	8019ba2 <vPortValidateInterruptPriority+0x46>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop
 8019ba8:	e000e3f0 	.word	0xe000e3f0
 8019bac:	20007b58 	.word	0x20007b58
 8019bb0:	e000ed0c 	.word	0xe000ed0c
 8019bb4:	20007b5c 	.word	0x20007b5c

08019bb8 <prvIsQueueEmpty>:
	}
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue) {
 8019bb8:	b510      	push	{r4, lr}
 8019bba:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019bbc:	f7ff feb2 	bl	8019924 <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0) {
 8019bc0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8019bc2:	f7ff fed1 	bl	8019968 <vPortExitCritical>

	return xReturn;
}
 8019bc6:	fab4 f084 	clz	r0, r4
 8019bca:	0940      	lsrs	r0, r0, #5
 8019bcc:	bd10      	pop	{r4, pc}

08019bce <prvCopyDataToQueue>:
		const void *pvItemToQueue, const BaseType_t xPosition) {
 8019bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bd0:	4615      	mov	r5, r2
	if (pxQueue->uxItemSize == (UBaseType_t) 0) {
 8019bd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019bd4:	6b86      	ldr	r6, [r0, #56]	; 0x38
		const void *pvItemToQueue, const BaseType_t xPosition) {
 8019bd6:	4604      	mov	r4, r0
	if (pxQueue->uxItemSize == (UBaseType_t) 0) {
 8019bd8:	b952      	cbnz	r2, 8019bf0 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 8019bda:	6807      	ldr	r7, [r0, #0]
 8019bdc:	bb47      	cbnz	r7, 8019c30 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit(
 8019bde:	6880      	ldr	r0, [r0, #8]
 8019be0:	f001 f8d6 	bl	801ad90 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019be4:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit(
 8019be6:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 8019be8:	3601      	adds	r6, #1
 8019bea:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8019bec:	4628      	mov	r0, r5
 8019bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
 8019bf0:	b965      	cbnz	r5, 8019c0c <prvCopyDataToQueue+0x3e>
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8019bf2:	6840      	ldr	r0, [r0, #4]
 8019bf4:	f003 f922 	bl	801ce3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019bf8:	6863      	ldr	r3, [r4, #4]
 8019bfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019bfc:	4413      	add	r3, r2
		if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019bfe:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019c00:	6063      	str	r3, [r4, #4]
		if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019c02:	4293      	cmp	r3, r2
 8019c04:	d3f0      	bcc.n	8019be8 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019c06:	6823      	ldr	r3, [r4, #0]
 8019c08:	6063      	str	r3, [r4, #4]
 8019c0a:	e7ed      	b.n	8019be8 <prvCopyDataToQueue+0x1a>
		(void) memcpy((void*) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue,
 8019c0c:	68c0      	ldr	r0, [r0, #12]
 8019c0e:	f003 f915 	bl	801ce3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019c12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019c14:	68e3      	ldr	r3, [r4, #12]
 8019c16:	4251      	negs	r1, r2
 8019c18:	1a9b      	subs	r3, r3, r2
		if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019c1a:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019c1c:	60e3      	str	r3, [r4, #12]
		if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019c1e:	4293      	cmp	r3, r2
					- pxQueue->uxItemSize);
 8019c20:	bf3e      	ittt	cc
 8019c22:	68a3      	ldrcc	r3, [r4, #8]
 8019c24:	185b      	addcc	r3, r3, r1
			pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail
 8019c26:	60e3      	strcc	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
 8019c28:	2d02      	cmp	r5, #2
 8019c2a:	d101      	bne.n	8019c30 <prvCopyDataToQueue+0x62>
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 8019c2c:	b116      	cbz	r6, 8019c34 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8019c2e:	3e01      	subs	r6, #1
	BaseType_t xReturn = pdFALSE;
 8019c30:	2500      	movs	r5, #0
 8019c32:	e7d9      	b.n	8019be8 <prvCopyDataToQueue+0x1a>
 8019c34:	4635      	mov	r5, r6
 8019c36:	e7d7      	b.n	8019be8 <prvCopyDataToQueue+0x1a>

08019c38 <prvCopyDataFromQueue>:
static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer) {
 8019c38:	4603      	mov	r3, r0
 8019c3a:	b410      	push	{r4}
	if (pxQueue->uxItemSize != (UBaseType_t) 0) {
 8019c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer) {
 8019c3e:	4608      	mov	r0, r1
	if (pxQueue->uxItemSize != (UBaseType_t) 0) {
 8019c40:	b16a      	cbz	r2, 8019c5e <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019c42:	68dc      	ldr	r4, [r3, #12]
		if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019c44:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019c46:	4414      	add	r4, r2
		if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019c48:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019c4a:	bf28      	it	cs
 8019c4c:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019c4e:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019c50:	bf28      	it	cs
 8019c52:	60d9      	strcs	r1, [r3, #12]
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8019c54:	68d9      	ldr	r1, [r3, #12]
}
 8019c56:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8019c5a:	f003 b8ef 	b.w	801ce3c <memcpy>
}
 8019c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c62:	4770      	bx	lr

08019c64 <prvUnlockQueue>:
static void prvUnlockQueue(Queue_t *const pxQueue) {
 8019c64:	b570      	push	{r4, r5, r6, lr}
 8019c66:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8019c68:	f7ff fe5c 	bl	8019924 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8019c6c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
							&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8019c70:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8019c74:	b26d      	sxtb	r5, r5
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8019c76:	2d00      	cmp	r5, #0
 8019c78:	dc14      	bgt.n	8019ca4 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8019c7a:	23ff      	movs	r3, #255	; 0xff
 8019c7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8019c80:	f7ff fe72 	bl	8019968 <vPortExitCritical>
	taskENTER_CRITICAL();
 8019c84:	f7ff fe4e 	bl	8019924 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8019c88:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8019c8c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8019c90:	b26d      	sxtb	r5, r5
		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8019c92:	2d00      	cmp	r5, #0
 8019c94:	dc12      	bgt.n	8019cbc <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8019c96:	23ff      	movs	r3, #255	; 0xff
 8019c98:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8019c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8019ca0:	f7ff be62 	b.w	8019968 <vPortExitCritical>
				if ( listLIST_IS_EMPTY(
 8019ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d0e7      	beq.n	8019c7a <prvUnlockQueue+0x16>
					if (xTaskRemoveFromEventList(
 8019caa:	4630      	mov	r0, r6
 8019cac:	f000 ff7a 	bl	801aba4 <xTaskRemoveFromEventList>
 8019cb0:	b108      	cbz	r0, 8019cb6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8019cb2:	f001 f803 	bl	801acbc <vTaskMissedYield>
			--cTxLock;
 8019cb6:	3d01      	subs	r5, #1
 8019cb8:	b26d      	sxtb	r5, r5
 8019cba:	e7dc      	b.n	8019c76 <prvUnlockQueue+0x12>
			if ( listLIST_IS_EMPTY(
 8019cbc:	6923      	ldr	r3, [r4, #16]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d0e9      	beq.n	8019c96 <prvUnlockQueue+0x32>
				if (xTaskRemoveFromEventList(
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	f000 ff6e 	bl	801aba4 <xTaskRemoveFromEventList>
 8019cc8:	b108      	cbz	r0, 8019cce <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8019cca:	f000 fff7 	bl	801acbc <vTaskMissedYield>
				--cRxLock;
 8019cce:	3d01      	subs	r5, #1
 8019cd0:	b26d      	sxtb	r5, r5
 8019cd2:	e7de      	b.n	8019c92 <prvUnlockQueue+0x2e>

08019cd4 <xQueueGenericReset>:
BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 8019cd4:	b538      	push	{r3, r4, r5, lr}
 8019cd6:	460d      	mov	r5, r1
	configASSERT(pxQueue);
 8019cd8:	4604      	mov	r4, r0
 8019cda:	b940      	cbnz	r0, 8019cee <xQueueGenericReset+0x1a>
 8019cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ce0:	f383 8811 	msr	BASEPRI, r3
 8019ce4:	f3bf 8f6f 	isb	sy
 8019ce8:	f3bf 8f4f 	dsb	sy
 8019cec:	e7fe      	b.n	8019cec <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8019cee:	f7ff fe19 	bl	8019924 <vPortEnterCritical>
				+ (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019cf2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 8019cf6:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019cf8:	6062      	str	r2, [r4, #4]
				+ (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019cfa:	434b      	muls	r3, r1
 8019cfc:	18d0      	adds	r0, r2, r3
				+ ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019cfe:	1a5b      	subs	r3, r3, r1
 8019d00:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 8019d02:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead
 8019d04:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = (UBaseType_t) 0U;
 8019d06:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8019d08:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = (UBaseType_t) 0U;
 8019d0a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8019d0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019d10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
 8019d14:	b995      	cbnz	r5, 8019d3c <xQueueGenericReset+0x68>
			if ( listLIST_IS_EMPTY(
 8019d16:	6923      	ldr	r3, [r4, #16]
 8019d18:	b163      	cbz	r3, 8019d34 <xQueueGenericReset+0x60>
				if (xTaskRemoveFromEventList(
 8019d1a:	f104 0010 	add.w	r0, r4, #16
 8019d1e:	f000 ff41 	bl	801aba4 <xTaskRemoveFromEventList>
 8019d22:	b138      	cbz	r0, 8019d34 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8019d24:	4b0a      	ldr	r3, [pc, #40]	; (8019d50 <xQueueGenericReset+0x7c>)
 8019d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d2a:	601a      	str	r2, [r3, #0]
 8019d2c:	f3bf 8f4f 	dsb	sy
 8019d30:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8019d34:	f7ff fe18 	bl	8019968 <vPortExitCritical>
}
 8019d38:	2001      	movs	r0, #1
 8019d3a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
 8019d3c:	f104 0010 	add.w	r0, r4, #16
 8019d40:	f7ff fd42 	bl	80197c8 <vListInitialise>
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 8019d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8019d48:	f7ff fd3e 	bl	80197c8 <vListInitialise>
 8019d4c:	e7f2      	b.n	8019d34 <xQueueGenericReset+0x60>
 8019d4e:	bf00      	nop
 8019d50:	e000ed04 	.word	0xe000ed04

08019d54 <xQueueGenericCreate>:
		const UBaseType_t uxItemSize, const uint8_t ucQueueType) {
 8019d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d56:	460d      	mov	r5, r1
 8019d58:	4617      	mov	r7, r2
	configASSERT(uxQueueLength > (UBaseType_t ) 0);
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	b940      	cbnz	r0, 8019d70 <xQueueGenericCreate+0x1c>
 8019d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d62:	f383 8811 	msr	BASEPRI, r3
 8019d66:	f3bf 8f6f 	isb	sy
 8019d6a:	f3bf 8f4f 	dsb	sy
 8019d6e:	e7fe      	b.n	8019d6e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = (size_t) (uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d70:	4348      	muls	r0, r1
	pxNewQueue = (Queue_t*) pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes); /*lint !e9087 !e9079 see comment above. */
 8019d72:	3050      	adds	r0, #80	; 0x50
 8019d74:	f7ff fc64 	bl	8019640 <pvPortMalloc>
	if (pxNewQueue != NULL) {
 8019d78:	4604      	mov	r4, r0
 8019d7a:	b158      	cbz	r0, 8019d94 <xQueueGenericCreate+0x40>
	if (uxItemSize == (UBaseType_t) 0) {
 8019d7c:	b165      	cbz	r5, 8019d98 <xQueueGenericCreate+0x44>
		pucQueueStorage += sizeof(Queue_t); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019d7e:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8019d82:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8019d86:	6023      	str	r3, [r4, #0]
	(void) xQueueGenericReset(pxNewQueue, pdTRUE);
 8019d88:	2101      	movs	r1, #1
 8019d8a:	4620      	mov	r0, r4
 8019d8c:	f7ff ffa2 	bl	8019cd4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8019d90:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
}
 8019d94:	4620      	mov	r0, r4
 8019d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d98:	4603      	mov	r3, r0
 8019d9a:	e7f2      	b.n	8019d82 <xQueueGenericCreate+0x2e>

08019d9c <xQueueCreateCountingSemaphore>:
		const UBaseType_t uxInitialCount) {
 8019d9c:	b510      	push	{r4, lr}
 8019d9e:	460c      	mov	r4, r1
	configASSERT(uxMaxCount != 0);
 8019da0:	b940      	cbnz	r0, 8019db4 <xQueueCreateCountingSemaphore+0x18>
 8019da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da6:	f383 8811 	msr	BASEPRI, r3
 8019daa:	f3bf 8f6f 	isb	sy
 8019dae:	f3bf 8f4f 	dsb	sy
 8019db2:	e7fe      	b.n	8019db2 <xQueueCreateCountingSemaphore+0x16>
	configASSERT(uxInitialCount <= uxMaxCount);
 8019db4:	4288      	cmp	r0, r1
 8019db6:	d208      	bcs.n	8019dca <xQueueCreateCountingSemaphore+0x2e>
 8019db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dbc:	f383 8811 	msr	BASEPRI, r3
 8019dc0:	f3bf 8f6f 	isb	sy
 8019dc4:	f3bf 8f4f 	dsb	sy
 8019dc8:	e7fe      	b.n	8019dc8 <xQueueCreateCountingSemaphore+0x2c>
	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH,
 8019dca:	2202      	movs	r2, #2
 8019dcc:	2100      	movs	r1, #0
 8019dce:	f7ff ffc1 	bl	8019d54 <xQueueGenericCreate>
	if (xHandle != NULL) {
 8019dd2:	b100      	cbz	r0, 8019dd6 <xQueueCreateCountingSemaphore+0x3a>
		((Queue_t*) xHandle)->uxMessagesWaiting = uxInitialCount;
 8019dd4:	6384      	str	r4, [r0, #56]	; 0x38
}
 8019dd6:	bd10      	pop	{r4, pc}

08019dd8 <xQueueGenericSend>:
		const BaseType_t xCopyPosition) {
 8019dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ddc:	4688      	mov	r8, r1
 8019dde:	9201      	str	r2, [sp, #4]
 8019de0:	461f      	mov	r7, r3
	configASSERT(pxQueue);
 8019de2:	4604      	mov	r4, r0
 8019de4:	b940      	cbnz	r0, 8019df8 <xQueueGenericSend+0x20>
 8019de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dea:	f383 8811 	msr	BASEPRI, r3
 8019dee:	f3bf 8f6f 	isb	sy
 8019df2:	f3bf 8f4f 	dsb	sy
 8019df6:	e7fe      	b.n	8019df6 <xQueueGenericSend+0x1e>
	configASSERT(
 8019df8:	b951      	cbnz	r1, 8019e10 <xQueueGenericSend+0x38>
 8019dfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8019dfc:	b143      	cbz	r3, 8019e10 <xQueueGenericSend+0x38>
 8019dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e02:	f383 8811 	msr	BASEPRI, r3
 8019e06:	f3bf 8f6f 	isb	sy
 8019e0a:	f3bf 8f4f 	dsb	sy
 8019e0e:	e7fe      	b.n	8019e0e <xQueueGenericSend+0x36>
	configASSERT(
 8019e10:	2f02      	cmp	r7, #2
 8019e12:	d10b      	bne.n	8019e2c <xQueueGenericSend+0x54>
 8019e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e16:	2b01      	cmp	r3, #1
 8019e18:	d008      	beq.n	8019e2c <xQueueGenericSend+0x54>
 8019e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e1e:	f383 8811 	msr	BASEPRI, r3
 8019e22:	f3bf 8f6f 	isb	sy
 8019e26:	f3bf 8f4f 	dsb	sy
 8019e2a:	e7fe      	b.n	8019e2a <xQueueGenericSend+0x52>
		configASSERT(
 8019e2c:	f000 ff4c 	bl	801acc8 <xTaskGetSchedulerState>
 8019e30:	4606      	mov	r6, r0
 8019e32:	b950      	cbnz	r0, 8019e4a <xQueueGenericSend+0x72>
 8019e34:	9b01      	ldr	r3, [sp, #4]
 8019e36:	b14b      	cbz	r3, 8019e4c <xQueueGenericSend+0x74>
 8019e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e3c:	f383 8811 	msr	BASEPRI, r3
 8019e40:	f3bf 8f6f 	isb	sy
 8019e44:	f3bf 8f4f 	dsb	sy
 8019e48:	e7fe      	b.n	8019e48 <xQueueGenericSend+0x70>
 8019e4a:	2600      	movs	r6, #0
					portYIELD_WITHIN_API()
 8019e4c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019f38 <xQueueGenericSend+0x160>
		prvLockQueue(pxQueue);
 8019e50:	f04f 0900 	mov.w	r9, #0
 8019e54:	e037      	b.n	8019ec6 <xQueueGenericSend+0xee>
				if (xTicksToWait == (TickType_t) 0) {
 8019e56:	9d01      	ldr	r5, [sp, #4]
 8019e58:	b91d      	cbnz	r5, 8019e62 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8019e5a:	f7ff fd85 	bl	8019968 <vPortExitCritical>
			return errQUEUE_FULL;
 8019e5e:	2000      	movs	r0, #0
 8019e60:	e050      	b.n	8019f04 <xQueueGenericSend+0x12c>
				} else if (xEntryTimeSet == pdFALSE) {
 8019e62:	b916      	cbnz	r6, 8019e6a <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState(&xTimeOut);
 8019e64:	a802      	add	r0, sp, #8
 8019e66:	f000 fee1 	bl	801ac2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8019e6a:	f7ff fd7d 	bl	8019968 <vPortExitCritical>
		vTaskSuspendAll();
 8019e6e:	f000 fcdd 	bl	801a82c <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 8019e72:	f7ff fd57 	bl	8019924 <vPortEnterCritical>
 8019e76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019e7a:	2bff      	cmp	r3, #255	; 0xff
 8019e7c:	bf08      	it	eq
 8019e7e:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8019e82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019e86:	2bff      	cmp	r3, #255	; 0xff
 8019e88:	bf08      	it	eq
 8019e8a:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8019e8e:	f7ff fd6b 	bl	8019968 <vPortExitCritical>
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 8019e92:	a901      	add	r1, sp, #4
 8019e94:	a802      	add	r0, sp, #8
 8019e96:	f000 fed5 	bl	801ac44 <xTaskCheckForTimeOut>
 8019e9a:	2800      	cmp	r0, #0
 8019e9c:	d146      	bne.n	8019f2c <xQueueGenericSend+0x154>
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue) {
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019e9e:	f7ff fd41 	bl	8019924 <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 8019ea2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019ea4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019ea6:	429a      	cmp	r2, r3
 8019ea8:	d12f      	bne.n	8019f0a <xQueueGenericSend+0x132>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8019eaa:	f7ff fd5d 	bl	8019968 <vPortExitCritical>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend),
 8019eae:	9901      	ldr	r1, [sp, #4]
 8019eb0:	f104 0010 	add.w	r0, r4, #16
 8019eb4:	f000 fe3e 	bl	801ab34 <vTaskPlaceOnEventList>
				prvUnlockQueue(pxQueue);
 8019eb8:	4620      	mov	r0, r4
 8019eba:	f7ff fed3 	bl	8019c64 <prvUnlockQueue>
				if (xTaskResumeAll() == pdFALSE) {
 8019ebe:	f000 fd63 	bl	801a988 <xTaskResumeAll>
 8019ec2:	b350      	cbz	r0, 8019f1a <xQueueGenericSend+0x142>
 8019ec4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8019ec6:	f7ff fd2d 	bl	8019924 <vPortEnterCritical>
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 8019eca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019ece:	429a      	cmp	r2, r3
 8019ed0:	d301      	bcc.n	8019ed6 <xQueueGenericSend+0xfe>
					|| (xCopyPosition == queueOVERWRITE)) {
 8019ed2:	2f02      	cmp	r7, #2
 8019ed4:	d1bf      	bne.n	8019e56 <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue,
 8019ed6:	463a      	mov	r2, r7
 8019ed8:	4641      	mov	r1, r8
 8019eda:	4620      	mov	r0, r4
 8019edc:	f7ff fe77 	bl	8019bce <prvCopyDataToQueue>
					if ( listLIST_IS_EMPTY(
 8019ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ee2:	b11b      	cbz	r3, 8019eec <xQueueGenericSend+0x114>
						if (xTaskRemoveFromEventList(
 8019ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8019ee8:	f000 fe5c 	bl	801aba4 <xTaskRemoveFromEventList>
					} else if (xYieldRequired != pdFALSE) {
 8019eec:	b138      	cbz	r0, 8019efe <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8019eee:	4b12      	ldr	r3, [pc, #72]	; (8019f38 <xQueueGenericSend+0x160>)
 8019ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ef4:	601a      	str	r2, [r3, #0]
 8019ef6:	f3bf 8f4f 	dsb	sy
 8019efa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8019efe:	f7ff fd33 	bl	8019968 <vPortExitCritical>
				return pdPASS;
 8019f02:	2001      	movs	r0, #1
}
 8019f04:	b004      	add	sp, #16
 8019f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8019f0a:	f7ff fd2d 	bl	8019968 <vPortExitCritical>
				prvUnlockQueue(pxQueue);
 8019f0e:	4620      	mov	r0, r4
 8019f10:	f7ff fea8 	bl	8019c64 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8019f14:	f000 fd38 	bl	801a988 <xTaskResumeAll>
 8019f18:	e7d4      	b.n	8019ec4 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API()
 8019f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019f1e:	f8ca 3000 	str.w	r3, [sl]
 8019f22:	f3bf 8f4f 	dsb	sy
 8019f26:	f3bf 8f6f 	isb	sy
 8019f2a:	e7cb      	b.n	8019ec4 <xQueueGenericSend+0xec>
			prvUnlockQueue(pxQueue);
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	f7ff fe99 	bl	8019c64 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8019f32:	f000 fd29 	bl	801a988 <xTaskResumeAll>
 8019f36:	e792      	b.n	8019e5e <xQueueGenericSend+0x86>
 8019f38:	e000ed04 	.word	0xe000ed04

08019f3c <xQueueCreateMutex>:
QueueHandle_t xQueueCreateMutex(const uint8_t ucQueueType) {
 8019f3c:	b570      	push	{r4, r5, r6, lr}
 8019f3e:	4606      	mov	r6, r0
	pxNewQueue = (Queue_t*) pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes); /*lint !e9087 !e9079 see comment above. */
 8019f40:	2050      	movs	r0, #80	; 0x50
 8019f42:	f7ff fb7d 	bl	8019640 <pvPortMalloc>
	if (pxNewQueue != NULL) {
 8019f46:	4604      	mov	r4, r0
 8019f48:	b188      	cbz	r0, 8019f6e <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8019f4a:	2500      	movs	r5, #0
 8019f4c:	2101      	movs	r1, #1
 8019f4e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = (int8_t*) pxNewQueue;
 8019f52:	6000      	str	r0, [r0, #0]
	(void) xQueueGenericReset(pxNewQueue, pdTRUE);
 8019f54:	f7ff febe 	bl	8019cd4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8019f58:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
		pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019f5c:	60a5      	str	r5, [r4, #8]
		pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019f5e:	6025      	str	r5, [r4, #0]
		pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019f60:	60e5      	str	r5, [r4, #12]
		(void) xQueueGenericSend(pxNewQueue, NULL, (TickType_t) 0U,
 8019f62:	462b      	mov	r3, r5
 8019f64:	462a      	mov	r2, r5
 8019f66:	4629      	mov	r1, r5
 8019f68:	4620      	mov	r0, r4
 8019f6a:	f7ff ff35 	bl	8019dd8 <xQueueGenericSend>
}
 8019f6e:	4620      	mov	r0, r4
 8019f70:	bd70      	pop	{r4, r5, r6, pc}

08019f72 <xQueueGenericSendFromISR>:
		const BaseType_t xCopyPosition) {
 8019f72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f76:	4689      	mov	r9, r1
 8019f78:	4690      	mov	r8, r2
 8019f7a:	461f      	mov	r7, r3
	configASSERT(pxQueue);
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	b940      	cbnz	r0, 8019f92 <xQueueGenericSendFromISR+0x20>
 8019f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f84:	f383 8811 	msr	BASEPRI, r3
 8019f88:	f3bf 8f6f 	isb	sy
 8019f8c:	f3bf 8f4f 	dsb	sy
 8019f90:	e7fe      	b.n	8019f90 <xQueueGenericSendFromISR+0x1e>
	configASSERT(
 8019f92:	b951      	cbnz	r1, 8019faa <xQueueGenericSendFromISR+0x38>
 8019f94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8019f96:	b143      	cbz	r3, 8019faa <xQueueGenericSendFromISR+0x38>
 8019f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f9c:	f383 8811 	msr	BASEPRI, r3
 8019fa0:	f3bf 8f6f 	isb	sy
 8019fa4:	f3bf 8f4f 	dsb	sy
 8019fa8:	e7fe      	b.n	8019fa8 <xQueueGenericSendFromISR+0x36>
	configASSERT(
 8019faa:	2f02      	cmp	r7, #2
 8019fac:	d10b      	bne.n	8019fc6 <xQueueGenericSendFromISR+0x54>
 8019fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fb0:	2b01      	cmp	r3, #1
 8019fb2:	d008      	beq.n	8019fc6 <xQueueGenericSendFromISR+0x54>
 8019fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fb8:	f383 8811 	msr	BASEPRI, r3
 8019fbc:	f3bf 8f6f 	isb	sy
 8019fc0:	f3bf 8f4f 	dsb	sy
 8019fc4:	e7fe      	b.n	8019fc4 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019fc6:	f7ff fdc9 	bl	8019b5c <vPortValidateInterruptPriority>
	__asm volatile
 8019fca:	f3ef 8611 	mrs	r6, BASEPRI
 8019fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fd2:	f383 8811 	msr	BASEPRI, r3
 8019fd6:	f3bf 8f6f 	isb	sy
 8019fda:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 8019fde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019fe2:	429a      	cmp	r2, r3
 8019fe4:	d301      	bcc.n	8019fea <xQueueGenericSendFromISR+0x78>
				|| (xCopyPosition == queueOVERWRITE)) {
 8019fe6:	2f02      	cmp	r7, #2
 8019fe8:	d122      	bne.n	801a030 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8019fea:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			(void) prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 8019fee:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8019ff0:	b26d      	sxtb	r5, r5
			(void) prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 8019ff2:	4649      	mov	r1, r9
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f7ff fdea 	bl	8019bce <prvCopyDataToQueue>
			if (cTxLock == queueUNLOCKED) {
 8019ffa:	1c6b      	adds	r3, r5, #1
 8019ffc:	d113      	bne.n	801a026 <xQueueGenericSendFromISR+0xb4>
					if ( listLIST_IS_EMPTY(
 8019ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a000:	b90b      	cbnz	r3, 801a006 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 801a002:	2001      	movs	r0, #1
 801a004:	e00b      	b.n	801a01e <xQueueGenericSendFromISR+0xac>
						if (xTaskRemoveFromEventList(
 801a006:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a00a:	f000 fdcb 	bl	801aba4 <xTaskRemoveFromEventList>
 801a00e:	2800      	cmp	r0, #0
 801a010:	d0f7      	beq.n	801a002 <xQueueGenericSendFromISR+0x90>
							if (pxHigherPriorityTaskWoken != NULL) {
 801a012:	f1b8 0f00 	cmp.w	r8, #0
 801a016:	d0f4      	beq.n	801a002 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a018:	2001      	movs	r0, #1
 801a01a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 801a01e:	f386 8811 	msr	BASEPRI, r6
}
 801a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = (int8_t) (cTxLock + 1);
 801a026:	3501      	adds	r5, #1
 801a028:	b26d      	sxtb	r5, r5
 801a02a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 801a02e:	e7e8      	b.n	801a002 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 801a030:	2000      	movs	r0, #0
 801a032:	e7f4      	b.n	801a01e <xQueueGenericSendFromISR+0xac>

0801a034 <xQueueGiveFromISR>:
		BaseType_t *const pxHigherPriorityTaskWoken) {
 801a034:	b570      	push	{r4, r5, r6, lr}
 801a036:	460d      	mov	r5, r1
	configASSERT(pxQueue);
 801a038:	4604      	mov	r4, r0
 801a03a:	b940      	cbnz	r0, 801a04e <xQueueGiveFromISR+0x1a>
	__asm volatile
 801a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a040:	f383 8811 	msr	BASEPRI, r3
 801a044:	f3bf 8f6f 	isb	sy
 801a048:	f3bf 8f4f 	dsb	sy
 801a04c:	e7fe      	b.n	801a04c <xQueueGiveFromISR+0x18>
	configASSERT(pxQueue->uxItemSize == 0);
 801a04e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a050:	b143      	cbz	r3, 801a064 <xQueueGiveFromISR+0x30>
 801a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a056:	f383 8811 	msr	BASEPRI, r3
 801a05a:	f3bf 8f6f 	isb	sy
 801a05e:	f3bf 8f4f 	dsb	sy
 801a062:	e7fe      	b.n	801a062 <xQueueGiveFromISR+0x2e>
	configASSERT(
 801a064:	6803      	ldr	r3, [r0, #0]
 801a066:	b953      	cbnz	r3, 801a07e <xQueueGiveFromISR+0x4a>
 801a068:	6883      	ldr	r3, [r0, #8]
 801a06a:	b143      	cbz	r3, 801a07e <xQueueGiveFromISR+0x4a>
 801a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a070:	f383 8811 	msr	BASEPRI, r3
 801a074:	f3bf 8f6f 	isb	sy
 801a078:	f3bf 8f4f 	dsb	sy
 801a07c:	e7fe      	b.n	801a07c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a07e:	f7ff fd6d 	bl	8019b5c <vPortValidateInterruptPriority>
	__asm volatile
 801a082:	f3ef 8611 	mrs	r6, BASEPRI
 801a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a08a:	f383 8811 	msr	BASEPRI, r3
 801a08e:	f3bf 8f6f 	isb	sy
 801a092:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a096:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if (uxMessagesWaiting < pxQueue->uxLength) {
 801a098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a09a:	4293      	cmp	r3, r2
 801a09c:	d91c      	bls.n	801a0d8 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 801a09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 801a0a2:	3201      	adds	r2, #1
			if (cTxLock == queueUNLOCKED) {
 801a0a4:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 801a0a6:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 801a0a8:	63a2      	str	r2, [r4, #56]	; 0x38
			if (cTxLock == queueUNLOCKED) {
 801a0aa:	d110      	bne.n	801a0ce <xQueueGiveFromISR+0x9a>
					if ( listLIST_IS_EMPTY(
 801a0ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a0ae:	b90b      	cbnz	r3, 801a0b4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 801a0b0:	2001      	movs	r0, #1
 801a0b2:	e009      	b.n	801a0c8 <xQueueGiveFromISR+0x94>
						if (xTaskRemoveFromEventList(
 801a0b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a0b8:	f000 fd74 	bl	801aba4 <xTaskRemoveFromEventList>
 801a0bc:	2800      	cmp	r0, #0
 801a0be:	d0f7      	beq.n	801a0b0 <xQueueGiveFromISR+0x7c>
							if (pxHigherPriorityTaskWoken != NULL) {
 801a0c0:	2d00      	cmp	r5, #0
 801a0c2:	d0f5      	beq.n	801a0b0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a0c4:	2001      	movs	r0, #1
 801a0c6:	6028      	str	r0, [r5, #0]
	__asm volatile
 801a0c8:	f386 8811 	msr	BASEPRI, r6
}
 801a0cc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = (int8_t) (cTxLock + 1);
 801a0ce:	3301      	adds	r3, #1
 801a0d0:	b25b      	sxtb	r3, r3
 801a0d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a0d6:	e7eb      	b.n	801a0b0 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 801a0d8:	2000      	movs	r0, #0
 801a0da:	e7f5      	b.n	801a0c8 <xQueueGiveFromISR+0x94>

0801a0dc <xQueueReceive>:
		TickType_t xTicksToWait) {
 801a0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0e0:	b085      	sub	sp, #20
 801a0e2:	460f      	mov	r7, r1
 801a0e4:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
 801a0e6:	4604      	mov	r4, r0
 801a0e8:	b940      	cbnz	r0, 801a0fc <xQueueReceive+0x20>
	__asm volatile
 801a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ee:	f383 8811 	msr	BASEPRI, r3
 801a0f2:	f3bf 8f6f 	isb	sy
 801a0f6:	f3bf 8f4f 	dsb	sy
 801a0fa:	e7fe      	b.n	801a0fa <xQueueReceive+0x1e>
	configASSERT(
 801a0fc:	b951      	cbnz	r1, 801a114 <xQueueReceive+0x38>
 801a0fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a100:	b143      	cbz	r3, 801a114 <xQueueReceive+0x38>
 801a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a106:	f383 8811 	msr	BASEPRI, r3
 801a10a:	f3bf 8f6f 	isb	sy
 801a10e:	f3bf 8f4f 	dsb	sy
 801a112:	e7fe      	b.n	801a112 <xQueueReceive+0x36>
		configASSERT(
 801a114:	f000 fdd8 	bl	801acc8 <xTaskGetSchedulerState>
 801a118:	4606      	mov	r6, r0
 801a11a:	b950      	cbnz	r0, 801a132 <xQueueReceive+0x56>
 801a11c:	9b01      	ldr	r3, [sp, #4]
 801a11e:	b14b      	cbz	r3, 801a134 <xQueueReceive+0x58>
 801a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a124:	f383 8811 	msr	BASEPRI, r3
 801a128:	f3bf 8f6f 	isb	sy
 801a12c:	f3bf 8f4f 	dsb	sy
 801a130:	e7fe      	b.n	801a130 <xQueueReceive+0x54>
 801a132:	2600      	movs	r6, #0
					portYIELD_WITHIN_API()
 801a134:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801a218 <xQueueReceive+0x13c>
		prvLockQueue(pxQueue);
 801a138:	f04f 0800 	mov.w	r8, #0
 801a13c:	e03b      	b.n	801a1b6 <xQueueReceive+0xda>
				if (xTicksToWait == (TickType_t) 0) {
 801a13e:	9d01      	ldr	r5, [sp, #4]
 801a140:	b91d      	cbnz	r5, 801a14a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL(); traceQUEUE_RECEIVE_FAILED( pxQueue );
 801a142:	f7ff fc11 	bl	8019968 <vPortExitCritical>
				return errQUEUE_EMPTY;
 801a146:	2000      	movs	r0, #0
 801a148:	e052      	b.n	801a1f0 <xQueueReceive+0x114>
				} else if (xEntryTimeSet == pdFALSE) {
 801a14a:	b916      	cbnz	r6, 801a152 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState(&xTimeOut);
 801a14c:	a802      	add	r0, sp, #8
 801a14e:	f000 fd6d 	bl	801ac2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801a152:	f7ff fc09 	bl	8019968 <vPortExitCritical>
		vTaskSuspendAll();
 801a156:	f000 fb69 	bl	801a82c <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 801a15a:	f7ff fbe3 	bl	8019924 <vPortEnterCritical>
 801a15e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a162:	2bff      	cmp	r3, #255	; 0xff
 801a164:	bf08      	it	eq
 801a166:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 801a16a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a16e:	2bff      	cmp	r3, #255	; 0xff
 801a170:	bf08      	it	eq
 801a172:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 801a176:	f7ff fbf7 	bl	8019968 <vPortExitCritical>
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 801a17a:	a901      	add	r1, sp, #4
 801a17c:	a802      	add	r0, sp, #8
 801a17e:	f000 fd61 	bl	801ac44 <xTaskCheckForTimeOut>
 801a182:	2800      	cmp	r0, #0
 801a184:	d13d      	bne.n	801a202 <xQueueReceive+0x126>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 801a186:	4620      	mov	r0, r4
 801a188:	f7ff fd16 	bl	8019bb8 <prvIsQueueEmpty>
 801a18c:	b398      	cbz	r0, 801a1f6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 801a18e:	9901      	ldr	r1, [sp, #4]
 801a190:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a194:	f000 fcce 	bl	801ab34 <vTaskPlaceOnEventList>
				prvUnlockQueue(pxQueue);
 801a198:	4620      	mov	r0, r4
 801a19a:	f7ff fd63 	bl	8019c64 <prvUnlockQueue>
				if (xTaskResumeAll() == pdFALSE) {
 801a19e:	f000 fbf3 	bl	801a988 <xTaskResumeAll>
 801a1a2:	b938      	cbnz	r0, 801a1b4 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API()
 801a1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a1a8:	f8c9 3000 	str.w	r3, [r9]
 801a1ac:	f3bf 8f4f 	dsb	sy
 801a1b0:	f3bf 8f6f 	isb	sy
					;
 801a1b4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801a1b6:	f7ff fbb5 	bl	8019924 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a1ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 801a1bc:	2d00      	cmp	r5, #0
 801a1be:	d0be      	beq.n	801a13e <xQueueReceive+0x62>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
 801a1c0:	4639      	mov	r1, r7
 801a1c2:	4620      	mov	r0, r4
						- (UBaseType_t) 1;
 801a1c4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue(pxQueue, pvBuffer);
 801a1c6:	f7ff fd37 	bl	8019c38 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
 801a1ca:	63a5      	str	r5, [r4, #56]	; 0x38
				if ( listLIST_IS_EMPTY(
 801a1cc:	6923      	ldr	r3, [r4, #16]
 801a1ce:	b163      	cbz	r3, 801a1ea <xQueueReceive+0x10e>
					if (xTaskRemoveFromEventList(
 801a1d0:	f104 0010 	add.w	r0, r4, #16
 801a1d4:	f000 fce6 	bl	801aba4 <xTaskRemoveFromEventList>
 801a1d8:	b138      	cbz	r0, 801a1ea <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 801a1da:	4b0f      	ldr	r3, [pc, #60]	; (801a218 <xQueueReceive+0x13c>)
 801a1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a1e0:	601a      	str	r2, [r3, #0]
 801a1e2:	f3bf 8f4f 	dsb	sy
 801a1e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801a1ea:	f7ff fbbd 	bl	8019968 <vPortExitCritical>
				return pdPASS;
 801a1ee:	2001      	movs	r0, #1
}
 801a1f0:	b005      	add	sp, #20
 801a1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue(pxQueue);
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f7ff fd34 	bl	8019c64 <prvUnlockQueue>
				(void) xTaskResumeAll();
 801a1fc:	f000 fbc4 	bl	801a988 <xTaskResumeAll>
 801a200:	e7d8      	b.n	801a1b4 <xQueueReceive+0xd8>
			prvUnlockQueue(pxQueue);
 801a202:	4620      	mov	r0, r4
 801a204:	f7ff fd2e 	bl	8019c64 <prvUnlockQueue>
			(void) xTaskResumeAll();
 801a208:	f000 fbbe 	bl	801a988 <xTaskResumeAll>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 801a20c:	4620      	mov	r0, r4
 801a20e:	f7ff fcd3 	bl	8019bb8 <prvIsQueueEmpty>
 801a212:	2800      	cmp	r0, #0
 801a214:	d0ce      	beq.n	801a1b4 <xQueueReceive+0xd8>
 801a216:	e796      	b.n	801a146 <xQueueReceive+0x6a>
 801a218:	e000ed04 	.word	0xe000ed04

0801a21c <xQueueSemaphoreTake>:
BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue, TickType_t xTicksToWait) {
 801a21c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT((pxQueue));
 801a220:	4604      	mov	r4, r0
BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue, TickType_t xTicksToWait) {
 801a222:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
 801a224:	b940      	cbnz	r0, 801a238 <xQueueSemaphoreTake+0x1c>
 801a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a22a:	f383 8811 	msr	BASEPRI, r3
 801a22e:	f3bf 8f6f 	isb	sy
 801a232:	f3bf 8f4f 	dsb	sy
 801a236:	e7fe      	b.n	801a236 <xQueueSemaphoreTake+0x1a>
	configASSERT(pxQueue->uxItemSize == 0);
 801a238:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801a23a:	b145      	cbz	r5, 801a24e <xQueueSemaphoreTake+0x32>
 801a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a240:	f383 8811 	msr	BASEPRI, r3
 801a244:	f3bf 8f6f 	isb	sy
 801a248:	f3bf 8f4f 	dsb	sy
 801a24c:	e7fe      	b.n	801a24c <xQueueSemaphoreTake+0x30>
		configASSERT(
 801a24e:	f000 fd3b 	bl	801acc8 <xTaskGetSchedulerState>
 801a252:	4606      	mov	r6, r0
 801a254:	b950      	cbnz	r0, 801a26c <xQueueSemaphoreTake+0x50>
 801a256:	9b01      	ldr	r3, [sp, #4]
 801a258:	b16b      	cbz	r3, 801a276 <xQueueSemaphoreTake+0x5a>
 801a25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a25e:	f383 8811 	msr	BASEPRI, r3
 801a262:	f3bf 8f6f 	isb	sy
 801a266:	f3bf 8f4f 	dsb	sy
 801a26a:	e7fe      	b.n	801a26a <xQueueSemaphoreTake+0x4e>
 801a26c:	462e      	mov	r6, r5
					portYIELD_WITHIN_API()
 801a26e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 801a3a0 <xQueueSemaphoreTake+0x184>
		prvLockQueue(pxQueue);
 801a272:	2700      	movs	r7, #0
 801a274:	e051      	b.n	801a31a <xQueueSemaphoreTake+0xfe>
 801a276:	4605      	mov	r5, r0
 801a278:	e7f9      	b.n	801a26e <xQueueSemaphoreTake+0x52>
				if (xTicksToWait == (TickType_t) 0) {
 801a27a:	9b01      	ldr	r3, [sp, #4]
 801a27c:	b963      	cbnz	r3, 801a298 <xQueueSemaphoreTake+0x7c>
						configASSERT(xInheritanceOccurred == pdFALSE);
 801a27e:	b145      	cbz	r5, 801a292 <xQueueSemaphoreTake+0x76>
 801a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a284:	f383 8811 	msr	BASEPRI, r3
 801a288:	f3bf 8f6f 	isb	sy
 801a28c:	f3bf 8f4f 	dsb	sy
 801a290:	e7fe      	b.n	801a290 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL(); traceQUEUE_RECEIVE_FAILED( pxQueue );
 801a292:	f7ff fb69 	bl	8019968 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801a296:	e05e      	b.n	801a356 <xQueueSemaphoreTake+0x13a>
				} else if (xEntryTimeSet == pdFALSE) {
 801a298:	b916      	cbnz	r6, 801a2a0 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState(&xTimeOut);
 801a29a:	a802      	add	r0, sp, #8
 801a29c:	f000 fcc6 	bl	801ac2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801a2a0:	f7ff fb62 	bl	8019968 <vPortExitCritical>
		vTaskSuspendAll();
 801a2a4:	f000 fac2 	bl	801a82c <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 801a2a8:	f7ff fb3c 	bl	8019924 <vPortEnterCritical>
 801a2ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a2b0:	2bff      	cmp	r3, #255	; 0xff
 801a2b2:	bf08      	it	eq
 801a2b4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 801a2b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a2bc:	2bff      	cmp	r3, #255	; 0xff
 801a2be:	bf08      	it	eq
 801a2c0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 801a2c4:	f7ff fb50 	bl	8019968 <vPortExitCritical>
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 801a2c8:	a901      	add	r1, sp, #4
 801a2ca:	a802      	add	r0, sp, #8
 801a2cc:	f000 fcba 	bl	801ac44 <xTaskCheckForTimeOut>
 801a2d0:	2800      	cmp	r0, #0
 801a2d2:	d14a      	bne.n	801a36a <xQueueSemaphoreTake+0x14e>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 801a2d4:	4620      	mov	r0, r4
 801a2d6:	f7ff fc6f 	bl	8019bb8 <prvIsQueueEmpty>
 801a2da:	2800      	cmp	r0, #0
 801a2dc:	d03f      	beq.n	801a35e <xQueueSemaphoreTake+0x142>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 801a2de:	6823      	ldr	r3, [r4, #0]
 801a2e0:	b93b      	cbnz	r3, 801a2f2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 801a2e2:	f7ff fb1f 	bl	8019924 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit(
 801a2e6:	68a0      	ldr	r0, [r4, #8]
 801a2e8:	f000 fcfe 	bl	801ace8 <xTaskPriorityInherit>
 801a2ec:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801a2ee:	f7ff fb3b 	bl	8019968 <vPortExitCritical>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 801a2f2:	9901      	ldr	r1, [sp, #4]
 801a2f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a2f8:	f000 fc1c 	bl	801ab34 <vTaskPlaceOnEventList>
				prvUnlockQueue(pxQueue);
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	f7ff fcb1 	bl	8019c64 <prvUnlockQueue>
				if (xTaskResumeAll() == pdFALSE) {
 801a302:	f000 fb41 	bl	801a988 <xTaskResumeAll>
 801a306:	b938      	cbnz	r0, 801a318 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API()
 801a308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a30c:	f8c8 3000 	str.w	r3, [r8]
 801a310:	f3bf 8f4f 	dsb	sy
 801a314:	f3bf 8f6f 	isb	sy
					;
 801a318:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801a31a:	f7ff fb03 	bl	8019924 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a31e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t) 0) {
 801a320:	2b00      	cmp	r3, #0
 801a322:	d0aa      	beq.n	801a27a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t) 1;
 801a324:	3b01      	subs	r3, #1
 801a326:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 801a328:	6823      	ldr	r3, [r4, #0]
 801a32a:	b913      	cbnz	r3, 801a332 <xQueueSemaphoreTake+0x116>
								pvTaskIncrementMutexHeldCount();
 801a32c:	f000 fdde 	bl	801aeec <pvTaskIncrementMutexHeldCount>
						pxQueue->u.xSemaphore.xMutexHolder =
 801a330:	60a0      	str	r0, [r4, #8]
				if ( listLIST_IS_EMPTY(
 801a332:	6923      	ldr	r3, [r4, #16]
 801a334:	b163      	cbz	r3, 801a350 <xQueueSemaphoreTake+0x134>
					if (xTaskRemoveFromEventList(
 801a336:	f104 0010 	add.w	r0, r4, #16
 801a33a:	f000 fc33 	bl	801aba4 <xTaskRemoveFromEventList>
 801a33e:	b138      	cbz	r0, 801a350 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 801a340:	4b17      	ldr	r3, [pc, #92]	; (801a3a0 <xQueueSemaphoreTake+0x184>)
 801a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a346:	601a      	str	r2, [r3, #0]
 801a348:	f3bf 8f4f 	dsb	sy
 801a34c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801a350:	f7ff fb0a 	bl	8019968 <vPortExitCritical>
				return pdPASS;
 801a354:	2501      	movs	r5, #1
}
 801a356:	4628      	mov	r0, r5
 801a358:	b004      	add	sp, #16
 801a35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue(pxQueue);
 801a35e:	4620      	mov	r0, r4
 801a360:	f7ff fc80 	bl	8019c64 <prvUnlockQueue>
				(void) xTaskResumeAll();
 801a364:	f000 fb10 	bl	801a988 <xTaskResumeAll>
 801a368:	e7d6      	b.n	801a318 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue(pxQueue);
 801a36a:	4620      	mov	r0, r4
 801a36c:	f7ff fc7a 	bl	8019c64 <prvUnlockQueue>
			(void) xTaskResumeAll();
 801a370:	f000 fb0a 	bl	801a988 <xTaskResumeAll>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 801a374:	4620      	mov	r0, r4
 801a376:	f7ff fc1f 	bl	8019bb8 <prvIsQueueEmpty>
 801a37a:	2800      	cmp	r0, #0
 801a37c:	d0cc      	beq.n	801a318 <xQueueSemaphoreTake+0xfc>
					if (xInheritanceOccurred != pdFALSE) {
 801a37e:	2d00      	cmp	r5, #0
 801a380:	d0e9      	beq.n	801a356 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 801a382:	f7ff facf 	bl	8019924 <vPortEnterCritical>
	if ( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U) {
 801a386:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a388:	b119      	cbz	r1, 801a392 <xQueueSemaphoreTake+0x176>
				- (UBaseType_t) listGET_ITEM_VALUE_OF_HEAD_ENTRY(
 801a38a:	6b23      	ldr	r3, [r4, #48]	; 0x30
		uxHighestPriorityOfWaitingTasks = (UBaseType_t) configMAX_PRIORITIES
 801a38c:	6819      	ldr	r1, [r3, #0]
 801a38e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout(
 801a392:	68a0      	ldr	r0, [r4, #8]
 801a394:	f000 fd4e 	bl	801ae34 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 801a398:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 801a39a:	f7ff fae5 	bl	8019968 <vPortExitCritical>
 801a39e:	e7da      	b.n	801a356 <xQueueSemaphoreTake+0x13a>
 801a3a0:	e000ed04 	.word	0xe000ed04

0801a3a4 <xQueueReceiveFromISR>:
		BaseType_t *const pxHigherPriorityTaskWoken) {
 801a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3a8:	4689      	mov	r9, r1
 801a3aa:	4690      	mov	r8, r2
	configASSERT(pxQueue);
 801a3ac:	4605      	mov	r5, r0
 801a3ae:	b940      	cbnz	r0, 801a3c2 <xQueueReceiveFromISR+0x1e>
 801a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3b4:	f383 8811 	msr	BASEPRI, r3
 801a3b8:	f3bf 8f6f 	isb	sy
 801a3bc:	f3bf 8f4f 	dsb	sy
 801a3c0:	e7fe      	b.n	801a3c0 <xQueueReceiveFromISR+0x1c>
	configASSERT(
 801a3c2:	b951      	cbnz	r1, 801a3da <xQueueReceiveFromISR+0x36>
 801a3c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a3c6:	b143      	cbz	r3, 801a3da <xQueueReceiveFromISR+0x36>
 801a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3cc:	f383 8811 	msr	BASEPRI, r3
 801a3d0:	f3bf 8f6f 	isb	sy
 801a3d4:	f3bf 8f4f 	dsb	sy
 801a3d8:	e7fe      	b.n	801a3d8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a3da:	f7ff fbbf 	bl	8019b5c <vPortValidateInterruptPriority>
	__asm volatile
 801a3de:	f3ef 8711 	mrs	r7, BASEPRI
 801a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3e6:	f383 8811 	msr	BASEPRI, r3
 801a3ea:	f3bf 8f6f 	isb	sy
 801a3ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a3f2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if (uxMessagesWaiting > (UBaseType_t) 0) {
 801a3f4:	b31c      	cbz	r4, 801a43e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 801a3f6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue(pxQueue, pvBuffer);
 801a3fa:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 801a3fc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue(pxQueue, pvBuffer);
 801a3fe:	4628      	mov	r0, r5
 801a400:	f7ff fc1a 	bl	8019c38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t) 1;
 801a404:	3c01      	subs	r4, #1
			if (cRxLock == queueUNLOCKED) {
 801a406:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t) 1;
 801a408:	63ac      	str	r4, [r5, #56]	; 0x38
			if (cRxLock == queueUNLOCKED) {
 801a40a:	d113      	bne.n	801a434 <xQueueReceiveFromISR+0x90>
				if ( listLIST_IS_EMPTY(
 801a40c:	692b      	ldr	r3, [r5, #16]
 801a40e:	b90b      	cbnz	r3, 801a414 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 801a410:	2001      	movs	r0, #1
 801a412:	e00b      	b.n	801a42c <xQueueReceiveFromISR+0x88>
					if (xTaskRemoveFromEventList(
 801a414:	f105 0010 	add.w	r0, r5, #16
 801a418:	f000 fbc4 	bl	801aba4 <xTaskRemoveFromEventList>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d0f7      	beq.n	801a410 <xQueueReceiveFromISR+0x6c>
						if (pxHigherPriorityTaskWoken != NULL) {
 801a420:	f1b8 0f00 	cmp.w	r8, #0
 801a424:	d0f4      	beq.n	801a410 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a426:	2001      	movs	r0, #1
 801a428:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 801a42c:	f387 8811 	msr	BASEPRI, r7
}
 801a430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = (int8_t) (cRxLock + 1);
 801a434:	3601      	adds	r6, #1
 801a436:	b276      	sxtb	r6, r6
 801a438:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 801a43c:	e7e8      	b.n	801a410 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 801a43e:	4620      	mov	r0, r4
 801a440:	e7f4      	b.n	801a42c <xQueueReceiveFromISR+0x88>
	...

0801a444 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

void vQueueAddToRegistry(QueueHandle_t xQueue, const char *pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 801a444:	b530      	push	{r4, r5, lr}

	/* See if there is an empty space in the registry.  A NULL name denotes
	 a free slot. */
	for (ux = (UBaseType_t) 0U; ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE;
			ux++) {
		if (xQueueRegistry[ux].pcQueueName == NULL) {
 801a446:	4a07      	ldr	r2, [pc, #28]	; (801a464 <vQueueAddToRegistry+0x20>)
	for (ux = (UBaseType_t) 0U; ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE;
 801a448:	2300      	movs	r3, #0
		if (xQueueRegistry[ux].pcQueueName == NULL) {
 801a44a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 801a44e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 801a452:	b91d      	cbnz	r5, 801a45c <vQueueAddToRegistry+0x18>
			/* Store the information on this queue. */
			xQueueRegistry[ux].pcQueueName = pcQueueName;
 801a454:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			xQueueRegistry[ux].xHandle = xQueue;
 801a458:	6060      	str	r0, [r4, #4]
			break;
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a45a:	bd30      	pop	{r4, r5, pc}
			ux++) {
 801a45c:	3301      	adds	r3, #1
	for (ux = (UBaseType_t) 0U; ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE;
 801a45e:	2b08      	cmp	r3, #8
 801a460:	d1f3      	bne.n	801a44a <vQueueAddToRegistry+0x6>
 801a462:	e7fa      	b.n	801a45a <vQueueAddToRegistry+0x16>
 801a464:	200096f8 	.word	0x200096f8

0801a468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 801a468:	b570      	push	{r4, r5, r6, lr}
 801a46a:	4604      	mov	r4, r0
 801a46c:	460d      	mov	r5, r1
 801a46e:	4616      	mov	r6, r2
	 will not actually cause the task to block, just place it on a blocked
	 list.  It will not block until the scheduler is unlocked - at which
	 time a yield will be performed.  If an item is added to the queue while
	 the queue is locked, and the calling task blocks on the queue, then the
	 calling task will be immediately unblocked when the queue is unlocked. */
	prvLockQueue(pxQueue);
 801a470:	f7ff fa58 	bl	8019924 <vPortEnterCritical>
 801a474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a478:	2bff      	cmp	r3, #255	; 0xff
 801a47a:	bf04      	itt	eq
 801a47c:	2300      	moveq	r3, #0
 801a47e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 801a482:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a486:	2bff      	cmp	r3, #255	; 0xff
 801a488:	bf04      	itt	eq
 801a48a:	2300      	moveq	r3, #0
 801a48c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 801a490:	f7ff fa6a 	bl	8019968 <vPortExitCritical>
	if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0U) {
 801a494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a496:	b92b      	cbnz	r3, 801a4a4 <vQueueWaitForMessageRestricted+0x3c>
		/* There is nothing in the queue, block for the specified period. */
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive),
 801a498:	4632      	mov	r2, r6
 801a49a:	4629      	mov	r1, r5
 801a49c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801a4a0:	f000 fb62 	bl	801ab68 <vTaskPlaceOnEventListRestricted>
				xTicksToWait, xWaitIndefinitely);
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
	prvUnlockQueue(pxQueue);
 801a4a4:	4620      	mov	r0, r4
}
 801a4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	prvUnlockQueue(pxQueue);
 801a4aa:	f7ff bbdb 	b.w	8019c64 <prvUnlockQueue>
	...

0801a4b0 <prvResetNextTaskUnblockTime>:
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
	TCB_t *pxTCB;

	if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 801a4b0:	4a06      	ldr	r2, [pc, #24]	; (801a4cc <prvResetNextTaskUnblockTime+0x1c>)
 801a4b2:	6813      	ldr	r3, [r2, #0]
 801a4b4:	6819      	ldr	r1, [r3, #0]
 801a4b6:	4b06      	ldr	r3, [pc, #24]	; (801a4d0 <prvResetNextTaskUnblockTime+0x20>)
 801a4b8:	b919      	cbnz	r1, 801a4c2 <prvResetNextTaskUnblockTime+0x12>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		 the maximum possible value so it is	extremely unlikely that the
		 if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		 there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a4ba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		 the item at the head of the delayed list.  This is the time at
		 which the task at the head of the delayed list should be removed
		 from the Blocked state. */
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 801a4be:	601a      	str	r2, [r3, #0]
				&((pxTCB)->xStateListItem));
	}
}
 801a4c0:	4770      	bx	lr
		(pxTCB) = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4c2:	6812      	ldr	r2, [r2, #0]
 801a4c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 801a4c6:	68d2      	ldr	r2, [r2, #12]
 801a4c8:	6852      	ldr	r2, [r2, #4]
 801a4ca:	e7f8      	b.n	801a4be <prvResetNextTaskUnblockTime+0xe>
 801a4cc:	20007b64 	.word	0x20007b64
 801a4d0:	20007c3c 	.word	0x20007c3c

0801a4d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,
		const BaseType_t xCanBlockIndefinitely) {
 801a4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 801a4d6:	4b1b      	ldr	r3, [pc, #108]	; (801a544 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	 as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 801a4d8:	4f1b      	ldr	r7, [pc, #108]	; (801a548 <prvAddCurrentTaskToDelayedList+0x74>)
	const TickType_t xConstTickCount = xTickCount;
 801a4da:	681d      	ldr	r5, [r3, #0]
		const BaseType_t xCanBlockIndefinitely) {
 801a4dc:	4604      	mov	r4, r0
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 801a4de:	6838      	ldr	r0, [r7, #0]
 801a4e0:	3004      	adds	r0, #4
		const BaseType_t xCanBlockIndefinitely) {
 801a4e2:	460e      	mov	r6, r1
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 801a4e4:	f7ff f9a1 	bl	801982a <uxListRemove>
 801a4e8:	463b      	mov	r3, r7
 801a4ea:	b940      	cbnz	r0, 801a4fe <prvAddCurrentTaskToDelayedList+0x2a>
		/* The current task must be in a ready list, so there is no need to
		 check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY(pxCurrentTCB->uxPriority, uxTopReadyPriority); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a4ec:	6839      	ldr	r1, [r7, #0]
 801a4ee:	4817      	ldr	r0, [pc, #92]	; (801a54c <prvAddCurrentTaskToDelayedList+0x78>)
 801a4f0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 801a4f2:	6802      	ldr	r2, [r0, #0]
 801a4f4:	2101      	movs	r1, #1
 801a4f6:	40b9      	lsls	r1, r7
 801a4f8:	ea22 0201 	bic.w	r2, r2, r1
 801a4fc:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if ((xTicksToWait == portMAX_DELAY )
 801a4fe:	1c62      	adds	r2, r4, #1
 801a500:	d107      	bne.n	801a512 <prvAddCurrentTaskToDelayedList+0x3e>
				&& (xCanBlockIndefinitely != pdFALSE)) {
 801a502:	b136      	cbz	r6, 801a512 <prvAddCurrentTaskToDelayedList+0x3e>
			/* Add the task to the suspended task list instead of a delayed task
			 list to ensure it is not woken by a timing event.  It will block
			 indefinitely. */
			vListInsertEnd(&xSuspendedTaskList,
					&(pxCurrentTCB->xStateListItem));
 801a504:	6819      	ldr	r1, [r3, #0]
			vListInsertEnd(&xSuspendedTaskList,
 801a506:	4812      	ldr	r0, [pc, #72]	; (801a550 <prvAddCurrentTaskToDelayedList+0x7c>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd(&xSuspendedTaskList,
 801a50c:	3104      	adds	r1, #4
 801a50e:	f7ff b969 	b.w	80197e4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem),
 801a512:	681a      	ldr	r2, [r3, #0]
 801a514:	192c      	adds	r4, r5, r4
 801a516:	6054      	str	r4, [r2, #4]
			if (xTimeToWake < xConstTickCount) {
 801a518:	d307      	bcc.n	801a52a <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert(pxOverflowDelayedTaskList,
 801a51a:	4a0e      	ldr	r2, [pc, #56]	; (801a554 <prvAddCurrentTaskToDelayedList+0x80>)
 801a51c:	6810      	ldr	r0, [r2, #0]
						&(pxCurrentTCB->xStateListItem));
 801a51e:	6819      	ldr	r1, [r3, #0]
}
 801a520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert(pxOverflowDelayedTaskList,
 801a524:	3104      	adds	r1, #4
 801a526:	f7ff b969 	b.w	80197fc <vListInsert>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 801a52a:	4a0b      	ldr	r2, [pc, #44]	; (801a558 <prvAddCurrentTaskToDelayedList+0x84>)
 801a52c:	6810      	ldr	r0, [r2, #0]
 801a52e:	6819      	ldr	r1, [r3, #0]
 801a530:	3104      	adds	r1, #4
 801a532:	f7ff f963 	bl	80197fc <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime) {
 801a536:	4b09      	ldr	r3, [pc, #36]	; (801a55c <prvAddCurrentTaskToDelayedList+0x88>)
 801a538:	681a      	ldr	r2, [r3, #0]
 801a53a:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 801a53c:	bf88      	it	hi
 801a53e:	601c      	strhi	r4, [r3, #0]
}
 801a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a542:	bf00      	nop
 801a544:	20007c84 	.word	0x20007c84
 801a548:	20007b60 	.word	0x20007b60
 801a54c:	20007c0c 	.word	0x20007c0c
 801a550:	20007c5c 	.word	0x20007c5c
 801a554:	20007b68 	.word	0x20007b68
 801a558:	20007b64 	.word	0x20007b64
 801a55c:	20007c3c 	.word	0x20007c3c

0801a560 <prvIdleTask>:
static portTASK_FUNCTION( prvIdleTask, pvParameters ) {
 801a560:	b580      	push	{r7, lr}
				taskYIELD();
 801a562:	f8df 8064 	ldr.w	r8, [pc, #100]	; 801a5c8 <prvIdleTask+0x68>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 801a566:	4f14      	ldr	r7, [pc, #80]	; (801a5b8 <prvIdleTask+0x58>)
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 801a568:	4c14      	ldr	r4, [pc, #80]	; (801a5bc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 801a56a:	4e15      	ldr	r6, [pc, #84]	; (801a5c0 <prvIdleTask+0x60>)
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 801a56c:	6823      	ldr	r3, [r4, #0]
 801a56e:	b963      	cbnz	r3, 801a58a <prvIdleTask+0x2a>
			if ( listCURRENT_LIST_LENGTH(
 801a570:	4b14      	ldr	r3, [pc, #80]	; (801a5c4 <prvIdleTask+0x64>)
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b01      	cmp	r3, #1
 801a576:	d9f8      	bls.n	801a56a <prvIdleTask+0xa>
				taskYIELD();
 801a578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801a57c:	f8c8 3000 	str.w	r3, [r8]
 801a580:	f3bf 8f4f 	dsb	sy
 801a584:	f3bf 8f6f 	isb	sy
 801a588:	e7ee      	b.n	801a568 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 801a58a:	f7ff f9cb 	bl	8019924 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY(
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	68dd      	ldr	r5, [r3, #12]
				(void) uxListRemove(&(pxTCB->xStateListItem));
 801a592:	1d28      	adds	r0, r5, #4
 801a594:	f7ff f949 	bl	801982a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a598:	6833      	ldr	r3, [r6, #0]
 801a59a:	3b01      	subs	r3, #1
 801a59c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a59e:	6823      	ldr	r3, [r4, #0]
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801a5a4:	f7ff f9e0 	bl	8019968 <vPortExitCritical>
		vPortFree(pxTCB->pxStack);
 801a5a8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a5aa:	f7ff f8d5 	bl	8019758 <vPortFree>
		vPortFree(pxTCB);
 801a5ae:	4628      	mov	r0, r5
 801a5b0:	f7ff f8d2 	bl	8019758 <vPortFree>
}
 801a5b4:	e7da      	b.n	801a56c <prvIdleTask+0xc>
 801a5b6:	bf00      	nop
 801a5b8:	20007c70 	.word	0x20007c70
 801a5bc:	20007bfc 	.word	0x20007bfc
 801a5c0:	20007bf8 	.word	0x20007bf8
 801a5c4:	20007b6c 	.word	0x20007b6c
 801a5c8:	e000ed04 	.word	0xe000ed04

0801a5cc <xTaskCreate>:
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 801a5cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a5d0:	0096      	lsls	r6, r2, #2
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 801a5d2:	4607      	mov	r7, r0
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a5d4:	4630      	mov	r0, r6
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 801a5d6:	460d      	mov	r5, r1
 801a5d8:	4698      	mov	r8, r3
		pxStack = pvPortMalloc((((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a5da:	f7ff f831 	bl	8019640 <pvPortMalloc>
		if (pxStack != NULL) {
 801a5de:	4681      	mov	r9, r0
 801a5e0:	b1a0      	cbz	r0, 801a60c <xTaskCreate+0x40>
			pxNewTCB = (TCB_t*) pvPortMalloc(sizeof(TCB_t)); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a5e2:	205c      	movs	r0, #92	; 0x5c
 801a5e4:	f7ff f82c 	bl	8019640 <pvPortMalloc>
			if (pxNewTCB != NULL) {
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	b160      	cbz	r0, 801a606 <xTaskCreate+0x3a>
				pxNewTCB->pxStack = pxStack;
 801a5ec:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		(void) memset(pxNewTCB->pxStack, (int) tskSTACK_FILL_BYTE,
 801a5f0:	4632      	mov	r2, r6
 801a5f2:	21a5      	movs	r1, #165	; 0xa5
 801a5f4:	4648      	mov	r0, r9
 801a5f6:	f002 fc2f 	bl	801ce58 <memset>
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 801a5fa:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if (pcName != NULL) {
 801a5fe:	b945      	cbnz	r5, 801a612 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[0] = 0x00;
 801a600:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801a604:	e014      	b.n	801a630 <xTaskCreate+0x64>
				vPortFree(pxStack);
 801a606:	4648      	mov	r0, r9
 801a608:	f7ff f8a6 	bl	8019758 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a60c:	f04f 35ff 	mov.w	r5, #4294967295
 801a610:	e096      	b.n	801a740 <xTaskCreate+0x174>
 801a612:	1e6b      	subs	r3, r5, #1
 801a614:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801a618:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[x] = pcName[x];
 801a61a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801a61e:	f802 1b01 	strb.w	r1, [r2], #1
			if (pcName[x] == (char) 0x00) {
 801a622:	7819      	ldrb	r1, [r3, #0]
 801a624:	b109      	cbz	r1, 801a62a <xTaskCreate+0x5e>
		for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN;
 801a626:	429d      	cmp	r5, r3
 801a628:	d1f7      	bne.n	801a61a <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1] = '\0';
 801a62a:	2300      	movs	r3, #0
 801a62c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if (uxPriority >= (UBaseType_t) configMAX_PRIORITIES) {
 801a630:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a632:	2d06      	cmp	r5, #6
 801a634:	bf28      	it	cs
 801a636:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801a638:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 801a63c:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 801a640:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801a642:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 801a644:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 801a646:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 801a64a:	3e04      	subs	r6, #4
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 801a64c:	f7ff f8c7 	bl	80197de <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 801a650:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 801a654:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = &(pxNewTCB->pxStack[ulStackDepth - (uint32_t) 1]);
 801a658:	445e      	add	r6, fp
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 801a65a:	f7ff f8c0 	bl	80197de <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801a65e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 801a662:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 801a664:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 801a666:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a668:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack,
 801a66c:	4642      	mov	r2, r8
 801a66e:	4639      	mov	r1, r7
 801a670:	f026 0007 	bic.w	r0, r6, #7
 801a674:	f7ff f928 	bl	80198c8 <pxPortInitialiseStack>
	if (pxCreatedTask != NULL) {
 801a678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack,
 801a67a:	6020      	str	r0, [r4, #0]
	if (pxCreatedTask != NULL) {
 801a67c:	b103      	cbz	r3, 801a680 <xTaskCreate+0xb4>
		*pxCreatedTask = (TaskHandle_t) pxNewTCB;
 801a67e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 801a680:	f7ff f950 	bl	8019924 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 801a684:	4b35      	ldr	r3, [pc, #212]	; (801a75c <xTaskCreate+0x190>)
		if (pxCurrentTCB == NULL) {
 801a686:	4e36      	ldr	r6, [pc, #216]	; (801a760 <xTaskCreate+0x194>)
		uxCurrentNumberOfTasks++;
 801a688:	681a      	ldr	r2, [r3, #0]
 801a68a:	4f36      	ldr	r7, [pc, #216]	; (801a764 <xTaskCreate+0x198>)
 801a68c:	3201      	adds	r2, #1
 801a68e:	601a      	str	r2, [r3, #0]
		if (pxCurrentTCB == NULL) {
 801a690:	6832      	ldr	r2, [r6, #0]
 801a692:	2a00      	cmp	r2, #0
 801a694:	d157      	bne.n	801a746 <xTaskCreate+0x17a>
			pxCurrentTCB = pxNewTCB;
 801a696:	6034      	str	r4, [r6, #0]
			if (uxCurrentNumberOfTasks == (UBaseType_t) 1) {
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	2b01      	cmp	r3, #1
 801a69c:	d12b      	bne.n	801a6f6 <xTaskCreate+0x12a>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 801a69e:	4832      	ldr	r0, [pc, #200]	; (801a768 <xTaskCreate+0x19c>)
	vListInitialise(&xDelayedTaskList1);
 801a6a0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801a7a8 <xTaskCreate+0x1dc>
	vListInitialise(&xDelayedTaskList2);
 801a6a4:	4d31      	ldr	r5, [pc, #196]	; (801a76c <xTaskCreate+0x1a0>)
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 801a6a6:	f7ff f88f 	bl	80197c8 <vListInitialise>
 801a6aa:	4831      	ldr	r0, [pc, #196]	; (801a770 <xTaskCreate+0x1a4>)
 801a6ac:	f7ff f88c 	bl	80197c8 <vListInitialise>
 801a6b0:	4830      	ldr	r0, [pc, #192]	; (801a774 <xTaskCreate+0x1a8>)
 801a6b2:	f7ff f889 	bl	80197c8 <vListInitialise>
 801a6b6:	4830      	ldr	r0, [pc, #192]	; (801a778 <xTaskCreate+0x1ac>)
 801a6b8:	f7ff f886 	bl	80197c8 <vListInitialise>
 801a6bc:	482f      	ldr	r0, [pc, #188]	; (801a77c <xTaskCreate+0x1b0>)
 801a6be:	f7ff f883 	bl	80197c8 <vListInitialise>
 801a6c2:	482f      	ldr	r0, [pc, #188]	; (801a780 <xTaskCreate+0x1b4>)
 801a6c4:	f7ff f880 	bl	80197c8 <vListInitialise>
 801a6c8:	482e      	ldr	r0, [pc, #184]	; (801a784 <xTaskCreate+0x1b8>)
 801a6ca:	f7ff f87d 	bl	80197c8 <vListInitialise>
	vListInitialise(&xDelayedTaskList1);
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	f7ff f87a 	bl	80197c8 <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 801a6d4:	4628      	mov	r0, r5
 801a6d6:	f7ff f877 	bl	80197c8 <vListInitialise>
	vListInitialise(&xPendingReadyList);
 801a6da:	482b      	ldr	r0, [pc, #172]	; (801a788 <xTaskCreate+0x1bc>)
 801a6dc:	f7ff f874 	bl	80197c8 <vListInitialise>
		vListInitialise(&xTasksWaitingTermination);
 801a6e0:	482a      	ldr	r0, [pc, #168]	; (801a78c <xTaskCreate+0x1c0>)
 801a6e2:	f7ff f871 	bl	80197c8 <vListInitialise>
		vListInitialise(&xSuspendedTaskList);
 801a6e6:	482a      	ldr	r0, [pc, #168]	; (801a790 <xTaskCreate+0x1c4>)
 801a6e8:	f7ff f86e 	bl	80197c8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801a6ec:	4b29      	ldr	r3, [pc, #164]	; (801a794 <xTaskCreate+0x1c8>)
 801a6ee:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a6f2:	4b29      	ldr	r3, [pc, #164]	; (801a798 <xTaskCreate+0x1cc>)
 801a6f4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 801a6f6:	4a29      	ldr	r2, [pc, #164]	; (801a79c <xTaskCreate+0x1d0>)
		prvAddTaskToReadyList(pxNewTCB);
 801a6f8:	4929      	ldr	r1, [pc, #164]	; (801a7a0 <xTaskCreate+0x1d4>)
		uxTaskNumber++;
 801a6fa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList(pxNewTCB);
 801a6fc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 801a6fe:	3301      	adds	r3, #1
 801a700:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList(pxNewTCB);
 801a702:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a704:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList(pxNewTCB);
 801a706:	2501      	movs	r5, #1
 801a708:	fa05 f302 	lsl.w	r3, r5, r2
 801a70c:	4303      	orrs	r3, r0
 801a70e:	600b      	str	r3, [r1, #0]
 801a710:	4b15      	ldr	r3, [pc, #84]	; (801a768 <xTaskCreate+0x19c>)
 801a712:	2014      	movs	r0, #20
 801a714:	fb00 3002 	mla	r0, r0, r2, r3
 801a718:	4649      	mov	r1, r9
 801a71a:	f7ff f863 	bl	80197e4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801a71e:	f7ff f923 	bl	8019968 <vPortExitCritical>
	if (xSchedulerRunning != pdFALSE) {
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	b163      	cbz	r3, 801a740 <xTaskCreate+0x174>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 801a726:	6833      	ldr	r3, [r6, #0]
 801a728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a72a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d207      	bcs.n	801a740 <xTaskCreate+0x174>
			taskYIELD_IF_USING_PREEMPTION();
 801a730:	4b1c      	ldr	r3, [pc, #112]	; (801a7a4 <xTaskCreate+0x1d8>)
 801a732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a736:	601a      	str	r2, [r3, #0]
 801a738:	f3bf 8f4f 	dsb	sy
 801a73c:	f3bf 8f6f 	isb	sy
}
 801a740:	4628      	mov	r0, r5
 801a742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (xSchedulerRunning == pdFALSE) {
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d1d4      	bne.n	801a6f6 <xTaskCreate+0x12a>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 801a74c:	6833      	ldr	r3, [r6, #0]
 801a74e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a752:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 801a754:	bf28      	it	cs
 801a756:	6034      	strcs	r4, [r6, #0]
 801a758:	e7cd      	b.n	801a6f6 <xTaskCreate+0x12a>
 801a75a:	bf00      	nop
 801a75c:	20007bf8 	.word	0x20007bf8
 801a760:	20007b60 	.word	0x20007b60
 801a764:	20007c58 	.word	0x20007c58
 801a768:	20007b6c 	.word	0x20007b6c
 801a76c:	20007c24 	.word	0x20007c24
 801a770:	20007b80 	.word	0x20007b80
 801a774:	20007b94 	.word	0x20007b94
 801a778:	20007ba8 	.word	0x20007ba8
 801a77c:	20007bbc 	.word	0x20007bbc
 801a780:	20007bd0 	.word	0x20007bd0
 801a784:	20007be4 	.word	0x20007be4
 801a788:	20007c44 	.word	0x20007c44
 801a78c:	20007c70 	.word	0x20007c70
 801a790:	20007c5c 	.word	0x20007c5c
 801a794:	20007b64 	.word	0x20007b64
 801a798:	20007b68 	.word	0x20007b68
 801a79c:	20007c08 	.word	0x20007c08
 801a7a0:	20007c0c 	.word	0x20007c0c
 801a7a4:	e000ed04 	.word	0xe000ed04
 801a7a8:	20007c10 	.word	0x20007c10

0801a7ac <vTaskStartScheduler>:
void vTaskStartScheduler(void) {
 801a7ac:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(prvIdleTask,
 801a7ae:	4b19      	ldr	r3, [pc, #100]	; (801a814 <vTaskStartScheduler+0x68>)
 801a7b0:	9301      	str	r3, [sp, #4]
 801a7b2:	2400      	movs	r4, #0
 801a7b4:	4918      	ldr	r1, [pc, #96]	; (801a818 <vTaskStartScheduler+0x6c>)
 801a7b6:	4819      	ldr	r0, [pc, #100]	; (801a81c <vTaskStartScheduler+0x70>)
 801a7b8:	9400      	str	r4, [sp, #0]
 801a7ba:	4623      	mov	r3, r4
 801a7bc:	2280      	movs	r2, #128	; 0x80
 801a7be:	f7ff ff05 	bl	801a5cc <xTaskCreate>
		if (xReturn == pdPASS) {
 801a7c2:	2801      	cmp	r0, #1
 801a7c4:	d118      	bne.n	801a7f8 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 801a7c6:	f000 fbe7 	bl	801af98 <xTimerCreateTimerTask>
	if (xReturn == pdPASS) {
 801a7ca:	2801      	cmp	r0, #1
 801a7cc:	d114      	bne.n	801a7f8 <vTaskStartScheduler+0x4c>
	__asm volatile
 801a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d2:	f383 8811 	msr	BASEPRI, r3
 801a7d6:	f3bf 8f6f 	isb	sy
 801a7da:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 801a7de:	4b10      	ldr	r3, [pc, #64]	; (801a820 <vTaskStartScheduler+0x74>)
 801a7e0:	f04f 32ff 	mov.w	r2, #4294967295
 801a7e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a7e6:	4b0f      	ldr	r3, [pc, #60]	; (801a824 <vTaskStartScheduler+0x78>)
 801a7e8:	6018      	str	r0, [r3, #0]
		xTickCount = (TickType_t) configINITIAL_TICK_COUNT;
 801a7ea:	4b0f      	ldr	r3, [pc, #60]	; (801a828 <vTaskStartScheduler+0x7c>)
 801a7ec:	601c      	str	r4, [r3, #0]
}
 801a7ee:	b002      	add	sp, #8
 801a7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (xPortStartScheduler() != pdFALSE) {
 801a7f4:	f7ff b92e 	b.w	8019a54 <xPortStartScheduler>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 801a7f8:	3001      	adds	r0, #1
 801a7fa:	d108      	bne.n	801a80e <vTaskStartScheduler+0x62>
 801a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a800:	f383 8811 	msr	BASEPRI, r3
 801a804:	f3bf 8f6f 	isb	sy
 801a808:	f3bf 8f4f 	dsb	sy
 801a80c:	e7fe      	b.n	801a80c <vTaskStartScheduler+0x60>
}
 801a80e:	b002      	add	sp, #8
 801a810:	bd10      	pop	{r4, pc}
 801a812:	bf00      	nop
 801a814:	20007c38 	.word	0x20007c38
 801a818:	0802c1e1 	.word	0x0802c1e1
 801a81c:	0801a561 	.word	0x0801a561
 801a820:	20007c3c 	.word	0x20007c3c
 801a824:	20007c58 	.word	0x20007c58
 801a828:	20007c84 	.word	0x20007c84

0801a82c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801a82c:	4a02      	ldr	r2, [pc, #8]	; (801a838 <vTaskSuspendAll+0xc>)
 801a82e:	6813      	ldr	r3, [r2, #0]
 801a830:	3301      	adds	r3, #1
 801a832:	6013      	str	r3, [r2, #0]
}
 801a834:	4770      	bx	lr
 801a836:	bf00      	nop
 801a838:	20007c04 	.word	0x20007c04

0801a83c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801a83c:	4b01      	ldr	r3, [pc, #4]	; (801a844 <xTaskGetTickCount+0x8>)
 801a83e:	6818      	ldr	r0, [r3, #0]
}
 801a840:	4770      	bx	lr
 801a842:	bf00      	nop
 801a844:	20007c84 	.word	0x20007c84

0801a848 <xTaskGetTickCountFromISR>:
TickType_t xTaskGetTickCountFromISR(void) {
 801a848:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a84a:	f7ff f987 	bl	8019b5c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801a84e:	4b01      	ldr	r3, [pc, #4]	; (801a854 <xTaskGetTickCountFromISR+0xc>)
 801a850:	6818      	ldr	r0, [r3, #0]
}
 801a852:	bd08      	pop	{r3, pc}
 801a854:	20007c84 	.word	0x20007c84

0801a858 <xTaskIncrementTick>:
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 801a858:	4b40      	ldr	r3, [pc, #256]	; (801a95c <xTaskIncrementTick+0x104>)
 801a85a:	681b      	ldr	r3, [r3, #0]
BaseType_t xTaskIncrementTick(void) {
 801a85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 801a860:	2b00      	cmp	r3, #0
 801a862:	d174      	bne.n	801a94e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t) 1;
 801a864:	4b3e      	ldr	r3, [pc, #248]	; (801a960 <xTaskIncrementTick+0x108>)
 801a866:	681d      	ldr	r5, [r3, #0]
 801a868:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 801a86a:	601d      	str	r5, [r3, #0]
		if (xConstTickCount == (TickType_t) 0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a86c:	b9bd      	cbnz	r5, 801a89e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801a86e:	4b3d      	ldr	r3, [pc, #244]	; (801a964 <xTaskIncrementTick+0x10c>)
 801a870:	681a      	ldr	r2, [r3, #0]
 801a872:	6812      	ldr	r2, [r2, #0]
 801a874:	b142      	cbz	r2, 801a888 <xTaskIncrementTick+0x30>
 801a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a87a:	f383 8811 	msr	BASEPRI, r3
 801a87e:	f3bf 8f6f 	isb	sy
 801a882:	f3bf 8f4f 	dsb	sy
 801a886:	e7fe      	b.n	801a886 <xTaskIncrementTick+0x2e>
 801a888:	4a37      	ldr	r2, [pc, #220]	; (801a968 <xTaskIncrementTick+0x110>)
 801a88a:	6819      	ldr	r1, [r3, #0]
 801a88c:	6810      	ldr	r0, [r2, #0]
 801a88e:	6018      	str	r0, [r3, #0]
 801a890:	6011      	str	r1, [r2, #0]
 801a892:	4a36      	ldr	r2, [pc, #216]	; (801a96c <xTaskIncrementTick+0x114>)
 801a894:	6813      	ldr	r3, [r2, #0]
 801a896:	3301      	adds	r3, #1
 801a898:	6013      	str	r3, [r2, #0]
 801a89a:	f7ff fe09 	bl	801a4b0 <prvResetNextTaskUnblockTime>
		if (xConstTickCount >= xNextTaskUnblockTime) {
 801a89e:	4e34      	ldr	r6, [pc, #208]	; (801a970 <xTaskIncrementTick+0x118>)
 801a8a0:	4f34      	ldr	r7, [pc, #208]	; (801a974 <xTaskIncrementTick+0x11c>)
 801a8a2:	6833      	ldr	r3, [r6, #0]
 801a8a4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 801a980 <xTaskIncrementTick+0x128>
 801a8a8:	42ab      	cmp	r3, r5
	BaseType_t xSwitchRequired = pdFALSE;
 801a8aa:	f04f 0400 	mov.w	r4, #0
		if (xConstTickCount >= xNextTaskUnblockTime) {
 801a8ae:	d911      	bls.n	801a8d4 <xTaskIncrementTick+0x7c>
			if ( listCURRENT_LIST_LENGTH(
 801a8b0:	f8d8 3000 	ldr.w	r3, [r8]
 801a8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8b6:	2314      	movs	r3, #20
 801a8b8:	4353      	muls	r3, r2
 801a8ba:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 801a8bc:	2b02      	cmp	r3, #2
 801a8be:	bf28      	it	cs
 801a8c0:	2401      	movcs	r4, #1
		if (xYieldPending != pdFALSE) {
 801a8c2:	4b2d      	ldr	r3, [pc, #180]	; (801a978 <xTaskIncrementTick+0x120>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 801a8c6:	2b00      	cmp	r3, #0
}
 801a8c8:	bf0c      	ite	eq
 801a8ca:	4620      	moveq	r0, r4
 801a8cc:	2001      	movne	r0, #1
 801a8ce:	b003      	add	sp, #12
 801a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 801a8d4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 801a964 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList(pxTCB);
 801a8d8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 801a984 <xTaskIncrementTick+0x12c>
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 801a8dc:	f8da 3000 	ldr.w	r3, [sl]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	b91b      	cbnz	r3, 801a8ec <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a8e8:	6033      	str	r3, [r6, #0]
					break;
 801a8ea:	e7e1      	b.n	801a8b0 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a8ec:	f8da 3000 	ldr.w	r3, [sl]
 801a8f0:	68db      	ldr	r3, [r3, #12]
 801a8f2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(
 801a8f6:	f8db 2004 	ldr.w	r2, [fp, #4]
					if (xConstTickCount < xItemValue) {
 801a8fa:	4295      	cmp	r5, r2
 801a8fc:	d201      	bcs.n	801a902 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 801a8fe:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a900:	e7d6      	b.n	801a8b0 <xTaskIncrementTick+0x58>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 801a902:	f10b 0104 	add.w	r1, fp, #4
 801a906:	4608      	mov	r0, r1
 801a908:	9101      	str	r1, [sp, #4]
 801a90a:	f7fe ff8e 	bl	801982a <uxListRemove>
					if ( listLIST_ITEM_CONTAINER(
 801a90e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 801a912:	9901      	ldr	r1, [sp, #4]
 801a914:	b122      	cbz	r2, 801a920 <xTaskIncrementTick+0xc8>
						(void) uxListRemove(&(pxTCB->xEventListItem));
 801a916:	f10b 0018 	add.w	r0, fp, #24
 801a91a:	f7fe ff86 	bl	801982a <uxListRemove>
 801a91e:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList(pxTCB);
 801a920:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801a924:	f8d9 3000 	ldr.w	r3, [r9]
 801a928:	2201      	movs	r2, #1
 801a92a:	4082      	lsls	r2, r0
 801a92c:	431a      	orrs	r2, r3
 801a92e:	f8c9 2000 	str.w	r2, [r9]
 801a932:	2214      	movs	r2, #20
 801a934:	fb02 7000 	mla	r0, r2, r0, r7
 801a938:	f7fe ff54 	bl	80197e4 <vListInsertEnd>
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 801a93c:	f8d8 1000 	ldr.w	r1, [r8]
 801a940:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801a944:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801a946:	429a      	cmp	r2, r3
 801a948:	bf28      	it	cs
 801a94a:	2401      	movcs	r4, #1
 801a94c:	e7c6      	b.n	801a8dc <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 801a94e:	4a0b      	ldr	r2, [pc, #44]	; (801a97c <xTaskIncrementTick+0x124>)
 801a950:	6813      	ldr	r3, [r2, #0]
 801a952:	3301      	adds	r3, #1
 801a954:	6013      	str	r3, [r2, #0]
	BaseType_t xSwitchRequired = pdFALSE;
 801a956:	2400      	movs	r4, #0
 801a958:	e7b3      	b.n	801a8c2 <xTaskIncrementTick+0x6a>
 801a95a:	bf00      	nop
 801a95c:	20007c04 	.word	0x20007c04
 801a960:	20007c84 	.word	0x20007c84
 801a964:	20007b64 	.word	0x20007b64
 801a968:	20007b68 	.word	0x20007b68
 801a96c:	20007c40 	.word	0x20007c40
 801a970:	20007c3c 	.word	0x20007c3c
 801a974:	20007b6c 	.word	0x20007b6c
 801a978:	20007c88 	.word	0x20007c88
 801a97c:	20007c00 	.word	0x20007c00
 801a980:	20007b60 	.word	0x20007b60
 801a984:	20007c0c 	.word	0x20007c0c

0801a988 <xTaskResumeAll>:
BaseType_t xTaskResumeAll(void) {
 801a988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT(uxSchedulerSuspended);
 801a98c:	4c31      	ldr	r4, [pc, #196]	; (801aa54 <xTaskResumeAll+0xcc>)
 801a98e:	6823      	ldr	r3, [r4, #0]
 801a990:	b943      	cbnz	r3, 801a9a4 <xTaskResumeAll+0x1c>
 801a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a996:	f383 8811 	msr	BASEPRI, r3
 801a99a:	f3bf 8f6f 	isb	sy
 801a99e:	f3bf 8f4f 	dsb	sy
 801a9a2:	e7fe      	b.n	801a9a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 801a9a4:	f7fe ffbe 	bl	8019924 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801a9a8:	6823      	ldr	r3, [r4, #0]
 801a9aa:	3b01      	subs	r3, #1
 801a9ac:	6023      	str	r3, [r4, #0]
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 801a9ae:	6824      	ldr	r4, [r4, #0]
 801a9b0:	b134      	cbz	r4, 801a9c0 <xTaskResumeAll+0x38>
	BaseType_t xAlreadyYielded = pdFALSE;
 801a9b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801a9b4:	f7fe ffd8 	bl	8019968 <vPortExitCritical>
}
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	b002      	add	sp, #8
 801a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (uxCurrentNumberOfTasks > (UBaseType_t) 0U) {
 801a9c0:	4b25      	ldr	r3, [pc, #148]	; (801aa58 <xTaskResumeAll+0xd0>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d0f4      	beq.n	801a9b2 <xTaskResumeAll+0x2a>
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 801a9c8:	4d24      	ldr	r5, [pc, #144]	; (801aa5c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList(pxTCB);
 801a9ca:	4e25      	ldr	r6, [pc, #148]	; (801aa60 <xTaskResumeAll+0xd8>)
 801a9cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 801aa74 <xTaskResumeAll+0xec>
 801a9d0:	e01f      	b.n	801aa12 <xTaskResumeAll+0x8a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList)); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9d2:	68eb      	ldr	r3, [r5, #12]
 801a9d4:	68dc      	ldr	r4, [r3, #12]
					(void) uxListRemove(&(pxTCB->xEventListItem));
 801a9d6:	f104 0018 	add.w	r0, r4, #24
 801a9da:	f7fe ff26 	bl	801982a <uxListRemove>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 801a9de:	1d21      	adds	r1, r4, #4
 801a9e0:	4608      	mov	r0, r1
 801a9e2:	9101      	str	r1, [sp, #4]
 801a9e4:	f7fe ff21 	bl	801982a <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 801a9e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a9ea:	6830      	ldr	r0, [r6, #0]
 801a9ec:	9901      	ldr	r1, [sp, #4]
 801a9ee:	2701      	movs	r7, #1
 801a9f0:	fa07 f302 	lsl.w	r3, r7, r2
 801a9f4:	4303      	orrs	r3, r0
 801a9f6:	2014      	movs	r0, #20
 801a9f8:	fb00 8002 	mla	r0, r0, r2, r8
 801a9fc:	6033      	str	r3, [r6, #0]
 801a9fe:	f7fe fef1 	bl	80197e4 <vListInsertEnd>
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 801aa02:	4b18      	ldr	r3, [pc, #96]	; (801aa64 <xTaskResumeAll+0xdc>)
 801aa04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa0a:	429a      	cmp	r2, r3
 801aa0c:	d301      	bcc.n	801aa12 <xTaskResumeAll+0x8a>
						xYieldPending = pdTRUE;
 801aa0e:	4b16      	ldr	r3, [pc, #88]	; (801aa68 <xTaskResumeAll+0xe0>)
 801aa10:	601f      	str	r7, [r3, #0]
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 801aa12:	682b      	ldr	r3, [r5, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d1dc      	bne.n	801a9d2 <xTaskResumeAll+0x4a>
				if (pxTCB != NULL) {
 801aa18:	b10c      	cbz	r4, 801aa1e <xTaskResumeAll+0x96>
					prvResetNextTaskUnblockTime();
 801aa1a:	f7ff fd49 	bl	801a4b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801aa1e:	4d13      	ldr	r5, [pc, #76]	; (801aa6c <xTaskResumeAll+0xe4>)
 801aa20:	682c      	ldr	r4, [r5, #0]
					if (uxPendedCounts > (UBaseType_t) 0U) {
 801aa22:	b144      	cbz	r4, 801aa36 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 801aa24:	4e10      	ldr	r6, [pc, #64]	; (801aa68 <xTaskResumeAll+0xe0>)
 801aa26:	2701      	movs	r7, #1
							if (xTaskIncrementTick() != pdFALSE) {
 801aa28:	f7ff ff16 	bl	801a858 <xTaskIncrementTick>
 801aa2c:	b100      	cbz	r0, 801aa30 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 801aa2e:	6037      	str	r7, [r6, #0]
						} while (uxPendedCounts > (UBaseType_t) 0U);
 801aa30:	3c01      	subs	r4, #1
 801aa32:	d1f9      	bne.n	801aa28 <xTaskResumeAll+0xa0>
						uxPendedTicks = 0;
 801aa34:	602c      	str	r4, [r5, #0]
				if (xYieldPending != pdFALSE) {
 801aa36:	4b0c      	ldr	r3, [pc, #48]	; (801aa68 <xTaskResumeAll+0xe0>)
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d0b9      	beq.n	801a9b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 801aa3e:	4b0c      	ldr	r3, [pc, #48]	; (801aa70 <xTaskResumeAll+0xe8>)
 801aa40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa44:	601a      	str	r2, [r3, #0]
 801aa46:	f3bf 8f4f 	dsb	sy
 801aa4a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801aa4e:	2401      	movs	r4, #1
 801aa50:	e7b0      	b.n	801a9b4 <xTaskResumeAll+0x2c>
 801aa52:	bf00      	nop
 801aa54:	20007c04 	.word	0x20007c04
 801aa58:	20007bf8 	.word	0x20007bf8
 801aa5c:	20007c44 	.word	0x20007c44
 801aa60:	20007c0c 	.word	0x20007c0c
 801aa64:	20007b60 	.word	0x20007b60
 801aa68:	20007c88 	.word	0x20007c88
 801aa6c:	20007c00 	.word	0x20007c00
 801aa70:	e000ed04 	.word	0xe000ed04
 801aa74:	20007b6c 	.word	0x20007b6c

0801aa78 <vTaskDelay>:
void vTaskDelay(const TickType_t xTicksToDelay) {
 801aa78:	b508      	push	{r3, lr}
	if (xTicksToDelay > (TickType_t) 0U) {
 801aa7a:	b940      	cbnz	r0, 801aa8e <vTaskDelay+0x16>
		portYIELD_WITHIN_API()
 801aa7c:	4b0e      	ldr	r3, [pc, #56]	; (801aab8 <vTaskDelay+0x40>)
 801aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa82:	601a      	str	r2, [r3, #0]
 801aa84:	f3bf 8f4f 	dsb	sy
 801aa88:	f3bf 8f6f 	isb	sy
}
 801aa8c:	bd08      	pop	{r3, pc}
		configASSERT(uxSchedulerSuspended == 0);
 801aa8e:	4b0b      	ldr	r3, [pc, #44]	; (801aabc <vTaskDelay+0x44>)
 801aa90:	6819      	ldr	r1, [r3, #0]
 801aa92:	b141      	cbz	r1, 801aaa6 <vTaskDelay+0x2e>
 801aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa98:	f383 8811 	msr	BASEPRI, r3
 801aa9c:	f3bf 8f6f 	isb	sy
 801aaa0:	f3bf 8f4f 	dsb	sy
 801aaa4:	e7fe      	b.n	801aaa4 <vTaskDelay+0x2c>
		vTaskSuspendAll();
 801aaa6:	f7ff fec1 	bl	801a82c <vTaskSuspendAll>
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 801aaaa:	f7ff fd13 	bl	801a4d4 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 801aaae:	f7ff ff6b 	bl	801a988 <xTaskResumeAll>
	if (xAlreadyYielded == pdFALSE) {
 801aab2:	2800      	cmp	r0, #0
 801aab4:	d0e2      	beq.n	801aa7c <vTaskDelay+0x4>
 801aab6:	e7e9      	b.n	801aa8c <vTaskDelay+0x14>
 801aab8:	e000ed04 	.word	0xe000ed04
 801aabc:	20007c04 	.word	0x20007c04

0801aac0 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 801aac0:	4b17      	ldr	r3, [pc, #92]	; (801ab20 <vTaskSwitchContext+0x60>)
 801aac2:	681a      	ldr	r2, [r3, #0]
 801aac4:	4b17      	ldr	r3, [pc, #92]	; (801ab24 <vTaskSwitchContext+0x64>)
void vTaskSwitchContext(void) {
 801aac6:	b510      	push	{r4, lr}
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 801aac8:	b112      	cbz	r2, 801aad0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 801aaca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aacc:	601a      	str	r2, [r3, #0]
}
 801aace:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 801aad0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aad2:	4b15      	ldr	r3, [pc, #84]	; (801ab28 <vTaskSwitchContext+0x68>)
 801aad4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801aad6:	fab3 f383 	clz	r3, r3
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	f1c3 031f 	rsb	r3, r3, #31
 801aae0:	2214      	movs	r2, #20
 801aae2:	4912      	ldr	r1, [pc, #72]	; (801ab2c <vTaskSwitchContext+0x6c>)
 801aae4:	435a      	muls	r2, r3
 801aae6:	1888      	adds	r0, r1, r2
 801aae8:	588c      	ldr	r4, [r1, r2]
 801aaea:	b944      	cbnz	r4, 801aafe <vTaskSwitchContext+0x3e>
	__asm volatile
 801aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aaf0:	f383 8811 	msr	BASEPRI, r3
 801aaf4:	f3bf 8f6f 	isb	sy
 801aaf8:	f3bf 8f4f 	dsb	sy
 801aafc:	e7fe      	b.n	801aafc <vTaskSwitchContext+0x3c>
 801aafe:	6844      	ldr	r4, [r0, #4]
 801ab00:	3208      	adds	r2, #8
 801ab02:	6864      	ldr	r4, [r4, #4]
 801ab04:	6044      	str	r4, [r0, #4]
 801ab06:	440a      	add	r2, r1
 801ab08:	4294      	cmp	r4, r2
 801ab0a:	bf04      	itt	eq
 801ab0c:	6862      	ldreq	r2, [r4, #4]
 801ab0e:	6042      	streq	r2, [r0, #4]
 801ab10:	2214      	movs	r2, #20
 801ab12:	fb02 1303 	mla	r3, r2, r3, r1
 801ab16:	685b      	ldr	r3, [r3, #4]
 801ab18:	68da      	ldr	r2, [r3, #12]
 801ab1a:	4b05      	ldr	r3, [pc, #20]	; (801ab30 <vTaskSwitchContext+0x70>)
 801ab1c:	e7d6      	b.n	801aacc <vTaskSwitchContext+0xc>
 801ab1e:	bf00      	nop
 801ab20:	20007c04 	.word	0x20007c04
 801ab24:	20007c88 	.word	0x20007c88
 801ab28:	20007c0c 	.word	0x20007c0c
 801ab2c:	20007b6c 	.word	0x20007b6c
 801ab30:	20007b60 	.word	0x20007b60

0801ab34 <vTaskPlaceOnEventList>:
		const TickType_t xTicksToWait) {
 801ab34:	b510      	push	{r4, lr}
 801ab36:	460c      	mov	r4, r1
	configASSERT(pxEventList);
 801ab38:	b940      	cbnz	r0, 801ab4c <vTaskPlaceOnEventList+0x18>
 801ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab3e:	f383 8811 	msr	BASEPRI, r3
 801ab42:	f3bf 8f6f 	isb	sy
 801ab46:	f3bf 8f4f 	dsb	sy
 801ab4a:	e7fe      	b.n	801ab4a <vTaskPlaceOnEventList+0x16>
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 801ab4c:	4b05      	ldr	r3, [pc, #20]	; (801ab64 <vTaskPlaceOnEventList+0x30>)
 801ab4e:	6819      	ldr	r1, [r3, #0]
 801ab50:	3118      	adds	r1, #24
 801ab52:	f7fe fe53 	bl	80197fc <vListInsert>
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 801ab56:	4620      	mov	r0, r4
 801ab58:	2101      	movs	r1, #1
}
 801ab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 801ab5e:	f7ff bcb9 	b.w	801a4d4 <prvAddCurrentTaskToDelayedList>
 801ab62:	bf00      	nop
 801ab64:	20007b60 	.word	0x20007b60

0801ab68 <vTaskPlaceOnEventListRestricted>:
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 801ab68:	b538      	push	{r3, r4, r5, lr}
 801ab6a:	460d      	mov	r5, r1
 801ab6c:	4614      	mov	r4, r2
	configASSERT(pxEventList);
 801ab6e:	b940      	cbnz	r0, 801ab82 <vTaskPlaceOnEventListRestricted+0x1a>
 801ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab74:	f383 8811 	msr	BASEPRI, r3
 801ab78:	f3bf 8f6f 	isb	sy
 801ab7c:	f3bf 8f4f 	dsb	sy
 801ab80:	e7fe      	b.n	801ab80 <vTaskPlaceOnEventListRestricted+0x18>
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 801ab82:	4b07      	ldr	r3, [pc, #28]	; (801aba0 <vTaskPlaceOnEventListRestricted+0x38>)
 801ab84:	6819      	ldr	r1, [r3, #0]
 801ab86:	3118      	adds	r1, #24
 801ab88:	f7fe fe2c 	bl	80197e4 <vListInsertEnd>
		xTicksToWait = portMAX_DELAY;
 801ab8c:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 801ab8e:	4621      	mov	r1, r4
 801ab90:	bf0c      	ite	eq
 801ab92:	4628      	moveq	r0, r5
 801ab94:	f04f 30ff 	movne.w	r0, #4294967295
}
 801ab98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 801ab9c:	f7ff bc9a 	b.w	801a4d4 <prvAddCurrentTaskToDelayedList>
 801aba0:	20007b60 	.word	0x20007b60

0801aba4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aba4:	68c3      	ldr	r3, [r0, #12]
BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList) {
 801aba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY(pxEventList); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aba8:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
 801abaa:	b944      	cbnz	r4, 801abbe <xTaskRemoveFromEventList+0x1a>
 801abac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abb0:	f383 8811 	msr	BASEPRI, r3
 801abb4:	f3bf 8f6f 	isb	sy
 801abb8:	f3bf 8f4f 	dsb	sy
 801abbc:	e7fe      	b.n	801abbc <xTaskRemoveFromEventList+0x18>
	(void) uxListRemove(&(pxUnblockedTCB->xEventListItem));
 801abbe:	f104 0118 	add.w	r1, r4, #24
 801abc2:	4608      	mov	r0, r1
 801abc4:	9101      	str	r1, [sp, #4]
 801abc6:	f7fe fe30 	bl	801982a <uxListRemove>
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 801abca:	4b12      	ldr	r3, [pc, #72]	; (801ac14 <xTaskRemoveFromEventList+0x70>)
 801abcc:	9901      	ldr	r1, [sp, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	b9f3      	cbnz	r3, 801ac10 <xTaskRemoveFromEventList+0x6c>
		(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 801abd2:	1d21      	adds	r1, r4, #4
 801abd4:	4608      	mov	r0, r1
 801abd6:	9101      	str	r1, [sp, #4]
 801abd8:	f7fe fe27 	bl	801982a <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 801abdc:	480e      	ldr	r0, [pc, #56]	; (801ac18 <xTaskRemoveFromEventList+0x74>)
 801abde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801abe0:	6805      	ldr	r5, [r0, #0]
 801abe2:	9901      	ldr	r1, [sp, #4]
 801abe4:	2301      	movs	r3, #1
 801abe6:	4093      	lsls	r3, r2
 801abe8:	432b      	orrs	r3, r5
 801abea:	6003      	str	r3, [r0, #0]
 801abec:	4b0b      	ldr	r3, [pc, #44]	; (801ac1c <xTaskRemoveFromEventList+0x78>)
 801abee:	2014      	movs	r0, #20
 801abf0:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 801abf4:	f7fe fdf6 	bl	80197e4 <vListInsertEnd>
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 801abf8:	4b09      	ldr	r3, [pc, #36]	; (801ac20 <xTaskRemoveFromEventList+0x7c>)
 801abfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac00:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 801ac02:	bf85      	ittet	hi
 801ac04:	4b07      	ldrhi	r3, [pc, #28]	; (801ac24 <xTaskRemoveFromEventList+0x80>)
 801ac06:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 801ac08:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 801ac0a:	6018      	strhi	r0, [r3, #0]
}
 801ac0c:	b003      	add	sp, #12
 801ac0e:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 801ac10:	4805      	ldr	r0, [pc, #20]	; (801ac28 <xTaskRemoveFromEventList+0x84>)
 801ac12:	e7ef      	b.n	801abf4 <xTaskRemoveFromEventList+0x50>
 801ac14:	20007c04 	.word	0x20007c04
 801ac18:	20007c0c 	.word	0x20007c0c
 801ac1c:	20007b6c 	.word	0x20007b6c
 801ac20:	20007b60 	.word	0x20007b60
 801ac24:	20007c88 	.word	0x20007c88
 801ac28:	20007c44 	.word	0x20007c44

0801ac2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801ac2c:	4b03      	ldr	r3, [pc, #12]	; (801ac3c <vTaskInternalSetTimeOutState+0x10>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801ac32:	4b03      	ldr	r3, [pc, #12]	; (801ac40 <vTaskInternalSetTimeOutState+0x14>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	6043      	str	r3, [r0, #4]
}
 801ac38:	4770      	bx	lr
 801ac3a:	bf00      	nop
 801ac3c:	20007c40 	.word	0x20007c40
 801ac40:	20007c84 	.word	0x20007c84

0801ac44 <xTaskCheckForTimeOut>:
		TickType_t *const pxTicksToWait) {
 801ac44:	b570      	push	{r4, r5, r6, lr}
 801ac46:	460c      	mov	r4, r1
	configASSERT(pxTimeOut);
 801ac48:	4605      	mov	r5, r0
 801ac4a:	b940      	cbnz	r0, 801ac5e <xTaskCheckForTimeOut+0x1a>
 801ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac50:	f383 8811 	msr	BASEPRI, r3
 801ac54:	f3bf 8f6f 	isb	sy
 801ac58:	f3bf 8f4f 	dsb	sy
 801ac5c:	e7fe      	b.n	801ac5c <xTaskCheckForTimeOut+0x18>
	configASSERT(pxTicksToWait);
 801ac5e:	b941      	cbnz	r1, 801ac72 <xTaskCheckForTimeOut+0x2e>
 801ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac64:	f383 8811 	msr	BASEPRI, r3
 801ac68:	f3bf 8f6f 	isb	sy
 801ac6c:	f3bf 8f4f 	dsb	sy
 801ac70:	e7fe      	b.n	801ac70 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 801ac72:	f7fe fe57 	bl	8019924 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801ac76:	4b0f      	ldr	r3, [pc, #60]	; (801acb4 <xTaskCheckForTimeOut+0x70>)
 801ac78:	6819      	ldr	r1, [r3, #0]
		if (*pxTicksToWait == portMAX_DELAY) {
 801ac7a:	6823      	ldr	r3, [r4, #0]
 801ac7c:	1c5a      	adds	r2, r3, #1
 801ac7e:	d010      	beq.n	801aca2 <xTaskCheckForTimeOut+0x5e>
		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 801ac80:	480d      	ldr	r0, [pc, #52]	; (801acb8 <xTaskCheckForTimeOut+0x74>)
 801ac82:	682e      	ldr	r6, [r5, #0]
 801ac84:	6800      	ldr	r0, [r0, #0]
				- pxTimeOut->xTimeOnEntering;
 801ac86:	686a      	ldr	r2, [r5, #4]
		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 801ac88:	4286      	cmp	r6, r0
 801ac8a:	d001      	beq.n	801ac90 <xTaskCheckForTimeOut+0x4c>
				&& (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801ac8c:	428a      	cmp	r2, r1
 801ac8e:	d90f      	bls.n	801acb0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount
 801ac90:	1a88      	subs	r0, r1, r2
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ac92:	4283      	cmp	r3, r0
 801ac94:	d90a      	bls.n	801acac <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 801ac96:	1a5b      	subs	r3, r3, r1
 801ac98:	4413      	add	r3, r2
 801ac9a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f7ff ffc5 	bl	801ac2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801aca2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801aca4:	f7fe fe60 	bl	8019968 <vPortExitCritical>
}
 801aca8:	4620      	mov	r0, r4
 801acaa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 801acac:	2300      	movs	r3, #0
 801acae:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801acb0:	2401      	movs	r4, #1
 801acb2:	e7f7      	b.n	801aca4 <xTaskCheckForTimeOut+0x60>
 801acb4:	20007c84 	.word	0x20007c84
 801acb8:	20007c40 	.word	0x20007c40

0801acbc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801acbc:	4b01      	ldr	r3, [pc, #4]	; (801acc4 <vTaskMissedYield+0x8>)
 801acbe:	2201      	movs	r2, #1
 801acc0:	601a      	str	r2, [r3, #0]
}
 801acc2:	4770      	bx	lr
 801acc4:	20007c88 	.word	0x20007c88

0801acc8 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
 801acc8:	4b05      	ldr	r3, [pc, #20]	; (801ace0 <xTaskGetSchedulerState+0x18>)
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	b133      	cbz	r3, 801acdc <xTaskGetSchedulerState+0x14>
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 801acce:	4b05      	ldr	r3, [pc, #20]	; (801ace4 <xTaskGetSchedulerState+0x1c>)
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	2b00      	cmp	r3, #0
			xReturn = taskSCHEDULER_SUSPENDED;
 801acd4:	bf0c      	ite	eq
 801acd6:	2002      	moveq	r0, #2
 801acd8:	2000      	movne	r0, #0
 801acda:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
 801acdc:	2001      	movs	r0, #1
}
 801acde:	4770      	bx	lr
 801ace0:	20007c58 	.word	0x20007c58
 801ace4:	20007c04 	.word	0x20007c04

0801ace8 <xTaskPriorityInherit>:
BaseType_t xTaskPriorityInherit(TaskHandle_t const pxMutexHolder) {
 801ace8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (pxMutexHolder != NULL) {
 801acea:	4604      	mov	r4, r0
 801acec:	2800      	cmp	r0, #0
 801acee:	d038      	beq.n	801ad62 <xTaskPriorityInherit+0x7a>
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
 801acf0:	4a24      	ldr	r2, [pc, #144]	; (801ad84 <xTaskPriorityInherit+0x9c>)
 801acf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801acf4:	6811      	ldr	r1, [r2, #0]
 801acf6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801acf8:	428b      	cmp	r3, r1
 801acfa:	4617      	mov	r7, r2
 801acfc:	d239      	bcs.n	801ad72 <xTaskPriorityInherit+0x8a>
			if (( listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem))
 801acfe:	6982      	ldr	r2, [r0, #24]
			if ( listIS_CONTAINED_WITHIN(
 801ad00:	4d21      	ldr	r5, [pc, #132]	; (801ad88 <xTaskPriorityInherit+0xa0>)
			if (( listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem))
 801ad02:	2a00      	cmp	r2, #0
				listSET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem),
 801ad04:	bfa1      	itttt	ge
 801ad06:	683a      	ldrge	r2, [r7, #0]
 801ad08:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 801ad0a:	f1c2 0207 	rsbge	r2, r2, #7
 801ad0e:	6182      	strge	r2, [r0, #24]
			if ( listIS_CONTAINED_WITHIN(
 801ad10:	2614      	movs	r6, #20
 801ad12:	6942      	ldr	r2, [r0, #20]
 801ad14:	fb06 5303 	mla	r3, r6, r3, r5
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	d124      	bne.n	801ad66 <xTaskPriorityInherit+0x7e>
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem))
 801ad1c:	1d01      	adds	r1, r0, #4
 801ad1e:	4608      	mov	r0, r1
 801ad20:	9101      	str	r1, [sp, #4]
 801ad22:	f7fe fd82 	bl	801982a <uxListRemove>
 801ad26:	4b19      	ldr	r3, [pc, #100]	; (801ad8c <xTaskPriorityInherit+0xa4>)
 801ad28:	9901      	ldr	r1, [sp, #4]
 801ad2a:	b960      	cbnz	r0, 801ad46 <xTaskPriorityInherit+0x5e>
					taskRESET_READY_PRIORITY(pxMutexHolderTCB->uxPriority);
 801ad2c:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 801ad30:	fb06 f60c 	mul.w	r6, r6, ip
 801ad34:	59aa      	ldr	r2, [r5, r6]
 801ad36:	b932      	cbnz	r2, 801ad46 <xTaskPriorityInherit+0x5e>
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	2001      	movs	r0, #1
 801ad3c:	fa00 f00c 	lsl.w	r0, r0, ip
 801ad40:	ea22 0200 	bic.w	r2, r2, r0
 801ad44:	601a      	str	r2, [r3, #0]
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ad46:	683a      	ldr	r2, [r7, #0]
				prvAddTaskToReadyList(pxMutexHolderTCB);
 801ad48:	681e      	ldr	r6, [r3, #0]
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ad4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801ad4c:	62e2      	str	r2, [r4, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
 801ad4e:	2401      	movs	r4, #1
 801ad50:	fa04 f002 	lsl.w	r0, r4, r2
 801ad54:	4330      	orrs	r0, r6
 801ad56:	6018      	str	r0, [r3, #0]
 801ad58:	2014      	movs	r0, #20
 801ad5a:	fb00 5002 	mla	r0, r0, r2, r5
 801ad5e:	f7fe fd41 	bl	80197e4 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 801ad62:	4620      	mov	r0, r4
	return xReturn;
 801ad64:	e003      	b.n	801ad6e <xTaskPriorityInherit+0x86>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad6a:	62c3      	str	r3, [r0, #44]	; 0x2c
			xReturn = pdTRUE;
 801ad6c:	2001      	movs	r0, #1
}
 801ad6e:	b003      	add	sp, #12
 801ad70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
 801ad72:	6813      	ldr	r3, [r2, #0]
 801ad74:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ad76:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801ad78:	42a0      	cmp	r0, r4
 801ad7a:	bf2c      	ite	cs
 801ad7c:	2000      	movcs	r0, #0
 801ad7e:	2001      	movcc	r0, #1
 801ad80:	e7f5      	b.n	801ad6e <xTaskPriorityInherit+0x86>
 801ad82:	bf00      	nop
 801ad84:	20007b60 	.word	0x20007b60
 801ad88:	20007b6c 	.word	0x20007b6c
 801ad8c:	20007c0c 	.word	0x20007c0c

0801ad90 <xTaskPriorityDisinherit>:
BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 801ad90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (pxMutexHolder != NULL) {
 801ad92:	4604      	mov	r4, r0
 801ad94:	b910      	cbnz	r0, 801ad9c <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 801ad96:	2000      	movs	r0, #0
}
 801ad98:	b003      	add	sp, #12
 801ad9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT(pxTCB == pxCurrentTCB);
 801ad9c:	4b22      	ldr	r3, [pc, #136]	; (801ae28 <xTaskPriorityDisinherit+0x98>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	4283      	cmp	r3, r0
 801ada2:	d008      	beq.n	801adb6 <xTaskPriorityDisinherit+0x26>
 801ada4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ada8:	f383 8811 	msr	BASEPRI, r3
 801adac:	f3bf 8f6f 	isb	sy
 801adb0:	f3bf 8f4f 	dsb	sy
 801adb4:	e7fe      	b.n	801adb4 <xTaskPriorityDisinherit+0x24>
		configASSERT(pxTCB->uxMutexesHeld);
 801adb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adb8:	b943      	cbnz	r3, 801adcc <xTaskPriorityDisinherit+0x3c>
 801adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adbe:	f383 8811 	msr	BASEPRI, r3
 801adc2:	f3bf 8f6f 	isb	sy
 801adc6:	f3bf 8f4f 	dsb	sy
 801adca:	e7fe      	b.n	801adca <xTaskPriorityDisinherit+0x3a>
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 801adcc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801adce:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
		(pxTCB->uxMutexesHeld)--;
 801add0:	3b01      	subs	r3, #1
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 801add2:	4291      	cmp	r1, r2
		(pxTCB->uxMutexesHeld)--;
 801add4:	6503      	str	r3, [r0, #80]	; 0x50
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 801add6:	d0de      	beq.n	801ad96 <xTaskPriorityDisinherit+0x6>
			if (pxTCB->uxMutexesHeld == (UBaseType_t) 0) {
 801add8:	2b00      	cmp	r3, #0
 801adda:	d1dc      	bne.n	801ad96 <xTaskPriorityDisinherit+0x6>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 801addc:	1d01      	adds	r1, r0, #4
 801adde:	4608      	mov	r0, r1
 801ade0:	9101      	str	r1, [sp, #4]
 801ade2:	f7fe fd22 	bl	801982a <uxListRemove>
 801ade6:	4f11      	ldr	r7, [pc, #68]	; (801ae2c <xTaskPriorityDisinherit+0x9c>)
 801ade8:	4a11      	ldr	r2, [pc, #68]	; (801ae30 <xTaskPriorityDisinherit+0xa0>)
 801adea:	9901      	ldr	r1, [sp, #4]
 801adec:	b950      	cbnz	r0, 801ae04 <xTaskPriorityDisinherit+0x74>
					taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 801adee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801adf0:	2614      	movs	r6, #20
 801adf2:	4346      	muls	r6, r0
 801adf4:	59bb      	ldr	r3, [r7, r6]
 801adf6:	b92b      	cbnz	r3, 801ae04 <xTaskPriorityDisinherit+0x74>
 801adf8:	6813      	ldr	r3, [r2, #0]
 801adfa:	2501      	movs	r5, #1
 801adfc:	4085      	lsls	r5, r0
 801adfe:	ea23 0305 	bic.w	r3, r3, r5
 801ae02:	6013      	str	r3, [r2, #0]
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ae04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801ae06:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 801ae08:	f1c3 0007 	rsb	r0, r3, #7
 801ae0c:	61a0      	str	r0, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
 801ae0e:	6810      	ldr	r0, [r2, #0]
 801ae10:	2401      	movs	r4, #1
 801ae12:	fa04 f503 	lsl.w	r5, r4, r3
 801ae16:	4305      	orrs	r5, r0
 801ae18:	2014      	movs	r0, #20
 801ae1a:	fb00 7003 	mla	r0, r0, r3, r7
 801ae1e:	6015      	str	r5, [r2, #0]
 801ae20:	f7fe fce0 	bl	80197e4 <vListInsertEnd>
				xReturn = pdTRUE;
 801ae24:	4620      	mov	r0, r4
	return xReturn;
 801ae26:	e7b7      	b.n	801ad98 <xTaskPriorityDisinherit+0x8>
 801ae28:	20007b60 	.word	0x20007b60
 801ae2c:	20007b6c 	.word	0x20007b6c
 801ae30:	20007c0c 	.word	0x20007c0c

0801ae34 <vTaskPriorityDisinheritAfterTimeout>:
		UBaseType_t uxHighestPriorityWaitingTask) {
 801ae34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (pxMutexHolder != NULL) {
 801ae36:	4604      	mov	r4, r0
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	d04f      	beq.n	801aedc <vTaskPriorityDisinheritAfterTimeout+0xa8>
		configASSERT(pxTCB->uxMutexesHeld);
 801ae3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801ae3e:	b942      	cbnz	r2, 801ae52 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae44:	f383 8811 	msr	BASEPRI, r3
 801ae48:	f3bf 8f6f 	isb	sy
 801ae4c:	f3bf 8f4f 	dsb	sy
 801ae50:	e7fe      	b.n	801ae50 <vTaskPriorityDisinheritAfterTimeout+0x1c>
		if (pxTCB->uxBasePriority < uxHighestPriorityWaitingTask) {
 801ae52:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801ae54:	4299      	cmp	r1, r3
 801ae56:	bf38      	it	cc
 801ae58:	4619      	movcc	r1, r3
		if (pxTCB->uxPriority != uxPriorityToUse) {
 801ae5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ae5c:	428b      	cmp	r3, r1
 801ae5e:	d03d      	beq.n	801aedc <vTaskPriorityDisinheritAfterTimeout+0xa8>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
 801ae60:	2a01      	cmp	r2, #1
 801ae62:	d13b      	bne.n	801aedc <vTaskPriorityDisinheritAfterTimeout+0xa8>
				configASSERT(pxTCB != pxCurrentTCB);
 801ae64:	4a1e      	ldr	r2, [pc, #120]	; (801aee0 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 801ae66:	6812      	ldr	r2, [r2, #0]
 801ae68:	4282      	cmp	r2, r0
 801ae6a:	d108      	bne.n	801ae7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 801ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae70:	f383 8811 	msr	BASEPRI, r3
 801ae74:	f3bf 8f6f 	isb	sy
 801ae78:	f3bf 8f4f 	dsb	sy
 801ae7c:	e7fe      	b.n	801ae7c <vTaskPriorityDisinheritAfterTimeout+0x48>
				if (( listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem))
 801ae7e:	6982      	ldr	r2, [r0, #24]
				if ( listIS_CONTAINED_WITHIN(
 801ae80:	4d18      	ldr	r5, [pc, #96]	; (801aee4 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
				pxTCB->uxPriority = uxPriorityToUse;
 801ae82:	62c1      	str	r1, [r0, #44]	; 0x2c
				if (( listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem))
 801ae84:	2a00      	cmp	r2, #0
				if ( listIS_CONTAINED_WITHIN(
 801ae86:	f04f 0614 	mov.w	r6, #20
 801ae8a:	6942      	ldr	r2, [r0, #20]
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 801ae8c:	bfa8      	it	ge
 801ae8e:	f1c1 0107 	rsbge	r1, r1, #7
				if ( listIS_CONTAINED_WITHIN(
 801ae92:	fb06 5303 	mla	r3, r6, r3, r5
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 801ae96:	bfa8      	it	ge
 801ae98:	6181      	strge	r1, [r0, #24]
				if ( listIS_CONTAINED_WITHIN(
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d11e      	bne.n	801aedc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					if (uxListRemove(&(pxTCB->xStateListItem))
 801ae9e:	1d01      	adds	r1, r0, #4
 801aea0:	4608      	mov	r0, r1
 801aea2:	9101      	str	r1, [sp, #4]
 801aea4:	f7fe fcc1 	bl	801982a <uxListRemove>
 801aea8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801aeaa:	9901      	ldr	r1, [sp, #4]
 801aeac:	4c0e      	ldr	r4, [pc, #56]	; (801aee8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 801aeae:	b940      	cbnz	r0, 801aec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						taskRESET_READY_PRIORITY(pxTCB->uxPriority);
 801aeb0:	4356      	muls	r6, r2
 801aeb2:	59ab      	ldr	r3, [r5, r6]
 801aeb4:	b92b      	cbnz	r3, 801aec2 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 801aeb6:	6823      	ldr	r3, [r4, #0]
 801aeb8:	2001      	movs	r0, #1
 801aeba:	4090      	lsls	r0, r2
 801aebc:	ea23 0300 	bic.w	r3, r3, r0
 801aec0:	6023      	str	r3, [r4, #0]
					prvAddTaskToReadyList(pxTCB);
 801aec2:	6820      	ldr	r0, [r4, #0]
 801aec4:	2301      	movs	r3, #1
 801aec6:	4093      	lsls	r3, r2
 801aec8:	4303      	orrs	r3, r0
 801aeca:	2014      	movs	r0, #20
 801aecc:	fb00 5002 	mla	r0, r0, r2, r5
 801aed0:	6023      	str	r3, [r4, #0]
}
 801aed2:	b002      	add	sp, #8
 801aed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					prvAddTaskToReadyList(pxTCB);
 801aed8:	f7fe bc84 	b.w	80197e4 <vListInsertEnd>
}
 801aedc:	b002      	add	sp, #8
 801aede:	bd70      	pop	{r4, r5, r6, pc}
 801aee0:	20007b60 	.word	0x20007b60
 801aee4:	20007b6c 	.word	0x20007b6c
 801aee8:	20007c0c 	.word	0x20007c0c

0801aeec <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
 801aeec:	4b04      	ldr	r3, [pc, #16]	; (801af00 <pvTaskIncrementMutexHeldCount+0x14>)
 801aeee:	681a      	ldr	r2, [r3, #0]
 801aef0:	b11a      	cbz	r2, 801aefa <pvTaskIncrementMutexHeldCount+0xe>
		(pxCurrentTCB->uxMutexesHeld)++;
 801aef2:	6819      	ldr	r1, [r3, #0]
 801aef4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801aef6:	3201      	adds	r2, #1
 801aef8:	650a      	str	r2, [r1, #80]	; 0x50
	return pxCurrentTCB;
 801aefa:	6818      	ldr	r0, [r3, #0]
}
 801aefc:	4770      	bx	lr
 801aefe:	bf00      	nop
 801af00:	20007b60 	.word	0x20007b60

0801af04 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801af06:	4c0f      	ldr	r4, [pc, #60]	; (801af44 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 801af08:	f7fe fd0c 	bl	8019924 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801af0c:	6825      	ldr	r5, [r4, #0]
 801af0e:	b9ad      	cbnz	r5, 801af3c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 801af10:	4f0d      	ldr	r7, [pc, #52]	; (801af48 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 801af12:	4e0e      	ldr	r6, [pc, #56]	; (801af4c <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 801af14:	4638      	mov	r0, r7
 801af16:	f7fe fc57 	bl	80197c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801af1a:	4630      	mov	r0, r6
 801af1c:	f7fe fc54 	bl	80197c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801af20:	4b0b      	ldr	r3, [pc, #44]	; (801af50 <prvCheckForValidListAndQueue+0x4c>)
 801af22:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801af24:	4b0b      	ldr	r3, [pc, #44]	; (801af54 <prvCheckForValidListAndQueue+0x50>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801af26:	462a      	mov	r2, r5
 801af28:	210c      	movs	r1, #12
 801af2a:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 801af2c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801af2e:	f7fe ff11 	bl	8019d54 <xQueueGenericCreate>
 801af32:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801af34:	b110      	cbz	r0, 801af3c <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801af36:	4908      	ldr	r1, [pc, #32]	; (801af58 <prvCheckForValidListAndQueue+0x54>)
 801af38:	f7ff fa84 	bl	801a444 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801af3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801af40:	f7fe bd12 	b.w	8019968 <vPortExitCritical>
 801af44:	20007cc0 	.word	0x20007cc0
 801af48:	20007c94 	.word	0x20007c94
 801af4c:	20007ca8 	.word	0x20007ca8
 801af50:	20007c8c 	.word	0x20007c8c
 801af54:	20007c90 	.word	0x20007c90
 801af58:	0802c1e6 	.word	0x0802c1e6

0801af5c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801af5c:	4291      	cmp	r1, r2
{
 801af5e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801af60:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801af62:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801af64:	d80a      	bhi.n	801af7c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801af66:	1ad2      	subs	r2, r2, r3
 801af68:	6983      	ldr	r3, [r0, #24]
 801af6a:	429a      	cmp	r2, r3
 801af6c:	d20d      	bcs.n	801af8a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801af6e:	4b08      	ldr	r3, [pc, #32]	; (801af90 <prvInsertTimerInActiveList+0x34>)
 801af70:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801af72:	6818      	ldr	r0, [r3, #0]
 801af74:	f7fe fc42 	bl	80197fc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801af78:	2000      	movs	r0, #0
}
 801af7a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d201      	bcs.n	801af84 <prvInsertTimerInActiveList+0x28>
 801af80:	4299      	cmp	r1, r3
 801af82:	d202      	bcs.n	801af8a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801af84:	4b03      	ldr	r3, [pc, #12]	; (801af94 <prvInsertTimerInActiveList+0x38>)
 801af86:	1d01      	adds	r1, r0, #4
 801af88:	e7f3      	b.n	801af72 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 801af8a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801af8c:	e7f5      	b.n	801af7a <prvInsertTimerInActiveList+0x1e>
 801af8e:	bf00      	nop
 801af90:	20007c90 	.word	0x20007c90
 801af94:	20007c8c 	.word	0x20007c8c

0801af98 <xTimerCreateTimerTask>:
{
 801af98:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 801af9a:	f7ff ffb3 	bl	801af04 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801af9e:	4b0e      	ldr	r3, [pc, #56]	; (801afd8 <xTimerCreateTimerTask+0x40>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	b943      	cbnz	r3, 801afb6 <xTimerCreateTimerTask+0x1e>
 801afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afa8:	f383 8811 	msr	BASEPRI, r3
 801afac:	f3bf 8f6f 	isb	sy
 801afb0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801afb4:	e7fe      	b.n	801afb4 <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 801afb6:	4b09      	ldr	r3, [pc, #36]	; (801afdc <xTimerCreateTimerTask+0x44>)
 801afb8:	9301      	str	r3, [sp, #4]
 801afba:	2302      	movs	r3, #2
 801afbc:	9300      	str	r3, [sp, #0]
 801afbe:	4908      	ldr	r1, [pc, #32]	; (801afe0 <xTimerCreateTimerTask+0x48>)
 801afc0:	4808      	ldr	r0, [pc, #32]	; (801afe4 <xTimerCreateTimerTask+0x4c>)
 801afc2:	2300      	movs	r3, #0
 801afc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801afc8:	f7ff fb00 	bl	801a5cc <xTaskCreate>
	configASSERT( xReturn );
 801afcc:	2800      	cmp	r0, #0
 801afce:	d0e9      	beq.n	801afa4 <xTimerCreateTimerTask+0xc>
}
 801afd0:	b003      	add	sp, #12
 801afd2:	f85d fb04 	ldr.w	pc, [sp], #4
 801afd6:	bf00      	nop
 801afd8:	20007cc0 	.word	0x20007cc0
 801afdc:	20007cc4 	.word	0x20007cc4
 801afe0:	0802c1eb 	.word	0x0802c1eb
 801afe4:	0801b119 	.word	0x0801b119

0801afe8 <xTimerCreate>:
	{
 801afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afec:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801afee:	202c      	movs	r0, #44	; 0x2c
	{
 801aff0:	460d      	mov	r5, r1
 801aff2:	4616      	mov	r6, r2
 801aff4:	461f      	mov	r7, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801aff6:	f7fe fb23 	bl	8019640 <pvPortMalloc>
		if( pxNewTimer != NULL )
 801affa:	4604      	mov	r4, r0
 801affc:	b1f0      	cbz	r0, 801b03c <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 801affe:	2300      	movs	r3, #0
 801b000:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801b004:	b945      	cbnz	r5, 801b018 <xTimerCreate+0x30>
 801b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b00a:	f383 8811 	msr	BASEPRI, r3
 801b00e:	f3bf 8f6f 	isb	sy
 801b012:	f3bf 8f4f 	dsb	sy
 801b016:	e7fe      	b.n	801b016 <xTimerCreate+0x2e>
		prvCheckForValidListAndQueue();
 801b018:	f7ff ff74 	bl	801af04 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801b01c:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 801b01e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 801b022:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801b026:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801b028:	1d20      	adds	r0, r4, #4
 801b02a:	f7fe fbd8 	bl	80197de <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801b02e:	b12e      	cbz	r6, 801b03c <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801b030:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b034:	f043 0304 	orr.w	r3, r3, #4
 801b038:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 801b03c:	4620      	mov	r0, r4
 801b03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b044 <xTimerGenericCommand>:
{
 801b044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b046:	4616      	mov	r6, r2
	configASSERT( xTimer );
 801b048:	4604      	mov	r4, r0
{
 801b04a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 801b04c:	b940      	cbnz	r0, 801b060 <xTimerGenericCommand+0x1c>
 801b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b052:	f383 8811 	msr	BASEPRI, r3
 801b056:	f3bf 8f6f 	isb	sy
 801b05a:	f3bf 8f4f 	dsb	sy
 801b05e:	e7fe      	b.n	801b05e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 801b060:	4d0d      	ldr	r5, [pc, #52]	; (801b098 <xTimerGenericCommand+0x54>)
 801b062:	6828      	ldr	r0, [r5, #0]
 801b064:	b180      	cbz	r0, 801b088 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b066:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b068:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b06c:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b06e:	dc0d      	bgt.n	801b08c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b070:	f7ff fe2a 	bl	801acc8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b074:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b076:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b078:	bf08      	it	eq
 801b07a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b07c:	6828      	ldr	r0, [r5, #0]
 801b07e:	bf18      	it	ne
 801b080:	461a      	movne	r2, r3
 801b082:	a901      	add	r1, sp, #4
 801b084:	f7fe fea8 	bl	8019dd8 <xQueueGenericSend>
}
 801b088:	b004      	add	sp, #16
 801b08a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b08c:	2300      	movs	r3, #0
 801b08e:	a901      	add	r1, sp, #4
 801b090:	f7fe ff6f 	bl	8019f72 <xQueueGenericSendFromISR>
 801b094:	e7f8      	b.n	801b088 <xTimerGenericCommand+0x44>
 801b096:	bf00      	nop
 801b098:	20007cc0 	.word	0x20007cc0

0801b09c <prvSwitchTimerLists>:
{
 801b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b09e:	4d1c      	ldr	r5, [pc, #112]	; (801b110 <prvSwitchTimerLists+0x74>)
{
 801b0a0:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b0a2:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b0a4:	682b      	ldr	r3, [r5, #0]
 801b0a6:	681a      	ldr	r2, [r3, #0]
 801b0a8:	b92a      	cbnz	r2, 801b0b6 <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 801b0aa:	4a1a      	ldr	r2, [pc, #104]	; (801b114 <prvSwitchTimerLists+0x78>)
 801b0ac:	6811      	ldr	r1, [r2, #0]
 801b0ae:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 801b0b0:	6013      	str	r3, [r2, #0]
}
 801b0b2:	b005      	add	sp, #20
 801b0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b0b6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b0b8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b0ba:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b0bc:	1d21      	adds	r1, r4, #4
 801b0be:	4608      	mov	r0, r1
 801b0c0:	9103      	str	r1, [sp, #12]
 801b0c2:	f7fe fbb2 	bl	801982a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b0c6:	6a23      	ldr	r3, [r4, #32]
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b0cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b0d0:	9903      	ldr	r1, [sp, #12]
 801b0d2:	f013 0f04 	tst.w	r3, #4
 801b0d6:	d0e5      	beq.n	801b0a4 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b0d8:	69a3      	ldr	r3, [r4, #24]
 801b0da:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 801b0dc:	429e      	cmp	r6, r3
 801b0de:	d205      	bcs.n	801b0ec <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b0e0:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b0e2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b0e4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b0e6:	f7fe fb89 	bl	80197fc <vListInsert>
 801b0ea:	e7db      	b.n	801b0a4 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	9700      	str	r7, [sp, #0]
 801b0f0:	4632      	mov	r2, r6
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	f7ff ffa5 	bl	801b044 <xTimerGenericCommand>
				configASSERT( xResult );
 801b0fa:	2800      	cmp	r0, #0
 801b0fc:	d1d2      	bne.n	801b0a4 <prvSwitchTimerLists+0x8>
 801b0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b102:	f383 8811 	msr	BASEPRI, r3
 801b106:	f3bf 8f6f 	isb	sy
 801b10a:	f3bf 8f4f 	dsb	sy
 801b10e:	e7fe      	b.n	801b10e <prvSwitchTimerLists+0x72>
 801b110:	20007c8c 	.word	0x20007c8c
 801b114:	20007c90 	.word	0x20007c90

0801b118 <prvTimerTask>:
{
 801b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b11c:	4f7a      	ldr	r7, [pc, #488]	; (801b308 <prvTimerTask+0x1f0>)
					portYIELD_WITHIN_API();
 801b11e:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 801b318 <prvTimerTask+0x200>
{
 801b122:	b087      	sub	sp, #28
 801b124:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b126:	683b      	ldr	r3, [r7, #0]
 801b128:	f8d3 b000 	ldr.w	fp, [r3]
 801b12c:	f1bb 0f00 	cmp.w	fp, #0
 801b130:	d028      	beq.n	801b184 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b132:	68db      	ldr	r3, [r3, #12]
 801b134:	f8d3 b000 	ldr.w	fp, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b138:	2400      	movs	r4, #0
	if( xTimeNow < xLastTime )
 801b13a:	4e74      	ldr	r6, [pc, #464]	; (801b30c <prvTimerTask+0x1f4>)
	vTaskSuspendAll();
 801b13c:	f7ff fb76 	bl	801a82c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801b140:	f7ff fb7c 	bl	801a83c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801b144:	6833      	ldr	r3, [r6, #0]
 801b146:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 801b148:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 801b14a:	46b0      	mov	r8, r6
 801b14c:	d31c      	bcc.n	801b188 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 801b14e:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b150:	b31c      	cbz	r4, 801b19a <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b152:	4b6f      	ldr	r3, [pc, #444]	; (801b310 <prvTimerTask+0x1f8>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	681c      	ldr	r4, [r3, #0]
 801b158:	fab4 f484 	clz	r4, r4
 801b15c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b15e:	4b6d      	ldr	r3, [pc, #436]	; (801b314 <prvTimerTask+0x1fc>)
 801b160:	4622      	mov	r2, r4
 801b162:	6818      	ldr	r0, [r3, #0]
 801b164:	ebab 0105 	sub.w	r1, fp, r5
 801b168:	f7ff f97e 	bl	801a468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b16c:	f7ff fc0c 	bl	801a988 <xTaskResumeAll>
 801b170:	b978      	cbnz	r0, 801b192 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 801b172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b176:	f8ca 3000 	str.w	r3, [sl]
 801b17a:	f3bf 8f4f 	dsb	sy
 801b17e:	f3bf 8f6f 	isb	sy
 801b182:	e006      	b.n	801b192 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b184:	2401      	movs	r4, #1
 801b186:	e7d8      	b.n	801b13a <prvTimerTask+0x22>
		prvSwitchTimerLists();
 801b188:	f7ff ff88 	bl	801b09c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801b18c:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 801b18e:	f7ff fbfb 	bl	801a988 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b192:	4e60      	ldr	r6, [pc, #384]	; (801b314 <prvTimerTask+0x1fc>)
 801b194:	f04f 0b00 	mov.w	fp, #0
 801b198:	e078      	b.n	801b28c <prvTimerTask+0x174>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b19a:	4583      	cmp	fp, r0
 801b19c:	d8df      	bhi.n	801b15e <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 801b19e:	f7ff fbf3 	bl	801a988 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b1a2:	f8d9 3000 	ldr.w	r3, [r9]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b1aa:	1d30      	adds	r0, r6, #4
 801b1ac:	f7fe fb3d 	bl	801982a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b1b0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801b1b4:	0758      	lsls	r0, r3, #29
 801b1b6:	d518      	bpl.n	801b1ea <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b1b8:	69b1      	ldr	r1, [r6, #24]
 801b1ba:	465b      	mov	r3, fp
 801b1bc:	462a      	mov	r2, r5
 801b1be:	4459      	add	r1, fp
 801b1c0:	4630      	mov	r0, r6
 801b1c2:	f7ff fecb 	bl	801af5c <prvInsertTimerInActiveList>
 801b1c6:	b1a0      	cbz	r0, 801b1f2 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b1c8:	9400      	str	r4, [sp, #0]
 801b1ca:	4623      	mov	r3, r4
 801b1cc:	465a      	mov	r2, fp
 801b1ce:	4621      	mov	r1, r4
 801b1d0:	4630      	mov	r0, r6
 801b1d2:	f7ff ff37 	bl	801b044 <xTimerGenericCommand>
			configASSERT( xResult );
 801b1d6:	b960      	cbnz	r0, 801b1f2 <prvTimerTask+0xda>
 801b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1dc:	f383 8811 	msr	BASEPRI, r3
 801b1e0:	f3bf 8f6f 	isb	sy
 801b1e4:	f3bf 8f4f 	dsb	sy
 801b1e8:	e7fe      	b.n	801b1e8 <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b1ea:	f023 0301 	bic.w	r3, r3, #1
 801b1ee:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b1f2:	6a33      	ldr	r3, [r6, #32]
 801b1f4:	4630      	mov	r0, r6
 801b1f6:	4798      	blx	r3
}
 801b1f8:	e7cb      	b.n	801b192 <prvTimerTask+0x7a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b1fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b1fe:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b200:	f043 0301 	orr.w	r3, r3, #1
 801b204:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b208:	9b04      	ldr	r3, [sp, #16]
 801b20a:	462a      	mov	r2, r5
 801b20c:	4419      	add	r1, r3
 801b20e:	4620      	mov	r0, r4
 801b210:	f7ff fea4 	bl	801af5c <prvInsertTimerInActiveList>
 801b214:	2800      	cmp	r0, #0
 801b216:	d039      	beq.n	801b28c <prvTimerTask+0x174>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b218:	6a23      	ldr	r3, [r4, #32]
 801b21a:	4620      	mov	r0, r4
 801b21c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b21e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b222:	0759      	lsls	r1, r3, #29
 801b224:	d532      	bpl.n	801b28c <prvTimerTask+0x174>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b226:	69a2      	ldr	r2, [r4, #24]
 801b228:	9904      	ldr	r1, [sp, #16]
 801b22a:	f8cd b000 	str.w	fp, [sp]
 801b22e:	2300      	movs	r3, #0
 801b230:	440a      	add	r2, r1
 801b232:	4620      	mov	r0, r4
 801b234:	4619      	mov	r1, r3
 801b236:	f7ff ff05 	bl	801b044 <xTimerGenericCommand>
							configASSERT( xResult );
 801b23a:	bb38      	cbnz	r0, 801b28c <prvTimerTask+0x174>
 801b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b240:	f383 8811 	msr	BASEPRI, r3
 801b244:	f3bf 8f6f 	isb	sy
 801b248:	f3bf 8f4f 	dsb	sy
 801b24c:	e7fe      	b.n	801b24c <prvTimerTask+0x134>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b24e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b252:	f023 0301 	bic.w	r3, r3, #1
 801b256:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801b25a:	e017      	b.n	801b28c <prvTimerTask+0x174>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b25c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b260:	9904      	ldr	r1, [sp, #16]
 801b262:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b264:	f043 0301 	orr.w	r3, r3, #1
 801b268:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b26c:	b941      	cbnz	r1, 801b280 <prvTimerTask+0x168>
 801b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b272:	f383 8811 	msr	BASEPRI, r3
 801b276:	f3bf 8f6f 	isb	sy
 801b27a:	f3bf 8f4f 	dsb	sy
 801b27e:	e7fe      	b.n	801b27e <prvTimerTask+0x166>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b280:	462b      	mov	r3, r5
 801b282:	462a      	mov	r2, r5
 801b284:	4429      	add	r1, r5
 801b286:	4620      	mov	r0, r4
 801b288:	f7ff fe68 	bl	801af5c <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b28c:	6830      	ldr	r0, [r6, #0]
 801b28e:	2200      	movs	r2, #0
 801b290:	a903      	add	r1, sp, #12
 801b292:	f7fe ff23 	bl	801a0dc <xQueueReceive>
 801b296:	2800      	cmp	r0, #0
 801b298:	f43f af45 	beq.w	801b126 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b29c:	9b03      	ldr	r3, [sp, #12]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	dbf4      	blt.n	801b28c <prvTimerTask+0x174>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b2a2:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b2a4:	6963      	ldr	r3, [r4, #20]
 801b2a6:	b113      	cbz	r3, 801b2ae <prvTimerTask+0x196>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b2a8:	1d20      	adds	r0, r4, #4
 801b2aa:	f7fe fabe 	bl	801982a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 801b2ae:	f7ff fac5 	bl	801a83c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801b2b2:	f8d8 3000 	ldr.w	r3, [r8]
 801b2b6:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 801b2b8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 801b2ba:	d201      	bcs.n	801b2c0 <prvTimerTask+0x1a8>
		prvSwitchTimerLists();
 801b2bc:	f7ff feee 	bl	801b09c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801b2c0:	9b03      	ldr	r3, [sp, #12]
 801b2c2:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 801b2c6:	2b09      	cmp	r3, #9
 801b2c8:	d8e0      	bhi.n	801b28c <prvTimerTask+0x174>
 801b2ca:	a201      	add	r2, pc, #4	; (adr r2, 801b2d0 <prvTimerTask+0x1b8>)
 801b2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2d0:	0801b1fb 	.word	0x0801b1fb
 801b2d4:	0801b1fb 	.word	0x0801b1fb
 801b2d8:	0801b1fb 	.word	0x0801b1fb
 801b2dc:	0801b24f 	.word	0x0801b24f
 801b2e0:	0801b25d 	.word	0x0801b25d
 801b2e4:	0801b2f9 	.word	0x0801b2f9
 801b2e8:	0801b1fb 	.word	0x0801b1fb
 801b2ec:	0801b1fb 	.word	0x0801b1fb
 801b2f0:	0801b24f 	.word	0x0801b24f
 801b2f4:	0801b25d 	.word	0x0801b25d
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b2f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801b2fc:	079a      	lsls	r2, r3, #30
 801b2fe:	d4a8      	bmi.n	801b252 <prvTimerTask+0x13a>
							vPortFree( pxTimer );
 801b300:	4620      	mov	r0, r4
 801b302:	f7fe fa29 	bl	8019758 <vPortFree>
 801b306:	e7c1      	b.n	801b28c <prvTimerTask+0x174>
 801b308:	20007c8c 	.word	0x20007c8c
 801b30c:	20007cbc 	.word	0x20007cbc
 801b310:	20007c90 	.word	0x20007c90
 801b314:	20007cc0 	.word	0x20007cc0
 801b318:	e000ed04 	.word	0xe000ed04

0801b31c <orp_open>:
  *         functions will result as an error.
  */
uint8_t orp_open(void)
{
	uint8_t   orpHandle = ORP_HANDLE_ERROR;
	orpHandle = com_mdm_open();
 801b31c:	f7fd bb08 	b.w	8018930 <com_mdm_open>

0801b320 <orp_subscribe_event>:
  */
com_err_t orp_subscribe_event(uint8_t handle, orp_urc_callback_t callback)
{

	com_err_t com_err;
	com_err = com_mdm_subscribe_event( handle, callback);
 801b320:	f7fd baee 	b.w	8018900 <com_mdm_subscribe_event>

0801b324 <orp_create_resource>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_create_resource(uint8_t handle, orp_resource_create_t * resource, int32_t *command_err_code)
{
 801b324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	com_err_t com_err;
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b328:	4d13      	ldr	r5, [pc, #76]	; (801b378 <orp_create_resource+0x54>)
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "%c%c00Pout/%s",resource->res_dir,resource->res_type,(com_char_t *)resource->resource_name);
 801b32a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 801b380 <orp_create_resource+0x5c>
{
 801b32e:	460c      	mov	r4, r1
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b330:	f44f 7900 	mov.w	r9, #512	; 0x200
{
 801b334:	4606      	mov	r6, r0
 801b336:	4617      	mov	r7, r2
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b338:	2100      	movs	r1, #0
 801b33a:	464a      	mov	r2, r9
 801b33c:	4628      	mov	r0, r5
 801b33e:	f001 fd8b 	bl	801ce58 <memset>
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "%c%c00Pout/%s",resource->res_dir,resource->res_type,(com_char_t *)resource->resource_name);
 801b342:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801b346:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 801b34a:	490c      	ldr	r1, [pc, #48]	; (801b37c <orp_create_resource+0x58>)
 801b34c:	9400      	str	r4, [sp, #0]
 801b34e:	4640      	mov	r0, r8
 801b350:	f001 fdb2 	bl	801ceb8 <sprintf>
	/* recopy ORP response to command buffer */
	(void) memcpy((void *) tx_command,(const void *)orp_cmd_buffer,sizeof (orp_cmd_buffer));
 801b354:	464a      	mov	r2, r9
 801b356:	4641      	mov	r1, r8
 801b358:	4628      	mov	r0, r5
 801b35a:	f001 fd6f 	bl	801ce3c <memcpy>
	com_err = com_mdm_send(handle, tx_command, strlen((CRC_CHAR_t *)tx_command), command_err_code);
 801b35e:	4628      	mov	r0, r5
 801b360:	f7e4 ff58 	bl	8000214 <strlen>
 801b364:	463b      	mov	r3, r7
 801b366:	4602      	mov	r2, r0
 801b368:	4629      	mov	r1, r5
 801b36a:	4630      	mov	r0, r6

	return com_err;
}
 801b36c:	b003      	add	sp, #12
 801b36e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	com_err = com_mdm_send(handle, tx_command, strlen((CRC_CHAR_t *)tx_command), command_err_code);
 801b372:	f7fd bae7 	b.w	8018944 <com_mdm_send>
 801b376:	bf00      	nop
 801b378:	20007ec8 	.word	0x20007ec8
 801b37c:	0802c1f3 	.word	0x0802c1f3
 801b380:	20007cc8 	.word	0x20007cc8

0801b384 <orp_create_handler>:
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_create_handler(uint8_t handle,
		orp_resource_create_t * resource, int32_t *command_err_code)
{
 801b384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	com_err_t com_err;
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b388:	4c10      	ldr	r4, [pc, #64]	; (801b3cc <orp_create_handler+0x48>)
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "H.00Pout/%s",(com_char_t *)resource->resource_name);
 801b38a:	4f11      	ldr	r7, [pc, #68]	; (801b3d0 <orp_create_handler+0x4c>)
{
 801b38c:	9201      	str	r2, [sp, #4]
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b38e:	f44f 7800 	mov.w	r8, #512	; 0x200
{
 801b392:	4605      	mov	r5, r0
 801b394:	460e      	mov	r6, r1
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b396:	4642      	mov	r2, r8
 801b398:	2100      	movs	r1, #0
 801b39a:	4620      	mov	r0, r4
 801b39c:	f001 fd5c 	bl	801ce58 <memset>
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "H.00Pout/%s",(com_char_t *)resource->resource_name);
 801b3a0:	4632      	mov	r2, r6
 801b3a2:	490c      	ldr	r1, [pc, #48]	; (801b3d4 <orp_create_handler+0x50>)
 801b3a4:	4638      	mov	r0, r7
 801b3a6:	f001 fd87 	bl	801ceb8 <sprintf>
	/* recopy ORP response to command buffer */
	(void) memcpy((void *) tx_command,(const void *)orp_cmd_buffer,sizeof (orp_cmd_buffer));
 801b3aa:	4642      	mov	r2, r8
 801b3ac:	4639      	mov	r1, r7
 801b3ae:	4620      	mov	r0, r4
 801b3b0:	f001 fd44 	bl	801ce3c <memcpy>
	com_err = com_mdm_send(handle, tx_command, strlen((CRC_CHAR_t *)tx_command), command_err_code);
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	f7e4 ff2d 	bl	8000214 <strlen>
 801b3ba:	9b01      	ldr	r3, [sp, #4]
 801b3bc:	4602      	mov	r2, r0
 801b3be:	4621      	mov	r1, r4
 801b3c0:	4628      	mov	r0, r5
	return com_err;
}
 801b3c2:	b002      	add	sp, #8
 801b3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	com_err = com_mdm_send(handle, tx_command, strlen((CRC_CHAR_t *)tx_command), command_err_code);
 801b3c8:	f7fd babc 	b.w	8018944 <com_mdm_send>
 801b3cc:	20007ec8 	.word	0x20007ec8
 801b3d0:	20007cc8 	.word	0x20007cc8
 801b3d4:	0802c201 	.word	0x0802c201

0801b3d8 <orp_get_resource>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_get_resource(uint8_t handle, com_char_t *res_path, com_char_t *rsp_buf, int32_t *command_err_code)
{
 801b3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b3dc:	460c      	mov	r4, r1
 801b3de:	b08b      	sub	sp, #44	; 0x2c
	com_err_t com_err;
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b3e0:	2100      	movs	r1, #0
{
 801b3e2:	4607      	mov	r7, r0
 801b3e4:	4690      	mov	r8, r2
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b3e6:	481e      	ldr	r0, [pc, #120]	; (801b460 <orp_get_resource+0x88>)
 801b3e8:	f44f 7200 	mov.w	r2, #512	; 0x200
{
 801b3ec:	4699      	mov	r9, r3
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b3ee:	f001 fd33 	bl	801ce58 <memset>
	if(strcmp((const char *)res_path,"orp_isConnected") == 0)
 801b3f2:	491c      	ldr	r1, [pc, #112]	; (801b464 <orp_get_resource+0x8c>)
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	f7e4 ff03 	bl	8000200 <strcmp>
 801b3fa:	bb78      	cbnz	r0, 801b45c <orp_get_resource+0x84>
	{
	  com_char_t orp_isConnected_get[32] = "cloudInterface/connected/value";
 801b3fc:	4c1a      	ldr	r4, [pc, #104]	; (801b468 <orp_get_resource+0x90>)
 801b3fe:	ad02      	add	r5, sp, #8
 801b400:	f104 0318 	add.w	r3, r4, #24
 801b404:	462a      	mov	r2, r5
 801b406:	6820      	ldr	r0, [r4, #0]
 801b408:	6861      	ldr	r1, [r4, #4]
 801b40a:	462e      	mov	r6, r5
 801b40c:	c603      	stmia	r6!, {r0, r1}
 801b40e:	3408      	adds	r4, #8
 801b410:	429c      	cmp	r4, r3
 801b412:	4635      	mov	r5, r6
 801b414:	d1f7      	bne.n	801b406 <orp_get_resource+0x2e>
 801b416:	79a3      	ldrb	r3, [r4, #6]
 801b418:	71b3      	strb	r3, [r6, #6]
 801b41a:	6820      	ldr	r0, [r4, #0]
 801b41c:	88a1      	ldrh	r1, [r4, #4]
 801b41e:	6030      	str	r0, [r6, #0]
 801b420:	2300      	movs	r3, #0
 801b422:	80b1      	strh	r1, [r6, #4]
 801b424:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	  (void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "G.00P/%s",(com_char_t *)orp_isConnected_get);
	}
	else
	{
	  (void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "G.00P/%s",(com_char_t *)res_path);
 801b428:	4910      	ldr	r1, [pc, #64]	; (801b46c <orp_get_resource+0x94>)
 801b42a:	4811      	ldr	r0, [pc, #68]	; (801b470 <orp_get_resource+0x98>)
 801b42c:	f001 fd44 	bl	801ceb8 <sprintf>
	}
	/* recopy ORP response to command buffer */
	(void) memcpy((void *) tx_command,(const void *)orp_cmd_buffer,sizeof (orp_cmd_buffer));
 801b430:	490f      	ldr	r1, [pc, #60]	; (801b470 <orp_get_resource+0x98>)
 801b432:	480b      	ldr	r0, [pc, #44]	; (801b460 <orp_get_resource+0x88>)
 801b434:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b438:	f001 fd00 	bl	801ce3c <memcpy>
	com_err =  com_mdm_transaction(handle, tx_command, strlen((CRC_CHAR_t *)tx_command),
 801b43c:	4808      	ldr	r0, [pc, #32]	; (801b460 <orp_get_resource+0x88>)
 801b43e:	f7e4 fee9 	bl	8000214 <strlen>
 801b442:	23fa      	movs	r3, #250	; 0xfa
 801b444:	4602      	mov	r2, r0
 801b446:	9300      	str	r3, [sp, #0]
 801b448:	4905      	ldr	r1, [pc, #20]	; (801b460 <orp_get_resource+0x88>)
 801b44a:	f8cd 9004 	str.w	r9, [sp, #4]
 801b44e:	4643      	mov	r3, r8
 801b450:	4638      	mov	r0, r7
 801b452:	f7fd fa8f 	bl	8018974 <com_mdm_transaction>
			rsp_buf,ORP_MAX_RSP_SIZE, command_err_code);
	return com_err;
}
 801b456:	b00b      	add	sp, #44	; 0x2c
 801b458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  (void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "G.00P/%s",(com_char_t *)res_path);
 801b45c:	4622      	mov	r2, r4
 801b45e:	e7e3      	b.n	801b428 <orp_get_resource+0x50>
 801b460:	20007ec8 	.word	0x20007ec8
 801b464:	0802c20d 	.word	0x0802c20d
 801b468:	08021988 	.word	0x08021988
 801b46c:	0802c21d 	.word	0x0802c21d
 801b470:	20007cc8 	.word	0x20007cc8

0801b474 <orp_set_numeric_resource>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_set_numeric_resource(uint8_t handle, orp_numeric_resource_update_t * resource, com_char_t *rsp_buf, int32_t *command_err_code)
{
 801b474:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	com_err_t com_err;
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b478:	4c16      	ldr	r4, [pc, #88]	; (801b4d4 <orp_set_numeric_resource+0x60>)
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "PN00Pout/%s,D%f",(com_char_t *)resource->resource_name,(resource->resource_value));
 801b47a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801b4dc <orp_set_numeric_resource+0x68>
{
 801b47e:	460d      	mov	r5, r1
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b480:	f44f 7a00 	mov.w	sl, #512	; 0x200
{
 801b484:	4606      	mov	r6, r0
 801b486:	4617      	mov	r7, r2
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b488:	2100      	movs	r1, #0
 801b48a:	4652      	mov	r2, sl
 801b48c:	4620      	mov	r0, r4
{
 801b48e:	4698      	mov	r8, r3
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b490:	f001 fce2 	bl	801ce58 <memset>
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "PN00Pout/%s,D%f",(com_char_t *)resource->resource_name,(resource->resource_value));
 801b494:	6e68      	ldr	r0, [r5, #100]	; 0x64
 801b496:	f7e5 f87f 	bl	8000598 <__aeabi_f2d>
 801b49a:	462a      	mov	r2, r5
 801b49c:	e9cd 0100 	strd	r0, r1, [sp]
 801b4a0:	490d      	ldr	r1, [pc, #52]	; (801b4d8 <orp_set_numeric_resource+0x64>)
 801b4a2:	4648      	mov	r0, r9
 801b4a4:	f001 fd08 	bl	801ceb8 <sprintf>

	/* recopy ORP response to command buffer */
	(void) memcpy((void *) tx_command,(const void *)orp_cmd_buffer,sizeof (orp_cmd_buffer));
 801b4a8:	4652      	mov	r2, sl
 801b4aa:	4649      	mov	r1, r9
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	f001 fcc5 	bl	801ce3c <memcpy>
	com_err =  com_mdm_transaction(handle, tx_command, strlen((CRC_CHAR_t *)tx_command),
 801b4b2:	4620      	mov	r0, r4
 801b4b4:	f7e4 feae 	bl	8000214 <strlen>
 801b4b8:	23fa      	movs	r3, #250	; 0xfa
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	9300      	str	r3, [sp, #0]
 801b4be:	f8cd 8004 	str.w	r8, [sp, #4]
 801b4c2:	463b      	mov	r3, r7
 801b4c4:	4621      	mov	r1, r4
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	f7fd fa54 	bl	8018974 <com_mdm_transaction>
			rsp_buf,ORP_MAX_RSP_SIZE, command_err_code);
	return com_err;

}
 801b4cc:	b002      	add	sp, #8
 801b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4d2:	bf00      	nop
 801b4d4:	20007ec8 	.word	0x20007ec8
 801b4d8:	0802c226 	.word	0x0802c226
 801b4dc:	20007cc8 	.word	0x20007cc8

0801b4e0 <orp_set_json_resource>:
  * @note   command sent correctly when error code is COM_ERR_OK
  *         command not sent correctly when error code is COM_ERR_GENERAL
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_set_json_resource(uint8_t handle, orp_json_resource_update_t * resource, com_char_t *rsp_buf, int32_t *command_err_code)
{
 801b4e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	com_err_t com_err;
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b4e4:	4c14      	ldr	r4, [pc, #80]	; (801b538 <orp_set_json_resource+0x58>)
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "PJ00Pout/%s,D{%s}",(com_char_t *)resource->resource_name,(com_char_t *)(resource->resource_value));
 801b4e6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 801b540 <orp_set_json_resource+0x60>
{
 801b4ea:	460d      	mov	r5, r1
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b4ec:	f44f 7a00 	mov.w	sl, #512	; 0x200
{
 801b4f0:	4606      	mov	r6, r0
 801b4f2:	4617      	mov	r7, r2
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b4f4:	2100      	movs	r1, #0
 801b4f6:	4652      	mov	r2, sl
 801b4f8:	4620      	mov	r0, r4
{
 801b4fa:	4698      	mov	r8, r3
	(void) memset((com_char_t *)tx_command, 0, ORP_MAX_CMD_SIZE);
 801b4fc:	f001 fcac 	bl	801ce58 <memset>
	(void)sprintf((CRC_CHAR_t *)orp_cmd_buffer, "PJ00Pout/%s,D{%s}",(com_char_t *)resource->resource_name,(com_char_t *)(resource->resource_value));
 801b500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b502:	490e      	ldr	r1, [pc, #56]	; (801b53c <orp_set_json_resource+0x5c>)
 801b504:	462a      	mov	r2, r5
 801b506:	4648      	mov	r0, r9
 801b508:	f001 fcd6 	bl	801ceb8 <sprintf>
	/* recopy ORP response to command buffer */
	(void) memcpy((void *) tx_command,(const void *)orp_cmd_buffer,sizeof (orp_cmd_buffer));
 801b50c:	4652      	mov	r2, sl
 801b50e:	4649      	mov	r1, r9
 801b510:	4620      	mov	r0, r4
 801b512:	f001 fc93 	bl	801ce3c <memcpy>
	com_err =  com_mdm_transaction(handle, tx_command, strlen((CRC_CHAR_t *)tx_command),
 801b516:	4620      	mov	r0, r4
 801b518:	f7e4 fe7c 	bl	8000214 <strlen>
 801b51c:	23fa      	movs	r3, #250	; 0xfa
 801b51e:	4602      	mov	r2, r0
 801b520:	9300      	str	r3, [sp, #0]
 801b522:	f8cd 8004 	str.w	r8, [sp, #4]
 801b526:	463b      	mov	r3, r7
 801b528:	4621      	mov	r1, r4
 801b52a:	4630      	mov	r0, r6
 801b52c:	f7fd fa22 	bl	8018974 <com_mdm_transaction>
			rsp_buf,ORP_MAX_RSP_SIZE, command_err_code);
	return com_err;
}
 801b530:	b002      	add	sp, #8
 801b532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b536:	bf00      	nop
 801b538:	20007ec8 	.word	0x20007ec8
 801b53c:	0802c236 	.word	0x0802c236
 801b540:	20007cc8 	.word	0x20007cc8

0801b544 <orp_receive>:
  *         handle is unknown when error code is COM_ERR_DESCRIPTOR
  */
com_err_t orp_receive(uint8_t handle, com_char_t *resp, uint32_t length, int32_t *command_err_code)
{
	com_err_t com_err;
	com_err =  com_mdm_receive(handle,resp,length,command_err_code);
 801b544:	f7fd ba32 	b.w	80189ac <com_mdm_receive>

0801b548 <orpResponseDecode>:
  * @param[in]  length           - the length of the URC buffer
  * @retval - Decoded URC message structure
  *
  */
orp_response_t * orpResponseDecode(com_char_t *pbuf, uint32_t size)
{
 801b548:	b570      	push	{r4, r5, r6, lr}
  /* parse msg content until first condition is met: first occurence of "@" (0x40) is found, end of message
   * if "@" is found, check if previous char is "c" and indicates an URC
   */
  const char *orpStr1;
  const char *orpStr2;
  orpStr1 = strchr((const void *)pbuf,'/');
 801b54a:	212f      	movs	r1, #47	; 0x2f
{
 801b54c:	4604      	mov	r4, r0
  orpStr1 = strchr((const void *)pbuf,'/');
 801b54e:	f001 fd16 	bl	801cf7e <strchr>
  orpStr2 = strchr((const void *)pbuf,'D');
 801b552:	2144      	movs	r1, #68	; 0x44
  orpStr1 = strchr((const void *)pbuf,'/');
 801b554:	4605      	mov	r5, r0
  orpStr2 = strchr((const void *)pbuf,'D');
 801b556:	4620      	mov	r0, r4
 801b558:	f001 fd11 	bl	801cf7e <strchr>
  strncpy((char *)orpResponse.resource_name,orpStr1+1,(int)(orpStr2-orpStr1-2));
 801b55c:	4e07      	ldr	r6, [pc, #28]	; (801b57c <orpResponseDecode+0x34>)
 801b55e:	1b42      	subs	r2, r0, r5
  orpStr2 = strchr((const void *)pbuf,'D');
 801b560:	4604      	mov	r4, r0
  strncpy((char *)orpResponse.resource_name,orpStr1+1,(int)(orpStr2-orpStr1-2));
 801b562:	3a02      	subs	r2, #2
 801b564:	1c69      	adds	r1, r5, #1
 801b566:	4630      	mov	r0, r6
 801b568:	f001 fd30 	bl	801cfcc <strncpy>
  strcpy((char *)orpResponse.resource_value,orpStr2+1);
 801b56c:	1c61      	adds	r1, r4, #1
 801b56e:	f106 0064 	add.w	r0, r6, #100	; 0x64
 801b572:	f001 fd11 	bl	801cf98 <strcpy>
  return(&orpResponse);
}
 801b576:	4630      	mov	r0, r6
 801b578:	bd70      	pop	{r4, r5, r6, pc}
 801b57a:	bf00      	nop
 801b57c:	20009738 	.word	0x20009738

0801b580 <CMD_Help>:
 * @brief help command management
 * @note  display all recorded component (component command header and description)
 * @param  p_cmd (unused)
 * @retval return value
 */
static cmd_status_t CMD_Help(uint8_t *p_cmd) {
 801b580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t align_offset;
	uint32_t cmd_size;

	UNUSED(p_cmd);

	PRINT_FORCE("***** help *****\r\n");
 801b584:	49b8      	ldr	r1, [pc, #736]	; (801b868 <CMD_Help+0x2e8>)
 801b586:	48b9      	ldr	r0, [pc, #740]	; (801b86c <CMD_Help+0x2ec>)
 801b588:	4eb9      	ldr	r6, [pc, #740]	; (801b870 <CMD_Help+0x2f0>)
	PRINT_FORCE("\r\nList of commands\r\n")
	PRINT_FORCE("----------------\r\n")
	uint8_t CMD_CmdAlignOffsetString[CMD_COMMAND_ALIGN_COLUMN];

	/* display registered commands  */
	for (i = 0U; i < CMD_NbCmd; i++) {
 801b58a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 801b8b0 <CMD_Help+0x330>
			/* alignment of the component descriptions */
			(void) memset(CMD_CmdAlignOffsetString, (int32_t) ' ',
					align_offset);
			CMD_CmdAlignOffsetString[align_offset] = 0U;
		}
		PRINT_FORCE("%s%s %s\r\n", CMD_a_cmd_list[i].CmdName,
 801b58e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 801b8b4 <CMD_Help+0x334>
 801b592:	4db6      	ldr	r5, [pc, #728]	; (801b86c <CMD_Help+0x2ec>)
static cmd_status_t CMD_Help(uint8_t *p_cmd) {
 801b594:	b087      	sub	sp, #28
	PRINT_FORCE("***** help *****\r\n");
 801b596:	f001 fcff 	bl	801cf98 <strcpy>
 801b59a:	48b4      	ldr	r0, [pc, #720]	; (801b86c <CMD_Help+0x2ec>)
 801b59c:	f7fc fcca 	bl	8017f34 <crs_strlen>
 801b5a0:	4ab2      	ldr	r2, [pc, #712]	; (801b86c <CMD_Help+0x2ec>)
 801b5a2:	b283      	uxth	r3, r0
 801b5a4:	2101      	movs	r1, #1
 801b5a6:	2005      	movs	r0, #5
 801b5a8:	f7fc fd02 	bl	8017fb0 <traceIF_itmPrint>
 801b5ac:	48af      	ldr	r0, [pc, #700]	; (801b86c <CMD_Help+0x2ec>)
 801b5ae:	f7fc fcc1 	bl	8017f34 <crs_strlen>
 801b5b2:	49ae      	ldr	r1, [pc, #696]	; (801b86c <CMD_Help+0x2ec>)
 801b5b4:	b282      	uxth	r2, r0
 801b5b6:	2005      	movs	r0, #5
 801b5b8:	f7fc ff3a 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\r\nList of commands\r\n")
 801b5bc:	49ad      	ldr	r1, [pc, #692]	; (801b874 <CMD_Help+0x2f4>)
 801b5be:	48ab      	ldr	r0, [pc, #684]	; (801b86c <CMD_Help+0x2ec>)
 801b5c0:	f001 fcea 	bl	801cf98 <strcpy>
 801b5c4:	48a9      	ldr	r0, [pc, #676]	; (801b86c <CMD_Help+0x2ec>)
 801b5c6:	f7fc fcb5 	bl	8017f34 <crs_strlen>
 801b5ca:	4aa8      	ldr	r2, [pc, #672]	; (801b86c <CMD_Help+0x2ec>)
 801b5cc:	b283      	uxth	r3, r0
 801b5ce:	2101      	movs	r1, #1
 801b5d0:	2005      	movs	r0, #5
 801b5d2:	f7fc fced 	bl	8017fb0 <traceIF_itmPrint>
 801b5d6:	48a5      	ldr	r0, [pc, #660]	; (801b86c <CMD_Help+0x2ec>)
 801b5d8:	f7fc fcac 	bl	8017f34 <crs_strlen>
 801b5dc:	49a3      	ldr	r1, [pc, #652]	; (801b86c <CMD_Help+0x2ec>)
 801b5de:	b282      	uxth	r2, r0
 801b5e0:	2005      	movs	r0, #5
 801b5e2:	f7fc ff25 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("----------------\r\n")
 801b5e6:	49a4      	ldr	r1, [pc, #656]	; (801b878 <CMD_Help+0x2f8>)
 801b5e8:	48a0      	ldr	r0, [pc, #640]	; (801b86c <CMD_Help+0x2ec>)
 801b5ea:	f001 fcd5 	bl	801cf98 <strcpy>
 801b5ee:	489f      	ldr	r0, [pc, #636]	; (801b86c <CMD_Help+0x2ec>)
 801b5f0:	f7fc fca0 	bl	8017f34 <crs_strlen>
 801b5f4:	4a9d      	ldr	r2, [pc, #628]	; (801b86c <CMD_Help+0x2ec>)
 801b5f6:	b283      	uxth	r3, r0
 801b5f8:	2101      	movs	r1, #1
 801b5fa:	2005      	movs	r0, #5
 801b5fc:	f7fc fcd8 	bl	8017fb0 <traceIF_itmPrint>
 801b600:	489a      	ldr	r0, [pc, #616]	; (801b86c <CMD_Help+0x2ec>)
 801b602:	f7fc fc97 	bl	8017f34 <crs_strlen>
 801b606:	4999      	ldr	r1, [pc, #612]	; (801b86c <CMD_Help+0x2ec>)
 801b608:	b282      	uxth	r2, r0
 801b60a:	2005      	movs	r0, #5
 801b60c:	f7fc ff10 	bl	8018430 <traceIF_uartPrintForce>
	for (i = 0U; i < CMD_NbCmd; i++) {
 801b610:	2700      	movs	r7, #0
 801b612:	f8d8 3000 	ldr.w	r3, [r8]
 801b616:	42bb      	cmp	r3, r7
 801b618:	f200 8169 	bhi.w	801b8ee <CMD_Help+0x36e>
				CMD_CmdAlignOffsetString, CMD_a_cmd_list[i].CmdLabel);
	}

	/* display general syntax of the commands */
	PRINT_FORCE("\r\nHelp syntax\r\n");
 801b61c:	4997      	ldr	r1, [pc, #604]	; (801b87c <CMD_Help+0x2fc>)
 801b61e:	4893      	ldr	r0, [pc, #588]	; (801b86c <CMD_Help+0x2ec>)
 801b620:	f001 fcba 	bl	801cf98 <strcpy>
 801b624:	4891      	ldr	r0, [pc, #580]	; (801b86c <CMD_Help+0x2ec>)
 801b626:	f7fc fc85 	bl	8017f34 <crs_strlen>
 801b62a:	4a90      	ldr	r2, [pc, #576]	; (801b86c <CMD_Help+0x2ec>)
 801b62c:	b283      	uxth	r3, r0
 801b62e:	2101      	movs	r1, #1
 801b630:	2005      	movs	r0, #5
 801b632:	f7fc fcbd 	bl	8017fb0 <traceIF_itmPrint>
 801b636:	488d      	ldr	r0, [pc, #564]	; (801b86c <CMD_Help+0x2ec>)
 801b638:	f7fc fc7c 	bl	8017f34 <crs_strlen>
 801b63c:	498b      	ldr	r1, [pc, #556]	; (801b86c <CMD_Help+0x2ec>)
 801b63e:	b282      	uxth	r2, r0
 801b640:	2005      	movs	r0, #5
 801b642:	f7fc fef5 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("-----------\r\n");
 801b646:	498e      	ldr	r1, [pc, #568]	; (801b880 <CMD_Help+0x300>)
 801b648:	4888      	ldr	r0, [pc, #544]	; (801b86c <CMD_Help+0x2ec>)
 801b64a:	f001 fca5 	bl	801cf98 <strcpy>
 801b64e:	4887      	ldr	r0, [pc, #540]	; (801b86c <CMD_Help+0x2ec>)
 801b650:	f7fc fc70 	bl	8017f34 <crs_strlen>
 801b654:	4a85      	ldr	r2, [pc, #532]	; (801b86c <CMD_Help+0x2ec>)
 801b656:	b283      	uxth	r3, r0
 801b658:	2101      	movs	r1, #1
 801b65a:	2005      	movs	r0, #5
 801b65c:	f7fc fca8 	bl	8017fb0 <traceIF_itmPrint>
 801b660:	4882      	ldr	r0, [pc, #520]	; (801b86c <CMD_Help+0x2ec>)
 801b662:	f7fc fc67 	bl	8017f34 <crs_strlen>
 801b666:	4981      	ldr	r1, [pc, #516]	; (801b86c <CMD_Help+0x2ec>)
 801b668:	b282      	uxth	r2, r0
 801b66a:	2005      	movs	r0, #5
 801b66c:	f7fc fee0 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("warning: case sensitive commands\r\n");
 801b670:	4984      	ldr	r1, [pc, #528]	; (801b884 <CMD_Help+0x304>)
 801b672:	487e      	ldr	r0, [pc, #504]	; (801b86c <CMD_Help+0x2ec>)
 801b674:	f001 fc90 	bl	801cf98 <strcpy>
 801b678:	487c      	ldr	r0, [pc, #496]	; (801b86c <CMD_Help+0x2ec>)
 801b67a:	f7fc fc5b 	bl	8017f34 <crs_strlen>
 801b67e:	4a7b      	ldr	r2, [pc, #492]	; (801b86c <CMD_Help+0x2ec>)
 801b680:	b283      	uxth	r3, r0
 801b682:	2101      	movs	r1, #1
 801b684:	2005      	movs	r0, #5
 801b686:	f7fc fc93 	bl	8017fb0 <traceIF_itmPrint>
 801b68a:	4878      	ldr	r0, [pc, #480]	; (801b86c <CMD_Help+0x2ec>)
 801b68c:	f7fc fc52 	bl	8017f34 <crs_strlen>
 801b690:	4976      	ldr	r1, [pc, #472]	; (801b86c <CMD_Help+0x2ec>)
 801b692:	b282      	uxth	r2, r0
 801b694:	2005      	movs	r0, #5
 801b696:	f7fc fecb 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("[optional parameter]\r\n");
 801b69a:	497b      	ldr	r1, [pc, #492]	; (801b888 <CMD_Help+0x308>)
 801b69c:	4873      	ldr	r0, [pc, #460]	; (801b86c <CMD_Help+0x2ec>)
 801b69e:	f001 fc7b 	bl	801cf98 <strcpy>
 801b6a2:	4872      	ldr	r0, [pc, #456]	; (801b86c <CMD_Help+0x2ec>)
 801b6a4:	f7fc fc46 	bl	8017f34 <crs_strlen>
 801b6a8:	4a70      	ldr	r2, [pc, #448]	; (801b86c <CMD_Help+0x2ec>)
 801b6aa:	b283      	uxth	r3, r0
 801b6ac:	2101      	movs	r1, #1
 801b6ae:	2005      	movs	r0, #5
 801b6b0:	f7fc fc7e 	bl	8017fb0 <traceIF_itmPrint>
 801b6b4:	486d      	ldr	r0, [pc, #436]	; (801b86c <CMD_Help+0x2ec>)
 801b6b6:	f7fc fc3d 	bl	8017f34 <crs_strlen>
 801b6ba:	496c      	ldr	r1, [pc, #432]	; (801b86c <CMD_Help+0x2ec>)
 801b6bc:	b282      	uxth	r2, r0
 801b6be:	2005      	movs	r0, #5
 801b6c0:	f7fc feb6 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("<parameter value>\r\n");
 801b6c4:	4971      	ldr	r1, [pc, #452]	; (801b88c <CMD_Help+0x30c>)
 801b6c6:	4869      	ldr	r0, [pc, #420]	; (801b86c <CMD_Help+0x2ec>)
 801b6c8:	f001 fc66 	bl	801cf98 <strcpy>
 801b6cc:	4867      	ldr	r0, [pc, #412]	; (801b86c <CMD_Help+0x2ec>)
 801b6ce:	f7fc fc31 	bl	8017f34 <crs_strlen>
 801b6d2:	4a66      	ldr	r2, [pc, #408]	; (801b86c <CMD_Help+0x2ec>)
 801b6d4:	b283      	uxth	r3, r0
 801b6d6:	2101      	movs	r1, #1
 801b6d8:	2005      	movs	r0, #5
 801b6da:	f7fc fc69 	bl	8017fb0 <traceIF_itmPrint>
 801b6de:	4863      	ldr	r0, [pc, #396]	; (801b86c <CMD_Help+0x2ec>)
 801b6e0:	f7fc fc28 	bl	8017f34 <crs_strlen>
 801b6e4:	4961      	ldr	r1, [pc, #388]	; (801b86c <CMD_Help+0x2ec>)
 801b6e6:	b282      	uxth	r2, r0
 801b6e8:	2005      	movs	r0, #5
 801b6ea:	f7fc fea1 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("<val_1>|<val_2>|...|<val_n>: parameter value list\r\n");
 801b6ee:	4968      	ldr	r1, [pc, #416]	; (801b890 <CMD_Help+0x310>)
 801b6f0:	485e      	ldr	r0, [pc, #376]	; (801b86c <CMD_Help+0x2ec>)
 801b6f2:	f001 fc51 	bl	801cf98 <strcpy>
 801b6f6:	485d      	ldr	r0, [pc, #372]	; (801b86c <CMD_Help+0x2ec>)
 801b6f8:	f7fc fc1c 	bl	8017f34 <crs_strlen>
 801b6fc:	4a5b      	ldr	r2, [pc, #364]	; (801b86c <CMD_Help+0x2ec>)
 801b6fe:	b283      	uxth	r3, r0
 801b700:	2101      	movs	r1, #1
 801b702:	2005      	movs	r0, #5
 801b704:	f7fc fc54 	bl	8017fb0 <traceIF_itmPrint>
 801b708:	4858      	ldr	r0, [pc, #352]	; (801b86c <CMD_Help+0x2ec>)
 801b70a:	f7fc fc13 	bl	8017f34 <crs_strlen>
 801b70e:	4957      	ldr	r1, [pc, #348]	; (801b86c <CMD_Help+0x2ec>)
 801b710:	b282      	uxth	r2, r0
 801b712:	2005      	movs	r0, #5
 801b714:	f7fc fe8c 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("(command description)\r\n");
 801b718:	495e      	ldr	r1, [pc, #376]	; (801b894 <CMD_Help+0x314>)
 801b71a:	4854      	ldr	r0, [pc, #336]	; (801b86c <CMD_Help+0x2ec>)
 801b71c:	f001 fc3c 	bl	801cf98 <strcpy>
 801b720:	4852      	ldr	r0, [pc, #328]	; (801b86c <CMD_Help+0x2ec>)
 801b722:	f7fc fc07 	bl	8017f34 <crs_strlen>
 801b726:	4a51      	ldr	r2, [pc, #324]	; (801b86c <CMD_Help+0x2ec>)
 801b728:	b283      	uxth	r3, r0
 801b72a:	2101      	movs	r1, #1
 801b72c:	2005      	movs	r0, #5
 801b72e:	f7fc fc3f 	bl	8017fb0 <traceIF_itmPrint>
 801b732:	484e      	ldr	r0, [pc, #312]	; (801b86c <CMD_Help+0x2ec>)
 801b734:	f7fc fbfe 	bl	8017f34 <crs_strlen>
 801b738:	494c      	ldr	r1, [pc, #304]	; (801b86c <CMD_Help+0x2ec>)
 801b73a:	b282      	uxth	r2, r0
 801b73c:	2005      	movs	r0, #5
 801b73e:	f7fc fe77 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("return key: last command re-execution\r\n");
 801b742:	4955      	ldr	r1, [pc, #340]	; (801b898 <CMD_Help+0x318>)
 801b744:	4849      	ldr	r0, [pc, #292]	; (801b86c <CMD_Help+0x2ec>)
 801b746:	f001 fc27 	bl	801cf98 <strcpy>
 801b74a:	4848      	ldr	r0, [pc, #288]	; (801b86c <CMD_Help+0x2ec>)
 801b74c:	f7fc fbf2 	bl	8017f34 <crs_strlen>
 801b750:	4a46      	ldr	r2, [pc, #280]	; (801b86c <CMD_Help+0x2ec>)
 801b752:	b283      	uxth	r3, r0
 801b754:	2101      	movs	r1, #1
 801b756:	2005      	movs	r0, #5
 801b758:	f7fc fc2a 	bl	8017fb0 <traceIF_itmPrint>
 801b75c:	4843      	ldr	r0, [pc, #268]	; (801b86c <CMD_Help+0x2ec>)
 801b75e:	f7fc fbe9 	bl	8017f34 <crs_strlen>
 801b762:	4942      	ldr	r1, [pc, #264]	; (801b86c <CMD_Help+0x2ec>)
 801b764:	b282      	uxth	r2, r0
 801b766:	2005      	movs	r0, #5
 801b768:	f7fc fe62 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("#: comment line\r\n");
 801b76c:	494b      	ldr	r1, [pc, #300]	; (801b89c <CMD_Help+0x31c>)
 801b76e:	483f      	ldr	r0, [pc, #252]	; (801b86c <CMD_Help+0x2ec>)
 801b770:	f001 fc12 	bl	801cf98 <strcpy>
 801b774:	483d      	ldr	r0, [pc, #244]	; (801b86c <CMD_Help+0x2ec>)
 801b776:	f7fc fbdd 	bl	8017f34 <crs_strlen>
 801b77a:	4a3c      	ldr	r2, [pc, #240]	; (801b86c <CMD_Help+0x2ec>)
 801b77c:	b283      	uxth	r3, r0
 801b77e:	2101      	movs	r1, #1
 801b780:	2005      	movs	r0, #5
 801b782:	f7fc fc15 	bl	8017fb0 <traceIF_itmPrint>
 801b786:	4839      	ldr	r0, [pc, #228]	; (801b86c <CMD_Help+0x2ec>)
 801b788:	f7fc fbd4 	bl	8017f34 <crs_strlen>
 801b78c:	4937      	ldr	r1, [pc, #220]	; (801b86c <CMD_Help+0x2ec>)
 801b78e:	b282      	uxth	r2, r0
 801b790:	2005      	movs	r0, #5
 801b792:	f7fc fe4d 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("\r\nAdvice\r\n");
 801b796:	4942      	ldr	r1, [pc, #264]	; (801b8a0 <CMD_Help+0x320>)
 801b798:	4834      	ldr	r0, [pc, #208]	; (801b86c <CMD_Help+0x2ec>)
 801b79a:	f001 fbfd 	bl	801cf98 <strcpy>
 801b79e:	4833      	ldr	r0, [pc, #204]	; (801b86c <CMD_Help+0x2ec>)
 801b7a0:	f7fc fbc8 	bl	8017f34 <crs_strlen>
 801b7a4:	4a31      	ldr	r2, [pc, #196]	; (801b86c <CMD_Help+0x2ec>)
 801b7a6:	b283      	uxth	r3, r0
 801b7a8:	2101      	movs	r1, #1
 801b7aa:	2005      	movs	r0, #5
 801b7ac:	f7fc fc00 	bl	8017fb0 <traceIF_itmPrint>
 801b7b0:	482e      	ldr	r0, [pc, #184]	; (801b86c <CMD_Help+0x2ec>)
 801b7b2:	f7fc fbbf 	bl	8017f34 <crs_strlen>
 801b7b6:	492d      	ldr	r1, [pc, #180]	; (801b86c <CMD_Help+0x2ec>)
 801b7b8:	b282      	uxth	r2, r0
 801b7ba:	2005      	movs	r0, #5
 801b7bc:	f7fc fe38 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE("-----------\r\n");
 801b7c0:	492f      	ldr	r1, [pc, #188]	; (801b880 <CMD_Help+0x300>)
 801b7c2:	482a      	ldr	r0, [pc, #168]	; (801b86c <CMD_Help+0x2ec>)
 801b7c4:	f001 fbe8 	bl	801cf98 <strcpy>
 801b7c8:	4828      	ldr	r0, [pc, #160]	; (801b86c <CMD_Help+0x2ec>)
 801b7ca:	f7fc fbb3 	bl	8017f34 <crs_strlen>
 801b7ce:	4a27      	ldr	r2, [pc, #156]	; (801b86c <CMD_Help+0x2ec>)
 801b7d0:	b283      	uxth	r3, r0
 801b7d2:	2101      	movs	r1, #1
 801b7d4:	2005      	movs	r0, #5
 801b7d6:	f7fc fbeb 	bl	8017fb0 <traceIF_itmPrint>
 801b7da:	4824      	ldr	r0, [pc, #144]	; (801b86c <CMD_Help+0x2ec>)
 801b7dc:	f7fc fbaa 	bl	8017f34 <crs_strlen>
 801b7e0:	4922      	ldr	r1, [pc, #136]	; (801b86c <CMD_Help+0x2ec>)
 801b7e2:	b282      	uxth	r2, r0
 801b7e4:	2005      	movs	r0, #5
 801b7e6:	f7fc fe23 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 801b7ea:	492e      	ldr	r1, [pc, #184]	; (801b8a4 <CMD_Help+0x324>)
 801b7ec:	481f      	ldr	r0, [pc, #124]	; (801b86c <CMD_Help+0x2ec>)
 801b7ee:	f001 fbd3 	bl	801cf98 <strcpy>
 801b7f2:	481e      	ldr	r0, [pc, #120]	; (801b86c <CMD_Help+0x2ec>)
 801b7f4:	f7fc fb9e 	bl	8017f34 <crs_strlen>
 801b7f8:	4a1c      	ldr	r2, [pc, #112]	; (801b86c <CMD_Help+0x2ec>)
 801b7fa:	b283      	uxth	r3, r0
 801b7fc:	2101      	movs	r1, #1
 801b7fe:	2005      	movs	r0, #5
 801b800:	f7fc fbd6 	bl	8017fb0 <traceIF_itmPrint>
 801b804:	4819      	ldr	r0, [pc, #100]	; (801b86c <CMD_Help+0x2ec>)
 801b806:	f7fc fb95 	bl	8017f34 <crs_strlen>
 801b80a:	4918      	ldr	r1, [pc, #96]	; (801b86c <CMD_Help+0x2ec>)
 801b80c:	b282      	uxth	r2, r0
 801b80e:	2005      	movs	r0, #5
 801b810:	f7fc fe0e 	bl	8018430 <traceIF_uartPrintForce>
			"to use commands it is advised to use one of the following command to disable traces\r\n");
	PRINT_FORCE("trace off (allows disable all traces)\r\n");
 801b814:	4924      	ldr	r1, [pc, #144]	; (801b8a8 <CMD_Help+0x328>)
 801b816:	4815      	ldr	r0, [pc, #84]	; (801b86c <CMD_Help+0x2ec>)
 801b818:	f001 fbbe 	bl	801cf98 <strcpy>
 801b81c:	4813      	ldr	r0, [pc, #76]	; (801b86c <CMD_Help+0x2ec>)
 801b81e:	f7fc fb89 	bl	8017f34 <crs_strlen>
 801b822:	4a12      	ldr	r2, [pc, #72]	; (801b86c <CMD_Help+0x2ec>)
 801b824:	b283      	uxth	r3, r0
 801b826:	2101      	movs	r1, #1
 801b828:	2005      	movs	r0, #5
 801b82a:	f7fc fbc1 	bl	8017fb0 <traceIF_itmPrint>
 801b82e:	480f      	ldr	r0, [pc, #60]	; (801b86c <CMD_Help+0x2ec>)
 801b830:	f7fc fb80 	bl	8017f34 <crs_strlen>
 801b834:	490d      	ldr	r1, [pc, #52]	; (801b86c <CMD_Help+0x2ec>)
 801b836:	b282      	uxth	r2, r0
 801b838:	2005      	movs	r0, #5
 801b83a:	f7fc fdf9 	bl	8018430 <traceIF_uartPrintForce>
	PRINT_FORCE(
 801b83e:	491b      	ldr	r1, [pc, #108]	; (801b8ac <CMD_Help+0x32c>)
 801b840:	480a      	ldr	r0, [pc, #40]	; (801b86c <CMD_Help+0x2ec>)
 801b842:	f001 fba9 	bl	801cf98 <strcpy>
 801b846:	4809      	ldr	r0, [pc, #36]	; (801b86c <CMD_Help+0x2ec>)
 801b848:	f7fc fb74 	bl	8017f34 <crs_strlen>
 801b84c:	4a07      	ldr	r2, [pc, #28]	; (801b86c <CMD_Help+0x2ec>)
 801b84e:	b283      	uxth	r3, r0
 801b850:	2101      	movs	r1, #1
 801b852:	2005      	movs	r0, #5
 801b854:	f7fc fbac 	bl	8017fb0 <traceIF_itmPrint>
 801b858:	4804      	ldr	r0, [pc, #16]	; (801b86c <CMD_Help+0x2ec>)
 801b85a:	f7fc fb6b 	bl	8017f34 <crs_strlen>
 801b85e:	4903      	ldr	r1, [pc, #12]	; (801b86c <CMD_Help+0x2ec>)
 801b860:	b282      	uxth	r2, r0
 801b862:	2005      	movs	r0, #5
 801b864:	e028      	b.n	801b8b8 <CMD_Help+0x338>
 801b866:	bf00      	nop
 801b868:	0802c248 	.word	0x0802c248
 801b86c:	200092f8 	.word	0x200092f8
 801b870:	20008200 	.word	0x20008200
 801b874:	0802c25b 	.word	0x0802c25b
 801b878:	0802c270 	.word	0x0802c270
 801b87c:	0802c28d 	.word	0x0802c28d
 801b880:	0802c275 	.word	0x0802c275
 801b884:	0802c29d 	.word	0x0802c29d
 801b888:	0802c2c0 	.word	0x0802c2c0
 801b88c:	0802c2d7 	.word	0x0802c2d7
 801b890:	0802c2eb 	.word	0x0802c2eb
 801b894:	0802c31f 	.word	0x0802c31f
 801b898:	0802c337 	.word	0x0802c337
 801b89c:	0802c35f 	.word	0x0802c35f
 801b8a0:	0802c371 	.word	0x0802c371
 801b8a4:	0802c37c 	.word	0x0802c37c
 801b8a8:	0802c3d2 	.word	0x0802c3d2
 801b8ac:	0802c3fa 	.word	0x0802c3fa
 801b8b0:	200081f8 	.word	0x200081f8
 801b8b4:	0802c283 	.word	0x0802c283
 801b8b8:	f7fc fdba 	bl	8018430 <traceIF_uartPrintForce>
			"cst polling off  (allows to disable modem polling and avoid to display uncomfortable modem traces\r\n");
	PRINT_FORCE("\r\n");
 801b8bc:	4922      	ldr	r1, [pc, #136]	; (801b948 <CMD_Help+0x3c8>)
 801b8be:	4823      	ldr	r0, [pc, #140]	; (801b94c <CMD_Help+0x3cc>)
 801b8c0:	f001 fb6a 	bl	801cf98 <strcpy>
 801b8c4:	4821      	ldr	r0, [pc, #132]	; (801b94c <CMD_Help+0x3cc>)
 801b8c6:	f7fc fb35 	bl	8017f34 <crs_strlen>
 801b8ca:	4a20      	ldr	r2, [pc, #128]	; (801b94c <CMD_Help+0x3cc>)
 801b8cc:	b283      	uxth	r3, r0
 801b8ce:	2101      	movs	r1, #1
 801b8d0:	2005      	movs	r0, #5
 801b8d2:	f7fc fb6d 	bl	8017fb0 <traceIF_itmPrint>
 801b8d6:	481d      	ldr	r0, [pc, #116]	; (801b94c <CMD_Help+0x3cc>)
 801b8d8:	f7fc fb2c 	bl	8017f34 <crs_strlen>
 801b8dc:	491b      	ldr	r1, [pc, #108]	; (801b94c <CMD_Help+0x3cc>)
 801b8de:	b282      	uxth	r2, r0
 801b8e0:	2005      	movs	r0, #5
 801b8e2:	f7fc fda5 	bl	8018430 <traceIF_uartPrintForce>

	return CMD_OK;
}
 801b8e6:	2000      	movs	r0, #0
 801b8e8:	b007      	add	sp, #28
 801b8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cmd_size = (uint32_t) crs_strlen(CMD_a_cmd_list[i].CmdName);
 801b8ee:	6830      	ldr	r0, [r6, #0]
 801b8f0:	f7fc fb20 	bl	8017f34 <crs_strlen>
		align_offset = CMD_COMMAND_ALIGN_COLUMN - cmd_size;
 801b8f4:	f1c0 0410 	rsb	r4, r0, #16
		if ((align_offset < CMD_COMMAND_ALIGN_COLUMN)) {
 801b8f8:	2c0f      	cmp	r4, #15
 801b8fa:	d809      	bhi.n	801b910 <CMD_Help+0x390>
			(void) memset(CMD_CmdAlignOffsetString, (int32_t) ' ',
 801b8fc:	4622      	mov	r2, r4
 801b8fe:	2120      	movs	r1, #32
 801b900:	a802      	add	r0, sp, #8
 801b902:	f001 faa9 	bl	801ce58 <memset>
			CMD_CmdAlignOffsetString[align_offset] = 0U;
 801b906:	ab06      	add	r3, sp, #24
 801b908:	441c      	add	r4, r3
 801b90a:	2300      	movs	r3, #0
 801b90c:	f804 3c10 	strb.w	r3, [r4, #-16]
		PRINT_FORCE("%s%s %s\r\n", CMD_a_cmd_list[i].CmdName,
 801b910:	6873      	ldr	r3, [r6, #4]
 801b912:	9300      	str	r3, [sp, #0]
 801b914:	f856 2b0c 	ldr.w	r2, [r6], #12
 801b918:	ab02      	add	r3, sp, #8
 801b91a:	4649      	mov	r1, r9
 801b91c:	4628      	mov	r0, r5
 801b91e:	f001 facb 	bl	801ceb8 <sprintf>
 801b922:	4628      	mov	r0, r5
 801b924:	f7fc fb06 	bl	8017f34 <crs_strlen>
 801b928:	462a      	mov	r2, r5
 801b92a:	b283      	uxth	r3, r0
 801b92c:	2101      	movs	r1, #1
 801b92e:	2005      	movs	r0, #5
 801b930:	f7fc fb3e 	bl	8017fb0 <traceIF_itmPrint>
 801b934:	4628      	mov	r0, r5
 801b936:	f7fc fafd 	bl	8017f34 <crs_strlen>
 801b93a:	4629      	mov	r1, r5
 801b93c:	b282      	uxth	r2, r0
 801b93e:	2005      	movs	r0, #5
 801b940:	f7fc fd76 	bl	8018430 <traceIF_uartPrintForce>
	for (i = 0U; i < CMD_NbCmd; i++) {
 801b944:	3701      	adds	r7, #1
 801b946:	e664      	b.n	801b612 <CMD_Help+0x92>
 801b948:	0802b13a 	.word	0x0802b13a
 801b94c:	200092f8 	.word	0x200092f8

0801b950 <CMD_thread>:
static void CMD_thread(const void *p_argument) {
 801b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t cmd_prompt[3] = "$>"; /* command prompt to display $>\0 */
 801b954:	4b79      	ldr	r3, [pc, #484]	; (801bb3c <CMD_thread+0x1ec>)
	(void) rtosalSemaphoreAcquire(CMD_rcvSemaphore, RTOSAL_WAIT_FOREVER);
 801b956:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801bb6c <CMD_thread+0x21c>
	uint8_t cmd_prompt[3] = "$>"; /* command prompt to display $>\0 */
 801b95a:	881a      	ldrh	r2, [r3, #0]
				for (i = 0U; i < CMD_NbCmd; i++) {
 801b95c:	4f78      	ldr	r7, [pc, #480]	; (801bb40 <CMD_thread+0x1f0>)
	uint8_t cmd_prompt[3] = "$>"; /* command prompt to display $>\0 */
 801b95e:	789b      	ldrb	r3, [r3, #2]
static void CMD_thread(const void *p_argument) {
 801b960:	b09b      	sub	sp, #108	; 0x6c
	uint8_t cmd_prompt[3] = "$>"; /* command prompt to display $>\0 */
 801b962:	f8ad 2000 	strh.w	r2, [sp]
 801b966:	f88d 3002 	strb.w	r3, [sp, #2]
	size = crs_strlen(CMD_current_cmd) + 1U;
 801b96a:	4c76      	ldr	r4, [pc, #472]	; (801bb44 <CMD_thread+0x1f4>)
	(void) rtosalSemaphoreAcquire(CMD_rcvSemaphore, RTOSAL_WAIT_FOREVER);
 801b96c:	f8d8 0000 	ldr.w	r0, [r8]
 801b970:	f04f 31ff 	mov.w	r1, #4294967295
 801b974:	f7fc fa1e 	bl	8017db4 <rtosalSemaphoreAcquire>
	size = crs_strlen(CMD_current_cmd) + 1U;
 801b978:	6820      	ldr	r0, [r4, #0]
 801b97a:	f7fc fadb 	bl	8017f34 <crs_strlen>
 801b97e:	1c42      	adds	r2, r0, #1
	(void) memcpy((CRC_CHAR_t*) command_line, (CRC_CHAR_t*) CMD_current_cmd,
 801b980:	2a64      	cmp	r2, #100	; 0x64
 801b982:	bf28      	it	cs
 801b984:	2264      	movcs	r2, #100	; 0x64
 801b986:	6821      	ldr	r1, [r4, #0]
 801b988:	a801      	add	r0, sp, #4
 801b98a:	f001 fa57 	bl	801ce3c <memcpy>
		if (command_line[0] != (uint8_t) '#') {
 801b98e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801b992:	2b23      	cmp	r3, #35	; 0x23
 801b994:	f000 80bb 	beq.w	801bb0e <CMD_thread+0x1be>
			if (command_line[0] == 0U) {
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d148      	bne.n	801ba2e <CMD_thread+0xde>
				if (CMD_LastCommandLine[0] == 0U) {
 801b99c:	496a      	ldr	r1, [pc, #424]	; (801bb48 <CMD_thread+0x1f8>)
 801b99e:	780b      	ldrb	r3, [r1, #0]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d13e      	bne.n	801ba22 <CMD_thread+0xd2>
							crs_strlen((const uint8_t*) "help") + 1U);
 801b9a4:	4869      	ldr	r0, [pc, #420]	; (801bb4c <CMD_thread+0x1fc>)
 801b9a6:	f7fc fac5 	bl	8017f34 <crs_strlen>
					(void) memcpy((CRC_CHAR_t*) command_line,
 801b9aa:	4968      	ldr	r1, [pc, #416]	; (801bb4c <CMD_thread+0x1fc>)
 801b9ac:	1c42      	adds	r2, r0, #1
					(void) memcpy((CRC_CHAR_t*) command_line,
 801b9ae:	a801      	add	r0, sp, #4
					(void) memcpy((CRC_CHAR_t*) CMD_LastCommandLine,
 801b9b0:	f001 fa44 	bl	801ce3c <memcpy>
			for (i = 0U; i < CMD_MAX_LINE_SIZE; i++) {
 801b9b4:	ab01      	add	r3, sp, #4
 801b9b6:	2400      	movs	r4, #0
				if ((command_line[i] == (uint8_t) ' ')
 801b9b8:	f813 2b01 	ldrb.w	r2, [r3], #1
						|| (command_line[i] == (uint8_t) 0)) {
 801b9bc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 801b9c0:	d002      	beq.n	801b9c8 <CMD_thread+0x78>
			for (i = 0U; i < CMD_MAX_LINE_SIZE; i++) {
 801b9c2:	3401      	adds	r4, #1
 801b9c4:	2c64      	cmp	r4, #100	; 0x64
 801b9c6:	d1f7      	bne.n	801b9b8 <CMD_thread+0x68>
			if (memcmp((CRC_CHAR_t*) "reset", (CRC_CHAR_t*) command_line,
 801b9c8:	4861      	ldr	r0, [pc, #388]	; (801bb50 <CMD_thread+0x200>)
 801b9ca:	4622      	mov	r2, r4
 801b9cc:	a901      	add	r1, sp, #4
 801b9ce:	f001 fa27 	bl	801ce20 <memcmp>
 801b9d2:	2800      	cmp	r0, #0
 801b9d4:	d137      	bne.n	801ba46 <CMD_thread+0xf6>
	PRINT_FORCE("Board reset requested !\r\n");
 801b9d6:	495f      	ldr	r1, [pc, #380]	; (801bb54 <CMD_thread+0x204>)
 801b9d8:	485f      	ldr	r0, [pc, #380]	; (801bb58 <CMD_thread+0x208>)
 801b9da:	f001 fadd 	bl	801cf98 <strcpy>
 801b9de:	485e      	ldr	r0, [pc, #376]	; (801bb58 <CMD_thread+0x208>)
 801b9e0:	f7fc faa8 	bl	8017f34 <crs_strlen>
 801b9e4:	4a5c      	ldr	r2, [pc, #368]	; (801bb58 <CMD_thread+0x208>)
 801b9e6:	b283      	uxth	r3, r0
 801b9e8:	2101      	movs	r1, #1
 801b9ea:	2005      	movs	r0, #5
 801b9ec:	f7fc fae0 	bl	8017fb0 <traceIF_itmPrint>
 801b9f0:	4859      	ldr	r0, [pc, #356]	; (801bb58 <CMD_thread+0x208>)
 801b9f2:	f7fc fa9f 	bl	8017f34 <crs_strlen>
 801b9f6:	4958      	ldr	r1, [pc, #352]	; (801bb58 <CMD_thread+0x208>)
 801b9f8:	b282      	uxth	r2, r0
 801b9fa:	2005      	movs	r0, #5
 801b9fc:	f7fc fd18 	bl	8018430 <traceIF_uartPrintForce>
	(void) rtosalDelay(1000); /* Let time to display the message */
 801ba00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ba04:	f7fc fa13 	bl	8017e2e <rtosalDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 801ba08:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801ba0c:	4953      	ldr	r1, [pc, #332]	; (801bb5c <CMD_thread+0x20c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801ba0e:	4b54      	ldr	r3, [pc, #336]	; (801bb60 <CMD_thread+0x210>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801ba10:	68ca      	ldr	r2, [r1, #12]
 801ba12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801ba16:	4313      	orrs	r3, r2
 801ba18:	60cb      	str	r3, [r1, #12]
 801ba1a:	f3bf 8f4f 	dsb	sy
    __NOP();
 801ba1e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 801ba20:	e7fd      	b.n	801ba1e <CMD_thread+0xce>
							crs_strlen(CMD_LastCommandLine) + 1U);
 801ba22:	4608      	mov	r0, r1
 801ba24:	f7fc fa86 	bl	8017f34 <crs_strlen>
					(void) memcpy((CRC_CHAR_t*) command_line,
 801ba28:	4947      	ldr	r1, [pc, #284]	; (801bb48 <CMD_thread+0x1f8>)
 801ba2a:	1c42      	adds	r2, r0, #1
 801ba2c:	e7bf      	b.n	801b9ae <CMD_thread+0x5e>
				cmd_line_len = crs_strlen(command_line);
 801ba2e:	a801      	add	r0, sp, #4
 801ba30:	f7fc fa80 	bl	8017f34 <crs_strlen>
				if (cmd_line_len > 1U) {
 801ba34:	2801      	cmp	r0, #1
 801ba36:	d9bd      	bls.n	801b9b4 <CMD_thread+0x64>
							crs_strlen(command_line) + 1U);
 801ba38:	a801      	add	r0, sp, #4
 801ba3a:	f7fc fa7b 	bl	8017f34 <crs_strlen>
					(void) memcpy((CRC_CHAR_t*) CMD_LastCommandLine,
 801ba3e:	a901      	add	r1, sp, #4
 801ba40:	1c42      	adds	r2, r0, #1
 801ba42:	4841      	ldr	r0, [pc, #260]	; (801bb48 <CMD_thread+0x1f8>)
 801ba44:	e7b4      	b.n	801b9b0 <CMD_thread+0x60>
			} else if (i != CMD_MAX_LINE_SIZE) {
 801ba46:	2c64      	cmp	r4, #100	; 0x64
 801ba48:	d05f      	beq.n	801bb0a <CMD_thread+0x1ba>
				for (i = 0U; i < CMD_NbCmd; i++) {
 801ba4a:	f8d7 a000 	ldr.w	sl, [r7]
					if (memcmp((CRC_CHAR_t*) CMD_a_cmd_list[i].CmdName,
 801ba4e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801bb70 <CMD_thread+0x220>
				for (i = 0U; i < CMD_NbCmd; i++) {
 801ba52:	2500      	movs	r5, #0
					if (memcmp((CRC_CHAR_t*) CMD_a_cmd_list[i].CmdName,
 801ba54:	f04f 0b0c 	mov.w	fp, #12
				for (i = 0U; i < CMD_NbCmd; i++) {
 801ba58:	45aa      	cmp	sl, r5
 801ba5a:	d025      	beq.n	801baa8 <CMD_thread+0x158>
					if (memcmp((CRC_CHAR_t*) CMD_a_cmd_list[i].CmdName,
 801ba5c:	fb0b f605 	mul.w	r6, fp, r5
 801ba60:	4622      	mov	r2, r4
 801ba62:	f856 0009 	ldr.w	r0, [r6, r9]
 801ba66:	a901      	add	r1, sp, #4
 801ba68:	f001 f9da 	bl	801ce20 <memcmp>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	d14a      	bne.n	801bb06 <CMD_thread+0x1b6>
						PRINT_FORCE("\r\n")
 801ba70:	493c      	ldr	r1, [pc, #240]	; (801bb64 <CMD_thread+0x214>)
 801ba72:	4839      	ldr	r0, [pc, #228]	; (801bb58 <CMD_thread+0x208>)
 801ba74:	f001 fa90 	bl	801cf98 <strcpy>
 801ba78:	4837      	ldr	r0, [pc, #220]	; (801bb58 <CMD_thread+0x208>)
 801ba7a:	f7fc fa5b 	bl	8017f34 <crs_strlen>
 801ba7e:	4a36      	ldr	r2, [pc, #216]	; (801bb58 <CMD_thread+0x208>)
 801ba80:	b283      	uxth	r3, r0
 801ba82:	2101      	movs	r1, #1
 801ba84:	2005      	movs	r0, #5
 801ba86:	f7fc fa93 	bl	8017fb0 <traceIF_itmPrint>
 801ba8a:	4833      	ldr	r0, [pc, #204]	; (801bb58 <CMD_thread+0x208>)
 801ba8c:	f7fc fa52 	bl	8017f34 <crs_strlen>
						(void) CMD_a_cmd_list[i].CmdHandler(
 801ba90:	444e      	add	r6, r9
						PRINT_FORCE("\r\n")
 801ba92:	b282      	uxth	r2, r0
 801ba94:	4930      	ldr	r1, [pc, #192]	; (801bb58 <CMD_thread+0x208>)
 801ba96:	2005      	movs	r0, #5
 801ba98:	f7fc fcca 	bl	8018430 <traceIF_uartPrintForce>
						(void) CMD_a_cmd_list[i].CmdHandler(
 801ba9c:	68b3      	ldr	r3, [r6, #8]
 801ba9e:	a801      	add	r0, sp, #4
 801baa0:	4798      	blx	r3
				if (i >= CMD_NbCmd) {
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	42ab      	cmp	r3, r5
 801baa6:	d818      	bhi.n	801bada <CMD_thread+0x18a>
					PRINT_FORCE("\r\nCMD : unknown command : %s\r\n",
 801baa8:	492f      	ldr	r1, [pc, #188]	; (801bb68 <CMD_thread+0x218>)
 801baaa:	482b      	ldr	r0, [pc, #172]	; (801bb58 <CMD_thread+0x208>)
 801baac:	aa01      	add	r2, sp, #4
 801baae:	f001 fa03 	bl	801ceb8 <sprintf>
 801bab2:	4829      	ldr	r0, [pc, #164]	; (801bb58 <CMD_thread+0x208>)
 801bab4:	f7fc fa3e 	bl	8017f34 <crs_strlen>
 801bab8:	4a27      	ldr	r2, [pc, #156]	; (801bb58 <CMD_thread+0x208>)
 801baba:	b283      	uxth	r3, r0
 801babc:	2101      	movs	r1, #1
 801babe:	2005      	movs	r0, #5
 801bac0:	f7fc fa76 	bl	8017fb0 <traceIF_itmPrint>
 801bac4:	4824      	ldr	r0, [pc, #144]	; (801bb58 <CMD_thread+0x208>)
 801bac6:	f7fc fa35 	bl	8017f34 <crs_strlen>
 801baca:	4923      	ldr	r1, [pc, #140]	; (801bb58 <CMD_thread+0x208>)
 801bacc:	b282      	uxth	r2, r0
 801bace:	2005      	movs	r0, #5
 801bad0:	f7fc fcae 	bl	8018430 <traceIF_uartPrintForce>
					(void) CMD_Help((uint8_t*) command_line);
 801bad4:	a801      	add	r0, sp, #4
 801bad6:	f7ff fd53 	bl	801b580 <CMD_Help>
		PRINT_FORCE("%s", (CRC_CHAR_t* )cmd_prompt)
 801bada:	4669      	mov	r1, sp
 801badc:	481e      	ldr	r0, [pc, #120]	; (801bb58 <CMD_thread+0x208>)
 801bade:	f001 fa5b 	bl	801cf98 <strcpy>
 801bae2:	481d      	ldr	r0, [pc, #116]	; (801bb58 <CMD_thread+0x208>)
 801bae4:	f7fc fa26 	bl	8017f34 <crs_strlen>
 801bae8:	4a1b      	ldr	r2, [pc, #108]	; (801bb58 <CMD_thread+0x208>)
 801baea:	b283      	uxth	r3, r0
 801baec:	2101      	movs	r1, #1
 801baee:	2005      	movs	r0, #5
 801baf0:	f7fc fa5e 	bl	8017fb0 <traceIF_itmPrint>
 801baf4:	4818      	ldr	r0, [pc, #96]	; (801bb58 <CMD_thread+0x208>)
 801baf6:	f7fc fa1d 	bl	8017f34 <crs_strlen>
 801bafa:	4917      	ldr	r1, [pc, #92]	; (801bb58 <CMD_thread+0x208>)
 801bafc:	b282      	uxth	r2, r0
 801bafe:	2005      	movs	r0, #5
 801bb00:	f7fc fc96 	bl	8018430 <traceIF_uartPrintForce>
		CMD_GetLine(command_line, CMD_MAX_LINE_SIZE);
 801bb04:	e731      	b.n	801b96a <CMD_thread+0x1a>
				for (i = 0U; i < CMD_NbCmd; i++) {
 801bb06:	3501      	adds	r5, #1
 801bb08:	e7a6      	b.n	801ba58 <CMD_thread+0x108>
				__NOP(); /* Nothing to do */
 801bb0a:	bf00      	nop
 801bb0c:	e7e5      	b.n	801bada <CMD_thread+0x18a>
			PRINT_FORCE("\r\n")
 801bb0e:	4915      	ldr	r1, [pc, #84]	; (801bb64 <CMD_thread+0x214>)
 801bb10:	4811      	ldr	r0, [pc, #68]	; (801bb58 <CMD_thread+0x208>)
 801bb12:	f001 fa41 	bl	801cf98 <strcpy>
 801bb16:	4810      	ldr	r0, [pc, #64]	; (801bb58 <CMD_thread+0x208>)
 801bb18:	f7fc fa0c 	bl	8017f34 <crs_strlen>
 801bb1c:	4a0e      	ldr	r2, [pc, #56]	; (801bb58 <CMD_thread+0x208>)
 801bb1e:	b283      	uxth	r3, r0
 801bb20:	2101      	movs	r1, #1
 801bb22:	2005      	movs	r0, #5
 801bb24:	f7fc fa44 	bl	8017fb0 <traceIF_itmPrint>
 801bb28:	480b      	ldr	r0, [pc, #44]	; (801bb58 <CMD_thread+0x208>)
 801bb2a:	f7fc fa03 	bl	8017f34 <crs_strlen>
 801bb2e:	490a      	ldr	r1, [pc, #40]	; (801bb58 <CMD_thread+0x208>)
 801bb30:	b282      	uxth	r2, r0
 801bb32:	2005      	movs	r0, #5
 801bb34:	f7fc fc7c 	bl	8018430 <traceIF_uartPrintForce>
 801bb38:	e7cf      	b.n	801bada <CMD_thread+0x18a>
 801bb3a:	bf00      	nop
 801bb3c:	0802c49d 	.word	0x0802c49d
 801bb40:	200081f8 	.word	0x200081f8
 801bb44:	2000824c 	.word	0x2000824c
 801bb48:	20008194 	.word	0x20008194
 801bb4c:	08028e1c 	.word	0x08028e1c
 801bb50:	0802c45e 	.word	0x0802c45e
 801bb54:	0802c464 	.word	0x0802c464
 801bb58:	200092f8 	.word	0x200092f8
 801bb5c:	e000ed00 	.word	0xe000ed00
 801bb60:	05fa0004 	.word	0x05fa0004
 801bb64:	0802b13a 	.word	0x0802b13a
 801bb68:	0802c47e 	.word	0x0802c47e
 801bb6c:	20008254 	.word	0x20008254
 801bb70:	20008200 	.word	0x20008200

0801bb74 <CMD_GetValue>:
 * @brief  get an integer value from the argument
 * @param  string_p   (IN) acscii value to convert
 * @param  value_p    (OUT) converted uint32_t value
 * @retval return value
 */
uint32_t CMD_GetValue(uint8_t *string_p, uint32_t *value_p) {
 801bb74:	b570      	push	{r4, r5, r6, lr}
 801bb76:	460e      	mov	r6, r1
	uint32_t ret;
	uint8_t digit8;
	uint32_t digit;
	ret = 0U;

	if (string_p == NULL) {
 801bb78:	4605      	mov	r5, r0
 801bb7a:	b918      	cbnz	r0, 801bb84 <CMD_GetValue+0x10>
		ret = 1U;
		*value_p = 0U;
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	6033      	str	r3, [r6, #0]
		ret = 1U;
 801bb80:	2001      	movs	r0, #1
				*value_p = 0U;
			}
		}
	}
	return ret;
}
 801bb82:	bd70      	pop	{r4, r5, r6, pc}
		if (memcmp((CRC_CHAR_t*) string_p, "0x", 2U) == 0) {
 801bb84:	4909      	ldr	r1, [pc, #36]	; (801bbac <CMD_GetValue+0x38>)
 801bb86:	2202      	movs	r2, #2
 801bb88:	f001 f94a 	bl	801ce20 <memcmp>
 801bb8c:	b928      	cbnz	r0, 801bb9a <CMD_GetValue+0x26>
			*value_p = (uint32_t) crs_atoi_hex(&string_p[2]);
 801bb8e:	1ca8      	adds	r0, r5, #2
 801bb90:	f7fc f9b4 	bl	8017efc <crs_atoi_hex>
				*value_p = (uint32_t) crs_atoi(string_p);
 801bb94:	6030      	str	r0, [r6, #0]
	ret = 0U;
 801bb96:	2000      	movs	r0, #0
	return ret;
 801bb98:	e7f3      	b.n	801bb82 <CMD_GetValue+0xe>
			digit8 = (*string_p - (uint8_t) '0');
 801bb9a:	782b      	ldrb	r3, [r5, #0]
			if (digit <= 9U) {
 801bb9c:	3b30      	subs	r3, #48	; 0x30
 801bb9e:	2b09      	cmp	r3, #9
 801bba0:	d8ec      	bhi.n	801bb7c <CMD_GetValue+0x8>
				*value_p = (uint32_t) crs_atoi(string_p);
 801bba2:	4628      	mov	r0, r5
 801bba4:	f7fc f98f 	bl	8017ec6 <crs_atoi>
 801bba8:	e7f4      	b.n	801bb94 <CMD_GetValue+0x20>
 801bbaa:	bf00      	nop
 801bbac:	0802c4a0 	.word	0x0802c4a0

0801bbb0 <CMD_Declare>:
 * @param  cmd_handler    callback of the component to manage the command
 * @param  cmd_label_p    description of the component to display at the help  command
 * @retval -
 */
void CMD_Declare(uint8_t *cmd_name_p, CMD_HandlerCmd cmd_handler,
		uint8_t *cmd_label_p) {
 801bbb0:	b4f0      	push	{r4, r5, r6, r7}
	if (CMD_NbCmd < CMD_MAX_CMD) {
 801bbb2:	4d0a      	ldr	r5, [pc, #40]	; (801bbdc <CMD_Declare+0x2c>)
 801bbb4:	682b      	ldr	r3, [r5, #0]
 801bbb6:	2b05      	cmp	r3, #5
 801bbb8:	d80a      	bhi.n	801bbd0 <CMD_Declare+0x20>
		CMD_a_cmd_list[CMD_NbCmd].CmdName = cmd_name_p;
 801bbba:	4f09      	ldr	r7, [pc, #36]	; (801bbe0 <CMD_Declare+0x30>)
 801bbbc:	240c      	movs	r4, #12
 801bbbe:	435c      	muls	r4, r3
 801bbc0:	193e      	adds	r6, r7, r4
		CMD_a_cmd_list[CMD_NbCmd].CmdLabel = cmd_label_p;
		CMD_a_cmd_list[CMD_NbCmd].CmdHandler = cmd_handler;

		CMD_NbCmd++;
 801bbc2:	3301      	adds	r3, #1
		CMD_a_cmd_list[CMD_NbCmd].CmdHandler = cmd_handler;
 801bbc4:	e9c6 2101 	strd	r2, r1, [r6, #4]
		CMD_a_cmd_list[CMD_NbCmd].CmdName = cmd_name_p;
 801bbc8:	5138      	str	r0, [r7, r4]
		CMD_NbCmd++;
 801bbca:	602b      	str	r3, [r5, #0]
	} else {
		/* too many recorded components */
		ERROR_Handler(DBG_CHAN_UTILITIES, 10, ERROR_WARNING);
	}
}
 801bbcc:	bcf0      	pop	{r4, r5, r6, r7}
 801bbce:	4770      	bx	lr
 801bbd0:	bcf0      	pop	{r4, r5, r6, r7}
		ERROR_Handler(DBG_CHAN_UTILITIES, 10, ERROR_WARNING);
 801bbd2:	2202      	movs	r2, #2
 801bbd4:	210a      	movs	r1, #10
 801bbd6:	2005      	movs	r0, #5
 801bbd8:	f7fb bbb0 	b.w	801733c <ERROR_Handler>
 801bbdc:	200081f8 	.word	0x200081f8
 801bbe0:	20008200 	.word	0x20008200

0801bbe4 <CMD_RxCpltCallback>:
/**
 * @brief console UART receive IT Callback
 * @param  uart_handle_p       console UART handle
 * @retval -
 */
void CMD_RxCpltCallback(UART_HandleTypeDef *uart_handle_p) {
 801bbe4:	b538      	push	{r3, r4, r5, lr}
	CMD_CurrentUart = uart_handle_p;
	uint8_t rec_char;
	uint8_t *temp;

	/* store the received char */
	rec_char = CMD_ReceivedChar;
 801bbe6:	4916      	ldr	r1, [pc, #88]	; (801bc40 <CMD_RxCpltCallback+0x5c>)

	/* rearm the IT  receive for the next char */
	if (HAL_UART_Receive_IT(CMD_CurrentUart, (uint8_t*) &CMD_ReceivedChar, 1U)
 801bbe8:	2201      	movs	r2, #1
	rec_char = CMD_ReceivedChar;
 801bbea:	780c      	ldrb	r4, [r1, #0]
	if (HAL_UART_Receive_IT(CMD_CurrentUart, (uint8_t*) &CMD_ReceivedChar, 1U)
 801bbec:	f7eb fa4c 	bl	8007088 <HAL_UART_Receive_IT>
 801bbf0:	b100      	cbz	r0, 801bbf4 <CMD_RxCpltCallback+0x10>
			!= HAL_OK) {
		__NOP(); /* Nothing to do */
 801bbf2:	bf00      	nop
	}

	/* ignore '\n' char */
	if (rec_char != (uint8_t) '\n') {
 801bbf4:	2c0a      	cmp	r4, #10
 801bbf6:	d01c      	beq.n	801bc32 <CMD_RxCpltCallback+0x4e>
		if ((rec_char == (uint8_t) '\r')
 801bbf8:	4a12      	ldr	r2, [pc, #72]	; (801bc44 <CMD_RxCpltCallback+0x60>)
 801bbfa:	2c0d      	cmp	r4, #13
 801bbfc:	6813      	ldr	r3, [r2, #0]
 801bbfe:	4615      	mov	r5, r2
 801bc00:	d001      	beq.n	801bc06 <CMD_RxCpltCallback+0x22>
				|| (CMD_CurrentPos >= (CMD_MAX_LINE_SIZE - 1U))) {
 801bc02:	2b62      	cmp	r3, #98	; 0x62
 801bc04:	d910      	bls.n	801bc28 <CMD_RxCpltCallback+0x44>
			/* end of line reached: switch between received buffer and receiving buffer */
			CMD_current_rcv_line[CMD_CurrentPos] = 0;
 801bc06:	4810      	ldr	r0, [pc, #64]	; (801bc48 <CMD_RxCpltCallback+0x64>)
 801bc08:	6802      	ldr	r2, [r0, #0]
 801bc0a:	2100      	movs	r1, #0
 801bc0c:	54d1      	strb	r1, [r2, r3]
			temp = CMD_completed_line;
 801bc0e:	4b0f      	ldr	r3, [pc, #60]	; (801bc4c <CMD_RxCpltCallback+0x68>)
			CMD_completed_line = CMD_current_rcv_line;
			CMD_current_cmd = CMD_completed_line;
			CMD_current_rcv_line = temp;
			CMD_CurrentPos = 0;
 801bc10:	6029      	str	r1, [r5, #0]
			temp = CMD_completed_line;
 801bc12:	681c      	ldr	r4, [r3, #0]
			CMD_completed_line = CMD_current_rcv_line;
 801bc14:	601a      	str	r2, [r3, #0]
			CMD_current_cmd = CMD_completed_line;
 801bc16:	4b0e      	ldr	r3, [pc, #56]	; (801bc50 <CMD_RxCpltCallback+0x6c>)
			CMD_current_rcv_line = temp;
 801bc18:	6004      	str	r4, [r0, #0]
			CMD_current_cmd = CMD_completed_line;
 801bc1a:	601a      	str	r2, [r3, #0]
			(void) rtosalSemaphoreRelease(CMD_rcvSemaphore);
 801bc1c:	4b0d      	ldr	r3, [pc, #52]	; (801bc54 <CMD_RxCpltCallback+0x70>)
 801bc1e:	6818      	ldr	r0, [r3, #0]
				CMD_current_rcv_line[CMD_CurrentPos] = rec_char;
				CMD_CurrentPos++;
			}
		}
	}
}
 801bc20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			(void) rtosalSemaphoreRelease(CMD_rcvSemaphore);
 801bc24:	f7fc b8c8 	b.w	8017db8 <rtosalSemaphoreRelease>
			if (rec_char == (uint8_t) '\b') {
 801bc28:	2c08      	cmp	r4, #8
 801bc2a:	d103      	bne.n	801bc34 <CMD_RxCpltCallback+0x50>
				if (CMD_CurrentPos > 0U) {
 801bc2c:	b10b      	cbz	r3, 801bc32 <CMD_RxCpltCallback+0x4e>
					CMD_CurrentPos--;
 801bc2e:	3b01      	subs	r3, #1
				CMD_CurrentPos++;
 801bc30:	6013      	str	r3, [r2, #0]
}
 801bc32:	bd38      	pop	{r3, r4, r5, pc}
				CMD_current_rcv_line[CMD_CurrentPos] = rec_char;
 801bc34:	4904      	ldr	r1, [pc, #16]	; (801bc48 <CMD_RxCpltCallback+0x64>)
 801bc36:	6809      	ldr	r1, [r1, #0]
 801bc38:	54cc      	strb	r4, [r1, r3]
				CMD_CurrentPos++;
 801bc3a:	3301      	adds	r3, #1
 801bc3c:	e7f8      	b.n	801bc30 <CMD_RxCpltCallback+0x4c>
 801bc3e:	bf00      	nop
 801bc40:	200081fc 	.word	0x200081fc
 801bc44:	20008190 	.word	0x20008190
 801bc48:	20008250 	.word	0x20008250
 801bc4c:	20008248 	.word	0x20008248
 801bc50:	2000824c 	.word	0x2000824c
 801bc54:	20008254 	.word	0x20008254

0801bc58 <CMD_print_help>:
/**
 * @brief display component help
 * @param  label   component description
 * @retval -
 */
void CMD_print_help(uint8_t *label) {
 801bc58:	b510      	push	{r4, lr}
	PRINT_FORCE("***** %s help *****\r\n", label);
 801bc5a:	4c0c      	ldr	r4, [pc, #48]	; (801bc8c <CMD_print_help+0x34>)
 801bc5c:	490c      	ldr	r1, [pc, #48]	; (801bc90 <CMD_print_help+0x38>)
void CMD_print_help(uint8_t *label) {
 801bc5e:	4602      	mov	r2, r0
	PRINT_FORCE("***** %s help *****\r\n", label);
 801bc60:	4620      	mov	r0, r4
 801bc62:	f001 f929 	bl	801ceb8 <sprintf>
 801bc66:	4620      	mov	r0, r4
 801bc68:	f7fc f964 	bl	8017f34 <crs_strlen>
 801bc6c:	4622      	mov	r2, r4
 801bc6e:	b283      	uxth	r3, r0
 801bc70:	2101      	movs	r1, #1
 801bc72:	2005      	movs	r0, #5
 801bc74:	f7fc f99c 	bl	8017fb0 <traceIF_itmPrint>
 801bc78:	4620      	mov	r0, r4
 801bc7a:	f7fc f95b 	bl	8017f34 <crs_strlen>
 801bc7e:	4621      	mov	r1, r4
 801bc80:	b282      	uxth	r2, r0
}
 801bc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PRINT_FORCE("***** %s help *****\r\n", label);
 801bc86:	2005      	movs	r0, #5
 801bc88:	f7fc bbd2 	b.w	8018430 <traceIF_uartPrintForce>
 801bc8c:	200092f8 	.word	0x200092f8
 801bc90:	0802c4a3 	.word	0x0802c4a3

0801bc94 <CMD_init>:
 * @retval -
 */
void CMD_init(void) {
	static osThreadId CMD_ThreadId;

	CMD_NbCmd = 0U;
 801bc94:	4b1a      	ldr	r3, [pc, #104]	; (801bd00 <CMD_init+0x6c>)

	CMD_CommandLine[0][0] = 0;
	CMD_CommandLine[1][0] = 0;
	CMD_current_rcv_line = CMD_CommandLine[0];
 801bc96:	4a1b      	ldr	r2, [pc, #108]	; (801bd04 <CMD_init+0x70>)
void CMD_init(void) {
 801bc98:	b513      	push	{r0, r1, r4, lr}
	CMD_NbCmd = 0U;
 801bc9a:	2400      	movs	r4, #0
 801bc9c:	601c      	str	r4, [r3, #0]
	CMD_CommandLine[0][0] = 0;
 801bc9e:	4b1a      	ldr	r3, [pc, #104]	; (801bd08 <CMD_init+0x74>)
	CMD_current_rcv_line = CMD_CommandLine[0];
 801bca0:	6013      	str	r3, [r2, #0]
	CMD_current_cmd = CMD_CommandLine[1];
 801bca2:	4a1a      	ldr	r2, [pc, #104]	; (801bd0c <CMD_init+0x78>)
	CMD_CommandLine[0][0] = 0;
 801bca4:	701c      	strb	r4, [r3, #0]
	CMD_CommandLine[1][0] = 0;
 801bca6:	f883 4064 	strb.w	r4, [r3, #100]	; 0x64
	CMD_current_cmd = CMD_CommandLine[1];
 801bcaa:	3364      	adds	r3, #100	; 0x64
 801bcac:	6013      	str	r3, [r2, #0]
	CMD_completed_line = CMD_CommandLine[1];
 801bcae:	4a18      	ldr	r2, [pc, #96]	; (801bd10 <CMD_init+0x7c>)
	CMD_CurrentPos = 0;

	CMD_Declare((uint8_t*) "help", CMD_Help, (uint8_t*) "help command");
 801bcb0:	4918      	ldr	r1, [pc, #96]	; (801bd14 <CMD_init+0x80>)
	CMD_completed_line = CMD_CommandLine[1];
 801bcb2:	6013      	str	r3, [r2, #0]
	CMD_CurrentPos = 0;
 801bcb4:	4b18      	ldr	r3, [pc, #96]	; (801bd18 <CMD_init+0x84>)
	CMD_Declare((uint8_t*) "help", CMD_Help, (uint8_t*) "help command");
 801bcb6:	4a19      	ldr	r2, [pc, #100]	; (801bd1c <CMD_init+0x88>)
 801bcb8:	4819      	ldr	r0, [pc, #100]	; (801bd20 <CMD_init+0x8c>)
	CMD_CurrentPos = 0;
 801bcba:	601c      	str	r4, [r3, #0]
	CMD_Declare((uint8_t*) "help", CMD_Help, (uint8_t*) "help command");
 801bcbc:	f7ff ff78 	bl	801bbb0 <CMD_Declare>

	CMD_LastCommandLine[0] = 0;
 801bcc0:	4b18      	ldr	r3, [pc, #96]	; (801bd24 <CMD_init+0x90>)

	CMD_rcvSemaphore = rtosalSemaphoreNew(NULL, 1);
 801bcc2:	2101      	movs	r1, #1
 801bcc4:	4620      	mov	r0, r4
	CMD_LastCommandLine[0] = 0;
 801bcc6:	701c      	strb	r4, [r3, #0]
	CMD_rcvSemaphore = rtosalSemaphoreNew(NULL, 1);
 801bcc8:	f7fc f86b 	bl	8017da2 <rtosalSemaphoreNew>
 801bccc:	4b16      	ldr	r3, [pc, #88]	; (801bd28 <CMD_init+0x94>)
	(void) rtosalSemaphoreAcquire(CMD_rcvSemaphore, RTOSAL_WAIT_FOREVER);
 801bcce:	f04f 31ff 	mov.w	r1, #4294967295
	CMD_rcvSemaphore = rtosalSemaphoreNew(NULL, 1);
 801bcd2:	6018      	str	r0, [r3, #0]
	(void) rtosalSemaphoreAcquire(CMD_rcvSemaphore, RTOSAL_WAIT_FOREVER);
 801bcd4:	f7fc f86e 	bl	8017db4 <rtosalSemaphoreAcquire>

	CMD_ThreadId = rtosalThreadNew((const rtosal_char_t*) "Cmd", CMD_thread,
 801bcd8:	4914      	ldr	r1, [pc, #80]	; (801bd2c <CMD_init+0x98>)
 801bcda:	4815      	ldr	r0, [pc, #84]	; (801bd30 <CMD_init+0x9c>)
 801bcdc:	9400      	str	r4, [sp, #0]
 801bcde:	f44f 7316 	mov.w	r3, #600	; 0x258
 801bce2:	f04f 32ff 	mov.w	r2, #4294967295
 801bce6:	f7fc f84d 	bl	8017d84 <rtosalThreadNew>
			CMD_THREAD_PRIO, CMD_THREAD_STACK_SIZE,
			NULL);
	if (CMD_ThreadId == NULL) {
 801bcea:	b938      	cbnz	r0, 801bcfc <CMD_init+0x68>
		ERROR_Handler(DBG_CHAN_UTILITIES, 2, ERROR_FATAL);
 801bcec:	2203      	movs	r2, #3
 801bcee:	2102      	movs	r1, #2
 801bcf0:	2005      	movs	r0, #5
	}
}
 801bcf2:	b002      	add	sp, #8
 801bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ERROR_Handler(DBG_CHAN_UTILITIES, 2, ERROR_FATAL);
 801bcf8:	f7fb bb20 	b.w	801733c <ERROR_Handler>
}
 801bcfc:	b002      	add	sp, #8
 801bcfe:	bd10      	pop	{r4, pc}
 801bd00:	200081f8 	.word	0x200081f8
 801bd04:	20008250 	.word	0x20008250
 801bd08:	200080c8 	.word	0x200080c8
 801bd0c:	2000824c 	.word	0x2000824c
 801bd10:	20008248 	.word	0x20008248
 801bd14:	0801b581 	.word	0x0801b581
 801bd18:	20008190 	.word	0x20008190
 801bd1c:	0802c4b9 	.word	0x0802c4b9
 801bd20:	08028e1c 	.word	0x08028e1c
 801bd24:	20008194 	.word	0x20008194
 801bd28:	20008254 	.word	0x20008254
 801bd2c:	0801b951 	.word	0x0801b951
 801bd30:	0802c4c6 	.word	0x0802c4c6

0801bd34 <CMD_start>:
/**
 * @brief  module start
 * @param  -
 * @retval -
 */
void CMD_start(void) {
 801bd34:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef ret;

	CMD_CommandLine[0][0] = 0;
 801bd36:	4b09      	ldr	r3, [pc, #36]	; (801bd5c <CMD_start+0x28>)
	CMD_CommandLine[1][0] = 0;

	for (;;) {
		ret = HAL_UART_Receive_IT(&TRACE_INTERFACE_UART_HANDLE,
 801bd38:	4c09      	ldr	r4, [pc, #36]	; (801bd60 <CMD_start+0x2c>)
 801bd3a:	4d0a      	ldr	r5, [pc, #40]	; (801bd64 <CMD_start+0x30>)
	CMD_CommandLine[0][0] = 0;
 801bd3c:	2200      	movs	r2, #0
 801bd3e:	701a      	strb	r2, [r3, #0]
	CMD_CommandLine[1][0] = 0;
 801bd40:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		ret = HAL_UART_Receive_IT(&TRACE_INTERFACE_UART_HANDLE,
 801bd44:	2201      	movs	r2, #1
 801bd46:	4621      	mov	r1, r4
 801bd48:	4628      	mov	r0, r5
 801bd4a:	f7eb f99d 	bl	8007088 <HAL_UART_Receive_IT>
				&CMD_ReceivedChar, 1U);
		if (ret == HAL_OK) {
 801bd4e:	b118      	cbz	r0, 801bd58 <CMD_start+0x24>
			break;
		}
		(void) rtosalDelay(10);
 801bd50:	200a      	movs	r0, #10
 801bd52:	f7fc f86c 	bl	8017e2e <rtosalDelay>
		ret = HAL_UART_Receive_IT(&TRACE_INTERFACE_UART_HANDLE,
 801bd56:	e7f5      	b.n	801bd44 <CMD_start+0x10>
	}
}
 801bd58:	bd38      	pop	{r3, r4, r5, pc}
 801bd5a:	bf00      	nop
 801bd5c:	200080c8 	.word	0x200080c8
 801bd60:	200081fc 	.word	0x200081fc
 801bd64:	20008614 	.word	0x20008614

0801bd68 <MX_FREERTOS_Init>:
/* Private function Definition -----------------------------------------------*/

/* Functions Definition ------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void) {
 801bd68:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Init */

	/* Application components statical init  */
	application_init();
 801bd6a:	f000 f855 	bl	801be18 <application_init>
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */
}
 801bd6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	application_start();
 801bd72:	f000 b88b 	b.w	801be8c <application_start>
	...

0801bd78 <cellular_app_ip_info_cb>:
                                    void *const p_callback_ctx)
{
  UNUSED(p_callback_ctx);

  /* Event to know Modem status ? */
  if ((event_type == CA_IP_INFO_EVENT)  && (p_ip_info != NULL))
 801bd78:	2805      	cmp	r0, #5
{
 801bd7a:	b538      	push	{r3, r4, r5, lr}
  if ((event_type == CA_IP_INFO_EVENT)  && (p_ip_info != NULL))
 801bd7c:	d13e      	bne.n	801bdfc <cellular_app_ip_info_cb+0x84>
 801bd7e:	2900      	cmp	r1, #0
 801bd80:	d03c      	beq.n	801bdfc <cellular_app_ip_info_cb+0x84>
  {
    /* If IP address is not null then it means Data is ready */
    if (p_ip_info->ip_addr.addr != 0U)
 801bd82:	4c1f      	ldr	r4, [pc, #124]	; (801be00 <cellular_app_ip_info_cb+0x88>)
 801bd84:	680d      	ldr	r5, [r1, #0]
 801bd86:	7823      	ldrb	r3, [r4, #0]
 801bd88:	b1fd      	cbz	r5, 801bdca <cellular_app_ip_info_cb+0x52>
    {
      /* Data is ready */
      if (cellular_app_is_data_ready() == false)
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d136      	bne.n	801bdfc <cellular_app_ip_info_cb+0x84>
      {
        /* Modem is ready */
        PRINT_FORCE("%s: Modem ready to transmit data", p_cellular_app_trace)
 801bd8e:	4b1d      	ldr	r3, [pc, #116]	; (801be04 <cellular_app_ip_info_cb+0x8c>)
 801bd90:	491d      	ldr	r1, [pc, #116]	; (801be08 <cellular_app_ip_info_cb+0x90>)
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	481d      	ldr	r0, [pc, #116]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bd96:	f001 f88f 	bl	801ceb8 <sprintf>
 801bd9a:	481c      	ldr	r0, [pc, #112]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bd9c:	f7fc f8ca 	bl	8017f34 <crs_strlen>
 801bda0:	4a1a      	ldr	r2, [pc, #104]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bda2:	b283      	uxth	r3, r0
 801bda4:	2101      	movs	r1, #1
 801bda6:	2007      	movs	r0, #7
 801bda8:	f7fc f902 	bl	8017fb0 <traceIF_itmPrint>
 801bdac:	4817      	ldr	r0, [pc, #92]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdae:	f7fc f8c1 	bl	8017f34 <crs_strlen>
 801bdb2:	4916      	ldr	r1, [pc, #88]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdb4:	b282      	uxth	r2, r0
 801bdb6:	2007      	movs	r0, #7
 801bdb8:	f7fc fb3a 	bl	8018430 <traceIF_uartPrintForce>
        cellular_app_data_is_ready = true;
 801bdbc:	2301      	movs	r3, #1
 801bdbe:	7023      	strb	r3, [r4, #0]

  /* if (event_type == CA_IP_INFO_EVENT) */
  SET_CELLULAR_APP_MSG_TYPE(queue_msg, CELLULAR_APP_PROCESS_MSG);
  SET_CELLULAR_APP_MSG_ID(queue_msg, CELLULAR_APP_MODEM_CHANGE_ID);
#if (USE_SENSORS == 1)
  (void)cellular_app_sensorsclient_send_msg(queue_msg);
 801bdc0:	4813      	ldr	r0, [pc, #76]	; (801be10 <cellular_app_ip_info_cb+0x98>)
}
 801bdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  (void)cellular_app_sensorsclient_send_msg(queue_msg);
 801bdc6:	f000 ba83 	b.w	801c2d0 <cellular_app_sensorsclient_send_msg>
      if (cellular_app_is_data_ready() == true)
 801bdca:	b1bb      	cbz	r3, 801bdfc <cellular_app_ip_info_cb+0x84>
        PRINT_FORCE("%s: Modem NOT ready to transmit data!", p_cellular_app_trace)
 801bdcc:	4b0d      	ldr	r3, [pc, #52]	; (801be04 <cellular_app_ip_info_cb+0x8c>)
 801bdce:	4911      	ldr	r1, [pc, #68]	; (801be14 <cellular_app_ip_info_cb+0x9c>)
 801bdd0:	681a      	ldr	r2, [r3, #0]
 801bdd2:	480e      	ldr	r0, [pc, #56]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdd4:	f001 f870 	bl	801ceb8 <sprintf>
 801bdd8:	480c      	ldr	r0, [pc, #48]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdda:	f7fc f8ab 	bl	8017f34 <crs_strlen>
 801bdde:	4a0b      	ldr	r2, [pc, #44]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bde0:	b283      	uxth	r3, r0
 801bde2:	2101      	movs	r1, #1
 801bde4:	2007      	movs	r0, #7
 801bde6:	f7fc f8e3 	bl	8017fb0 <traceIF_itmPrint>
 801bdea:	4808      	ldr	r0, [pc, #32]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdec:	f7fc f8a2 	bl	8017f34 <crs_strlen>
 801bdf0:	4906      	ldr	r1, [pc, #24]	; (801be0c <cellular_app_ip_info_cb+0x94>)
 801bdf2:	b282      	uxth	r2, r0
 801bdf4:	2007      	movs	r0, #7
 801bdf6:	f7fc fb1b 	bl	8018430 <traceIF_uartPrintForce>
        cellular_app_data_is_ready = false;
 801bdfa:	7025      	strb	r5, [r4, #0]
}
 801bdfc:	bd38      	pop	{r3, r4, r5, pc}
 801bdfe:	bf00      	nop
 801be00:	20008258 	.word	0x20008258
 801be04:	2000825c 	.word	0x2000825c
 801be08:	0802c4ca 	.word	0x0802c4ca
 801be0c:	200094f8 	.word	0x200094f8
 801be10:	01010000 	.word	0x01010000
 801be14:	0802c4ed 	.word	0x0802c4ed

0801be18 <application_init>:
  */
void application_init(void)
{
  /**** BEGIN Cellular Application initialization ****/
  /* Initialize trace shortcut */
  p_cellular_app_trace = cellular_app_type_string[CELLULAR_APP_TYPE_CELLULARAPP];
 801be18:	4b15      	ldr	r3, [pc, #84]	; (801be70 <application_init+0x58>)
 801be1a:	681a      	ldr	r2, [r3, #0]
 801be1c:	4b15      	ldr	r3, [pc, #84]	; (801be74 <application_init+0x5c>)
{
 801be1e:	b510      	push	{r4, lr}
  p_cellular_app_trace = cellular_app_type_string[CELLULAR_APP_TYPE_CELLULARAPP];
 801be20:	601a      	str	r2, [r3, #0]

  /* Initialize data ready status to false */
  cellular_app_data_is_ready = false;
 801be22:	4b15      	ldr	r3, [pc, #84]	; (801be78 <application_init+0x60>)
#if defined(USE_COM_MDM)
  com_err_t com_err;
  currentHandle = orp_open();
  com_err = orp_subscribe_event(currentHandle,orp_callback);
  //com_err = com_mdm_subscribe_event(currentHandle, application_callback);
  PRINT_FORCE("Subscription to ORP callback handler returned %ld",com_err)
 801be24:	4c15      	ldr	r4, [pc, #84]	; (801be7c <application_init+0x64>)
  cellular_app_data_is_ready = false;
 801be26:	2200      	movs	r2, #0
 801be28:	701a      	strb	r2, [r3, #0]
  cellular_app_sensorsclient_init();
 801be2a:	f000 fa83 	bl	801c334 <cellular_app_sensorsclient_init>
  cellular_init();
 801be2e:	f7fd f995 	bl	801915c <cellular_init>
  currentHandle = orp_open();
 801be32:	f7ff fa73 	bl	801b31c <orp_open>
 801be36:	4b12      	ldr	r3, [pc, #72]	; (801be80 <application_init+0x68>)
  com_err = orp_subscribe_event(currentHandle,orp_callback);
 801be38:	4912      	ldr	r1, [pc, #72]	; (801be84 <application_init+0x6c>)
  currentHandle = orp_open();
 801be3a:	7018      	strb	r0, [r3, #0]
  com_err = orp_subscribe_event(currentHandle,orp_callback);
 801be3c:	f7ff fa70 	bl	801b320 <orp_subscribe_event>
  PRINT_FORCE("Subscription to ORP callback handler returned %ld",com_err)
 801be40:	4911      	ldr	r1, [pc, #68]	; (801be88 <application_init+0x70>)
  com_err = orp_subscribe_event(currentHandle,orp_callback);
 801be42:	4602      	mov	r2, r0
  PRINT_FORCE("Subscription to ORP callback handler returned %ld",com_err)
 801be44:	4620      	mov	r0, r4
 801be46:	f001 f837 	bl	801ceb8 <sprintf>
 801be4a:	4620      	mov	r0, r4
 801be4c:	f7fc f872 	bl	8017f34 <crs_strlen>
 801be50:	4622      	mov	r2, r4
 801be52:	b283      	uxth	r3, r0
 801be54:	2101      	movs	r1, #1
 801be56:	2007      	movs	r0, #7
 801be58:	f7fc f8aa 	bl	8017fb0 <traceIF_itmPrint>
 801be5c:	4620      	mov	r0, r4
 801be5e:	f7fc f869 	bl	8017f34 <crs_strlen>
 801be62:	4621      	mov	r1, r4
 801be64:	b282      	uxth	r2, r0
#endif /* defined(USE_COM_MDM) */
}
 801be66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  PRINT_FORCE("Subscription to ORP callback handler returned %ld",com_err)
 801be6a:	2007      	movs	r0, #7
 801be6c:	f7fc bae0 	b.w	8018430 <traceIF_uartPrintForce>
 801be70:	20000618 	.word	0x20000618
 801be74:	2000825c 	.word	0x2000825c
 801be78:	20008258 	.word	0x20008258
 801be7c:	200094f8 	.word	0x200094f8
 801be80:	200098fa 	.word	0x200098fa
 801be84:	0801c511 	.word	0x0801c511
 801be88:	0802c515 	.word	0x0802c515

0801be8c <application_start>:
  * @brief  Start all threads needed to activate CellularApp features and call Cellular start
  * @param  -
  * @retval -
  */
void application_start(void)
{
 801be8c:	b508      	push	{r3, lr}
  /**** BEGIN Cellular Application start ****/
  /* Cellular initialization already done - Registration to services is OK */
  /* Registration to Cellular: only needs to know when IP is obtained */
  if (cellular_ip_info_cb_registration(cellular_app_ip_info_cb, (void *) NULL) != CELLULAR_SUCCESS)
 801be8e:	4808      	ldr	r0, [pc, #32]	; (801beb0 <application_start+0x24>)
 801be90:	2100      	movs	r1, #0
 801be92:	f7fd fa17 	bl	80192c4 <cellular_ip_info_cb_registration>
 801be96:	b120      	cbz	r0, 801bea2 <application_start+0x16>
  {
    CELLULAR_APP_ERROR(CELLULAR_APP_ERROR_CELLULARAPP, ERROR_FATAL)
 801be98:	2203      	movs	r2, #3
 801be9a:	210a      	movs	r1, #10
 801be9c:	2007      	movs	r0, #7
 801be9e:	f7fb fa4d 	bl	801733c <ERROR_Handler>
  }

#if (USE_SENSORS == 1)
  /* SensorsClt start */
  cellular_app_sensorsclient_start();
 801bea2:	f000 fa83 	bl	801c3ac <cellular_app_sensorsclient_start>

  /**** BEGIN Cellular start ****/
  cellular_start();
  /**** END   Cellular start ****/

}
 801bea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cellular_start();
 801beaa:	f7fd b993 	b.w	80191d4 <cellular_start>
 801beae:	bf00      	nop
 801beb0:	0801bd79 	.word	0x0801bd79

0801beb4 <cellular_app_sensors_initialize>:
/**
  * @brief  Initialize a sensor
  * @retval bool - false/true - sensor init NOK / sensor init OK
  */
bool cellular_app_sensors_initialize(cellular_app_sensor_type_t type)
{
 801beb4:	b510      	push	{r4, lr}
 801beb6:	4604      	mov	r4, r0
 801beb8:	2803      	cmp	r0, #3
 801beba:	d814      	bhi.n	801bee6 <cellular_app_sensors_initialize+0x32>
 801bebc:	e8df f000 	tbb	[pc, r0]
 801bec0:	100d0a02 	.word	0x100d0a02
  bool result = false;

  switch (type)
  {
    case CELLULAR_APP_SENSOR_TYPE_HUMIDITY :
      if(BSP_HSENSOR_Init() == 0)
 801bec4:	f7e5 fc5a 	bl	800177c <BSP_HSENSOR_Init>
      break;
  }

  if (type < CELLULAR_APP_SENSOR_TYPE_MAX)
  {
    cellular_app_sensor[type].status = result;
 801bec8:	4b08      	ldr	r3, [pc, #32]	; (801beec <cellular_app_sensors_initialize+0x38>)
      if (BSP_ACCELERO_Init() == 0)
 801beca:	fab0 f080 	clz	r0, r0
 801bece:	0940      	lsrs	r0, r0, #5
    cellular_app_sensor[type].status = result;
 801bed0:	5518      	strb	r0, [r3, r4]
  }

  return (result);
}
 801bed2:	bd10      	pop	{r4, pc}
      if (BSP_PSENSOR_Init() == 0)
 801bed4:	f7e5 fc6e 	bl	80017b4 <BSP_PSENSOR_Init>
 801bed8:	e7f6      	b.n	801bec8 <cellular_app_sensors_initialize+0x14>
      if (BSP_TSENSOR_Init() == 0)
 801beda:	f7e5 fc87 	bl	80017ec <BSP_TSENSOR_Init>
 801bede:	e7f3      	b.n	801bec8 <cellular_app_sensors_initialize+0x14>
      if (BSP_ACCELERO_Init() == 0)
 801bee0:	f7e5 fc2e 	bl	8001740 <BSP_ACCELERO_Init>
 801bee4:	e7f0      	b.n	801bec8 <cellular_app_sensors_initialize+0x14>
      __NOP(); /* result already set to false */
 801bee6:	bf00      	nop
  bool result = false;
 801bee8:	2000      	movs	r0, #0
 801beea:	e7f2      	b.n	801bed2 <cellular_app_sensors_initialize+0x1e>
 801beec:	20008260 	.word	0x20008260

0801bef0 <cellular_app_sensors_read>:
  * @brief  Read a sensor
  * @retval bool - false/true - sensor read NOK/ sensor read OK
  */
bool cellular_app_sensors_read(cellular_app_sensor_type_t type,
                               cellular_app_sensors_data_t *const p_data)
{
 801bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  bool result = false;

  if (p_data != NULL)
 801bef2:	460d      	mov	r5, r1
 801bef4:	2900      	cmp	r1, #0
 801bef6:	d031      	beq.n	801bf5c <cellular_app_sensors_read+0x6c>
  {
    switch (type)
 801bef8:	2803      	cmp	r0, #3
 801befa:	d82c      	bhi.n	801bf56 <cellular_app_sensors_read+0x66>
 801befc:	e8df f000 	tbb	[pc, r0]
 801bf00:	1a13020c 	.word	0x1a13020c
    {
      case CELLULAR_APP_SENSOR_TYPE_PRESSURE :
        if (cellular_app_sensor[CELLULAR_APP_SENSOR_TYPE_HUMIDITY].status == true)
 801bf04:	4b16      	ldr	r3, [pc, #88]	; (801bf60 <cellular_app_sensors_read+0x70>)
 801bf06:	781c      	ldrb	r4, [r3, #0]
 801bf08:	b11c      	cbz	r4, 801bf12 <cellular_app_sensors_read+0x22>
        {
          p_data->float_data = BSP_PSENSOR_ReadPressure();
 801bf0a:	f7e5 fc67 	bl	80017dc <BSP_PSENSOR_ReadPressure>
        }
        break;
      case CELLULAR_APP_SENSOR_TYPE_HUMIDITY :
        if (cellular_app_sensor[CELLULAR_APP_SENSOR_TYPE_PRESSURE].status == true)
        {
          p_data->float_data = BSP_HSENSOR_ReadHumidity();
 801bf0e:	ed85 0a02 	vstr	s0, [r5, #8]
        break;
    }
  }

  return (result);
}
 801bf12:	4620      	mov	r0, r4
 801bf14:	b003      	add	sp, #12
 801bf16:	bd30      	pop	{r4, r5, pc}
        if (cellular_app_sensor[CELLULAR_APP_SENSOR_TYPE_PRESSURE].status == true)
 801bf18:	4b11      	ldr	r3, [pc, #68]	; (801bf60 <cellular_app_sensors_read+0x70>)
 801bf1a:	785c      	ldrb	r4, [r3, #1]
 801bf1c:	2c00      	cmp	r4, #0
 801bf1e:	d0f8      	beq.n	801bf12 <cellular_app_sensors_read+0x22>
          p_data->float_data = BSP_HSENSOR_ReadHumidity();
 801bf20:	f7e5 fc40 	bl	80017a4 <BSP_HSENSOR_ReadHumidity>
 801bf24:	e7f3      	b.n	801bf0e <cellular_app_sensors_read+0x1e>
        if (cellular_app_sensor[CELLULAR_APP_SENSOR_TYPE_TEMPERATURE].status == true)
 801bf26:	4b0e      	ldr	r3, [pc, #56]	; (801bf60 <cellular_app_sensors_read+0x70>)
 801bf28:	789c      	ldrb	r4, [r3, #2]
 801bf2a:	2c00      	cmp	r4, #0
 801bf2c:	d0f1      	beq.n	801bf12 <cellular_app_sensors_read+0x22>
          p_data->float_data = BSP_TSENSOR_ReadTemp();
 801bf2e:	f7e5 fc6f 	bl	8001810 <BSP_TSENSOR_ReadTemp>
 801bf32:	e7ec      	b.n	801bf0e <cellular_app_sensors_read+0x1e>
    	if (cellular_app_sensor[CELLULAR_APP_SENSOR_TYPE_ACCELEROMETER].status == true)
 801bf34:	4b0a      	ldr	r3, [pc, #40]	; (801bf60 <cellular_app_sensors_read+0x70>)
 801bf36:	78dc      	ldrb	r4, [r3, #3]
 801bf38:	2c00      	cmp	r4, #0
 801bf3a:	d0ea      	beq.n	801bf12 <cellular_app_sensors_read+0x22>
          int16_t ACC_Value[3]={0};
 801bf3c:	2300      	movs	r3, #0
    	  BSP_ACCELERO_AccGetXYZ(ACC_Value);
 801bf3e:	4668      	mov	r0, sp
          int16_t ACC_Value[3]={0};
 801bf40:	9300      	str	r3, [sp, #0]
 801bf42:	f8ad 3004 	strh.w	r3, [sp, #4]
    	  BSP_ACCELERO_AccGetXYZ(ACC_Value);
 801bf46:	f7e5 fc0f 	bl	8001768 <BSP_ACCELERO_AccGetXYZ>
    	  p_data->AXIS_Z  = ACC_Value[2];
 801bf4a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    	  p_data->AXIS_X  = ACC_Value[0];
 801bf4e:	9a00      	ldr	r2, [sp, #0]
 801bf50:	602a      	str	r2, [r5, #0]
    	  p_data->AXIS_Z  = ACC_Value[2];
 801bf52:	80ab      	strh	r3, [r5, #4]
    	  result = true;
 801bf54:	e7dd      	b.n	801bf12 <cellular_app_sensors_read+0x22>
        __NOP(); /* result already set to false */
 801bf56:	bf00      	nop
  bool result = false;
 801bf58:	2400      	movs	r4, #0
        break;
 801bf5a:	e7da      	b.n	801bf12 <cellular_app_sensors_read+0x22>
  bool result = false;
 801bf5c:	460c      	mov	r4, r1
 801bf5e:	e7d8      	b.n	801bf12 <cellular_app_sensors_read+0x22>
 801bf60:	20008260 	.word	0x20008260

0801bf64 <cellular_app_sensors_init>:
  */
void cellular_app_sensors_init(void)
{
  for (uint8_t i = 0; i < CELLULAR_APP_SENSOR_TYPE_MAX; i++)
  {
    cellular_app_sensor[i].status = false;
 801bf64:	4b03      	ldr	r3, [pc, #12]	; (801bf74 <cellular_app_sensors_init+0x10>)
 801bf66:	2200      	movs	r2, #0
 801bf68:	701a      	strb	r2, [r3, #0]
 801bf6a:	705a      	strb	r2, [r3, #1]
 801bf6c:	709a      	strb	r2, [r3, #2]
 801bf6e:	70da      	strb	r2, [r3, #3]
  }
}
 801bf70:	4770      	bx	lr
 801bf72:	bf00      	nop
 801bf74:	20008260 	.word	0x20008260

0801bf78 <sensorsclient_update_cellular_info>:
/**
  * @brief  Update status according to new cellular info received
  * @retval -
  */
static void sensorsclient_update_cellular_info(void)
{
 801bf78:	b570      	push	{r4, r5, r6, lr}
 801bf7a:	b0da      	sub	sp, #360	; 0x168

  cellular_sim_info_t sensors_sim_info;
  cellular_info_t     sensors_cellular_info;

  /* Read SIM information */
  cellular_get_sim_info(&sensors_sim_info);
 801bf7c:	a802      	add	r0, sp, #8
 801bf7e:	f7fd f983 	bl	8019288 <cellular_get_sim_info>

  /* Read Cellular information to know modem state */
  cellular_get_cellular_info(&sensors_cellular_info);
 801bf82:	a827      	add	r0, sp, #156	; 0x9c
 801bf84:	f7fd f978 	bl	8019278 <cellular_get_cellular_info>

  /* [eSIM|SIM |    ] */
  if (sensors_sim_info.sim_status[sensors_sim_info.sim_index] == CA_SIM_READY)
 801bf88:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801bf8c:	aa02      	add	r2, sp, #8
 801bf8e:	4413      	add	r3, r2
 801bf90:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801bf94:	b9f2      	cbnz	r2, 801bfd4 <sensorsclient_update_cellular_info+0x5c>
  {
    /* ToDo: Make the difference between SIM and eSIM */
    switch (sensors_sim_info.sim_slot_type[sensors_sim_info.sim_index])
 801bf96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801bf9a:	b1eb      	cbz	r3, 801bfd8 <sensorsclient_update_cellular_info+0x60>
      case CA_SIM_EXTERNAL_MODEM_SLOT :
      case CA_SIM_INTERNAL_MODEM_SLOT :
        p_string1 = sim_string[2];
        break;
      default :
        p_string1 = sim_string[0];
 801bf9c:	4e79      	ldr	r6, [pc, #484]	; (801c184 <sensorsclient_update_cellular_info+0x20c>)
 801bf9e:	4a7a      	ldr	r2, [pc, #488]	; (801c188 <sensorsclient_update_cellular_info+0x210>)
    switch (sensors_sim_info.sim_slot_type[sensors_sim_info.sim_index])
 801bfa0:	3b01      	subs	r3, #1
        p_string1 = sim_string[0];
 801bfa2:	2b01      	cmp	r3, #1
 801bfa4:	bf88      	it	hi
 801bfa6:	4616      	movhi	r6, r2
  {
    p_string1 = sim_string[0];
  }

  /* [State] */
  switch (sensors_cellular_info.modem_state)
 801bfa8:	f89d 309d 	ldrb.w	r3, [sp, #157]	; 0x9d
 801bfac:	4d77      	ldr	r5, [pc, #476]	; (801c18c <sensorsclient_update_cellular_info+0x214>)
 801bfae:	2b08      	cmp	r3, #8
 801bfb0:	f200 80a7 	bhi.w	801c102 <sensorsclient_update_cellular_info+0x18a>
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	f000 80a6 	beq.w	801c106 <sensorsclient_update_cellular_info+0x18e>
 801bfba:	3b02      	subs	r3, #2
 801bfbc:	2b06      	cmp	r3, #6
 801bfbe:	f200 80c8 	bhi.w	801c152 <sensorsclient_update_cellular_info+0x1da>
 801bfc2:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bfc6:	000b      	.short	0x000b
 801bfc8:	00bb00b9 	.word	0x00bb00b9
 801bfcc:	00bf00bd 	.word	0x00bf00bd
 801bfd0:	00c400c1 	.word	0x00c400c1
    p_string1 = sim_string[0];
 801bfd4:	4e6c      	ldr	r6, [pc, #432]	; (801c188 <sensorsclient_update_cellular_info+0x210>)
 801bfd6:	e7e7      	b.n	801bfa8 <sensorsclient_update_cellular_info+0x30>
        p_string1 = sim_string[1];
 801bfd8:	4e6d      	ldr	r6, [pc, #436]	; (801c190 <sensorsclient_update_cellular_info+0x218>)
 801bfda:	e7e5      	b.n	801bfa8 <sensorsclient_update_cellular_info+0x30>
  switch (sensors_cellular_info.modem_state)
 801bfdc:	4b6d      	ldr	r3, [pc, #436]	; (801c194 <sensorsclient_update_cellular_info+0x21c>)
    case CA_MODEM_STATE_DATAREADY:
      sensors_timer = true;
      p_string2 = state_string[5];
      break;
    case CA_MODEM_IN_FLIGHTMODE:
      sensors_timer = true;
 801bfde:	2401      	movs	r4, #1
                 sensors_cellular_info.modem_state)
      break;
  }

  /* Display information about Sim and Modem status */
  PRINT_FORCE("%s: %s %s", p_cellular_app_sensorsclient_trace, p_string1, p_string2)
 801bfe0:	682a      	ldr	r2, [r5, #0]
 801bfe2:	496d      	ldr	r1, [pc, #436]	; (801c198 <sensorsclient_update_cellular_info+0x220>)
 801bfe4:	9300      	str	r3, [sp, #0]
 801bfe6:	486d      	ldr	r0, [pc, #436]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801bfe8:	4633      	mov	r3, r6
 801bfea:	f000 ff65 	bl	801ceb8 <sprintf>
 801bfee:	486b      	ldr	r0, [pc, #428]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801bff0:	4e6b      	ldr	r6, [pc, #428]	; (801c1a0 <sensorsclient_update_cellular_info+0x228>)
 801bff2:	f7fb ff9f 	bl	8017f34 <crs_strlen>
 801bff6:	4a69      	ldr	r2, [pc, #420]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801bff8:	b283      	uxth	r3, r0
 801bffa:	2101      	movs	r1, #1
 801bffc:	2007      	movs	r0, #7
 801bffe:	f7fb ffd7 	bl	8017fb0 <traceIF_itmPrint>
 801c002:	4866      	ldr	r0, [pc, #408]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c004:	f7fb ff96 	bl	8017f34 <crs_strlen>
 801c008:	4964      	ldr	r1, [pc, #400]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c00a:	b282      	uxth	r2, r0
 801c00c:	2007      	movs	r0, #7
 801c00e:	f7fc fa0f 	bl	8018430 <traceIF_uartPrintForce>

  /* Sensors timer start/stop management according to modem state */
  if (sensors_timer == true)
 801c012:	2c00      	cmp	r4, #0
 801c014:	f000 80a1 	beq.w	801c15a <sensorsclient_update_cellular_info+0x1e2>
  {
    /* Start periodical Sensors Timer only if not already started */
    if (cellular_app_sensorsclient_sensors_timer_state == CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE)
 801c018:	7834      	ldrb	r4, [r6, #0]
 801c01a:	2c01      	cmp	r4, #1
 801c01c:	d11f      	bne.n	801c05e <sensorsclient_update_cellular_info+0xe6>
    {
      if (rtosalTimerStart(cellular_app_sensorsclient_sensors_timer_id, SENSORSCLIENT_SENSORS_READ_TIMER) == osOK)
 801c01e:	4b61      	ldr	r3, [pc, #388]	; (801c1a4 <sensorsclient_update_cellular_info+0x22c>)
 801c020:	f241 3188 	movw	r1, #5000	; 0x1388
 801c024:	6818      	ldr	r0, [r3, #0]
 801c026:	f7fb fefe 	bl	8017e26 <rtosalTimerStart>
 801c02a:	b9c0      	cbnz	r0, 801c05e <sensorsclient_update_cellular_info+0xe6>
      {
        cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_RUN;
 801c02c:	2302      	movs	r3, #2
        PRINT_INFO("%s: Sensors timer started", p_cellular_app_sensorsclient_trace)
 801c02e:	682a      	ldr	r2, [r5, #0]
 801c030:	495d      	ldr	r1, [pc, #372]	; (801c1a8 <sensorsclient_update_cellular_info+0x230>)
        cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_RUN;
 801c032:	7033      	strb	r3, [r6, #0]
    if (cellular_app_sensorsclient_sensors_timer_state == CELLULAR_APP_SENSORSCLIENT_TIMER_RUN)
    {
      if (rtosalTimerStop(cellular_app_sensorsclient_sensors_timer_id) == osOK)
      {
        cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE;
        PRINT_INFO("%s: Sensors timer stopped", p_cellular_app_sensorsclient_trace)
 801c034:	4859      	ldr	r0, [pc, #356]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c036:	f000 ff3f 	bl	801ceb8 <sprintf>
 801c03a:	4858      	ldr	r0, [pc, #352]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c03c:	f7fb ff7a 	bl	8017f34 <crs_strlen>
 801c040:	4a56      	ldr	r2, [pc, #344]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c042:	b283      	uxth	r3, r0
 801c044:	4621      	mov	r1, r4
 801c046:	2007      	movs	r0, #7
 801c048:	f7fb ffb2 	bl	8017fb0 <traceIF_itmPrint>
 801c04c:	4853      	ldr	r0, [pc, #332]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c04e:	f7fb ff71 	bl	8017f34 <crs_strlen>
 801c052:	4a52      	ldr	r2, [pc, #328]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c054:	b283      	uxth	r3, r0
 801c056:	4621      	mov	r1, r4
 801c058:	2007      	movs	r0, #7
 801c05a:	f7fc f9cf 	bl	80183fc <traceIF_uartPrint>
    }
  }

  /* [Operator] */
  operator_name_length = sensors_cellular_info.mno_name.len;
  if (sensors_cellular_info.mno_name.value[0] == (uint8_t)'"')
 801c05e:	f89d 2141 	ldrb.w	r2, [sp, #321]	; 0x141
  operator_name_length = sensors_cellular_info.mno_name.len;
 801c062:	f89d 3140 	ldrb.w	r3, [sp, #320]	; 0x140
  if (sensors_cellular_info.mno_name.value[0] == (uint8_t)'"')
 801c066:	2a22      	cmp	r2, #34	; 0x22
  {
    operator_name_start = 1U;
    operator_name_length = operator_name_length - 2U; /* by-pass '"' at string begin and end */
 801c068:	bf06      	itte	eq
 801c06a:	3b02      	subeq	r3, #2
    operator_name_start = 1U;
 801c06c:	2201      	moveq	r2, #1
  }
  else
  {
    operator_name_start = 0U;
 801c06e:	2200      	movne	r2, #0
  }
  if (operator_name_length > 0U)
 801c070:	2b00      	cmp	r3, #0
 801c072:	f000 8082 	beq.w	801c17a <sensorsclient_update_cellular_info+0x202>
  {
    /* Point on mobile network mobile operator name */
    p_string1 = &sensors_cellular_info.mno_name.value[operator_name_start];
 801c076:	32a5      	adds	r2, #165	; 0xa5
 801c078:	a927      	add	r1, sp, #156	; 0x9c
 801c07a:	440a      	add	r2, r1
    p_string1 = operator_string[0];
    operator_name_length = 10U;
  }

  /* Display information about Operator status */
  PRINT_FORCE("%s: %.*s", p_cellular_app_sensorsclient_trace, (int16_t)operator_name_length, p_string1)
 801c07c:	494b      	ldr	r1, [pc, #300]	; (801c1ac <sensorsclient_update_cellular_info+0x234>)
 801c07e:	9200      	str	r2, [sp, #0]
 801c080:	4846      	ldr	r0, [pc, #280]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c082:	682a      	ldr	r2, [r5, #0]
 801c084:	f000 ff18 	bl	801ceb8 <sprintf>
 801c088:	4844      	ldr	r0, [pc, #272]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c08a:	f7fb ff53 	bl	8017f34 <crs_strlen>
 801c08e:	4a43      	ldr	r2, [pc, #268]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c090:	b283      	uxth	r3, r0
 801c092:	2101      	movs	r1, #1
 801c094:	2007      	movs	r0, #7
 801c096:	f7fb ff8b 	bl	8017fb0 <traceIF_itmPrint>
 801c09a:	4840      	ldr	r0, [pc, #256]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c09c:	f7fb ff4a 	bl	8017f34 <crs_strlen>
 801c0a0:	493e      	ldr	r1, [pc, #248]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0a2:	b282      	uxth	r2, r0
 801c0a4:	2007      	movs	r0, #7
 801c0a6:	f7fc f9c3 	bl	8018430 <traceIF_uartPrintForce>

  /* Is IP known ? */
  if (sensors_cellular_info.ip_addr.addr != 0U)
 801c0aa:	9a59      	ldr	r2, [sp, #356]	; 0x164
 801c0ac:	2a00      	cmp	r2, #0
 801c0ae:	d067      	beq.n	801c180 <sensorsclient_update_cellular_info+0x208>
  {
    p_string1 = ip_string[1];
    (void)sprintf((CRC_CHAR_t *)&cellular_app_sensorsclient_string[0], "%u.%u.%u.%u",
 801c0b0:	f89d 3167 	ldrb.w	r3, [sp, #359]	; 0x167
 801c0b4:	9301      	str	r3, [sp, #4]
 801c0b6:	f89d 3166 	ldrb.w	r3, [sp, #358]	; 0x166
 801c0ba:	f89d 2164 	ldrb.w	r2, [sp, #356]	; 0x164
 801c0be:	9300      	str	r3, [sp, #0]
 801c0c0:	493b      	ldr	r1, [pc, #236]	; (801c1b0 <sensorsclient_update_cellular_info+0x238>)
 801c0c2:	f89d 3165 	ldrb.w	r3, [sp, #357]	; 0x165
 801c0c6:	483b      	ldr	r0, [pc, #236]	; (801c1b4 <sensorsclient_update_cellular_info+0x23c>)
 801c0c8:	f000 fef6 	bl	801ceb8 <sprintf>
                  (uint8_t)(COM_IP4_ADDR1(&sensors_cellular_info.ip_addr)),
                  (uint8_t)(COM_IP4_ADDR2(&sensors_cellular_info.ip_addr)),
                  (uint8_t)(COM_IP4_ADDR3(&sensors_cellular_info.ip_addr)),
                  (uint8_t)(COM_IP4_ADDR4(&sensors_cellular_info.ip_addr)));
    p_string2 = cellular_app_sensorsclient_string;
 801c0cc:	4a39      	ldr	r2, [pc, #228]	; (801c1b4 <sensorsclient_update_cellular_info+0x23c>)
    p_string1 = ip_string[1];
 801c0ce:	4b3a      	ldr	r3, [pc, #232]	; (801c1b8 <sensorsclient_update_cellular_info+0x240>)
  else
  {
    p_string1 = ip_string[0];
    p_string2 = NULL;
  }
  PRINT_FORCE("%s: %s %s", p_cellular_app_sensorsclient_trace, p_string1, p_string2)
 801c0d0:	4931      	ldr	r1, [pc, #196]	; (801c198 <sensorsclient_update_cellular_info+0x220>)
 801c0d2:	9200      	str	r2, [sp, #0]
 801c0d4:	4831      	ldr	r0, [pc, #196]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0d6:	682a      	ldr	r2, [r5, #0]
 801c0d8:	f000 feee 	bl	801ceb8 <sprintf>
 801c0dc:	482f      	ldr	r0, [pc, #188]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0de:	f7fb ff29 	bl	8017f34 <crs_strlen>
 801c0e2:	4a2e      	ldr	r2, [pc, #184]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0e4:	b283      	uxth	r3, r0
 801c0e6:	2101      	movs	r1, #1
 801c0e8:	2007      	movs	r0, #7
 801c0ea:	f7fb ff61 	bl	8017fb0 <traceIF_itmPrint>
 801c0ee:	482b      	ldr	r0, [pc, #172]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0f0:	f7fb ff20 	bl	8017f34 <crs_strlen>
 801c0f4:	4929      	ldr	r1, [pc, #164]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c0f6:	b282      	uxth	r2, r0
 801c0f8:	2007      	movs	r0, #7
 801c0fa:	f7fc f999 	bl	8018430 <traceIF_uartPrintForce>
}
 801c0fe:	b05a      	add	sp, #360	; 0x168
 801c100:	bd70      	pop	{r4, r5, r6, pc}
  switch (sensors_cellular_info.modem_state)
 801c102:	2bff      	cmp	r3, #255	; 0xff
 801c104:	d027      	beq.n	801c156 <sensorsclient_update_cellular_info+0x1de>
      PRINT_INFO("%s: Modem state Unknown: %d!!!", p_cellular_app_sensorsclient_trace,
 801c106:	682a      	ldr	r2, [r5, #0]
 801c108:	492c      	ldr	r1, [pc, #176]	; (801c1bc <sensorsclient_update_cellular_info+0x244>)
 801c10a:	4824      	ldr	r0, [pc, #144]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c10c:	f000 fed4 	bl	801ceb8 <sprintf>
 801c110:	4822      	ldr	r0, [pc, #136]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c112:	f7fb ff0f 	bl	8017f34 <crs_strlen>
 801c116:	4a21      	ldr	r2, [pc, #132]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c118:	b283      	uxth	r3, r0
 801c11a:	2101      	movs	r1, #1
 801c11c:	2007      	movs	r0, #7
 801c11e:	f7fb ff47 	bl	8017fb0 <traceIF_itmPrint>
 801c122:	481e      	ldr	r0, [pc, #120]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c124:	f7fb ff06 	bl	8017f34 <crs_strlen>
 801c128:	4a1c      	ldr	r2, [pc, #112]	; (801c19c <sensorsclient_update_cellular_info+0x224>)
 801c12a:	b283      	uxth	r3, r0
 801c12c:	2101      	movs	r1, #1
 801c12e:	2007      	movs	r0, #7
 801c130:	f7fc f964 	bl	80183fc <traceIF_uartPrint>
      p_string2 = state_string[0];
 801c134:	4b22      	ldr	r3, [pc, #136]	; (801c1c0 <sensorsclient_update_cellular_info+0x248>)
 801c136:	e008      	b.n	801c14a <sensorsclient_update_cellular_info+0x1d2>
      p_string2 = state_string[3];
 801c138:	4b22      	ldr	r3, [pc, #136]	; (801c1c4 <sensorsclient_update_cellular_info+0x24c>)
 801c13a:	e750      	b.n	801bfde <sensorsclient_update_cellular_info+0x66>
      p_string2 = state_string[4];
 801c13c:	4b22      	ldr	r3, [pc, #136]	; (801c1c8 <sensorsclient_update_cellular_info+0x250>)
 801c13e:	e74e      	b.n	801bfde <sensorsclient_update_cellular_info+0x66>
      p_string2 = state_string[5];
 801c140:	4b22      	ldr	r3, [pc, #136]	; (801c1cc <sensorsclient_update_cellular_info+0x254>)
 801c142:	e74c      	b.n	801bfde <sensorsclient_update_cellular_info+0x66>
      p_string2 = state_string[6];
 801c144:	4b22      	ldr	r3, [pc, #136]	; (801c1d0 <sensorsclient_update_cellular_info+0x258>)
 801c146:	e74a      	b.n	801bfde <sensorsclient_update_cellular_info+0x66>
      p_string2 = state_string[7];
 801c148:	4b22      	ldr	r3, [pc, #136]	; (801c1d4 <sensorsclient_update_cellular_info+0x25c>)
  bool sensors_timer = false; /* false : sensors timer stopped, true: sensors timer started */
 801c14a:	2400      	movs	r4, #0
 801c14c:	e748      	b.n	801bfe0 <sensorsclient_update_cellular_info+0x68>
      p_string2 = state_string[8];
 801c14e:	4b22      	ldr	r3, [pc, #136]	; (801c1d8 <sensorsclient_update_cellular_info+0x260>)
 801c150:	e7fb      	b.n	801c14a <sensorsclient_update_cellular_info+0x1d2>
      p_string2 = state_string[1];
 801c152:	4b22      	ldr	r3, [pc, #136]	; (801c1dc <sensorsclient_update_cellular_info+0x264>)
 801c154:	e7f9      	b.n	801c14a <sensorsclient_update_cellular_info+0x1d2>
      p_string2 = state_string[9];
 801c156:	4b22      	ldr	r3, [pc, #136]	; (801c1e0 <sensorsclient_update_cellular_info+0x268>)
 801c158:	e7f7      	b.n	801c14a <sensorsclient_update_cellular_info+0x1d2>
    if (cellular_app_sensorsclient_sensors_timer_state == CELLULAR_APP_SENSORSCLIENT_TIMER_RUN)
 801c15a:	7833      	ldrb	r3, [r6, #0]
 801c15c:	2b02      	cmp	r3, #2
 801c15e:	f47f af7e 	bne.w	801c05e <sensorsclient_update_cellular_info+0xe6>
      if (rtosalTimerStop(cellular_app_sensorsclient_sensors_timer_id) == osOK)
 801c162:	4b10      	ldr	r3, [pc, #64]	; (801c1a4 <sensorsclient_update_cellular_info+0x22c>)
 801c164:	6818      	ldr	r0, [r3, #0]
 801c166:	f7fb fe60 	bl	8017e2a <rtosalTimerStop>
 801c16a:	2800      	cmp	r0, #0
 801c16c:	f47f af77 	bne.w	801c05e <sensorsclient_update_cellular_info+0xe6>
        cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE;
 801c170:	2401      	movs	r4, #1
        PRINT_INFO("%s: Sensors timer stopped", p_cellular_app_sensorsclient_trace)
 801c172:	682a      	ldr	r2, [r5, #0]
 801c174:	491b      	ldr	r1, [pc, #108]	; (801c1e4 <sensorsclient_update_cellular_info+0x26c>)
        cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE;
 801c176:	7034      	strb	r4, [r6, #0]
        PRINT_INFO("%s: Sensors timer stopped", p_cellular_app_sensorsclient_trace)
 801c178:	e75c      	b.n	801c034 <sensorsclient_update_cellular_info+0xbc>
    p_string1 = operator_string[0];
 801c17a:	4a1b      	ldr	r2, [pc, #108]	; (801c1e8 <sensorsclient_update_cellular_info+0x270>)
    operator_name_length = 10U;
 801c17c:	230a      	movs	r3, #10
 801c17e:	e77d      	b.n	801c07c <sensorsclient_update_cellular_info+0x104>
    p_string1 = ip_string[0];
 801c180:	4b1a      	ldr	r3, [pc, #104]	; (801c1ec <sensorsclient_update_cellular_info+0x274>)
 801c182:	e7a5      	b.n	801c0d0 <sensorsclient_update_cellular_info+0x158>
 801c184:	0802c560 	.word	0x0802c560
 801c188:	0802c570 	.word	0x0802c570
 801c18c:	200084cc 	.word	0x200084cc
 801c190:	0802c568 	.word	0x0802c568
 801c194:	0802c5d0 	.word	0x0802c5d0
 801c198:	0802c61b 	.word	0x0802c61b
 801c19c:	200094f8 	.word	0x200094f8
 801c1a0:	20008284 	.word	0x20008284
 801c1a4:	20008280 	.word	0x20008280
 801c1a8:	0802c627 	.word	0x0802c627
 801c1ac:	0802c65f 	.word	0x0802c65f
 801c1b0:	0802c66a 	.word	0x0802c66a
 801c1b4:	20008285 	.word	0x20008285
 801c1b8:	0802c5f1 	.word	0x0802c5f1
 801c1bc:	0802c5fa 	.word	0x0802c5fa
 801c1c0:	0802c578 	.word	0x0802c578
 801c1c4:	0802c58e 	.word	0x0802c58e
 801c1c8:	0802c599 	.word	0x0802c599
 801c1cc:	0802c5a4 	.word	0x0802c5a4
 801c1d0:	0802c5af 	.word	0x0802c5af
 801c1d4:	0802c5ba 	.word	0x0802c5ba
 801c1d8:	0802c5c5 	.word	0x0802c5c5
 801c1dc:	0802c583 	.word	0x0802c583
 801c1e0:	0802c5db 	.word	0x0802c5db
 801c1e4:	0802c643 	.word	0x0802c643
 801c1e8:	0802c5e6 	.word	0x0802c5e6
 801c1ec:	0802c5f5 	.word	0x0802c5f5

0801c1f0 <cellular_app_sensorsclient_sensors_timer_cb>:
{
 801c1f0:	b507      	push	{r0, r1, r2, lr}
  if (cellular_app_sensorsclient_sensors_timer_state == CELLULAR_APP_SENSORSCLIENT_TIMER_RUN)
 801c1f2:	4b16      	ldr	r3, [pc, #88]	; (801c24c <cellular_app_sensorsclient_sensors_timer_cb+0x5c>)
 801c1f4:	781b      	ldrb	r3, [r3, #0]
 801c1f6:	2b02      	cmp	r3, #2
 801c1f8:	d124      	bne.n	801c244 <cellular_app_sensorsclient_sensors_timer_cb+0x54>
    status = rtosalMessageQueuePut(cellular_app_sensorsclient.queue_id, msg_queue, 0U);
 801c1fa:	4b15      	ldr	r3, [pc, #84]	; (801c250 <cellular_app_sensorsclient_sensors_timer_cb+0x60>)
 801c1fc:	4915      	ldr	r1, [pc, #84]	; (801c254 <cellular_app_sensorsclient_sensors_timer_cb+0x64>)
 801c1fe:	68d8      	ldr	r0, [r3, #12]
 801c200:	2200      	movs	r2, #0
 801c202:	f7fb fdf3 	bl	8017dec <rtosalMessageQueuePut>
    if (status != osOK)
 801c206:	b1e8      	cbz	r0, 801c244 <cellular_app_sensorsclient_sensors_timer_cb+0x54>
      PRINT_FORCE("%s: ERROR Sensors Msg Put Type:%d Id:%d - status:%d!", p_cellular_app_sensorsclient_trace,
 801c208:	2305      	movs	r3, #5
 801c20a:	4a13      	ldr	r2, [pc, #76]	; (801c258 <cellular_app_sensorsclient_sensors_timer_cb+0x68>)
 801c20c:	9001      	str	r0, [sp, #4]
 801c20e:	9300      	str	r3, [sp, #0]
 801c210:	6812      	ldr	r2, [r2, #0]
 801c212:	4912      	ldr	r1, [pc, #72]	; (801c25c <cellular_app_sensorsclient_sensors_timer_cb+0x6c>)
 801c214:	4812      	ldr	r0, [pc, #72]	; (801c260 <cellular_app_sensorsclient_sensors_timer_cb+0x70>)
 801c216:	2303      	movs	r3, #3
 801c218:	f000 fe4e 	bl	801ceb8 <sprintf>
 801c21c:	4810      	ldr	r0, [pc, #64]	; (801c260 <cellular_app_sensorsclient_sensors_timer_cb+0x70>)
 801c21e:	f7fb fe89 	bl	8017f34 <crs_strlen>
 801c222:	4a0f      	ldr	r2, [pc, #60]	; (801c260 <cellular_app_sensorsclient_sensors_timer_cb+0x70>)
 801c224:	b283      	uxth	r3, r0
 801c226:	2101      	movs	r1, #1
 801c228:	2007      	movs	r0, #7
 801c22a:	f7fb fec1 	bl	8017fb0 <traceIF_itmPrint>
 801c22e:	480c      	ldr	r0, [pc, #48]	; (801c260 <cellular_app_sensorsclient_sensors_timer_cb+0x70>)
 801c230:	f7fb fe80 	bl	8017f34 <crs_strlen>
 801c234:	490a      	ldr	r1, [pc, #40]	; (801c260 <cellular_app_sensorsclient_sensors_timer_cb+0x70>)
 801c236:	b282      	uxth	r2, r0
 801c238:	2007      	movs	r0, #7
}
 801c23a:	b003      	add	sp, #12
 801c23c:	f85d eb04 	ldr.w	lr, [sp], #4
      PRINT_FORCE("%s: ERROR Sensors Msg Put Type:%d Id:%d - status:%d!", p_cellular_app_sensorsclient_trace,
 801c240:	f7fc b8f6 	b.w	8018430 <traceIF_uartPrintForce>
}
 801c244:	b003      	add	sp, #12
 801c246:	f85d fb04 	ldr.w	pc, [sp], #4
 801c24a:	bf00      	nop
 801c24c:	20008284 	.word	0x20008284
 801c250:	20008270 	.word	0x20008270
 801c254:	03050000 	.word	0x03050000
 801c258:	200084cc 	.word	0x200084cc
 801c25c:	0802c676 	.word	0x0802c676
 801c260:	200094f8 	.word	0x200094f8

0801c264 <cellular_app_sensorsclient_cellular_info_status_cb>:
  if ((event_type == CA_CELLULAR_INFO_EVENT) && (p_cellular_info != NULL))
 801c264:	2801      	cmp	r0, #1
{
 801c266:	b513      	push	{r0, r1, r4, lr}
 801c268:	4604      	mov	r4, r0
  if ((event_type == CA_CELLULAR_INFO_EVENT) && (p_cellular_info != NULL))
 801c26a:	d126      	bne.n	801c2ba <cellular_app_sensorsclient_cellular_info_status_cb+0x56>
 801c26c:	b329      	cbz	r1, 801c2ba <cellular_app_sensorsclient_cellular_info_status_cb+0x56>
    status = rtosalMessageQueuePut(cellular_app_sensorsclient.queue_id, msg_queue, 0U);
 801c26e:	4b14      	ldr	r3, [pc, #80]	; (801c2c0 <cellular_app_sensorsclient_cellular_info_status_cb+0x5c>)
 801c270:	2200      	movs	r2, #0
 801c272:	68d8      	ldr	r0, [r3, #12]
 801c274:	f04f 7101 	mov.w	r1, #33816576	; 0x2040000
 801c278:	f7fb fdb8 	bl	8017dec <rtosalMessageQueuePut>
    if (status != osOK)
 801c27c:	b1e8      	cbz	r0, 801c2ba <cellular_app_sensorsclient_cellular_info_status_cb+0x56>
      PRINT_FORCE("%s: ERROR CellularInfo Msg Put Type:%d Id:%d - status:%d!", p_cellular_app_sensorsclient_trace,
 801c27e:	2304      	movs	r3, #4
 801c280:	4a10      	ldr	r2, [pc, #64]	; (801c2c4 <cellular_app_sensorsclient_cellular_info_status_cb+0x60>)
 801c282:	9001      	str	r0, [sp, #4]
 801c284:	9300      	str	r3, [sp, #0]
 801c286:	6812      	ldr	r2, [r2, #0]
 801c288:	490f      	ldr	r1, [pc, #60]	; (801c2c8 <cellular_app_sensorsclient_cellular_info_status_cb+0x64>)
 801c28a:	4810      	ldr	r0, [pc, #64]	; (801c2cc <cellular_app_sensorsclient_cellular_info_status_cb+0x68>)
 801c28c:	2302      	movs	r3, #2
 801c28e:	f000 fe13 	bl	801ceb8 <sprintf>
 801c292:	480e      	ldr	r0, [pc, #56]	; (801c2cc <cellular_app_sensorsclient_cellular_info_status_cb+0x68>)
 801c294:	f7fb fe4e 	bl	8017f34 <crs_strlen>
 801c298:	4621      	mov	r1, r4
 801c29a:	b283      	uxth	r3, r0
 801c29c:	4a0b      	ldr	r2, [pc, #44]	; (801c2cc <cellular_app_sensorsclient_cellular_info_status_cb+0x68>)
 801c29e:	2007      	movs	r0, #7
 801c2a0:	f7fb fe86 	bl	8017fb0 <traceIF_itmPrint>
 801c2a4:	4809      	ldr	r0, [pc, #36]	; (801c2cc <cellular_app_sensorsclient_cellular_info_status_cb+0x68>)
 801c2a6:	f7fb fe45 	bl	8017f34 <crs_strlen>
 801c2aa:	4908      	ldr	r1, [pc, #32]	; (801c2cc <cellular_app_sensorsclient_cellular_info_status_cb+0x68>)
 801c2ac:	b282      	uxth	r2, r0
 801c2ae:	2007      	movs	r0, #7
}
 801c2b0:	b002      	add	sp, #8
 801c2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      PRINT_FORCE("%s: ERROR CellularInfo Msg Put Type:%d Id:%d - status:%d!", p_cellular_app_sensorsclient_trace,
 801c2b6:	f7fc b8bb 	b.w	8018430 <traceIF_uartPrintForce>
}
 801c2ba:	b002      	add	sp, #8
 801c2bc:	bd10      	pop	{r4, pc}
 801c2be:	bf00      	nop
 801c2c0:	20008270 	.word	0x20008270
 801c2c4:	200084cc 	.word	0x200084cc
 801c2c8:	0802c6ad 	.word	0x0802c6ad
 801c2cc:	200094f8 	.word	0x200094f8

0801c2d0 <cellular_app_sensorsclient_send_msg>:
{
  bool result = true;
  rtosalStatus status;

  /* A message has to be send */
  status = rtosalMessageQueuePut(cellular_app_sensorsclient.queue_id, queue_msg, 0U);
 801c2d0:	4b14      	ldr	r3, [pc, #80]	; (801c324 <cellular_app_sensorsclient_send_msg+0x54>)
{
 801c2d2:	b513      	push	{r0, r1, r4, lr}
  status = rtosalMessageQueuePut(cellular_app_sensorsclient.queue_id, queue_msg, 0U);
 801c2d4:	2200      	movs	r2, #0
{
 801c2d6:	4604      	mov	r4, r0
  status = rtosalMessageQueuePut(cellular_app_sensorsclient.queue_id, queue_msg, 0U);
 801c2d8:	4601      	mov	r1, r0
 801c2da:	68d8      	ldr	r0, [r3, #12]
 801c2dc:	f7fb fd86 	bl	8017dec <rtosalMessageQueuePut>
  if (status != osOK)
 801c2e0:	b1f0      	cbz	r0, 801c320 <cellular_app_sensorsclient_send_msg+0x50>
  {
    result = false;
    PRINT_FORCE("%s: ERROR CellularApi Msg Put Type:%d Id:%d - status:%d!", p_cellular_app_sensorsclient_trace,
 801c2e2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801c2e6:	4a10      	ldr	r2, [pc, #64]	; (801c328 <cellular_app_sensorsclient_send_msg+0x58>)
 801c2e8:	9001      	str	r0, [sp, #4]
 801c2ea:	9300      	str	r3, [sp, #0]
 801c2ec:	6812      	ldr	r2, [r2, #0]
 801c2ee:	490f      	ldr	r1, [pc, #60]	; (801c32c <cellular_app_sensorsclient_send_msg+0x5c>)
 801c2f0:	480f      	ldr	r0, [pc, #60]	; (801c330 <cellular_app_sensorsclient_send_msg+0x60>)
 801c2f2:	0e23      	lsrs	r3, r4, #24
 801c2f4:	f000 fde0 	bl	801ceb8 <sprintf>
 801c2f8:	480d      	ldr	r0, [pc, #52]	; (801c330 <cellular_app_sensorsclient_send_msg+0x60>)
 801c2fa:	f7fb fe1b 	bl	8017f34 <crs_strlen>
 801c2fe:	4a0c      	ldr	r2, [pc, #48]	; (801c330 <cellular_app_sensorsclient_send_msg+0x60>)
 801c300:	b283      	uxth	r3, r0
 801c302:	2101      	movs	r1, #1
 801c304:	2007      	movs	r0, #7
 801c306:	f7fb fe53 	bl	8017fb0 <traceIF_itmPrint>
 801c30a:	4809      	ldr	r0, [pc, #36]	; (801c330 <cellular_app_sensorsclient_send_msg+0x60>)
 801c30c:	f7fb fe12 	bl	8017f34 <crs_strlen>
 801c310:	4907      	ldr	r1, [pc, #28]	; (801c330 <cellular_app_sensorsclient_send_msg+0x60>)
 801c312:	b282      	uxth	r2, r0
 801c314:	2007      	movs	r0, #7
 801c316:	f7fc f88b 	bl	8018430 <traceIF_uartPrintForce>
    result = false;
 801c31a:	2000      	movs	r0, #0
                GET_CELLULAR_APP_MSG_TYPE(queue_msg), GET_CELLULAR_APP_MSG_ID(queue_msg), status)
  }

  return (result);
}
 801c31c:	b002      	add	sp, #8
 801c31e:	bd10      	pop	{r4, pc}
  bool result = true;
 801c320:	2001      	movs	r0, #1
 801c322:	e7fb      	b.n	801c31c <cellular_app_sensorsclient_send_msg+0x4c>
 801c324:	20008270 	.word	0x20008270
 801c328:	200084cc 	.word	0x200084cc
 801c32c:	0802c6e9 	.word	0x0802c6e9
 801c330:	200094f8 	.word	0x200094f8

0801c334 <cellular_app_sensorsclient_init>:
  * @brief  Initialize all needed structures to support SensorsClt feature
  * @param  -
  * @retval -
  */
void cellular_app_sensorsclient_init(void)
{
 801c334:	b538      	push	{r3, r4, r5, lr}
  /* Initialize trace shortcut */
  p_cellular_app_sensorsclient_trace = cellular_app_type_string[CELLULAR_APP_TYPE_SENSORSCLIENT];
 801c336:	4b17      	ldr	r3, [pc, #92]	; (801c394 <cellular_app_sensorsclient_init+0x60>)

  /* Application Initialization */
  cellular_app_sensorsclient.app_id = 0U;
 801c338:	4c17      	ldr	r4, [pc, #92]	; (801c398 <cellular_app_sensorsclient_init+0x64>)
  p_cellular_app_sensorsclient_trace = cellular_app_type_string[CELLULAR_APP_TYPE_SENSORSCLIENT];
 801c33a:	685a      	ldr	r2, [r3, #4]
 801c33c:	4b17      	ldr	r3, [pc, #92]	; (801c39c <cellular_app_sensorsclient_init+0x68>)
  /* Process Status Initialization */
  cellular_app_sensorsclient.process_status = true;
  /* Process Period Initialization */
  cellular_app_sensorsclient.process_period = 0U; /* Unused */
 801c33e:	2500      	movs	r5, #0
  p_cellular_app_sensorsclient_trace = cellular_app_type_string[CELLULAR_APP_TYPE_SENSORSCLIENT];
 801c340:	601a      	str	r2, [r3, #0]
  cellular_app_sensorsclient.app_id = 0U;
 801c342:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c346:	8023      	strh	r3, [r4, #0]
  /* Thread Id Initialization */
  cellular_app_sensorsclient.thread_id = NULL;
  /* Queue Id Initialization/Creation */
  cellular_app_sensorsclient.queue_id = rtosalMessageQueueNew(NULL, CELLULAR_APP_QUEUE_SIZE);
 801c348:	2105      	movs	r1, #5
 801c34a:	4628      	mov	r0, r5
  cellular_app_sensorsclient.thread_id = NULL;
 801c34c:	e9c4 5501 	strd	r5, r5, [r4, #4]
  cellular_app_sensorsclient.queue_id = rtosalMessageQueueNew(NULL, CELLULAR_APP_QUEUE_SIZE);
 801c350:	f7fb fd41 	bl	8017dd6 <rtosalMessageQueueNew>

  /* Specific Initialization */

  /* Need a timer to read periodically the Sensors */
  cellular_app_sensorsclient_sensors_timer_id = rtosalTimerNew(NULL,
 801c354:	462b      	mov	r3, r5
  cellular_app_sensorsclient.queue_id = rtosalMessageQueueNew(NULL, CELLULAR_APP_QUEUE_SIZE);
 801c356:	60e0      	str	r0, [r4, #12]
  cellular_app_sensorsclient_sensors_timer_id = rtosalTimerNew(NULL,
 801c358:	4911      	ldr	r1, [pc, #68]	; (801c3a0 <cellular_app_sensorsclient_init+0x6c>)
 801c35a:	4628      	mov	r0, r5
 801c35c:	2201      	movs	r2, #1
 801c35e:	f7fb fd57 	bl	8017e10 <rtosalTimerNew>
                                                               (os_ptimer)cellular_app_sensorsclient_sensors_timer_cb,
                                                               osTimerPeriodic, NULL);
  cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE;
 801c362:	4b10      	ldr	r3, [pc, #64]	; (801c3a4 <cellular_app_sensorsclient_init+0x70>)
  cellular_app_sensorsclient_sensors_timer_id = rtosalTimerNew(NULL,
 801c364:	4d10      	ldr	r5, [pc, #64]	; (801c3a8 <cellular_app_sensorsclient_init+0x74>)
  cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE;
 801c366:	2101      	movs	r1, #1
 801c368:	7019      	strb	r1, [r3, #0]

  /* Check Initialization is ok */
  if (cellular_app_sensorsclient.queue_id == NULL)
 801c36a:	68e1      	ldr	r1, [r4, #12]
  cellular_app_sensorsclient_sensors_timer_id = rtosalTimerNew(NULL,
 801c36c:	6028      	str	r0, [r5, #0]
  if (cellular_app_sensorsclient.queue_id == NULL)
 801c36e:	461c      	mov	r4, r3
 801c370:	b921      	cbnz	r1, 801c37c <cellular_app_sensorsclient_init+0x48>
  {
    CELLULAR_APP_ERROR(CELLULAR_APP_ERROR_SENSORSCLIENT, ERROR_FATAL)
 801c372:	2203      	movs	r2, #3
 801c374:	2132      	movs	r1, #50	; 0x32
 801c376:	2007      	movs	r0, #7
 801c378:	f7fa ffe0 	bl	801733c <ERROR_Handler>
  }
  if (cellular_app_sensorsclient_sensors_timer_id == NULL)
 801c37c:	682b      	ldr	r3, [r5, #0]
 801c37e:	b93b      	cbnz	r3, 801c390 <cellular_app_sensorsclient_init+0x5c>
  {
    cellular_app_sensorsclient_sensors_timer_state = CELLULAR_APP_SENSORSCLIENT_TIMER_INVALID;
 801c380:	7023      	strb	r3, [r4, #0]
    CELLULAR_APP_ERROR((CELLULAR_APP_ERROR_SENSORSCLIENT + 1), ERROR_FATAL)
  }
}
 801c382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CELLULAR_APP_ERROR((CELLULAR_APP_ERROR_SENSORSCLIENT + 1), ERROR_FATAL)
 801c386:	2203      	movs	r2, #3
 801c388:	2133      	movs	r1, #51	; 0x33
 801c38a:	2007      	movs	r0, #7
 801c38c:	f7fa bfd6 	b.w	801733c <ERROR_Handler>
}
 801c390:	bd38      	pop	{r3, r4, r5, pc}
 801c392:	bf00      	nop
 801c394:	20000618 	.word	0x20000618
 801c398:	20008270 	.word	0x20008270
 801c39c:	200084cc 	.word	0x200084cc
 801c3a0:	0801c1f1 	.word	0x0801c1f1
 801c3a4:	20008284 	.word	0x20008284
 801c3a8:	20008280 	.word	0x20008280

0801c3ac <cellular_app_sensorsclient_start>:
  * @brief  Start SensorsClt thread
  * @param  -
  * @retval -
  */
void cellular_app_sensorsclient_start(void)
{
 801c3ac:	b510      	push	{r4, lr}
  uint8_t thread_name[CELLULAR_APP_THREAD_NAME_MAX];
  uint32_t len;

  /* Cellular initialization already done - Registration to services is OK */
  /* Registration to CellularInfo: needs to know all cellular status modification*/
  if (cellular_info_cb_registration(cellular_app_sensorsclient_cellular_info_status_cb, (void *) NULL)
 801c3ae:	484d      	ldr	r0, [pc, #308]	; (801c4e4 <cellular_app_sensorsclient_start+0x138>)
{
 801c3b0:	b086      	sub	sp, #24
  if (cellular_info_cb_registration(cellular_app_sensorsclient_cellular_info_status_cb, (void *) NULL)
 801c3b2:	2100      	movs	r1, #0
 801c3b4:	f7fc ff6c 	bl	8019290 <cellular_info_cb_registration>
 801c3b8:	b120      	cbz	r0, 801c3c4 <cellular_app_sensorsclient_start+0x18>
      != CELLULAR_SUCCESS)
  {
    CELLULAR_APP_ERROR((CELLULAR_APP_ERROR_SENSORSCLIENT + 2), ERROR_FATAL)
 801c3ba:	2203      	movs	r2, #3
 801c3bc:	2134      	movs	r1, #52	; 0x34
 801c3be:	2007      	movs	r0, #7
 801c3c0:	f7fa ffbc 	bl	801733c <ERROR_Handler>
  }

  if (cellular_app_sensorsclient_sensors_timer_state == CELLULAR_APP_SENSORSCLIENT_TIMER_IDLE)
 801c3c4:	4b48      	ldr	r3, [pc, #288]	; (801c4e8 <cellular_app_sensorsclient_start+0x13c>)
 801c3c6:	781c      	ldrb	r4, [r3, #0]
 801c3c8:	2c01      	cmp	r4, #1
 801c3ca:	d16d      	bne.n	801c4a8 <cellular_app_sensorsclient_start+0xfc>
  {
    /* Initialization Sensors modules */
    cellular_app_sensors_init();
 801c3cc:	f7ff fdca 	bl	801bf64 <cellular_app_sensors_init>
    /* Initialization Sensor Humidity */
    if (cellular_app_sensors_initialize(CELLULAR_APP_SENSOR_TYPE_HUMIDITY) == false)
 801c3d0:	2000      	movs	r0, #0
 801c3d2:	f7ff fd6f 	bl	801beb4 <cellular_app_sensors_initialize>
 801c3d6:	b9b0      	cbnz	r0, 801c406 <cellular_app_sensorsclient_start+0x5a>
    {
      PRINT_FORCE("%s: Humidity sensors init NOK!", p_cellular_app_sensorsclient_trace)
 801c3d8:	4b44      	ldr	r3, [pc, #272]	; (801c4ec <cellular_app_sensorsclient_start+0x140>)
 801c3da:	4945      	ldr	r1, [pc, #276]	; (801c4f0 <cellular_app_sensorsclient_start+0x144>)
 801c3dc:	681a      	ldr	r2, [r3, #0]
 801c3de:	4845      	ldr	r0, [pc, #276]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c3e0:	f000 fd6a 	bl	801ceb8 <sprintf>
 801c3e4:	4843      	ldr	r0, [pc, #268]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c3e6:	f7fb fda5 	bl	8017f34 <crs_strlen>
 801c3ea:	4a42      	ldr	r2, [pc, #264]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c3ec:	b283      	uxth	r3, r0
 801c3ee:	4621      	mov	r1, r4
 801c3f0:	2007      	movs	r0, #7
 801c3f2:	f7fb fddd 	bl	8017fb0 <traceIF_itmPrint>
 801c3f6:	483f      	ldr	r0, [pc, #252]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c3f8:	f7fb fd9c 	bl	8017f34 <crs_strlen>
 801c3fc:	493d      	ldr	r1, [pc, #244]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c3fe:	b282      	uxth	r2, r0
 801c400:	2007      	movs	r0, #7
 801c402:	f7fc f815 	bl	8018430 <traceIF_uartPrintForce>
    }
    /* Initialization Sensor Pressure */
    if (cellular_app_sensors_initialize(CELLULAR_APP_SENSOR_TYPE_PRESSURE) == false)
 801c406:	2001      	movs	r0, #1
 801c408:	f7ff fd54 	bl	801beb4 <cellular_app_sensors_initialize>
 801c40c:	b9b0      	cbnz	r0, 801c43c <cellular_app_sensorsclient_start+0x90>
    {
      PRINT_FORCE("%s: Pressure sensor init NOK!", p_cellular_app_sensorsclient_trace)
 801c40e:	4b37      	ldr	r3, [pc, #220]	; (801c4ec <cellular_app_sensorsclient_start+0x140>)
 801c410:	4939      	ldr	r1, [pc, #228]	; (801c4f8 <cellular_app_sensorsclient_start+0x14c>)
 801c412:	681a      	ldr	r2, [r3, #0]
 801c414:	4837      	ldr	r0, [pc, #220]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c416:	f000 fd4f 	bl	801ceb8 <sprintf>
 801c41a:	4836      	ldr	r0, [pc, #216]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c41c:	f7fb fd8a 	bl	8017f34 <crs_strlen>
 801c420:	4a34      	ldr	r2, [pc, #208]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c422:	b283      	uxth	r3, r0
 801c424:	2101      	movs	r1, #1
 801c426:	2007      	movs	r0, #7
 801c428:	f7fb fdc2 	bl	8017fb0 <traceIF_itmPrint>
 801c42c:	4831      	ldr	r0, [pc, #196]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c42e:	f7fb fd81 	bl	8017f34 <crs_strlen>
 801c432:	4930      	ldr	r1, [pc, #192]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c434:	b282      	uxth	r2, r0
 801c436:	2007      	movs	r0, #7
 801c438:	f7fb fffa 	bl	8018430 <traceIF_uartPrintForce>
    }
    /* Initialization Sensors Temperature */
    if (cellular_app_sensors_initialize(CELLULAR_APP_SENSOR_TYPE_TEMPERATURE) == false)
 801c43c:	2002      	movs	r0, #2
 801c43e:	f7ff fd39 	bl	801beb4 <cellular_app_sensors_initialize>
 801c442:	b9b0      	cbnz	r0, 801c472 <cellular_app_sensorsclient_start+0xc6>
    {
      PRINT_FORCE("%s: Temperature sensor init NOK!", p_cellular_app_sensorsclient_trace)
 801c444:	4b29      	ldr	r3, [pc, #164]	; (801c4ec <cellular_app_sensorsclient_start+0x140>)
 801c446:	492d      	ldr	r1, [pc, #180]	; (801c4fc <cellular_app_sensorsclient_start+0x150>)
 801c448:	681a      	ldr	r2, [r3, #0]
 801c44a:	482a      	ldr	r0, [pc, #168]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c44c:	f000 fd34 	bl	801ceb8 <sprintf>
 801c450:	4828      	ldr	r0, [pc, #160]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c452:	f7fb fd6f 	bl	8017f34 <crs_strlen>
 801c456:	4a27      	ldr	r2, [pc, #156]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c458:	b283      	uxth	r3, r0
 801c45a:	2101      	movs	r1, #1
 801c45c:	2007      	movs	r0, #7
 801c45e:	f7fb fda7 	bl	8017fb0 <traceIF_itmPrint>
 801c462:	4824      	ldr	r0, [pc, #144]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c464:	f7fb fd66 	bl	8017f34 <crs_strlen>
 801c468:	4922      	ldr	r1, [pc, #136]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c46a:	b282      	uxth	r2, r0
 801c46c:	2007      	movs	r0, #7
 801c46e:	f7fb ffdf 	bl	8018430 <traceIF_uartPrintForce>
    }
    /* Initialization Sensors Temperature */
    if (cellular_app_sensors_initialize(CELLULAR_APP_SENSOR_TYPE_ACCELEROMETER) == false)
 801c472:	2003      	movs	r0, #3
 801c474:	f7ff fd1e 	bl	801beb4 <cellular_app_sensors_initialize>
 801c478:	b9b0      	cbnz	r0, 801c4a8 <cellular_app_sensorsclient_start+0xfc>
    {
    	PRINT_FORCE("%s: Accelerometer sensor init NOK!", p_cellular_app_sensorsclient_trace)
 801c47a:	4b1c      	ldr	r3, [pc, #112]	; (801c4ec <cellular_app_sensorsclient_start+0x140>)
 801c47c:	4920      	ldr	r1, [pc, #128]	; (801c500 <cellular_app_sensorsclient_start+0x154>)
 801c47e:	681a      	ldr	r2, [r3, #0]
 801c480:	481c      	ldr	r0, [pc, #112]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c482:	f000 fd19 	bl	801ceb8 <sprintf>
 801c486:	481b      	ldr	r0, [pc, #108]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c488:	f7fb fd54 	bl	8017f34 <crs_strlen>
 801c48c:	4a19      	ldr	r2, [pc, #100]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c48e:	b283      	uxth	r3, r0
 801c490:	2101      	movs	r1, #1
 801c492:	2007      	movs	r0, #7
 801c494:	f7fb fd8c 	bl	8017fb0 <traceIF_itmPrint>
 801c498:	4816      	ldr	r0, [pc, #88]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c49a:	f7fb fd4b 	bl	8017f34 <crs_strlen>
 801c49e:	4915      	ldr	r1, [pc, #84]	; (801c4f4 <cellular_app_sensorsclient_start+0x148>)
 801c4a0:	b282      	uxth	r2, r0
 801c4a2:	2007      	movs	r0, #7
 801c4a4:	f7fb ffc4 	bl	8018430 <traceIF_uartPrintForce>
    }
  }

  /* Thread Name Generation */
  len = crs_strlen((const uint8_t *)"SensorsClt");
 801c4a8:	4816      	ldr	r0, [pc, #88]	; (801c504 <cellular_app_sensorsclient_start+0x158>)
 801c4aa:	f7fb fd43 	bl	8017f34 <crs_strlen>
  /* '+1' to copy '\0' */
  (void)memcpy(thread_name, "SensorsClt", CELLULAR_APP_MIN((len + 1U), CELLULAR_APP_THREAD_NAME_MAX));
 801c4ae:	1c42      	adds	r2, r0, #1
 801c4b0:	2a0f      	cmp	r2, #15
 801c4b2:	bf28      	it	cs
 801c4b4:	220f      	movcs	r2, #15
 801c4b6:	4913      	ldr	r1, [pc, #76]	; (801c504 <cellular_app_sensorsclient_start+0x158>)
 801c4b8:	a802      	add	r0, sp, #8
 801c4ba:	f000 fcbf 	bl	801ce3c <memcpy>

  /* Thread Creation */
  cellular_app_sensorsclient.thread_id = rtosalThreadNew((const rtosal_char_t *)thread_name,
 801c4be:	2200      	movs	r2, #0
 801c4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c4c4:	4910      	ldr	r1, [pc, #64]	; (801c508 <cellular_app_sensorsclient_start+0x15c>)
 801c4c6:	9200      	str	r2, [sp, #0]
 801c4c8:	a802      	add	r0, sp, #8
 801c4ca:	f7fb fc5b 	bl	8017d84 <rtosalThreadNew>
 801c4ce:	4b0f      	ldr	r3, [pc, #60]	; (801c50c <cellular_app_sensorsclient_start+0x160>)
 801c4d0:	6098      	str	r0, [r3, #8]
                                                         (os_pthread)sensorsclient_thread,
                                                         SENSORSCLIENT_THREAD_PRIO, SENSORSCLIENT_THREAD_STACK_SIZE,
                                                         NULL);
  /* Check Creation is ok */
  if (cellular_app_sensorsclient.thread_id == NULL)
 801c4d2:	b920      	cbnz	r0, 801c4de <cellular_app_sensorsclient_start+0x132>
  {
    CELLULAR_APP_ERROR((CELLULAR_APP_ERROR_SENSORSCLIENT + 4), ERROR_FATAL)
 801c4d4:	2203      	movs	r2, #3
 801c4d6:	2136      	movs	r1, #54	; 0x36
 801c4d8:	2007      	movs	r0, #7
 801c4da:	f7fa ff2f 	bl	801733c <ERROR_Handler>
  }
}
 801c4de:	b006      	add	sp, #24
 801c4e0:	bd10      	pop	{r4, pc}
 801c4e2:	bf00      	nop
 801c4e4:	0801c265 	.word	0x0801c265
 801c4e8:	20008284 	.word	0x20008284
 801c4ec:	200084cc 	.word	0x200084cc
 801c4f0:	0802c724 	.word	0x0802c724
 801c4f4:	200094f8 	.word	0x200094f8
 801c4f8:	0802c745 	.word	0x0802c745
 801c4fc:	0802c765 	.word	0x0802c765
 801c500:	0802c788 	.word	0x0802c788
 801c504:	0802c7ad 	.word	0x0802c7ad
 801c508:	0801cd01 	.word	0x0801cd01
 801c50c:	20008270 	.word	0x20008270

0801c510 <orp_callback>:
#if defined(USE_COM_MDM)
void orp_callback(void)
{
 801c510:	b570      	push	{r4, r5, r6, lr}
	/* TODO STM: If a URC is received before subscription,
	 * the state machine freezes as its not able to extract/free the buffers
	 */
	(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c512:	22fa      	movs	r2, #250	; 0xfa
 801c514:	2100      	movs	r1, #0
 801c516:	4832      	ldr	r0, [pc, #200]	; (801c5e0 <orp_callback+0xd0>)
 801c518:	f000 fc9e 	bl	801ce58 <memset>
	orp_response_t * orpURCRsp;
    PRINT_DBG(" *** start of call_orp_receive to read rx buffer***")
 801c51c:	4931      	ldr	r1, [pc, #196]	; (801c5e4 <orp_callback+0xd4>)
 801c51e:	4832      	ldr	r0, [pc, #200]	; (801c5e8 <orp_callback+0xd8>)
 801c520:	f000 fd3a 	bl	801cf98 <strcpy>
 801c524:	4830      	ldr	r0, [pc, #192]	; (801c5e8 <orp_callback+0xd8>)
 801c526:	f7fb fd05 	bl	8017f34 <crs_strlen>
 801c52a:	4a2f      	ldr	r2, [pc, #188]	; (801c5e8 <orp_callback+0xd8>)
 801c52c:	b283      	uxth	r3, r0
 801c52e:	2102      	movs	r1, #2
 801c530:	2007      	movs	r0, #7
 801c532:	f7fb fd3d 	bl	8017fb0 <traceIF_itmPrint>
 801c536:	482c      	ldr	r0, [pc, #176]	; (801c5e8 <orp_callback+0xd8>)
 801c538:	f7fb fcfc 	bl	8017f34 <crs_strlen>
 801c53c:	4a2a      	ldr	r2, [pc, #168]	; (801c5e8 <orp_callback+0xd8>)
 801c53e:	b283      	uxth	r3, r0
 801c540:	2102      	movs	r1, #2
 801c542:	2007      	movs	r0, #7
 801c544:	f7fb ff5a 	bl	80183fc <traceIF_uartPrint>
    com_err =  orp_receive(currentHandle, orp_rspbuf, ORP_MAX_RSP_SIZE, &orp_error_code);
 801c548:	4828      	ldr	r0, [pc, #160]	; (801c5ec <orp_callback+0xdc>)
 801c54a:	4b29      	ldr	r3, [pc, #164]	; (801c5f0 <orp_callback+0xe0>)
 801c54c:	4924      	ldr	r1, [pc, #144]	; (801c5e0 <orp_callback+0xd0>)
 801c54e:	7800      	ldrb	r0, [r0, #0]
 801c550:	22fa      	movs	r2, #250	; 0xfa
 801c552:	f7fe fff7 	bl	801b544 <orp_receive>
 801c556:	4b27      	ldr	r3, [pc, #156]	; (801c5f4 <orp_callback+0xe4>)
    orpURCRsp = orpResponseDecode(orp_rspbuf,(size_t)orp_rspbuf);
 801c558:	4921      	ldr	r1, [pc, #132]	; (801c5e0 <orp_callback+0xd0>)
    com_err =  orp_receive(currentHandle, orp_rspbuf, ORP_MAX_RSP_SIZE, &orp_error_code);
 801c55a:	6018      	str	r0, [r3, #0]
    orpURCRsp = orpResponseDecode(orp_rspbuf,(size_t)orp_rspbuf);
 801c55c:	4608      	mov	r0, r1
 801c55e:	f7fe fff3 	bl	801b548 <orpResponseDecode>
    PRINT_INFO("An URC on the resource: %s received with value %s",orpURCRsp->resource_name,(orpURCRsp->resource_value))
 801c562:	f100 0564 	add.w	r5, r0, #100	; 0x64
 801c566:	4602      	mov	r2, r0
 801c568:	4923      	ldr	r1, [pc, #140]	; (801c5f8 <orp_callback+0xe8>)
 801c56a:	462b      	mov	r3, r5
    orpURCRsp = orpResponseDecode(orp_rspbuf,(size_t)orp_rspbuf);
 801c56c:	4604      	mov	r4, r0
    PRINT_INFO("An URC on the resource: %s received with value %s",orpURCRsp->resource_name,(orpURCRsp->resource_value))
 801c56e:	481e      	ldr	r0, [pc, #120]	; (801c5e8 <orp_callback+0xd8>)
 801c570:	f000 fca2 	bl	801ceb8 <sprintf>
 801c574:	481c      	ldr	r0, [pc, #112]	; (801c5e8 <orp_callback+0xd8>)
 801c576:	f7fb fcdd 	bl	8017f34 <crs_strlen>
 801c57a:	4a1b      	ldr	r2, [pc, #108]	; (801c5e8 <orp_callback+0xd8>)
 801c57c:	b283      	uxth	r3, r0
 801c57e:	2101      	movs	r1, #1
 801c580:	2007      	movs	r0, #7
 801c582:	f7fb fd15 	bl	8017fb0 <traceIF_itmPrint>
 801c586:	4818      	ldr	r0, [pc, #96]	; (801c5e8 <orp_callback+0xd8>)
 801c588:	f7fb fcd4 	bl	8017f34 <crs_strlen>
 801c58c:	2101      	movs	r1, #1
 801c58e:	b283      	uxth	r3, r0
 801c590:	4a15      	ldr	r2, [pc, #84]	; (801c5e8 <orp_callback+0xd8>)
 801c592:	2007      	movs	r0, #7
 801c594:	f7fb ff32 	bl	80183fc <traceIF_uartPrint>
	if(strcmp(orpURCRsp->resource_name,ORP_RESOURCE_SENSOR_PERIODICITY) == 0)
 801c598:	4918      	ldr	r1, [pc, #96]	; (801c5fc <orp_callback+0xec>)
 801c59a:	4620      	mov	r0, r4
 801c59c:	f7e3 fe30 	bl	8000200 <strcmp>
 801c5a0:	b9d8      	cbnz	r0, 801c5da <orp_callback+0xca>
	{
	  PRINT_INFO("The Sensor periodicity is changed to %ld",(crs_atoi)(orpURCRsp->resource_value))
 801c5a2:	4628      	mov	r0, r5
 801c5a4:	f7fb fc8f 	bl	8017ec6 <crs_atoi>
 801c5a8:	4915      	ldr	r1, [pc, #84]	; (801c600 <orp_callback+0xf0>)
 801c5aa:	4602      	mov	r2, r0
	}
	else
	{
	  PRINT_INFO("Unidentified sensor value is changed to %s",(orpURCRsp->resource_value))
 801c5ac:	480e      	ldr	r0, [pc, #56]	; (801c5e8 <orp_callback+0xd8>)
 801c5ae:	f000 fc83 	bl	801ceb8 <sprintf>
 801c5b2:	480d      	ldr	r0, [pc, #52]	; (801c5e8 <orp_callback+0xd8>)
 801c5b4:	f7fb fcbe 	bl	8017f34 <crs_strlen>
 801c5b8:	4a0b      	ldr	r2, [pc, #44]	; (801c5e8 <orp_callback+0xd8>)
 801c5ba:	b283      	uxth	r3, r0
 801c5bc:	2101      	movs	r1, #1
 801c5be:	2007      	movs	r0, #7
 801c5c0:	f7fb fcf6 	bl	8017fb0 <traceIF_itmPrint>
 801c5c4:	4808      	ldr	r0, [pc, #32]	; (801c5e8 <orp_callback+0xd8>)
 801c5c6:	f7fb fcb5 	bl	8017f34 <crs_strlen>
	}

}
 801c5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  PRINT_INFO("Unidentified sensor value is changed to %s",(orpURCRsp->resource_value))
 801c5ce:	b283      	uxth	r3, r0
 801c5d0:	4a05      	ldr	r2, [pc, #20]	; (801c5e8 <orp_callback+0xd8>)
 801c5d2:	2101      	movs	r1, #1
 801c5d4:	2007      	movs	r0, #7
 801c5d6:	f7fb bf11 	b.w	80183fc <traceIF_uartPrint>
 801c5da:	490a      	ldr	r1, [pc, #40]	; (801c604 <orp_callback+0xf4>)
 801c5dc:	462a      	mov	r2, r5
 801c5de:	e7e5      	b.n	801c5ac <orp_callback+0x9c>
 801c5e0:	2000836a 	.word	0x2000836a
 801c5e4:	0802c7b8 	.word	0x0802c7b8
 801c5e8:	200094f8 	.word	0x200094f8
 801c5ec:	200098fa 	.word	0x200098fa
 801c5f0:	200098fc 	.word	0x200098fc
 801c5f4:	20009900 	.word	0x20009900
 801c5f8:	0802c7ee 	.word	0x0802c7ee
 801c5fc:	0802c822 	.word	0x0802c822
 801c600:	0802c829 	.word	0x0802c829
 801c604:	0802c854 	.word	0x0802c854

0801c608 <orp_start>:

void orp_start (void)
{
 801c608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static orp_resource_create_t sPeriodicity;
  if (orpReady == true && orp_defineResource == true)
 801c60c:	4b5a      	ldr	r3, [pc, #360]	; (801c778 <orp_start+0x170>)
 801c60e:	781a      	ldrb	r2, [r3, #0]
 801c610:	469a      	mov	sl, r3
 801c612:	2a00      	cmp	r2, #0
 801c614:	f000 80ad 	beq.w	801c772 <orp_start+0x16a>
 801c618:	f8df b19c 	ldr.w	fp, [pc, #412]	; 801c7b8 <orp_start+0x1b0>
 801c61c:	f89b 3000 	ldrb.w	r3, [fp]
 801c620:	bb53      	cbnz	r3, 801c678 <orp_start+0x70>
	      }
	    }
	  }
	}
  }
  if (orpReady == true && orp_defineHandler == true)
 801c622:	4c56      	ldr	r4, [pc, #344]	; (801c77c <orp_start+0x174>)
 801c624:	7823      	ldrb	r3, [r4, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	f000 80a3 	beq.w	801c772 <orp_start+0x16a>
  {
    /* Resource member declaration */
	strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_PERIODICITY);
 801c62c:	4954      	ldr	r1, [pc, #336]	; (801c780 <orp_start+0x178>)
 801c62e:	4855      	ldr	r0, [pc, #340]	; (801c784 <orp_start+0x17c>)
 801c630:	f000 fcb2 	bl	801cf98 <strcpy>
	//strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_BOOLEAN_TEST);
	com_err = orp_create_handler(currentHandle,&sPeriodicity,&orp_error_code);
 801c634:	4b54      	ldr	r3, [pc, #336]	; (801c788 <orp_start+0x180>)
 801c636:	4a55      	ldr	r2, [pc, #340]	; (801c78c <orp_start+0x184>)
 801c638:	4952      	ldr	r1, [pc, #328]	; (801c784 <orp_start+0x17c>)
 801c63a:	7818      	ldrb	r0, [r3, #0]
 801c63c:	f7fe fea2 	bl	801b384 <orp_create_handler>
 801c640:	4b53      	ldr	r3, [pc, #332]	; (801c790 <orp_start+0x188>)
    PRINT_DBG(" Create Handler return %ld", com_err)
 801c642:	4954      	ldr	r1, [pc, #336]	; (801c794 <orp_start+0x18c>)
	com_err = orp_create_handler(currentHandle,&sPeriodicity,&orp_error_code);
 801c644:	6018      	str	r0, [r3, #0]
 801c646:	4602      	mov	r2, r0
    PRINT_DBG(" Create Handler return %ld", com_err)
 801c648:	4853      	ldr	r0, [pc, #332]	; (801c798 <orp_start+0x190>)
 801c64a:	f000 fc35 	bl	801ceb8 <sprintf>
 801c64e:	4852      	ldr	r0, [pc, #328]	; (801c798 <orp_start+0x190>)
 801c650:	f7fb fc70 	bl	8017f34 <crs_strlen>
 801c654:	4a50      	ldr	r2, [pc, #320]	; (801c798 <orp_start+0x190>)
 801c656:	b283      	uxth	r3, r0
 801c658:	2102      	movs	r1, #2
 801c65a:	2007      	movs	r0, #7
 801c65c:	f7fb fca8 	bl	8017fb0 <traceIF_itmPrint>
 801c660:	484d      	ldr	r0, [pc, #308]	; (801c798 <orp_start+0x190>)
 801c662:	f7fb fc67 	bl	8017f34 <crs_strlen>
 801c666:	4a4c      	ldr	r2, [pc, #304]	; (801c798 <orp_start+0x190>)
 801c668:	b283      	uxth	r3, r0
 801c66a:	2102      	movs	r1, #2
 801c66c:	2007      	movs	r0, #7
 801c66e:	f7fb fec5 	bl	80183fc <traceIF_uartPrint>
	orp_defineHandler = false;
 801c672:	2300      	movs	r3, #0
 801c674:	7023      	strb	r3, [r4, #0]
  }
}
 801c676:	e07c      	b.n	801c772 <orp_start+0x16a>
	strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_PERIODICITY);
 801c678:	4c42      	ldr	r4, [pc, #264]	; (801c784 <orp_start+0x17c>)
	com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c67a:	4e43      	ldr	r6, [pc, #268]	; (801c788 <orp_start+0x180>)
	strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_PERIODICITY);
 801c67c:	4940      	ldr	r1, [pc, #256]	; (801c780 <orp_start+0x178>)
	com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c67e:	4d44      	ldr	r5, [pc, #272]	; (801c790 <orp_start+0x188>)
	strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_PERIODICITY);
 801c680:	4620      	mov	r0, r4
 801c682:	f000 fc89 	bl	801cf98 <strcpy>
	sPeriodicity.res_type = 'N';
 801c686:	274e      	movs	r7, #78	; 0x4e
	sPeriodicity.res_dir = 'O';
 801c688:	234f      	movs	r3, #79	; 0x4f
	com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c68a:	4a40      	ldr	r2, [pc, #256]	; (801c78c <orp_start+0x184>)
 801c68c:	7830      	ldrb	r0, [r6, #0]
	sPeriodicity.res_dir = 'O';
 801c68e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c692:	4621      	mov	r1, r4
	sPeriodicity.res_type = 'N';
 801c694:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
	com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c698:	f7fe fe44 	bl	801b324 <orp_create_resource>
 801c69c:	6028      	str	r0, [r5, #0]
	if(com_err == 0)
 801c69e:	2800      	cmp	r0, #0
 801c6a0:	d162      	bne.n	801c768 <orp_start+0x160>
	  strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_TEMPERATURE);
 801c6a2:	493e      	ldr	r1, [pc, #248]	; (801c79c <orp_start+0x194>)
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f000 fc77 	bl	801cf98 <strcpy>
	  sPeriodicity.res_dir = 'I';
 801c6aa:	f04f 0849 	mov.w	r8, #73	; 0x49
	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6ae:	4a37      	ldr	r2, [pc, #220]	; (801c78c <orp_start+0x184>)
 801c6b0:	7830      	ldrb	r0, [r6, #0]
	  sPeriodicity.res_dir = 'I';
 801c6b2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6b6:	4621      	mov	r1, r4
	  sPeriodicity.res_type = 'N';
 801c6b8:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6bc:	f7fe fe32 	bl	801b324 <orp_create_resource>
 801c6c0:	6028      	str	r0, [r5, #0]
	  if(com_err == 0)
 801c6c2:	2800      	cmp	r0, #0
 801c6c4:	d150      	bne.n	801c768 <orp_start+0x160>
		strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_PRESSURE);
 801c6c6:	4936      	ldr	r1, [pc, #216]	; (801c7a0 <orp_start+0x198>)
 801c6c8:	4620      	mov	r0, r4
 801c6ca:	f000 fc65 	bl	801cf98 <strcpy>
		com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6ce:	4a2f      	ldr	r2, [pc, #188]	; (801c78c <orp_start+0x184>)
 801c6d0:	7830      	ldrb	r0, [r6, #0]
		sPeriodicity.res_dir = 'I';
 801c6d2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
		com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6d6:	4621      	mov	r1, r4
		sPeriodicity.res_type = 'N';
 801c6d8:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
		com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6dc:	f7fe fe22 	bl	801b324 <orp_create_resource>
 801c6e0:	6028      	str	r0, [r5, #0]
	    if(com_err == 0)
 801c6e2:	2800      	cmp	r0, #0
 801c6e4:	d140      	bne.n	801c768 <orp_start+0x160>
		  strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_HUMIDITY);
 801c6e6:	492f      	ldr	r1, [pc, #188]	; (801c7a4 <orp_start+0x19c>)
 801c6e8:	4620      	mov	r0, r4
 801c6ea:	f000 fc55 	bl	801cf98 <strcpy>
		  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6ee:	4a27      	ldr	r2, [pc, #156]	; (801c78c <orp_start+0x184>)
 801c6f0:	7830      	ldrb	r0, [r6, #0]
		  sPeriodicity.res_dir = 'I';
 801c6f2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
		  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6f6:	4621      	mov	r1, r4
		  sPeriodicity.res_type = 'N';
 801c6f8:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
		  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c6fc:	f7fe fe12 	bl	801b324 <orp_create_resource>
 801c700:	6028      	str	r0, [r5, #0]
	      if(com_err == 0)
 801c702:	bb88      	cbnz	r0, 801c768 <orp_start+0x160>
		    strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_X);
 801c704:	4928      	ldr	r1, [pc, #160]	; (801c7a8 <orp_start+0x1a0>)
 801c706:	4620      	mov	r0, r4
 801c708:	f000 fc46 	bl	801cf98 <strcpy>
		    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c70c:	4a1f      	ldr	r2, [pc, #124]	; (801c78c <orp_start+0x184>)
 801c70e:	7830      	ldrb	r0, [r6, #0]
		    sPeriodicity.res_dir = 'I';
 801c710:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
		    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c714:	4621      	mov	r1, r4
		    sPeriodicity.res_type = 'N';
 801c716:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
		    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c71a:	f7fe fe03 	bl	801b324 <orp_create_resource>
 801c71e:	6028      	str	r0, [r5, #0]
		    if(com_err == 0)
 801c720:	bb10      	cbnz	r0, 801c768 <orp_start+0x160>
		  	  strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_Y);
 801c722:	4922      	ldr	r1, [pc, #136]	; (801c7ac <orp_start+0x1a4>)
 801c724:	4620      	mov	r0, r4
 801c726:	f000 fc37 	bl	801cf98 <strcpy>
		  	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c72a:	4a18      	ldr	r2, [pc, #96]	; (801c78c <orp_start+0x184>)
 801c72c:	7830      	ldrb	r0, [r6, #0]
		  	  sPeriodicity.res_dir = 'I';
 801c72e:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
		  	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c732:	4621      	mov	r1, r4
		  	  sPeriodicity.res_type = 'N';
 801c734:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
		  	  com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c738:	f7fe fdf4 	bl	801b324 <orp_create_resource>
 801c73c:	4681      	mov	r9, r0
 801c73e:	6028      	str	r0, [r5, #0]
		  	  if(com_err == 0)
 801c740:	b990      	cbnz	r0, 801c768 <orp_start+0x160>
		  	    strcpy((char *)sPeriodicity.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_Z);
 801c742:	491b      	ldr	r1, [pc, #108]	; (801c7b0 <orp_start+0x1a8>)
 801c744:	4620      	mov	r0, r4
 801c746:	f000 fc27 	bl	801cf98 <strcpy>
		  	    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c74a:	4a10      	ldr	r2, [pc, #64]	; (801c78c <orp_start+0x184>)
 801c74c:	7830      	ldrb	r0, [r6, #0]
		  	    sPeriodicity.res_dir = 'I';
 801c74e:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
		  	    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c752:	4621      	mov	r1, r4
		  	    sPeriodicity.res_type = 'N';
 801c754:	f884 7065 	strb.w	r7, [r4, #101]	; 0x65
		  	    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c758:	f7fe fde4 	bl	801b324 <orp_create_resource>
		  	    orp_pushUpdate = true;
 801c75c:	4b15      	ldr	r3, [pc, #84]	; (801c7b4 <orp_start+0x1ac>)
		  	    com_err = orp_create_resource(currentHandle,&sPeriodicity,&orp_error_code);
 801c75e:	6028      	str	r0, [r5, #0]
		  	    orp_pushUpdate = true;
 801c760:	2201      	movs	r2, #1
		  	    orp_defineResource = false;
 801c762:	f88b 9000 	strb.w	r9, [fp]
		  	    orp_pushUpdate = true;
 801c766:	701a      	strb	r2, [r3, #0]
  if (orpReady == true && orp_defineHandler == true)
 801c768:	f89a 3000 	ldrb.w	r3, [sl]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	f47f af58 	bne.w	801c622 <orp_start+0x1a>
}
 801c772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c776:	bf00      	nop
 801c778:	200082fd 	.word	0x200082fd
 801c77c:	20000620 	.word	0x20000620
 801c780:	0802c822 	.word	0x0802c822
 801c784:	200084d0 	.word	0x200084d0
 801c788:	200098fa 	.word	0x200098fa
 801c78c:	200098fc 	.word	0x200098fc
 801c790:	20009900 	.word	0x20009900
 801c794:	0802c91a 	.word	0x0802c91a
 801c798:	200094f8 	.word	0x200094f8
 801c79c:	0802c881 	.word	0x0802c881
 801c7a0:	0802c897 	.word	0x0802c897
 801c7a4:	0802c8aa 	.word	0x0802c8aa
 801c7a8:	0802c8bd 	.word	0x0802c8bd
 801c7ac:	0802c8dc 	.word	0x0802c8dc
 801c7b0:	0802c8fb 	.word	0x0802c8fb
 801c7b4:	20008369 	.word	0x20008369
 801c7b8:	20000621 	.word	0x20000621

0801c7bc <sensorsclient_update_sensors_info>:
{
 801c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c0:	ed2d 8b02 	vpush	{d8}
  if (cellular_app_sensors_read(CELLULAR_APP_SENSOR_TYPE_HUMIDITY, &sensor_humidity) == true)
 801c7c4:	4fb8      	ldr	r7, [pc, #736]	; (801caa8 <sensorsclient_update_sensors_info+0x2ec>)
 801c7c6:	f8df a33c 	ldr.w	sl, [pc, #828]	; 801cb04 <sensorsclient_update_sensors_info+0x348>
 801c7ca:	f8df 933c 	ldr.w	r9, [pc, #828]	; 801cb08 <sensorsclient_update_sensors_info+0x34c>
{
 801c7ce:	b0e3      	sub	sp, #396	; 0x18c
  orp_start();
 801c7d0:	f7ff ff1a 	bl	801c608 <orp_start>
  if (cellular_app_sensors_read(CELLULAR_APP_SENSOR_TYPE_HUMIDITY, &sensor_humidity) == true)
 801c7d4:	4639      	mov	r1, r7
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	f7ff fb8a 	bl	801bef0 <cellular_app_sensors_read>
 801c7dc:	2800      	cmp	r0, #0
 801c7de:	f000 8262 	beq.w	801cca6 <sensorsclient_update_sensors_info+0x4ea>
	if(orpReady == true && orp_pushUpdate == true && orp_pushJSONUpdate == false)
 801c7e2:	f89a 3000 	ldrb.w	r3, [sl]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d032      	beq.n	801c850 <sensorsclient_update_sensors_info+0x94>
 801c7ea:	f899 3000 	ldrb.w	r3, [r9]
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d02e      	beq.n	801c850 <sensorsclient_update_sensors_info+0x94>
 801c7f2:	4bae      	ldr	r3, [pc, #696]	; (801caac <sensorsclient_update_sensors_info+0x2f0>)
 801c7f4:	781d      	ldrb	r5, [r3, #0]
 801c7f6:	bb5d      	cbnz	r5, 801c850 <sensorsclient_update_sensors_info+0x94>
	  strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_HUMIDITY);
 801c7f8:	4cad      	ldr	r4, [pc, #692]	; (801cab0 <sensorsclient_update_sensors_info+0x2f4>)
 801c7fa:	49ae      	ldr	r1, [pc, #696]	; (801cab4 <sensorsclient_update_sensors_info+0x2f8>)
 801c7fc:	4620      	mov	r0, r4
 801c7fe:	f000 fbcb 	bl	801cf98 <strcpy>
	  orp_update.resource_value = sensor_humidity.float_data;
 801c802:	68bb      	ldr	r3, [r7, #8]
	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c804:	48ac      	ldr	r0, [pc, #688]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
	  orp_update.resource_value = sensor_humidity.float_data;
 801c806:	6663      	str	r3, [r4, #100]	; 0x64
	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c808:	22fa      	movs	r2, #250	; 0xfa
 801c80a:	4629      	mov	r1, r5
 801c80c:	f000 fb24 	bl	801ce58 <memset>
	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c810:	48aa      	ldr	r0, [pc, #680]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801c812:	4bab      	ldr	r3, [pc, #684]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801c814:	4aa8      	ldr	r2, [pc, #672]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801c816:	7800      	ldrb	r0, [r0, #0]
 801c818:	4621      	mov	r1, r4
 801c81a:	f7fe fe2b 	bl	801b474 <orp_set_numeric_resource>
 801c81e:	4ba9      	ldr	r3, [pc, #676]	; (801cac4 <sensorsclient_update_sensors_info+0x308>)
	  PRINT_INFO("The Update of Humidity to Octave is %ld :",com_err)
 801c820:	49a9      	ldr	r1, [pc, #676]	; (801cac8 <sensorsclient_update_sensors_info+0x30c>)
	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c822:	6018      	str	r0, [r3, #0]
 801c824:	4602      	mov	r2, r0
	  PRINT_INFO("The Update of Humidity to Octave is %ld :",com_err)
 801c826:	48a9      	ldr	r0, [pc, #676]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c828:	f000 fb46 	bl	801ceb8 <sprintf>
 801c82c:	48a7      	ldr	r0, [pc, #668]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c82e:	f7fb fb81 	bl	8017f34 <crs_strlen>
 801c832:	4aa6      	ldr	r2, [pc, #664]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c834:	b283      	uxth	r3, r0
 801c836:	2101      	movs	r1, #1
 801c838:	2007      	movs	r0, #7
 801c83a:	f7fb fbb9 	bl	8017fb0 <traceIF_itmPrint>
 801c83e:	48a3      	ldr	r0, [pc, #652]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c840:	f7fb fb78 	bl	8017f34 <crs_strlen>
 801c844:	4aa1      	ldr	r2, [pc, #644]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c846:	b283      	uxth	r3, r0
 801c848:	2101      	movs	r1, #1
 801c84a:	2007      	movs	r0, #7
 801c84c:	f7fb fdd6 	bl	80183fc <traceIF_uartPrint>
  if (cellular_app_sensors_read(CELLULAR_APP_SENSOR_TYPE_PRESSURE, &sensor_pressure) == true)
 801c850:	4e9f      	ldr	r6, [pc, #636]	; (801cad0 <sensorsclient_update_sensors_info+0x314>)
 801c852:	2001      	movs	r0, #1
 801c854:	4631      	mov	r1, r6
 801c856:	f7ff fb4b 	bl	801bef0 <cellular_app_sensors_read>
 801c85a:	2800      	cmp	r0, #0
 801c85c:	f000 8226 	beq.w	801ccac <sensorsclient_update_sensors_info+0x4f0>
  	if(orpReady == true && orp_pushUpdate == true && orp_pushJSONUpdate == false)
 801c860:	f89a 3000 	ldrb.w	r3, [sl]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d032      	beq.n	801c8ce <sensorsclient_update_sensors_info+0x112>
 801c868:	f899 3000 	ldrb.w	r3, [r9]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d02e      	beq.n	801c8ce <sensorsclient_update_sensors_info+0x112>
 801c870:	4b8e      	ldr	r3, [pc, #568]	; (801caac <sensorsclient_update_sensors_info+0x2f0>)
 801c872:	781d      	ldrb	r5, [r3, #0]
 801c874:	bb5d      	cbnz	r5, 801c8ce <sensorsclient_update_sensors_info+0x112>
  	  strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_PRESSURE);
 801c876:	4c8e      	ldr	r4, [pc, #568]	; (801cab0 <sensorsclient_update_sensors_info+0x2f4>)
 801c878:	4996      	ldr	r1, [pc, #600]	; (801cad4 <sensorsclient_update_sensors_info+0x318>)
 801c87a:	4620      	mov	r0, r4
 801c87c:	f000 fb8c 	bl	801cf98 <strcpy>
  	  orp_update.resource_value = sensor_pressure.float_data;
 801c880:	68b3      	ldr	r3, [r6, #8]
  	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c882:	488d      	ldr	r0, [pc, #564]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
  	  orp_update.resource_value = sensor_pressure.float_data;
 801c884:	6663      	str	r3, [r4, #100]	; 0x64
  	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c886:	22fa      	movs	r2, #250	; 0xfa
 801c888:	4629      	mov	r1, r5
 801c88a:	f000 fae5 	bl	801ce58 <memset>
  	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c88e:	488b      	ldr	r0, [pc, #556]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801c890:	4b8b      	ldr	r3, [pc, #556]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801c892:	4a89      	ldr	r2, [pc, #548]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801c894:	7800      	ldrb	r0, [r0, #0]
 801c896:	4621      	mov	r1, r4
 801c898:	f7fe fdec 	bl	801b474 <orp_set_numeric_resource>
 801c89c:	4b89      	ldr	r3, [pc, #548]	; (801cac4 <sensorsclient_update_sensors_info+0x308>)
  	  PRINT_INFO("The Update of Pressure to Octave is %ld :",com_err)
 801c89e:	498e      	ldr	r1, [pc, #568]	; (801cad8 <sensorsclient_update_sensors_info+0x31c>)
  	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c8a0:	6018      	str	r0, [r3, #0]
 801c8a2:	4602      	mov	r2, r0
  	  PRINT_INFO("The Update of Pressure to Octave is %ld :",com_err)
 801c8a4:	4889      	ldr	r0, [pc, #548]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c8a6:	f000 fb07 	bl	801ceb8 <sprintf>
 801c8aa:	4888      	ldr	r0, [pc, #544]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c8ac:	f7fb fb42 	bl	8017f34 <crs_strlen>
 801c8b0:	4a86      	ldr	r2, [pc, #536]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c8b2:	b283      	uxth	r3, r0
 801c8b4:	2101      	movs	r1, #1
 801c8b6:	2007      	movs	r0, #7
 801c8b8:	f7fb fb7a 	bl	8017fb0 <traceIF_itmPrint>
 801c8bc:	4883      	ldr	r0, [pc, #524]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c8be:	f7fb fb39 	bl	8017f34 <crs_strlen>
 801c8c2:	4a82      	ldr	r2, [pc, #520]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c8c4:	b283      	uxth	r3, r0
 801c8c6:	2101      	movs	r1, #1
 801c8c8:	2007      	movs	r0, #7
 801c8ca:	f7fb fd97 	bl	80183fc <traceIF_uartPrint>
  if (cellular_app_sensors_read(CELLULAR_APP_SENSOR_TYPE_TEMPERATURE, &sensor_temperature) == true)
 801c8ce:	4c83      	ldr	r4, [pc, #524]	; (801cadc <sensorsclient_update_sensors_info+0x320>)
 801c8d0:	2002      	movs	r0, #2
 801c8d2:	4621      	mov	r1, r4
 801c8d4:	f7ff fb0c 	bl	801bef0 <cellular_app_sensors_read>
 801c8d8:	46a0      	mov	r8, r4
 801c8da:	2800      	cmp	r0, #0
 801c8dc:	f000 81e9 	beq.w	801ccb2 <sensorsclient_update_sensors_info+0x4f6>
	if(orpReady == true && orp_pushUpdate == true && orp_pushJSONUpdate == false)
 801c8e0:	f89a 3000 	ldrb.w	r3, [sl]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d033      	beq.n	801c950 <sensorsclient_update_sensors_info+0x194>
 801c8e8:	f899 3000 	ldrb.w	r3, [r9]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d02f      	beq.n	801c950 <sensorsclient_update_sensors_info+0x194>
 801c8f0:	4b6e      	ldr	r3, [pc, #440]	; (801caac <sensorsclient_update_sensors_info+0x2f0>)
 801c8f2:	781d      	ldrb	r5, [r3, #0]
 801c8f4:	bb65      	cbnz	r5, 801c950 <sensorsclient_update_sensors_info+0x194>
      strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_TEMPERATURE);
 801c8f6:	4c6e      	ldr	r4, [pc, #440]	; (801cab0 <sensorsclient_update_sensors_info+0x2f4>)
 801c8f8:	4979      	ldr	r1, [pc, #484]	; (801cae0 <sensorsclient_update_sensors_info+0x324>)
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f000 fb4c 	bl	801cf98 <strcpy>
      orp_update.resource_value = sensor_temperature.float_data;
 801c900:	f8d8 3008 	ldr.w	r3, [r8, #8]
      (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c904:	486c      	ldr	r0, [pc, #432]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
      orp_update.resource_value = sensor_temperature.float_data;
 801c906:	6663      	str	r3, [r4, #100]	; 0x64
      (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c908:	22fa      	movs	r2, #250	; 0xfa
 801c90a:	4629      	mov	r1, r5
 801c90c:	f000 faa4 	bl	801ce58 <memset>
      com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c910:	486a      	ldr	r0, [pc, #424]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801c912:	4b6b      	ldr	r3, [pc, #428]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801c914:	4a68      	ldr	r2, [pc, #416]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801c916:	7800      	ldrb	r0, [r0, #0]
 801c918:	4621      	mov	r1, r4
 801c91a:	f7fe fdab 	bl	801b474 <orp_set_numeric_resource>
 801c91e:	4b69      	ldr	r3, [pc, #420]	; (801cac4 <sensorsclient_update_sensors_info+0x308>)
      PRINT_INFO("The Update of Temperature to Octave is %ld :",com_err)
 801c920:	4970      	ldr	r1, [pc, #448]	; (801cae4 <sensorsclient_update_sensors_info+0x328>)
      com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c922:	6018      	str	r0, [r3, #0]
 801c924:	4602      	mov	r2, r0
      PRINT_INFO("The Update of Temperature to Octave is %ld :",com_err)
 801c926:	4869      	ldr	r0, [pc, #420]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c928:	f000 fac6 	bl	801ceb8 <sprintf>
 801c92c:	4867      	ldr	r0, [pc, #412]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c92e:	f7fb fb01 	bl	8017f34 <crs_strlen>
 801c932:	4a66      	ldr	r2, [pc, #408]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c934:	b283      	uxth	r3, r0
 801c936:	2101      	movs	r1, #1
 801c938:	2007      	movs	r0, #7
 801c93a:	f7fb fb39 	bl	8017fb0 <traceIF_itmPrint>
 801c93e:	4863      	ldr	r0, [pc, #396]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c940:	f7fb faf8 	bl	8017f34 <crs_strlen>
 801c944:	4a61      	ldr	r2, [pc, #388]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c946:	b283      	uxth	r3, r0
 801c948:	2101      	movs	r1, #1
 801c94a:	2007      	movs	r0, #7
 801c94c:	f7fb fd56 	bl	80183fc <traceIF_uartPrint>
  if (cellular_app_sensors_read(CELLULAR_APP_SENSOR_TYPE_ACCELEROMETER, &accelerometer_info) == true)
 801c950:	4c65      	ldr	r4, [pc, #404]	; (801cae8 <sensorsclient_update_sensors_info+0x32c>)
 801c952:	2003      	movs	r0, #3
 801c954:	4621      	mov	r1, r4
 801c956:	f7ff facb 	bl	801bef0 <cellular_app_sensors_read>
 801c95a:	2800      	cmp	r0, #0
 801c95c:	f000 81ac 	beq.w	801ccb8 <sensorsclient_update_sensors_info+0x4fc>
	if(orpReady == true && orp_pushUpdate == true && orp_pushJSONUpdate == false)
 801c960:	f89a 3000 	ldrb.w	r3, [sl]
 801c964:	2b00      	cmp	r3, #0
 801c966:	f000 80e3 	beq.w	801cb30 <sensorsclient_update_sensors_info+0x374>
 801c96a:	f899 3000 	ldrb.w	r3, [r9]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	f000 80de 	beq.w	801cb30 <sensorsclient_update_sensors_info+0x374>
 801c974:	4b4d      	ldr	r3, [pc, #308]	; (801caac <sensorsclient_update_sensors_info+0x2f0>)
 801c976:	f893 b000 	ldrb.w	fp, [r3]
 801c97a:	f1bb 0f00 	cmp.w	fp, #0
 801c97e:	f040 80d7 	bne.w	801cb30 <sensorsclient_update_sensors_info+0x374>
 801c982:	f9b4 3000 	ldrsh.w	r3, [r4]
	  strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_X);
 801c986:	4d4a      	ldr	r5, [pc, #296]	; (801cab0 <sensorsclient_update_sensors_info+0x2f4>)
 801c988:	4958      	ldr	r1, [pc, #352]	; (801caec <sensorsclient_update_sensors_info+0x330>)
 801c98a:	ee08 3a10 	vmov	s16, r3
 801c98e:	4628      	mov	r0, r5
 801c990:	f000 fb02 	bl	801cf98 <strcpy>
	  orp_update.resource_value = accelerometer_info.AXIS_X;
 801c994:	eef8 7ac8 	vcvt.f32.s32	s15, s16
	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c998:	4659      	mov	r1, fp
 801c99a:	22fa      	movs	r2, #250	; 0xfa
 801c99c:	4846      	ldr	r0, [pc, #280]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
	  orp_update.resource_value = accelerometer_info.AXIS_X;
 801c99e:	edc5 7a19 	vstr	s15, [r5, #100]	; 0x64
	  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801c9a2:	f000 fa59 	bl	801ce58 <memset>
	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c9a6:	4845      	ldr	r0, [pc, #276]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801c9a8:	4b45      	ldr	r3, [pc, #276]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801c9aa:	4a43      	ldr	r2, [pc, #268]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801c9ac:	7800      	ldrb	r0, [r0, #0]
 801c9ae:	f8df b114 	ldr.w	fp, [pc, #276]	; 801cac4 <sensorsclient_update_sensors_info+0x308>
 801c9b2:	4629      	mov	r1, r5
 801c9b4:	f7fe fd5e 	bl	801b474 <orp_set_numeric_resource>
	  PRINT_INFO("The Update of ACCELEROMETER_AXIS_X to Octave is %ld :",com_err)
 801c9b8:	494d      	ldr	r1, [pc, #308]	; (801caf0 <sensorsclient_update_sensors_info+0x334>)
	  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801c9ba:	f8cb 0000 	str.w	r0, [fp]
 801c9be:	4602      	mov	r2, r0
	  PRINT_INFO("The Update of ACCELEROMETER_AXIS_X to Octave is %ld :",com_err)
 801c9c0:	4842      	ldr	r0, [pc, #264]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c9c2:	f000 fa79 	bl	801ceb8 <sprintf>
 801c9c6:	4841      	ldr	r0, [pc, #260]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c9c8:	f7fb fab4 	bl	8017f34 <crs_strlen>
 801c9cc:	4a3f      	ldr	r2, [pc, #252]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c9ce:	b283      	uxth	r3, r0
 801c9d0:	2101      	movs	r1, #1
 801c9d2:	2007      	movs	r0, #7
 801c9d4:	f7fb faec 	bl	8017fb0 <traceIF_itmPrint>
 801c9d8:	483c      	ldr	r0, [pc, #240]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c9da:	f7fb faab 	bl	8017f34 <crs_strlen>
 801c9de:	4a3b      	ldr	r2, [pc, #236]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801c9e0:	b283      	uxth	r3, r0
 801c9e2:	2101      	movs	r1, #1
 801c9e4:	2007      	movs	r0, #7
 801c9e6:	f7fb fd09 	bl	80183fc <traceIF_uartPrint>
	  if(com_err == 0)
 801c9ea:	f8db 3000 	ldr.w	r3, [fp]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	f040 809e 	bne.w	801cb30 <sensorsclient_update_sensors_info+0x374>
		strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_Y);
 801c9f4:	493f      	ldr	r1, [pc, #252]	; (801caf4 <sensorsclient_update_sensors_info+0x338>)
 801c9f6:	9308      	str	r3, [sp, #32]
 801c9f8:	4628      	mov	r0, r5
 801c9fa:	f000 facd 	bl	801cf98 <strcpy>
		orp_update.resource_value = accelerometer_info.AXIS_Y;
 801c9fe:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
		(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca02:	482d      	ldr	r0, [pc, #180]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
		orp_update.resource_value = accelerometer_info.AXIS_Y;
 801ca04:	ee07 3a90 	vmov	s15, r3
		(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca08:	9b08      	ldr	r3, [sp, #32]
		orp_update.resource_value = accelerometer_info.AXIS_Y;
 801ca0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca0e:	4619      	mov	r1, r3
 801ca10:	22fa      	movs	r2, #250	; 0xfa
		orp_update.resource_value = accelerometer_info.AXIS_Y;
 801ca12:	edc5 7a19 	vstr	s15, [r5, #100]	; 0x64
		(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca16:	f000 fa1f 	bl	801ce58 <memset>
		com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801ca1a:	4828      	ldr	r0, [pc, #160]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801ca1c:	4b28      	ldr	r3, [pc, #160]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801ca1e:	4a26      	ldr	r2, [pc, #152]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801ca20:	7800      	ldrb	r0, [r0, #0]
 801ca22:	4629      	mov	r1, r5
 801ca24:	f7fe fd26 	bl	801b474 <orp_set_numeric_resource>
		PRINT_INFO("The Update of ACCELEROMETER_AXIS_Y to Octave is %ld :",com_err)
 801ca28:	4933      	ldr	r1, [pc, #204]	; (801caf8 <sensorsclient_update_sensors_info+0x33c>)
		com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801ca2a:	f8cb 0000 	str.w	r0, [fp]
 801ca2e:	4602      	mov	r2, r0
		PRINT_INFO("The Update of ACCELEROMETER_AXIS_Y to Octave is %ld :",com_err)
 801ca30:	4826      	ldr	r0, [pc, #152]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801ca32:	f000 fa41 	bl	801ceb8 <sprintf>
 801ca36:	4825      	ldr	r0, [pc, #148]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801ca38:	f7fb fa7c 	bl	8017f34 <crs_strlen>
 801ca3c:	4a23      	ldr	r2, [pc, #140]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801ca3e:	b283      	uxth	r3, r0
 801ca40:	2101      	movs	r1, #1
 801ca42:	2007      	movs	r0, #7
 801ca44:	f7fb fab4 	bl	8017fb0 <traceIF_itmPrint>
 801ca48:	4820      	ldr	r0, [pc, #128]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801ca4a:	f7fb fa73 	bl	8017f34 <crs_strlen>
 801ca4e:	4a1f      	ldr	r2, [pc, #124]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801ca50:	b283      	uxth	r3, r0
 801ca52:	2101      	movs	r1, #1
 801ca54:	2007      	movs	r0, #7
 801ca56:	f7fb fcd1 	bl	80183fc <traceIF_uartPrint>
		if(com_err == 0)
 801ca5a:	f8db 3000 	ldr.w	r3, [fp]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d166      	bne.n	801cb30 <sensorsclient_update_sensors_info+0x374>
		  strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_ACCELEROMETER_AXIS_Z);
 801ca62:	4926      	ldr	r1, [pc, #152]	; (801cafc <sensorsclient_update_sensors_info+0x340>)
 801ca64:	9308      	str	r3, [sp, #32]
 801ca66:	4628      	mov	r0, r5
 801ca68:	f000 fa96 	bl	801cf98 <strcpy>
		  orp_update.resource_value = accelerometer_info.AXIS_Z;
 801ca6c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
		  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca70:	4811      	ldr	r0, [pc, #68]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
		  orp_update.resource_value = accelerometer_info.AXIS_Z;
 801ca72:	ee07 3a90 	vmov	s15, r3
		  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca76:	9b08      	ldr	r3, [sp, #32]
		  orp_update.resource_value = accelerometer_info.AXIS_Z;
 801ca78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca7c:	4619      	mov	r1, r3
 801ca7e:	22fa      	movs	r2, #250	; 0xfa
		  orp_update.resource_value = accelerometer_info.AXIS_Z;
 801ca80:	edc5 7a19 	vstr	s15, [r5, #100]	; 0x64
		  (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801ca84:	f000 f9e8 	bl	801ce58 <memset>
		  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801ca88:	480c      	ldr	r0, [pc, #48]	; (801cabc <sensorsclient_update_sensors_info+0x300>)
 801ca8a:	4b0d      	ldr	r3, [pc, #52]	; (801cac0 <sensorsclient_update_sensors_info+0x304>)
 801ca8c:	4a0a      	ldr	r2, [pc, #40]	; (801cab8 <sensorsclient_update_sensors_info+0x2fc>)
 801ca8e:	7800      	ldrb	r0, [r0, #0]
 801ca90:	4629      	mov	r1, r5
 801ca92:	f7fe fcef 	bl	801b474 <orp_set_numeric_resource>
		  PRINT_INFO("The Update of ACCELEROMETER_AXIS_Z to Octave is %ld :",com_err)
 801ca96:	491a      	ldr	r1, [pc, #104]	; (801cb00 <sensorsclient_update_sensors_info+0x344>)
		  com_err = orp_set_numeric_resource(currentHandle,&orp_update,orp_rspbuf,&orp_error_code);
 801ca98:	f8cb 0000 	str.w	r0, [fp]
 801ca9c:	4602      	mov	r2, r0
		  PRINT_INFO("The Update of ACCELEROMETER_AXIS_Z to Octave is %ld :",com_err)
 801ca9e:	480b      	ldr	r0, [pc, #44]	; (801cacc <sensorsclient_update_sensors_info+0x310>)
 801caa0:	f000 fa0a 	bl	801ceb8 <sprintf>
 801caa4:	e032      	b.n	801cb0c <sensorsclient_update_sensors_info+0x350>
 801caa6:	bf00      	nop
 801caa8:	20008538 	.word	0x20008538
 801caac:	20008368 	.word	0x20008368
 801cab0:	20008464 	.word	0x20008464
 801cab4:	0802c8aa 	.word	0x0802c8aa
 801cab8:	2000836a 	.word	0x2000836a
 801cabc:	200098fa 	.word	0x200098fa
 801cac0:	200098fc 	.word	0x200098fc
 801cac4:	20009900 	.word	0x20009900
 801cac8:	0802c937 	.word	0x0802c937
 801cacc:	200094f8 	.word	0x200094f8
 801cad0:	20008544 	.word	0x20008544
 801cad4:	0802c897 	.word	0x0802c897
 801cad8:	0802c963 	.word	0x0802c963
 801cadc:	20008550 	.word	0x20008550
 801cae0:	0802c881 	.word	0x0802c881
 801cae4:	0802c98f 	.word	0x0802c98f
 801cae8:	20008264 	.word	0x20008264
 801caec:	0802c8bd 	.word	0x0802c8bd
 801caf0:	0802c9be 	.word	0x0802c9be
 801caf4:	0802c8dc 	.word	0x0802c8dc
 801caf8:	0802c9f6 	.word	0x0802c9f6
 801cafc:	0802c8fb 	.word	0x0802c8fb
 801cb00:	0802ca2e 	.word	0x0802ca2e
 801cb04:	200082fd 	.word	0x200082fd
 801cb08:	20008369 	.word	0x20008369
 801cb0c:	486c      	ldr	r0, [pc, #432]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb0e:	f7fb fa11 	bl	8017f34 <crs_strlen>
 801cb12:	4a6b      	ldr	r2, [pc, #428]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb14:	b283      	uxth	r3, r0
 801cb16:	2101      	movs	r1, #1
 801cb18:	2007      	movs	r0, #7
 801cb1a:	f7fb fa49 	bl	8017fb0 <traceIF_itmPrint>
 801cb1e:	4868      	ldr	r0, [pc, #416]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb20:	f7fb fa08 	bl	8017f34 <crs_strlen>
 801cb24:	4a66      	ldr	r2, [pc, #408]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb26:	b283      	uxth	r3, r0
 801cb28:	2101      	movs	r1, #1
 801cb2a:	2007      	movs	r0, #7
 801cb2c:	f7fb fc66 	bl	80183fc <traceIF_uartPrint>
  (void)sprintf((CRC_CHAR_t *)cellular_app_sensorsclient_string, "Temperature:%4.1fC Humidity:%4.1f%% Pressure:%6.1fP AxisX:%d AxisY:%d AxisZ:%d",
 801cb30:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801cb34:	f7e3 fd30 	bl	8000598 <__aeabi_f2d>
 801cb38:	460b      	mov	r3, r1
 801cb3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cb3e:	9106      	str	r1, [sp, #24]
 801cb40:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cb44:	9105      	str	r1, [sp, #20]
 801cb46:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cb4a:	9104      	str	r1, [sp, #16]
 801cb4c:	4602      	mov	r2, r0
 801cb4e:	68b0      	ldr	r0, [r6, #8]
 801cb50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cb54:	f7e3 fd20 	bl	8000598 <__aeabi_f2d>
 801cb58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cb5c:	68b8      	ldr	r0, [r7, #8]
 801cb5e:	f7e3 fd1b 	bl	8000598 <__aeabi_f2d>
 801cb62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cb66:	e9cd 0100 	strd	r0, r1, [sp]
 801cb6a:	4956      	ldr	r1, [pc, #344]	; (801ccc4 <sensorsclient_update_sensors_info+0x508>)
 801cb6c:	4856      	ldr	r0, [pc, #344]	; (801ccc8 <sensorsclient_update_sensors_info+0x50c>)
 801cb6e:	f000 f9a3 	bl	801ceb8 <sprintf>
  PRINT_INFO("The value of orpReady is %d and orp_pushUpdate is %d",orpReady,orp_pushUpdate)
 801cb72:	f899 3000 	ldrb.w	r3, [r9]
 801cb76:	f89a 2000 	ldrb.w	r2, [sl]
 801cb7a:	4954      	ldr	r1, [pc, #336]	; (801cccc <sensorsclient_update_sensors_info+0x510>)
 801cb7c:	4850      	ldr	r0, [pc, #320]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb7e:	f000 f99b 	bl	801ceb8 <sprintf>
 801cb82:	484f      	ldr	r0, [pc, #316]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb84:	f7fb f9d6 	bl	8017f34 <crs_strlen>
 801cb88:	4a4d      	ldr	r2, [pc, #308]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb8a:	b283      	uxth	r3, r0
 801cb8c:	2101      	movs	r1, #1
 801cb8e:	2007      	movs	r0, #7
 801cb90:	f7fb fa0e 	bl	8017fb0 <traceIF_itmPrint>
 801cb94:	484a      	ldr	r0, [pc, #296]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb96:	f7fb f9cd 	bl	8017f34 <crs_strlen>
 801cb9a:	4a49      	ldr	r2, [pc, #292]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cb9c:	b283      	uxth	r3, r0
 801cb9e:	2101      	movs	r1, #1
 801cba0:	2007      	movs	r0, #7
 801cba2:	f7fb fc2b 	bl	80183fc <traceIF_uartPrint>
  PRINT_FORCE("%s: %s", p_cellular_app_sensorsclient_trace, cellular_app_sensorsclient_string)
 801cba6:	4a4a      	ldr	r2, [pc, #296]	; (801ccd0 <sensorsclient_update_sensors_info+0x514>)
 801cba8:	4b47      	ldr	r3, [pc, #284]	; (801ccc8 <sensorsclient_update_sensors_info+0x50c>)
 801cbaa:	6812      	ldr	r2, [r2, #0]
 801cbac:	4949      	ldr	r1, [pc, #292]	; (801ccd4 <sensorsclient_update_sensors_info+0x518>)
 801cbae:	4844      	ldr	r0, [pc, #272]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cbb0:	f000 f982 	bl	801ceb8 <sprintf>
 801cbb4:	4842      	ldr	r0, [pc, #264]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cbb6:	f7fb f9bd 	bl	8017f34 <crs_strlen>
 801cbba:	4a41      	ldr	r2, [pc, #260]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cbbc:	b283      	uxth	r3, r0
 801cbbe:	2101      	movs	r1, #1
 801cbc0:	2007      	movs	r0, #7
 801cbc2:	f7fb f9f5 	bl	8017fb0 <traceIF_itmPrint>
 801cbc6:	483e      	ldr	r0, [pc, #248]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cbc8:	f7fb f9b4 	bl	8017f34 <crs_strlen>
 801cbcc:	493c      	ldr	r1, [pc, #240]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cbce:	b282      	uxth	r2, r0
 801cbd0:	2007      	movs	r0, #7
 801cbd2:	f7fb fc2d 	bl	8018430 <traceIF_uartPrintForce>
  if(orpReady == true && orp_pushUpdate == true && orp_pushJSONUpdate == true)
 801cbd6:	f89a 3000 	ldrb.w	r3, [sl]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d05e      	beq.n	801cc9c <sensorsclient_update_sensors_info+0x4e0>
 801cbde:	f899 3000 	ldrb.w	r3, [r9]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d05a      	beq.n	801cc9c <sensorsclient_update_sensors_info+0x4e0>
 801cbe6:	4b3c      	ldr	r3, [pc, #240]	; (801ccd8 <sensorsclient_update_sensors_info+0x51c>)
 801cbe8:	781b      	ldrb	r3, [r3, #0]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d056      	beq.n	801cc9c <sensorsclient_update_sensors_info+0x4e0>
	char ORP_json_Update[ORP_MAX_RESOURCE_VALUE] = {0} ;
 801cbee:	2500      	movs	r5, #0
	strcpy((char *)orp_update.resource_name,(const char *)ORP_RESOURCE_SENSOR_JSON_ROOT);
 801cbf0:	493a      	ldr	r1, [pc, #232]	; (801ccdc <sensorsclient_update_sensors_info+0x520>)
 801cbf2:	483b      	ldr	r0, [pc, #236]	; (801cce0 <sensorsclient_update_sensors_info+0x524>)
 801cbf4:	f000 f9d0 	bl	801cf98 <strcpy>
	char ORP_json_Update[ORP_MAX_RESOURCE_VALUE] = {0} ;
 801cbf8:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801cbfc:	4629      	mov	r1, r5
 801cbfe:	a80b      	add	r0, sp, #44	; 0x2c
 801cc00:	950a      	str	r5, [sp, #40]	; 0x28
 801cc02:	f000 f929 	bl	801ce58 <memset>
	sprintf(ORP_json_Update,"\\x22Temperature\\x22:%4.1f,\\x22Pressure\\x22:%6.1f,\\x22Humidity\\x22:%4.1f,\\x22Accelerometer/AXIS_X\\x22:%d,\\x22Accelerometer/AXIS_Y\\x22:%d,\\x22Accelerometer/AXIS_Z\\x22:%d",
 801cc06:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801cc0a:	f7e3 fcc5 	bl	8000598 <__aeabi_f2d>
 801cc0e:	460b      	mov	r3, r1
 801cc10:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cc14:	9106      	str	r1, [sp, #24]
 801cc16:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801cc1a:	9105      	str	r1, [sp, #20]
 801cc1c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cc20:	9104      	str	r1, [sp, #16]
 801cc22:	4602      	mov	r2, r0
 801cc24:	68b8      	ldr	r0, [r7, #8]
	orp_json_update.resource_value = (com_char_t *) ORP_json_Update;
 801cc26:	4c2f      	ldr	r4, [pc, #188]	; (801cce4 <sensorsclient_update_sensors_info+0x528>)
	sprintf(ORP_json_Update,"\\x22Temperature\\x22:%4.1f,\\x22Pressure\\x22:%6.1f,\\x22Humidity\\x22:%4.1f,\\x22Accelerometer/AXIS_X\\x22:%d,\\x22Accelerometer/AXIS_Y\\x22:%d,\\x22Accelerometer/AXIS_Z\\x22:%d",
 801cc28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801cc2c:	f7e3 fcb4 	bl	8000598 <__aeabi_f2d>
 801cc30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cc34:	68b0      	ldr	r0, [r6, #8]
 801cc36:	f7e3 fcaf 	bl	8000598 <__aeabi_f2d>
	char ORP_json_Update[ORP_MAX_RESOURCE_VALUE] = {0} ;
 801cc3a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
	sprintf(ORP_json_Update,"\\x22Temperature\\x22:%4.1f,\\x22Pressure\\x22:%6.1f,\\x22Humidity\\x22:%4.1f,\\x22Accelerometer/AXIS_X\\x22:%d,\\x22Accelerometer/AXIS_Y\\x22:%d,\\x22Accelerometer/AXIS_Z\\x22:%d",
 801cc3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc42:	e9cd 0100 	strd	r0, r1, [sp]
 801cc46:	4928      	ldr	r1, [pc, #160]	; (801cce8 <sensorsclient_update_sensors_info+0x52c>)
 801cc48:	4648      	mov	r0, r9
 801cc4a:	f000 f935 	bl	801ceb8 <sprintf>
	(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801cc4e:	22fa      	movs	r2, #250	; 0xfa
 801cc50:	4629      	mov	r1, r5
 801cc52:	4826      	ldr	r0, [pc, #152]	; (801ccec <sensorsclient_update_sensors_info+0x530>)
	orp_json_update.resource_value = (com_char_t *) ORP_json_Update;
 801cc54:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
	(void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801cc58:	f000 f8fe 	bl	801ce58 <memset>
	com_err = orp_set_json_resource(currentHandle,&orp_json_update,orp_rspbuf,&orp_error_code);
 801cc5c:	4824      	ldr	r0, [pc, #144]	; (801ccf0 <sensorsclient_update_sensors_info+0x534>)
 801cc5e:	4b25      	ldr	r3, [pc, #148]	; (801ccf4 <sensorsclient_update_sensors_info+0x538>)
 801cc60:	4a22      	ldr	r2, [pc, #136]	; (801ccec <sensorsclient_update_sensors_info+0x530>)
 801cc62:	7800      	ldrb	r0, [r0, #0]
 801cc64:	4621      	mov	r1, r4
 801cc66:	f7fe fc3b 	bl	801b4e0 <orp_set_json_resource>
 801cc6a:	4b23      	ldr	r3, [pc, #140]	; (801ccf8 <sensorsclient_update_sensors_info+0x53c>)
	PRINT_INFO("The Update of ACCELEROMETER_AXIS_X to Octave is %ld :",com_err)
 801cc6c:	4923      	ldr	r1, [pc, #140]	; (801ccfc <sensorsclient_update_sensors_info+0x540>)
	com_err = orp_set_json_resource(currentHandle,&orp_json_update,orp_rspbuf,&orp_error_code);
 801cc6e:	6018      	str	r0, [r3, #0]
 801cc70:	4602      	mov	r2, r0
	PRINT_INFO("The Update of ACCELEROMETER_AXIS_X to Octave is %ld :",com_err)
 801cc72:	4813      	ldr	r0, [pc, #76]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cc74:	f000 f920 	bl	801ceb8 <sprintf>
 801cc78:	4811      	ldr	r0, [pc, #68]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cc7a:	f7fb f95b 	bl	8017f34 <crs_strlen>
 801cc7e:	4a10      	ldr	r2, [pc, #64]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cc80:	b283      	uxth	r3, r0
 801cc82:	2101      	movs	r1, #1
 801cc84:	2007      	movs	r0, #7
 801cc86:	f7fb f993 	bl	8017fb0 <traceIF_itmPrint>
 801cc8a:	480d      	ldr	r0, [pc, #52]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cc8c:	f7fb f952 	bl	8017f34 <crs_strlen>
 801cc90:	4a0b      	ldr	r2, [pc, #44]	; (801ccc0 <sensorsclient_update_sensors_info+0x504>)
 801cc92:	b283      	uxth	r3, r0
 801cc94:	2101      	movs	r1, #1
 801cc96:	2007      	movs	r0, #7
 801cc98:	f7fb fbb0 	bl	80183fc <traceIF_uartPrint>
}
 801cc9c:	b063      	add	sp, #396	; 0x18c
 801cc9e:	ecbd 8b02 	vpop	{d8}
 801cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor_humidity.float_data = (float_t)0;
 801cca6:	2300      	movs	r3, #0
 801cca8:	60bb      	str	r3, [r7, #8]
 801ccaa:	e5d1      	b.n	801c850 <sensorsclient_update_sensors_info+0x94>
    sensor_pressure.float_data = (float_t)0;
 801ccac:	2300      	movs	r3, #0
 801ccae:	60b3      	str	r3, [r6, #8]
 801ccb0:	e60d      	b.n	801c8ce <sensorsclient_update_sensors_info+0x112>
	sensor_temperature.float_data = (float_t)0;
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	60a3      	str	r3, [r4, #8]
 801ccb6:	e64b      	b.n	801c950 <sensorsclient_update_sensors_info+0x194>
	accelerometer_info.AXIS_X  =  (int16_t)0;
 801ccb8:	6020      	str	r0, [r4, #0]
	accelerometer_info.AXIS_Z  =  (int16_t)0;
 801ccba:	80a0      	strh	r0, [r4, #4]
 801ccbc:	e738      	b.n	801cb30 <sensorsclient_update_sensors_info+0x374>
 801ccbe:	bf00      	nop
 801ccc0:	200094f8 	.word	0x200094f8
 801ccc4:	0802ca66 	.word	0x0802ca66
 801ccc8:	20008285 	.word	0x20008285
 801cccc:	0802cab5 	.word	0x0802cab5
 801ccd0:	200084cc 	.word	0x200084cc
 801ccd4:	0802caec 	.word	0x0802caec
 801ccd8:	20008368 	.word	0x20008368
 801ccdc:	0802caf5 	.word	0x0802caf5
 801cce0:	20008464 	.word	0x20008464
 801cce4:	20008300 	.word	0x20008300
 801cce8:	0802caff 	.word	0x0802caff
 801ccec:	2000836a 	.word	0x2000836a
 801ccf0:	200098fa 	.word	0x200098fa
 801ccf4:	200098fc 	.word	0x200098fc
 801ccf8:	20009900 	.word	0x20009900
 801ccfc:	0802c9be 	.word	0x0802c9be

0801cd00 <sensorsclient_thread>:
{
 801cd00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    (void)rtosalMessageQueueGet(cellular_app_sensorsclient.queue_id, &msg_queue, RTOSAL_WAIT_FOREVER);
 801cd04:	4f29      	ldr	r7, [pc, #164]	; (801cdac <sensorsclient_thread+0xac>)
            (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801cd06:	4c2a      	ldr	r4, [pc, #168]	; (801cdb0 <sensorsclient_thread+0xb0>)
            com_err = orp_get_resource(currentHandle,(uint8_t *) ORP_IS_CONNECTED,
 801cd08:	4e2a      	ldr	r6, [pc, #168]	; (801cdb4 <sensorsclient_thread+0xb4>)
    (void)rtosalMessageQueueGet(cellular_app_sensorsclient.queue_id, &msg_queue, RTOSAL_WAIT_FOREVER);
 801cd0a:	68f8      	ldr	r0, [r7, #12]
    msg_queue = 0U; /* Re-initialize msg_queue to impossible value */
 801cd0c:	2500      	movs	r5, #0
    (void)rtosalMessageQueueGet(cellular_app_sensorsclient.queue_id, &msg_queue, RTOSAL_WAIT_FOREVER);
 801cd0e:	f04f 32ff 	mov.w	r2, #4294967295
 801cd12:	a901      	add	r1, sp, #4
    msg_queue = 0U; /* Re-initialize msg_queue to impossible value */
 801cd14:	9501      	str	r5, [sp, #4]
    (void)rtosalMessageQueueGet(cellular_app_sensorsclient.queue_id, &msg_queue, RTOSAL_WAIT_FOREVER);
 801cd16:	f7fb f86b 	bl	8017df0 <rtosalMessageQueueGet>
    if (msg_queue != 0U)
 801cd1a:	9b01      	ldr	r3, [sp, #4]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d0f4      	beq.n	801cd0a <sensorsclient_thread+0xa>
      msg_type = GET_CELLULAR_APP_MSG_TYPE(msg_queue);
 801cd20:	0e1a      	lsrs	r2, r3, #24
      switch (msg_type)
 801cd22:	2a02      	cmp	r2, #2
      msg_id   = GET_CELLULAR_APP_MSG_ID(msg_queue);
 801cd24:	f3c3 4307 	ubfx	r3, r3, #16, #8
      switch (msg_type)
 801cd28:	d003      	beq.n	801cd32 <sensorsclient_thread+0x32>
 801cd2a:	2a03      	cmp	r2, #3
 801cd2c:	d01c      	beq.n	801cd68 <sensorsclient_thread+0x68>
          __NOP();
 801cd2e:	bf00      	nop
          break;
 801cd30:	e7eb      	b.n	801cd0a <sensorsclient_thread+0xa>
          if (msg_id == SENSORSCLIENT_CELLULAR_INFO_CHANGE_ID)
 801cd32:	2b04      	cmp	r3, #4
 801cd34:	d1fb      	bne.n	801cd2e <sensorsclient_thread+0x2e>
            (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801cd36:	4629      	mov	r1, r5
 801cd38:	22fa      	movs	r2, #250	; 0xfa
 801cd3a:	4620      	mov	r0, r4
 801cd3c:	f000 f88c 	bl	801ce58 <memset>
            com_err = orp_get_resource(currentHandle,(uint8_t *) ORP_IS_CONNECTED,
 801cd40:	4622      	mov	r2, r4
 801cd42:	4b1d      	ldr	r3, [pc, #116]	; (801cdb8 <sensorsclient_thread+0xb8>)
 801cd44:	491d      	ldr	r1, [pc, #116]	; (801cdbc <sensorsclient_thread+0xbc>)
 801cd46:	7830      	ldrb	r0, [r6, #0]
 801cd48:	f7fe fb46 	bl	801b3d8 <orp_get_resource>
 801cd4c:	4b1c      	ldr	r3, [pc, #112]	; (801cdc0 <sensorsclient_thread+0xc0>)
            if(strcmp((const char *)(orp_rspbuf),"true") == 0)
 801cd4e:	491d      	ldr	r1, [pc, #116]	; (801cdc4 <sensorsclient_thread+0xc4>)
            com_err = orp_get_resource(currentHandle,(uint8_t *) ORP_IS_CONNECTED,
 801cd50:	6018      	str	r0, [r3, #0]
            if(strcmp((const char *)(orp_rspbuf),"true") == 0)
 801cd52:	4620      	mov	r0, r4
 801cd54:	f7e3 fa54 	bl	8000200 <strcmp>
 801cd58:	4b1b      	ldr	r3, [pc, #108]	; (801cdc8 <sensorsclient_thread+0xc8>)
 801cd5a:	fab0 f080 	clz	r0, r0
 801cd5e:	0940      	lsrs	r0, r0, #5
 801cd60:	7018      	strb	r0, [r3, #0]
            sensorsclient_update_cellular_info();
 801cd62:	f7ff f909 	bl	801bf78 <sensorsclient_update_cellular_info>
 801cd66:	e7d0      	b.n	801cd0a <sensorsclient_thread+0xa>
          if (msg_id == SENSORSCLIENT_SENSORS_READ_ID)
 801cd68:	2b05      	cmp	r3, #5
 801cd6a:	d1ce      	bne.n	801cd0a <sensorsclient_thread+0xa>
            if(orpReady == false)
 801cd6c:	4d16      	ldr	r5, [pc, #88]	; (801cdc8 <sensorsclient_thread+0xc8>)
 801cd6e:	f895 8000 	ldrb.w	r8, [r5]
 801cd72:	f1b8 0f00 	cmp.w	r8, #0
 801cd76:	d113      	bne.n	801cda0 <sensorsclient_thread+0xa0>
              (void) memset((void *)orp_rspbuf, 0, ORP_MAX_RSP_SIZE);
 801cd78:	22fa      	movs	r2, #250	; 0xfa
 801cd7a:	4641      	mov	r1, r8
 801cd7c:	4620      	mov	r0, r4
 801cd7e:	f000 f86b 	bl	801ce58 <memset>
              com_err = orp_get_resource(currentHandle,(uint8_t *) ORP_IS_CONNECTED,
 801cd82:	4b0d      	ldr	r3, [pc, #52]	; (801cdb8 <sensorsclient_thread+0xb8>)
 801cd84:	490d      	ldr	r1, [pc, #52]	; (801cdbc <sensorsclient_thread+0xbc>)
 801cd86:	7830      	ldrb	r0, [r6, #0]
 801cd88:	4622      	mov	r2, r4
 801cd8a:	f7fe fb25 	bl	801b3d8 <orp_get_resource>
 801cd8e:	4b0c      	ldr	r3, [pc, #48]	; (801cdc0 <sensorsclient_thread+0xc0>)
              if(strcmp((const char *)(orp_rspbuf),"true") == 0)
 801cd90:	490c      	ldr	r1, [pc, #48]	; (801cdc4 <sensorsclient_thread+0xc4>)
              com_err = orp_get_resource(currentHandle,(uint8_t *) ORP_IS_CONNECTED,
 801cd92:	6018      	str	r0, [r3, #0]
              if(strcmp((const char *)(orp_rspbuf),"true") == 0)
 801cd94:	4620      	mov	r0, r4
 801cd96:	f7e3 fa33 	bl	8000200 <strcmp>
 801cd9a:	b920      	cbnz	r0, 801cda6 <sensorsclient_thread+0xa6>
                orpReady = true;
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	702b      	strb	r3, [r5, #0]
            sensorsclient_update_sensors_info();
 801cda0:	f7ff fd0c 	bl	801c7bc <sensorsclient_update_sensors_info>
 801cda4:	e7b1      	b.n	801cd0a <sensorsclient_thread+0xa>
                orpReady = false;
 801cda6:	f885 8000 	strb.w	r8, [r5]
 801cdaa:	e7f9      	b.n	801cda0 <sensorsclient_thread+0xa0>
 801cdac:	20008270 	.word	0x20008270
 801cdb0:	2000836a 	.word	0x2000836a
 801cdb4:	200098fa 	.word	0x200098fa
 801cdb8:	200098fc 	.word	0x200098fc
 801cdbc:	0802c20d 	.word	0x0802c20d
 801cdc0:	20009900 	.word	0x20009900
 801cdc4:	0802cba7 	.word	0x0802cba7
 801cdc8:	200082fd 	.word	0x200082fd

0801cdcc <__errno>:
 801cdcc:	4b01      	ldr	r3, [pc, #4]	; (801cdd4 <__errno+0x8>)
 801cdce:	6818      	ldr	r0, [r3, #0]
 801cdd0:	4770      	bx	lr
 801cdd2:	bf00      	nop
 801cdd4:	20000624 	.word	0x20000624

0801cdd8 <__libc_init_array>:
 801cdd8:	b570      	push	{r4, r5, r6, lr}
 801cdda:	4d0d      	ldr	r5, [pc, #52]	; (801ce10 <__libc_init_array+0x38>)
 801cddc:	4c0d      	ldr	r4, [pc, #52]	; (801ce14 <__libc_init_array+0x3c>)
 801cdde:	1b64      	subs	r4, r4, r5
 801cde0:	10a4      	asrs	r4, r4, #2
 801cde2:	2600      	movs	r6, #0
 801cde4:	42a6      	cmp	r6, r4
 801cde6:	d109      	bne.n	801cdfc <__libc_init_array+0x24>
 801cde8:	4d0b      	ldr	r5, [pc, #44]	; (801ce18 <__libc_init_array+0x40>)
 801cdea:	4c0c      	ldr	r4, [pc, #48]	; (801ce1c <__libc_init_array+0x44>)
 801cdec:	f004 fdbe 	bl	802196c <_init>
 801cdf0:	1b64      	subs	r4, r4, r5
 801cdf2:	10a4      	asrs	r4, r4, #2
 801cdf4:	2600      	movs	r6, #0
 801cdf6:	42a6      	cmp	r6, r4
 801cdf8:	d105      	bne.n	801ce06 <__libc_init_array+0x2e>
 801cdfa:	bd70      	pop	{r4, r5, r6, pc}
 801cdfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce00:	4798      	blx	r3
 801ce02:	3601      	adds	r6, #1
 801ce04:	e7ee      	b.n	801cde4 <__libc_init_array+0xc>
 801ce06:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce0a:	4798      	blx	r3
 801ce0c:	3601      	adds	r6, #1
 801ce0e:	e7f2      	b.n	801cdf6 <__libc_init_array+0x1e>
 801ce10:	0802cf50 	.word	0x0802cf50
 801ce14:	0802cf50 	.word	0x0802cf50
 801ce18:	0802cf50 	.word	0x0802cf50
 801ce1c:	0802cf58 	.word	0x0802cf58

0801ce20 <memcmp>:
 801ce20:	b530      	push	{r4, r5, lr}
 801ce22:	3901      	subs	r1, #1
 801ce24:	2400      	movs	r4, #0
 801ce26:	42a2      	cmp	r2, r4
 801ce28:	d101      	bne.n	801ce2e <memcmp+0xe>
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	e005      	b.n	801ce3a <memcmp+0x1a>
 801ce2e:	5d03      	ldrb	r3, [r0, r4]
 801ce30:	3401      	adds	r4, #1
 801ce32:	5d0d      	ldrb	r5, [r1, r4]
 801ce34:	42ab      	cmp	r3, r5
 801ce36:	d0f6      	beq.n	801ce26 <memcmp+0x6>
 801ce38:	1b58      	subs	r0, r3, r5
 801ce3a:	bd30      	pop	{r4, r5, pc}

0801ce3c <memcpy>:
 801ce3c:	440a      	add	r2, r1
 801ce3e:	4291      	cmp	r1, r2
 801ce40:	f100 33ff 	add.w	r3, r0, #4294967295
 801ce44:	d100      	bne.n	801ce48 <memcpy+0xc>
 801ce46:	4770      	bx	lr
 801ce48:	b510      	push	{r4, lr}
 801ce4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ce4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ce52:	4291      	cmp	r1, r2
 801ce54:	d1f9      	bne.n	801ce4a <memcpy+0xe>
 801ce56:	bd10      	pop	{r4, pc}

0801ce58 <memset>:
 801ce58:	4402      	add	r2, r0
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	4293      	cmp	r3, r2
 801ce5e:	d100      	bne.n	801ce62 <memset+0xa>
 801ce60:	4770      	bx	lr
 801ce62:	f803 1b01 	strb.w	r1, [r3], #1
 801ce66:	e7f9      	b.n	801ce5c <memset+0x4>

0801ce68 <srand>:
 801ce68:	4b03      	ldr	r3, [pc, #12]	; (801ce78 <srand+0x10>)
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 801ce72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801ce76:	4770      	bx	lr
 801ce78:	20000624 	.word	0x20000624

0801ce7c <rand>:
 801ce7c:	4b0b      	ldr	r3, [pc, #44]	; (801ceac <rand+0x30>)
 801ce7e:	480c      	ldr	r0, [pc, #48]	; (801ceb0 <rand+0x34>)
 801ce80:	6819      	ldr	r1, [r3, #0]
 801ce82:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801ce86:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801ce8a:	b510      	push	{r4, lr}
 801ce8c:	4c09      	ldr	r4, [pc, #36]	; (801ceb4 <rand+0x38>)
 801ce8e:	4350      	muls	r0, r2
 801ce90:	fb04 0003 	mla	r0, r4, r3, r0
 801ce94:	fba2 3404 	umull	r3, r4, r2, r4
 801ce98:	1c5a      	adds	r2, r3, #1
 801ce9a:	4404      	add	r4, r0
 801ce9c:	f144 0000 	adc.w	r0, r4, #0
 801cea0:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801cea4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801cea8:	bd10      	pop	{r4, pc}
 801ceaa:	bf00      	nop
 801ceac:	20000624 	.word	0x20000624
 801ceb0:	5851f42d 	.word	0x5851f42d
 801ceb4:	4c957f2d 	.word	0x4c957f2d

0801ceb8 <sprintf>:
 801ceb8:	b40e      	push	{r1, r2, r3}
 801ceba:	b500      	push	{lr}
 801cebc:	b09c      	sub	sp, #112	; 0x70
 801cebe:	ab1d      	add	r3, sp, #116	; 0x74
 801cec0:	9002      	str	r0, [sp, #8]
 801cec2:	9006      	str	r0, [sp, #24]
 801cec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cec8:	4809      	ldr	r0, [pc, #36]	; (801cef0 <sprintf+0x38>)
 801ceca:	9107      	str	r1, [sp, #28]
 801cecc:	9104      	str	r1, [sp, #16]
 801cece:	4909      	ldr	r1, [pc, #36]	; (801cef4 <sprintf+0x3c>)
 801ced0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ced4:	9105      	str	r1, [sp, #20]
 801ced6:	6800      	ldr	r0, [r0, #0]
 801ced8:	9301      	str	r3, [sp, #4]
 801ceda:	a902      	add	r1, sp, #8
 801cedc:	f000 f8d0 	bl	801d080 <_svfprintf_r>
 801cee0:	9b02      	ldr	r3, [sp, #8]
 801cee2:	2200      	movs	r2, #0
 801cee4:	701a      	strb	r2, [r3, #0]
 801cee6:	b01c      	add	sp, #112	; 0x70
 801cee8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ceec:	b003      	add	sp, #12
 801ceee:	4770      	bx	lr
 801cef0:	20000624 	.word	0x20000624
 801cef4:	ffff0208 	.word	0xffff0208

0801cef8 <__sread>:
 801cef8:	b510      	push	{r4, lr}
 801cefa:	460c      	mov	r4, r1
 801cefc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf00:	f003 f80a 	bl	801ff18 <_read_r>
 801cf04:	2800      	cmp	r0, #0
 801cf06:	bfab      	itete	ge
 801cf08:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801cf0a:	89a3      	ldrhlt	r3, [r4, #12]
 801cf0c:	181b      	addge	r3, r3, r0
 801cf0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cf12:	bfac      	ite	ge
 801cf14:	6523      	strge	r3, [r4, #80]	; 0x50
 801cf16:	81a3      	strhlt	r3, [r4, #12]
 801cf18:	bd10      	pop	{r4, pc}

0801cf1a <__swrite>:
 801cf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf1e:	461f      	mov	r7, r3
 801cf20:	898b      	ldrh	r3, [r1, #12]
 801cf22:	05db      	lsls	r3, r3, #23
 801cf24:	4605      	mov	r5, r0
 801cf26:	460c      	mov	r4, r1
 801cf28:	4616      	mov	r6, r2
 801cf2a:	d505      	bpl.n	801cf38 <__swrite+0x1e>
 801cf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf30:	2302      	movs	r3, #2
 801cf32:	2200      	movs	r2, #0
 801cf34:	f002 fa4e 	bl	801f3d4 <_lseek_r>
 801cf38:	89a3      	ldrh	r3, [r4, #12]
 801cf3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cf42:	81a3      	strh	r3, [r4, #12]
 801cf44:	4632      	mov	r2, r6
 801cf46:	463b      	mov	r3, r7
 801cf48:	4628      	mov	r0, r5
 801cf4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf4e:	f001 ba77 	b.w	801e440 <_write_r>

0801cf52 <__sseek>:
 801cf52:	b510      	push	{r4, lr}
 801cf54:	460c      	mov	r4, r1
 801cf56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf5a:	f002 fa3b 	bl	801f3d4 <_lseek_r>
 801cf5e:	1c43      	adds	r3, r0, #1
 801cf60:	89a3      	ldrh	r3, [r4, #12]
 801cf62:	bf15      	itete	ne
 801cf64:	6520      	strne	r0, [r4, #80]	; 0x50
 801cf66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cf6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cf6e:	81a3      	strheq	r3, [r4, #12]
 801cf70:	bf18      	it	ne
 801cf72:	81a3      	strhne	r3, [r4, #12]
 801cf74:	bd10      	pop	{r4, pc}

0801cf76 <__sclose>:
 801cf76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf7a:	f001 ba83 	b.w	801e484 <_close_r>

0801cf7e <strchr>:
 801cf7e:	b2c9      	uxtb	r1, r1
 801cf80:	4603      	mov	r3, r0
 801cf82:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf86:	b11a      	cbz	r2, 801cf90 <strchr+0x12>
 801cf88:	428a      	cmp	r2, r1
 801cf8a:	d1f9      	bne.n	801cf80 <strchr+0x2>
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	4770      	bx	lr
 801cf90:	2900      	cmp	r1, #0
 801cf92:	bf18      	it	ne
 801cf94:	2300      	movne	r3, #0
 801cf96:	e7f9      	b.n	801cf8c <strchr+0xe>

0801cf98 <strcpy>:
 801cf98:	4603      	mov	r3, r0
 801cf9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cf9e:	f803 2b01 	strb.w	r2, [r3], #1
 801cfa2:	2a00      	cmp	r2, #0
 801cfa4:	d1f9      	bne.n	801cf9a <strcpy+0x2>
 801cfa6:	4770      	bx	lr

0801cfa8 <strncmp>:
 801cfa8:	b510      	push	{r4, lr}
 801cfaa:	b16a      	cbz	r2, 801cfc8 <strncmp+0x20>
 801cfac:	3901      	subs	r1, #1
 801cfae:	1884      	adds	r4, r0, r2
 801cfb0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801cfb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cfb8:	4293      	cmp	r3, r2
 801cfba:	d103      	bne.n	801cfc4 <strncmp+0x1c>
 801cfbc:	42a0      	cmp	r0, r4
 801cfbe:	d001      	beq.n	801cfc4 <strncmp+0x1c>
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d1f5      	bne.n	801cfb0 <strncmp+0x8>
 801cfc4:	1a98      	subs	r0, r3, r2
 801cfc6:	bd10      	pop	{r4, pc}
 801cfc8:	4610      	mov	r0, r2
 801cfca:	e7fc      	b.n	801cfc6 <strncmp+0x1e>

0801cfcc <strncpy>:
 801cfcc:	b510      	push	{r4, lr}
 801cfce:	3901      	subs	r1, #1
 801cfd0:	4603      	mov	r3, r0
 801cfd2:	b132      	cbz	r2, 801cfe2 <strncpy+0x16>
 801cfd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cfd8:	f803 4b01 	strb.w	r4, [r3], #1
 801cfdc:	3a01      	subs	r2, #1
 801cfde:	2c00      	cmp	r4, #0
 801cfe0:	d1f7      	bne.n	801cfd2 <strncpy+0x6>
 801cfe2:	441a      	add	r2, r3
 801cfe4:	2100      	movs	r1, #0
 801cfe6:	4293      	cmp	r3, r2
 801cfe8:	d100      	bne.n	801cfec <strncpy+0x20>
 801cfea:	bd10      	pop	{r4, pc}
 801cfec:	f803 1b01 	strb.w	r1, [r3], #1
 801cff0:	e7f9      	b.n	801cfe6 <strncpy+0x1a>

0801cff2 <strstr>:
 801cff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cff4:	780c      	ldrb	r4, [r1, #0]
 801cff6:	b164      	cbz	r4, 801d012 <strstr+0x20>
 801cff8:	4603      	mov	r3, r0
 801cffa:	781a      	ldrb	r2, [r3, #0]
 801cffc:	4618      	mov	r0, r3
 801cffe:	1c5e      	adds	r6, r3, #1
 801d000:	b90a      	cbnz	r2, 801d006 <strstr+0x14>
 801d002:	4610      	mov	r0, r2
 801d004:	e005      	b.n	801d012 <strstr+0x20>
 801d006:	4294      	cmp	r4, r2
 801d008:	d108      	bne.n	801d01c <strstr+0x2a>
 801d00a:	460d      	mov	r5, r1
 801d00c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801d010:	b902      	cbnz	r2, 801d014 <strstr+0x22>
 801d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d014:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801d018:	4297      	cmp	r7, r2
 801d01a:	d0f7      	beq.n	801d00c <strstr+0x1a>
 801d01c:	4633      	mov	r3, r6
 801d01e:	e7ec      	b.n	801cffa <strstr+0x8>

0801d020 <strtok>:
 801d020:	4b02      	ldr	r3, [pc, #8]	; (801d02c <strtok+0xc>)
 801d022:	681a      	ldr	r2, [r3, #0]
 801d024:	2301      	movs	r3, #1
 801d026:	325c      	adds	r2, #92	; 0x5c
 801d028:	f000 b802 	b.w	801d030 <__strtok_r>
 801d02c:	20000624 	.word	0x20000624

0801d030 <__strtok_r>:
 801d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d032:	b908      	cbnz	r0, 801d038 <__strtok_r+0x8>
 801d034:	6810      	ldr	r0, [r2, #0]
 801d036:	b188      	cbz	r0, 801d05c <__strtok_r+0x2c>
 801d038:	4604      	mov	r4, r0
 801d03a:	4620      	mov	r0, r4
 801d03c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d040:	460f      	mov	r7, r1
 801d042:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d046:	b91e      	cbnz	r6, 801d050 <__strtok_r+0x20>
 801d048:	b965      	cbnz	r5, 801d064 <__strtok_r+0x34>
 801d04a:	6015      	str	r5, [r2, #0]
 801d04c:	4628      	mov	r0, r5
 801d04e:	e005      	b.n	801d05c <__strtok_r+0x2c>
 801d050:	42b5      	cmp	r5, r6
 801d052:	d1f6      	bne.n	801d042 <__strtok_r+0x12>
 801d054:	2b00      	cmp	r3, #0
 801d056:	d1f0      	bne.n	801d03a <__strtok_r+0xa>
 801d058:	6014      	str	r4, [r2, #0]
 801d05a:	7003      	strb	r3, [r0, #0]
 801d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d05e:	461c      	mov	r4, r3
 801d060:	e00c      	b.n	801d07c <__strtok_r+0x4c>
 801d062:	b915      	cbnz	r5, 801d06a <__strtok_r+0x3a>
 801d064:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d068:	460e      	mov	r6, r1
 801d06a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d06e:	42ab      	cmp	r3, r5
 801d070:	d1f7      	bne.n	801d062 <__strtok_r+0x32>
 801d072:	2b00      	cmp	r3, #0
 801d074:	d0f3      	beq.n	801d05e <__strtok_r+0x2e>
 801d076:	2300      	movs	r3, #0
 801d078:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d07c:	6014      	str	r4, [r2, #0]
 801d07e:	e7ed      	b.n	801d05c <__strtok_r+0x2c>

0801d080 <_svfprintf_r>:
 801d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d084:	ed2d 8b04 	vpush	{d8-d9}
 801d088:	b0cf      	sub	sp, #316	; 0x13c
 801d08a:	4689      	mov	r9, r1
 801d08c:	4693      	mov	fp, r2
 801d08e:	461e      	mov	r6, r3
 801d090:	4682      	mov	sl, r0
 801d092:	f002 f997 	bl	801f3c4 <_localeconv_r>
 801d096:	6803      	ldr	r3, [r0, #0]
 801d098:	9313      	str	r3, [sp, #76]	; 0x4c
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7e3 f8ba 	bl	8000214 <strlen>
 801d0a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d0a4:	900e      	str	r0, [sp, #56]	; 0x38
 801d0a6:	0618      	lsls	r0, r3, #24
 801d0a8:	d51a      	bpl.n	801d0e0 <_svfprintf_r+0x60>
 801d0aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d0ae:	b9bb      	cbnz	r3, 801d0e0 <_svfprintf_r+0x60>
 801d0b0:	2140      	movs	r1, #64	; 0x40
 801d0b2:	4650      	mov	r0, sl
 801d0b4:	f002 f9a0 	bl	801f3f8 <_malloc_r>
 801d0b8:	f8c9 0000 	str.w	r0, [r9]
 801d0bc:	f8c9 0010 	str.w	r0, [r9, #16]
 801d0c0:	b958      	cbnz	r0, 801d0da <_svfprintf_r+0x5a>
 801d0c2:	230c      	movs	r3, #12
 801d0c4:	f8ca 3000 	str.w	r3, [sl]
 801d0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0cc:	930f      	str	r3, [sp, #60]	; 0x3c
 801d0ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d0d0:	b04f      	add	sp, #316	; 0x13c
 801d0d2:	ecbd 8b04 	vpop	{d8-d9}
 801d0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0da:	2340      	movs	r3, #64	; 0x40
 801d0dc:	f8c9 3014 	str.w	r3, [r9, #20]
 801d0e0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801d330 <_svfprintf_r+0x2b0>
 801d0e4:	2500      	movs	r5, #0
 801d0e6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801d0ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d0ee:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801d0f2:	ac25      	add	r4, sp, #148	; 0x94
 801d0f4:	9422      	str	r4, [sp, #136]	; 0x88
 801d0f6:	9505      	str	r5, [sp, #20]
 801d0f8:	950a      	str	r5, [sp, #40]	; 0x28
 801d0fa:	9512      	str	r5, [sp, #72]	; 0x48
 801d0fc:	9514      	str	r5, [sp, #80]	; 0x50
 801d0fe:	950f      	str	r5, [sp, #60]	; 0x3c
 801d100:	465b      	mov	r3, fp
 801d102:	461d      	mov	r5, r3
 801d104:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d108:	b10a      	cbz	r2, 801d10e <_svfprintf_r+0x8e>
 801d10a:	2a25      	cmp	r2, #37	; 0x25
 801d10c:	d1f9      	bne.n	801d102 <_svfprintf_r+0x82>
 801d10e:	ebb5 070b 	subs.w	r7, r5, fp
 801d112:	d00d      	beq.n	801d130 <_svfprintf_r+0xb0>
 801d114:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d116:	443b      	add	r3, r7
 801d118:	9324      	str	r3, [sp, #144]	; 0x90
 801d11a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d11c:	3301      	adds	r3, #1
 801d11e:	2b07      	cmp	r3, #7
 801d120:	e9c4 b700 	strd	fp, r7, [r4]
 801d124:	9323      	str	r3, [sp, #140]	; 0x8c
 801d126:	dc79      	bgt.n	801d21c <_svfprintf_r+0x19c>
 801d128:	3408      	adds	r4, #8
 801d12a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d12c:	443b      	add	r3, r7
 801d12e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d130:	782b      	ldrb	r3, [r5, #0]
 801d132:	2b00      	cmp	r3, #0
 801d134:	f001 8140 	beq.w	801e3b8 <_svfprintf_r+0x1338>
 801d138:	2300      	movs	r3, #0
 801d13a:	f04f 32ff 	mov.w	r2, #4294967295
 801d13e:	3501      	adds	r5, #1
 801d140:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d144:	9204      	str	r2, [sp, #16]
 801d146:	9310      	str	r3, [sp, #64]	; 0x40
 801d148:	4698      	mov	r8, r3
 801d14a:	270a      	movs	r7, #10
 801d14c:	212b      	movs	r1, #43	; 0x2b
 801d14e:	462a      	mov	r2, r5
 801d150:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d154:	9307      	str	r3, [sp, #28]
 801d156:	920b      	str	r2, [sp, #44]	; 0x2c
 801d158:	9b07      	ldr	r3, [sp, #28]
 801d15a:	3b20      	subs	r3, #32
 801d15c:	2b5a      	cmp	r3, #90	; 0x5a
 801d15e:	f200 85b4 	bhi.w	801dcca <_svfprintf_r+0xc4a>
 801d162:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d166:	007e      	.short	0x007e
 801d168:	05b205b2 	.word	0x05b205b2
 801d16c:	05b20086 	.word	0x05b20086
 801d170:	05b205b2 	.word	0x05b205b2
 801d174:	05b20065 	.word	0x05b20065
 801d178:	008905b2 	.word	0x008905b2
 801d17c:	05b20093 	.word	0x05b20093
 801d180:	00960090 	.word	0x00960090
 801d184:	00b305b2 	.word	0x00b305b2
 801d188:	00b600b6 	.word	0x00b600b6
 801d18c:	00b600b6 	.word	0x00b600b6
 801d190:	00b600b6 	.word	0x00b600b6
 801d194:	00b600b6 	.word	0x00b600b6
 801d198:	05b200b6 	.word	0x05b200b6
 801d19c:	05b205b2 	.word	0x05b205b2
 801d1a0:	05b205b2 	.word	0x05b205b2
 801d1a4:	05b205b2 	.word	0x05b205b2
 801d1a8:	05b20127 	.word	0x05b20127
 801d1ac:	00fc00e9 	.word	0x00fc00e9
 801d1b0:	01270127 	.word	0x01270127
 801d1b4:	05b20127 	.word	0x05b20127
 801d1b8:	05b205b2 	.word	0x05b205b2
 801d1bc:	00c605b2 	.word	0x00c605b2
 801d1c0:	05b205b2 	.word	0x05b205b2
 801d1c4:	05b20492 	.word	0x05b20492
 801d1c8:	05b205b2 	.word	0x05b205b2
 801d1cc:	05b204d9 	.word	0x05b204d9
 801d1d0:	05b204fa 	.word	0x05b204fa
 801d1d4:	051905b2 	.word	0x051905b2
 801d1d8:	05b205b2 	.word	0x05b205b2
 801d1dc:	05b205b2 	.word	0x05b205b2
 801d1e0:	05b205b2 	.word	0x05b205b2
 801d1e4:	05b205b2 	.word	0x05b205b2
 801d1e8:	05b20127 	.word	0x05b20127
 801d1ec:	00fe00e9 	.word	0x00fe00e9
 801d1f0:	01270127 	.word	0x01270127
 801d1f4:	00c90127 	.word	0x00c90127
 801d1f8:	00dd00fe 	.word	0x00dd00fe
 801d1fc:	00d605b2 	.word	0x00d605b2
 801d200:	046f05b2 	.word	0x046f05b2
 801d204:	04c80494 	.word	0x04c80494
 801d208:	05b200dd 	.word	0x05b200dd
 801d20c:	007c04d9 	.word	0x007c04d9
 801d210:	05b204fc 	.word	0x05b204fc
 801d214:	053605b2 	.word	0x053605b2
 801d218:	007c05b2 	.word	0x007c05b2
 801d21c:	aa22      	add	r2, sp, #136	; 0x88
 801d21e:	4649      	mov	r1, r9
 801d220:	4650      	mov	r0, sl
 801d222:	f003 f879 	bl	8020318 <__ssprint_r>
 801d226:	2800      	cmp	r0, #0
 801d228:	f040 8132 	bne.w	801d490 <_svfprintf_r+0x410>
 801d22c:	ac25      	add	r4, sp, #148	; 0x94
 801d22e:	e77c      	b.n	801d12a <_svfprintf_r+0xaa>
 801d230:	4650      	mov	r0, sl
 801d232:	f002 f8c7 	bl	801f3c4 <_localeconv_r>
 801d236:	6843      	ldr	r3, [r0, #4]
 801d238:	9314      	str	r3, [sp, #80]	; 0x50
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7e2 ffea 	bl	8000214 <strlen>
 801d240:	9012      	str	r0, [sp, #72]	; 0x48
 801d242:	4650      	mov	r0, sl
 801d244:	f002 f8be 	bl	801f3c4 <_localeconv_r>
 801d248:	6883      	ldr	r3, [r0, #8]
 801d24a:	930a      	str	r3, [sp, #40]	; 0x28
 801d24c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d24e:	212b      	movs	r1, #43	; 0x2b
 801d250:	b12b      	cbz	r3, 801d25e <_svfprintf_r+0x1de>
 801d252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d254:	b11b      	cbz	r3, 801d25e <_svfprintf_r+0x1de>
 801d256:	781b      	ldrb	r3, [r3, #0]
 801d258:	b10b      	cbz	r3, 801d25e <_svfprintf_r+0x1de>
 801d25a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801d25e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d260:	e775      	b.n	801d14e <_svfprintf_r+0xce>
 801d262:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d266:	2b00      	cmp	r3, #0
 801d268:	d1f9      	bne.n	801d25e <_svfprintf_r+0x1de>
 801d26a:	2320      	movs	r3, #32
 801d26c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d270:	e7f5      	b.n	801d25e <_svfprintf_r+0x1de>
 801d272:	f048 0801 	orr.w	r8, r8, #1
 801d276:	e7f2      	b.n	801d25e <_svfprintf_r+0x1de>
 801d278:	f856 3b04 	ldr.w	r3, [r6], #4
 801d27c:	9310      	str	r3, [sp, #64]	; 0x40
 801d27e:	2b00      	cmp	r3, #0
 801d280:	daed      	bge.n	801d25e <_svfprintf_r+0x1de>
 801d282:	425b      	negs	r3, r3
 801d284:	9310      	str	r3, [sp, #64]	; 0x40
 801d286:	f048 0804 	orr.w	r8, r8, #4
 801d28a:	e7e8      	b.n	801d25e <_svfprintf_r+0x1de>
 801d28c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801d290:	e7e5      	b.n	801d25e <_svfprintf_r+0x1de>
 801d292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d294:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d298:	9307      	str	r3, [sp, #28]
 801d29a:	2b2a      	cmp	r3, #42	; 0x2a
 801d29c:	d113      	bne.n	801d2c6 <_svfprintf_r+0x246>
 801d29e:	f856 0b04 	ldr.w	r0, [r6], #4
 801d2a2:	920b      	str	r2, [sp, #44]	; 0x2c
 801d2a4:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801d2a8:	9304      	str	r3, [sp, #16]
 801d2aa:	e7d8      	b.n	801d25e <_svfprintf_r+0x1de>
 801d2ac:	9804      	ldr	r0, [sp, #16]
 801d2ae:	fb07 3300 	mla	r3, r7, r0, r3
 801d2b2:	9304      	str	r3, [sp, #16]
 801d2b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d2b8:	9307      	str	r3, [sp, #28]
 801d2ba:	9b07      	ldr	r3, [sp, #28]
 801d2bc:	3b30      	subs	r3, #48	; 0x30
 801d2be:	2b09      	cmp	r3, #9
 801d2c0:	d9f4      	bls.n	801d2ac <_svfprintf_r+0x22c>
 801d2c2:	920b      	str	r2, [sp, #44]	; 0x2c
 801d2c4:	e748      	b.n	801d158 <_svfprintf_r+0xd8>
 801d2c6:	2300      	movs	r3, #0
 801d2c8:	9304      	str	r3, [sp, #16]
 801d2ca:	e7f6      	b.n	801d2ba <_svfprintf_r+0x23a>
 801d2cc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801d2d0:	e7c5      	b.n	801d25e <_svfprintf_r+0x1de>
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d2d6:	9310      	str	r3, [sp, #64]	; 0x40
 801d2d8:	9b07      	ldr	r3, [sp, #28]
 801d2da:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d2dc:	3b30      	subs	r3, #48	; 0x30
 801d2de:	fb07 3300 	mla	r3, r7, r0, r3
 801d2e2:	9310      	str	r3, [sp, #64]	; 0x40
 801d2e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d2e8:	9307      	str	r3, [sp, #28]
 801d2ea:	3b30      	subs	r3, #48	; 0x30
 801d2ec:	2b09      	cmp	r3, #9
 801d2ee:	d9f3      	bls.n	801d2d8 <_svfprintf_r+0x258>
 801d2f0:	e7e7      	b.n	801d2c2 <_svfprintf_r+0x242>
 801d2f2:	f048 0808 	orr.w	r8, r8, #8
 801d2f6:	e7b2      	b.n	801d25e <_svfprintf_r+0x1de>
 801d2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2fa:	781b      	ldrb	r3, [r3, #0]
 801d2fc:	2b68      	cmp	r3, #104	; 0x68
 801d2fe:	bf01      	itttt	eq
 801d300:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801d302:	3301      	addeq	r3, #1
 801d304:	930b      	streq	r3, [sp, #44]	; 0x2c
 801d306:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801d30a:	bf18      	it	ne
 801d30c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801d310:	e7a5      	b.n	801d25e <_svfprintf_r+0x1de>
 801d312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d314:	781b      	ldrb	r3, [r3, #0]
 801d316:	2b6c      	cmp	r3, #108	; 0x6c
 801d318:	d105      	bne.n	801d326 <_svfprintf_r+0x2a6>
 801d31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d31c:	3301      	adds	r3, #1
 801d31e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d320:	f048 0820 	orr.w	r8, r8, #32
 801d324:	e79b      	b.n	801d25e <_svfprintf_r+0x1de>
 801d326:	f048 0810 	orr.w	r8, r8, #16
 801d32a:	e798      	b.n	801d25e <_svfprintf_r+0x1de>
 801d32c:	f3af 8000 	nop.w
	...
 801d338:	4632      	mov	r2, r6
 801d33a:	2000      	movs	r0, #0
 801d33c:	f852 3b04 	ldr.w	r3, [r2], #4
 801d340:	9206      	str	r2, [sp, #24]
 801d342:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801d346:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801d34a:	2301      	movs	r3, #1
 801d34c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801d350:	9003      	str	r0, [sp, #12]
 801d352:	9304      	str	r3, [sp, #16]
 801d354:	4606      	mov	r6, r0
 801d356:	4605      	mov	r5, r0
 801d358:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801d35c:	e1b8      	b.n	801d6d0 <_svfprintf_r+0x650>
 801d35e:	f048 0810 	orr.w	r8, r8, #16
 801d362:	f018 0f20 	tst.w	r8, #32
 801d366:	d012      	beq.n	801d38e <_svfprintf_r+0x30e>
 801d368:	3607      	adds	r6, #7
 801d36a:	f026 0307 	bic.w	r3, r6, #7
 801d36e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d372:	9306      	str	r3, [sp, #24]
 801d374:	2e00      	cmp	r6, #0
 801d376:	f177 0300 	sbcs.w	r3, r7, #0
 801d37a:	da06      	bge.n	801d38a <_svfprintf_r+0x30a>
 801d37c:	4276      	negs	r6, r6
 801d37e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801d382:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801d386:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d38a:	2301      	movs	r3, #1
 801d38c:	e38e      	b.n	801daac <_svfprintf_r+0xa2c>
 801d38e:	1d33      	adds	r3, r6, #4
 801d390:	f018 0f10 	tst.w	r8, #16
 801d394:	9306      	str	r3, [sp, #24]
 801d396:	d002      	beq.n	801d39e <_svfprintf_r+0x31e>
 801d398:	6836      	ldr	r6, [r6, #0]
 801d39a:	17f7      	asrs	r7, r6, #31
 801d39c:	e7ea      	b.n	801d374 <_svfprintf_r+0x2f4>
 801d39e:	f018 0f40 	tst.w	r8, #64	; 0x40
 801d3a2:	6836      	ldr	r6, [r6, #0]
 801d3a4:	d001      	beq.n	801d3aa <_svfprintf_r+0x32a>
 801d3a6:	b236      	sxth	r6, r6
 801d3a8:	e7f7      	b.n	801d39a <_svfprintf_r+0x31a>
 801d3aa:	f418 7f00 	tst.w	r8, #512	; 0x200
 801d3ae:	bf18      	it	ne
 801d3b0:	b276      	sxtbne	r6, r6
 801d3b2:	e7f2      	b.n	801d39a <_svfprintf_r+0x31a>
 801d3b4:	3607      	adds	r6, #7
 801d3b6:	f026 0307 	bic.w	r3, r6, #7
 801d3ba:	ecb3 7b02 	vldmia	r3!, {d7}
 801d3be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d3c2:	9306      	str	r3, [sp, #24]
 801d3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3c6:	ee09 3a10 	vmov	s18, r3
 801d3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d3d0:	ee09 3a90 	vmov	s19, r3
 801d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 801d3d8:	4b3a      	ldr	r3, [pc, #232]	; (801d4c4 <_svfprintf_r+0x444>)
 801d3da:	ec51 0b19 	vmov	r0, r1, d9
 801d3de:	f7e3 fbcd 	bl	8000b7c <__aeabi_dcmpun>
 801d3e2:	bb10      	cbnz	r0, 801d42a <_svfprintf_r+0x3aa>
 801d3e4:	4b37      	ldr	r3, [pc, #220]	; (801d4c4 <_svfprintf_r+0x444>)
 801d3e6:	ec51 0b19 	vmov	r0, r1, d9
 801d3ea:	f04f 32ff 	mov.w	r2, #4294967295
 801d3ee:	f7e3 fba7 	bl	8000b40 <__aeabi_dcmple>
 801d3f2:	b9d0      	cbnz	r0, 801d42a <_svfprintf_r+0x3aa>
 801d3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	f7e3 fb96 	bl	8000b2c <__aeabi_dcmplt>
 801d400:	b110      	cbz	r0, 801d408 <_svfprintf_r+0x388>
 801d402:	232d      	movs	r3, #45	; 0x2d
 801d404:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d408:	4a2f      	ldr	r2, [pc, #188]	; (801d4c8 <_svfprintf_r+0x448>)
 801d40a:	4830      	ldr	r0, [pc, #192]	; (801d4cc <_svfprintf_r+0x44c>)
 801d40c:	9b07      	ldr	r3, [sp, #28]
 801d40e:	2100      	movs	r1, #0
 801d410:	2b47      	cmp	r3, #71	; 0x47
 801d412:	bfd4      	ite	le
 801d414:	4693      	movle	fp, r2
 801d416:	4683      	movgt	fp, r0
 801d418:	2303      	movs	r3, #3
 801d41a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801d41e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801d422:	2600      	movs	r6, #0
 801d424:	4633      	mov	r3, r6
 801d426:	f001 b802 	b.w	801e42e <_svfprintf_r+0x13ae>
 801d42a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d42e:	4610      	mov	r0, r2
 801d430:	4619      	mov	r1, r3
 801d432:	f7e3 fba3 	bl	8000b7c <__aeabi_dcmpun>
 801d436:	b140      	cbz	r0, 801d44a <_svfprintf_r+0x3ca>
 801d438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d43a:	4a25      	ldr	r2, [pc, #148]	; (801d4d0 <_svfprintf_r+0x450>)
 801d43c:	4825      	ldr	r0, [pc, #148]	; (801d4d4 <_svfprintf_r+0x454>)
 801d43e:	2b00      	cmp	r3, #0
 801d440:	bfbc      	itt	lt
 801d442:	232d      	movlt	r3, #45	; 0x2d
 801d444:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801d448:	e7e0      	b.n	801d40c <_svfprintf_r+0x38c>
 801d44a:	9b07      	ldr	r3, [sp, #28]
 801d44c:	f023 0320 	bic.w	r3, r3, #32
 801d450:	2b41      	cmp	r3, #65	; 0x41
 801d452:	9308      	str	r3, [sp, #32]
 801d454:	d125      	bne.n	801d4a2 <_svfprintf_r+0x422>
 801d456:	2330      	movs	r3, #48	; 0x30
 801d458:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801d45c:	9b07      	ldr	r3, [sp, #28]
 801d45e:	2b61      	cmp	r3, #97	; 0x61
 801d460:	bf0c      	ite	eq
 801d462:	2378      	moveq	r3, #120	; 0x78
 801d464:	2358      	movne	r3, #88	; 0x58
 801d466:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801d46a:	9b04      	ldr	r3, [sp, #16]
 801d46c:	2b63      	cmp	r3, #99	; 0x63
 801d46e:	f048 0802 	orr.w	r8, r8, #2
 801d472:	dd31      	ble.n	801d4d8 <_svfprintf_r+0x458>
 801d474:	1c59      	adds	r1, r3, #1
 801d476:	4650      	mov	r0, sl
 801d478:	f001 ffbe 	bl	801f3f8 <_malloc_r>
 801d47c:	4683      	mov	fp, r0
 801d47e:	2800      	cmp	r0, #0
 801d480:	f040 81fe 	bne.w	801d880 <_svfprintf_r+0x800>
 801d484:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d48c:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d490:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d494:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d49a:	bf18      	it	ne
 801d49c:	f04f 33ff 	movne.w	r3, #4294967295
 801d4a0:	e614      	b.n	801d0cc <_svfprintf_r+0x4c>
 801d4a2:	9b04      	ldr	r3, [sp, #16]
 801d4a4:	3301      	adds	r3, #1
 801d4a6:	f000 81ed 	beq.w	801d884 <_svfprintf_r+0x804>
 801d4aa:	9b08      	ldr	r3, [sp, #32]
 801d4ac:	2b47      	cmp	r3, #71	; 0x47
 801d4ae:	f040 81ec 	bne.w	801d88a <_svfprintf_r+0x80a>
 801d4b2:	9b04      	ldr	r3, [sp, #16]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f040 81e8 	bne.w	801d88a <_svfprintf_r+0x80a>
 801d4ba:	9303      	str	r3, [sp, #12]
 801d4bc:	2301      	movs	r3, #1
 801d4be:	9304      	str	r3, [sp, #16]
 801d4c0:	e00d      	b.n	801d4de <_svfprintf_r+0x45e>
 801d4c2:	bf00      	nop
 801d4c4:	7fefffff 	.word	0x7fefffff
 801d4c8:	0802cbb0 	.word	0x0802cbb0
 801d4cc:	0802cbb4 	.word	0x0802cbb4
 801d4d0:	0802cbb8 	.word	0x0802cbb8
 801d4d4:	0802cbbc 	.word	0x0802cbbc
 801d4d8:	9003      	str	r0, [sp, #12]
 801d4da:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801d4de:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801d4e2:	9311      	str	r3, [sp, #68]	; 0x44
 801d4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	f280 81d1 	bge.w	801d88e <_svfprintf_r+0x80e>
 801d4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4ee:	ee08 3a10 	vmov	s16, r3
 801d4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d4f8:	ee08 3a90 	vmov	s17, r3
 801d4fc:	232d      	movs	r3, #45	; 0x2d
 801d4fe:	9318      	str	r3, [sp, #96]	; 0x60
 801d500:	9b08      	ldr	r3, [sp, #32]
 801d502:	2b41      	cmp	r3, #65	; 0x41
 801d504:	f040 81e1 	bne.w	801d8ca <_svfprintf_r+0x84a>
 801d508:	eeb0 0a48 	vmov.f32	s0, s16
 801d50c:	eef0 0a68 	vmov.f32	s1, s17
 801d510:	a81c      	add	r0, sp, #112	; 0x70
 801d512:	f002 feb9 	bl	8020288 <frexp>
 801d516:	2200      	movs	r2, #0
 801d518:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801d51c:	ec51 0b10 	vmov	r0, r1, d0
 801d520:	f7e3 f892 	bl	8000648 <__aeabi_dmul>
 801d524:	2200      	movs	r2, #0
 801d526:	2300      	movs	r3, #0
 801d528:	4606      	mov	r6, r0
 801d52a:	460f      	mov	r7, r1
 801d52c:	f7e3 faf4 	bl	8000b18 <__aeabi_dcmpeq>
 801d530:	b108      	cbz	r0, 801d536 <_svfprintf_r+0x4b6>
 801d532:	2301      	movs	r3, #1
 801d534:	931c      	str	r3, [sp, #112]	; 0x70
 801d536:	4bb4      	ldr	r3, [pc, #720]	; (801d808 <_svfprintf_r+0x788>)
 801d538:	4ab4      	ldr	r2, [pc, #720]	; (801d80c <_svfprintf_r+0x78c>)
 801d53a:	9907      	ldr	r1, [sp, #28]
 801d53c:	2961      	cmp	r1, #97	; 0x61
 801d53e:	bf18      	it	ne
 801d540:	461a      	movne	r2, r3
 801d542:	9b04      	ldr	r3, [sp, #16]
 801d544:	9217      	str	r2, [sp, #92]	; 0x5c
 801d546:	3b01      	subs	r3, #1
 801d548:	9305      	str	r3, [sp, #20]
 801d54a:	465d      	mov	r5, fp
 801d54c:	4bb0      	ldr	r3, [pc, #704]	; (801d810 <_svfprintf_r+0x790>)
 801d54e:	2200      	movs	r2, #0
 801d550:	4630      	mov	r0, r6
 801d552:	4639      	mov	r1, r7
 801d554:	f7e3 f878 	bl	8000648 <__aeabi_dmul>
 801d558:	460f      	mov	r7, r1
 801d55a:	4606      	mov	r6, r0
 801d55c:	f7e3 fb24 	bl	8000ba8 <__aeabi_d2iz>
 801d560:	9019      	str	r0, [sp, #100]	; 0x64
 801d562:	f7e3 f807 	bl	8000574 <__aeabi_i2d>
 801d566:	4602      	mov	r2, r0
 801d568:	460b      	mov	r3, r1
 801d56a:	4630      	mov	r0, r6
 801d56c:	4639      	mov	r1, r7
 801d56e:	f7e2 feb3 	bl	80002d8 <__aeabi_dsub>
 801d572:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d576:	5c9b      	ldrb	r3, [r3, r2]
 801d578:	f805 3b01 	strb.w	r3, [r5], #1
 801d57c:	9b05      	ldr	r3, [sp, #20]
 801d57e:	9309      	str	r3, [sp, #36]	; 0x24
 801d580:	1c5a      	adds	r2, r3, #1
 801d582:	4606      	mov	r6, r0
 801d584:	460f      	mov	r7, r1
 801d586:	d007      	beq.n	801d598 <_svfprintf_r+0x518>
 801d588:	3b01      	subs	r3, #1
 801d58a:	9305      	str	r3, [sp, #20]
 801d58c:	2200      	movs	r2, #0
 801d58e:	2300      	movs	r3, #0
 801d590:	f7e3 fac2 	bl	8000b18 <__aeabi_dcmpeq>
 801d594:	2800      	cmp	r0, #0
 801d596:	d0d9      	beq.n	801d54c <_svfprintf_r+0x4cc>
 801d598:	4b9e      	ldr	r3, [pc, #632]	; (801d814 <_svfprintf_r+0x794>)
 801d59a:	2200      	movs	r2, #0
 801d59c:	4630      	mov	r0, r6
 801d59e:	4639      	mov	r1, r7
 801d5a0:	f7e3 fae2 	bl	8000b68 <__aeabi_dcmpgt>
 801d5a4:	b960      	cbnz	r0, 801d5c0 <_svfprintf_r+0x540>
 801d5a6:	4b9b      	ldr	r3, [pc, #620]	; (801d814 <_svfprintf_r+0x794>)
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	4630      	mov	r0, r6
 801d5ac:	4639      	mov	r1, r7
 801d5ae:	f7e3 fab3 	bl	8000b18 <__aeabi_dcmpeq>
 801d5b2:	2800      	cmp	r0, #0
 801d5b4:	f000 8184 	beq.w	801d8c0 <_svfprintf_r+0x840>
 801d5b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d5ba:	07df      	lsls	r7, r3, #31
 801d5bc:	f140 8180 	bpl.w	801d8c0 <_svfprintf_r+0x840>
 801d5c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d5c2:	9520      	str	r5, [sp, #128]	; 0x80
 801d5c4:	7bd9      	ldrb	r1, [r3, #15]
 801d5c6:	2030      	movs	r0, #48	; 0x30
 801d5c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d5ca:	1e53      	subs	r3, r2, #1
 801d5cc:	9320      	str	r3, [sp, #128]	; 0x80
 801d5ce:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801d5d2:	428b      	cmp	r3, r1
 801d5d4:	f000 8163 	beq.w	801d89e <_svfprintf_r+0x81e>
 801d5d8:	2b39      	cmp	r3, #57	; 0x39
 801d5da:	bf0b      	itete	eq
 801d5dc:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801d5de:	3301      	addne	r3, #1
 801d5e0:	7a9b      	ldrbeq	r3, [r3, #10]
 801d5e2:	b2db      	uxtbne	r3, r3
 801d5e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d5e8:	eba5 030b 	sub.w	r3, r5, fp
 801d5ec:	9305      	str	r3, [sp, #20]
 801d5ee:	9b08      	ldr	r3, [sp, #32]
 801d5f0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d5f2:	2b47      	cmp	r3, #71	; 0x47
 801d5f4:	f040 81b1 	bne.w	801d95a <_svfprintf_r+0x8da>
 801d5f8:	1cee      	adds	r6, r5, #3
 801d5fa:	db03      	blt.n	801d604 <_svfprintf_r+0x584>
 801d5fc:	9b04      	ldr	r3, [sp, #16]
 801d5fe:	42ab      	cmp	r3, r5
 801d600:	f280 81d6 	bge.w	801d9b0 <_svfprintf_r+0x930>
 801d604:	9b07      	ldr	r3, [sp, #28]
 801d606:	3b02      	subs	r3, #2
 801d608:	9307      	str	r3, [sp, #28]
 801d60a:	9907      	ldr	r1, [sp, #28]
 801d60c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801d610:	f021 0120 	bic.w	r1, r1, #32
 801d614:	2941      	cmp	r1, #65	; 0x41
 801d616:	bf08      	it	eq
 801d618:	320f      	addeq	r2, #15
 801d61a:	f105 33ff 	add.w	r3, r5, #4294967295
 801d61e:	bf06      	itte	eq
 801d620:	b2d2      	uxtbeq	r2, r2
 801d622:	2101      	moveq	r1, #1
 801d624:	2100      	movne	r1, #0
 801d626:	2b00      	cmp	r3, #0
 801d628:	931c      	str	r3, [sp, #112]	; 0x70
 801d62a:	bfb8      	it	lt
 801d62c:	f1c5 0301 	rsblt	r3, r5, #1
 801d630:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801d634:	bfb4      	ite	lt
 801d636:	222d      	movlt	r2, #45	; 0x2d
 801d638:	222b      	movge	r2, #43	; 0x2b
 801d63a:	2b09      	cmp	r3, #9
 801d63c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801d640:	f340 81a4 	ble.w	801d98c <_svfprintf_r+0x90c>
 801d644:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801d648:	260a      	movs	r6, #10
 801d64a:	4611      	mov	r1, r2
 801d64c:	fb93 f5f6 	sdiv	r5, r3, r6
 801d650:	fb06 3015 	mls	r0, r6, r5, r3
 801d654:	3030      	adds	r0, #48	; 0x30
 801d656:	f801 0c01 	strb.w	r0, [r1, #-1]
 801d65a:	4618      	mov	r0, r3
 801d65c:	2863      	cmp	r0, #99	; 0x63
 801d65e:	f102 32ff 	add.w	r2, r2, #4294967295
 801d662:	462b      	mov	r3, r5
 801d664:	dcf1      	bgt.n	801d64a <_svfprintf_r+0x5ca>
 801d666:	3330      	adds	r3, #48	; 0x30
 801d668:	1e88      	subs	r0, r1, #2
 801d66a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d66e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801d672:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801d676:	4603      	mov	r3, r0
 801d678:	42ab      	cmp	r3, r5
 801d67a:	f0c0 8182 	bcc.w	801d982 <_svfprintf_r+0x902>
 801d67e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801d682:	1a52      	subs	r2, r2, r1
 801d684:	42a8      	cmp	r0, r5
 801d686:	bf88      	it	hi
 801d688:	2200      	movhi	r2, #0
 801d68a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801d68e:	441a      	add	r2, r3
 801d690:	ab1e      	add	r3, sp, #120	; 0x78
 801d692:	1ad3      	subs	r3, r2, r3
 801d694:	9a05      	ldr	r2, [sp, #20]
 801d696:	9315      	str	r3, [sp, #84]	; 0x54
 801d698:	2a01      	cmp	r2, #1
 801d69a:	4413      	add	r3, r2
 801d69c:	9304      	str	r3, [sp, #16]
 801d69e:	dc02      	bgt.n	801d6a6 <_svfprintf_r+0x626>
 801d6a0:	f018 0f01 	tst.w	r8, #1
 801d6a4:	d003      	beq.n	801d6ae <_svfprintf_r+0x62e>
 801d6a6:	9b04      	ldr	r3, [sp, #16]
 801d6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6aa:	4413      	add	r3, r2
 801d6ac:	9304      	str	r3, [sp, #16]
 801d6ae:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801d6b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d6b6:	9311      	str	r3, [sp, #68]	; 0x44
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d6be:	461d      	mov	r5, r3
 801d6c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d6c2:	b113      	cbz	r3, 801d6ca <_svfprintf_r+0x64a>
 801d6c4:	232d      	movs	r3, #45	; 0x2d
 801d6c6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d6ca:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801d6ce:	2600      	movs	r6, #0
 801d6d0:	9b04      	ldr	r3, [sp, #16]
 801d6d2:	42b3      	cmp	r3, r6
 801d6d4:	bfb8      	it	lt
 801d6d6:	4633      	movlt	r3, r6
 801d6d8:	9311      	str	r3, [sp, #68]	; 0x44
 801d6da:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d6de:	b113      	cbz	r3, 801d6e6 <_svfprintf_r+0x666>
 801d6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6e2:	3301      	adds	r3, #1
 801d6e4:	9311      	str	r3, [sp, #68]	; 0x44
 801d6e6:	f018 0302 	ands.w	r3, r8, #2
 801d6ea:	9317      	str	r3, [sp, #92]	; 0x5c
 801d6ec:	bf1e      	ittt	ne
 801d6ee:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801d6f0:	3302      	addne	r3, #2
 801d6f2:	9311      	strne	r3, [sp, #68]	; 0x44
 801d6f4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801d6f8:	9318      	str	r3, [sp, #96]	; 0x60
 801d6fa:	d11f      	bne.n	801d73c <_svfprintf_r+0x6bc>
 801d6fc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d700:	1a9f      	subs	r7, r3, r2
 801d702:	2f00      	cmp	r7, #0
 801d704:	dd1a      	ble.n	801d73c <_svfprintf_r+0x6bc>
 801d706:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d70a:	4843      	ldr	r0, [pc, #268]	; (801d818 <_svfprintf_r+0x798>)
 801d70c:	6020      	str	r0, [r4, #0]
 801d70e:	2f10      	cmp	r7, #16
 801d710:	f103 0301 	add.w	r3, r3, #1
 801d714:	f104 0108 	add.w	r1, r4, #8
 801d718:	f300 82e6 	bgt.w	801dce8 <_svfprintf_r+0xc68>
 801d71c:	6067      	str	r7, [r4, #4]
 801d71e:	2b07      	cmp	r3, #7
 801d720:	4417      	add	r7, r2
 801d722:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d726:	f340 82f2 	ble.w	801dd0e <_svfprintf_r+0xc8e>
 801d72a:	aa22      	add	r2, sp, #136	; 0x88
 801d72c:	4649      	mov	r1, r9
 801d72e:	4650      	mov	r0, sl
 801d730:	f002 fdf2 	bl	8020318 <__ssprint_r>
 801d734:	2800      	cmp	r0, #0
 801d736:	f040 861d 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801d73a:	ac25      	add	r4, sp, #148	; 0x94
 801d73c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d740:	b173      	cbz	r3, 801d760 <_svfprintf_r+0x6e0>
 801d742:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801d746:	6023      	str	r3, [r4, #0]
 801d748:	2301      	movs	r3, #1
 801d74a:	6063      	str	r3, [r4, #4]
 801d74c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d74e:	3301      	adds	r3, #1
 801d750:	9324      	str	r3, [sp, #144]	; 0x90
 801d752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d754:	3301      	adds	r3, #1
 801d756:	2b07      	cmp	r3, #7
 801d758:	9323      	str	r3, [sp, #140]	; 0x8c
 801d75a:	f300 82da 	bgt.w	801dd12 <_svfprintf_r+0xc92>
 801d75e:	3408      	adds	r4, #8
 801d760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d762:	b16b      	cbz	r3, 801d780 <_svfprintf_r+0x700>
 801d764:	ab1b      	add	r3, sp, #108	; 0x6c
 801d766:	6023      	str	r3, [r4, #0]
 801d768:	2302      	movs	r3, #2
 801d76a:	6063      	str	r3, [r4, #4]
 801d76c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d76e:	3302      	adds	r3, #2
 801d770:	9324      	str	r3, [sp, #144]	; 0x90
 801d772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d774:	3301      	adds	r3, #1
 801d776:	2b07      	cmp	r3, #7
 801d778:	9323      	str	r3, [sp, #140]	; 0x8c
 801d77a:	f300 82d4 	bgt.w	801dd26 <_svfprintf_r+0xca6>
 801d77e:	3408      	adds	r4, #8
 801d780:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d782:	2b80      	cmp	r3, #128	; 0x80
 801d784:	d11f      	bne.n	801d7c6 <_svfprintf_r+0x746>
 801d786:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d78a:	1a9f      	subs	r7, r3, r2
 801d78c:	2f00      	cmp	r7, #0
 801d78e:	dd1a      	ble.n	801d7c6 <_svfprintf_r+0x746>
 801d790:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d794:	4821      	ldr	r0, [pc, #132]	; (801d81c <_svfprintf_r+0x79c>)
 801d796:	6020      	str	r0, [r4, #0]
 801d798:	2f10      	cmp	r7, #16
 801d79a:	f103 0301 	add.w	r3, r3, #1
 801d79e:	f104 0108 	add.w	r1, r4, #8
 801d7a2:	f300 82ca 	bgt.w	801dd3a <_svfprintf_r+0xcba>
 801d7a6:	6067      	str	r7, [r4, #4]
 801d7a8:	2b07      	cmp	r3, #7
 801d7aa:	4417      	add	r7, r2
 801d7ac:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801d7b0:	f340 82d6 	ble.w	801dd60 <_svfprintf_r+0xce0>
 801d7b4:	aa22      	add	r2, sp, #136	; 0x88
 801d7b6:	4649      	mov	r1, r9
 801d7b8:	4650      	mov	r0, sl
 801d7ba:	f002 fdad 	bl	8020318 <__ssprint_r>
 801d7be:	2800      	cmp	r0, #0
 801d7c0:	f040 85d8 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801d7c4:	ac25      	add	r4, sp, #148	; 0x94
 801d7c6:	9b04      	ldr	r3, [sp, #16]
 801d7c8:	1af6      	subs	r6, r6, r3
 801d7ca:	2e00      	cmp	r6, #0
 801d7cc:	dd28      	ble.n	801d820 <_svfprintf_r+0x7a0>
 801d7ce:	4f13      	ldr	r7, [pc, #76]	; (801d81c <_svfprintf_r+0x79c>)
 801d7d0:	6027      	str	r7, [r4, #0]
 801d7d2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d7d6:	2e10      	cmp	r6, #16
 801d7d8:	f103 0301 	add.w	r3, r3, #1
 801d7dc:	f104 0108 	add.w	r1, r4, #8
 801d7e0:	f300 82c0 	bgt.w	801dd64 <_svfprintf_r+0xce4>
 801d7e4:	6066      	str	r6, [r4, #4]
 801d7e6:	2b07      	cmp	r3, #7
 801d7e8:	4416      	add	r6, r2
 801d7ea:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801d7ee:	f340 82cc 	ble.w	801dd8a <_svfprintf_r+0xd0a>
 801d7f2:	aa22      	add	r2, sp, #136	; 0x88
 801d7f4:	4649      	mov	r1, r9
 801d7f6:	4650      	mov	r0, sl
 801d7f8:	f002 fd8e 	bl	8020318 <__ssprint_r>
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	f040 85b9 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801d802:	ac25      	add	r4, sp, #148	; 0x94
 801d804:	e00c      	b.n	801d820 <_svfprintf_r+0x7a0>
 801d806:	bf00      	nop
 801d808:	0802cbd1 	.word	0x0802cbd1
 801d80c:	0802cbc0 	.word	0x0802cbc0
 801d810:	40300000 	.word	0x40300000
 801d814:	3fe00000 	.word	0x3fe00000
 801d818:	0802cbe2 	.word	0x0802cbe2
 801d81c:	0802cbf2 	.word	0x0802cbf2
 801d820:	f418 7f80 	tst.w	r8, #256	; 0x100
 801d824:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801d826:	f040 82b7 	bne.w	801dd98 <_svfprintf_r+0xd18>
 801d82a:	9b04      	ldr	r3, [sp, #16]
 801d82c:	f8c4 b000 	str.w	fp, [r4]
 801d830:	441e      	add	r6, r3
 801d832:	6063      	str	r3, [r4, #4]
 801d834:	9624      	str	r6, [sp, #144]	; 0x90
 801d836:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d838:	3301      	adds	r3, #1
 801d83a:	2b07      	cmp	r3, #7
 801d83c:	9323      	str	r3, [sp, #140]	; 0x8c
 801d83e:	f300 82f0 	bgt.w	801de22 <_svfprintf_r+0xda2>
 801d842:	3408      	adds	r4, #8
 801d844:	f018 0f04 	tst.w	r8, #4
 801d848:	f040 8576 	bne.w	801e338 <_svfprintf_r+0x12b8>
 801d84c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801d850:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d852:	428a      	cmp	r2, r1
 801d854:	bfac      	ite	ge
 801d856:	189b      	addge	r3, r3, r2
 801d858:	185b      	addlt	r3, r3, r1
 801d85a:	930f      	str	r3, [sp, #60]	; 0x3c
 801d85c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d85e:	b13b      	cbz	r3, 801d870 <_svfprintf_r+0x7f0>
 801d860:	aa22      	add	r2, sp, #136	; 0x88
 801d862:	4649      	mov	r1, r9
 801d864:	4650      	mov	r0, sl
 801d866:	f002 fd57 	bl	8020318 <__ssprint_r>
 801d86a:	2800      	cmp	r0, #0
 801d86c:	f040 8582 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801d870:	2300      	movs	r3, #0
 801d872:	9323      	str	r3, [sp, #140]	; 0x8c
 801d874:	9b03      	ldr	r3, [sp, #12]
 801d876:	2b00      	cmp	r3, #0
 801d878:	f040 8598 	bne.w	801e3ac <_svfprintf_r+0x132c>
 801d87c:	ac25      	add	r4, sp, #148	; 0x94
 801d87e:	e0ed      	b.n	801da5c <_svfprintf_r+0x9dc>
 801d880:	9003      	str	r0, [sp, #12]
 801d882:	e62c      	b.n	801d4de <_svfprintf_r+0x45e>
 801d884:	9003      	str	r0, [sp, #12]
 801d886:	2306      	movs	r3, #6
 801d888:	e619      	b.n	801d4be <_svfprintf_r+0x43e>
 801d88a:	9003      	str	r0, [sp, #12]
 801d88c:	e627      	b.n	801d4de <_svfprintf_r+0x45e>
 801d88e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801d892:	2300      	movs	r3, #0
 801d894:	eeb0 8a47 	vmov.f32	s16, s14
 801d898:	eef0 8a67 	vmov.f32	s17, s15
 801d89c:	e62f      	b.n	801d4fe <_svfprintf_r+0x47e>
 801d89e:	f802 0c01 	strb.w	r0, [r2, #-1]
 801d8a2:	e691      	b.n	801d5c8 <_svfprintf_r+0x548>
 801d8a4:	f803 0b01 	strb.w	r0, [r3], #1
 801d8a8:	1aca      	subs	r2, r1, r3
 801d8aa:	2a00      	cmp	r2, #0
 801d8ac:	dafa      	bge.n	801d8a4 <_svfprintf_r+0x824>
 801d8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d8b2:	3201      	adds	r2, #1
 801d8b4:	f103 0301 	add.w	r3, r3, #1
 801d8b8:	bfb8      	it	lt
 801d8ba:	2300      	movlt	r3, #0
 801d8bc:	441d      	add	r5, r3
 801d8be:	e693      	b.n	801d5e8 <_svfprintf_r+0x568>
 801d8c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8c2:	462b      	mov	r3, r5
 801d8c4:	18a9      	adds	r1, r5, r2
 801d8c6:	2030      	movs	r0, #48	; 0x30
 801d8c8:	e7ee      	b.n	801d8a8 <_svfprintf_r+0x828>
 801d8ca:	9b08      	ldr	r3, [sp, #32]
 801d8cc:	2b46      	cmp	r3, #70	; 0x46
 801d8ce:	d005      	beq.n	801d8dc <_svfprintf_r+0x85c>
 801d8d0:	2b45      	cmp	r3, #69	; 0x45
 801d8d2:	d11b      	bne.n	801d90c <_svfprintf_r+0x88c>
 801d8d4:	9b04      	ldr	r3, [sp, #16]
 801d8d6:	1c5d      	adds	r5, r3, #1
 801d8d8:	2102      	movs	r1, #2
 801d8da:	e001      	b.n	801d8e0 <_svfprintf_r+0x860>
 801d8dc:	9d04      	ldr	r5, [sp, #16]
 801d8de:	2103      	movs	r1, #3
 801d8e0:	ab20      	add	r3, sp, #128	; 0x80
 801d8e2:	9301      	str	r3, [sp, #4]
 801d8e4:	ab1d      	add	r3, sp, #116	; 0x74
 801d8e6:	9300      	str	r3, [sp, #0]
 801d8e8:	462a      	mov	r2, r5
 801d8ea:	ab1c      	add	r3, sp, #112	; 0x70
 801d8ec:	4650      	mov	r0, sl
 801d8ee:	eeb0 0a48 	vmov.f32	s0, s16
 801d8f2:	eef0 0a68 	vmov.f32	s1, s17
 801d8f6:	f000 fe63 	bl	801e5c0 <_dtoa_r>
 801d8fa:	9b08      	ldr	r3, [sp, #32]
 801d8fc:	2b47      	cmp	r3, #71	; 0x47
 801d8fe:	4683      	mov	fp, r0
 801d900:	d106      	bne.n	801d910 <_svfprintf_r+0x890>
 801d902:	f018 0f01 	tst.w	r8, #1
 801d906:	d103      	bne.n	801d910 <_svfprintf_r+0x890>
 801d908:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801d90a:	e66d      	b.n	801d5e8 <_svfprintf_r+0x568>
 801d90c:	9d04      	ldr	r5, [sp, #16]
 801d90e:	e7e3      	b.n	801d8d8 <_svfprintf_r+0x858>
 801d910:	9b08      	ldr	r3, [sp, #32]
 801d912:	2b46      	cmp	r3, #70	; 0x46
 801d914:	eb0b 0605 	add.w	r6, fp, r5
 801d918:	d10f      	bne.n	801d93a <_svfprintf_r+0x8ba>
 801d91a:	f89b 3000 	ldrb.w	r3, [fp]
 801d91e:	2b30      	cmp	r3, #48	; 0x30
 801d920:	d109      	bne.n	801d936 <_svfprintf_r+0x8b6>
 801d922:	ec51 0b18 	vmov	r0, r1, d8
 801d926:	2200      	movs	r2, #0
 801d928:	2300      	movs	r3, #0
 801d92a:	f7e3 f8f5 	bl	8000b18 <__aeabi_dcmpeq>
 801d92e:	b910      	cbnz	r0, 801d936 <_svfprintf_r+0x8b6>
 801d930:	f1c5 0501 	rsb	r5, r5, #1
 801d934:	951c      	str	r5, [sp, #112]	; 0x70
 801d936:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d938:	441e      	add	r6, r3
 801d93a:	ec51 0b18 	vmov	r0, r1, d8
 801d93e:	2200      	movs	r2, #0
 801d940:	2300      	movs	r3, #0
 801d942:	f7e3 f8e9 	bl	8000b18 <__aeabi_dcmpeq>
 801d946:	b100      	cbz	r0, 801d94a <_svfprintf_r+0x8ca>
 801d948:	9620      	str	r6, [sp, #128]	; 0x80
 801d94a:	2230      	movs	r2, #48	; 0x30
 801d94c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d94e:	429e      	cmp	r6, r3
 801d950:	d9da      	bls.n	801d908 <_svfprintf_r+0x888>
 801d952:	1c59      	adds	r1, r3, #1
 801d954:	9120      	str	r1, [sp, #128]	; 0x80
 801d956:	701a      	strb	r2, [r3, #0]
 801d958:	e7f8      	b.n	801d94c <_svfprintf_r+0x8cc>
 801d95a:	9b08      	ldr	r3, [sp, #32]
 801d95c:	2b46      	cmp	r3, #70	; 0x46
 801d95e:	f47f ae54 	bne.w	801d60a <_svfprintf_r+0x58a>
 801d962:	9a04      	ldr	r2, [sp, #16]
 801d964:	f008 0301 	and.w	r3, r8, #1
 801d968:	2d00      	cmp	r5, #0
 801d96a:	ea43 0302 	orr.w	r3, r3, r2
 801d96e:	dd1a      	ble.n	801d9a6 <_svfprintf_r+0x926>
 801d970:	2b00      	cmp	r3, #0
 801d972:	d034      	beq.n	801d9de <_svfprintf_r+0x95e>
 801d974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d976:	18eb      	adds	r3, r5, r3
 801d978:	441a      	add	r2, r3
 801d97a:	9204      	str	r2, [sp, #16]
 801d97c:	2366      	movs	r3, #102	; 0x66
 801d97e:	9307      	str	r3, [sp, #28]
 801d980:	e033      	b.n	801d9ea <_svfprintf_r+0x96a>
 801d982:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d986:	f802 6b01 	strb.w	r6, [r2], #1
 801d98a:	e675      	b.n	801d678 <_svfprintf_r+0x5f8>
 801d98c:	b941      	cbnz	r1, 801d9a0 <_svfprintf_r+0x920>
 801d98e:	2230      	movs	r2, #48	; 0x30
 801d990:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801d994:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801d998:	3330      	adds	r3, #48	; 0x30
 801d99a:	f802 3b01 	strb.w	r3, [r2], #1
 801d99e:	e677      	b.n	801d690 <_svfprintf_r+0x610>
 801d9a0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801d9a4:	e7f8      	b.n	801d998 <_svfprintf_r+0x918>
 801d9a6:	b1e3      	cbz	r3, 801d9e2 <_svfprintf_r+0x962>
 801d9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9aa:	9a04      	ldr	r2, [sp, #16]
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	e7e3      	b.n	801d978 <_svfprintf_r+0x8f8>
 801d9b0:	9b05      	ldr	r3, [sp, #20]
 801d9b2:	429d      	cmp	r5, r3
 801d9b4:	db07      	blt.n	801d9c6 <_svfprintf_r+0x946>
 801d9b6:	f018 0f01 	tst.w	r8, #1
 801d9ba:	d02d      	beq.n	801da18 <_svfprintf_r+0x998>
 801d9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9be:	18eb      	adds	r3, r5, r3
 801d9c0:	9304      	str	r3, [sp, #16]
 801d9c2:	2367      	movs	r3, #103	; 0x67
 801d9c4:	e7db      	b.n	801d97e <_svfprintf_r+0x8fe>
 801d9c6:	9b05      	ldr	r3, [sp, #20]
 801d9c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d9ca:	2d00      	cmp	r5, #0
 801d9cc:	4413      	add	r3, r2
 801d9ce:	9304      	str	r3, [sp, #16]
 801d9d0:	dcf7      	bgt.n	801d9c2 <_svfprintf_r+0x942>
 801d9d2:	9a04      	ldr	r2, [sp, #16]
 801d9d4:	f1c5 0301 	rsb	r3, r5, #1
 801d9d8:	441a      	add	r2, r3
 801d9da:	4613      	mov	r3, r2
 801d9dc:	e7f0      	b.n	801d9c0 <_svfprintf_r+0x940>
 801d9de:	9504      	str	r5, [sp, #16]
 801d9e0:	e7cc      	b.n	801d97c <_svfprintf_r+0x8fc>
 801d9e2:	2366      	movs	r3, #102	; 0x66
 801d9e4:	9307      	str	r3, [sp, #28]
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	9304      	str	r3, [sp, #16]
 801d9ea:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801d9ee:	9309      	str	r3, [sp, #36]	; 0x24
 801d9f0:	d025      	beq.n	801da3e <_svfprintf_r+0x9be>
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	2d00      	cmp	r5, #0
 801d9f6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d9fa:	f77f ae61 	ble.w	801d6c0 <_svfprintf_r+0x640>
 801d9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da00:	781b      	ldrb	r3, [r3, #0]
 801da02:	2bff      	cmp	r3, #255	; 0xff
 801da04:	d10a      	bne.n	801da1c <_svfprintf_r+0x99c>
 801da06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801da0a:	9904      	ldr	r1, [sp, #16]
 801da0c:	4413      	add	r3, r2
 801da0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da10:	fb02 1303 	mla	r3, r2, r3, r1
 801da14:	9304      	str	r3, [sp, #16]
 801da16:	e653      	b.n	801d6c0 <_svfprintf_r+0x640>
 801da18:	9504      	str	r5, [sp, #16]
 801da1a:	e7d2      	b.n	801d9c2 <_svfprintf_r+0x942>
 801da1c:	42ab      	cmp	r3, r5
 801da1e:	daf2      	bge.n	801da06 <_svfprintf_r+0x986>
 801da20:	1aed      	subs	r5, r5, r3
 801da22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da24:	785b      	ldrb	r3, [r3, #1]
 801da26:	b133      	cbz	r3, 801da36 <_svfprintf_r+0x9b6>
 801da28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da2a:	3301      	adds	r3, #1
 801da2c:	9309      	str	r3, [sp, #36]	; 0x24
 801da2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da30:	3301      	adds	r3, #1
 801da32:	930a      	str	r3, [sp, #40]	; 0x28
 801da34:	e7e3      	b.n	801d9fe <_svfprintf_r+0x97e>
 801da36:	9b08      	ldr	r3, [sp, #32]
 801da38:	3301      	adds	r3, #1
 801da3a:	9308      	str	r3, [sp, #32]
 801da3c:	e7df      	b.n	801d9fe <_svfprintf_r+0x97e>
 801da3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da40:	9308      	str	r3, [sp, #32]
 801da42:	e63d      	b.n	801d6c0 <_svfprintf_r+0x640>
 801da44:	4632      	mov	r2, r6
 801da46:	f018 0f20 	tst.w	r8, #32
 801da4a:	f852 3b04 	ldr.w	r3, [r2], #4
 801da4e:	9206      	str	r2, [sp, #24]
 801da50:	d009      	beq.n	801da66 <_svfprintf_r+0x9e6>
 801da52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da54:	4610      	mov	r0, r2
 801da56:	17d1      	asrs	r1, r2, #31
 801da58:	e9c3 0100 	strd	r0, r1, [r3]
 801da5c:	9e06      	ldr	r6, [sp, #24]
 801da5e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801da62:	f7ff bb4d 	b.w	801d100 <_svfprintf_r+0x80>
 801da66:	f018 0f10 	tst.w	r8, #16
 801da6a:	d002      	beq.n	801da72 <_svfprintf_r+0x9f2>
 801da6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da6e:	601a      	str	r2, [r3, #0]
 801da70:	e7f4      	b.n	801da5c <_svfprintf_r+0x9dc>
 801da72:	f018 0f40 	tst.w	r8, #64	; 0x40
 801da76:	d002      	beq.n	801da7e <_svfprintf_r+0x9fe>
 801da78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da7a:	801a      	strh	r2, [r3, #0]
 801da7c:	e7ee      	b.n	801da5c <_svfprintf_r+0x9dc>
 801da7e:	f418 7f00 	tst.w	r8, #512	; 0x200
 801da82:	d0f3      	beq.n	801da6c <_svfprintf_r+0x9ec>
 801da84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da86:	701a      	strb	r2, [r3, #0]
 801da88:	e7e8      	b.n	801da5c <_svfprintf_r+0x9dc>
 801da8a:	f048 0810 	orr.w	r8, r8, #16
 801da8e:	f018 0f20 	tst.w	r8, #32
 801da92:	d01e      	beq.n	801dad2 <_svfprintf_r+0xa52>
 801da94:	3607      	adds	r6, #7
 801da96:	f026 0307 	bic.w	r3, r6, #7
 801da9a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801da9e:	9306      	str	r3, [sp, #24]
 801daa0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801daa4:	2300      	movs	r3, #0
 801daa6:	2200      	movs	r2, #0
 801daa8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801daac:	9a04      	ldr	r2, [sp, #16]
 801daae:	3201      	adds	r2, #1
 801dab0:	f000 848d 	beq.w	801e3ce <_svfprintf_r+0x134e>
 801dab4:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801dab8:	9203      	str	r2, [sp, #12]
 801daba:	ea56 0207 	orrs.w	r2, r6, r7
 801dabe:	f040 848c 	bne.w	801e3da <_svfprintf_r+0x135a>
 801dac2:	9a04      	ldr	r2, [sp, #16]
 801dac4:	2a00      	cmp	r2, #0
 801dac6:	f000 80f5 	beq.w	801dcb4 <_svfprintf_r+0xc34>
 801daca:	2b01      	cmp	r3, #1
 801dacc:	f040 8488 	bne.w	801e3e0 <_svfprintf_r+0x1360>
 801dad0:	e097      	b.n	801dc02 <_svfprintf_r+0xb82>
 801dad2:	1d33      	adds	r3, r6, #4
 801dad4:	f018 0f10 	tst.w	r8, #16
 801dad8:	9306      	str	r3, [sp, #24]
 801dada:	d001      	beq.n	801dae0 <_svfprintf_r+0xa60>
 801dadc:	6836      	ldr	r6, [r6, #0]
 801dade:	e003      	b.n	801dae8 <_svfprintf_r+0xa68>
 801dae0:	f018 0f40 	tst.w	r8, #64	; 0x40
 801dae4:	d002      	beq.n	801daec <_svfprintf_r+0xa6c>
 801dae6:	8836      	ldrh	r6, [r6, #0]
 801dae8:	2700      	movs	r7, #0
 801daea:	e7d9      	b.n	801daa0 <_svfprintf_r+0xa20>
 801daec:	f418 7f00 	tst.w	r8, #512	; 0x200
 801daf0:	d0f4      	beq.n	801dadc <_svfprintf_r+0xa5c>
 801daf2:	7836      	ldrb	r6, [r6, #0]
 801daf4:	e7f8      	b.n	801dae8 <_svfprintf_r+0xa68>
 801daf6:	4633      	mov	r3, r6
 801daf8:	2278      	movs	r2, #120	; 0x78
 801dafa:	f853 6b04 	ldr.w	r6, [r3], #4
 801dafe:	9306      	str	r3, [sp, #24]
 801db00:	f647 0330 	movw	r3, #30768	; 0x7830
 801db04:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801db08:	4ba1      	ldr	r3, [pc, #644]	; (801dd90 <_svfprintf_r+0xd10>)
 801db0a:	9316      	str	r3, [sp, #88]	; 0x58
 801db0c:	2700      	movs	r7, #0
 801db0e:	f048 0802 	orr.w	r8, r8, #2
 801db12:	2302      	movs	r3, #2
 801db14:	9207      	str	r2, [sp, #28]
 801db16:	e7c6      	b.n	801daa6 <_svfprintf_r+0xa26>
 801db18:	4633      	mov	r3, r6
 801db1a:	2500      	movs	r5, #0
 801db1c:	f853 bb04 	ldr.w	fp, [r3], #4
 801db20:	9306      	str	r3, [sp, #24]
 801db22:	9b04      	ldr	r3, [sp, #16]
 801db24:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801db28:	1c59      	adds	r1, r3, #1
 801db2a:	d010      	beq.n	801db4e <_svfprintf_r+0xace>
 801db2c:	461a      	mov	r2, r3
 801db2e:	4629      	mov	r1, r5
 801db30:	4658      	mov	r0, fp
 801db32:	f7e2 fb7d 	bl	8000230 <memchr>
 801db36:	9003      	str	r0, [sp, #12]
 801db38:	2800      	cmp	r0, #0
 801db3a:	f000 80d2 	beq.w	801dce2 <_svfprintf_r+0xc62>
 801db3e:	eba0 030b 	sub.w	r3, r0, fp
 801db42:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801db46:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801db4a:	462e      	mov	r6, r5
 801db4c:	e5c0      	b.n	801d6d0 <_svfprintf_r+0x650>
 801db4e:	4658      	mov	r0, fp
 801db50:	f7e2 fb60 	bl	8000214 <strlen>
 801db54:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801db58:	e463      	b.n	801d422 <_svfprintf_r+0x3a2>
 801db5a:	f048 0810 	orr.w	r8, r8, #16
 801db5e:	f018 0f20 	tst.w	r8, #32
 801db62:	d007      	beq.n	801db74 <_svfprintf_r+0xaf4>
 801db64:	3607      	adds	r6, #7
 801db66:	f026 0307 	bic.w	r3, r6, #7
 801db6a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801db6e:	9306      	str	r3, [sp, #24]
 801db70:	2301      	movs	r3, #1
 801db72:	e798      	b.n	801daa6 <_svfprintf_r+0xa26>
 801db74:	1d33      	adds	r3, r6, #4
 801db76:	f018 0f10 	tst.w	r8, #16
 801db7a:	9306      	str	r3, [sp, #24]
 801db7c:	d001      	beq.n	801db82 <_svfprintf_r+0xb02>
 801db7e:	6836      	ldr	r6, [r6, #0]
 801db80:	e003      	b.n	801db8a <_svfprintf_r+0xb0a>
 801db82:	f018 0f40 	tst.w	r8, #64	; 0x40
 801db86:	d002      	beq.n	801db8e <_svfprintf_r+0xb0e>
 801db88:	8836      	ldrh	r6, [r6, #0]
 801db8a:	2700      	movs	r7, #0
 801db8c:	e7f0      	b.n	801db70 <_svfprintf_r+0xaf0>
 801db8e:	f418 7f00 	tst.w	r8, #512	; 0x200
 801db92:	d0f4      	beq.n	801db7e <_svfprintf_r+0xafe>
 801db94:	7836      	ldrb	r6, [r6, #0]
 801db96:	e7f8      	b.n	801db8a <_svfprintf_r+0xb0a>
 801db98:	4b7e      	ldr	r3, [pc, #504]	; (801dd94 <_svfprintf_r+0xd14>)
 801db9a:	9316      	str	r3, [sp, #88]	; 0x58
 801db9c:	f018 0f20 	tst.w	r8, #32
 801dba0:	d019      	beq.n	801dbd6 <_svfprintf_r+0xb56>
 801dba2:	3607      	adds	r6, #7
 801dba4:	f026 0307 	bic.w	r3, r6, #7
 801dba8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801dbac:	9306      	str	r3, [sp, #24]
 801dbae:	f018 0f01 	tst.w	r8, #1
 801dbb2:	d00a      	beq.n	801dbca <_svfprintf_r+0xb4a>
 801dbb4:	ea56 0307 	orrs.w	r3, r6, r7
 801dbb8:	d007      	beq.n	801dbca <_svfprintf_r+0xb4a>
 801dbba:	2330      	movs	r3, #48	; 0x30
 801dbbc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801dbc0:	9b07      	ldr	r3, [sp, #28]
 801dbc2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801dbc6:	f048 0802 	orr.w	r8, r8, #2
 801dbca:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801dbce:	2302      	movs	r3, #2
 801dbd0:	e769      	b.n	801daa6 <_svfprintf_r+0xa26>
 801dbd2:	4b6f      	ldr	r3, [pc, #444]	; (801dd90 <_svfprintf_r+0xd10>)
 801dbd4:	e7e1      	b.n	801db9a <_svfprintf_r+0xb1a>
 801dbd6:	1d33      	adds	r3, r6, #4
 801dbd8:	f018 0f10 	tst.w	r8, #16
 801dbdc:	9306      	str	r3, [sp, #24]
 801dbde:	d001      	beq.n	801dbe4 <_svfprintf_r+0xb64>
 801dbe0:	6836      	ldr	r6, [r6, #0]
 801dbe2:	e003      	b.n	801dbec <_svfprintf_r+0xb6c>
 801dbe4:	f018 0f40 	tst.w	r8, #64	; 0x40
 801dbe8:	d002      	beq.n	801dbf0 <_svfprintf_r+0xb70>
 801dbea:	8836      	ldrh	r6, [r6, #0]
 801dbec:	2700      	movs	r7, #0
 801dbee:	e7de      	b.n	801dbae <_svfprintf_r+0xb2e>
 801dbf0:	f418 7f00 	tst.w	r8, #512	; 0x200
 801dbf4:	d0f4      	beq.n	801dbe0 <_svfprintf_r+0xb60>
 801dbf6:	7836      	ldrb	r6, [r6, #0]
 801dbf8:	e7f8      	b.n	801dbec <_svfprintf_r+0xb6c>
 801dbfa:	2f00      	cmp	r7, #0
 801dbfc:	bf08      	it	eq
 801dbfe:	2e0a      	cmpeq	r6, #10
 801dc00:	d206      	bcs.n	801dc10 <_svfprintf_r+0xb90>
 801dc02:	3630      	adds	r6, #48	; 0x30
 801dc04:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801dc08:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801dc0c:	f000 bc06 	b.w	801e41c <_svfprintf_r+0x139c>
 801dc10:	2300      	movs	r3, #0
 801dc12:	9305      	str	r3, [sp, #20]
 801dc14:	9b03      	ldr	r3, [sp, #12]
 801dc16:	ad4e      	add	r5, sp, #312	; 0x138
 801dc18:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801dc1c:	220a      	movs	r2, #10
 801dc1e:	2300      	movs	r3, #0
 801dc20:	4630      	mov	r0, r6
 801dc22:	4639      	mov	r1, r7
 801dc24:	f7e2 ffe8 	bl	8000bf8 <__aeabi_uldivmod>
 801dc28:	9b05      	ldr	r3, [sp, #20]
 801dc2a:	3230      	adds	r2, #48	; 0x30
 801dc2c:	3301      	adds	r3, #1
 801dc2e:	f105 3bff 	add.w	fp, r5, #4294967295
 801dc32:	f805 2c01 	strb.w	r2, [r5, #-1]
 801dc36:	9305      	str	r3, [sp, #20]
 801dc38:	f1b8 0f00 	cmp.w	r8, #0
 801dc3c:	d019      	beq.n	801dc72 <_svfprintf_r+0xbf2>
 801dc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc40:	9a05      	ldr	r2, [sp, #20]
 801dc42:	781b      	ldrb	r3, [r3, #0]
 801dc44:	429a      	cmp	r2, r3
 801dc46:	d114      	bne.n	801dc72 <_svfprintf_r+0xbf2>
 801dc48:	2aff      	cmp	r2, #255	; 0xff
 801dc4a:	d012      	beq.n	801dc72 <_svfprintf_r+0xbf2>
 801dc4c:	2f00      	cmp	r7, #0
 801dc4e:	bf08      	it	eq
 801dc50:	2e0a      	cmpeq	r6, #10
 801dc52:	d30e      	bcc.n	801dc72 <_svfprintf_r+0xbf2>
 801dc54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dc56:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dc58:	ebab 0b03 	sub.w	fp, fp, r3
 801dc5c:	461a      	mov	r2, r3
 801dc5e:	4658      	mov	r0, fp
 801dc60:	f7ff f9b4 	bl	801cfcc <strncpy>
 801dc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc66:	785d      	ldrb	r5, [r3, #1]
 801dc68:	b195      	cbz	r5, 801dc90 <_svfprintf_r+0xc10>
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	930a      	str	r3, [sp, #40]	; 0x28
 801dc6e:	2300      	movs	r3, #0
 801dc70:	9305      	str	r3, [sp, #20]
 801dc72:	220a      	movs	r2, #10
 801dc74:	2300      	movs	r3, #0
 801dc76:	4630      	mov	r0, r6
 801dc78:	4639      	mov	r1, r7
 801dc7a:	f7e2 ffbd 	bl	8000bf8 <__aeabi_uldivmod>
 801dc7e:	2f00      	cmp	r7, #0
 801dc80:	bf08      	it	eq
 801dc82:	2e0a      	cmpeq	r6, #10
 801dc84:	f0c0 83ca 	bcc.w	801e41c <_svfprintf_r+0x139c>
 801dc88:	4606      	mov	r6, r0
 801dc8a:	460f      	mov	r7, r1
 801dc8c:	465d      	mov	r5, fp
 801dc8e:	e7c5      	b.n	801dc1c <_svfprintf_r+0xb9c>
 801dc90:	9505      	str	r5, [sp, #20]
 801dc92:	e7ee      	b.n	801dc72 <_svfprintf_r+0xbf2>
 801dc94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dc96:	f006 030f 	and.w	r3, r6, #15
 801dc9a:	5cd3      	ldrb	r3, [r2, r3]
 801dc9c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801dca0:	0933      	lsrs	r3, r6, #4
 801dca2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801dca6:	093a      	lsrs	r2, r7, #4
 801dca8:	461e      	mov	r6, r3
 801dcaa:	4617      	mov	r7, r2
 801dcac:	ea56 0307 	orrs.w	r3, r6, r7
 801dcb0:	d1f0      	bne.n	801dc94 <_svfprintf_r+0xc14>
 801dcb2:	e3b3      	b.n	801e41c <_svfprintf_r+0x139c>
 801dcb4:	b933      	cbnz	r3, 801dcc4 <_svfprintf_r+0xc44>
 801dcb6:	f018 0f01 	tst.w	r8, #1
 801dcba:	d003      	beq.n	801dcc4 <_svfprintf_r+0xc44>
 801dcbc:	2330      	movs	r3, #48	; 0x30
 801dcbe:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801dcc2:	e7a1      	b.n	801dc08 <_svfprintf_r+0xb88>
 801dcc4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801dcc8:	e3a8      	b.n	801e41c <_svfprintf_r+0x139c>
 801dcca:	9b07      	ldr	r3, [sp, #28]
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	f000 8373 	beq.w	801e3b8 <_svfprintf_r+0x1338>
 801dcd2:	2000      	movs	r0, #0
 801dcd4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801dcd8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801dcdc:	9606      	str	r6, [sp, #24]
 801dcde:	f7ff bb34 	b.w	801d34a <_svfprintf_r+0x2ca>
 801dce2:	9e03      	ldr	r6, [sp, #12]
 801dce4:	f7ff bb9e 	b.w	801d424 <_svfprintf_r+0x3a4>
 801dce8:	2010      	movs	r0, #16
 801dcea:	4402      	add	r2, r0
 801dcec:	2b07      	cmp	r3, #7
 801dcee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dcf2:	6060      	str	r0, [r4, #4]
 801dcf4:	dd08      	ble.n	801dd08 <_svfprintf_r+0xc88>
 801dcf6:	aa22      	add	r2, sp, #136	; 0x88
 801dcf8:	4649      	mov	r1, r9
 801dcfa:	4650      	mov	r0, sl
 801dcfc:	f002 fb0c 	bl	8020318 <__ssprint_r>
 801dd00:	2800      	cmp	r0, #0
 801dd02:	f040 8337 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dd06:	a925      	add	r1, sp, #148	; 0x94
 801dd08:	3f10      	subs	r7, #16
 801dd0a:	460c      	mov	r4, r1
 801dd0c:	e4fb      	b.n	801d706 <_svfprintf_r+0x686>
 801dd0e:	460c      	mov	r4, r1
 801dd10:	e514      	b.n	801d73c <_svfprintf_r+0x6bc>
 801dd12:	aa22      	add	r2, sp, #136	; 0x88
 801dd14:	4649      	mov	r1, r9
 801dd16:	4650      	mov	r0, sl
 801dd18:	f002 fafe 	bl	8020318 <__ssprint_r>
 801dd1c:	2800      	cmp	r0, #0
 801dd1e:	f040 8329 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dd22:	ac25      	add	r4, sp, #148	; 0x94
 801dd24:	e51c      	b.n	801d760 <_svfprintf_r+0x6e0>
 801dd26:	aa22      	add	r2, sp, #136	; 0x88
 801dd28:	4649      	mov	r1, r9
 801dd2a:	4650      	mov	r0, sl
 801dd2c:	f002 faf4 	bl	8020318 <__ssprint_r>
 801dd30:	2800      	cmp	r0, #0
 801dd32:	f040 831f 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dd36:	ac25      	add	r4, sp, #148	; 0x94
 801dd38:	e522      	b.n	801d780 <_svfprintf_r+0x700>
 801dd3a:	2010      	movs	r0, #16
 801dd3c:	4402      	add	r2, r0
 801dd3e:	2b07      	cmp	r3, #7
 801dd40:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dd44:	6060      	str	r0, [r4, #4]
 801dd46:	dd08      	ble.n	801dd5a <_svfprintf_r+0xcda>
 801dd48:	aa22      	add	r2, sp, #136	; 0x88
 801dd4a:	4649      	mov	r1, r9
 801dd4c:	4650      	mov	r0, sl
 801dd4e:	f002 fae3 	bl	8020318 <__ssprint_r>
 801dd52:	2800      	cmp	r0, #0
 801dd54:	f040 830e 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dd58:	a925      	add	r1, sp, #148	; 0x94
 801dd5a:	3f10      	subs	r7, #16
 801dd5c:	460c      	mov	r4, r1
 801dd5e:	e517      	b.n	801d790 <_svfprintf_r+0x710>
 801dd60:	460c      	mov	r4, r1
 801dd62:	e530      	b.n	801d7c6 <_svfprintf_r+0x746>
 801dd64:	2010      	movs	r0, #16
 801dd66:	4402      	add	r2, r0
 801dd68:	2b07      	cmp	r3, #7
 801dd6a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801dd6e:	6060      	str	r0, [r4, #4]
 801dd70:	dd08      	ble.n	801dd84 <_svfprintf_r+0xd04>
 801dd72:	aa22      	add	r2, sp, #136	; 0x88
 801dd74:	4649      	mov	r1, r9
 801dd76:	4650      	mov	r0, sl
 801dd78:	f002 face 	bl	8020318 <__ssprint_r>
 801dd7c:	2800      	cmp	r0, #0
 801dd7e:	f040 82f9 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dd82:	a925      	add	r1, sp, #148	; 0x94
 801dd84:	3e10      	subs	r6, #16
 801dd86:	460c      	mov	r4, r1
 801dd88:	e522      	b.n	801d7d0 <_svfprintf_r+0x750>
 801dd8a:	460c      	mov	r4, r1
 801dd8c:	e548      	b.n	801d820 <_svfprintf_r+0x7a0>
 801dd8e:	bf00      	nop
 801dd90:	0802cbc0 	.word	0x0802cbc0
 801dd94:	0802cbd1 	.word	0x0802cbd1
 801dd98:	9b07      	ldr	r3, [sp, #28]
 801dd9a:	2b65      	cmp	r3, #101	; 0x65
 801dd9c:	f340 8232 	ble.w	801e204 <_svfprintf_r+0x1184>
 801dda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801dda4:	2200      	movs	r2, #0
 801dda6:	2300      	movs	r3, #0
 801dda8:	f7e2 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 801ddac:	2800      	cmp	r0, #0
 801ddae:	d068      	beq.n	801de82 <_svfprintf_r+0xe02>
 801ddb0:	4b6d      	ldr	r3, [pc, #436]	; (801df68 <_svfprintf_r+0xee8>)
 801ddb2:	6023      	str	r3, [r4, #0]
 801ddb4:	2301      	movs	r3, #1
 801ddb6:	441e      	add	r6, r3
 801ddb8:	6063      	str	r3, [r4, #4]
 801ddba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ddbc:	9624      	str	r6, [sp, #144]	; 0x90
 801ddbe:	3301      	adds	r3, #1
 801ddc0:	2b07      	cmp	r3, #7
 801ddc2:	9323      	str	r3, [sp, #140]	; 0x8c
 801ddc4:	dc37      	bgt.n	801de36 <_svfprintf_r+0xdb6>
 801ddc6:	3408      	adds	r4, #8
 801ddc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ddca:	9a05      	ldr	r2, [sp, #20]
 801ddcc:	4293      	cmp	r3, r2
 801ddce:	db03      	blt.n	801ddd8 <_svfprintf_r+0xd58>
 801ddd0:	f018 0f01 	tst.w	r8, #1
 801ddd4:	f43f ad36 	beq.w	801d844 <_svfprintf_r+0x7c4>
 801ddd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ddda:	6023      	str	r3, [r4, #0]
 801dddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dde0:	6063      	str	r3, [r4, #4]
 801dde2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dde4:	4413      	add	r3, r2
 801dde6:	9324      	str	r3, [sp, #144]	; 0x90
 801dde8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ddea:	3301      	adds	r3, #1
 801ddec:	2b07      	cmp	r3, #7
 801ddee:	9323      	str	r3, [sp, #140]	; 0x8c
 801ddf0:	dc2b      	bgt.n	801de4a <_svfprintf_r+0xdca>
 801ddf2:	3408      	adds	r4, #8
 801ddf4:	9b05      	ldr	r3, [sp, #20]
 801ddf6:	1e5d      	subs	r5, r3, #1
 801ddf8:	2d00      	cmp	r5, #0
 801ddfa:	f77f ad23 	ble.w	801d844 <_svfprintf_r+0x7c4>
 801ddfe:	4e5b      	ldr	r6, [pc, #364]	; (801df6c <_svfprintf_r+0xeec>)
 801de00:	2710      	movs	r7, #16
 801de02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801de06:	2d10      	cmp	r5, #16
 801de08:	f103 0301 	add.w	r3, r3, #1
 801de0c:	f104 0108 	add.w	r1, r4, #8
 801de10:	6026      	str	r6, [r4, #0]
 801de12:	dc24      	bgt.n	801de5e <_svfprintf_r+0xdde>
 801de14:	6065      	str	r5, [r4, #4]
 801de16:	2b07      	cmp	r3, #7
 801de18:	4415      	add	r5, r2
 801de1a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801de1e:	f340 8288 	ble.w	801e332 <_svfprintf_r+0x12b2>
 801de22:	aa22      	add	r2, sp, #136	; 0x88
 801de24:	4649      	mov	r1, r9
 801de26:	4650      	mov	r0, sl
 801de28:	f002 fa76 	bl	8020318 <__ssprint_r>
 801de2c:	2800      	cmp	r0, #0
 801de2e:	f040 82a1 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801de32:	ac25      	add	r4, sp, #148	; 0x94
 801de34:	e506      	b.n	801d844 <_svfprintf_r+0x7c4>
 801de36:	aa22      	add	r2, sp, #136	; 0x88
 801de38:	4649      	mov	r1, r9
 801de3a:	4650      	mov	r0, sl
 801de3c:	f002 fa6c 	bl	8020318 <__ssprint_r>
 801de40:	2800      	cmp	r0, #0
 801de42:	f040 8297 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801de46:	ac25      	add	r4, sp, #148	; 0x94
 801de48:	e7be      	b.n	801ddc8 <_svfprintf_r+0xd48>
 801de4a:	aa22      	add	r2, sp, #136	; 0x88
 801de4c:	4649      	mov	r1, r9
 801de4e:	4650      	mov	r0, sl
 801de50:	f002 fa62 	bl	8020318 <__ssprint_r>
 801de54:	2800      	cmp	r0, #0
 801de56:	f040 828d 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801de5a:	ac25      	add	r4, sp, #148	; 0x94
 801de5c:	e7ca      	b.n	801ddf4 <_svfprintf_r+0xd74>
 801de5e:	3210      	adds	r2, #16
 801de60:	2b07      	cmp	r3, #7
 801de62:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801de66:	6067      	str	r7, [r4, #4]
 801de68:	dd08      	ble.n	801de7c <_svfprintf_r+0xdfc>
 801de6a:	aa22      	add	r2, sp, #136	; 0x88
 801de6c:	4649      	mov	r1, r9
 801de6e:	4650      	mov	r0, sl
 801de70:	f002 fa52 	bl	8020318 <__ssprint_r>
 801de74:	2800      	cmp	r0, #0
 801de76:	f040 827d 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801de7a:	a925      	add	r1, sp, #148	; 0x94
 801de7c:	3d10      	subs	r5, #16
 801de7e:	460c      	mov	r4, r1
 801de80:	e7bf      	b.n	801de02 <_svfprintf_r+0xd82>
 801de82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de84:	2b00      	cmp	r3, #0
 801de86:	dc73      	bgt.n	801df70 <_svfprintf_r+0xef0>
 801de88:	4b37      	ldr	r3, [pc, #220]	; (801df68 <_svfprintf_r+0xee8>)
 801de8a:	6023      	str	r3, [r4, #0]
 801de8c:	2301      	movs	r3, #1
 801de8e:	441e      	add	r6, r3
 801de90:	6063      	str	r3, [r4, #4]
 801de92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801de94:	9624      	str	r6, [sp, #144]	; 0x90
 801de96:	3301      	adds	r3, #1
 801de98:	2b07      	cmp	r3, #7
 801de9a:	9323      	str	r3, [sp, #140]	; 0x8c
 801de9c:	dc3d      	bgt.n	801df1a <_svfprintf_r+0xe9a>
 801de9e:	3408      	adds	r4, #8
 801dea0:	9905      	ldr	r1, [sp, #20]
 801dea2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801dea4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dea6:	430a      	orrs	r2, r1
 801dea8:	f008 0101 	and.w	r1, r8, #1
 801deac:	430a      	orrs	r2, r1
 801deae:	f43f acc9 	beq.w	801d844 <_svfprintf_r+0x7c4>
 801deb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801deb4:	6022      	str	r2, [r4, #0]
 801deb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801deb8:	6062      	str	r2, [r4, #4]
 801deba:	4413      	add	r3, r2
 801debc:	9324      	str	r3, [sp, #144]	; 0x90
 801debe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dec0:	3301      	adds	r3, #1
 801dec2:	2b07      	cmp	r3, #7
 801dec4:	9323      	str	r3, [sp, #140]	; 0x8c
 801dec6:	dc32      	bgt.n	801df2e <_svfprintf_r+0xeae>
 801dec8:	3408      	adds	r4, #8
 801deca:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801decc:	2d00      	cmp	r5, #0
 801dece:	da1b      	bge.n	801df08 <_svfprintf_r+0xe88>
 801ded0:	4e26      	ldr	r6, [pc, #152]	; (801df6c <_svfprintf_r+0xeec>)
 801ded2:	426d      	negs	r5, r5
 801ded4:	4623      	mov	r3, r4
 801ded6:	2710      	movs	r7, #16
 801ded8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801dedc:	2d10      	cmp	r5, #16
 801dede:	f102 0201 	add.w	r2, r2, #1
 801dee2:	f104 0408 	add.w	r4, r4, #8
 801dee6:	601e      	str	r6, [r3, #0]
 801dee8:	dc2b      	bgt.n	801df42 <_svfprintf_r+0xec2>
 801deea:	605d      	str	r5, [r3, #4]
 801deec:	2a07      	cmp	r2, #7
 801deee:	440d      	add	r5, r1
 801def0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801def4:	dd08      	ble.n	801df08 <_svfprintf_r+0xe88>
 801def6:	aa22      	add	r2, sp, #136	; 0x88
 801def8:	4649      	mov	r1, r9
 801defa:	4650      	mov	r0, sl
 801defc:	f002 fa0c 	bl	8020318 <__ssprint_r>
 801df00:	2800      	cmp	r0, #0
 801df02:	f040 8237 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801df06:	ac25      	add	r4, sp, #148	; 0x94
 801df08:	9b05      	ldr	r3, [sp, #20]
 801df0a:	9a05      	ldr	r2, [sp, #20]
 801df0c:	6063      	str	r3, [r4, #4]
 801df0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df10:	f8c4 b000 	str.w	fp, [r4]
 801df14:	4413      	add	r3, r2
 801df16:	9324      	str	r3, [sp, #144]	; 0x90
 801df18:	e48d      	b.n	801d836 <_svfprintf_r+0x7b6>
 801df1a:	aa22      	add	r2, sp, #136	; 0x88
 801df1c:	4649      	mov	r1, r9
 801df1e:	4650      	mov	r0, sl
 801df20:	f002 f9fa 	bl	8020318 <__ssprint_r>
 801df24:	2800      	cmp	r0, #0
 801df26:	f040 8225 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801df2a:	ac25      	add	r4, sp, #148	; 0x94
 801df2c:	e7b8      	b.n	801dea0 <_svfprintf_r+0xe20>
 801df2e:	aa22      	add	r2, sp, #136	; 0x88
 801df30:	4649      	mov	r1, r9
 801df32:	4650      	mov	r0, sl
 801df34:	f002 f9f0 	bl	8020318 <__ssprint_r>
 801df38:	2800      	cmp	r0, #0
 801df3a:	f040 821b 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801df3e:	ac25      	add	r4, sp, #148	; 0x94
 801df40:	e7c3      	b.n	801deca <_svfprintf_r+0xe4a>
 801df42:	3110      	adds	r1, #16
 801df44:	2a07      	cmp	r2, #7
 801df46:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801df4a:	605f      	str	r7, [r3, #4]
 801df4c:	dd08      	ble.n	801df60 <_svfprintf_r+0xee0>
 801df4e:	aa22      	add	r2, sp, #136	; 0x88
 801df50:	4649      	mov	r1, r9
 801df52:	4650      	mov	r0, sl
 801df54:	f002 f9e0 	bl	8020318 <__ssprint_r>
 801df58:	2800      	cmp	r0, #0
 801df5a:	f040 820b 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801df5e:	ac25      	add	r4, sp, #148	; 0x94
 801df60:	3d10      	subs	r5, #16
 801df62:	4623      	mov	r3, r4
 801df64:	e7b8      	b.n	801ded8 <_svfprintf_r+0xe58>
 801df66:	bf00      	nop
 801df68:	08024e97 	.word	0x08024e97
 801df6c:	0802cbf2 	.word	0x0802cbf2
 801df70:	9b05      	ldr	r3, [sp, #20]
 801df72:	42ab      	cmp	r3, r5
 801df74:	bfa8      	it	ge
 801df76:	462b      	movge	r3, r5
 801df78:	2b00      	cmp	r3, #0
 801df7a:	461f      	mov	r7, r3
 801df7c:	dd0a      	ble.n	801df94 <_svfprintf_r+0xf14>
 801df7e:	441e      	add	r6, r3
 801df80:	e9c4 b300 	strd	fp, r3, [r4]
 801df84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801df86:	9624      	str	r6, [sp, #144]	; 0x90
 801df88:	3301      	adds	r3, #1
 801df8a:	2b07      	cmp	r3, #7
 801df8c:	9323      	str	r3, [sp, #140]	; 0x8c
 801df8e:	f300 8086 	bgt.w	801e09e <_svfprintf_r+0x101e>
 801df92:	3408      	adds	r4, #8
 801df94:	2f00      	cmp	r7, #0
 801df96:	bfac      	ite	ge
 801df98:	1bee      	subge	r6, r5, r7
 801df9a:	462e      	movlt	r6, r5
 801df9c:	2e00      	cmp	r6, #0
 801df9e:	dd19      	ble.n	801dfd4 <_svfprintf_r+0xf54>
 801dfa0:	4f97      	ldr	r7, [pc, #604]	; (801e200 <_svfprintf_r+0x1180>)
 801dfa2:	6027      	str	r7, [r4, #0]
 801dfa4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801dfa8:	2e10      	cmp	r6, #16
 801dfaa:	f103 0301 	add.w	r3, r3, #1
 801dfae:	f104 0108 	add.w	r1, r4, #8
 801dfb2:	dc7e      	bgt.n	801e0b2 <_svfprintf_r+0x1032>
 801dfb4:	6066      	str	r6, [r4, #4]
 801dfb6:	2b07      	cmp	r3, #7
 801dfb8:	4416      	add	r6, r2
 801dfba:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801dfbe:	f340 808b 	ble.w	801e0d8 <_svfprintf_r+0x1058>
 801dfc2:	aa22      	add	r2, sp, #136	; 0x88
 801dfc4:	4649      	mov	r1, r9
 801dfc6:	4650      	mov	r0, sl
 801dfc8:	f002 f9a6 	bl	8020318 <__ssprint_r>
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	f040 81d1 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801dfd2:	ac25      	add	r4, sp, #148	; 0x94
 801dfd4:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801dfd8:	445d      	add	r5, fp
 801dfda:	d00b      	beq.n	801dff4 <_svfprintf_r+0xf74>
 801dfdc:	4e88      	ldr	r6, [pc, #544]	; (801e200 <_svfprintf_r+0x1180>)
 801dfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d17b      	bne.n	801e0dc <_svfprintf_r+0x105c>
 801dfe4:	9b08      	ldr	r3, [sp, #32]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d17b      	bne.n	801e0e2 <_svfprintf_r+0x1062>
 801dfea:	9b05      	ldr	r3, [sp, #20]
 801dfec:	445b      	add	r3, fp
 801dfee:	429d      	cmp	r5, r3
 801dff0:	bf28      	it	cs
 801dff2:	461d      	movcs	r5, r3
 801dff4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dff6:	9a05      	ldr	r2, [sp, #20]
 801dff8:	4293      	cmp	r3, r2
 801dffa:	db02      	blt.n	801e002 <_svfprintf_r+0xf82>
 801dffc:	f018 0f01 	tst.w	r8, #1
 801e000:	d00e      	beq.n	801e020 <_svfprintf_r+0xfa0>
 801e002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e004:	6023      	str	r3, [r4, #0]
 801e006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e00a:	6063      	str	r3, [r4, #4]
 801e00c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e00e:	4413      	add	r3, r2
 801e010:	9324      	str	r3, [sp, #144]	; 0x90
 801e012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e014:	3301      	adds	r3, #1
 801e016:	2b07      	cmp	r3, #7
 801e018:	9323      	str	r3, [sp, #140]	; 0x8c
 801e01a:	f300 80dd 	bgt.w	801e1d8 <_svfprintf_r+0x1158>
 801e01e:	3408      	adds	r4, #8
 801e020:	9b05      	ldr	r3, [sp, #20]
 801e022:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801e024:	eb0b 0203 	add.w	r2, fp, r3
 801e028:	1b9e      	subs	r6, r3, r6
 801e02a:	1b52      	subs	r2, r2, r5
 801e02c:	4296      	cmp	r6, r2
 801e02e:	bfa8      	it	ge
 801e030:	4616      	movge	r6, r2
 801e032:	2e00      	cmp	r6, #0
 801e034:	dd0b      	ble.n	801e04e <_svfprintf_r+0xfce>
 801e036:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e038:	4433      	add	r3, r6
 801e03a:	9324      	str	r3, [sp, #144]	; 0x90
 801e03c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e03e:	3301      	adds	r3, #1
 801e040:	2b07      	cmp	r3, #7
 801e042:	e9c4 5600 	strd	r5, r6, [r4]
 801e046:	9323      	str	r3, [sp, #140]	; 0x8c
 801e048:	f300 80d0 	bgt.w	801e1ec <_svfprintf_r+0x116c>
 801e04c:	3408      	adds	r4, #8
 801e04e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e050:	9b05      	ldr	r3, [sp, #20]
 801e052:	2e00      	cmp	r6, #0
 801e054:	eba3 0505 	sub.w	r5, r3, r5
 801e058:	bfa8      	it	ge
 801e05a:	1bad      	subge	r5, r5, r6
 801e05c:	2d00      	cmp	r5, #0
 801e05e:	f77f abf1 	ble.w	801d844 <_svfprintf_r+0x7c4>
 801e062:	4e67      	ldr	r6, [pc, #412]	; (801e200 <_svfprintf_r+0x1180>)
 801e064:	2710      	movs	r7, #16
 801e066:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e06a:	2d10      	cmp	r5, #16
 801e06c:	f103 0301 	add.w	r3, r3, #1
 801e070:	f104 0108 	add.w	r1, r4, #8
 801e074:	6026      	str	r6, [r4, #0]
 801e076:	f77f aecd 	ble.w	801de14 <_svfprintf_r+0xd94>
 801e07a:	3210      	adds	r2, #16
 801e07c:	2b07      	cmp	r3, #7
 801e07e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e082:	6067      	str	r7, [r4, #4]
 801e084:	dd08      	ble.n	801e098 <_svfprintf_r+0x1018>
 801e086:	aa22      	add	r2, sp, #136	; 0x88
 801e088:	4649      	mov	r1, r9
 801e08a:	4650      	mov	r0, sl
 801e08c:	f002 f944 	bl	8020318 <__ssprint_r>
 801e090:	2800      	cmp	r0, #0
 801e092:	f040 816f 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e096:	a925      	add	r1, sp, #148	; 0x94
 801e098:	3d10      	subs	r5, #16
 801e09a:	460c      	mov	r4, r1
 801e09c:	e7e3      	b.n	801e066 <_svfprintf_r+0xfe6>
 801e09e:	aa22      	add	r2, sp, #136	; 0x88
 801e0a0:	4649      	mov	r1, r9
 801e0a2:	4650      	mov	r0, sl
 801e0a4:	f002 f938 	bl	8020318 <__ssprint_r>
 801e0a8:	2800      	cmp	r0, #0
 801e0aa:	f040 8163 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e0ae:	ac25      	add	r4, sp, #148	; 0x94
 801e0b0:	e770      	b.n	801df94 <_svfprintf_r+0xf14>
 801e0b2:	2010      	movs	r0, #16
 801e0b4:	4402      	add	r2, r0
 801e0b6:	2b07      	cmp	r3, #7
 801e0b8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e0bc:	6060      	str	r0, [r4, #4]
 801e0be:	dd08      	ble.n	801e0d2 <_svfprintf_r+0x1052>
 801e0c0:	aa22      	add	r2, sp, #136	; 0x88
 801e0c2:	4649      	mov	r1, r9
 801e0c4:	4650      	mov	r0, sl
 801e0c6:	f002 f927 	bl	8020318 <__ssprint_r>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	f040 8152 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e0d0:	a925      	add	r1, sp, #148	; 0x94
 801e0d2:	3e10      	subs	r6, #16
 801e0d4:	460c      	mov	r4, r1
 801e0d6:	e764      	b.n	801dfa2 <_svfprintf_r+0xf22>
 801e0d8:	460c      	mov	r4, r1
 801e0da:	e77b      	b.n	801dfd4 <_svfprintf_r+0xf54>
 801e0dc:	9b08      	ldr	r3, [sp, #32]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d04a      	beq.n	801e178 <_svfprintf_r+0x10f8>
 801e0e2:	9b08      	ldr	r3, [sp, #32]
 801e0e4:	3b01      	subs	r3, #1
 801e0e6:	9308      	str	r3, [sp, #32]
 801e0e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e0ea:	6023      	str	r3, [r4, #0]
 801e0ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e0ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0f0:	6063      	str	r3, [r4, #4]
 801e0f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0f4:	4413      	add	r3, r2
 801e0f6:	9324      	str	r3, [sp, #144]	; 0x90
 801e0f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e0fa:	3301      	adds	r3, #1
 801e0fc:	2b07      	cmp	r3, #7
 801e0fe:	9323      	str	r3, [sp, #140]	; 0x8c
 801e100:	dc41      	bgt.n	801e186 <_svfprintf_r+0x1106>
 801e102:	3408      	adds	r4, #8
 801e104:	9b05      	ldr	r3, [sp, #20]
 801e106:	445b      	add	r3, fp
 801e108:	1b5a      	subs	r2, r3, r5
 801e10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e10c:	781b      	ldrb	r3, [r3, #0]
 801e10e:	4293      	cmp	r3, r2
 801e110:	bfa8      	it	ge
 801e112:	4613      	movge	r3, r2
 801e114:	2b00      	cmp	r3, #0
 801e116:	461f      	mov	r7, r3
 801e118:	dd0a      	ble.n	801e130 <_svfprintf_r+0x10b0>
 801e11a:	e9c4 5300 	strd	r5, r3, [r4]
 801e11e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e120:	443b      	add	r3, r7
 801e122:	9324      	str	r3, [sp, #144]	; 0x90
 801e124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e126:	3301      	adds	r3, #1
 801e128:	2b07      	cmp	r3, #7
 801e12a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e12c:	dc35      	bgt.n	801e19a <_svfprintf_r+0x111a>
 801e12e:	3408      	adds	r4, #8
 801e130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e132:	781b      	ldrb	r3, [r3, #0]
 801e134:	2f00      	cmp	r7, #0
 801e136:	bfac      	ite	ge
 801e138:	1bdf      	subge	r7, r3, r7
 801e13a:	461f      	movlt	r7, r3
 801e13c:	2f00      	cmp	r7, #0
 801e13e:	dd17      	ble.n	801e170 <_svfprintf_r+0x10f0>
 801e140:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801e144:	2f10      	cmp	r7, #16
 801e146:	f102 0201 	add.w	r2, r2, #1
 801e14a:	f104 0108 	add.w	r1, r4, #8
 801e14e:	6026      	str	r6, [r4, #0]
 801e150:	dc2d      	bgt.n	801e1ae <_svfprintf_r+0x112e>
 801e152:	443b      	add	r3, r7
 801e154:	2a07      	cmp	r2, #7
 801e156:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e15a:	6067      	str	r7, [r4, #4]
 801e15c:	dd3a      	ble.n	801e1d4 <_svfprintf_r+0x1154>
 801e15e:	aa22      	add	r2, sp, #136	; 0x88
 801e160:	4649      	mov	r1, r9
 801e162:	4650      	mov	r0, sl
 801e164:	f002 f8d8 	bl	8020318 <__ssprint_r>
 801e168:	2800      	cmp	r0, #0
 801e16a:	f040 8103 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e16e:	ac25      	add	r4, sp, #148	; 0x94
 801e170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e172:	781b      	ldrb	r3, [r3, #0]
 801e174:	441d      	add	r5, r3
 801e176:	e732      	b.n	801dfde <_svfprintf_r+0xf5e>
 801e178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e17a:	3b01      	subs	r3, #1
 801e17c:	930a      	str	r3, [sp, #40]	; 0x28
 801e17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e180:	3b01      	subs	r3, #1
 801e182:	9309      	str	r3, [sp, #36]	; 0x24
 801e184:	e7b0      	b.n	801e0e8 <_svfprintf_r+0x1068>
 801e186:	aa22      	add	r2, sp, #136	; 0x88
 801e188:	4649      	mov	r1, r9
 801e18a:	4650      	mov	r0, sl
 801e18c:	f002 f8c4 	bl	8020318 <__ssprint_r>
 801e190:	2800      	cmp	r0, #0
 801e192:	f040 80ef 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e196:	ac25      	add	r4, sp, #148	; 0x94
 801e198:	e7b4      	b.n	801e104 <_svfprintf_r+0x1084>
 801e19a:	aa22      	add	r2, sp, #136	; 0x88
 801e19c:	4649      	mov	r1, r9
 801e19e:	4650      	mov	r0, sl
 801e1a0:	f002 f8ba 	bl	8020318 <__ssprint_r>
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	f040 80e5 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e1aa:	ac25      	add	r4, sp, #148	; 0x94
 801e1ac:	e7c0      	b.n	801e130 <_svfprintf_r+0x10b0>
 801e1ae:	2010      	movs	r0, #16
 801e1b0:	4403      	add	r3, r0
 801e1b2:	2a07      	cmp	r2, #7
 801e1b4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e1b8:	6060      	str	r0, [r4, #4]
 801e1ba:	dd08      	ble.n	801e1ce <_svfprintf_r+0x114e>
 801e1bc:	aa22      	add	r2, sp, #136	; 0x88
 801e1be:	4649      	mov	r1, r9
 801e1c0:	4650      	mov	r0, sl
 801e1c2:	f002 f8a9 	bl	8020318 <__ssprint_r>
 801e1c6:	2800      	cmp	r0, #0
 801e1c8:	f040 80d4 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e1cc:	a925      	add	r1, sp, #148	; 0x94
 801e1ce:	3f10      	subs	r7, #16
 801e1d0:	460c      	mov	r4, r1
 801e1d2:	e7b5      	b.n	801e140 <_svfprintf_r+0x10c0>
 801e1d4:	460c      	mov	r4, r1
 801e1d6:	e7cb      	b.n	801e170 <_svfprintf_r+0x10f0>
 801e1d8:	aa22      	add	r2, sp, #136	; 0x88
 801e1da:	4649      	mov	r1, r9
 801e1dc:	4650      	mov	r0, sl
 801e1de:	f002 f89b 	bl	8020318 <__ssprint_r>
 801e1e2:	2800      	cmp	r0, #0
 801e1e4:	f040 80c6 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e1e8:	ac25      	add	r4, sp, #148	; 0x94
 801e1ea:	e719      	b.n	801e020 <_svfprintf_r+0xfa0>
 801e1ec:	aa22      	add	r2, sp, #136	; 0x88
 801e1ee:	4649      	mov	r1, r9
 801e1f0:	4650      	mov	r0, sl
 801e1f2:	f002 f891 	bl	8020318 <__ssprint_r>
 801e1f6:	2800      	cmp	r0, #0
 801e1f8:	f040 80bc 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e1fc:	ac25      	add	r4, sp, #148	; 0x94
 801e1fe:	e726      	b.n	801e04e <_svfprintf_r+0xfce>
 801e200:	0802cbf2 	.word	0x0802cbf2
 801e204:	9a05      	ldr	r2, [sp, #20]
 801e206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e208:	2a01      	cmp	r2, #1
 801e20a:	f106 0601 	add.w	r6, r6, #1
 801e20e:	f103 0301 	add.w	r3, r3, #1
 801e212:	f104 0508 	add.w	r5, r4, #8
 801e216:	dc02      	bgt.n	801e21e <_svfprintf_r+0x119e>
 801e218:	f018 0f01 	tst.w	r8, #1
 801e21c:	d07e      	beq.n	801e31c <_svfprintf_r+0x129c>
 801e21e:	2201      	movs	r2, #1
 801e220:	2b07      	cmp	r3, #7
 801e222:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e226:	f8c4 b000 	str.w	fp, [r4]
 801e22a:	6062      	str	r2, [r4, #4]
 801e22c:	dd08      	ble.n	801e240 <_svfprintf_r+0x11c0>
 801e22e:	aa22      	add	r2, sp, #136	; 0x88
 801e230:	4649      	mov	r1, r9
 801e232:	4650      	mov	r0, sl
 801e234:	f002 f870 	bl	8020318 <__ssprint_r>
 801e238:	2800      	cmp	r0, #0
 801e23a:	f040 809b 	bne.w	801e374 <_svfprintf_r+0x12f4>
 801e23e:	ad25      	add	r5, sp, #148	; 0x94
 801e240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e242:	602b      	str	r3, [r5, #0]
 801e244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e248:	606b      	str	r3, [r5, #4]
 801e24a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e24c:	4413      	add	r3, r2
 801e24e:	9324      	str	r3, [sp, #144]	; 0x90
 801e250:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e252:	3301      	adds	r3, #1
 801e254:	2b07      	cmp	r3, #7
 801e256:	9323      	str	r3, [sp, #140]	; 0x8c
 801e258:	dc32      	bgt.n	801e2c0 <_svfprintf_r+0x1240>
 801e25a:	3508      	adds	r5, #8
 801e25c:	9b05      	ldr	r3, [sp, #20]
 801e25e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e262:	1e5c      	subs	r4, r3, #1
 801e264:	2200      	movs	r2, #0
 801e266:	2300      	movs	r3, #0
 801e268:	f7e2 fc56 	bl	8000b18 <__aeabi_dcmpeq>
 801e26c:	2800      	cmp	r0, #0
 801e26e:	d130      	bne.n	801e2d2 <_svfprintf_r+0x1252>
 801e270:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e272:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e274:	9a05      	ldr	r2, [sp, #20]
 801e276:	3101      	adds	r1, #1
 801e278:	3b01      	subs	r3, #1
 801e27a:	f10b 0001 	add.w	r0, fp, #1
 801e27e:	4413      	add	r3, r2
 801e280:	2907      	cmp	r1, #7
 801e282:	e9c5 0400 	strd	r0, r4, [r5]
 801e286:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801e28a:	dd50      	ble.n	801e32e <_svfprintf_r+0x12ae>
 801e28c:	aa22      	add	r2, sp, #136	; 0x88
 801e28e:	4649      	mov	r1, r9
 801e290:	4650      	mov	r0, sl
 801e292:	f002 f841 	bl	8020318 <__ssprint_r>
 801e296:	2800      	cmp	r0, #0
 801e298:	d16c      	bne.n	801e374 <_svfprintf_r+0x12f4>
 801e29a:	ad25      	add	r5, sp, #148	; 0x94
 801e29c:	ab1e      	add	r3, sp, #120	; 0x78
 801e29e:	602b      	str	r3, [r5, #0]
 801e2a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e2a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e2a4:	606b      	str	r3, [r5, #4]
 801e2a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2a8:	4413      	add	r3, r2
 801e2aa:	9324      	str	r3, [sp, #144]	; 0x90
 801e2ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e2ae:	3301      	adds	r3, #1
 801e2b0:	2b07      	cmp	r3, #7
 801e2b2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e2b4:	f73f adb5 	bgt.w	801de22 <_svfprintf_r+0xda2>
 801e2b8:	f105 0408 	add.w	r4, r5, #8
 801e2bc:	f7ff bac2 	b.w	801d844 <_svfprintf_r+0x7c4>
 801e2c0:	aa22      	add	r2, sp, #136	; 0x88
 801e2c2:	4649      	mov	r1, r9
 801e2c4:	4650      	mov	r0, sl
 801e2c6:	f002 f827 	bl	8020318 <__ssprint_r>
 801e2ca:	2800      	cmp	r0, #0
 801e2cc:	d152      	bne.n	801e374 <_svfprintf_r+0x12f4>
 801e2ce:	ad25      	add	r5, sp, #148	; 0x94
 801e2d0:	e7c4      	b.n	801e25c <_svfprintf_r+0x11dc>
 801e2d2:	2c00      	cmp	r4, #0
 801e2d4:	dde2      	ble.n	801e29c <_svfprintf_r+0x121c>
 801e2d6:	4e58      	ldr	r6, [pc, #352]	; (801e438 <_svfprintf_r+0x13b8>)
 801e2d8:	2710      	movs	r7, #16
 801e2da:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e2de:	2c10      	cmp	r4, #16
 801e2e0:	f103 0301 	add.w	r3, r3, #1
 801e2e4:	f105 0108 	add.w	r1, r5, #8
 801e2e8:	602e      	str	r6, [r5, #0]
 801e2ea:	dc07      	bgt.n	801e2fc <_svfprintf_r+0x127c>
 801e2ec:	606c      	str	r4, [r5, #4]
 801e2ee:	2b07      	cmp	r3, #7
 801e2f0:	4414      	add	r4, r2
 801e2f2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801e2f6:	dcc9      	bgt.n	801e28c <_svfprintf_r+0x120c>
 801e2f8:	460d      	mov	r5, r1
 801e2fa:	e7cf      	b.n	801e29c <_svfprintf_r+0x121c>
 801e2fc:	3210      	adds	r2, #16
 801e2fe:	2b07      	cmp	r3, #7
 801e300:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e304:	606f      	str	r7, [r5, #4]
 801e306:	dd06      	ble.n	801e316 <_svfprintf_r+0x1296>
 801e308:	aa22      	add	r2, sp, #136	; 0x88
 801e30a:	4649      	mov	r1, r9
 801e30c:	4650      	mov	r0, sl
 801e30e:	f002 f803 	bl	8020318 <__ssprint_r>
 801e312:	bb78      	cbnz	r0, 801e374 <_svfprintf_r+0x12f4>
 801e314:	a925      	add	r1, sp, #148	; 0x94
 801e316:	3c10      	subs	r4, #16
 801e318:	460d      	mov	r5, r1
 801e31a:	e7de      	b.n	801e2da <_svfprintf_r+0x125a>
 801e31c:	2201      	movs	r2, #1
 801e31e:	2b07      	cmp	r3, #7
 801e320:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e324:	f8c4 b000 	str.w	fp, [r4]
 801e328:	6062      	str	r2, [r4, #4]
 801e32a:	ddb7      	ble.n	801e29c <_svfprintf_r+0x121c>
 801e32c:	e7ae      	b.n	801e28c <_svfprintf_r+0x120c>
 801e32e:	3508      	adds	r5, #8
 801e330:	e7b4      	b.n	801e29c <_svfprintf_r+0x121c>
 801e332:	460c      	mov	r4, r1
 801e334:	f7ff ba86 	b.w	801d844 <_svfprintf_r+0x7c4>
 801e338:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e33c:	1a9d      	subs	r5, r3, r2
 801e33e:	2d00      	cmp	r5, #0
 801e340:	f77f aa84 	ble.w	801d84c <_svfprintf_r+0x7cc>
 801e344:	4e3d      	ldr	r6, [pc, #244]	; (801e43c <_svfprintf_r+0x13bc>)
 801e346:	2710      	movs	r7, #16
 801e348:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e34c:	2d10      	cmp	r5, #16
 801e34e:	f103 0301 	add.w	r3, r3, #1
 801e352:	6026      	str	r6, [r4, #0]
 801e354:	dc18      	bgt.n	801e388 <_svfprintf_r+0x1308>
 801e356:	6065      	str	r5, [r4, #4]
 801e358:	2b07      	cmp	r3, #7
 801e35a:	4415      	add	r5, r2
 801e35c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e360:	f77f aa74 	ble.w	801d84c <_svfprintf_r+0x7cc>
 801e364:	aa22      	add	r2, sp, #136	; 0x88
 801e366:	4649      	mov	r1, r9
 801e368:	4650      	mov	r0, sl
 801e36a:	f001 ffd5 	bl	8020318 <__ssprint_r>
 801e36e:	2800      	cmp	r0, #0
 801e370:	f43f aa6c 	beq.w	801d84c <_svfprintf_r+0x7cc>
 801e374:	9b03      	ldr	r3, [sp, #12]
 801e376:	2b00      	cmp	r3, #0
 801e378:	f43f a88a 	beq.w	801d490 <_svfprintf_r+0x410>
 801e37c:	4619      	mov	r1, r3
 801e37e:	4650      	mov	r0, sl
 801e380:	f000 ff5a 	bl	801f238 <_free_r>
 801e384:	f7ff b884 	b.w	801d490 <_svfprintf_r+0x410>
 801e388:	3210      	adds	r2, #16
 801e38a:	2b07      	cmp	r3, #7
 801e38c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e390:	6067      	str	r7, [r4, #4]
 801e392:	dc02      	bgt.n	801e39a <_svfprintf_r+0x131a>
 801e394:	3408      	adds	r4, #8
 801e396:	3d10      	subs	r5, #16
 801e398:	e7d6      	b.n	801e348 <_svfprintf_r+0x12c8>
 801e39a:	aa22      	add	r2, sp, #136	; 0x88
 801e39c:	4649      	mov	r1, r9
 801e39e:	4650      	mov	r0, sl
 801e3a0:	f001 ffba 	bl	8020318 <__ssprint_r>
 801e3a4:	2800      	cmp	r0, #0
 801e3a6:	d1e5      	bne.n	801e374 <_svfprintf_r+0x12f4>
 801e3a8:	ac25      	add	r4, sp, #148	; 0x94
 801e3aa:	e7f4      	b.n	801e396 <_svfprintf_r+0x1316>
 801e3ac:	9903      	ldr	r1, [sp, #12]
 801e3ae:	4650      	mov	r0, sl
 801e3b0:	f000 ff42 	bl	801f238 <_free_r>
 801e3b4:	f7ff ba62 	b.w	801d87c <_svfprintf_r+0x7fc>
 801e3b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	f43f a868 	beq.w	801d490 <_svfprintf_r+0x410>
 801e3c0:	aa22      	add	r2, sp, #136	; 0x88
 801e3c2:	4649      	mov	r1, r9
 801e3c4:	4650      	mov	r0, sl
 801e3c6:	f001 ffa7 	bl	8020318 <__ssprint_r>
 801e3ca:	f7ff b861 	b.w	801d490 <_svfprintf_r+0x410>
 801e3ce:	ea56 0207 	orrs.w	r2, r6, r7
 801e3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3d6:	f43f ab78 	beq.w	801daca <_svfprintf_r+0xa4a>
 801e3da:	2b01      	cmp	r3, #1
 801e3dc:	f43f ac0d 	beq.w	801dbfa <_svfprintf_r+0xb7a>
 801e3e0:	2b02      	cmp	r3, #2
 801e3e2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801e3e6:	f43f ac55 	beq.w	801dc94 <_svfprintf_r+0xc14>
 801e3ea:	08f2      	lsrs	r2, r6, #3
 801e3ec:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801e3f0:	08f8      	lsrs	r0, r7, #3
 801e3f2:	f006 0307 	and.w	r3, r6, #7
 801e3f6:	4607      	mov	r7, r0
 801e3f8:	4616      	mov	r6, r2
 801e3fa:	3330      	adds	r3, #48	; 0x30
 801e3fc:	ea56 0207 	orrs.w	r2, r6, r7
 801e400:	4659      	mov	r1, fp
 801e402:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801e406:	d1f0      	bne.n	801e3ea <_svfprintf_r+0x136a>
 801e408:	9a03      	ldr	r2, [sp, #12]
 801e40a:	07d2      	lsls	r2, r2, #31
 801e40c:	d506      	bpl.n	801e41c <_svfprintf_r+0x139c>
 801e40e:	2b30      	cmp	r3, #48	; 0x30
 801e410:	d004      	beq.n	801e41c <_svfprintf_r+0x139c>
 801e412:	2330      	movs	r3, #48	; 0x30
 801e414:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801e418:	f1a1 0b02 	sub.w	fp, r1, #2
 801e41c:	ab4e      	add	r3, sp, #312	; 0x138
 801e41e:	eba3 030b 	sub.w	r3, r3, fp
 801e422:	9e04      	ldr	r6, [sp, #16]
 801e424:	9304      	str	r3, [sp, #16]
 801e426:	2300      	movs	r3, #0
 801e428:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801e42c:	9303      	str	r3, [sp, #12]
 801e42e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e432:	461d      	mov	r5, r3
 801e434:	f7ff b94c 	b.w	801d6d0 <_svfprintf_r+0x650>
 801e438:	0802cbf2 	.word	0x0802cbf2
 801e43c:	0802cbe2 	.word	0x0802cbe2

0801e440 <_write_r>:
 801e440:	b538      	push	{r3, r4, r5, lr}
 801e442:	4d07      	ldr	r5, [pc, #28]	; (801e460 <_write_r+0x20>)
 801e444:	4604      	mov	r4, r0
 801e446:	4608      	mov	r0, r1
 801e448:	4611      	mov	r1, r2
 801e44a:	2200      	movs	r2, #0
 801e44c:	602a      	str	r2, [r5, #0]
 801e44e:	461a      	mov	r2, r3
 801e450:	f7e2 ffb9 	bl	80013c6 <_write>
 801e454:	1c43      	adds	r3, r0, #1
 801e456:	d102      	bne.n	801e45e <_write_r+0x1e>
 801e458:	682b      	ldr	r3, [r5, #0]
 801e45a:	b103      	cbz	r3, 801e45e <_write_r+0x1e>
 801e45c:	6023      	str	r3, [r4, #0]
 801e45e:	bd38      	pop	{r3, r4, r5, pc}
 801e460:	20009910 	.word	0x20009910

0801e464 <register_fini>:
 801e464:	4b02      	ldr	r3, [pc, #8]	; (801e470 <register_fini+0xc>)
 801e466:	b113      	cbz	r3, 801e46e <register_fini+0xa>
 801e468:	4802      	ldr	r0, [pc, #8]	; (801e474 <register_fini+0x10>)
 801e46a:	f000 b805 	b.w	801e478 <atexit>
 801e46e:	4770      	bx	lr
 801e470:	00000000 	.word	0x00000000
 801e474:	0801f169 	.word	0x0801f169

0801e478 <atexit>:
 801e478:	2300      	movs	r3, #0
 801e47a:	4601      	mov	r1, r0
 801e47c:	461a      	mov	r2, r3
 801e47e:	4618      	mov	r0, r3
 801e480:	f001 bfe0 	b.w	8020444 <__register_exitproc>

0801e484 <_close_r>:
 801e484:	b538      	push	{r3, r4, r5, lr}
 801e486:	4d06      	ldr	r5, [pc, #24]	; (801e4a0 <_close_r+0x1c>)
 801e488:	2300      	movs	r3, #0
 801e48a:	4604      	mov	r4, r0
 801e48c:	4608      	mov	r0, r1
 801e48e:	602b      	str	r3, [r5, #0]
 801e490:	f7e2 ffa6 	bl	80013e0 <_close>
 801e494:	1c43      	adds	r3, r0, #1
 801e496:	d102      	bne.n	801e49e <_close_r+0x1a>
 801e498:	682b      	ldr	r3, [r5, #0]
 801e49a:	b103      	cbz	r3, 801e49e <_close_r+0x1a>
 801e49c:	6023      	str	r3, [r4, #0]
 801e49e:	bd38      	pop	{r3, r4, r5, pc}
 801e4a0:	20009910 	.word	0x20009910

0801e4a4 <quorem>:
 801e4a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a8:	6903      	ldr	r3, [r0, #16]
 801e4aa:	690c      	ldr	r4, [r1, #16]
 801e4ac:	42a3      	cmp	r3, r4
 801e4ae:	4607      	mov	r7, r0
 801e4b0:	f2c0 8081 	blt.w	801e5b6 <quorem+0x112>
 801e4b4:	3c01      	subs	r4, #1
 801e4b6:	f101 0814 	add.w	r8, r1, #20
 801e4ba:	f100 0514 	add.w	r5, r0, #20
 801e4be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e4c2:	9301      	str	r3, [sp, #4]
 801e4c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e4c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e4cc:	3301      	adds	r3, #1
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e4d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e4d8:	fbb2 f6f3 	udiv	r6, r2, r3
 801e4dc:	d331      	bcc.n	801e542 <quorem+0x9e>
 801e4de:	f04f 0e00 	mov.w	lr, #0
 801e4e2:	4640      	mov	r0, r8
 801e4e4:	46ac      	mov	ip, r5
 801e4e6:	46f2      	mov	sl, lr
 801e4e8:	f850 2b04 	ldr.w	r2, [r0], #4
 801e4ec:	b293      	uxth	r3, r2
 801e4ee:	fb06 e303 	mla	r3, r6, r3, lr
 801e4f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e4f6:	b29b      	uxth	r3, r3
 801e4f8:	ebaa 0303 	sub.w	r3, sl, r3
 801e4fc:	0c12      	lsrs	r2, r2, #16
 801e4fe:	f8dc a000 	ldr.w	sl, [ip]
 801e502:	fb06 e202 	mla	r2, r6, r2, lr
 801e506:	fa13 f38a 	uxtah	r3, r3, sl
 801e50a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e50e:	fa1f fa82 	uxth.w	sl, r2
 801e512:	f8dc 2000 	ldr.w	r2, [ip]
 801e516:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e51a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e51e:	b29b      	uxth	r3, r3
 801e520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e524:	4581      	cmp	r9, r0
 801e526:	f84c 3b04 	str.w	r3, [ip], #4
 801e52a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e52e:	d2db      	bcs.n	801e4e8 <quorem+0x44>
 801e530:	f855 300b 	ldr.w	r3, [r5, fp]
 801e534:	b92b      	cbnz	r3, 801e542 <quorem+0x9e>
 801e536:	9b01      	ldr	r3, [sp, #4]
 801e538:	3b04      	subs	r3, #4
 801e53a:	429d      	cmp	r5, r3
 801e53c:	461a      	mov	r2, r3
 801e53e:	d32e      	bcc.n	801e59e <quorem+0xfa>
 801e540:	613c      	str	r4, [r7, #16]
 801e542:	4638      	mov	r0, r7
 801e544:	f001 fbe8 	bl	801fd18 <__mcmp>
 801e548:	2800      	cmp	r0, #0
 801e54a:	db24      	blt.n	801e596 <quorem+0xf2>
 801e54c:	3601      	adds	r6, #1
 801e54e:	4628      	mov	r0, r5
 801e550:	f04f 0c00 	mov.w	ip, #0
 801e554:	f858 2b04 	ldr.w	r2, [r8], #4
 801e558:	f8d0 e000 	ldr.w	lr, [r0]
 801e55c:	b293      	uxth	r3, r2
 801e55e:	ebac 0303 	sub.w	r3, ip, r3
 801e562:	0c12      	lsrs	r2, r2, #16
 801e564:	fa13 f38e 	uxtah	r3, r3, lr
 801e568:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e56c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e570:	b29b      	uxth	r3, r3
 801e572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e576:	45c1      	cmp	r9, r8
 801e578:	f840 3b04 	str.w	r3, [r0], #4
 801e57c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e580:	d2e8      	bcs.n	801e554 <quorem+0xb0>
 801e582:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e58a:	b922      	cbnz	r2, 801e596 <quorem+0xf2>
 801e58c:	3b04      	subs	r3, #4
 801e58e:	429d      	cmp	r5, r3
 801e590:	461a      	mov	r2, r3
 801e592:	d30a      	bcc.n	801e5aa <quorem+0x106>
 801e594:	613c      	str	r4, [r7, #16]
 801e596:	4630      	mov	r0, r6
 801e598:	b003      	add	sp, #12
 801e59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e59e:	6812      	ldr	r2, [r2, #0]
 801e5a0:	3b04      	subs	r3, #4
 801e5a2:	2a00      	cmp	r2, #0
 801e5a4:	d1cc      	bne.n	801e540 <quorem+0x9c>
 801e5a6:	3c01      	subs	r4, #1
 801e5a8:	e7c7      	b.n	801e53a <quorem+0x96>
 801e5aa:	6812      	ldr	r2, [r2, #0]
 801e5ac:	3b04      	subs	r3, #4
 801e5ae:	2a00      	cmp	r2, #0
 801e5b0:	d1f0      	bne.n	801e594 <quorem+0xf0>
 801e5b2:	3c01      	subs	r4, #1
 801e5b4:	e7eb      	b.n	801e58e <quorem+0xea>
 801e5b6:	2000      	movs	r0, #0
 801e5b8:	e7ee      	b.n	801e598 <quorem+0xf4>
 801e5ba:	0000      	movs	r0, r0
 801e5bc:	0000      	movs	r0, r0
	...

0801e5c0 <_dtoa_r>:
 801e5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5c4:	ed2d 8b02 	vpush	{d8}
 801e5c8:	b095      	sub	sp, #84	; 0x54
 801e5ca:	ec57 6b10 	vmov	r6, r7, d0
 801e5ce:	9105      	str	r1, [sp, #20]
 801e5d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801e5d2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e5d4:	9209      	str	r2, [sp, #36]	; 0x24
 801e5d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e5da:	4604      	mov	r4, r0
 801e5dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5de:	b141      	cbz	r1, 801e5f2 <_dtoa_r+0x32>
 801e5e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e5e2:	604a      	str	r2, [r1, #4]
 801e5e4:	2301      	movs	r3, #1
 801e5e6:	4093      	lsls	r3, r2
 801e5e8:	608b      	str	r3, [r1, #8]
 801e5ea:	f001 f98a 	bl	801f902 <_Bfree>
 801e5ee:	2300      	movs	r3, #0
 801e5f0:	6423      	str	r3, [r4, #64]	; 0x40
 801e5f2:	1e3b      	subs	r3, r7, #0
 801e5f4:	bfb9      	ittee	lt
 801e5f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e5fa:	9303      	strlt	r3, [sp, #12]
 801e5fc:	2300      	movge	r3, #0
 801e5fe:	602b      	strge	r3, [r5, #0]
 801e600:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e604:	4ba2      	ldr	r3, [pc, #648]	; (801e890 <_dtoa_r+0x2d0>)
 801e606:	bfbc      	itt	lt
 801e608:	2201      	movlt	r2, #1
 801e60a:	602a      	strlt	r2, [r5, #0]
 801e60c:	ea33 0309 	bics.w	r3, r3, r9
 801e610:	d11b      	bne.n	801e64a <_dtoa_r+0x8a>
 801e612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e614:	f242 730f 	movw	r3, #9999	; 0x270f
 801e618:	6013      	str	r3, [r2, #0]
 801e61a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e61e:	4333      	orrs	r3, r6
 801e620:	f000 8578 	beq.w	801f114 <_dtoa_r+0xb54>
 801e624:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e626:	b90b      	cbnz	r3, 801e62c <_dtoa_r+0x6c>
 801e628:	4b9a      	ldr	r3, [pc, #616]	; (801e894 <_dtoa_r+0x2d4>)
 801e62a:	e024      	b.n	801e676 <_dtoa_r+0xb6>
 801e62c:	4b99      	ldr	r3, [pc, #612]	; (801e894 <_dtoa_r+0x2d4>)
 801e62e:	9300      	str	r3, [sp, #0]
 801e630:	3303      	adds	r3, #3
 801e632:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e634:	6013      	str	r3, [r2, #0]
 801e636:	9800      	ldr	r0, [sp, #0]
 801e638:	b015      	add	sp, #84	; 0x54
 801e63a:	ecbd 8b02 	vpop	{d8}
 801e63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e642:	4b95      	ldr	r3, [pc, #596]	; (801e898 <_dtoa_r+0x2d8>)
 801e644:	9300      	str	r3, [sp, #0]
 801e646:	3308      	adds	r3, #8
 801e648:	e7f3      	b.n	801e632 <_dtoa_r+0x72>
 801e64a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e64e:	2200      	movs	r2, #0
 801e650:	ec51 0b17 	vmov	r0, r1, d7
 801e654:	2300      	movs	r3, #0
 801e656:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e65a:	f7e2 fa5d 	bl	8000b18 <__aeabi_dcmpeq>
 801e65e:	4680      	mov	r8, r0
 801e660:	b158      	cbz	r0, 801e67a <_dtoa_r+0xba>
 801e662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e664:	2301      	movs	r3, #1
 801e666:	6013      	str	r3, [r2, #0]
 801e668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	f000 854f 	beq.w	801f10e <_dtoa_r+0xb4e>
 801e670:	488a      	ldr	r0, [pc, #552]	; (801e89c <_dtoa_r+0x2dc>)
 801e672:	6018      	str	r0, [r3, #0]
 801e674:	1e43      	subs	r3, r0, #1
 801e676:	9300      	str	r3, [sp, #0]
 801e678:	e7dd      	b.n	801e636 <_dtoa_r+0x76>
 801e67a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e67e:	aa12      	add	r2, sp, #72	; 0x48
 801e680:	a913      	add	r1, sp, #76	; 0x4c
 801e682:	4620      	mov	r0, r4
 801e684:	f001 fbec 	bl	801fe60 <__d2b>
 801e688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e68c:	4683      	mov	fp, r0
 801e68e:	2d00      	cmp	r5, #0
 801e690:	d07c      	beq.n	801e78c <_dtoa_r+0x1cc>
 801e692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e694:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e69c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801e6a0:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e6a4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e6a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e6ac:	4b7c      	ldr	r3, [pc, #496]	; (801e8a0 <_dtoa_r+0x2e0>)
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	4630      	mov	r0, r6
 801e6b2:	4639      	mov	r1, r7
 801e6b4:	f7e1 fe10 	bl	80002d8 <__aeabi_dsub>
 801e6b8:	a36f      	add	r3, pc, #444	; (adr r3, 801e878 <_dtoa_r+0x2b8>)
 801e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6be:	f7e1 ffc3 	bl	8000648 <__aeabi_dmul>
 801e6c2:	a36f      	add	r3, pc, #444	; (adr r3, 801e880 <_dtoa_r+0x2c0>)
 801e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6c8:	f7e1 fe08 	bl	80002dc <__adddf3>
 801e6cc:	4606      	mov	r6, r0
 801e6ce:	4628      	mov	r0, r5
 801e6d0:	460f      	mov	r7, r1
 801e6d2:	f7e1 ff4f 	bl	8000574 <__aeabi_i2d>
 801e6d6:	a36c      	add	r3, pc, #432	; (adr r3, 801e888 <_dtoa_r+0x2c8>)
 801e6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6dc:	f7e1 ffb4 	bl	8000648 <__aeabi_dmul>
 801e6e0:	4602      	mov	r2, r0
 801e6e2:	460b      	mov	r3, r1
 801e6e4:	4630      	mov	r0, r6
 801e6e6:	4639      	mov	r1, r7
 801e6e8:	f7e1 fdf8 	bl	80002dc <__adddf3>
 801e6ec:	4606      	mov	r6, r0
 801e6ee:	460f      	mov	r7, r1
 801e6f0:	f7e2 fa5a 	bl	8000ba8 <__aeabi_d2iz>
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	4682      	mov	sl, r0
 801e6f8:	2300      	movs	r3, #0
 801e6fa:	4630      	mov	r0, r6
 801e6fc:	4639      	mov	r1, r7
 801e6fe:	f7e2 fa15 	bl	8000b2c <__aeabi_dcmplt>
 801e702:	b148      	cbz	r0, 801e718 <_dtoa_r+0x158>
 801e704:	4650      	mov	r0, sl
 801e706:	f7e1 ff35 	bl	8000574 <__aeabi_i2d>
 801e70a:	4632      	mov	r2, r6
 801e70c:	463b      	mov	r3, r7
 801e70e:	f7e2 fa03 	bl	8000b18 <__aeabi_dcmpeq>
 801e712:	b908      	cbnz	r0, 801e718 <_dtoa_r+0x158>
 801e714:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e718:	f1ba 0f16 	cmp.w	sl, #22
 801e71c:	d854      	bhi.n	801e7c8 <_dtoa_r+0x208>
 801e71e:	4b61      	ldr	r3, [pc, #388]	; (801e8a4 <_dtoa_r+0x2e4>)
 801e720:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e728:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e72c:	f7e2 f9fe 	bl	8000b2c <__aeabi_dcmplt>
 801e730:	2800      	cmp	r0, #0
 801e732:	d04b      	beq.n	801e7cc <_dtoa_r+0x20c>
 801e734:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e738:	2300      	movs	r3, #0
 801e73a:	930e      	str	r3, [sp, #56]	; 0x38
 801e73c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e73e:	1b5d      	subs	r5, r3, r5
 801e740:	1e6b      	subs	r3, r5, #1
 801e742:	9304      	str	r3, [sp, #16]
 801e744:	bf43      	ittte	mi
 801e746:	2300      	movmi	r3, #0
 801e748:	f1c5 0801 	rsbmi	r8, r5, #1
 801e74c:	9304      	strmi	r3, [sp, #16]
 801e74e:	f04f 0800 	movpl.w	r8, #0
 801e752:	f1ba 0f00 	cmp.w	sl, #0
 801e756:	db3b      	blt.n	801e7d0 <_dtoa_r+0x210>
 801e758:	9b04      	ldr	r3, [sp, #16]
 801e75a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801e75e:	4453      	add	r3, sl
 801e760:	9304      	str	r3, [sp, #16]
 801e762:	2300      	movs	r3, #0
 801e764:	9306      	str	r3, [sp, #24]
 801e766:	9b05      	ldr	r3, [sp, #20]
 801e768:	2b09      	cmp	r3, #9
 801e76a:	d86a      	bhi.n	801e842 <_dtoa_r+0x282>
 801e76c:	2b05      	cmp	r3, #5
 801e76e:	bfc4      	itt	gt
 801e770:	3b04      	subgt	r3, #4
 801e772:	9305      	strgt	r3, [sp, #20]
 801e774:	9b05      	ldr	r3, [sp, #20]
 801e776:	f1a3 0302 	sub.w	r3, r3, #2
 801e77a:	bfcc      	ite	gt
 801e77c:	2500      	movgt	r5, #0
 801e77e:	2501      	movle	r5, #1
 801e780:	2b03      	cmp	r3, #3
 801e782:	d86a      	bhi.n	801e85a <_dtoa_r+0x29a>
 801e784:	e8df f003 	tbb	[pc, r3]
 801e788:	5b4d4f2c 	.word	0x5b4d4f2c
 801e78c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801e790:	441d      	add	r5, r3
 801e792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801e796:	2b20      	cmp	r3, #32
 801e798:	bfc1      	itttt	gt
 801e79a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801e79e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801e7a2:	fa09 f303 	lslgt.w	r3, r9, r3
 801e7a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 801e7aa:	bfda      	itte	le
 801e7ac:	f1c3 0320 	rsble	r3, r3, #32
 801e7b0:	fa06 f003 	lslle.w	r0, r6, r3
 801e7b4:	4318      	orrgt	r0, r3
 801e7b6:	f7e1 fecd 	bl	8000554 <__aeabi_ui2d>
 801e7ba:	2301      	movs	r3, #1
 801e7bc:	4606      	mov	r6, r0
 801e7be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e7c2:	3d01      	subs	r5, #1
 801e7c4:	9310      	str	r3, [sp, #64]	; 0x40
 801e7c6:	e771      	b.n	801e6ac <_dtoa_r+0xec>
 801e7c8:	2301      	movs	r3, #1
 801e7ca:	e7b6      	b.n	801e73a <_dtoa_r+0x17a>
 801e7cc:	900e      	str	r0, [sp, #56]	; 0x38
 801e7ce:	e7b5      	b.n	801e73c <_dtoa_r+0x17c>
 801e7d0:	f1ca 0300 	rsb	r3, sl, #0
 801e7d4:	9306      	str	r3, [sp, #24]
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	eba8 080a 	sub.w	r8, r8, sl
 801e7dc:	930d      	str	r3, [sp, #52]	; 0x34
 801e7de:	e7c2      	b.n	801e766 <_dtoa_r+0x1a6>
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	9308      	str	r3, [sp, #32]
 801e7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	dc3a      	bgt.n	801e860 <_dtoa_r+0x2a0>
 801e7ea:	f04f 0901 	mov.w	r9, #1
 801e7ee:	f8cd 9004 	str.w	r9, [sp, #4]
 801e7f2:	464b      	mov	r3, r9
 801e7f4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	6462      	str	r2, [r4, #68]	; 0x44
 801e7fc:	2204      	movs	r2, #4
 801e7fe:	f102 0014 	add.w	r0, r2, #20
 801e802:	4298      	cmp	r0, r3
 801e804:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801e806:	d931      	bls.n	801e86c <_dtoa_r+0x2ac>
 801e808:	4620      	mov	r0, r4
 801e80a:	f001 f855 	bl	801f8b8 <_Balloc>
 801e80e:	9000      	str	r0, [sp, #0]
 801e810:	2800      	cmp	r0, #0
 801e812:	d14d      	bne.n	801e8b0 <_dtoa_r+0x2f0>
 801e814:	4b24      	ldr	r3, [pc, #144]	; (801e8a8 <_dtoa_r+0x2e8>)
 801e816:	4602      	mov	r2, r0
 801e818:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e81c:	4823      	ldr	r0, [pc, #140]	; (801e8ac <_dtoa_r+0x2ec>)
 801e81e:	f001 fe51 	bl	80204c4 <__assert_func>
 801e822:	2301      	movs	r3, #1
 801e824:	e7dd      	b.n	801e7e2 <_dtoa_r+0x222>
 801e826:	2300      	movs	r3, #0
 801e828:	9308      	str	r3, [sp, #32]
 801e82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e82c:	eb0a 0903 	add.w	r9, sl, r3
 801e830:	f109 0301 	add.w	r3, r9, #1
 801e834:	2b01      	cmp	r3, #1
 801e836:	9301      	str	r3, [sp, #4]
 801e838:	bfb8      	it	lt
 801e83a:	2301      	movlt	r3, #1
 801e83c:	e7dc      	b.n	801e7f8 <_dtoa_r+0x238>
 801e83e:	2301      	movs	r3, #1
 801e840:	e7f2      	b.n	801e828 <_dtoa_r+0x268>
 801e842:	2501      	movs	r5, #1
 801e844:	2300      	movs	r3, #0
 801e846:	9305      	str	r3, [sp, #20]
 801e848:	9508      	str	r5, [sp, #32]
 801e84a:	f04f 39ff 	mov.w	r9, #4294967295
 801e84e:	2200      	movs	r2, #0
 801e850:	f8cd 9004 	str.w	r9, [sp, #4]
 801e854:	2312      	movs	r3, #18
 801e856:	9209      	str	r2, [sp, #36]	; 0x24
 801e858:	e7ce      	b.n	801e7f8 <_dtoa_r+0x238>
 801e85a:	2301      	movs	r3, #1
 801e85c:	9308      	str	r3, [sp, #32]
 801e85e:	e7f4      	b.n	801e84a <_dtoa_r+0x28a>
 801e860:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e864:	f8cd 9004 	str.w	r9, [sp, #4]
 801e868:	464b      	mov	r3, r9
 801e86a:	e7c5      	b.n	801e7f8 <_dtoa_r+0x238>
 801e86c:	3101      	adds	r1, #1
 801e86e:	6461      	str	r1, [r4, #68]	; 0x44
 801e870:	0052      	lsls	r2, r2, #1
 801e872:	e7c4      	b.n	801e7fe <_dtoa_r+0x23e>
 801e874:	f3af 8000 	nop.w
 801e878:	636f4361 	.word	0x636f4361
 801e87c:	3fd287a7 	.word	0x3fd287a7
 801e880:	8b60c8b3 	.word	0x8b60c8b3
 801e884:	3fc68a28 	.word	0x3fc68a28
 801e888:	509f79fb 	.word	0x509f79fb
 801e88c:	3fd34413 	.word	0x3fd34413
 801e890:	7ff00000 	.word	0x7ff00000
 801e894:	0802cd03 	.word	0x0802cd03
 801e898:	0802cd07 	.word	0x0802cd07
 801e89c:	08024e98 	.word	0x08024e98
 801e8a0:	3ff80000 	.word	0x3ff80000
 801e8a4:	0802ce18 	.word	0x0802ce18
 801e8a8:	0802cd10 	.word	0x0802cd10
 801e8ac:	0802cd21 	.word	0x0802cd21
 801e8b0:	9b00      	ldr	r3, [sp, #0]
 801e8b2:	6423      	str	r3, [r4, #64]	; 0x40
 801e8b4:	9b01      	ldr	r3, [sp, #4]
 801e8b6:	2b0e      	cmp	r3, #14
 801e8b8:	f200 80ad 	bhi.w	801ea16 <_dtoa_r+0x456>
 801e8bc:	2d00      	cmp	r5, #0
 801e8be:	f000 80aa 	beq.w	801ea16 <_dtoa_r+0x456>
 801e8c2:	f1ba 0f00 	cmp.w	sl, #0
 801e8c6:	dd36      	ble.n	801e936 <_dtoa_r+0x376>
 801e8c8:	4ac2      	ldr	r2, [pc, #776]	; (801ebd4 <_dtoa_r+0x614>)
 801e8ca:	f00a 030f 	and.w	r3, sl, #15
 801e8ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e8d2:	ed93 7b00 	vldr	d7, [r3]
 801e8d6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801e8da:	ea4f 172a 	mov.w	r7, sl, asr #4
 801e8de:	eeb0 8a47 	vmov.f32	s16, s14
 801e8e2:	eef0 8a67 	vmov.f32	s17, s15
 801e8e6:	d016      	beq.n	801e916 <_dtoa_r+0x356>
 801e8e8:	4bbb      	ldr	r3, [pc, #748]	; (801ebd8 <_dtoa_r+0x618>)
 801e8ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e8ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e8f2:	f7e1 ffd3 	bl	800089c <__aeabi_ddiv>
 801e8f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e8fa:	f007 070f 	and.w	r7, r7, #15
 801e8fe:	2503      	movs	r5, #3
 801e900:	4eb5      	ldr	r6, [pc, #724]	; (801ebd8 <_dtoa_r+0x618>)
 801e902:	b957      	cbnz	r7, 801e91a <_dtoa_r+0x35a>
 801e904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e908:	ec53 2b18 	vmov	r2, r3, d8
 801e90c:	f7e1 ffc6 	bl	800089c <__aeabi_ddiv>
 801e910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e914:	e029      	b.n	801e96a <_dtoa_r+0x3aa>
 801e916:	2502      	movs	r5, #2
 801e918:	e7f2      	b.n	801e900 <_dtoa_r+0x340>
 801e91a:	07f9      	lsls	r1, r7, #31
 801e91c:	d508      	bpl.n	801e930 <_dtoa_r+0x370>
 801e91e:	ec51 0b18 	vmov	r0, r1, d8
 801e922:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e926:	f7e1 fe8f 	bl	8000648 <__aeabi_dmul>
 801e92a:	ec41 0b18 	vmov	d8, r0, r1
 801e92e:	3501      	adds	r5, #1
 801e930:	107f      	asrs	r7, r7, #1
 801e932:	3608      	adds	r6, #8
 801e934:	e7e5      	b.n	801e902 <_dtoa_r+0x342>
 801e936:	f000 80a6 	beq.w	801ea86 <_dtoa_r+0x4c6>
 801e93a:	f1ca 0600 	rsb	r6, sl, #0
 801e93e:	4ba5      	ldr	r3, [pc, #660]	; (801ebd4 <_dtoa_r+0x614>)
 801e940:	4fa5      	ldr	r7, [pc, #660]	; (801ebd8 <_dtoa_r+0x618>)
 801e942:	f006 020f 	and.w	r2, r6, #15
 801e946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e952:	f7e1 fe79 	bl	8000648 <__aeabi_dmul>
 801e956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e95a:	1136      	asrs	r6, r6, #4
 801e95c:	2300      	movs	r3, #0
 801e95e:	2502      	movs	r5, #2
 801e960:	2e00      	cmp	r6, #0
 801e962:	f040 8085 	bne.w	801ea70 <_dtoa_r+0x4b0>
 801e966:	2b00      	cmp	r3, #0
 801e968:	d1d2      	bne.n	801e910 <_dtoa_r+0x350>
 801e96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	f000 808c 	beq.w	801ea8a <_dtoa_r+0x4ca>
 801e972:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e976:	4b99      	ldr	r3, [pc, #612]	; (801ebdc <_dtoa_r+0x61c>)
 801e978:	2200      	movs	r2, #0
 801e97a:	4630      	mov	r0, r6
 801e97c:	4639      	mov	r1, r7
 801e97e:	f7e2 f8d5 	bl	8000b2c <__aeabi_dcmplt>
 801e982:	2800      	cmp	r0, #0
 801e984:	f000 8081 	beq.w	801ea8a <_dtoa_r+0x4ca>
 801e988:	9b01      	ldr	r3, [sp, #4]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d07d      	beq.n	801ea8a <_dtoa_r+0x4ca>
 801e98e:	f1b9 0f00 	cmp.w	r9, #0
 801e992:	dd3c      	ble.n	801ea0e <_dtoa_r+0x44e>
 801e994:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e998:	9307      	str	r3, [sp, #28]
 801e99a:	2200      	movs	r2, #0
 801e99c:	4b90      	ldr	r3, [pc, #576]	; (801ebe0 <_dtoa_r+0x620>)
 801e99e:	4630      	mov	r0, r6
 801e9a0:	4639      	mov	r1, r7
 801e9a2:	f7e1 fe51 	bl	8000648 <__aeabi_dmul>
 801e9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e9aa:	3501      	adds	r5, #1
 801e9ac:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801e9b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e9b4:	4628      	mov	r0, r5
 801e9b6:	f7e1 fddd 	bl	8000574 <__aeabi_i2d>
 801e9ba:	4632      	mov	r2, r6
 801e9bc:	463b      	mov	r3, r7
 801e9be:	f7e1 fe43 	bl	8000648 <__aeabi_dmul>
 801e9c2:	4b88      	ldr	r3, [pc, #544]	; (801ebe4 <_dtoa_r+0x624>)
 801e9c4:	2200      	movs	r2, #0
 801e9c6:	f7e1 fc89 	bl	80002dc <__adddf3>
 801e9ca:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801e9ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e9d2:	9303      	str	r3, [sp, #12]
 801e9d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d15c      	bne.n	801ea94 <_dtoa_r+0x4d4>
 801e9da:	4b83      	ldr	r3, [pc, #524]	; (801ebe8 <_dtoa_r+0x628>)
 801e9dc:	2200      	movs	r2, #0
 801e9de:	4630      	mov	r0, r6
 801e9e0:	4639      	mov	r1, r7
 801e9e2:	f7e1 fc79 	bl	80002d8 <__aeabi_dsub>
 801e9e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e9ea:	4606      	mov	r6, r0
 801e9ec:	460f      	mov	r7, r1
 801e9ee:	f7e2 f8bb 	bl	8000b68 <__aeabi_dcmpgt>
 801e9f2:	2800      	cmp	r0, #0
 801e9f4:	f040 8295 	bne.w	801ef22 <_dtoa_r+0x962>
 801e9f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e9fc:	4630      	mov	r0, r6
 801e9fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ea02:	4639      	mov	r1, r7
 801ea04:	f7e2 f892 	bl	8000b2c <__aeabi_dcmplt>
 801ea08:	2800      	cmp	r0, #0
 801ea0a:	f040 8287 	bne.w	801ef1c <_dtoa_r+0x95c>
 801ea0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ea12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	f2c0 8157 	blt.w	801eccc <_dtoa_r+0x70c>
 801ea1e:	f1ba 0f0e 	cmp.w	sl, #14
 801ea22:	f300 8153 	bgt.w	801eccc <_dtoa_r+0x70c>
 801ea26:	4b6b      	ldr	r3, [pc, #428]	; (801ebd4 <_dtoa_r+0x614>)
 801ea28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ea2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ea30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	f280 80e2 	bge.w	801ebfc <_dtoa_r+0x63c>
 801ea38:	9b01      	ldr	r3, [sp, #4]
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	f300 80de 	bgt.w	801ebfc <_dtoa_r+0x63c>
 801ea40:	f040 826c 	bne.w	801ef1c <_dtoa_r+0x95c>
 801ea44:	4b68      	ldr	r3, [pc, #416]	; (801ebe8 <_dtoa_r+0x628>)
 801ea46:	2200      	movs	r2, #0
 801ea48:	4640      	mov	r0, r8
 801ea4a:	4649      	mov	r1, r9
 801ea4c:	f7e1 fdfc 	bl	8000648 <__aeabi_dmul>
 801ea50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ea54:	f7e2 f87e 	bl	8000b54 <__aeabi_dcmpge>
 801ea58:	9e01      	ldr	r6, [sp, #4]
 801ea5a:	4637      	mov	r7, r6
 801ea5c:	2800      	cmp	r0, #0
 801ea5e:	f040 8242 	bne.w	801eee6 <_dtoa_r+0x926>
 801ea62:	9d00      	ldr	r5, [sp, #0]
 801ea64:	2331      	movs	r3, #49	; 0x31
 801ea66:	f805 3b01 	strb.w	r3, [r5], #1
 801ea6a:	f10a 0a01 	add.w	sl, sl, #1
 801ea6e:	e23e      	b.n	801eeee <_dtoa_r+0x92e>
 801ea70:	07f2      	lsls	r2, r6, #31
 801ea72:	d505      	bpl.n	801ea80 <_dtoa_r+0x4c0>
 801ea74:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ea78:	f7e1 fde6 	bl	8000648 <__aeabi_dmul>
 801ea7c:	3501      	adds	r5, #1
 801ea7e:	2301      	movs	r3, #1
 801ea80:	1076      	asrs	r6, r6, #1
 801ea82:	3708      	adds	r7, #8
 801ea84:	e76c      	b.n	801e960 <_dtoa_r+0x3a0>
 801ea86:	2502      	movs	r5, #2
 801ea88:	e76f      	b.n	801e96a <_dtoa_r+0x3aa>
 801ea8a:	9b01      	ldr	r3, [sp, #4]
 801ea8c:	f8cd a01c 	str.w	sl, [sp, #28]
 801ea90:	930c      	str	r3, [sp, #48]	; 0x30
 801ea92:	e78d      	b.n	801e9b0 <_dtoa_r+0x3f0>
 801ea94:	9900      	ldr	r1, [sp, #0]
 801ea96:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ea98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea9a:	4b4e      	ldr	r3, [pc, #312]	; (801ebd4 <_dtoa_r+0x614>)
 801ea9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eaa0:	4401      	add	r1, r0
 801eaa2:	9102      	str	r1, [sp, #8]
 801eaa4:	9908      	ldr	r1, [sp, #32]
 801eaa6:	eeb0 8a47 	vmov.f32	s16, s14
 801eaaa:	eef0 8a67 	vmov.f32	s17, s15
 801eaae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801eab6:	2900      	cmp	r1, #0
 801eab8:	d045      	beq.n	801eb46 <_dtoa_r+0x586>
 801eaba:	494c      	ldr	r1, [pc, #304]	; (801ebec <_dtoa_r+0x62c>)
 801eabc:	2000      	movs	r0, #0
 801eabe:	f7e1 feed 	bl	800089c <__aeabi_ddiv>
 801eac2:	ec53 2b18 	vmov	r2, r3, d8
 801eac6:	f7e1 fc07 	bl	80002d8 <__aeabi_dsub>
 801eaca:	9d00      	ldr	r5, [sp, #0]
 801eacc:	ec41 0b18 	vmov	d8, r0, r1
 801ead0:	4639      	mov	r1, r7
 801ead2:	4630      	mov	r0, r6
 801ead4:	f7e2 f868 	bl	8000ba8 <__aeabi_d2iz>
 801ead8:	900c      	str	r0, [sp, #48]	; 0x30
 801eada:	f7e1 fd4b 	bl	8000574 <__aeabi_i2d>
 801eade:	4602      	mov	r2, r0
 801eae0:	460b      	mov	r3, r1
 801eae2:	4630      	mov	r0, r6
 801eae4:	4639      	mov	r1, r7
 801eae6:	f7e1 fbf7 	bl	80002d8 <__aeabi_dsub>
 801eaea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eaec:	3330      	adds	r3, #48	; 0x30
 801eaee:	f805 3b01 	strb.w	r3, [r5], #1
 801eaf2:	ec53 2b18 	vmov	r2, r3, d8
 801eaf6:	4606      	mov	r6, r0
 801eaf8:	460f      	mov	r7, r1
 801eafa:	f7e2 f817 	bl	8000b2c <__aeabi_dcmplt>
 801eafe:	2800      	cmp	r0, #0
 801eb00:	d165      	bne.n	801ebce <_dtoa_r+0x60e>
 801eb02:	4632      	mov	r2, r6
 801eb04:	463b      	mov	r3, r7
 801eb06:	4935      	ldr	r1, [pc, #212]	; (801ebdc <_dtoa_r+0x61c>)
 801eb08:	2000      	movs	r0, #0
 801eb0a:	f7e1 fbe5 	bl	80002d8 <__aeabi_dsub>
 801eb0e:	ec53 2b18 	vmov	r2, r3, d8
 801eb12:	f7e2 f80b 	bl	8000b2c <__aeabi_dcmplt>
 801eb16:	2800      	cmp	r0, #0
 801eb18:	f040 80b8 	bne.w	801ec8c <_dtoa_r+0x6cc>
 801eb1c:	9b02      	ldr	r3, [sp, #8]
 801eb1e:	429d      	cmp	r5, r3
 801eb20:	f43f af75 	beq.w	801ea0e <_dtoa_r+0x44e>
 801eb24:	4b2e      	ldr	r3, [pc, #184]	; (801ebe0 <_dtoa_r+0x620>)
 801eb26:	ec51 0b18 	vmov	r0, r1, d8
 801eb2a:	2200      	movs	r2, #0
 801eb2c:	f7e1 fd8c 	bl	8000648 <__aeabi_dmul>
 801eb30:	4b2b      	ldr	r3, [pc, #172]	; (801ebe0 <_dtoa_r+0x620>)
 801eb32:	ec41 0b18 	vmov	d8, r0, r1
 801eb36:	2200      	movs	r2, #0
 801eb38:	4630      	mov	r0, r6
 801eb3a:	4639      	mov	r1, r7
 801eb3c:	f7e1 fd84 	bl	8000648 <__aeabi_dmul>
 801eb40:	4606      	mov	r6, r0
 801eb42:	460f      	mov	r7, r1
 801eb44:	e7c4      	b.n	801ead0 <_dtoa_r+0x510>
 801eb46:	ec51 0b17 	vmov	r0, r1, d7
 801eb4a:	f7e1 fd7d 	bl	8000648 <__aeabi_dmul>
 801eb4e:	9b02      	ldr	r3, [sp, #8]
 801eb50:	9d00      	ldr	r5, [sp, #0]
 801eb52:	930c      	str	r3, [sp, #48]	; 0x30
 801eb54:	ec41 0b18 	vmov	d8, r0, r1
 801eb58:	4639      	mov	r1, r7
 801eb5a:	4630      	mov	r0, r6
 801eb5c:	f7e2 f824 	bl	8000ba8 <__aeabi_d2iz>
 801eb60:	9011      	str	r0, [sp, #68]	; 0x44
 801eb62:	f7e1 fd07 	bl	8000574 <__aeabi_i2d>
 801eb66:	4602      	mov	r2, r0
 801eb68:	460b      	mov	r3, r1
 801eb6a:	4630      	mov	r0, r6
 801eb6c:	4639      	mov	r1, r7
 801eb6e:	f7e1 fbb3 	bl	80002d8 <__aeabi_dsub>
 801eb72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eb74:	3330      	adds	r3, #48	; 0x30
 801eb76:	f805 3b01 	strb.w	r3, [r5], #1
 801eb7a:	9b02      	ldr	r3, [sp, #8]
 801eb7c:	429d      	cmp	r5, r3
 801eb7e:	4606      	mov	r6, r0
 801eb80:	460f      	mov	r7, r1
 801eb82:	f04f 0200 	mov.w	r2, #0
 801eb86:	d133      	bne.n	801ebf0 <_dtoa_r+0x630>
 801eb88:	4b18      	ldr	r3, [pc, #96]	; (801ebec <_dtoa_r+0x62c>)
 801eb8a:	ec51 0b18 	vmov	r0, r1, d8
 801eb8e:	f7e1 fba5 	bl	80002dc <__adddf3>
 801eb92:	4602      	mov	r2, r0
 801eb94:	460b      	mov	r3, r1
 801eb96:	4630      	mov	r0, r6
 801eb98:	4639      	mov	r1, r7
 801eb9a:	f7e1 ffe5 	bl	8000b68 <__aeabi_dcmpgt>
 801eb9e:	2800      	cmp	r0, #0
 801eba0:	d174      	bne.n	801ec8c <_dtoa_r+0x6cc>
 801eba2:	ec53 2b18 	vmov	r2, r3, d8
 801eba6:	4911      	ldr	r1, [pc, #68]	; (801ebec <_dtoa_r+0x62c>)
 801eba8:	2000      	movs	r0, #0
 801ebaa:	f7e1 fb95 	bl	80002d8 <__aeabi_dsub>
 801ebae:	4602      	mov	r2, r0
 801ebb0:	460b      	mov	r3, r1
 801ebb2:	4630      	mov	r0, r6
 801ebb4:	4639      	mov	r1, r7
 801ebb6:	f7e1 ffb9 	bl	8000b2c <__aeabi_dcmplt>
 801ebba:	2800      	cmp	r0, #0
 801ebbc:	f43f af27 	beq.w	801ea0e <_dtoa_r+0x44e>
 801ebc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ebc2:	1e6b      	subs	r3, r5, #1
 801ebc4:	930c      	str	r3, [sp, #48]	; 0x30
 801ebc6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ebca:	2b30      	cmp	r3, #48	; 0x30
 801ebcc:	d0f8      	beq.n	801ebc0 <_dtoa_r+0x600>
 801ebce:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ebd2:	e049      	b.n	801ec68 <_dtoa_r+0x6a8>
 801ebd4:	0802ce18 	.word	0x0802ce18
 801ebd8:	0802cdf0 	.word	0x0802cdf0
 801ebdc:	3ff00000 	.word	0x3ff00000
 801ebe0:	40240000 	.word	0x40240000
 801ebe4:	401c0000 	.word	0x401c0000
 801ebe8:	40140000 	.word	0x40140000
 801ebec:	3fe00000 	.word	0x3fe00000
 801ebf0:	4baf      	ldr	r3, [pc, #700]	; (801eeb0 <_dtoa_r+0x8f0>)
 801ebf2:	f7e1 fd29 	bl	8000648 <__aeabi_dmul>
 801ebf6:	4606      	mov	r6, r0
 801ebf8:	460f      	mov	r7, r1
 801ebfa:	e7ad      	b.n	801eb58 <_dtoa_r+0x598>
 801ebfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ec00:	9d00      	ldr	r5, [sp, #0]
 801ec02:	4642      	mov	r2, r8
 801ec04:	464b      	mov	r3, r9
 801ec06:	4630      	mov	r0, r6
 801ec08:	4639      	mov	r1, r7
 801ec0a:	f7e1 fe47 	bl	800089c <__aeabi_ddiv>
 801ec0e:	f7e1 ffcb 	bl	8000ba8 <__aeabi_d2iz>
 801ec12:	9002      	str	r0, [sp, #8]
 801ec14:	f7e1 fcae 	bl	8000574 <__aeabi_i2d>
 801ec18:	4642      	mov	r2, r8
 801ec1a:	464b      	mov	r3, r9
 801ec1c:	f7e1 fd14 	bl	8000648 <__aeabi_dmul>
 801ec20:	4602      	mov	r2, r0
 801ec22:	460b      	mov	r3, r1
 801ec24:	4630      	mov	r0, r6
 801ec26:	4639      	mov	r1, r7
 801ec28:	f7e1 fb56 	bl	80002d8 <__aeabi_dsub>
 801ec2c:	9e02      	ldr	r6, [sp, #8]
 801ec2e:	9f01      	ldr	r7, [sp, #4]
 801ec30:	3630      	adds	r6, #48	; 0x30
 801ec32:	f805 6b01 	strb.w	r6, [r5], #1
 801ec36:	9e00      	ldr	r6, [sp, #0]
 801ec38:	1bae      	subs	r6, r5, r6
 801ec3a:	42b7      	cmp	r7, r6
 801ec3c:	4602      	mov	r2, r0
 801ec3e:	460b      	mov	r3, r1
 801ec40:	d137      	bne.n	801ecb2 <_dtoa_r+0x6f2>
 801ec42:	f7e1 fb4b 	bl	80002dc <__adddf3>
 801ec46:	4642      	mov	r2, r8
 801ec48:	464b      	mov	r3, r9
 801ec4a:	4606      	mov	r6, r0
 801ec4c:	460f      	mov	r7, r1
 801ec4e:	f7e1 ff8b 	bl	8000b68 <__aeabi_dcmpgt>
 801ec52:	b9c8      	cbnz	r0, 801ec88 <_dtoa_r+0x6c8>
 801ec54:	4642      	mov	r2, r8
 801ec56:	464b      	mov	r3, r9
 801ec58:	4630      	mov	r0, r6
 801ec5a:	4639      	mov	r1, r7
 801ec5c:	f7e1 ff5c 	bl	8000b18 <__aeabi_dcmpeq>
 801ec60:	b110      	cbz	r0, 801ec68 <_dtoa_r+0x6a8>
 801ec62:	9b02      	ldr	r3, [sp, #8]
 801ec64:	07d9      	lsls	r1, r3, #31
 801ec66:	d40f      	bmi.n	801ec88 <_dtoa_r+0x6c8>
 801ec68:	4620      	mov	r0, r4
 801ec6a:	4659      	mov	r1, fp
 801ec6c:	f000 fe49 	bl	801f902 <_Bfree>
 801ec70:	2300      	movs	r3, #0
 801ec72:	702b      	strb	r3, [r5, #0]
 801ec74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec76:	f10a 0001 	add.w	r0, sl, #1
 801ec7a:	6018      	str	r0, [r3, #0]
 801ec7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	f43f acd9 	beq.w	801e636 <_dtoa_r+0x76>
 801ec84:	601d      	str	r5, [r3, #0]
 801ec86:	e4d6      	b.n	801e636 <_dtoa_r+0x76>
 801ec88:	f8cd a01c 	str.w	sl, [sp, #28]
 801ec8c:	462b      	mov	r3, r5
 801ec8e:	461d      	mov	r5, r3
 801ec90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ec94:	2a39      	cmp	r2, #57	; 0x39
 801ec96:	d108      	bne.n	801ecaa <_dtoa_r+0x6ea>
 801ec98:	9a00      	ldr	r2, [sp, #0]
 801ec9a:	429a      	cmp	r2, r3
 801ec9c:	d1f7      	bne.n	801ec8e <_dtoa_r+0x6ce>
 801ec9e:	9a07      	ldr	r2, [sp, #28]
 801eca0:	9900      	ldr	r1, [sp, #0]
 801eca2:	3201      	adds	r2, #1
 801eca4:	9207      	str	r2, [sp, #28]
 801eca6:	2230      	movs	r2, #48	; 0x30
 801eca8:	700a      	strb	r2, [r1, #0]
 801ecaa:	781a      	ldrb	r2, [r3, #0]
 801ecac:	3201      	adds	r2, #1
 801ecae:	701a      	strb	r2, [r3, #0]
 801ecb0:	e78d      	b.n	801ebce <_dtoa_r+0x60e>
 801ecb2:	4b7f      	ldr	r3, [pc, #508]	; (801eeb0 <_dtoa_r+0x8f0>)
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	f7e1 fcc7 	bl	8000648 <__aeabi_dmul>
 801ecba:	2200      	movs	r2, #0
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	4606      	mov	r6, r0
 801ecc0:	460f      	mov	r7, r1
 801ecc2:	f7e1 ff29 	bl	8000b18 <__aeabi_dcmpeq>
 801ecc6:	2800      	cmp	r0, #0
 801ecc8:	d09b      	beq.n	801ec02 <_dtoa_r+0x642>
 801ecca:	e7cd      	b.n	801ec68 <_dtoa_r+0x6a8>
 801eccc:	9a08      	ldr	r2, [sp, #32]
 801ecce:	2a00      	cmp	r2, #0
 801ecd0:	f000 80c4 	beq.w	801ee5c <_dtoa_r+0x89c>
 801ecd4:	9a05      	ldr	r2, [sp, #20]
 801ecd6:	2a01      	cmp	r2, #1
 801ecd8:	f300 80a8 	bgt.w	801ee2c <_dtoa_r+0x86c>
 801ecdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ecde:	2a00      	cmp	r2, #0
 801ece0:	f000 80a0 	beq.w	801ee24 <_dtoa_r+0x864>
 801ece4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ece8:	9e06      	ldr	r6, [sp, #24]
 801ecea:	4645      	mov	r5, r8
 801ecec:	9a04      	ldr	r2, [sp, #16]
 801ecee:	2101      	movs	r1, #1
 801ecf0:	441a      	add	r2, r3
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	4498      	add	r8, r3
 801ecf6:	9204      	str	r2, [sp, #16]
 801ecf8:	f000 fea6 	bl	801fa48 <__i2b>
 801ecfc:	4607      	mov	r7, r0
 801ecfe:	2d00      	cmp	r5, #0
 801ed00:	dd0b      	ble.n	801ed1a <_dtoa_r+0x75a>
 801ed02:	9b04      	ldr	r3, [sp, #16]
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	dd08      	ble.n	801ed1a <_dtoa_r+0x75a>
 801ed08:	42ab      	cmp	r3, r5
 801ed0a:	9a04      	ldr	r2, [sp, #16]
 801ed0c:	bfa8      	it	ge
 801ed0e:	462b      	movge	r3, r5
 801ed10:	eba8 0803 	sub.w	r8, r8, r3
 801ed14:	1aed      	subs	r5, r5, r3
 801ed16:	1ad3      	subs	r3, r2, r3
 801ed18:	9304      	str	r3, [sp, #16]
 801ed1a:	9b06      	ldr	r3, [sp, #24]
 801ed1c:	b1fb      	cbz	r3, 801ed5e <_dtoa_r+0x79e>
 801ed1e:	9b08      	ldr	r3, [sp, #32]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	f000 809f 	beq.w	801ee64 <_dtoa_r+0x8a4>
 801ed26:	2e00      	cmp	r6, #0
 801ed28:	dd11      	ble.n	801ed4e <_dtoa_r+0x78e>
 801ed2a:	4639      	mov	r1, r7
 801ed2c:	4632      	mov	r2, r6
 801ed2e:	4620      	mov	r0, r4
 801ed30:	f000 ff46 	bl	801fbc0 <__pow5mult>
 801ed34:	465a      	mov	r2, fp
 801ed36:	4601      	mov	r1, r0
 801ed38:	4607      	mov	r7, r0
 801ed3a:	4620      	mov	r0, r4
 801ed3c:	f000 fe9a 	bl	801fa74 <__multiply>
 801ed40:	4659      	mov	r1, fp
 801ed42:	9007      	str	r0, [sp, #28]
 801ed44:	4620      	mov	r0, r4
 801ed46:	f000 fddc 	bl	801f902 <_Bfree>
 801ed4a:	9b07      	ldr	r3, [sp, #28]
 801ed4c:	469b      	mov	fp, r3
 801ed4e:	9b06      	ldr	r3, [sp, #24]
 801ed50:	1b9a      	subs	r2, r3, r6
 801ed52:	d004      	beq.n	801ed5e <_dtoa_r+0x79e>
 801ed54:	4659      	mov	r1, fp
 801ed56:	4620      	mov	r0, r4
 801ed58:	f000 ff32 	bl	801fbc0 <__pow5mult>
 801ed5c:	4683      	mov	fp, r0
 801ed5e:	2101      	movs	r1, #1
 801ed60:	4620      	mov	r0, r4
 801ed62:	f000 fe71 	bl	801fa48 <__i2b>
 801ed66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	4606      	mov	r6, r0
 801ed6c:	dd7c      	ble.n	801ee68 <_dtoa_r+0x8a8>
 801ed6e:	461a      	mov	r2, r3
 801ed70:	4601      	mov	r1, r0
 801ed72:	4620      	mov	r0, r4
 801ed74:	f000 ff24 	bl	801fbc0 <__pow5mult>
 801ed78:	9b05      	ldr	r3, [sp, #20]
 801ed7a:	2b01      	cmp	r3, #1
 801ed7c:	4606      	mov	r6, r0
 801ed7e:	dd76      	ble.n	801ee6e <_dtoa_r+0x8ae>
 801ed80:	2300      	movs	r3, #0
 801ed82:	9306      	str	r3, [sp, #24]
 801ed84:	6933      	ldr	r3, [r6, #16]
 801ed86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ed8a:	6918      	ldr	r0, [r3, #16]
 801ed8c:	f000 fe0c 	bl	801f9a8 <__hi0bits>
 801ed90:	f1c0 0020 	rsb	r0, r0, #32
 801ed94:	9b04      	ldr	r3, [sp, #16]
 801ed96:	4418      	add	r0, r3
 801ed98:	f010 001f 	ands.w	r0, r0, #31
 801ed9c:	f000 8086 	beq.w	801eeac <_dtoa_r+0x8ec>
 801eda0:	f1c0 0320 	rsb	r3, r0, #32
 801eda4:	2b04      	cmp	r3, #4
 801eda6:	dd7f      	ble.n	801eea8 <_dtoa_r+0x8e8>
 801eda8:	f1c0 001c 	rsb	r0, r0, #28
 801edac:	9b04      	ldr	r3, [sp, #16]
 801edae:	4403      	add	r3, r0
 801edb0:	4480      	add	r8, r0
 801edb2:	4405      	add	r5, r0
 801edb4:	9304      	str	r3, [sp, #16]
 801edb6:	f1b8 0f00 	cmp.w	r8, #0
 801edba:	dd05      	ble.n	801edc8 <_dtoa_r+0x808>
 801edbc:	4659      	mov	r1, fp
 801edbe:	4642      	mov	r2, r8
 801edc0:	4620      	mov	r0, r4
 801edc2:	f000 ff3d 	bl	801fc40 <__lshift>
 801edc6:	4683      	mov	fp, r0
 801edc8:	9b04      	ldr	r3, [sp, #16]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	dd05      	ble.n	801edda <_dtoa_r+0x81a>
 801edce:	4631      	mov	r1, r6
 801edd0:	461a      	mov	r2, r3
 801edd2:	4620      	mov	r0, r4
 801edd4:	f000 ff34 	bl	801fc40 <__lshift>
 801edd8:	4606      	mov	r6, r0
 801edda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d069      	beq.n	801eeb4 <_dtoa_r+0x8f4>
 801ede0:	4631      	mov	r1, r6
 801ede2:	4658      	mov	r0, fp
 801ede4:	f000 ff98 	bl	801fd18 <__mcmp>
 801ede8:	2800      	cmp	r0, #0
 801edea:	da63      	bge.n	801eeb4 <_dtoa_r+0x8f4>
 801edec:	2300      	movs	r3, #0
 801edee:	4659      	mov	r1, fp
 801edf0:	220a      	movs	r2, #10
 801edf2:	4620      	mov	r0, r4
 801edf4:	f000 fd8e 	bl	801f914 <__multadd>
 801edf8:	9b08      	ldr	r3, [sp, #32]
 801edfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edfe:	4683      	mov	fp, r0
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	f000 818e 	beq.w	801f122 <_dtoa_r+0xb62>
 801ee06:	4639      	mov	r1, r7
 801ee08:	2300      	movs	r3, #0
 801ee0a:	220a      	movs	r2, #10
 801ee0c:	4620      	mov	r0, r4
 801ee0e:	f000 fd81 	bl	801f914 <__multadd>
 801ee12:	f1b9 0f00 	cmp.w	r9, #0
 801ee16:	4607      	mov	r7, r0
 801ee18:	f300 808e 	bgt.w	801ef38 <_dtoa_r+0x978>
 801ee1c:	9b05      	ldr	r3, [sp, #20]
 801ee1e:	2b02      	cmp	r3, #2
 801ee20:	dc50      	bgt.n	801eec4 <_dtoa_r+0x904>
 801ee22:	e089      	b.n	801ef38 <_dtoa_r+0x978>
 801ee24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ee26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ee2a:	e75d      	b.n	801ece8 <_dtoa_r+0x728>
 801ee2c:	9b01      	ldr	r3, [sp, #4]
 801ee2e:	1e5e      	subs	r6, r3, #1
 801ee30:	9b06      	ldr	r3, [sp, #24]
 801ee32:	42b3      	cmp	r3, r6
 801ee34:	bfbf      	itttt	lt
 801ee36:	9b06      	ldrlt	r3, [sp, #24]
 801ee38:	9606      	strlt	r6, [sp, #24]
 801ee3a:	1af2      	sublt	r2, r6, r3
 801ee3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801ee3e:	bfb6      	itet	lt
 801ee40:	189b      	addlt	r3, r3, r2
 801ee42:	1b9e      	subge	r6, r3, r6
 801ee44:	930d      	strlt	r3, [sp, #52]	; 0x34
 801ee46:	9b01      	ldr	r3, [sp, #4]
 801ee48:	bfb8      	it	lt
 801ee4a:	2600      	movlt	r6, #0
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	bfb5      	itete	lt
 801ee50:	eba8 0503 	sublt.w	r5, r8, r3
 801ee54:	9b01      	ldrge	r3, [sp, #4]
 801ee56:	2300      	movlt	r3, #0
 801ee58:	4645      	movge	r5, r8
 801ee5a:	e747      	b.n	801ecec <_dtoa_r+0x72c>
 801ee5c:	9e06      	ldr	r6, [sp, #24]
 801ee5e:	9f08      	ldr	r7, [sp, #32]
 801ee60:	4645      	mov	r5, r8
 801ee62:	e74c      	b.n	801ecfe <_dtoa_r+0x73e>
 801ee64:	9a06      	ldr	r2, [sp, #24]
 801ee66:	e775      	b.n	801ed54 <_dtoa_r+0x794>
 801ee68:	9b05      	ldr	r3, [sp, #20]
 801ee6a:	2b01      	cmp	r3, #1
 801ee6c:	dc18      	bgt.n	801eea0 <_dtoa_r+0x8e0>
 801ee6e:	9b02      	ldr	r3, [sp, #8]
 801ee70:	b9b3      	cbnz	r3, 801eea0 <_dtoa_r+0x8e0>
 801ee72:	9b03      	ldr	r3, [sp, #12]
 801ee74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ee78:	b9a3      	cbnz	r3, 801eea4 <_dtoa_r+0x8e4>
 801ee7a:	9b03      	ldr	r3, [sp, #12]
 801ee7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee80:	0d1b      	lsrs	r3, r3, #20
 801ee82:	051b      	lsls	r3, r3, #20
 801ee84:	b12b      	cbz	r3, 801ee92 <_dtoa_r+0x8d2>
 801ee86:	9b04      	ldr	r3, [sp, #16]
 801ee88:	3301      	adds	r3, #1
 801ee8a:	9304      	str	r3, [sp, #16]
 801ee8c:	f108 0801 	add.w	r8, r8, #1
 801ee90:	2301      	movs	r3, #1
 801ee92:	9306      	str	r3, [sp, #24]
 801ee94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	f47f af74 	bne.w	801ed84 <_dtoa_r+0x7c4>
 801ee9c:	2001      	movs	r0, #1
 801ee9e:	e779      	b.n	801ed94 <_dtoa_r+0x7d4>
 801eea0:	2300      	movs	r3, #0
 801eea2:	e7f6      	b.n	801ee92 <_dtoa_r+0x8d2>
 801eea4:	9b02      	ldr	r3, [sp, #8]
 801eea6:	e7f4      	b.n	801ee92 <_dtoa_r+0x8d2>
 801eea8:	d085      	beq.n	801edb6 <_dtoa_r+0x7f6>
 801eeaa:	4618      	mov	r0, r3
 801eeac:	301c      	adds	r0, #28
 801eeae:	e77d      	b.n	801edac <_dtoa_r+0x7ec>
 801eeb0:	40240000 	.word	0x40240000
 801eeb4:	9b01      	ldr	r3, [sp, #4]
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	dc38      	bgt.n	801ef2c <_dtoa_r+0x96c>
 801eeba:	9b05      	ldr	r3, [sp, #20]
 801eebc:	2b02      	cmp	r3, #2
 801eebe:	dd35      	ble.n	801ef2c <_dtoa_r+0x96c>
 801eec0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801eec4:	f1b9 0f00 	cmp.w	r9, #0
 801eec8:	d10d      	bne.n	801eee6 <_dtoa_r+0x926>
 801eeca:	4631      	mov	r1, r6
 801eecc:	464b      	mov	r3, r9
 801eece:	2205      	movs	r2, #5
 801eed0:	4620      	mov	r0, r4
 801eed2:	f000 fd1f 	bl	801f914 <__multadd>
 801eed6:	4601      	mov	r1, r0
 801eed8:	4606      	mov	r6, r0
 801eeda:	4658      	mov	r0, fp
 801eedc:	f000 ff1c 	bl	801fd18 <__mcmp>
 801eee0:	2800      	cmp	r0, #0
 801eee2:	f73f adbe 	bgt.w	801ea62 <_dtoa_r+0x4a2>
 801eee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eee8:	9d00      	ldr	r5, [sp, #0]
 801eeea:	ea6f 0a03 	mvn.w	sl, r3
 801eeee:	f04f 0800 	mov.w	r8, #0
 801eef2:	4631      	mov	r1, r6
 801eef4:	4620      	mov	r0, r4
 801eef6:	f000 fd04 	bl	801f902 <_Bfree>
 801eefa:	2f00      	cmp	r7, #0
 801eefc:	f43f aeb4 	beq.w	801ec68 <_dtoa_r+0x6a8>
 801ef00:	f1b8 0f00 	cmp.w	r8, #0
 801ef04:	d005      	beq.n	801ef12 <_dtoa_r+0x952>
 801ef06:	45b8      	cmp	r8, r7
 801ef08:	d003      	beq.n	801ef12 <_dtoa_r+0x952>
 801ef0a:	4641      	mov	r1, r8
 801ef0c:	4620      	mov	r0, r4
 801ef0e:	f000 fcf8 	bl	801f902 <_Bfree>
 801ef12:	4639      	mov	r1, r7
 801ef14:	4620      	mov	r0, r4
 801ef16:	f000 fcf4 	bl	801f902 <_Bfree>
 801ef1a:	e6a5      	b.n	801ec68 <_dtoa_r+0x6a8>
 801ef1c:	2600      	movs	r6, #0
 801ef1e:	4637      	mov	r7, r6
 801ef20:	e7e1      	b.n	801eee6 <_dtoa_r+0x926>
 801ef22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ef24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ef28:	4637      	mov	r7, r6
 801ef2a:	e59a      	b.n	801ea62 <_dtoa_r+0x4a2>
 801ef2c:	9b08      	ldr	r3, [sp, #32]
 801ef2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	f000 80fc 	beq.w	801f130 <_dtoa_r+0xb70>
 801ef38:	2d00      	cmp	r5, #0
 801ef3a:	dd05      	ble.n	801ef48 <_dtoa_r+0x988>
 801ef3c:	4639      	mov	r1, r7
 801ef3e:	462a      	mov	r2, r5
 801ef40:	4620      	mov	r0, r4
 801ef42:	f000 fe7d 	bl	801fc40 <__lshift>
 801ef46:	4607      	mov	r7, r0
 801ef48:	9b06      	ldr	r3, [sp, #24]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d05b      	beq.n	801f006 <_dtoa_r+0xa46>
 801ef4e:	6879      	ldr	r1, [r7, #4]
 801ef50:	4620      	mov	r0, r4
 801ef52:	f000 fcb1 	bl	801f8b8 <_Balloc>
 801ef56:	4605      	mov	r5, r0
 801ef58:	b920      	cbnz	r0, 801ef64 <_dtoa_r+0x9a4>
 801ef5a:	4b80      	ldr	r3, [pc, #512]	; (801f15c <_dtoa_r+0xb9c>)
 801ef5c:	4602      	mov	r2, r0
 801ef5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ef62:	e45b      	b.n	801e81c <_dtoa_r+0x25c>
 801ef64:	693a      	ldr	r2, [r7, #16]
 801ef66:	3202      	adds	r2, #2
 801ef68:	0092      	lsls	r2, r2, #2
 801ef6a:	f107 010c 	add.w	r1, r7, #12
 801ef6e:	300c      	adds	r0, #12
 801ef70:	f7fd ff64 	bl	801ce3c <memcpy>
 801ef74:	2201      	movs	r2, #1
 801ef76:	4629      	mov	r1, r5
 801ef78:	4620      	mov	r0, r4
 801ef7a:	f000 fe61 	bl	801fc40 <__lshift>
 801ef7e:	9b00      	ldr	r3, [sp, #0]
 801ef80:	3301      	adds	r3, #1
 801ef82:	9301      	str	r3, [sp, #4]
 801ef84:	9b00      	ldr	r3, [sp, #0]
 801ef86:	444b      	add	r3, r9
 801ef88:	9307      	str	r3, [sp, #28]
 801ef8a:	9b02      	ldr	r3, [sp, #8]
 801ef8c:	f003 0301 	and.w	r3, r3, #1
 801ef90:	46b8      	mov	r8, r7
 801ef92:	9306      	str	r3, [sp, #24]
 801ef94:	4607      	mov	r7, r0
 801ef96:	9b01      	ldr	r3, [sp, #4]
 801ef98:	4631      	mov	r1, r6
 801ef9a:	3b01      	subs	r3, #1
 801ef9c:	4658      	mov	r0, fp
 801ef9e:	9302      	str	r3, [sp, #8]
 801efa0:	f7ff fa80 	bl	801e4a4 <quorem>
 801efa4:	4603      	mov	r3, r0
 801efa6:	3330      	adds	r3, #48	; 0x30
 801efa8:	9004      	str	r0, [sp, #16]
 801efaa:	4641      	mov	r1, r8
 801efac:	4658      	mov	r0, fp
 801efae:	9308      	str	r3, [sp, #32]
 801efb0:	f000 feb2 	bl	801fd18 <__mcmp>
 801efb4:	463a      	mov	r2, r7
 801efb6:	4681      	mov	r9, r0
 801efb8:	4631      	mov	r1, r6
 801efba:	4620      	mov	r0, r4
 801efbc:	f000 fec8 	bl	801fd50 <__mdiff>
 801efc0:	68c2      	ldr	r2, [r0, #12]
 801efc2:	9b08      	ldr	r3, [sp, #32]
 801efc4:	4605      	mov	r5, r0
 801efc6:	bb02      	cbnz	r2, 801f00a <_dtoa_r+0xa4a>
 801efc8:	4601      	mov	r1, r0
 801efca:	4658      	mov	r0, fp
 801efcc:	f000 fea4 	bl	801fd18 <__mcmp>
 801efd0:	9b08      	ldr	r3, [sp, #32]
 801efd2:	4602      	mov	r2, r0
 801efd4:	4629      	mov	r1, r5
 801efd6:	4620      	mov	r0, r4
 801efd8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801efdc:	f000 fc91 	bl	801f902 <_Bfree>
 801efe0:	9b05      	ldr	r3, [sp, #20]
 801efe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efe4:	9d01      	ldr	r5, [sp, #4]
 801efe6:	ea43 0102 	orr.w	r1, r3, r2
 801efea:	9b06      	ldr	r3, [sp, #24]
 801efec:	430b      	orrs	r3, r1
 801efee:	9b08      	ldr	r3, [sp, #32]
 801eff0:	d10d      	bne.n	801f00e <_dtoa_r+0xa4e>
 801eff2:	2b39      	cmp	r3, #57	; 0x39
 801eff4:	d029      	beq.n	801f04a <_dtoa_r+0xa8a>
 801eff6:	f1b9 0f00 	cmp.w	r9, #0
 801effa:	dd01      	ble.n	801f000 <_dtoa_r+0xa40>
 801effc:	9b04      	ldr	r3, [sp, #16]
 801effe:	3331      	adds	r3, #49	; 0x31
 801f000:	9a02      	ldr	r2, [sp, #8]
 801f002:	7013      	strb	r3, [r2, #0]
 801f004:	e775      	b.n	801eef2 <_dtoa_r+0x932>
 801f006:	4638      	mov	r0, r7
 801f008:	e7b9      	b.n	801ef7e <_dtoa_r+0x9be>
 801f00a:	2201      	movs	r2, #1
 801f00c:	e7e2      	b.n	801efd4 <_dtoa_r+0xa14>
 801f00e:	f1b9 0f00 	cmp.w	r9, #0
 801f012:	db06      	blt.n	801f022 <_dtoa_r+0xa62>
 801f014:	9905      	ldr	r1, [sp, #20]
 801f016:	ea41 0909 	orr.w	r9, r1, r9
 801f01a:	9906      	ldr	r1, [sp, #24]
 801f01c:	ea59 0101 	orrs.w	r1, r9, r1
 801f020:	d120      	bne.n	801f064 <_dtoa_r+0xaa4>
 801f022:	2a00      	cmp	r2, #0
 801f024:	ddec      	ble.n	801f000 <_dtoa_r+0xa40>
 801f026:	4659      	mov	r1, fp
 801f028:	2201      	movs	r2, #1
 801f02a:	4620      	mov	r0, r4
 801f02c:	9301      	str	r3, [sp, #4]
 801f02e:	f000 fe07 	bl	801fc40 <__lshift>
 801f032:	4631      	mov	r1, r6
 801f034:	4683      	mov	fp, r0
 801f036:	f000 fe6f 	bl	801fd18 <__mcmp>
 801f03a:	2800      	cmp	r0, #0
 801f03c:	9b01      	ldr	r3, [sp, #4]
 801f03e:	dc02      	bgt.n	801f046 <_dtoa_r+0xa86>
 801f040:	d1de      	bne.n	801f000 <_dtoa_r+0xa40>
 801f042:	07da      	lsls	r2, r3, #31
 801f044:	d5dc      	bpl.n	801f000 <_dtoa_r+0xa40>
 801f046:	2b39      	cmp	r3, #57	; 0x39
 801f048:	d1d8      	bne.n	801effc <_dtoa_r+0xa3c>
 801f04a:	9a02      	ldr	r2, [sp, #8]
 801f04c:	2339      	movs	r3, #57	; 0x39
 801f04e:	7013      	strb	r3, [r2, #0]
 801f050:	462b      	mov	r3, r5
 801f052:	461d      	mov	r5, r3
 801f054:	3b01      	subs	r3, #1
 801f056:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f05a:	2a39      	cmp	r2, #57	; 0x39
 801f05c:	d050      	beq.n	801f100 <_dtoa_r+0xb40>
 801f05e:	3201      	adds	r2, #1
 801f060:	701a      	strb	r2, [r3, #0]
 801f062:	e746      	b.n	801eef2 <_dtoa_r+0x932>
 801f064:	2a00      	cmp	r2, #0
 801f066:	dd03      	ble.n	801f070 <_dtoa_r+0xab0>
 801f068:	2b39      	cmp	r3, #57	; 0x39
 801f06a:	d0ee      	beq.n	801f04a <_dtoa_r+0xa8a>
 801f06c:	3301      	adds	r3, #1
 801f06e:	e7c7      	b.n	801f000 <_dtoa_r+0xa40>
 801f070:	9a01      	ldr	r2, [sp, #4]
 801f072:	9907      	ldr	r1, [sp, #28]
 801f074:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f078:	428a      	cmp	r2, r1
 801f07a:	d02a      	beq.n	801f0d2 <_dtoa_r+0xb12>
 801f07c:	4659      	mov	r1, fp
 801f07e:	2300      	movs	r3, #0
 801f080:	220a      	movs	r2, #10
 801f082:	4620      	mov	r0, r4
 801f084:	f000 fc46 	bl	801f914 <__multadd>
 801f088:	45b8      	cmp	r8, r7
 801f08a:	4683      	mov	fp, r0
 801f08c:	f04f 0300 	mov.w	r3, #0
 801f090:	f04f 020a 	mov.w	r2, #10
 801f094:	4641      	mov	r1, r8
 801f096:	4620      	mov	r0, r4
 801f098:	d107      	bne.n	801f0aa <_dtoa_r+0xaea>
 801f09a:	f000 fc3b 	bl	801f914 <__multadd>
 801f09e:	4680      	mov	r8, r0
 801f0a0:	4607      	mov	r7, r0
 801f0a2:	9b01      	ldr	r3, [sp, #4]
 801f0a4:	3301      	adds	r3, #1
 801f0a6:	9301      	str	r3, [sp, #4]
 801f0a8:	e775      	b.n	801ef96 <_dtoa_r+0x9d6>
 801f0aa:	f000 fc33 	bl	801f914 <__multadd>
 801f0ae:	4639      	mov	r1, r7
 801f0b0:	4680      	mov	r8, r0
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	220a      	movs	r2, #10
 801f0b6:	4620      	mov	r0, r4
 801f0b8:	f000 fc2c 	bl	801f914 <__multadd>
 801f0bc:	4607      	mov	r7, r0
 801f0be:	e7f0      	b.n	801f0a2 <_dtoa_r+0xae2>
 801f0c0:	f1b9 0f00 	cmp.w	r9, #0
 801f0c4:	9a00      	ldr	r2, [sp, #0]
 801f0c6:	bfcc      	ite	gt
 801f0c8:	464d      	movgt	r5, r9
 801f0ca:	2501      	movle	r5, #1
 801f0cc:	4415      	add	r5, r2
 801f0ce:	f04f 0800 	mov.w	r8, #0
 801f0d2:	4659      	mov	r1, fp
 801f0d4:	2201      	movs	r2, #1
 801f0d6:	4620      	mov	r0, r4
 801f0d8:	9301      	str	r3, [sp, #4]
 801f0da:	f000 fdb1 	bl	801fc40 <__lshift>
 801f0de:	4631      	mov	r1, r6
 801f0e0:	4683      	mov	fp, r0
 801f0e2:	f000 fe19 	bl	801fd18 <__mcmp>
 801f0e6:	2800      	cmp	r0, #0
 801f0e8:	dcb2      	bgt.n	801f050 <_dtoa_r+0xa90>
 801f0ea:	d102      	bne.n	801f0f2 <_dtoa_r+0xb32>
 801f0ec:	9b01      	ldr	r3, [sp, #4]
 801f0ee:	07db      	lsls	r3, r3, #31
 801f0f0:	d4ae      	bmi.n	801f050 <_dtoa_r+0xa90>
 801f0f2:	462b      	mov	r3, r5
 801f0f4:	461d      	mov	r5, r3
 801f0f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f0fa:	2a30      	cmp	r2, #48	; 0x30
 801f0fc:	d0fa      	beq.n	801f0f4 <_dtoa_r+0xb34>
 801f0fe:	e6f8      	b.n	801eef2 <_dtoa_r+0x932>
 801f100:	9a00      	ldr	r2, [sp, #0]
 801f102:	429a      	cmp	r2, r3
 801f104:	d1a5      	bne.n	801f052 <_dtoa_r+0xa92>
 801f106:	f10a 0a01 	add.w	sl, sl, #1
 801f10a:	2331      	movs	r3, #49	; 0x31
 801f10c:	e779      	b.n	801f002 <_dtoa_r+0xa42>
 801f10e:	4b14      	ldr	r3, [pc, #80]	; (801f160 <_dtoa_r+0xba0>)
 801f110:	f7ff bab1 	b.w	801e676 <_dtoa_r+0xb6>
 801f114:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f116:	2b00      	cmp	r3, #0
 801f118:	f47f aa93 	bne.w	801e642 <_dtoa_r+0x82>
 801f11c:	4b11      	ldr	r3, [pc, #68]	; (801f164 <_dtoa_r+0xba4>)
 801f11e:	f7ff baaa 	b.w	801e676 <_dtoa_r+0xb6>
 801f122:	f1b9 0f00 	cmp.w	r9, #0
 801f126:	dc03      	bgt.n	801f130 <_dtoa_r+0xb70>
 801f128:	9b05      	ldr	r3, [sp, #20]
 801f12a:	2b02      	cmp	r3, #2
 801f12c:	f73f aeca 	bgt.w	801eec4 <_dtoa_r+0x904>
 801f130:	9d00      	ldr	r5, [sp, #0]
 801f132:	4631      	mov	r1, r6
 801f134:	4658      	mov	r0, fp
 801f136:	f7ff f9b5 	bl	801e4a4 <quorem>
 801f13a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f13e:	f805 3b01 	strb.w	r3, [r5], #1
 801f142:	9a00      	ldr	r2, [sp, #0]
 801f144:	1aaa      	subs	r2, r5, r2
 801f146:	4591      	cmp	r9, r2
 801f148:	ddba      	ble.n	801f0c0 <_dtoa_r+0xb00>
 801f14a:	4659      	mov	r1, fp
 801f14c:	2300      	movs	r3, #0
 801f14e:	220a      	movs	r2, #10
 801f150:	4620      	mov	r0, r4
 801f152:	f000 fbdf 	bl	801f914 <__multadd>
 801f156:	4683      	mov	fp, r0
 801f158:	e7eb      	b.n	801f132 <_dtoa_r+0xb72>
 801f15a:	bf00      	nop
 801f15c:	0802cd10 	.word	0x0802cd10
 801f160:	08024e97 	.word	0x08024e97
 801f164:	0802cd07 	.word	0x0802cd07

0801f168 <__libc_fini_array>:
 801f168:	b538      	push	{r3, r4, r5, lr}
 801f16a:	4d07      	ldr	r5, [pc, #28]	; (801f188 <__libc_fini_array+0x20>)
 801f16c:	4c07      	ldr	r4, [pc, #28]	; (801f18c <__libc_fini_array+0x24>)
 801f16e:	1b64      	subs	r4, r4, r5
 801f170:	10a4      	asrs	r4, r4, #2
 801f172:	b91c      	cbnz	r4, 801f17c <__libc_fini_array+0x14>
 801f174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f178:	f002 bbfe 	b.w	8021978 <_fini>
 801f17c:	3c01      	subs	r4, #1
 801f17e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f182:	4798      	blx	r3
 801f184:	e7f5      	b.n	801f172 <__libc_fini_array+0xa>
 801f186:	bf00      	nop
 801f188:	0802cf58 	.word	0x0802cf58
 801f18c:	0802cf5c 	.word	0x0802cf5c

0801f190 <_malloc_trim_r>:
 801f190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f194:	4606      	mov	r6, r0
 801f196:	2008      	movs	r0, #8
 801f198:	460c      	mov	r4, r1
 801f19a:	f001 f938 	bl	802040e <sysconf>
 801f19e:	4f23      	ldr	r7, [pc, #140]	; (801f22c <_malloc_trim_r+0x9c>)
 801f1a0:	4680      	mov	r8, r0
 801f1a2:	4630      	mov	r0, r6
 801f1a4:	f000 fb7c 	bl	801f8a0 <__malloc_lock>
 801f1a8:	68bb      	ldr	r3, [r7, #8]
 801f1aa:	685d      	ldr	r5, [r3, #4]
 801f1ac:	f025 0503 	bic.w	r5, r5, #3
 801f1b0:	1b2c      	subs	r4, r5, r4
 801f1b2:	3c11      	subs	r4, #17
 801f1b4:	4444      	add	r4, r8
 801f1b6:	fbb4 f4f8 	udiv	r4, r4, r8
 801f1ba:	3c01      	subs	r4, #1
 801f1bc:	fb08 f404 	mul.w	r4, r8, r4
 801f1c0:	45a0      	cmp	r8, r4
 801f1c2:	dd05      	ble.n	801f1d0 <_malloc_trim_r+0x40>
 801f1c4:	4630      	mov	r0, r6
 801f1c6:	f000 fb71 	bl	801f8ac <__malloc_unlock>
 801f1ca:	2000      	movs	r0, #0
 801f1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1d0:	2100      	movs	r1, #0
 801f1d2:	4630      	mov	r0, r6
 801f1d4:	f001 f890 	bl	80202f8 <_sbrk_r>
 801f1d8:	68bb      	ldr	r3, [r7, #8]
 801f1da:	442b      	add	r3, r5
 801f1dc:	4298      	cmp	r0, r3
 801f1de:	d1f1      	bne.n	801f1c4 <_malloc_trim_r+0x34>
 801f1e0:	4261      	negs	r1, r4
 801f1e2:	4630      	mov	r0, r6
 801f1e4:	f001 f888 	bl	80202f8 <_sbrk_r>
 801f1e8:	3001      	adds	r0, #1
 801f1ea:	d110      	bne.n	801f20e <_malloc_trim_r+0x7e>
 801f1ec:	2100      	movs	r1, #0
 801f1ee:	4630      	mov	r0, r6
 801f1f0:	f001 f882 	bl	80202f8 <_sbrk_r>
 801f1f4:	68ba      	ldr	r2, [r7, #8]
 801f1f6:	1a83      	subs	r3, r0, r2
 801f1f8:	2b0f      	cmp	r3, #15
 801f1fa:	dde3      	ble.n	801f1c4 <_malloc_trim_r+0x34>
 801f1fc:	490c      	ldr	r1, [pc, #48]	; (801f230 <_malloc_trim_r+0xa0>)
 801f1fe:	6809      	ldr	r1, [r1, #0]
 801f200:	1a40      	subs	r0, r0, r1
 801f202:	490c      	ldr	r1, [pc, #48]	; (801f234 <_malloc_trim_r+0xa4>)
 801f204:	f043 0301 	orr.w	r3, r3, #1
 801f208:	6008      	str	r0, [r1, #0]
 801f20a:	6053      	str	r3, [r2, #4]
 801f20c:	e7da      	b.n	801f1c4 <_malloc_trim_r+0x34>
 801f20e:	68bb      	ldr	r3, [r7, #8]
 801f210:	4a08      	ldr	r2, [pc, #32]	; (801f234 <_malloc_trim_r+0xa4>)
 801f212:	1b2d      	subs	r5, r5, r4
 801f214:	f045 0501 	orr.w	r5, r5, #1
 801f218:	605d      	str	r5, [r3, #4]
 801f21a:	6813      	ldr	r3, [r2, #0]
 801f21c:	4630      	mov	r0, r6
 801f21e:	1b1c      	subs	r4, r3, r4
 801f220:	6014      	str	r4, [r2, #0]
 801f222:	f000 fb43 	bl	801f8ac <__malloc_unlock>
 801f226:	2001      	movs	r0, #1
 801f228:	e7d0      	b.n	801f1cc <_malloc_trim_r+0x3c>
 801f22a:	bf00      	nop
 801f22c:	20000bc0 	.word	0x20000bc0
 801f230:	20000fc8 	.word	0x20000fc8
 801f234:	2000855c 	.word	0x2000855c

0801f238 <_free_r>:
 801f238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f23a:	4605      	mov	r5, r0
 801f23c:	460f      	mov	r7, r1
 801f23e:	2900      	cmp	r1, #0
 801f240:	f000 80b1 	beq.w	801f3a6 <_free_r+0x16e>
 801f244:	f000 fb2c 	bl	801f8a0 <__malloc_lock>
 801f248:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801f24c:	4856      	ldr	r0, [pc, #344]	; (801f3a8 <_free_r+0x170>)
 801f24e:	f022 0401 	bic.w	r4, r2, #1
 801f252:	f1a7 0308 	sub.w	r3, r7, #8
 801f256:	eb03 0c04 	add.w	ip, r3, r4
 801f25a:	6881      	ldr	r1, [r0, #8]
 801f25c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f260:	4561      	cmp	r1, ip
 801f262:	f026 0603 	bic.w	r6, r6, #3
 801f266:	f002 0201 	and.w	r2, r2, #1
 801f26a:	d11b      	bne.n	801f2a4 <_free_r+0x6c>
 801f26c:	4434      	add	r4, r6
 801f26e:	b93a      	cbnz	r2, 801f280 <_free_r+0x48>
 801f270:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801f274:	1a9b      	subs	r3, r3, r2
 801f276:	4414      	add	r4, r2
 801f278:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801f27c:	60ca      	str	r2, [r1, #12]
 801f27e:	6091      	str	r1, [r2, #8]
 801f280:	f044 0201 	orr.w	r2, r4, #1
 801f284:	605a      	str	r2, [r3, #4]
 801f286:	6083      	str	r3, [r0, #8]
 801f288:	4b48      	ldr	r3, [pc, #288]	; (801f3ac <_free_r+0x174>)
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	42a3      	cmp	r3, r4
 801f28e:	d804      	bhi.n	801f29a <_free_r+0x62>
 801f290:	4b47      	ldr	r3, [pc, #284]	; (801f3b0 <_free_r+0x178>)
 801f292:	4628      	mov	r0, r5
 801f294:	6819      	ldr	r1, [r3, #0]
 801f296:	f7ff ff7b 	bl	801f190 <_malloc_trim_r>
 801f29a:	4628      	mov	r0, r5
 801f29c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f2a0:	f000 bb04 	b.w	801f8ac <__malloc_unlock>
 801f2a4:	f8cc 6004 	str.w	r6, [ip, #4]
 801f2a8:	2a00      	cmp	r2, #0
 801f2aa:	d138      	bne.n	801f31e <_free_r+0xe6>
 801f2ac:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801f2b0:	1a5b      	subs	r3, r3, r1
 801f2b2:	440c      	add	r4, r1
 801f2b4:	6899      	ldr	r1, [r3, #8]
 801f2b6:	f100 0708 	add.w	r7, r0, #8
 801f2ba:	42b9      	cmp	r1, r7
 801f2bc:	d031      	beq.n	801f322 <_free_r+0xea>
 801f2be:	68df      	ldr	r7, [r3, #12]
 801f2c0:	60cf      	str	r7, [r1, #12]
 801f2c2:	60b9      	str	r1, [r7, #8]
 801f2c4:	eb0c 0106 	add.w	r1, ip, r6
 801f2c8:	6849      	ldr	r1, [r1, #4]
 801f2ca:	07c9      	lsls	r1, r1, #31
 801f2cc:	d40b      	bmi.n	801f2e6 <_free_r+0xae>
 801f2ce:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801f2d2:	4434      	add	r4, r6
 801f2d4:	bb3a      	cbnz	r2, 801f326 <_free_r+0xee>
 801f2d6:	4e37      	ldr	r6, [pc, #220]	; (801f3b4 <_free_r+0x17c>)
 801f2d8:	42b1      	cmp	r1, r6
 801f2da:	d124      	bne.n	801f326 <_free_r+0xee>
 801f2dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f2e0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801f2e4:	2201      	movs	r2, #1
 801f2e6:	f044 0101 	orr.w	r1, r4, #1
 801f2ea:	6059      	str	r1, [r3, #4]
 801f2ec:	511c      	str	r4, [r3, r4]
 801f2ee:	2a00      	cmp	r2, #0
 801f2f0:	d1d3      	bne.n	801f29a <_free_r+0x62>
 801f2f2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801f2f6:	d21b      	bcs.n	801f330 <_free_r+0xf8>
 801f2f8:	0961      	lsrs	r1, r4, #5
 801f2fa:	08e2      	lsrs	r2, r4, #3
 801f2fc:	2401      	movs	r4, #1
 801f2fe:	408c      	lsls	r4, r1
 801f300:	6841      	ldr	r1, [r0, #4]
 801f302:	3201      	adds	r2, #1
 801f304:	430c      	orrs	r4, r1
 801f306:	6044      	str	r4, [r0, #4]
 801f308:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801f30c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801f310:	3908      	subs	r1, #8
 801f312:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801f316:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801f31a:	60e3      	str	r3, [r4, #12]
 801f31c:	e7bd      	b.n	801f29a <_free_r+0x62>
 801f31e:	2200      	movs	r2, #0
 801f320:	e7d0      	b.n	801f2c4 <_free_r+0x8c>
 801f322:	2201      	movs	r2, #1
 801f324:	e7ce      	b.n	801f2c4 <_free_r+0x8c>
 801f326:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f32a:	60ce      	str	r6, [r1, #12]
 801f32c:	60b1      	str	r1, [r6, #8]
 801f32e:	e7da      	b.n	801f2e6 <_free_r+0xae>
 801f330:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801f334:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801f338:	d214      	bcs.n	801f364 <_free_r+0x12c>
 801f33a:	09a2      	lsrs	r2, r4, #6
 801f33c:	3238      	adds	r2, #56	; 0x38
 801f33e:	1c51      	adds	r1, r2, #1
 801f340:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801f344:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801f348:	428e      	cmp	r6, r1
 801f34a:	d125      	bne.n	801f398 <_free_r+0x160>
 801f34c:	2401      	movs	r4, #1
 801f34e:	1092      	asrs	r2, r2, #2
 801f350:	fa04 f202 	lsl.w	r2, r4, r2
 801f354:	6844      	ldr	r4, [r0, #4]
 801f356:	4322      	orrs	r2, r4
 801f358:	6042      	str	r2, [r0, #4]
 801f35a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801f35e:	60b3      	str	r3, [r6, #8]
 801f360:	60cb      	str	r3, [r1, #12]
 801f362:	e79a      	b.n	801f29a <_free_r+0x62>
 801f364:	2a14      	cmp	r2, #20
 801f366:	d801      	bhi.n	801f36c <_free_r+0x134>
 801f368:	325b      	adds	r2, #91	; 0x5b
 801f36a:	e7e8      	b.n	801f33e <_free_r+0x106>
 801f36c:	2a54      	cmp	r2, #84	; 0x54
 801f36e:	d802      	bhi.n	801f376 <_free_r+0x13e>
 801f370:	0b22      	lsrs	r2, r4, #12
 801f372:	326e      	adds	r2, #110	; 0x6e
 801f374:	e7e3      	b.n	801f33e <_free_r+0x106>
 801f376:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f37a:	d802      	bhi.n	801f382 <_free_r+0x14a>
 801f37c:	0be2      	lsrs	r2, r4, #15
 801f37e:	3277      	adds	r2, #119	; 0x77
 801f380:	e7dd      	b.n	801f33e <_free_r+0x106>
 801f382:	f240 5154 	movw	r1, #1364	; 0x554
 801f386:	428a      	cmp	r2, r1
 801f388:	bf9a      	itte	ls
 801f38a:	0ca2      	lsrls	r2, r4, #18
 801f38c:	327c      	addls	r2, #124	; 0x7c
 801f38e:	227e      	movhi	r2, #126	; 0x7e
 801f390:	e7d5      	b.n	801f33e <_free_r+0x106>
 801f392:	6889      	ldr	r1, [r1, #8]
 801f394:	428e      	cmp	r6, r1
 801f396:	d004      	beq.n	801f3a2 <_free_r+0x16a>
 801f398:	684a      	ldr	r2, [r1, #4]
 801f39a:	f022 0203 	bic.w	r2, r2, #3
 801f39e:	42a2      	cmp	r2, r4
 801f3a0:	d8f7      	bhi.n	801f392 <_free_r+0x15a>
 801f3a2:	68ce      	ldr	r6, [r1, #12]
 801f3a4:	e7d9      	b.n	801f35a <_free_r+0x122>
 801f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3a8:	20000bc0 	.word	0x20000bc0
 801f3ac:	20000fcc 	.word	0x20000fcc
 801f3b0:	2000858c 	.word	0x2000858c
 801f3b4:	20000bc8 	.word	0x20000bc8

0801f3b8 <__locale_mb_cur_max>:
 801f3b8:	4b01      	ldr	r3, [pc, #4]	; (801f3c0 <__locale_mb_cur_max+0x8>)
 801f3ba:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801f3be:	4770      	bx	lr
 801f3c0:	20000a54 	.word	0x20000a54

0801f3c4 <_localeconv_r>:
 801f3c4:	4800      	ldr	r0, [pc, #0]	; (801f3c8 <_localeconv_r+0x4>)
 801f3c6:	4770      	bx	lr
 801f3c8:	20000b44 	.word	0x20000b44

0801f3cc <__retarget_lock_init_recursive>:
 801f3cc:	4770      	bx	lr

0801f3ce <__retarget_lock_close_recursive>:
 801f3ce:	4770      	bx	lr

0801f3d0 <__retarget_lock_acquire_recursive>:
 801f3d0:	4770      	bx	lr

0801f3d2 <__retarget_lock_release_recursive>:
 801f3d2:	4770      	bx	lr

0801f3d4 <_lseek_r>:
 801f3d4:	b538      	push	{r3, r4, r5, lr}
 801f3d6:	4d07      	ldr	r5, [pc, #28]	; (801f3f4 <_lseek_r+0x20>)
 801f3d8:	4604      	mov	r4, r0
 801f3da:	4608      	mov	r0, r1
 801f3dc:	4611      	mov	r1, r2
 801f3de:	2200      	movs	r2, #0
 801f3e0:	602a      	str	r2, [r5, #0]
 801f3e2:	461a      	mov	r2, r3
 801f3e4:	f7e2 f806 	bl	80013f4 <_lseek>
 801f3e8:	1c43      	adds	r3, r0, #1
 801f3ea:	d102      	bne.n	801f3f2 <_lseek_r+0x1e>
 801f3ec:	682b      	ldr	r3, [r5, #0]
 801f3ee:	b103      	cbz	r3, 801f3f2 <_lseek_r+0x1e>
 801f3f0:	6023      	str	r3, [r4, #0]
 801f3f2:	bd38      	pop	{r3, r4, r5, pc}
 801f3f4:	20009910 	.word	0x20009910

0801f3f8 <_malloc_r>:
 801f3f8:	f101 030b 	add.w	r3, r1, #11
 801f3fc:	2b16      	cmp	r3, #22
 801f3fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f402:	4605      	mov	r5, r0
 801f404:	d906      	bls.n	801f414 <_malloc_r+0x1c>
 801f406:	f033 0707 	bics.w	r7, r3, #7
 801f40a:	d504      	bpl.n	801f416 <_malloc_r+0x1e>
 801f40c:	230c      	movs	r3, #12
 801f40e:	602b      	str	r3, [r5, #0]
 801f410:	2400      	movs	r4, #0
 801f412:	e1ae      	b.n	801f772 <_malloc_r+0x37a>
 801f414:	2710      	movs	r7, #16
 801f416:	42b9      	cmp	r1, r7
 801f418:	d8f8      	bhi.n	801f40c <_malloc_r+0x14>
 801f41a:	4628      	mov	r0, r5
 801f41c:	f000 fa40 	bl	801f8a0 <__malloc_lock>
 801f420:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801f424:	4ec3      	ldr	r6, [pc, #780]	; (801f734 <_malloc_r+0x33c>)
 801f426:	d238      	bcs.n	801f49a <_malloc_r+0xa2>
 801f428:	f107 0208 	add.w	r2, r7, #8
 801f42c:	4432      	add	r2, r6
 801f42e:	f1a2 0108 	sub.w	r1, r2, #8
 801f432:	6854      	ldr	r4, [r2, #4]
 801f434:	428c      	cmp	r4, r1
 801f436:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801f43a:	d102      	bne.n	801f442 <_malloc_r+0x4a>
 801f43c:	68d4      	ldr	r4, [r2, #12]
 801f43e:	42a2      	cmp	r2, r4
 801f440:	d010      	beq.n	801f464 <_malloc_r+0x6c>
 801f442:	6863      	ldr	r3, [r4, #4]
 801f444:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801f448:	f023 0303 	bic.w	r3, r3, #3
 801f44c:	60ca      	str	r2, [r1, #12]
 801f44e:	4423      	add	r3, r4
 801f450:	6091      	str	r1, [r2, #8]
 801f452:	685a      	ldr	r2, [r3, #4]
 801f454:	f042 0201 	orr.w	r2, r2, #1
 801f458:	605a      	str	r2, [r3, #4]
 801f45a:	4628      	mov	r0, r5
 801f45c:	f000 fa26 	bl	801f8ac <__malloc_unlock>
 801f460:	3408      	adds	r4, #8
 801f462:	e186      	b.n	801f772 <_malloc_r+0x37a>
 801f464:	3302      	adds	r3, #2
 801f466:	4ab4      	ldr	r2, [pc, #720]	; (801f738 <_malloc_r+0x340>)
 801f468:	6934      	ldr	r4, [r6, #16]
 801f46a:	4294      	cmp	r4, r2
 801f46c:	4611      	mov	r1, r2
 801f46e:	d077      	beq.n	801f560 <_malloc_r+0x168>
 801f470:	6860      	ldr	r0, [r4, #4]
 801f472:	f020 0c03 	bic.w	ip, r0, #3
 801f476:	ebac 0007 	sub.w	r0, ip, r7
 801f47a:	280f      	cmp	r0, #15
 801f47c:	dd48      	ble.n	801f510 <_malloc_r+0x118>
 801f47e:	19e1      	adds	r1, r4, r7
 801f480:	f040 0301 	orr.w	r3, r0, #1
 801f484:	f047 0701 	orr.w	r7, r7, #1
 801f488:	6067      	str	r7, [r4, #4]
 801f48a:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801f48e:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801f492:	604b      	str	r3, [r1, #4]
 801f494:	f844 000c 	str.w	r0, [r4, ip]
 801f498:	e7df      	b.n	801f45a <_malloc_r+0x62>
 801f49a:	0a7b      	lsrs	r3, r7, #9
 801f49c:	d02a      	beq.n	801f4f4 <_malloc_r+0xfc>
 801f49e:	2b04      	cmp	r3, #4
 801f4a0:	d812      	bhi.n	801f4c8 <_malloc_r+0xd0>
 801f4a2:	09bb      	lsrs	r3, r7, #6
 801f4a4:	3338      	adds	r3, #56	; 0x38
 801f4a6:	1c5a      	adds	r2, r3, #1
 801f4a8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801f4ac:	f1a2 0c08 	sub.w	ip, r2, #8
 801f4b0:	6854      	ldr	r4, [r2, #4]
 801f4b2:	4564      	cmp	r4, ip
 801f4b4:	d006      	beq.n	801f4c4 <_malloc_r+0xcc>
 801f4b6:	6862      	ldr	r2, [r4, #4]
 801f4b8:	f022 0203 	bic.w	r2, r2, #3
 801f4bc:	1bd0      	subs	r0, r2, r7
 801f4be:	280f      	cmp	r0, #15
 801f4c0:	dd1c      	ble.n	801f4fc <_malloc_r+0x104>
 801f4c2:	3b01      	subs	r3, #1
 801f4c4:	3301      	adds	r3, #1
 801f4c6:	e7ce      	b.n	801f466 <_malloc_r+0x6e>
 801f4c8:	2b14      	cmp	r3, #20
 801f4ca:	d801      	bhi.n	801f4d0 <_malloc_r+0xd8>
 801f4cc:	335b      	adds	r3, #91	; 0x5b
 801f4ce:	e7ea      	b.n	801f4a6 <_malloc_r+0xae>
 801f4d0:	2b54      	cmp	r3, #84	; 0x54
 801f4d2:	d802      	bhi.n	801f4da <_malloc_r+0xe2>
 801f4d4:	0b3b      	lsrs	r3, r7, #12
 801f4d6:	336e      	adds	r3, #110	; 0x6e
 801f4d8:	e7e5      	b.n	801f4a6 <_malloc_r+0xae>
 801f4da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801f4de:	d802      	bhi.n	801f4e6 <_malloc_r+0xee>
 801f4e0:	0bfb      	lsrs	r3, r7, #15
 801f4e2:	3377      	adds	r3, #119	; 0x77
 801f4e4:	e7df      	b.n	801f4a6 <_malloc_r+0xae>
 801f4e6:	f240 5254 	movw	r2, #1364	; 0x554
 801f4ea:	4293      	cmp	r3, r2
 801f4ec:	d804      	bhi.n	801f4f8 <_malloc_r+0x100>
 801f4ee:	0cbb      	lsrs	r3, r7, #18
 801f4f0:	337c      	adds	r3, #124	; 0x7c
 801f4f2:	e7d8      	b.n	801f4a6 <_malloc_r+0xae>
 801f4f4:	233f      	movs	r3, #63	; 0x3f
 801f4f6:	e7d6      	b.n	801f4a6 <_malloc_r+0xae>
 801f4f8:	237e      	movs	r3, #126	; 0x7e
 801f4fa:	e7d4      	b.n	801f4a6 <_malloc_r+0xae>
 801f4fc:	2800      	cmp	r0, #0
 801f4fe:	68e1      	ldr	r1, [r4, #12]
 801f500:	db04      	blt.n	801f50c <_malloc_r+0x114>
 801f502:	68a3      	ldr	r3, [r4, #8]
 801f504:	60d9      	str	r1, [r3, #12]
 801f506:	608b      	str	r3, [r1, #8]
 801f508:	18a3      	adds	r3, r4, r2
 801f50a:	e7a2      	b.n	801f452 <_malloc_r+0x5a>
 801f50c:	460c      	mov	r4, r1
 801f50e:	e7d0      	b.n	801f4b2 <_malloc_r+0xba>
 801f510:	2800      	cmp	r0, #0
 801f512:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801f516:	db07      	blt.n	801f528 <_malloc_r+0x130>
 801f518:	44a4      	add	ip, r4
 801f51a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f51e:	f043 0301 	orr.w	r3, r3, #1
 801f522:	f8cc 3004 	str.w	r3, [ip, #4]
 801f526:	e798      	b.n	801f45a <_malloc_r+0x62>
 801f528:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801f52c:	6870      	ldr	r0, [r6, #4]
 801f52e:	f080 809e 	bcs.w	801f66e <_malloc_r+0x276>
 801f532:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801f536:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801f53a:	f04f 0c01 	mov.w	ip, #1
 801f53e:	3201      	adds	r2, #1
 801f540:	fa0c fc0e 	lsl.w	ip, ip, lr
 801f544:	ea4c 0000 	orr.w	r0, ip, r0
 801f548:	6070      	str	r0, [r6, #4]
 801f54a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801f54e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801f552:	3808      	subs	r0, #8
 801f554:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801f558:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801f55c:	f8cc 400c 	str.w	r4, [ip, #12]
 801f560:	2001      	movs	r0, #1
 801f562:	109a      	asrs	r2, r3, #2
 801f564:	fa00 f202 	lsl.w	r2, r0, r2
 801f568:	6870      	ldr	r0, [r6, #4]
 801f56a:	4290      	cmp	r0, r2
 801f56c:	d326      	bcc.n	801f5bc <_malloc_r+0x1c4>
 801f56e:	4210      	tst	r0, r2
 801f570:	d106      	bne.n	801f580 <_malloc_r+0x188>
 801f572:	f023 0303 	bic.w	r3, r3, #3
 801f576:	0052      	lsls	r2, r2, #1
 801f578:	4210      	tst	r0, r2
 801f57a:	f103 0304 	add.w	r3, r3, #4
 801f57e:	d0fa      	beq.n	801f576 <_malloc_r+0x17e>
 801f580:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801f584:	46c1      	mov	r9, r8
 801f586:	469e      	mov	lr, r3
 801f588:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801f58c:	454c      	cmp	r4, r9
 801f58e:	f040 80b3 	bne.w	801f6f8 <_malloc_r+0x300>
 801f592:	f10e 0e01 	add.w	lr, lr, #1
 801f596:	f01e 0f03 	tst.w	lr, #3
 801f59a:	f109 0908 	add.w	r9, r9, #8
 801f59e:	d1f3      	bne.n	801f588 <_malloc_r+0x190>
 801f5a0:	0798      	lsls	r0, r3, #30
 801f5a2:	f040 80ec 	bne.w	801f77e <_malloc_r+0x386>
 801f5a6:	6873      	ldr	r3, [r6, #4]
 801f5a8:	ea23 0302 	bic.w	r3, r3, r2
 801f5ac:	6073      	str	r3, [r6, #4]
 801f5ae:	6870      	ldr	r0, [r6, #4]
 801f5b0:	0052      	lsls	r2, r2, #1
 801f5b2:	4290      	cmp	r0, r2
 801f5b4:	d302      	bcc.n	801f5bc <_malloc_r+0x1c4>
 801f5b6:	2a00      	cmp	r2, #0
 801f5b8:	f040 80ee 	bne.w	801f798 <_malloc_r+0x3a0>
 801f5bc:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801f5c0:	f8db 1004 	ldr.w	r1, [fp, #4]
 801f5c4:	f021 0903 	bic.w	r9, r1, #3
 801f5c8:	45b9      	cmp	r9, r7
 801f5ca:	d304      	bcc.n	801f5d6 <_malloc_r+0x1de>
 801f5cc:	eba9 0207 	sub.w	r2, r9, r7
 801f5d0:	2a0f      	cmp	r2, #15
 801f5d2:	f300 8149 	bgt.w	801f868 <_malloc_r+0x470>
 801f5d6:	4a59      	ldr	r2, [pc, #356]	; (801f73c <_malloc_r+0x344>)
 801f5d8:	6811      	ldr	r1, [r2, #0]
 801f5da:	3110      	adds	r1, #16
 801f5dc:	eb0b 0309 	add.w	r3, fp, r9
 801f5e0:	4439      	add	r1, r7
 801f5e2:	2008      	movs	r0, #8
 801f5e4:	9301      	str	r3, [sp, #4]
 801f5e6:	9100      	str	r1, [sp, #0]
 801f5e8:	f000 ff11 	bl	802040e <sysconf>
 801f5ec:	4a54      	ldr	r2, [pc, #336]	; (801f740 <_malloc_r+0x348>)
 801f5ee:	e9dd 1300 	ldrd	r1, r3, [sp]
 801f5f2:	4680      	mov	r8, r0
 801f5f4:	6810      	ldr	r0, [r2, #0]
 801f5f6:	3001      	adds	r0, #1
 801f5f8:	bf1f      	itttt	ne
 801f5fa:	f101 31ff 	addne.w	r1, r1, #4294967295
 801f5fe:	4441      	addne	r1, r8
 801f600:	f1c8 0000 	rsbne	r0, r8, #0
 801f604:	4001      	andne	r1, r0
 801f606:	4628      	mov	r0, r5
 801f608:	e9cd 1300 	strd	r1, r3, [sp]
 801f60c:	f000 fe74 	bl	80202f8 <_sbrk_r>
 801f610:	1c42      	adds	r2, r0, #1
 801f612:	4604      	mov	r4, r0
 801f614:	f000 80fc 	beq.w	801f810 <_malloc_r+0x418>
 801f618:	9b01      	ldr	r3, [sp, #4]
 801f61a:	9900      	ldr	r1, [sp, #0]
 801f61c:	4a48      	ldr	r2, [pc, #288]	; (801f740 <_malloc_r+0x348>)
 801f61e:	4283      	cmp	r3, r0
 801f620:	d902      	bls.n	801f628 <_malloc_r+0x230>
 801f622:	45b3      	cmp	fp, r6
 801f624:	f040 80f4 	bne.w	801f810 <_malloc_r+0x418>
 801f628:	f8df a120 	ldr.w	sl, [pc, #288]	; 801f74c <_malloc_r+0x354>
 801f62c:	f8da 0000 	ldr.w	r0, [sl]
 801f630:	42a3      	cmp	r3, r4
 801f632:	eb00 0e01 	add.w	lr, r0, r1
 801f636:	f8ca e000 	str.w	lr, [sl]
 801f63a:	f108 3cff 	add.w	ip, r8, #4294967295
 801f63e:	f040 80ad 	bne.w	801f79c <_malloc_r+0x3a4>
 801f642:	ea13 0f0c 	tst.w	r3, ip
 801f646:	f040 80a9 	bne.w	801f79c <_malloc_r+0x3a4>
 801f64a:	68b3      	ldr	r3, [r6, #8]
 801f64c:	4449      	add	r1, r9
 801f64e:	f041 0101 	orr.w	r1, r1, #1
 801f652:	6059      	str	r1, [r3, #4]
 801f654:	4a3b      	ldr	r2, [pc, #236]	; (801f744 <_malloc_r+0x34c>)
 801f656:	f8da 3000 	ldr.w	r3, [sl]
 801f65a:	6811      	ldr	r1, [r2, #0]
 801f65c:	428b      	cmp	r3, r1
 801f65e:	bf88      	it	hi
 801f660:	6013      	strhi	r3, [r2, #0]
 801f662:	4a39      	ldr	r2, [pc, #228]	; (801f748 <_malloc_r+0x350>)
 801f664:	6811      	ldr	r1, [r2, #0]
 801f666:	428b      	cmp	r3, r1
 801f668:	bf88      	it	hi
 801f66a:	6013      	strhi	r3, [r2, #0]
 801f66c:	e0d0      	b.n	801f810 <_malloc_r+0x418>
 801f66e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 801f672:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801f676:	d218      	bcs.n	801f6aa <_malloc_r+0x2b2>
 801f678:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801f67c:	3238      	adds	r2, #56	; 0x38
 801f67e:	f102 0e01 	add.w	lr, r2, #1
 801f682:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801f686:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801f68a:	45f0      	cmp	r8, lr
 801f68c:	d12b      	bne.n	801f6e6 <_malloc_r+0x2ee>
 801f68e:	1092      	asrs	r2, r2, #2
 801f690:	f04f 0c01 	mov.w	ip, #1
 801f694:	fa0c f202 	lsl.w	r2, ip, r2
 801f698:	4310      	orrs	r0, r2
 801f69a:	6070      	str	r0, [r6, #4]
 801f69c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801f6a0:	f8c8 4008 	str.w	r4, [r8, #8]
 801f6a4:	f8ce 400c 	str.w	r4, [lr, #12]
 801f6a8:	e75a      	b.n	801f560 <_malloc_r+0x168>
 801f6aa:	2a14      	cmp	r2, #20
 801f6ac:	d801      	bhi.n	801f6b2 <_malloc_r+0x2ba>
 801f6ae:	325b      	adds	r2, #91	; 0x5b
 801f6b0:	e7e5      	b.n	801f67e <_malloc_r+0x286>
 801f6b2:	2a54      	cmp	r2, #84	; 0x54
 801f6b4:	d803      	bhi.n	801f6be <_malloc_r+0x2c6>
 801f6b6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801f6ba:	326e      	adds	r2, #110	; 0x6e
 801f6bc:	e7df      	b.n	801f67e <_malloc_r+0x286>
 801f6be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801f6c2:	d803      	bhi.n	801f6cc <_malloc_r+0x2d4>
 801f6c4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801f6c8:	3277      	adds	r2, #119	; 0x77
 801f6ca:	e7d8      	b.n	801f67e <_malloc_r+0x286>
 801f6cc:	f240 5e54 	movw	lr, #1364	; 0x554
 801f6d0:	4572      	cmp	r2, lr
 801f6d2:	bf9a      	itte	ls
 801f6d4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801f6d8:	327c      	addls	r2, #124	; 0x7c
 801f6da:	227e      	movhi	r2, #126	; 0x7e
 801f6dc:	e7cf      	b.n	801f67e <_malloc_r+0x286>
 801f6de:	f8de e008 	ldr.w	lr, [lr, #8]
 801f6e2:	45f0      	cmp	r8, lr
 801f6e4:	d005      	beq.n	801f6f2 <_malloc_r+0x2fa>
 801f6e6:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f6ea:	f022 0203 	bic.w	r2, r2, #3
 801f6ee:	4562      	cmp	r2, ip
 801f6f0:	d8f5      	bhi.n	801f6de <_malloc_r+0x2e6>
 801f6f2:	f8de 800c 	ldr.w	r8, [lr, #12]
 801f6f6:	e7d1      	b.n	801f69c <_malloc_r+0x2a4>
 801f6f8:	6860      	ldr	r0, [r4, #4]
 801f6fa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801f6fe:	f020 0003 	bic.w	r0, r0, #3
 801f702:	eba0 0a07 	sub.w	sl, r0, r7
 801f706:	f1ba 0f0f 	cmp.w	sl, #15
 801f70a:	dd21      	ble.n	801f750 <_malloc_r+0x358>
 801f70c:	68a3      	ldr	r3, [r4, #8]
 801f70e:	19e2      	adds	r2, r4, r7
 801f710:	f047 0701 	orr.w	r7, r7, #1
 801f714:	6067      	str	r7, [r4, #4]
 801f716:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f71a:	f8cc 3008 	str.w	r3, [ip, #8]
 801f71e:	f04a 0301 	orr.w	r3, sl, #1
 801f722:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801f726:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801f72a:	6053      	str	r3, [r2, #4]
 801f72c:	f844 a000 	str.w	sl, [r4, r0]
 801f730:	e693      	b.n	801f45a <_malloc_r+0x62>
 801f732:	bf00      	nop
 801f734:	20000bc0 	.word	0x20000bc0
 801f738:	20000bc8 	.word	0x20000bc8
 801f73c:	2000858c 	.word	0x2000858c
 801f740:	20000fc8 	.word	0x20000fc8
 801f744:	20008584 	.word	0x20008584
 801f748:	20008588 	.word	0x20008588
 801f74c:	2000855c 	.word	0x2000855c
 801f750:	f1ba 0f00 	cmp.w	sl, #0
 801f754:	db11      	blt.n	801f77a <_malloc_r+0x382>
 801f756:	4420      	add	r0, r4
 801f758:	6843      	ldr	r3, [r0, #4]
 801f75a:	f043 0301 	orr.w	r3, r3, #1
 801f75e:	6043      	str	r3, [r0, #4]
 801f760:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801f764:	4628      	mov	r0, r5
 801f766:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f76a:	f8cc 3008 	str.w	r3, [ip, #8]
 801f76e:	f000 f89d 	bl	801f8ac <__malloc_unlock>
 801f772:	4620      	mov	r0, r4
 801f774:	b003      	add	sp, #12
 801f776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f77a:	4664      	mov	r4, ip
 801f77c:	e706      	b.n	801f58c <_malloc_r+0x194>
 801f77e:	f858 0908 	ldr.w	r0, [r8], #-8
 801f782:	4540      	cmp	r0, r8
 801f784:	f103 33ff 	add.w	r3, r3, #4294967295
 801f788:	f43f af0a 	beq.w	801f5a0 <_malloc_r+0x1a8>
 801f78c:	e70f      	b.n	801f5ae <_malloc_r+0x1b6>
 801f78e:	3304      	adds	r3, #4
 801f790:	0052      	lsls	r2, r2, #1
 801f792:	4210      	tst	r0, r2
 801f794:	d0fb      	beq.n	801f78e <_malloc_r+0x396>
 801f796:	e6f3      	b.n	801f580 <_malloc_r+0x188>
 801f798:	4673      	mov	r3, lr
 801f79a:	e7fa      	b.n	801f792 <_malloc_r+0x39a>
 801f79c:	6810      	ldr	r0, [r2, #0]
 801f79e:	3001      	adds	r0, #1
 801f7a0:	bf1b      	ittet	ne
 801f7a2:	1ae3      	subne	r3, r4, r3
 801f7a4:	4473      	addne	r3, lr
 801f7a6:	6014      	streq	r4, [r2, #0]
 801f7a8:	f8ca 3000 	strne.w	r3, [sl]
 801f7ac:	f014 0307 	ands.w	r3, r4, #7
 801f7b0:	bf1a      	itte	ne
 801f7b2:	f1c3 0008 	rsbne	r0, r3, #8
 801f7b6:	1824      	addne	r4, r4, r0
 801f7b8:	4618      	moveq	r0, r3
 801f7ba:	1862      	adds	r2, r4, r1
 801f7bc:	ea02 010c 	and.w	r1, r2, ip
 801f7c0:	4480      	add	r8, r0
 801f7c2:	eba8 0801 	sub.w	r8, r8, r1
 801f7c6:	ea08 080c 	and.w	r8, r8, ip
 801f7ca:	4641      	mov	r1, r8
 801f7cc:	4628      	mov	r0, r5
 801f7ce:	9301      	str	r3, [sp, #4]
 801f7d0:	9200      	str	r2, [sp, #0]
 801f7d2:	f000 fd91 	bl	80202f8 <_sbrk_r>
 801f7d6:	1c43      	adds	r3, r0, #1
 801f7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f7dc:	d105      	bne.n	801f7ea <_malloc_r+0x3f2>
 801f7de:	b32b      	cbz	r3, 801f82c <_malloc_r+0x434>
 801f7e0:	f1a3 0008 	sub.w	r0, r3, #8
 801f7e4:	4410      	add	r0, r2
 801f7e6:	f04f 0800 	mov.w	r8, #0
 801f7ea:	f8da 2000 	ldr.w	r2, [sl]
 801f7ee:	60b4      	str	r4, [r6, #8]
 801f7f0:	1b00      	subs	r0, r0, r4
 801f7f2:	4440      	add	r0, r8
 801f7f4:	4442      	add	r2, r8
 801f7f6:	f040 0001 	orr.w	r0, r0, #1
 801f7fa:	45b3      	cmp	fp, r6
 801f7fc:	f8ca 2000 	str.w	r2, [sl]
 801f800:	6060      	str	r0, [r4, #4]
 801f802:	f43f af27 	beq.w	801f654 <_malloc_r+0x25c>
 801f806:	f1b9 0f0f 	cmp.w	r9, #15
 801f80a:	d812      	bhi.n	801f832 <_malloc_r+0x43a>
 801f80c:	2301      	movs	r3, #1
 801f80e:	6063      	str	r3, [r4, #4]
 801f810:	68b3      	ldr	r3, [r6, #8]
 801f812:	685b      	ldr	r3, [r3, #4]
 801f814:	f023 0303 	bic.w	r3, r3, #3
 801f818:	42bb      	cmp	r3, r7
 801f81a:	eba3 0207 	sub.w	r2, r3, r7
 801f81e:	d301      	bcc.n	801f824 <_malloc_r+0x42c>
 801f820:	2a0f      	cmp	r2, #15
 801f822:	dc21      	bgt.n	801f868 <_malloc_r+0x470>
 801f824:	4628      	mov	r0, r5
 801f826:	f000 f841 	bl	801f8ac <__malloc_unlock>
 801f82a:	e5f1      	b.n	801f410 <_malloc_r+0x18>
 801f82c:	4610      	mov	r0, r2
 801f82e:	4698      	mov	r8, r3
 801f830:	e7db      	b.n	801f7ea <_malloc_r+0x3f2>
 801f832:	f8db 3004 	ldr.w	r3, [fp, #4]
 801f836:	f1a9 090c 	sub.w	r9, r9, #12
 801f83a:	f029 0907 	bic.w	r9, r9, #7
 801f83e:	f003 0301 	and.w	r3, r3, #1
 801f842:	ea43 0309 	orr.w	r3, r3, r9
 801f846:	f8cb 3004 	str.w	r3, [fp, #4]
 801f84a:	2205      	movs	r2, #5
 801f84c:	eb0b 0309 	add.w	r3, fp, r9
 801f850:	f1b9 0f0f 	cmp.w	r9, #15
 801f854:	e9c3 2201 	strd	r2, r2, [r3, #4]
 801f858:	f67f aefc 	bls.w	801f654 <_malloc_r+0x25c>
 801f85c:	f10b 0108 	add.w	r1, fp, #8
 801f860:	4628      	mov	r0, r5
 801f862:	f7ff fce9 	bl	801f238 <_free_r>
 801f866:	e6f5      	b.n	801f654 <_malloc_r+0x25c>
 801f868:	68b4      	ldr	r4, [r6, #8]
 801f86a:	f047 0301 	orr.w	r3, r7, #1
 801f86e:	4427      	add	r7, r4
 801f870:	f042 0201 	orr.w	r2, r2, #1
 801f874:	6063      	str	r3, [r4, #4]
 801f876:	60b7      	str	r7, [r6, #8]
 801f878:	607a      	str	r2, [r7, #4]
 801f87a:	e5ee      	b.n	801f45a <_malloc_r+0x62>

0801f87c <__ascii_mbtowc>:
 801f87c:	b082      	sub	sp, #8
 801f87e:	b901      	cbnz	r1, 801f882 <__ascii_mbtowc+0x6>
 801f880:	a901      	add	r1, sp, #4
 801f882:	b142      	cbz	r2, 801f896 <__ascii_mbtowc+0x1a>
 801f884:	b14b      	cbz	r3, 801f89a <__ascii_mbtowc+0x1e>
 801f886:	7813      	ldrb	r3, [r2, #0]
 801f888:	600b      	str	r3, [r1, #0]
 801f88a:	7812      	ldrb	r2, [r2, #0]
 801f88c:	1e10      	subs	r0, r2, #0
 801f88e:	bf18      	it	ne
 801f890:	2001      	movne	r0, #1
 801f892:	b002      	add	sp, #8
 801f894:	4770      	bx	lr
 801f896:	4610      	mov	r0, r2
 801f898:	e7fb      	b.n	801f892 <__ascii_mbtowc+0x16>
 801f89a:	f06f 0001 	mvn.w	r0, #1
 801f89e:	e7f8      	b.n	801f892 <__ascii_mbtowc+0x16>

0801f8a0 <__malloc_lock>:
 801f8a0:	4801      	ldr	r0, [pc, #4]	; (801f8a8 <__malloc_lock+0x8>)
 801f8a2:	f7ff bd95 	b.w	801f3d0 <__retarget_lock_acquire_recursive>
 801f8a6:	bf00      	nop
 801f8a8:	20009908 	.word	0x20009908

0801f8ac <__malloc_unlock>:
 801f8ac:	4801      	ldr	r0, [pc, #4]	; (801f8b4 <__malloc_unlock+0x8>)
 801f8ae:	f7ff bd90 	b.w	801f3d2 <__retarget_lock_release_recursive>
 801f8b2:	bf00      	nop
 801f8b4:	20009908 	.word	0x20009908

0801f8b8 <_Balloc>:
 801f8b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801f8ba:	b570      	push	{r4, r5, r6, lr}
 801f8bc:	4605      	mov	r5, r0
 801f8be:	460c      	mov	r4, r1
 801f8c0:	b17b      	cbz	r3, 801f8e2 <_Balloc+0x2a>
 801f8c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801f8c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f8c8:	b9a0      	cbnz	r0, 801f8f4 <_Balloc+0x3c>
 801f8ca:	2101      	movs	r1, #1
 801f8cc:	fa01 f604 	lsl.w	r6, r1, r4
 801f8d0:	1d72      	adds	r2, r6, #5
 801f8d2:	0092      	lsls	r2, r2, #2
 801f8d4:	4628      	mov	r0, r5
 801f8d6:	f000 fe13 	bl	8020500 <_calloc_r>
 801f8da:	b148      	cbz	r0, 801f8f0 <_Balloc+0x38>
 801f8dc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801f8e0:	e00b      	b.n	801f8fa <_Balloc+0x42>
 801f8e2:	2221      	movs	r2, #33	; 0x21
 801f8e4:	2104      	movs	r1, #4
 801f8e6:	f000 fe0b 	bl	8020500 <_calloc_r>
 801f8ea:	64e8      	str	r0, [r5, #76]	; 0x4c
 801f8ec:	2800      	cmp	r0, #0
 801f8ee:	d1e8      	bne.n	801f8c2 <_Balloc+0xa>
 801f8f0:	2000      	movs	r0, #0
 801f8f2:	bd70      	pop	{r4, r5, r6, pc}
 801f8f4:	6802      	ldr	r2, [r0, #0]
 801f8f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801f8fa:	2300      	movs	r3, #0
 801f8fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f900:	e7f7      	b.n	801f8f2 <_Balloc+0x3a>

0801f902 <_Bfree>:
 801f902:	b131      	cbz	r1, 801f912 <_Bfree+0x10>
 801f904:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801f906:	684a      	ldr	r2, [r1, #4]
 801f908:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f90c:	6008      	str	r0, [r1, #0]
 801f90e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801f912:	4770      	bx	lr

0801f914 <__multadd>:
 801f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f918:	690e      	ldr	r6, [r1, #16]
 801f91a:	4607      	mov	r7, r0
 801f91c:	4698      	mov	r8, r3
 801f91e:	460c      	mov	r4, r1
 801f920:	f101 0014 	add.w	r0, r1, #20
 801f924:	2300      	movs	r3, #0
 801f926:	6805      	ldr	r5, [r0, #0]
 801f928:	b2a9      	uxth	r1, r5
 801f92a:	fb02 8101 	mla	r1, r2, r1, r8
 801f92e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801f932:	0c2d      	lsrs	r5, r5, #16
 801f934:	fb02 c505 	mla	r5, r2, r5, ip
 801f938:	b289      	uxth	r1, r1
 801f93a:	3301      	adds	r3, #1
 801f93c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801f940:	429e      	cmp	r6, r3
 801f942:	f840 1b04 	str.w	r1, [r0], #4
 801f946:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801f94a:	dcec      	bgt.n	801f926 <__multadd+0x12>
 801f94c:	f1b8 0f00 	cmp.w	r8, #0
 801f950:	d022      	beq.n	801f998 <__multadd+0x84>
 801f952:	68a3      	ldr	r3, [r4, #8]
 801f954:	42b3      	cmp	r3, r6
 801f956:	dc19      	bgt.n	801f98c <__multadd+0x78>
 801f958:	6861      	ldr	r1, [r4, #4]
 801f95a:	4638      	mov	r0, r7
 801f95c:	3101      	adds	r1, #1
 801f95e:	f7ff ffab 	bl	801f8b8 <_Balloc>
 801f962:	4605      	mov	r5, r0
 801f964:	b928      	cbnz	r0, 801f972 <__multadd+0x5e>
 801f966:	4602      	mov	r2, r0
 801f968:	4b0d      	ldr	r3, [pc, #52]	; (801f9a0 <__multadd+0x8c>)
 801f96a:	480e      	ldr	r0, [pc, #56]	; (801f9a4 <__multadd+0x90>)
 801f96c:	21b5      	movs	r1, #181	; 0xb5
 801f96e:	f000 fda9 	bl	80204c4 <__assert_func>
 801f972:	6922      	ldr	r2, [r4, #16]
 801f974:	3202      	adds	r2, #2
 801f976:	f104 010c 	add.w	r1, r4, #12
 801f97a:	0092      	lsls	r2, r2, #2
 801f97c:	300c      	adds	r0, #12
 801f97e:	f7fd fa5d 	bl	801ce3c <memcpy>
 801f982:	4621      	mov	r1, r4
 801f984:	4638      	mov	r0, r7
 801f986:	f7ff ffbc 	bl	801f902 <_Bfree>
 801f98a:	462c      	mov	r4, r5
 801f98c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801f990:	3601      	adds	r6, #1
 801f992:	f8c3 8014 	str.w	r8, [r3, #20]
 801f996:	6126      	str	r6, [r4, #16]
 801f998:	4620      	mov	r0, r4
 801f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f99e:	bf00      	nop
 801f9a0:	0802cd10 	.word	0x0802cd10
 801f9a4:	0802cd8a 	.word	0x0802cd8a

0801f9a8 <__hi0bits>:
 801f9a8:	0c03      	lsrs	r3, r0, #16
 801f9aa:	041b      	lsls	r3, r3, #16
 801f9ac:	b9d3      	cbnz	r3, 801f9e4 <__hi0bits+0x3c>
 801f9ae:	0400      	lsls	r0, r0, #16
 801f9b0:	2310      	movs	r3, #16
 801f9b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f9b6:	bf04      	itt	eq
 801f9b8:	0200      	lsleq	r0, r0, #8
 801f9ba:	3308      	addeq	r3, #8
 801f9bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f9c0:	bf04      	itt	eq
 801f9c2:	0100      	lsleq	r0, r0, #4
 801f9c4:	3304      	addeq	r3, #4
 801f9c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f9ca:	bf04      	itt	eq
 801f9cc:	0080      	lsleq	r0, r0, #2
 801f9ce:	3302      	addeq	r3, #2
 801f9d0:	2800      	cmp	r0, #0
 801f9d2:	db05      	blt.n	801f9e0 <__hi0bits+0x38>
 801f9d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f9d8:	f103 0301 	add.w	r3, r3, #1
 801f9dc:	bf08      	it	eq
 801f9de:	2320      	moveq	r3, #32
 801f9e0:	4618      	mov	r0, r3
 801f9e2:	4770      	bx	lr
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	e7e4      	b.n	801f9b2 <__hi0bits+0xa>

0801f9e8 <__lo0bits>:
 801f9e8:	6803      	ldr	r3, [r0, #0]
 801f9ea:	f013 0207 	ands.w	r2, r3, #7
 801f9ee:	4601      	mov	r1, r0
 801f9f0:	d00b      	beq.n	801fa0a <__lo0bits+0x22>
 801f9f2:	07da      	lsls	r2, r3, #31
 801f9f4:	d424      	bmi.n	801fa40 <__lo0bits+0x58>
 801f9f6:	0798      	lsls	r0, r3, #30
 801f9f8:	bf49      	itett	mi
 801f9fa:	085b      	lsrmi	r3, r3, #1
 801f9fc:	089b      	lsrpl	r3, r3, #2
 801f9fe:	2001      	movmi	r0, #1
 801fa00:	600b      	strmi	r3, [r1, #0]
 801fa02:	bf5c      	itt	pl
 801fa04:	600b      	strpl	r3, [r1, #0]
 801fa06:	2002      	movpl	r0, #2
 801fa08:	4770      	bx	lr
 801fa0a:	b298      	uxth	r0, r3
 801fa0c:	b9b0      	cbnz	r0, 801fa3c <__lo0bits+0x54>
 801fa0e:	0c1b      	lsrs	r3, r3, #16
 801fa10:	2010      	movs	r0, #16
 801fa12:	f013 0fff 	tst.w	r3, #255	; 0xff
 801fa16:	bf04      	itt	eq
 801fa18:	0a1b      	lsreq	r3, r3, #8
 801fa1a:	3008      	addeq	r0, #8
 801fa1c:	071a      	lsls	r2, r3, #28
 801fa1e:	bf04      	itt	eq
 801fa20:	091b      	lsreq	r3, r3, #4
 801fa22:	3004      	addeq	r0, #4
 801fa24:	079a      	lsls	r2, r3, #30
 801fa26:	bf04      	itt	eq
 801fa28:	089b      	lsreq	r3, r3, #2
 801fa2a:	3002      	addeq	r0, #2
 801fa2c:	07da      	lsls	r2, r3, #31
 801fa2e:	d403      	bmi.n	801fa38 <__lo0bits+0x50>
 801fa30:	085b      	lsrs	r3, r3, #1
 801fa32:	f100 0001 	add.w	r0, r0, #1
 801fa36:	d005      	beq.n	801fa44 <__lo0bits+0x5c>
 801fa38:	600b      	str	r3, [r1, #0]
 801fa3a:	4770      	bx	lr
 801fa3c:	4610      	mov	r0, r2
 801fa3e:	e7e8      	b.n	801fa12 <__lo0bits+0x2a>
 801fa40:	2000      	movs	r0, #0
 801fa42:	4770      	bx	lr
 801fa44:	2020      	movs	r0, #32
 801fa46:	4770      	bx	lr

0801fa48 <__i2b>:
 801fa48:	b510      	push	{r4, lr}
 801fa4a:	460c      	mov	r4, r1
 801fa4c:	2101      	movs	r1, #1
 801fa4e:	f7ff ff33 	bl	801f8b8 <_Balloc>
 801fa52:	4602      	mov	r2, r0
 801fa54:	b928      	cbnz	r0, 801fa62 <__i2b+0x1a>
 801fa56:	4b05      	ldr	r3, [pc, #20]	; (801fa6c <__i2b+0x24>)
 801fa58:	4805      	ldr	r0, [pc, #20]	; (801fa70 <__i2b+0x28>)
 801fa5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801fa5e:	f000 fd31 	bl	80204c4 <__assert_func>
 801fa62:	2301      	movs	r3, #1
 801fa64:	6144      	str	r4, [r0, #20]
 801fa66:	6103      	str	r3, [r0, #16]
 801fa68:	bd10      	pop	{r4, pc}
 801fa6a:	bf00      	nop
 801fa6c:	0802cd10 	.word	0x0802cd10
 801fa70:	0802cd8a 	.word	0x0802cd8a

0801fa74 <__multiply>:
 801fa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa78:	4614      	mov	r4, r2
 801fa7a:	690a      	ldr	r2, [r1, #16]
 801fa7c:	6923      	ldr	r3, [r4, #16]
 801fa7e:	429a      	cmp	r2, r3
 801fa80:	bfb8      	it	lt
 801fa82:	460b      	movlt	r3, r1
 801fa84:	460d      	mov	r5, r1
 801fa86:	bfbc      	itt	lt
 801fa88:	4625      	movlt	r5, r4
 801fa8a:	461c      	movlt	r4, r3
 801fa8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801fa90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801fa94:	68ab      	ldr	r3, [r5, #8]
 801fa96:	6869      	ldr	r1, [r5, #4]
 801fa98:	eb0a 0709 	add.w	r7, sl, r9
 801fa9c:	42bb      	cmp	r3, r7
 801fa9e:	b085      	sub	sp, #20
 801faa0:	bfb8      	it	lt
 801faa2:	3101      	addlt	r1, #1
 801faa4:	f7ff ff08 	bl	801f8b8 <_Balloc>
 801faa8:	b930      	cbnz	r0, 801fab8 <__multiply+0x44>
 801faaa:	4602      	mov	r2, r0
 801faac:	4b42      	ldr	r3, [pc, #264]	; (801fbb8 <__multiply+0x144>)
 801faae:	4843      	ldr	r0, [pc, #268]	; (801fbbc <__multiply+0x148>)
 801fab0:	f240 115d 	movw	r1, #349	; 0x15d
 801fab4:	f000 fd06 	bl	80204c4 <__assert_func>
 801fab8:	f100 0614 	add.w	r6, r0, #20
 801fabc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801fac0:	4633      	mov	r3, r6
 801fac2:	2200      	movs	r2, #0
 801fac4:	4543      	cmp	r3, r8
 801fac6:	d31e      	bcc.n	801fb06 <__multiply+0x92>
 801fac8:	f105 0c14 	add.w	ip, r5, #20
 801facc:	f104 0314 	add.w	r3, r4, #20
 801fad0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801fad4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801fad8:	9202      	str	r2, [sp, #8]
 801fada:	ebac 0205 	sub.w	r2, ip, r5
 801fade:	3a15      	subs	r2, #21
 801fae0:	f022 0203 	bic.w	r2, r2, #3
 801fae4:	3204      	adds	r2, #4
 801fae6:	f105 0115 	add.w	r1, r5, #21
 801faea:	458c      	cmp	ip, r1
 801faec:	bf38      	it	cc
 801faee:	2204      	movcc	r2, #4
 801faf0:	9201      	str	r2, [sp, #4]
 801faf2:	9a02      	ldr	r2, [sp, #8]
 801faf4:	9303      	str	r3, [sp, #12]
 801faf6:	429a      	cmp	r2, r3
 801faf8:	d808      	bhi.n	801fb0c <__multiply+0x98>
 801fafa:	2f00      	cmp	r7, #0
 801fafc:	dc55      	bgt.n	801fbaa <__multiply+0x136>
 801fafe:	6107      	str	r7, [r0, #16]
 801fb00:	b005      	add	sp, #20
 801fb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb06:	f843 2b04 	str.w	r2, [r3], #4
 801fb0a:	e7db      	b.n	801fac4 <__multiply+0x50>
 801fb0c:	f8b3 a000 	ldrh.w	sl, [r3]
 801fb10:	f1ba 0f00 	cmp.w	sl, #0
 801fb14:	d020      	beq.n	801fb58 <__multiply+0xe4>
 801fb16:	f105 0e14 	add.w	lr, r5, #20
 801fb1a:	46b1      	mov	r9, r6
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801fb22:	f8d9 b000 	ldr.w	fp, [r9]
 801fb26:	b2a1      	uxth	r1, r4
 801fb28:	fa1f fb8b 	uxth.w	fp, fp
 801fb2c:	fb0a b101 	mla	r1, sl, r1, fp
 801fb30:	4411      	add	r1, r2
 801fb32:	f8d9 2000 	ldr.w	r2, [r9]
 801fb36:	0c24      	lsrs	r4, r4, #16
 801fb38:	0c12      	lsrs	r2, r2, #16
 801fb3a:	fb0a 2404 	mla	r4, sl, r4, r2
 801fb3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801fb42:	b289      	uxth	r1, r1
 801fb44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801fb48:	45f4      	cmp	ip, lr
 801fb4a:	f849 1b04 	str.w	r1, [r9], #4
 801fb4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801fb52:	d8e4      	bhi.n	801fb1e <__multiply+0xaa>
 801fb54:	9901      	ldr	r1, [sp, #4]
 801fb56:	5072      	str	r2, [r6, r1]
 801fb58:	9a03      	ldr	r2, [sp, #12]
 801fb5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801fb5e:	3304      	adds	r3, #4
 801fb60:	f1b9 0f00 	cmp.w	r9, #0
 801fb64:	d01f      	beq.n	801fba6 <__multiply+0x132>
 801fb66:	6834      	ldr	r4, [r6, #0]
 801fb68:	f105 0114 	add.w	r1, r5, #20
 801fb6c:	46b6      	mov	lr, r6
 801fb6e:	f04f 0a00 	mov.w	sl, #0
 801fb72:	880a      	ldrh	r2, [r1, #0]
 801fb74:	f8be b002 	ldrh.w	fp, [lr, #2]
 801fb78:	fb09 b202 	mla	r2, r9, r2, fp
 801fb7c:	4492      	add	sl, r2
 801fb7e:	b2a4      	uxth	r4, r4
 801fb80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fb84:	f84e 4b04 	str.w	r4, [lr], #4
 801fb88:	f851 4b04 	ldr.w	r4, [r1], #4
 801fb8c:	f8be 2000 	ldrh.w	r2, [lr]
 801fb90:	0c24      	lsrs	r4, r4, #16
 801fb92:	fb09 2404 	mla	r4, r9, r4, r2
 801fb96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801fb9a:	458c      	cmp	ip, r1
 801fb9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801fba0:	d8e7      	bhi.n	801fb72 <__multiply+0xfe>
 801fba2:	9a01      	ldr	r2, [sp, #4]
 801fba4:	50b4      	str	r4, [r6, r2]
 801fba6:	3604      	adds	r6, #4
 801fba8:	e7a3      	b.n	801faf2 <__multiply+0x7e>
 801fbaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d1a5      	bne.n	801fafe <__multiply+0x8a>
 801fbb2:	3f01      	subs	r7, #1
 801fbb4:	e7a1      	b.n	801fafa <__multiply+0x86>
 801fbb6:	bf00      	nop
 801fbb8:	0802cd10 	.word	0x0802cd10
 801fbbc:	0802cd8a 	.word	0x0802cd8a

0801fbc0 <__pow5mult>:
 801fbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbc4:	4615      	mov	r5, r2
 801fbc6:	f012 0203 	ands.w	r2, r2, #3
 801fbca:	4606      	mov	r6, r0
 801fbcc:	460f      	mov	r7, r1
 801fbce:	d007      	beq.n	801fbe0 <__pow5mult+0x20>
 801fbd0:	4c1a      	ldr	r4, [pc, #104]	; (801fc3c <__pow5mult+0x7c>)
 801fbd2:	3a01      	subs	r2, #1
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fbda:	f7ff fe9b 	bl	801f914 <__multadd>
 801fbde:	4607      	mov	r7, r0
 801fbe0:	10ad      	asrs	r5, r5, #2
 801fbe2:	d027      	beq.n	801fc34 <__pow5mult+0x74>
 801fbe4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801fbe6:	b944      	cbnz	r4, 801fbfa <__pow5mult+0x3a>
 801fbe8:	f240 2171 	movw	r1, #625	; 0x271
 801fbec:	4630      	mov	r0, r6
 801fbee:	f7ff ff2b 	bl	801fa48 <__i2b>
 801fbf2:	2300      	movs	r3, #0
 801fbf4:	64b0      	str	r0, [r6, #72]	; 0x48
 801fbf6:	4604      	mov	r4, r0
 801fbf8:	6003      	str	r3, [r0, #0]
 801fbfa:	f04f 0900 	mov.w	r9, #0
 801fbfe:	07eb      	lsls	r3, r5, #31
 801fc00:	d50a      	bpl.n	801fc18 <__pow5mult+0x58>
 801fc02:	4639      	mov	r1, r7
 801fc04:	4622      	mov	r2, r4
 801fc06:	4630      	mov	r0, r6
 801fc08:	f7ff ff34 	bl	801fa74 <__multiply>
 801fc0c:	4639      	mov	r1, r7
 801fc0e:	4680      	mov	r8, r0
 801fc10:	4630      	mov	r0, r6
 801fc12:	f7ff fe76 	bl	801f902 <_Bfree>
 801fc16:	4647      	mov	r7, r8
 801fc18:	106d      	asrs	r5, r5, #1
 801fc1a:	d00b      	beq.n	801fc34 <__pow5mult+0x74>
 801fc1c:	6820      	ldr	r0, [r4, #0]
 801fc1e:	b938      	cbnz	r0, 801fc30 <__pow5mult+0x70>
 801fc20:	4622      	mov	r2, r4
 801fc22:	4621      	mov	r1, r4
 801fc24:	4630      	mov	r0, r6
 801fc26:	f7ff ff25 	bl	801fa74 <__multiply>
 801fc2a:	6020      	str	r0, [r4, #0]
 801fc2c:	f8c0 9000 	str.w	r9, [r0]
 801fc30:	4604      	mov	r4, r0
 801fc32:	e7e4      	b.n	801fbfe <__pow5mult+0x3e>
 801fc34:	4638      	mov	r0, r7
 801fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc3a:	bf00      	nop
 801fc3c:	0802cee0 	.word	0x0802cee0

0801fc40 <__lshift>:
 801fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc44:	460c      	mov	r4, r1
 801fc46:	6849      	ldr	r1, [r1, #4]
 801fc48:	6923      	ldr	r3, [r4, #16]
 801fc4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fc4e:	68a3      	ldr	r3, [r4, #8]
 801fc50:	4607      	mov	r7, r0
 801fc52:	4691      	mov	r9, r2
 801fc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fc58:	f108 0601 	add.w	r6, r8, #1
 801fc5c:	42b3      	cmp	r3, r6
 801fc5e:	db0b      	blt.n	801fc78 <__lshift+0x38>
 801fc60:	4638      	mov	r0, r7
 801fc62:	f7ff fe29 	bl	801f8b8 <_Balloc>
 801fc66:	4605      	mov	r5, r0
 801fc68:	b948      	cbnz	r0, 801fc7e <__lshift+0x3e>
 801fc6a:	4602      	mov	r2, r0
 801fc6c:	4b28      	ldr	r3, [pc, #160]	; (801fd10 <__lshift+0xd0>)
 801fc6e:	4829      	ldr	r0, [pc, #164]	; (801fd14 <__lshift+0xd4>)
 801fc70:	f240 11d9 	movw	r1, #473	; 0x1d9
 801fc74:	f000 fc26 	bl	80204c4 <__assert_func>
 801fc78:	3101      	adds	r1, #1
 801fc7a:	005b      	lsls	r3, r3, #1
 801fc7c:	e7ee      	b.n	801fc5c <__lshift+0x1c>
 801fc7e:	2300      	movs	r3, #0
 801fc80:	f100 0114 	add.w	r1, r0, #20
 801fc84:	f100 0210 	add.w	r2, r0, #16
 801fc88:	4618      	mov	r0, r3
 801fc8a:	4553      	cmp	r3, sl
 801fc8c:	db33      	blt.n	801fcf6 <__lshift+0xb6>
 801fc8e:	6920      	ldr	r0, [r4, #16]
 801fc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fc94:	f104 0314 	add.w	r3, r4, #20
 801fc98:	f019 091f 	ands.w	r9, r9, #31
 801fc9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fca4:	d02b      	beq.n	801fcfe <__lshift+0xbe>
 801fca6:	f1c9 0e20 	rsb	lr, r9, #32
 801fcaa:	468a      	mov	sl, r1
 801fcac:	2200      	movs	r2, #0
 801fcae:	6818      	ldr	r0, [r3, #0]
 801fcb0:	fa00 f009 	lsl.w	r0, r0, r9
 801fcb4:	4302      	orrs	r2, r0
 801fcb6:	f84a 2b04 	str.w	r2, [sl], #4
 801fcba:	f853 2b04 	ldr.w	r2, [r3], #4
 801fcbe:	459c      	cmp	ip, r3
 801fcc0:	fa22 f20e 	lsr.w	r2, r2, lr
 801fcc4:	d8f3      	bhi.n	801fcae <__lshift+0x6e>
 801fcc6:	ebac 0304 	sub.w	r3, ip, r4
 801fcca:	3b15      	subs	r3, #21
 801fccc:	f023 0303 	bic.w	r3, r3, #3
 801fcd0:	3304      	adds	r3, #4
 801fcd2:	f104 0015 	add.w	r0, r4, #21
 801fcd6:	4584      	cmp	ip, r0
 801fcd8:	bf38      	it	cc
 801fcda:	2304      	movcc	r3, #4
 801fcdc:	50ca      	str	r2, [r1, r3]
 801fcde:	b10a      	cbz	r2, 801fce4 <__lshift+0xa4>
 801fce0:	f108 0602 	add.w	r6, r8, #2
 801fce4:	3e01      	subs	r6, #1
 801fce6:	4638      	mov	r0, r7
 801fce8:	612e      	str	r6, [r5, #16]
 801fcea:	4621      	mov	r1, r4
 801fcec:	f7ff fe09 	bl	801f902 <_Bfree>
 801fcf0:	4628      	mov	r0, r5
 801fcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcf6:	f842 0f04 	str.w	r0, [r2, #4]!
 801fcfa:	3301      	adds	r3, #1
 801fcfc:	e7c5      	b.n	801fc8a <__lshift+0x4a>
 801fcfe:	3904      	subs	r1, #4
 801fd00:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd04:	f841 2f04 	str.w	r2, [r1, #4]!
 801fd08:	459c      	cmp	ip, r3
 801fd0a:	d8f9      	bhi.n	801fd00 <__lshift+0xc0>
 801fd0c:	e7ea      	b.n	801fce4 <__lshift+0xa4>
 801fd0e:	bf00      	nop
 801fd10:	0802cd10 	.word	0x0802cd10
 801fd14:	0802cd8a 	.word	0x0802cd8a

0801fd18 <__mcmp>:
 801fd18:	b530      	push	{r4, r5, lr}
 801fd1a:	6902      	ldr	r2, [r0, #16]
 801fd1c:	690c      	ldr	r4, [r1, #16]
 801fd1e:	1b12      	subs	r2, r2, r4
 801fd20:	d10e      	bne.n	801fd40 <__mcmp+0x28>
 801fd22:	f100 0314 	add.w	r3, r0, #20
 801fd26:	3114      	adds	r1, #20
 801fd28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801fd2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801fd30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fd34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fd38:	42a5      	cmp	r5, r4
 801fd3a:	d003      	beq.n	801fd44 <__mcmp+0x2c>
 801fd3c:	d305      	bcc.n	801fd4a <__mcmp+0x32>
 801fd3e:	2201      	movs	r2, #1
 801fd40:	4610      	mov	r0, r2
 801fd42:	bd30      	pop	{r4, r5, pc}
 801fd44:	4283      	cmp	r3, r0
 801fd46:	d3f3      	bcc.n	801fd30 <__mcmp+0x18>
 801fd48:	e7fa      	b.n	801fd40 <__mcmp+0x28>
 801fd4a:	f04f 32ff 	mov.w	r2, #4294967295
 801fd4e:	e7f7      	b.n	801fd40 <__mcmp+0x28>

0801fd50 <__mdiff>:
 801fd50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd54:	460c      	mov	r4, r1
 801fd56:	4606      	mov	r6, r0
 801fd58:	4611      	mov	r1, r2
 801fd5a:	4620      	mov	r0, r4
 801fd5c:	4617      	mov	r7, r2
 801fd5e:	f7ff ffdb 	bl	801fd18 <__mcmp>
 801fd62:	1e05      	subs	r5, r0, #0
 801fd64:	d110      	bne.n	801fd88 <__mdiff+0x38>
 801fd66:	4629      	mov	r1, r5
 801fd68:	4630      	mov	r0, r6
 801fd6a:	f7ff fda5 	bl	801f8b8 <_Balloc>
 801fd6e:	b930      	cbnz	r0, 801fd7e <__mdiff+0x2e>
 801fd70:	4b39      	ldr	r3, [pc, #228]	; (801fe58 <__mdiff+0x108>)
 801fd72:	4602      	mov	r2, r0
 801fd74:	f240 2132 	movw	r1, #562	; 0x232
 801fd78:	4838      	ldr	r0, [pc, #224]	; (801fe5c <__mdiff+0x10c>)
 801fd7a:	f000 fba3 	bl	80204c4 <__assert_func>
 801fd7e:	2301      	movs	r3, #1
 801fd80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fd84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd88:	bfa4      	itt	ge
 801fd8a:	463b      	movge	r3, r7
 801fd8c:	4627      	movge	r7, r4
 801fd8e:	4630      	mov	r0, r6
 801fd90:	6879      	ldr	r1, [r7, #4]
 801fd92:	bfa6      	itte	ge
 801fd94:	461c      	movge	r4, r3
 801fd96:	2500      	movge	r5, #0
 801fd98:	2501      	movlt	r5, #1
 801fd9a:	f7ff fd8d 	bl	801f8b8 <_Balloc>
 801fd9e:	b920      	cbnz	r0, 801fdaa <__mdiff+0x5a>
 801fda0:	4b2d      	ldr	r3, [pc, #180]	; (801fe58 <__mdiff+0x108>)
 801fda2:	4602      	mov	r2, r0
 801fda4:	f44f 7110 	mov.w	r1, #576	; 0x240
 801fda8:	e7e6      	b.n	801fd78 <__mdiff+0x28>
 801fdaa:	693e      	ldr	r6, [r7, #16]
 801fdac:	60c5      	str	r5, [r0, #12]
 801fdae:	6925      	ldr	r5, [r4, #16]
 801fdb0:	f107 0114 	add.w	r1, r7, #20
 801fdb4:	f104 0914 	add.w	r9, r4, #20
 801fdb8:	f100 0e14 	add.w	lr, r0, #20
 801fdbc:	f107 0210 	add.w	r2, r7, #16
 801fdc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801fdc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801fdc8:	46f2      	mov	sl, lr
 801fdca:	2700      	movs	r7, #0
 801fdcc:	f859 3b04 	ldr.w	r3, [r9], #4
 801fdd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fdd4:	fa1f f883 	uxth.w	r8, r3
 801fdd8:	fa17 f78b 	uxtah	r7, r7, fp
 801fddc:	0c1b      	lsrs	r3, r3, #16
 801fdde:	eba7 0808 	sub.w	r8, r7, r8
 801fde2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fde6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fdea:	fa1f f888 	uxth.w	r8, r8
 801fdee:	141f      	asrs	r7, r3, #16
 801fdf0:	454d      	cmp	r5, r9
 801fdf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fdf6:	f84a 3b04 	str.w	r3, [sl], #4
 801fdfa:	d8e7      	bhi.n	801fdcc <__mdiff+0x7c>
 801fdfc:	1b2b      	subs	r3, r5, r4
 801fdfe:	3b15      	subs	r3, #21
 801fe00:	f023 0303 	bic.w	r3, r3, #3
 801fe04:	3304      	adds	r3, #4
 801fe06:	3415      	adds	r4, #21
 801fe08:	42a5      	cmp	r5, r4
 801fe0a:	bf38      	it	cc
 801fe0c:	2304      	movcc	r3, #4
 801fe0e:	4419      	add	r1, r3
 801fe10:	4473      	add	r3, lr
 801fe12:	469e      	mov	lr, r3
 801fe14:	460d      	mov	r5, r1
 801fe16:	4565      	cmp	r5, ip
 801fe18:	d30e      	bcc.n	801fe38 <__mdiff+0xe8>
 801fe1a:	f10c 0203 	add.w	r2, ip, #3
 801fe1e:	1a52      	subs	r2, r2, r1
 801fe20:	f022 0203 	bic.w	r2, r2, #3
 801fe24:	3903      	subs	r1, #3
 801fe26:	458c      	cmp	ip, r1
 801fe28:	bf38      	it	cc
 801fe2a:	2200      	movcc	r2, #0
 801fe2c:	441a      	add	r2, r3
 801fe2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801fe32:	b17b      	cbz	r3, 801fe54 <__mdiff+0x104>
 801fe34:	6106      	str	r6, [r0, #16]
 801fe36:	e7a5      	b.n	801fd84 <__mdiff+0x34>
 801fe38:	f855 8b04 	ldr.w	r8, [r5], #4
 801fe3c:	fa17 f488 	uxtah	r4, r7, r8
 801fe40:	1422      	asrs	r2, r4, #16
 801fe42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801fe46:	b2a4      	uxth	r4, r4
 801fe48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801fe4c:	f84e 4b04 	str.w	r4, [lr], #4
 801fe50:	1417      	asrs	r7, r2, #16
 801fe52:	e7e0      	b.n	801fe16 <__mdiff+0xc6>
 801fe54:	3e01      	subs	r6, #1
 801fe56:	e7ea      	b.n	801fe2e <__mdiff+0xde>
 801fe58:	0802cd10 	.word	0x0802cd10
 801fe5c:	0802cd8a 	.word	0x0802cd8a

0801fe60 <__d2b>:
 801fe60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fe64:	4689      	mov	r9, r1
 801fe66:	2101      	movs	r1, #1
 801fe68:	ec57 6b10 	vmov	r6, r7, d0
 801fe6c:	4690      	mov	r8, r2
 801fe6e:	f7ff fd23 	bl	801f8b8 <_Balloc>
 801fe72:	4604      	mov	r4, r0
 801fe74:	b930      	cbnz	r0, 801fe84 <__d2b+0x24>
 801fe76:	4602      	mov	r2, r0
 801fe78:	4b25      	ldr	r3, [pc, #148]	; (801ff10 <__d2b+0xb0>)
 801fe7a:	4826      	ldr	r0, [pc, #152]	; (801ff14 <__d2b+0xb4>)
 801fe7c:	f240 310a 	movw	r1, #778	; 0x30a
 801fe80:	f000 fb20 	bl	80204c4 <__assert_func>
 801fe84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fe88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fe8c:	bb35      	cbnz	r5, 801fedc <__d2b+0x7c>
 801fe8e:	2e00      	cmp	r6, #0
 801fe90:	9301      	str	r3, [sp, #4]
 801fe92:	d028      	beq.n	801fee6 <__d2b+0x86>
 801fe94:	4668      	mov	r0, sp
 801fe96:	9600      	str	r6, [sp, #0]
 801fe98:	f7ff fda6 	bl	801f9e8 <__lo0bits>
 801fe9c:	9900      	ldr	r1, [sp, #0]
 801fe9e:	b300      	cbz	r0, 801fee2 <__d2b+0x82>
 801fea0:	9a01      	ldr	r2, [sp, #4]
 801fea2:	f1c0 0320 	rsb	r3, r0, #32
 801fea6:	fa02 f303 	lsl.w	r3, r2, r3
 801feaa:	430b      	orrs	r3, r1
 801feac:	40c2      	lsrs	r2, r0
 801feae:	6163      	str	r3, [r4, #20]
 801feb0:	9201      	str	r2, [sp, #4]
 801feb2:	9b01      	ldr	r3, [sp, #4]
 801feb4:	61a3      	str	r3, [r4, #24]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	bf14      	ite	ne
 801feba:	2202      	movne	r2, #2
 801febc:	2201      	moveq	r2, #1
 801febe:	6122      	str	r2, [r4, #16]
 801fec0:	b1d5      	cbz	r5, 801fef8 <__d2b+0x98>
 801fec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fec6:	4405      	add	r5, r0
 801fec8:	f8c9 5000 	str.w	r5, [r9]
 801fecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fed0:	f8c8 0000 	str.w	r0, [r8]
 801fed4:	4620      	mov	r0, r4
 801fed6:	b003      	add	sp, #12
 801fed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fedc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fee0:	e7d5      	b.n	801fe8e <__d2b+0x2e>
 801fee2:	6161      	str	r1, [r4, #20]
 801fee4:	e7e5      	b.n	801feb2 <__d2b+0x52>
 801fee6:	a801      	add	r0, sp, #4
 801fee8:	f7ff fd7e 	bl	801f9e8 <__lo0bits>
 801feec:	9b01      	ldr	r3, [sp, #4]
 801feee:	6163      	str	r3, [r4, #20]
 801fef0:	2201      	movs	r2, #1
 801fef2:	6122      	str	r2, [r4, #16]
 801fef4:	3020      	adds	r0, #32
 801fef6:	e7e3      	b.n	801fec0 <__d2b+0x60>
 801fef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fefc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ff00:	f8c9 0000 	str.w	r0, [r9]
 801ff04:	6918      	ldr	r0, [r3, #16]
 801ff06:	f7ff fd4f 	bl	801f9a8 <__hi0bits>
 801ff0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ff0e:	e7df      	b.n	801fed0 <__d2b+0x70>
 801ff10:	0802cd10 	.word	0x0802cd10
 801ff14:	0802cd8a 	.word	0x0802cd8a

0801ff18 <_read_r>:
 801ff18:	b538      	push	{r3, r4, r5, lr}
 801ff1a:	4d07      	ldr	r5, [pc, #28]	; (801ff38 <_read_r+0x20>)
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	4608      	mov	r0, r1
 801ff20:	4611      	mov	r1, r2
 801ff22:	2200      	movs	r2, #0
 801ff24:	602a      	str	r2, [r5, #0]
 801ff26:	461a      	mov	r2, r3
 801ff28:	f7e1 fa40 	bl	80013ac <_read>
 801ff2c:	1c43      	adds	r3, r0, #1
 801ff2e:	d102      	bne.n	801ff36 <_read_r+0x1e>
 801ff30:	682b      	ldr	r3, [r5, #0]
 801ff32:	b103      	cbz	r3, 801ff36 <_read_r+0x1e>
 801ff34:	6023      	str	r3, [r4, #0]
 801ff36:	bd38      	pop	{r3, r4, r5, pc}
 801ff38:	20009910 	.word	0x20009910

0801ff3c <_realloc_r>:
 801ff3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff40:	4681      	mov	r9, r0
 801ff42:	460c      	mov	r4, r1
 801ff44:	b929      	cbnz	r1, 801ff52 <_realloc_r+0x16>
 801ff46:	4611      	mov	r1, r2
 801ff48:	b003      	add	sp, #12
 801ff4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff4e:	f7ff ba53 	b.w	801f3f8 <_malloc_r>
 801ff52:	9201      	str	r2, [sp, #4]
 801ff54:	f7ff fca4 	bl	801f8a0 <__malloc_lock>
 801ff58:	9a01      	ldr	r2, [sp, #4]
 801ff5a:	f102 080b 	add.w	r8, r2, #11
 801ff5e:	f1b8 0f16 	cmp.w	r8, #22
 801ff62:	d90b      	bls.n	801ff7c <_realloc_r+0x40>
 801ff64:	f038 0807 	bics.w	r8, r8, #7
 801ff68:	d50a      	bpl.n	801ff80 <_realloc_r+0x44>
 801ff6a:	230c      	movs	r3, #12
 801ff6c:	f8c9 3000 	str.w	r3, [r9]
 801ff70:	f04f 0b00 	mov.w	fp, #0
 801ff74:	4658      	mov	r0, fp
 801ff76:	b003      	add	sp, #12
 801ff78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff7c:	f04f 0810 	mov.w	r8, #16
 801ff80:	4590      	cmp	r8, r2
 801ff82:	d3f2      	bcc.n	801ff6a <_realloc_r+0x2e>
 801ff84:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801ff88:	f025 0603 	bic.w	r6, r5, #3
 801ff8c:	45b0      	cmp	r8, r6
 801ff8e:	f1a4 0a08 	sub.w	sl, r4, #8
 801ff92:	f340 8170 	ble.w	8020276 <_realloc_r+0x33a>
 801ff96:	48a9      	ldr	r0, [pc, #676]	; (802023c <_realloc_r+0x300>)
 801ff98:	9001      	str	r0, [sp, #4]
 801ff9a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801ff9e:	eb0a 0306 	add.w	r3, sl, r6
 801ffa2:	459c      	cmp	ip, r3
 801ffa4:	6859      	ldr	r1, [r3, #4]
 801ffa6:	d005      	beq.n	801ffb4 <_realloc_r+0x78>
 801ffa8:	f021 0001 	bic.w	r0, r1, #1
 801ffac:	4418      	add	r0, r3
 801ffae:	6840      	ldr	r0, [r0, #4]
 801ffb0:	07c7      	lsls	r7, r0, #31
 801ffb2:	d427      	bmi.n	8020004 <_realloc_r+0xc8>
 801ffb4:	f021 0103 	bic.w	r1, r1, #3
 801ffb8:	459c      	cmp	ip, r3
 801ffba:	eb06 0701 	add.w	r7, r6, r1
 801ffbe:	d119      	bne.n	801fff4 <_realloc_r+0xb8>
 801ffc0:	f108 0010 	add.w	r0, r8, #16
 801ffc4:	42b8      	cmp	r0, r7
 801ffc6:	dc1f      	bgt.n	8020008 <_realloc_r+0xcc>
 801ffc8:	eb0a 0308 	add.w	r3, sl, r8
 801ffcc:	9a01      	ldr	r2, [sp, #4]
 801ffce:	eba7 0708 	sub.w	r7, r7, r8
 801ffd2:	f047 0701 	orr.w	r7, r7, #1
 801ffd6:	6093      	str	r3, [r2, #8]
 801ffd8:	605f      	str	r7, [r3, #4]
 801ffda:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ffde:	f003 0301 	and.w	r3, r3, #1
 801ffe2:	ea43 0308 	orr.w	r3, r3, r8
 801ffe6:	f844 3c04 	str.w	r3, [r4, #-4]
 801ffea:	4648      	mov	r0, r9
 801ffec:	f7ff fc5e 	bl	801f8ac <__malloc_unlock>
 801fff0:	46a3      	mov	fp, r4
 801fff2:	e7bf      	b.n	801ff74 <_realloc_r+0x38>
 801fff4:	45b8      	cmp	r8, r7
 801fff6:	dc07      	bgt.n	8020008 <_realloc_r+0xcc>
 801fff8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801fffc:	60da      	str	r2, [r3, #12]
 801fffe:	6093      	str	r3, [r2, #8]
 8020000:	4655      	mov	r5, sl
 8020002:	e07f      	b.n	8020104 <_realloc_r+0x1c8>
 8020004:	2100      	movs	r1, #0
 8020006:	460b      	mov	r3, r1
 8020008:	07e8      	lsls	r0, r5, #31
 802000a:	f100 80e5 	bmi.w	80201d8 <_realloc_r+0x29c>
 802000e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8020012:	ebaa 0505 	sub.w	r5, sl, r5
 8020016:	6868      	ldr	r0, [r5, #4]
 8020018:	f020 0003 	bic.w	r0, r0, #3
 802001c:	eb00 0b06 	add.w	fp, r0, r6
 8020020:	2b00      	cmp	r3, #0
 8020022:	f000 80a5 	beq.w	8020170 <_realloc_r+0x234>
 8020026:	459c      	cmp	ip, r3
 8020028:	eb01 070b 	add.w	r7, r1, fp
 802002c:	d14a      	bne.n	80200c4 <_realloc_r+0x188>
 802002e:	f108 0310 	add.w	r3, r8, #16
 8020032:	42bb      	cmp	r3, r7
 8020034:	f300 809c 	bgt.w	8020170 <_realloc_r+0x234>
 8020038:	46ab      	mov	fp, r5
 802003a:	68eb      	ldr	r3, [r5, #12]
 802003c:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8020040:	60d3      	str	r3, [r2, #12]
 8020042:	609a      	str	r2, [r3, #8]
 8020044:	1f32      	subs	r2, r6, #4
 8020046:	2a24      	cmp	r2, #36	; 0x24
 8020048:	d837      	bhi.n	80200ba <_realloc_r+0x17e>
 802004a:	2a13      	cmp	r2, #19
 802004c:	d933      	bls.n	80200b6 <_realloc_r+0x17a>
 802004e:	6823      	ldr	r3, [r4, #0]
 8020050:	60ab      	str	r3, [r5, #8]
 8020052:	6863      	ldr	r3, [r4, #4]
 8020054:	60eb      	str	r3, [r5, #12]
 8020056:	2a1b      	cmp	r2, #27
 8020058:	d81b      	bhi.n	8020092 <_realloc_r+0x156>
 802005a:	3408      	adds	r4, #8
 802005c:	f105 0310 	add.w	r3, r5, #16
 8020060:	6822      	ldr	r2, [r4, #0]
 8020062:	601a      	str	r2, [r3, #0]
 8020064:	6862      	ldr	r2, [r4, #4]
 8020066:	605a      	str	r2, [r3, #4]
 8020068:	68a2      	ldr	r2, [r4, #8]
 802006a:	609a      	str	r2, [r3, #8]
 802006c:	eb05 0308 	add.w	r3, r5, r8
 8020070:	9a01      	ldr	r2, [sp, #4]
 8020072:	eba7 0708 	sub.w	r7, r7, r8
 8020076:	f047 0701 	orr.w	r7, r7, #1
 802007a:	6093      	str	r3, [r2, #8]
 802007c:	605f      	str	r7, [r3, #4]
 802007e:	686b      	ldr	r3, [r5, #4]
 8020080:	f003 0301 	and.w	r3, r3, #1
 8020084:	ea43 0308 	orr.w	r3, r3, r8
 8020088:	606b      	str	r3, [r5, #4]
 802008a:	4648      	mov	r0, r9
 802008c:	f7ff fc0e 	bl	801f8ac <__malloc_unlock>
 8020090:	e770      	b.n	801ff74 <_realloc_r+0x38>
 8020092:	68a3      	ldr	r3, [r4, #8]
 8020094:	612b      	str	r3, [r5, #16]
 8020096:	68e3      	ldr	r3, [r4, #12]
 8020098:	616b      	str	r3, [r5, #20]
 802009a:	2a24      	cmp	r2, #36	; 0x24
 802009c:	bf01      	itttt	eq
 802009e:	6923      	ldreq	r3, [r4, #16]
 80200a0:	61ab      	streq	r3, [r5, #24]
 80200a2:	6962      	ldreq	r2, [r4, #20]
 80200a4:	61ea      	streq	r2, [r5, #28]
 80200a6:	bf19      	ittee	ne
 80200a8:	3410      	addne	r4, #16
 80200aa:	f105 0318 	addne.w	r3, r5, #24
 80200ae:	f105 0320 	addeq.w	r3, r5, #32
 80200b2:	3418      	addeq	r4, #24
 80200b4:	e7d4      	b.n	8020060 <_realloc_r+0x124>
 80200b6:	465b      	mov	r3, fp
 80200b8:	e7d2      	b.n	8020060 <_realloc_r+0x124>
 80200ba:	4621      	mov	r1, r4
 80200bc:	4658      	mov	r0, fp
 80200be:	f000 fba0 	bl	8020802 <memmove>
 80200c2:	e7d3      	b.n	802006c <_realloc_r+0x130>
 80200c4:	45b8      	cmp	r8, r7
 80200c6:	dc53      	bgt.n	8020170 <_realloc_r+0x234>
 80200c8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80200cc:	4628      	mov	r0, r5
 80200ce:	60da      	str	r2, [r3, #12]
 80200d0:	6093      	str	r3, [r2, #8]
 80200d2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80200d6:	68eb      	ldr	r3, [r5, #12]
 80200d8:	60d3      	str	r3, [r2, #12]
 80200da:	609a      	str	r2, [r3, #8]
 80200dc:	1f32      	subs	r2, r6, #4
 80200de:	2a24      	cmp	r2, #36	; 0x24
 80200e0:	d842      	bhi.n	8020168 <_realloc_r+0x22c>
 80200e2:	2a13      	cmp	r2, #19
 80200e4:	d908      	bls.n	80200f8 <_realloc_r+0x1bc>
 80200e6:	6823      	ldr	r3, [r4, #0]
 80200e8:	60ab      	str	r3, [r5, #8]
 80200ea:	6863      	ldr	r3, [r4, #4]
 80200ec:	60eb      	str	r3, [r5, #12]
 80200ee:	2a1b      	cmp	r2, #27
 80200f0:	d828      	bhi.n	8020144 <_realloc_r+0x208>
 80200f2:	3408      	adds	r4, #8
 80200f4:	f105 0010 	add.w	r0, r5, #16
 80200f8:	6823      	ldr	r3, [r4, #0]
 80200fa:	6003      	str	r3, [r0, #0]
 80200fc:	6863      	ldr	r3, [r4, #4]
 80200fe:	6043      	str	r3, [r0, #4]
 8020100:	68a3      	ldr	r3, [r4, #8]
 8020102:	6083      	str	r3, [r0, #8]
 8020104:	686a      	ldr	r2, [r5, #4]
 8020106:	eba7 0008 	sub.w	r0, r7, r8
 802010a:	280f      	cmp	r0, #15
 802010c:	f002 0201 	and.w	r2, r2, #1
 8020110:	eb05 0307 	add.w	r3, r5, r7
 8020114:	f240 80b1 	bls.w	802027a <_realloc_r+0x33e>
 8020118:	eb05 0108 	add.w	r1, r5, r8
 802011c:	ea48 0202 	orr.w	r2, r8, r2
 8020120:	f040 0001 	orr.w	r0, r0, #1
 8020124:	606a      	str	r2, [r5, #4]
 8020126:	6048      	str	r0, [r1, #4]
 8020128:	685a      	ldr	r2, [r3, #4]
 802012a:	f042 0201 	orr.w	r2, r2, #1
 802012e:	605a      	str	r2, [r3, #4]
 8020130:	3108      	adds	r1, #8
 8020132:	4648      	mov	r0, r9
 8020134:	f7ff f880 	bl	801f238 <_free_r>
 8020138:	4648      	mov	r0, r9
 802013a:	f7ff fbb7 	bl	801f8ac <__malloc_unlock>
 802013e:	f105 0b08 	add.w	fp, r5, #8
 8020142:	e717      	b.n	801ff74 <_realloc_r+0x38>
 8020144:	68a3      	ldr	r3, [r4, #8]
 8020146:	612b      	str	r3, [r5, #16]
 8020148:	68e3      	ldr	r3, [r4, #12]
 802014a:	616b      	str	r3, [r5, #20]
 802014c:	2a24      	cmp	r2, #36	; 0x24
 802014e:	bf01      	itttt	eq
 8020150:	6923      	ldreq	r3, [r4, #16]
 8020152:	61ab      	streq	r3, [r5, #24]
 8020154:	6963      	ldreq	r3, [r4, #20]
 8020156:	61eb      	streq	r3, [r5, #28]
 8020158:	bf19      	ittee	ne
 802015a:	3410      	addne	r4, #16
 802015c:	f105 0018 	addne.w	r0, r5, #24
 8020160:	f105 0020 	addeq.w	r0, r5, #32
 8020164:	3418      	addeq	r4, #24
 8020166:	e7c7      	b.n	80200f8 <_realloc_r+0x1bc>
 8020168:	4621      	mov	r1, r4
 802016a:	f000 fb4a 	bl	8020802 <memmove>
 802016e:	e7c9      	b.n	8020104 <_realloc_r+0x1c8>
 8020170:	45d8      	cmp	r8, fp
 8020172:	dc31      	bgt.n	80201d8 <_realloc_r+0x29c>
 8020174:	4628      	mov	r0, r5
 8020176:	68eb      	ldr	r3, [r5, #12]
 8020178:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802017c:	60d3      	str	r3, [r2, #12]
 802017e:	609a      	str	r2, [r3, #8]
 8020180:	1f32      	subs	r2, r6, #4
 8020182:	2a24      	cmp	r2, #36	; 0x24
 8020184:	d824      	bhi.n	80201d0 <_realloc_r+0x294>
 8020186:	2a13      	cmp	r2, #19
 8020188:	d908      	bls.n	802019c <_realloc_r+0x260>
 802018a:	6823      	ldr	r3, [r4, #0]
 802018c:	60ab      	str	r3, [r5, #8]
 802018e:	6863      	ldr	r3, [r4, #4]
 8020190:	60eb      	str	r3, [r5, #12]
 8020192:	2a1b      	cmp	r2, #27
 8020194:	d80a      	bhi.n	80201ac <_realloc_r+0x270>
 8020196:	3408      	adds	r4, #8
 8020198:	f105 0010 	add.w	r0, r5, #16
 802019c:	6823      	ldr	r3, [r4, #0]
 802019e:	6003      	str	r3, [r0, #0]
 80201a0:	6863      	ldr	r3, [r4, #4]
 80201a2:	6043      	str	r3, [r0, #4]
 80201a4:	68a3      	ldr	r3, [r4, #8]
 80201a6:	6083      	str	r3, [r0, #8]
 80201a8:	465f      	mov	r7, fp
 80201aa:	e7ab      	b.n	8020104 <_realloc_r+0x1c8>
 80201ac:	68a3      	ldr	r3, [r4, #8]
 80201ae:	612b      	str	r3, [r5, #16]
 80201b0:	68e3      	ldr	r3, [r4, #12]
 80201b2:	616b      	str	r3, [r5, #20]
 80201b4:	2a24      	cmp	r2, #36	; 0x24
 80201b6:	bf01      	itttt	eq
 80201b8:	6923      	ldreq	r3, [r4, #16]
 80201ba:	61ab      	streq	r3, [r5, #24]
 80201bc:	6963      	ldreq	r3, [r4, #20]
 80201be:	61eb      	streq	r3, [r5, #28]
 80201c0:	bf19      	ittee	ne
 80201c2:	3410      	addne	r4, #16
 80201c4:	f105 0018 	addne.w	r0, r5, #24
 80201c8:	f105 0020 	addeq.w	r0, r5, #32
 80201cc:	3418      	addeq	r4, #24
 80201ce:	e7e5      	b.n	802019c <_realloc_r+0x260>
 80201d0:	4621      	mov	r1, r4
 80201d2:	f000 fb16 	bl	8020802 <memmove>
 80201d6:	e7e7      	b.n	80201a8 <_realloc_r+0x26c>
 80201d8:	4611      	mov	r1, r2
 80201da:	4648      	mov	r0, r9
 80201dc:	f7ff f90c 	bl	801f3f8 <_malloc_r>
 80201e0:	4683      	mov	fp, r0
 80201e2:	2800      	cmp	r0, #0
 80201e4:	f43f af51 	beq.w	802008a <_realloc_r+0x14e>
 80201e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80201ec:	f023 0301 	bic.w	r3, r3, #1
 80201f0:	4453      	add	r3, sl
 80201f2:	f1a0 0208 	sub.w	r2, r0, #8
 80201f6:	4293      	cmp	r3, r2
 80201f8:	d105      	bne.n	8020206 <_realloc_r+0x2ca>
 80201fa:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80201fe:	f027 0703 	bic.w	r7, r7, #3
 8020202:	4437      	add	r7, r6
 8020204:	e6fc      	b.n	8020000 <_realloc_r+0xc4>
 8020206:	1f32      	subs	r2, r6, #4
 8020208:	2a24      	cmp	r2, #36	; 0x24
 802020a:	d830      	bhi.n	802026e <_realloc_r+0x332>
 802020c:	2a13      	cmp	r2, #19
 802020e:	d92b      	bls.n	8020268 <_realloc_r+0x32c>
 8020210:	6823      	ldr	r3, [r4, #0]
 8020212:	6003      	str	r3, [r0, #0]
 8020214:	6863      	ldr	r3, [r4, #4]
 8020216:	6043      	str	r3, [r0, #4]
 8020218:	2a1b      	cmp	r2, #27
 802021a:	d811      	bhi.n	8020240 <_realloc_r+0x304>
 802021c:	f104 0208 	add.w	r2, r4, #8
 8020220:	f100 0308 	add.w	r3, r0, #8
 8020224:	6811      	ldr	r1, [r2, #0]
 8020226:	6019      	str	r1, [r3, #0]
 8020228:	6851      	ldr	r1, [r2, #4]
 802022a:	6059      	str	r1, [r3, #4]
 802022c:	6892      	ldr	r2, [r2, #8]
 802022e:	609a      	str	r2, [r3, #8]
 8020230:	4621      	mov	r1, r4
 8020232:	4648      	mov	r0, r9
 8020234:	f7ff f800 	bl	801f238 <_free_r>
 8020238:	e727      	b.n	802008a <_realloc_r+0x14e>
 802023a:	bf00      	nop
 802023c:	20000bc0 	.word	0x20000bc0
 8020240:	68a3      	ldr	r3, [r4, #8]
 8020242:	6083      	str	r3, [r0, #8]
 8020244:	68e3      	ldr	r3, [r4, #12]
 8020246:	60c3      	str	r3, [r0, #12]
 8020248:	2a24      	cmp	r2, #36	; 0x24
 802024a:	bf01      	itttt	eq
 802024c:	6923      	ldreq	r3, [r4, #16]
 802024e:	6103      	streq	r3, [r0, #16]
 8020250:	6961      	ldreq	r1, [r4, #20]
 8020252:	6141      	streq	r1, [r0, #20]
 8020254:	bf19      	ittee	ne
 8020256:	f104 0210 	addne.w	r2, r4, #16
 802025a:	f100 0310 	addne.w	r3, r0, #16
 802025e:	f104 0218 	addeq.w	r2, r4, #24
 8020262:	f100 0318 	addeq.w	r3, r0, #24
 8020266:	e7dd      	b.n	8020224 <_realloc_r+0x2e8>
 8020268:	4603      	mov	r3, r0
 802026a:	4622      	mov	r2, r4
 802026c:	e7da      	b.n	8020224 <_realloc_r+0x2e8>
 802026e:	4621      	mov	r1, r4
 8020270:	f000 fac7 	bl	8020802 <memmove>
 8020274:	e7dc      	b.n	8020230 <_realloc_r+0x2f4>
 8020276:	4637      	mov	r7, r6
 8020278:	e6c2      	b.n	8020000 <_realloc_r+0xc4>
 802027a:	4317      	orrs	r7, r2
 802027c:	606f      	str	r7, [r5, #4]
 802027e:	685a      	ldr	r2, [r3, #4]
 8020280:	f042 0201 	orr.w	r2, r2, #1
 8020284:	605a      	str	r2, [r3, #4]
 8020286:	e757      	b.n	8020138 <_realloc_r+0x1fc>

08020288 <frexp>:
 8020288:	b570      	push	{r4, r5, r6, lr}
 802028a:	2100      	movs	r1, #0
 802028c:	ec55 4b10 	vmov	r4, r5, d0
 8020290:	6001      	str	r1, [r0, #0]
 8020292:	4916      	ldr	r1, [pc, #88]	; (80202ec <frexp+0x64>)
 8020294:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020298:	428a      	cmp	r2, r1
 802029a:	4606      	mov	r6, r0
 802029c:	462b      	mov	r3, r5
 802029e:	dc22      	bgt.n	80202e6 <frexp+0x5e>
 80202a0:	ee10 1a10 	vmov	r1, s0
 80202a4:	4311      	orrs	r1, r2
 80202a6:	d01e      	beq.n	80202e6 <frexp+0x5e>
 80202a8:	4911      	ldr	r1, [pc, #68]	; (80202f0 <frexp+0x68>)
 80202aa:	4029      	ands	r1, r5
 80202ac:	b969      	cbnz	r1, 80202ca <frexp+0x42>
 80202ae:	4b11      	ldr	r3, [pc, #68]	; (80202f4 <frexp+0x6c>)
 80202b0:	2200      	movs	r2, #0
 80202b2:	ee10 0a10 	vmov	r0, s0
 80202b6:	4629      	mov	r1, r5
 80202b8:	f7e0 f9c6 	bl	8000648 <__aeabi_dmul>
 80202bc:	460b      	mov	r3, r1
 80202be:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80202c2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80202c6:	4604      	mov	r4, r0
 80202c8:	6031      	str	r1, [r6, #0]
 80202ca:	6831      	ldr	r1, [r6, #0]
 80202cc:	1512      	asrs	r2, r2, #20
 80202ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80202d2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80202d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80202da:	440a      	add	r2, r1
 80202dc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80202e0:	6032      	str	r2, [r6, #0]
 80202e2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80202e6:	ec45 4b10 	vmov	d0, r4, r5
 80202ea:	bd70      	pop	{r4, r5, r6, pc}
 80202ec:	7fefffff 	.word	0x7fefffff
 80202f0:	7ff00000 	.word	0x7ff00000
 80202f4:	43500000 	.word	0x43500000

080202f8 <_sbrk_r>:
 80202f8:	b538      	push	{r3, r4, r5, lr}
 80202fa:	4d06      	ldr	r5, [pc, #24]	; (8020314 <_sbrk_r+0x1c>)
 80202fc:	2300      	movs	r3, #0
 80202fe:	4604      	mov	r4, r0
 8020300:	4608      	mov	r0, r1
 8020302:	602b      	str	r3, [r5, #0]
 8020304:	f7e1 f878 	bl	80013f8 <_sbrk>
 8020308:	1c43      	adds	r3, r0, #1
 802030a:	d102      	bne.n	8020312 <_sbrk_r+0x1a>
 802030c:	682b      	ldr	r3, [r5, #0]
 802030e:	b103      	cbz	r3, 8020312 <_sbrk_r+0x1a>
 8020310:	6023      	str	r3, [r4, #0]
 8020312:	bd38      	pop	{r3, r4, r5, pc}
 8020314:	20009910 	.word	0x20009910

08020318 <__ssprint_r>:
 8020318:	6893      	ldr	r3, [r2, #8]
 802031a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802031e:	4680      	mov	r8, r0
 8020320:	460c      	mov	r4, r1
 8020322:	4617      	mov	r7, r2
 8020324:	2b00      	cmp	r3, #0
 8020326:	d061      	beq.n	80203ec <__ssprint_r+0xd4>
 8020328:	2300      	movs	r3, #0
 802032a:	f8d2 a000 	ldr.w	sl, [r2]
 802032e:	9301      	str	r3, [sp, #4]
 8020330:	469b      	mov	fp, r3
 8020332:	f1bb 0f00 	cmp.w	fp, #0
 8020336:	d02b      	beq.n	8020390 <__ssprint_r+0x78>
 8020338:	68a6      	ldr	r6, [r4, #8]
 802033a:	45b3      	cmp	fp, r6
 802033c:	d342      	bcc.n	80203c4 <__ssprint_r+0xac>
 802033e:	89a2      	ldrh	r2, [r4, #12]
 8020340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020344:	d03e      	beq.n	80203c4 <__ssprint_r+0xac>
 8020346:	6825      	ldr	r5, [r4, #0]
 8020348:	6921      	ldr	r1, [r4, #16]
 802034a:	eba5 0901 	sub.w	r9, r5, r1
 802034e:	6965      	ldr	r5, [r4, #20]
 8020350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020358:	f109 0001 	add.w	r0, r9, #1
 802035c:	106d      	asrs	r5, r5, #1
 802035e:	4458      	add	r0, fp
 8020360:	4285      	cmp	r5, r0
 8020362:	bf38      	it	cc
 8020364:	4605      	movcc	r5, r0
 8020366:	0553      	lsls	r3, r2, #21
 8020368:	d545      	bpl.n	80203f6 <__ssprint_r+0xde>
 802036a:	4629      	mov	r1, r5
 802036c:	4640      	mov	r0, r8
 802036e:	f7ff f843 	bl	801f3f8 <_malloc_r>
 8020372:	4606      	mov	r6, r0
 8020374:	b9a0      	cbnz	r0, 80203a0 <__ssprint_r+0x88>
 8020376:	230c      	movs	r3, #12
 8020378:	f8c8 3000 	str.w	r3, [r8]
 802037c:	89a3      	ldrh	r3, [r4, #12]
 802037e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020382:	81a3      	strh	r3, [r4, #12]
 8020384:	2300      	movs	r3, #0
 8020386:	e9c7 3301 	strd	r3, r3, [r7, #4]
 802038a:	f04f 30ff 	mov.w	r0, #4294967295
 802038e:	e02f      	b.n	80203f0 <__ssprint_r+0xd8>
 8020390:	f8da 3000 	ldr.w	r3, [sl]
 8020394:	f8da b004 	ldr.w	fp, [sl, #4]
 8020398:	9301      	str	r3, [sp, #4]
 802039a:	f10a 0a08 	add.w	sl, sl, #8
 802039e:	e7c8      	b.n	8020332 <__ssprint_r+0x1a>
 80203a0:	464a      	mov	r2, r9
 80203a2:	6921      	ldr	r1, [r4, #16]
 80203a4:	f7fc fd4a 	bl	801ce3c <memcpy>
 80203a8:	89a2      	ldrh	r2, [r4, #12]
 80203aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80203ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80203b2:	81a2      	strh	r2, [r4, #12]
 80203b4:	6126      	str	r6, [r4, #16]
 80203b6:	6165      	str	r5, [r4, #20]
 80203b8:	444e      	add	r6, r9
 80203ba:	eba5 0509 	sub.w	r5, r5, r9
 80203be:	6026      	str	r6, [r4, #0]
 80203c0:	60a5      	str	r5, [r4, #8]
 80203c2:	465e      	mov	r6, fp
 80203c4:	455e      	cmp	r6, fp
 80203c6:	bf28      	it	cs
 80203c8:	465e      	movcs	r6, fp
 80203ca:	4632      	mov	r2, r6
 80203cc:	9901      	ldr	r1, [sp, #4]
 80203ce:	6820      	ldr	r0, [r4, #0]
 80203d0:	f000 fa17 	bl	8020802 <memmove>
 80203d4:	68a2      	ldr	r2, [r4, #8]
 80203d6:	1b92      	subs	r2, r2, r6
 80203d8:	60a2      	str	r2, [r4, #8]
 80203da:	6822      	ldr	r2, [r4, #0]
 80203dc:	4432      	add	r2, r6
 80203de:	6022      	str	r2, [r4, #0]
 80203e0:	68ba      	ldr	r2, [r7, #8]
 80203e2:	eba2 030b 	sub.w	r3, r2, fp
 80203e6:	60bb      	str	r3, [r7, #8]
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d1d1      	bne.n	8020390 <__ssprint_r+0x78>
 80203ec:	2000      	movs	r0, #0
 80203ee:	6078      	str	r0, [r7, #4]
 80203f0:	b003      	add	sp, #12
 80203f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203f6:	462a      	mov	r2, r5
 80203f8:	4640      	mov	r0, r8
 80203fa:	f7ff fd9f 	bl	801ff3c <_realloc_r>
 80203fe:	4606      	mov	r6, r0
 8020400:	2800      	cmp	r0, #0
 8020402:	d1d7      	bne.n	80203b4 <__ssprint_r+0x9c>
 8020404:	6921      	ldr	r1, [r4, #16]
 8020406:	4640      	mov	r0, r8
 8020408:	f7fe ff16 	bl	801f238 <_free_r>
 802040c:	e7b3      	b.n	8020376 <__ssprint_r+0x5e>

0802040e <sysconf>:
 802040e:	2808      	cmp	r0, #8
 8020410:	b508      	push	{r3, lr}
 8020412:	d006      	beq.n	8020422 <sysconf+0x14>
 8020414:	f7fc fcda 	bl	801cdcc <__errno>
 8020418:	2316      	movs	r3, #22
 802041a:	6003      	str	r3, [r0, #0]
 802041c:	f04f 30ff 	mov.w	r0, #4294967295
 8020420:	bd08      	pop	{r3, pc}
 8020422:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8020426:	e7fb      	b.n	8020420 <sysconf+0x12>

08020428 <__ascii_wctomb>:
 8020428:	b149      	cbz	r1, 802043e <__ascii_wctomb+0x16>
 802042a:	2aff      	cmp	r2, #255	; 0xff
 802042c:	bf85      	ittet	hi
 802042e:	238a      	movhi	r3, #138	; 0x8a
 8020430:	6003      	strhi	r3, [r0, #0]
 8020432:	700a      	strbls	r2, [r1, #0]
 8020434:	f04f 30ff 	movhi.w	r0, #4294967295
 8020438:	bf98      	it	ls
 802043a:	2001      	movls	r0, #1
 802043c:	4770      	bx	lr
 802043e:	4608      	mov	r0, r1
 8020440:	4770      	bx	lr
	...

08020444 <__register_exitproc>:
 8020444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020448:	4d1c      	ldr	r5, [pc, #112]	; (80204bc <__register_exitproc+0x78>)
 802044a:	4606      	mov	r6, r0
 802044c:	6828      	ldr	r0, [r5, #0]
 802044e:	4698      	mov	r8, r3
 8020450:	460f      	mov	r7, r1
 8020452:	4691      	mov	r9, r2
 8020454:	f7fe ffbc 	bl	801f3d0 <__retarget_lock_acquire_recursive>
 8020458:	4b19      	ldr	r3, [pc, #100]	; (80204c0 <__register_exitproc+0x7c>)
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8020460:	4628      	mov	r0, r5
 8020462:	b91c      	cbnz	r4, 802046c <__register_exitproc+0x28>
 8020464:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8020468:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 802046c:	6865      	ldr	r5, [r4, #4]
 802046e:	6800      	ldr	r0, [r0, #0]
 8020470:	2d1f      	cmp	r5, #31
 8020472:	dd05      	ble.n	8020480 <__register_exitproc+0x3c>
 8020474:	f7fe ffad 	bl	801f3d2 <__retarget_lock_release_recursive>
 8020478:	f04f 30ff 	mov.w	r0, #4294967295
 802047c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020480:	b19e      	cbz	r6, 80204aa <__register_exitproc+0x66>
 8020482:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8020486:	2201      	movs	r2, #1
 8020488:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 802048c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8020490:	40aa      	lsls	r2, r5
 8020492:	4313      	orrs	r3, r2
 8020494:	2e02      	cmp	r6, #2
 8020496:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 802049a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 802049e:	bf02      	ittt	eq
 80204a0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80204a4:	431a      	orreq	r2, r3
 80204a6:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 80204aa:	1c6b      	adds	r3, r5, #1
 80204ac:	3502      	adds	r5, #2
 80204ae:	6063      	str	r3, [r4, #4]
 80204b0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80204b4:	f7fe ff8d 	bl	801f3d2 <__retarget_lock_release_recursive>
 80204b8:	2000      	movs	r0, #0
 80204ba:	e7df      	b.n	802047c <__register_exitproc+0x38>
 80204bc:	20000a50 	.word	0x20000a50
 80204c0:	0802cbac 	.word	0x0802cbac

080204c4 <__assert_func>:
 80204c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80204c6:	4614      	mov	r4, r2
 80204c8:	461a      	mov	r2, r3
 80204ca:	4b09      	ldr	r3, [pc, #36]	; (80204f0 <__assert_func+0x2c>)
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	4605      	mov	r5, r0
 80204d0:	68d8      	ldr	r0, [r3, #12]
 80204d2:	b14c      	cbz	r4, 80204e8 <__assert_func+0x24>
 80204d4:	4b07      	ldr	r3, [pc, #28]	; (80204f4 <__assert_func+0x30>)
 80204d6:	9100      	str	r1, [sp, #0]
 80204d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80204dc:	4906      	ldr	r1, [pc, #24]	; (80204f8 <__assert_func+0x34>)
 80204de:	462b      	mov	r3, r5
 80204e0:	f000 f95e 	bl	80207a0 <fiprintf>
 80204e4:	f000 fefa 	bl	80212dc <abort>
 80204e8:	4b04      	ldr	r3, [pc, #16]	; (80204fc <__assert_func+0x38>)
 80204ea:	461c      	mov	r4, r3
 80204ec:	e7f3      	b.n	80204d6 <__assert_func+0x12>
 80204ee:	bf00      	nop
 80204f0:	20000624 	.word	0x20000624
 80204f4:	0802ceec 	.word	0x0802ceec
 80204f8:	0802cef9 	.word	0x0802cef9
 80204fc:	08028e1b 	.word	0x08028e1b

08020500 <_calloc_r>:
 8020500:	b510      	push	{r4, lr}
 8020502:	4351      	muls	r1, r2
 8020504:	f7fe ff78 	bl	801f3f8 <_malloc_r>
 8020508:	4604      	mov	r4, r0
 802050a:	b198      	cbz	r0, 8020534 <_calloc_r+0x34>
 802050c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020510:	f022 0203 	bic.w	r2, r2, #3
 8020514:	3a04      	subs	r2, #4
 8020516:	2a24      	cmp	r2, #36	; 0x24
 8020518:	d81b      	bhi.n	8020552 <_calloc_r+0x52>
 802051a:	2a13      	cmp	r2, #19
 802051c:	d917      	bls.n	802054e <_calloc_r+0x4e>
 802051e:	2100      	movs	r1, #0
 8020520:	2a1b      	cmp	r2, #27
 8020522:	e9c0 1100 	strd	r1, r1, [r0]
 8020526:	d807      	bhi.n	8020538 <_calloc_r+0x38>
 8020528:	f100 0308 	add.w	r3, r0, #8
 802052c:	2200      	movs	r2, #0
 802052e:	e9c3 2200 	strd	r2, r2, [r3]
 8020532:	609a      	str	r2, [r3, #8]
 8020534:	4620      	mov	r0, r4
 8020536:	bd10      	pop	{r4, pc}
 8020538:	2a24      	cmp	r2, #36	; 0x24
 802053a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 802053e:	bf11      	iteee	ne
 8020540:	f100 0310 	addne.w	r3, r0, #16
 8020544:	6101      	streq	r1, [r0, #16]
 8020546:	f100 0318 	addeq.w	r3, r0, #24
 802054a:	6141      	streq	r1, [r0, #20]
 802054c:	e7ee      	b.n	802052c <_calloc_r+0x2c>
 802054e:	4603      	mov	r3, r0
 8020550:	e7ec      	b.n	802052c <_calloc_r+0x2c>
 8020552:	2100      	movs	r1, #0
 8020554:	f7fc fc80 	bl	801ce58 <memset>
 8020558:	e7ec      	b.n	8020534 <_calloc_r+0x34>
	...

0802055c <__sflush_r>:
 802055c:	898b      	ldrh	r3, [r1, #12]
 802055e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020566:	4605      	mov	r5, r0
 8020568:	0718      	lsls	r0, r3, #28
 802056a:	460c      	mov	r4, r1
 802056c:	d45f      	bmi.n	802062e <__sflush_r+0xd2>
 802056e:	684b      	ldr	r3, [r1, #4]
 8020570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020574:	2b00      	cmp	r3, #0
 8020576:	818a      	strh	r2, [r1, #12]
 8020578:	dc05      	bgt.n	8020586 <__sflush_r+0x2a>
 802057a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 802057c:	2b00      	cmp	r3, #0
 802057e:	dc02      	bgt.n	8020586 <__sflush_r+0x2a>
 8020580:	2000      	movs	r0, #0
 8020582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020588:	2e00      	cmp	r6, #0
 802058a:	d0f9      	beq.n	8020580 <__sflush_r+0x24>
 802058c:	2300      	movs	r3, #0
 802058e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020592:	682f      	ldr	r7, [r5, #0]
 8020594:	602b      	str	r3, [r5, #0]
 8020596:	d036      	beq.n	8020606 <__sflush_r+0xaa>
 8020598:	6d20      	ldr	r0, [r4, #80]	; 0x50
 802059a:	89a3      	ldrh	r3, [r4, #12]
 802059c:	075a      	lsls	r2, r3, #29
 802059e:	d505      	bpl.n	80205ac <__sflush_r+0x50>
 80205a0:	6863      	ldr	r3, [r4, #4]
 80205a2:	1ac0      	subs	r0, r0, r3
 80205a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80205a6:	b10b      	cbz	r3, 80205ac <__sflush_r+0x50>
 80205a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80205aa:	1ac0      	subs	r0, r0, r3
 80205ac:	2300      	movs	r3, #0
 80205ae:	4602      	mov	r2, r0
 80205b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80205b2:	69e1      	ldr	r1, [r4, #28]
 80205b4:	4628      	mov	r0, r5
 80205b6:	47b0      	blx	r6
 80205b8:	1c43      	adds	r3, r0, #1
 80205ba:	89a3      	ldrh	r3, [r4, #12]
 80205bc:	d106      	bne.n	80205cc <__sflush_r+0x70>
 80205be:	6829      	ldr	r1, [r5, #0]
 80205c0:	291d      	cmp	r1, #29
 80205c2:	d830      	bhi.n	8020626 <__sflush_r+0xca>
 80205c4:	4a2b      	ldr	r2, [pc, #172]	; (8020674 <__sflush_r+0x118>)
 80205c6:	40ca      	lsrs	r2, r1
 80205c8:	07d6      	lsls	r6, r2, #31
 80205ca:	d52c      	bpl.n	8020626 <__sflush_r+0xca>
 80205cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80205d0:	b21b      	sxth	r3, r3
 80205d2:	2200      	movs	r2, #0
 80205d4:	6062      	str	r2, [r4, #4]
 80205d6:	04d9      	lsls	r1, r3, #19
 80205d8:	6922      	ldr	r2, [r4, #16]
 80205da:	81a3      	strh	r3, [r4, #12]
 80205dc:	6022      	str	r2, [r4, #0]
 80205de:	d504      	bpl.n	80205ea <__sflush_r+0x8e>
 80205e0:	1c42      	adds	r2, r0, #1
 80205e2:	d101      	bne.n	80205e8 <__sflush_r+0x8c>
 80205e4:	682b      	ldr	r3, [r5, #0]
 80205e6:	b903      	cbnz	r3, 80205ea <__sflush_r+0x8e>
 80205e8:	6520      	str	r0, [r4, #80]	; 0x50
 80205ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80205ec:	602f      	str	r7, [r5, #0]
 80205ee:	2900      	cmp	r1, #0
 80205f0:	d0c6      	beq.n	8020580 <__sflush_r+0x24>
 80205f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80205f6:	4299      	cmp	r1, r3
 80205f8:	d002      	beq.n	8020600 <__sflush_r+0xa4>
 80205fa:	4628      	mov	r0, r5
 80205fc:	f7fe fe1c 	bl	801f238 <_free_r>
 8020600:	2000      	movs	r0, #0
 8020602:	6320      	str	r0, [r4, #48]	; 0x30
 8020604:	e7bd      	b.n	8020582 <__sflush_r+0x26>
 8020606:	69e1      	ldr	r1, [r4, #28]
 8020608:	2301      	movs	r3, #1
 802060a:	4628      	mov	r0, r5
 802060c:	47b0      	blx	r6
 802060e:	1c41      	adds	r1, r0, #1
 8020610:	d1c3      	bne.n	802059a <__sflush_r+0x3e>
 8020612:	682b      	ldr	r3, [r5, #0]
 8020614:	2b00      	cmp	r3, #0
 8020616:	d0c0      	beq.n	802059a <__sflush_r+0x3e>
 8020618:	2b1d      	cmp	r3, #29
 802061a:	d001      	beq.n	8020620 <__sflush_r+0xc4>
 802061c:	2b16      	cmp	r3, #22
 802061e:	d101      	bne.n	8020624 <__sflush_r+0xc8>
 8020620:	602f      	str	r7, [r5, #0]
 8020622:	e7ad      	b.n	8020580 <__sflush_r+0x24>
 8020624:	89a3      	ldrh	r3, [r4, #12]
 8020626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802062a:	81a3      	strh	r3, [r4, #12]
 802062c:	e7a9      	b.n	8020582 <__sflush_r+0x26>
 802062e:	690f      	ldr	r7, [r1, #16]
 8020630:	2f00      	cmp	r7, #0
 8020632:	d0a5      	beq.n	8020580 <__sflush_r+0x24>
 8020634:	079b      	lsls	r3, r3, #30
 8020636:	680e      	ldr	r6, [r1, #0]
 8020638:	bf08      	it	eq
 802063a:	694b      	ldreq	r3, [r1, #20]
 802063c:	600f      	str	r7, [r1, #0]
 802063e:	bf18      	it	ne
 8020640:	2300      	movne	r3, #0
 8020642:	eba6 0807 	sub.w	r8, r6, r7
 8020646:	608b      	str	r3, [r1, #8]
 8020648:	f1b8 0f00 	cmp.w	r8, #0
 802064c:	dd98      	ble.n	8020580 <__sflush_r+0x24>
 802064e:	69e1      	ldr	r1, [r4, #28]
 8020650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020652:	4643      	mov	r3, r8
 8020654:	463a      	mov	r2, r7
 8020656:	4628      	mov	r0, r5
 8020658:	47b0      	blx	r6
 802065a:	2800      	cmp	r0, #0
 802065c:	dc06      	bgt.n	802066c <__sflush_r+0x110>
 802065e:	89a3      	ldrh	r3, [r4, #12]
 8020660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020664:	81a3      	strh	r3, [r4, #12]
 8020666:	f04f 30ff 	mov.w	r0, #4294967295
 802066a:	e78a      	b.n	8020582 <__sflush_r+0x26>
 802066c:	4407      	add	r7, r0
 802066e:	eba8 0800 	sub.w	r8, r8, r0
 8020672:	e7e9      	b.n	8020648 <__sflush_r+0xec>
 8020674:	20400001 	.word	0x20400001

08020678 <_fflush_r>:
 8020678:	b538      	push	{r3, r4, r5, lr}
 802067a:	460c      	mov	r4, r1
 802067c:	4605      	mov	r5, r0
 802067e:	b118      	cbz	r0, 8020688 <_fflush_r+0x10>
 8020680:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8020682:	b90b      	cbnz	r3, 8020688 <_fflush_r+0x10>
 8020684:	f000 f864 	bl	8020750 <__sinit>
 8020688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802068c:	b1bb      	cbz	r3, 80206be <_fflush_r+0x46>
 802068e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020690:	07d0      	lsls	r0, r2, #31
 8020692:	d404      	bmi.n	802069e <_fflush_r+0x26>
 8020694:	0599      	lsls	r1, r3, #22
 8020696:	d402      	bmi.n	802069e <_fflush_r+0x26>
 8020698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802069a:	f7fe fe99 	bl	801f3d0 <__retarget_lock_acquire_recursive>
 802069e:	4628      	mov	r0, r5
 80206a0:	4621      	mov	r1, r4
 80206a2:	f7ff ff5b 	bl	802055c <__sflush_r>
 80206a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206a8:	07da      	lsls	r2, r3, #31
 80206aa:	4605      	mov	r5, r0
 80206ac:	d405      	bmi.n	80206ba <_fflush_r+0x42>
 80206ae:	89a3      	ldrh	r3, [r4, #12]
 80206b0:	059b      	lsls	r3, r3, #22
 80206b2:	d402      	bmi.n	80206ba <_fflush_r+0x42>
 80206b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206b6:	f7fe fe8c 	bl	801f3d2 <__retarget_lock_release_recursive>
 80206ba:	4628      	mov	r0, r5
 80206bc:	bd38      	pop	{r3, r4, r5, pc}
 80206be:	461d      	mov	r5, r3
 80206c0:	e7fb      	b.n	80206ba <_fflush_r+0x42>
	...

080206c4 <std>:
 80206c4:	2300      	movs	r3, #0
 80206c6:	b510      	push	{r4, lr}
 80206c8:	4604      	mov	r4, r0
 80206ca:	e9c0 3300 	strd	r3, r3, [r0]
 80206ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80206d2:	6083      	str	r3, [r0, #8]
 80206d4:	8181      	strh	r1, [r0, #12]
 80206d6:	6643      	str	r3, [r0, #100]	; 0x64
 80206d8:	81c2      	strh	r2, [r0, #14]
 80206da:	6183      	str	r3, [r0, #24]
 80206dc:	4619      	mov	r1, r3
 80206de:	2208      	movs	r2, #8
 80206e0:	305c      	adds	r0, #92	; 0x5c
 80206e2:	f7fc fbb9 	bl	801ce58 <memset>
 80206e6:	4b07      	ldr	r3, [pc, #28]	; (8020704 <std+0x40>)
 80206e8:	6223      	str	r3, [r4, #32]
 80206ea:	4b07      	ldr	r3, [pc, #28]	; (8020708 <std+0x44>)
 80206ec:	6263      	str	r3, [r4, #36]	; 0x24
 80206ee:	4b07      	ldr	r3, [pc, #28]	; (802070c <std+0x48>)
 80206f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80206f2:	4b07      	ldr	r3, [pc, #28]	; (8020710 <std+0x4c>)
 80206f4:	61e4      	str	r4, [r4, #28]
 80206f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80206f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80206fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020700:	f7fe be64 	b.w	801f3cc <__retarget_lock_init_recursive>
 8020704:	0801cef9 	.word	0x0801cef9
 8020708:	0801cf1b 	.word	0x0801cf1b
 802070c:	0801cf53 	.word	0x0801cf53
 8020710:	0801cf77 	.word	0x0801cf77

08020714 <_cleanup_r>:
 8020714:	4901      	ldr	r1, [pc, #4]	; (802071c <_cleanup_r+0x8>)
 8020716:	f000 b855 	b.w	80207c4 <_fwalk_reent>
 802071a:	bf00      	nop
 802071c:	080212eb 	.word	0x080212eb

08020720 <__sfp_lock_acquire>:
 8020720:	4801      	ldr	r0, [pc, #4]	; (8020728 <__sfp_lock_acquire+0x8>)
 8020722:	f7fe be55 	b.w	801f3d0 <__retarget_lock_acquire_recursive>
 8020726:	bf00      	nop
 8020728:	2000990c 	.word	0x2000990c

0802072c <__sfp_lock_release>:
 802072c:	4801      	ldr	r0, [pc, #4]	; (8020734 <__sfp_lock_release+0x8>)
 802072e:	f7fe be50 	b.w	801f3d2 <__retarget_lock_release_recursive>
 8020732:	bf00      	nop
 8020734:	2000990c 	.word	0x2000990c

08020738 <__sinit_lock_acquire>:
 8020738:	4801      	ldr	r0, [pc, #4]	; (8020740 <__sinit_lock_acquire+0x8>)
 802073a:	f7fe be49 	b.w	801f3d0 <__retarget_lock_acquire_recursive>
 802073e:	bf00      	nop
 8020740:	20009907 	.word	0x20009907

08020744 <__sinit_lock_release>:
 8020744:	4801      	ldr	r0, [pc, #4]	; (802074c <__sinit_lock_release+0x8>)
 8020746:	f7fe be44 	b.w	801f3d2 <__retarget_lock_release_recursive>
 802074a:	bf00      	nop
 802074c:	20009907 	.word	0x20009907

08020750 <__sinit>:
 8020750:	b510      	push	{r4, lr}
 8020752:	4604      	mov	r4, r0
 8020754:	f7ff fff0 	bl	8020738 <__sinit_lock_acquire>
 8020758:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 802075a:	b11a      	cbz	r2, 8020764 <__sinit+0x14>
 802075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020760:	f7ff bff0 	b.w	8020744 <__sinit_lock_release>
 8020764:	4b0d      	ldr	r3, [pc, #52]	; (802079c <__sinit+0x4c>)
 8020766:	63e3      	str	r3, [r4, #60]	; 0x3c
 8020768:	2303      	movs	r3, #3
 802076a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 802076e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8020772:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8020776:	6860      	ldr	r0, [r4, #4]
 8020778:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 802077c:	2104      	movs	r1, #4
 802077e:	f7ff ffa1 	bl	80206c4 <std>
 8020782:	68a0      	ldr	r0, [r4, #8]
 8020784:	2201      	movs	r2, #1
 8020786:	2109      	movs	r1, #9
 8020788:	f7ff ff9c 	bl	80206c4 <std>
 802078c:	68e0      	ldr	r0, [r4, #12]
 802078e:	2202      	movs	r2, #2
 8020790:	2112      	movs	r1, #18
 8020792:	f7ff ff97 	bl	80206c4 <std>
 8020796:	2301      	movs	r3, #1
 8020798:	63a3      	str	r3, [r4, #56]	; 0x38
 802079a:	e7df      	b.n	802075c <__sinit+0xc>
 802079c:	08020715 	.word	0x08020715

080207a0 <fiprintf>:
 80207a0:	b40e      	push	{r1, r2, r3}
 80207a2:	b503      	push	{r0, r1, lr}
 80207a4:	4601      	mov	r1, r0
 80207a6:	ab03      	add	r3, sp, #12
 80207a8:	4805      	ldr	r0, [pc, #20]	; (80207c0 <fiprintf+0x20>)
 80207aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80207ae:	6800      	ldr	r0, [r0, #0]
 80207b0:	9301      	str	r3, [sp, #4]
 80207b2:	f000 f873 	bl	802089c <_vfiprintf_r>
 80207b6:	b002      	add	sp, #8
 80207b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80207bc:	b003      	add	sp, #12
 80207be:	4770      	bx	lr
 80207c0:	20000624 	.word	0x20000624

080207c4 <_fwalk_reent>:
 80207c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207c8:	4606      	mov	r6, r0
 80207ca:	4688      	mov	r8, r1
 80207cc:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80207d0:	2700      	movs	r7, #0
 80207d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80207d6:	f1b9 0901 	subs.w	r9, r9, #1
 80207da:	d505      	bpl.n	80207e8 <_fwalk_reent+0x24>
 80207dc:	6824      	ldr	r4, [r4, #0]
 80207de:	2c00      	cmp	r4, #0
 80207e0:	d1f7      	bne.n	80207d2 <_fwalk_reent+0xe>
 80207e2:	4638      	mov	r0, r7
 80207e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207e8:	89ab      	ldrh	r3, [r5, #12]
 80207ea:	2b01      	cmp	r3, #1
 80207ec:	d907      	bls.n	80207fe <_fwalk_reent+0x3a>
 80207ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80207f2:	3301      	adds	r3, #1
 80207f4:	d003      	beq.n	80207fe <_fwalk_reent+0x3a>
 80207f6:	4629      	mov	r1, r5
 80207f8:	4630      	mov	r0, r6
 80207fa:	47c0      	blx	r8
 80207fc:	4307      	orrs	r7, r0
 80207fe:	3568      	adds	r5, #104	; 0x68
 8020800:	e7e9      	b.n	80207d6 <_fwalk_reent+0x12>

08020802 <memmove>:
 8020802:	4288      	cmp	r0, r1
 8020804:	b510      	push	{r4, lr}
 8020806:	eb01 0402 	add.w	r4, r1, r2
 802080a:	d902      	bls.n	8020812 <memmove+0x10>
 802080c:	4284      	cmp	r4, r0
 802080e:	4623      	mov	r3, r4
 8020810:	d807      	bhi.n	8020822 <memmove+0x20>
 8020812:	1e43      	subs	r3, r0, #1
 8020814:	42a1      	cmp	r1, r4
 8020816:	d008      	beq.n	802082a <memmove+0x28>
 8020818:	f811 2b01 	ldrb.w	r2, [r1], #1
 802081c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020820:	e7f8      	b.n	8020814 <memmove+0x12>
 8020822:	4402      	add	r2, r0
 8020824:	4601      	mov	r1, r0
 8020826:	428a      	cmp	r2, r1
 8020828:	d100      	bne.n	802082c <memmove+0x2a>
 802082a:	bd10      	pop	{r4, pc}
 802082c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020830:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020834:	e7f7      	b.n	8020826 <memmove+0x24>

08020836 <__sprint_r>:
 8020836:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083a:	6893      	ldr	r3, [r2, #8]
 802083c:	4680      	mov	r8, r0
 802083e:	460f      	mov	r7, r1
 8020840:	4614      	mov	r4, r2
 8020842:	b91b      	cbnz	r3, 802084c <__sprint_r+0x16>
 8020844:	6053      	str	r3, [r2, #4]
 8020846:	4618      	mov	r0, r3
 8020848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802084c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802084e:	049d      	lsls	r5, r3, #18
 8020850:	d520      	bpl.n	8020894 <__sprint_r+0x5e>
 8020852:	6815      	ldr	r5, [r2, #0]
 8020854:	3508      	adds	r5, #8
 8020856:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 802085a:	f04f 0900 	mov.w	r9, #0
 802085e:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8020862:	45ca      	cmp	sl, r9
 8020864:	dc0b      	bgt.n	802087e <__sprint_r+0x48>
 8020866:	68a3      	ldr	r3, [r4, #8]
 8020868:	f026 0003 	bic.w	r0, r6, #3
 802086c:	1a18      	subs	r0, r3, r0
 802086e:	60a0      	str	r0, [r4, #8]
 8020870:	3508      	adds	r5, #8
 8020872:	2800      	cmp	r0, #0
 8020874:	d1ef      	bne.n	8020856 <__sprint_r+0x20>
 8020876:	2300      	movs	r3, #0
 8020878:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802087c:	e7e4      	b.n	8020848 <__sprint_r+0x12>
 802087e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8020882:	463a      	mov	r2, r7
 8020884:	4640      	mov	r0, r8
 8020886:	f000 fdc8 	bl	802141a <_fputwc_r>
 802088a:	1c43      	adds	r3, r0, #1
 802088c:	d0f3      	beq.n	8020876 <__sprint_r+0x40>
 802088e:	f109 0901 	add.w	r9, r9, #1
 8020892:	e7e6      	b.n	8020862 <__sprint_r+0x2c>
 8020894:	f000 fdec 	bl	8021470 <__sfvwrite_r>
 8020898:	e7ed      	b.n	8020876 <__sprint_r+0x40>
	...

0802089c <_vfiprintf_r>:
 802089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208a0:	ed2d 8b02 	vpush	{d8}
 80208a4:	b0b9      	sub	sp, #228	; 0xe4
 80208a6:	460f      	mov	r7, r1
 80208a8:	9201      	str	r2, [sp, #4]
 80208aa:	461d      	mov	r5, r3
 80208ac:	461c      	mov	r4, r3
 80208ae:	4681      	mov	r9, r0
 80208b0:	b118      	cbz	r0, 80208ba <_vfiprintf_r+0x1e>
 80208b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80208b4:	b90b      	cbnz	r3, 80208ba <_vfiprintf_r+0x1e>
 80208b6:	f7ff ff4b 	bl	8020750 <__sinit>
 80208ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80208bc:	07d8      	lsls	r0, r3, #31
 80208be:	d405      	bmi.n	80208cc <_vfiprintf_r+0x30>
 80208c0:	89bb      	ldrh	r3, [r7, #12]
 80208c2:	0599      	lsls	r1, r3, #22
 80208c4:	d402      	bmi.n	80208cc <_vfiprintf_r+0x30>
 80208c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80208c8:	f7fe fd82 	bl	801f3d0 <__retarget_lock_acquire_recursive>
 80208cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80208d0:	049a      	lsls	r2, r3, #18
 80208d2:	d406      	bmi.n	80208e2 <_vfiprintf_r+0x46>
 80208d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80208d8:	81bb      	strh	r3, [r7, #12]
 80208da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80208dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80208e0:	667b      	str	r3, [r7, #100]	; 0x64
 80208e2:	89bb      	ldrh	r3, [r7, #12]
 80208e4:	071e      	lsls	r6, r3, #28
 80208e6:	d501      	bpl.n	80208ec <_vfiprintf_r+0x50>
 80208e8:	693b      	ldr	r3, [r7, #16]
 80208ea:	b9bb      	cbnz	r3, 802091c <_vfiprintf_r+0x80>
 80208ec:	4639      	mov	r1, r7
 80208ee:	4648      	mov	r0, r9
 80208f0:	f000 fc9c 	bl	802122c <__swsetup_r>
 80208f4:	b190      	cbz	r0, 802091c <_vfiprintf_r+0x80>
 80208f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80208f8:	07d8      	lsls	r0, r3, #31
 80208fa:	d508      	bpl.n	802090e <_vfiprintf_r+0x72>
 80208fc:	f04f 33ff 	mov.w	r3, #4294967295
 8020900:	9302      	str	r3, [sp, #8]
 8020902:	9802      	ldr	r0, [sp, #8]
 8020904:	b039      	add	sp, #228	; 0xe4
 8020906:	ecbd 8b02 	vpop	{d8}
 802090a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802090e:	89bb      	ldrh	r3, [r7, #12]
 8020910:	0599      	lsls	r1, r3, #22
 8020912:	d4f3      	bmi.n	80208fc <_vfiprintf_r+0x60>
 8020914:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8020916:	f7fe fd5c 	bl	801f3d2 <__retarget_lock_release_recursive>
 802091a:	e7ef      	b.n	80208fc <_vfiprintf_r+0x60>
 802091c:	89bb      	ldrh	r3, [r7, #12]
 802091e:	f003 021a 	and.w	r2, r3, #26
 8020922:	2a0a      	cmp	r2, #10
 8020924:	d113      	bne.n	802094e <_vfiprintf_r+0xb2>
 8020926:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802092a:	2a00      	cmp	r2, #0
 802092c:	db0f      	blt.n	802094e <_vfiprintf_r+0xb2>
 802092e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8020930:	07d2      	lsls	r2, r2, #31
 8020932:	d404      	bmi.n	802093e <_vfiprintf_r+0xa2>
 8020934:	059e      	lsls	r6, r3, #22
 8020936:	d402      	bmi.n	802093e <_vfiprintf_r+0xa2>
 8020938:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802093a:	f7fe fd4a 	bl	801f3d2 <__retarget_lock_release_recursive>
 802093e:	9a01      	ldr	r2, [sp, #4]
 8020940:	462b      	mov	r3, r5
 8020942:	4639      	mov	r1, r7
 8020944:	4648      	mov	r0, r9
 8020946:	f000 fc31 	bl	80211ac <__sbprintf>
 802094a:	9002      	str	r0, [sp, #8]
 802094c:	e7d9      	b.n	8020902 <_vfiprintf_r+0x66>
 802094e:	2300      	movs	r3, #0
 8020950:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8020954:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8020958:	ae0f      	add	r6, sp, #60	; 0x3c
 802095a:	ee08 3a10 	vmov	s16, r3
 802095e:	960c      	str	r6, [sp, #48]	; 0x30
 8020960:	9307      	str	r3, [sp, #28]
 8020962:	9302      	str	r3, [sp, #8]
 8020964:	9b01      	ldr	r3, [sp, #4]
 8020966:	461d      	mov	r5, r3
 8020968:	f813 2b01 	ldrb.w	r2, [r3], #1
 802096c:	b10a      	cbz	r2, 8020972 <_vfiprintf_r+0xd6>
 802096e:	2a25      	cmp	r2, #37	; 0x25
 8020970:	d1f9      	bne.n	8020966 <_vfiprintf_r+0xca>
 8020972:	9b01      	ldr	r3, [sp, #4]
 8020974:	ebb5 0803 	subs.w	r8, r5, r3
 8020978:	d00d      	beq.n	8020996 <_vfiprintf_r+0xfa>
 802097a:	e9c6 3800 	strd	r3, r8, [r6]
 802097e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020980:	4443      	add	r3, r8
 8020982:	930e      	str	r3, [sp, #56]	; 0x38
 8020984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020986:	3301      	adds	r3, #1
 8020988:	2b07      	cmp	r3, #7
 802098a:	930d      	str	r3, [sp, #52]	; 0x34
 802098c:	dc75      	bgt.n	8020a7a <_vfiprintf_r+0x1de>
 802098e:	3608      	adds	r6, #8
 8020990:	9b02      	ldr	r3, [sp, #8]
 8020992:	4443      	add	r3, r8
 8020994:	9302      	str	r3, [sp, #8]
 8020996:	782b      	ldrb	r3, [r5, #0]
 8020998:	2b00      	cmp	r3, #0
 802099a:	f000 83c8 	beq.w	802112e <_vfiprintf_r+0x892>
 802099e:	2300      	movs	r3, #0
 80209a0:	f04f 31ff 	mov.w	r1, #4294967295
 80209a4:	1c6a      	adds	r2, r5, #1
 80209a6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80209aa:	9100      	str	r1, [sp, #0]
 80209ac:	9303      	str	r3, [sp, #12]
 80209ae:	469a      	mov	sl, r3
 80209b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80209b4:	9201      	str	r2, [sp, #4]
 80209b6:	f1a3 0220 	sub.w	r2, r3, #32
 80209ba:	2a5a      	cmp	r2, #90	; 0x5a
 80209bc:	f200 8310 	bhi.w	8020fe0 <_vfiprintf_r+0x744>
 80209c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80209c4:	030e0099 	.word	0x030e0099
 80209c8:	00a1030e 	.word	0x00a1030e
 80209cc:	030e030e 	.word	0x030e030e
 80209d0:	0080030e 	.word	0x0080030e
 80209d4:	030e030e 	.word	0x030e030e
 80209d8:	00ae00a4 	.word	0x00ae00a4
 80209dc:	00ab030e 	.word	0x00ab030e
 80209e0:	030e00b0 	.word	0x030e00b0
 80209e4:	00ce00cb 	.word	0x00ce00cb
 80209e8:	00ce00ce 	.word	0x00ce00ce
 80209ec:	00ce00ce 	.word	0x00ce00ce
 80209f0:	00ce00ce 	.word	0x00ce00ce
 80209f4:	00ce00ce 	.word	0x00ce00ce
 80209f8:	030e030e 	.word	0x030e030e
 80209fc:	030e030e 	.word	0x030e030e
 8020a00:	030e030e 	.word	0x030e030e
 8020a04:	030e030e 	.word	0x030e030e
 8020a08:	00f8030e 	.word	0x00f8030e
 8020a0c:	030e0106 	.word	0x030e0106
 8020a10:	030e030e 	.word	0x030e030e
 8020a14:	030e030e 	.word	0x030e030e
 8020a18:	030e030e 	.word	0x030e030e
 8020a1c:	030e030e 	.word	0x030e030e
 8020a20:	014d030e 	.word	0x014d030e
 8020a24:	030e030e 	.word	0x030e030e
 8020a28:	0192030e 	.word	0x0192030e
 8020a2c:	0270030e 	.word	0x0270030e
 8020a30:	030e030e 	.word	0x030e030e
 8020a34:	030e028e 	.word	0x030e028e
 8020a38:	030e030e 	.word	0x030e030e
 8020a3c:	030e030e 	.word	0x030e030e
 8020a40:	030e030e 	.word	0x030e030e
 8020a44:	030e030e 	.word	0x030e030e
 8020a48:	00f8030e 	.word	0x00f8030e
 8020a4c:	030e0108 	.word	0x030e0108
 8020a50:	030e030e 	.word	0x030e030e
 8020a54:	010800de 	.word	0x010800de
 8020a58:	030e00f2 	.word	0x030e00f2
 8020a5c:	030e00eb 	.word	0x030e00eb
 8020a60:	014f0130 	.word	0x014f0130
 8020a64:	00f20182 	.word	0x00f20182
 8020a68:	0192030e 	.word	0x0192030e
 8020a6c:	02720097 	.word	0x02720097
 8020a70:	030e030e 	.word	0x030e030e
 8020a74:	030e0065 	.word	0x030e0065
 8020a78:	0097      	.short	0x0097
 8020a7a:	aa0c      	add	r2, sp, #48	; 0x30
 8020a7c:	4639      	mov	r1, r7
 8020a7e:	4648      	mov	r0, r9
 8020a80:	f7ff fed9 	bl	8020836 <__sprint_r>
 8020a84:	2800      	cmp	r0, #0
 8020a86:	f040 8331 	bne.w	80210ec <_vfiprintf_r+0x850>
 8020a8a:	ae0f      	add	r6, sp, #60	; 0x3c
 8020a8c:	e780      	b.n	8020990 <_vfiprintf_r+0xf4>
 8020a8e:	4a95      	ldr	r2, [pc, #596]	; (8020ce4 <_vfiprintf_r+0x448>)
 8020a90:	9205      	str	r2, [sp, #20]
 8020a92:	f01a 0f20 	tst.w	sl, #32
 8020a96:	f000 8225 	beq.w	8020ee4 <_vfiprintf_r+0x648>
 8020a9a:	3407      	adds	r4, #7
 8020a9c:	f024 0b07 	bic.w	fp, r4, #7
 8020aa0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8020aa4:	f01a 0f01 	tst.w	sl, #1
 8020aa8:	d009      	beq.n	8020abe <_vfiprintf_r+0x222>
 8020aaa:	ea54 0205 	orrs.w	r2, r4, r5
 8020aae:	bf1f      	itttt	ne
 8020ab0:	2230      	movne	r2, #48	; 0x30
 8020ab2:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 8020ab6:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 8020aba:	f04a 0a02 	orrne.w	sl, sl, #2
 8020abe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8020ac2:	e10d      	b.n	8020ce0 <_vfiprintf_r+0x444>
 8020ac4:	4648      	mov	r0, r9
 8020ac6:	f7fe fc7d 	bl	801f3c4 <_localeconv_r>
 8020aca:	6843      	ldr	r3, [r0, #4]
 8020acc:	4618      	mov	r0, r3
 8020ace:	ee08 3a10 	vmov	s16, r3
 8020ad2:	f7df fb9f 	bl	8000214 <strlen>
 8020ad6:	9007      	str	r0, [sp, #28]
 8020ad8:	4648      	mov	r0, r9
 8020ada:	f7fe fc73 	bl	801f3c4 <_localeconv_r>
 8020ade:	6883      	ldr	r3, [r0, #8]
 8020ae0:	9306      	str	r3, [sp, #24]
 8020ae2:	9b07      	ldr	r3, [sp, #28]
 8020ae4:	b12b      	cbz	r3, 8020af2 <_vfiprintf_r+0x256>
 8020ae6:	9b06      	ldr	r3, [sp, #24]
 8020ae8:	b11b      	cbz	r3, 8020af2 <_vfiprintf_r+0x256>
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	b10b      	cbz	r3, 8020af2 <_vfiprintf_r+0x256>
 8020aee:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8020af2:	9a01      	ldr	r2, [sp, #4]
 8020af4:	e75c      	b.n	80209b0 <_vfiprintf_r+0x114>
 8020af6:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d1f9      	bne.n	8020af2 <_vfiprintf_r+0x256>
 8020afe:	2320      	movs	r3, #32
 8020b00:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8020b04:	e7f5      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b06:	f04a 0a01 	orr.w	sl, sl, #1
 8020b0a:	e7f2      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b0c:	f854 3b04 	ldr.w	r3, [r4], #4
 8020b10:	9303      	str	r3, [sp, #12]
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	daed      	bge.n	8020af2 <_vfiprintf_r+0x256>
 8020b16:	425b      	negs	r3, r3
 8020b18:	9303      	str	r3, [sp, #12]
 8020b1a:	f04a 0a04 	orr.w	sl, sl, #4
 8020b1e:	e7e8      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b20:	232b      	movs	r3, #43	; 0x2b
 8020b22:	e7ed      	b.n	8020b00 <_vfiprintf_r+0x264>
 8020b24:	9a01      	ldr	r2, [sp, #4]
 8020b26:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8020b2c:	d112      	bne.n	8020b54 <_vfiprintf_r+0x2b8>
 8020b2e:	f854 0b04 	ldr.w	r0, [r4], #4
 8020b32:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8020b36:	e9cd 3200 	strd	r3, r2, [sp]
 8020b3a:	e7da      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b3c:	9b00      	ldr	r3, [sp, #0]
 8020b3e:	200a      	movs	r0, #10
 8020b40:	fb00 1303 	mla	r3, r0, r3, r1
 8020b44:	9300      	str	r3, [sp, #0]
 8020b46:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020b4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8020b4e:	2909      	cmp	r1, #9
 8020b50:	d9f4      	bls.n	8020b3c <_vfiprintf_r+0x2a0>
 8020b52:	e72f      	b.n	80209b4 <_vfiprintf_r+0x118>
 8020b54:	2100      	movs	r1, #0
 8020b56:	9100      	str	r1, [sp, #0]
 8020b58:	e7f7      	b.n	8020b4a <_vfiprintf_r+0x2ae>
 8020b5a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8020b5e:	e7c8      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b60:	2100      	movs	r1, #0
 8020b62:	9a01      	ldr	r2, [sp, #4]
 8020b64:	9103      	str	r1, [sp, #12]
 8020b66:	9903      	ldr	r1, [sp, #12]
 8020b68:	3b30      	subs	r3, #48	; 0x30
 8020b6a:	200a      	movs	r0, #10
 8020b6c:	fb00 3301 	mla	r3, r0, r1, r3
 8020b70:	9303      	str	r3, [sp, #12]
 8020b72:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020b76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8020b7a:	2909      	cmp	r1, #9
 8020b7c:	d9f3      	bls.n	8020b66 <_vfiprintf_r+0x2ca>
 8020b7e:	e719      	b.n	80209b4 <_vfiprintf_r+0x118>
 8020b80:	9b01      	ldr	r3, [sp, #4]
 8020b82:	781b      	ldrb	r3, [r3, #0]
 8020b84:	2b68      	cmp	r3, #104	; 0x68
 8020b86:	bf01      	itttt	eq
 8020b88:	9b01      	ldreq	r3, [sp, #4]
 8020b8a:	3301      	addeq	r3, #1
 8020b8c:	9301      	streq	r3, [sp, #4]
 8020b8e:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8020b92:	bf18      	it	ne
 8020b94:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8020b98:	e7ab      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020b9a:	9b01      	ldr	r3, [sp, #4]
 8020b9c:	781b      	ldrb	r3, [r3, #0]
 8020b9e:	2b6c      	cmp	r3, #108	; 0x6c
 8020ba0:	d105      	bne.n	8020bae <_vfiprintf_r+0x312>
 8020ba2:	9b01      	ldr	r3, [sp, #4]
 8020ba4:	3301      	adds	r3, #1
 8020ba6:	9301      	str	r3, [sp, #4]
 8020ba8:	f04a 0a20 	orr.w	sl, sl, #32
 8020bac:	e7a1      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020bae:	f04a 0a10 	orr.w	sl, sl, #16
 8020bb2:	e79e      	b.n	8020af2 <_vfiprintf_r+0x256>
 8020bb4:	46a3      	mov	fp, r4
 8020bb6:	2100      	movs	r1, #0
 8020bb8:	f85b 3b04 	ldr.w	r3, [fp], #4
 8020bbc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8020bc0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	9300      	str	r3, [sp, #0]
 8020bc8:	460d      	mov	r5, r1
 8020bca:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8020bce:	e0a0      	b.n	8020d12 <_vfiprintf_r+0x476>
 8020bd0:	f04a 0a10 	orr.w	sl, sl, #16
 8020bd4:	f01a 0f20 	tst.w	sl, #32
 8020bd8:	d011      	beq.n	8020bfe <_vfiprintf_r+0x362>
 8020bda:	3407      	adds	r4, #7
 8020bdc:	f024 0b07 	bic.w	fp, r4, #7
 8020be0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8020be4:	2c00      	cmp	r4, #0
 8020be6:	f175 0300 	sbcs.w	r3, r5, #0
 8020bea:	da06      	bge.n	8020bfa <_vfiprintf_r+0x35e>
 8020bec:	4264      	negs	r4, r4
 8020bee:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8020bf2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8020bf6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	e03f      	b.n	8020c7e <_vfiprintf_r+0x3e2>
 8020bfe:	f01a 0f10 	tst.w	sl, #16
 8020c02:	f104 0b04 	add.w	fp, r4, #4
 8020c06:	d002      	beq.n	8020c0e <_vfiprintf_r+0x372>
 8020c08:	6824      	ldr	r4, [r4, #0]
 8020c0a:	17e5      	asrs	r5, r4, #31
 8020c0c:	e7ea      	b.n	8020be4 <_vfiprintf_r+0x348>
 8020c0e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8020c12:	6824      	ldr	r4, [r4, #0]
 8020c14:	d001      	beq.n	8020c1a <_vfiprintf_r+0x37e>
 8020c16:	b224      	sxth	r4, r4
 8020c18:	e7f7      	b.n	8020c0a <_vfiprintf_r+0x36e>
 8020c1a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8020c1e:	bf18      	it	ne
 8020c20:	b264      	sxtbne	r4, r4
 8020c22:	e7f2      	b.n	8020c0a <_vfiprintf_r+0x36e>
 8020c24:	f01a 0f20 	tst.w	sl, #32
 8020c28:	f854 3b04 	ldr.w	r3, [r4], #4
 8020c2c:	d005      	beq.n	8020c3a <_vfiprintf_r+0x39e>
 8020c2e:	9a02      	ldr	r2, [sp, #8]
 8020c30:	4610      	mov	r0, r2
 8020c32:	17d1      	asrs	r1, r2, #31
 8020c34:	e9c3 0100 	strd	r0, r1, [r3]
 8020c38:	e694      	b.n	8020964 <_vfiprintf_r+0xc8>
 8020c3a:	f01a 0f10 	tst.w	sl, #16
 8020c3e:	d002      	beq.n	8020c46 <_vfiprintf_r+0x3aa>
 8020c40:	9a02      	ldr	r2, [sp, #8]
 8020c42:	601a      	str	r2, [r3, #0]
 8020c44:	e68e      	b.n	8020964 <_vfiprintf_r+0xc8>
 8020c46:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8020c4a:	d002      	beq.n	8020c52 <_vfiprintf_r+0x3b6>
 8020c4c:	9a02      	ldr	r2, [sp, #8]
 8020c4e:	801a      	strh	r2, [r3, #0]
 8020c50:	e688      	b.n	8020964 <_vfiprintf_r+0xc8>
 8020c52:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8020c56:	d0f3      	beq.n	8020c40 <_vfiprintf_r+0x3a4>
 8020c58:	9a02      	ldr	r2, [sp, #8]
 8020c5a:	701a      	strb	r2, [r3, #0]
 8020c5c:	e682      	b.n	8020964 <_vfiprintf_r+0xc8>
 8020c5e:	f04a 0a10 	orr.w	sl, sl, #16
 8020c62:	f01a 0f20 	tst.w	sl, #32
 8020c66:	d01d      	beq.n	8020ca4 <_vfiprintf_r+0x408>
 8020c68:	3407      	adds	r4, #7
 8020c6a:	f024 0b07 	bic.w	fp, r4, #7
 8020c6e:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8020c72:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8020c76:	2300      	movs	r3, #0
 8020c78:	2200      	movs	r2, #0
 8020c7a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8020c7e:	9a00      	ldr	r2, [sp, #0]
 8020c80:	3201      	adds	r2, #1
 8020c82:	f000 8261 	beq.w	8021148 <_vfiprintf_r+0x8ac>
 8020c86:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8020c8a:	9204      	str	r2, [sp, #16]
 8020c8c:	ea54 0205 	orrs.w	r2, r4, r5
 8020c90:	f040 8260 	bne.w	8021154 <_vfiprintf_r+0x8b8>
 8020c94:	9a00      	ldr	r2, [sp, #0]
 8020c96:	2a00      	cmp	r2, #0
 8020c98:	f000 8197 	beq.w	8020fca <_vfiprintf_r+0x72e>
 8020c9c:	2b01      	cmp	r3, #1
 8020c9e:	f040 825c 	bne.w	802115a <_vfiprintf_r+0x8be>
 8020ca2:	e135      	b.n	8020f10 <_vfiprintf_r+0x674>
 8020ca4:	f01a 0f10 	tst.w	sl, #16
 8020ca8:	f104 0b04 	add.w	fp, r4, #4
 8020cac:	d001      	beq.n	8020cb2 <_vfiprintf_r+0x416>
 8020cae:	6824      	ldr	r4, [r4, #0]
 8020cb0:	e003      	b.n	8020cba <_vfiprintf_r+0x41e>
 8020cb2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8020cb6:	d002      	beq.n	8020cbe <_vfiprintf_r+0x422>
 8020cb8:	8824      	ldrh	r4, [r4, #0]
 8020cba:	2500      	movs	r5, #0
 8020cbc:	e7d9      	b.n	8020c72 <_vfiprintf_r+0x3d6>
 8020cbe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8020cc2:	d0f4      	beq.n	8020cae <_vfiprintf_r+0x412>
 8020cc4:	7824      	ldrb	r4, [r4, #0]
 8020cc6:	e7f8      	b.n	8020cba <_vfiprintf_r+0x41e>
 8020cc8:	46a3      	mov	fp, r4
 8020cca:	f647 0330 	movw	r3, #30768	; 0x7830
 8020cce:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020cd2:	f85b 4b04 	ldr.w	r4, [fp], #4
 8020cd6:	4b03      	ldr	r3, [pc, #12]	; (8020ce4 <_vfiprintf_r+0x448>)
 8020cd8:	9305      	str	r3, [sp, #20]
 8020cda:	2500      	movs	r5, #0
 8020cdc:	f04a 0a02 	orr.w	sl, sl, #2
 8020ce0:	2302      	movs	r3, #2
 8020ce2:	e7c9      	b.n	8020c78 <_vfiprintf_r+0x3dc>
 8020ce4:	0802cbc0 	.word	0x0802cbc0
 8020ce8:	9b00      	ldr	r3, [sp, #0]
 8020cea:	46a3      	mov	fp, r4
 8020cec:	2500      	movs	r5, #0
 8020cee:	1c5c      	adds	r4, r3, #1
 8020cf0:	f85b 8b04 	ldr.w	r8, [fp], #4
 8020cf4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8020cf8:	f000 80cf 	beq.w	8020e9a <_vfiprintf_r+0x5fe>
 8020cfc:	461a      	mov	r2, r3
 8020cfe:	4629      	mov	r1, r5
 8020d00:	4640      	mov	r0, r8
 8020d02:	f7df fa95 	bl	8000230 <memchr>
 8020d06:	2800      	cmp	r0, #0
 8020d08:	f000 8174 	beq.w	8020ff4 <_vfiprintf_r+0x758>
 8020d0c:	eba0 0308 	sub.w	r3, r0, r8
 8020d10:	9300      	str	r3, [sp, #0]
 8020d12:	9b00      	ldr	r3, [sp, #0]
 8020d14:	42ab      	cmp	r3, r5
 8020d16:	bfb8      	it	lt
 8020d18:	462b      	movlt	r3, r5
 8020d1a:	9304      	str	r3, [sp, #16]
 8020d1c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8020d20:	b113      	cbz	r3, 8020d28 <_vfiprintf_r+0x48c>
 8020d22:	9b04      	ldr	r3, [sp, #16]
 8020d24:	3301      	adds	r3, #1
 8020d26:	9304      	str	r3, [sp, #16]
 8020d28:	f01a 0302 	ands.w	r3, sl, #2
 8020d2c:	9308      	str	r3, [sp, #32]
 8020d2e:	bf1e      	ittt	ne
 8020d30:	9b04      	ldrne	r3, [sp, #16]
 8020d32:	3302      	addne	r3, #2
 8020d34:	9304      	strne	r3, [sp, #16]
 8020d36:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8020d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8020d3c:	d11f      	bne.n	8020d7e <_vfiprintf_r+0x4e2>
 8020d3e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8020d42:	1a9c      	subs	r4, r3, r2
 8020d44:	2c00      	cmp	r4, #0
 8020d46:	dd1a      	ble.n	8020d7e <_vfiprintf_r+0x4e2>
 8020d48:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8020d4c:	48b9      	ldr	r0, [pc, #740]	; (8021034 <_vfiprintf_r+0x798>)
 8020d4e:	6030      	str	r0, [r6, #0]
 8020d50:	2c10      	cmp	r4, #16
 8020d52:	f103 0301 	add.w	r3, r3, #1
 8020d56:	f106 0108 	add.w	r1, r6, #8
 8020d5a:	f300 814d 	bgt.w	8020ff8 <_vfiprintf_r+0x75c>
 8020d5e:	6074      	str	r4, [r6, #4]
 8020d60:	2b07      	cmp	r3, #7
 8020d62:	4414      	add	r4, r2
 8020d64:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8020d68:	f340 8158 	ble.w	802101c <_vfiprintf_r+0x780>
 8020d6c:	aa0c      	add	r2, sp, #48	; 0x30
 8020d6e:	4639      	mov	r1, r7
 8020d70:	4648      	mov	r0, r9
 8020d72:	f7ff fd60 	bl	8020836 <__sprint_r>
 8020d76:	2800      	cmp	r0, #0
 8020d78:	f040 81b8 	bne.w	80210ec <_vfiprintf_r+0x850>
 8020d7c:	ae0f      	add	r6, sp, #60	; 0x3c
 8020d7e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8020d82:	b173      	cbz	r3, 8020da2 <_vfiprintf_r+0x506>
 8020d84:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8020d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d8a:	6032      	str	r2, [r6, #0]
 8020d8c:	2201      	movs	r2, #1
 8020d8e:	6072      	str	r2, [r6, #4]
 8020d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020d92:	3301      	adds	r3, #1
 8020d94:	3201      	adds	r2, #1
 8020d96:	2b07      	cmp	r3, #7
 8020d98:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8020d9c:	f300 8140 	bgt.w	8021020 <_vfiprintf_r+0x784>
 8020da0:	3608      	adds	r6, #8
 8020da2:	9b08      	ldr	r3, [sp, #32]
 8020da4:	b16b      	cbz	r3, 8020dc2 <_vfiprintf_r+0x526>
 8020da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8020da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020daa:	6032      	str	r2, [r6, #0]
 8020dac:	2202      	movs	r2, #2
 8020dae:	6072      	str	r2, [r6, #4]
 8020db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020db2:	3301      	adds	r3, #1
 8020db4:	3202      	adds	r2, #2
 8020db6:	2b07      	cmp	r3, #7
 8020db8:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8020dbc:	f300 8140 	bgt.w	8021040 <_vfiprintf_r+0x7a4>
 8020dc0:	3608      	adds	r6, #8
 8020dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc4:	2b80      	cmp	r3, #128	; 0x80
 8020dc6:	d11f      	bne.n	8020e08 <_vfiprintf_r+0x56c>
 8020dc8:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8020dcc:	1a9c      	subs	r4, r3, r2
 8020dce:	2c00      	cmp	r4, #0
 8020dd0:	dd1a      	ble.n	8020e08 <_vfiprintf_r+0x56c>
 8020dd2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8020dd6:	4898      	ldr	r0, [pc, #608]	; (8021038 <_vfiprintf_r+0x79c>)
 8020dd8:	6030      	str	r0, [r6, #0]
 8020dda:	2c10      	cmp	r4, #16
 8020ddc:	f103 0301 	add.w	r3, r3, #1
 8020de0:	f106 0108 	add.w	r1, r6, #8
 8020de4:	f300 8135 	bgt.w	8021052 <_vfiprintf_r+0x7b6>
 8020de8:	6074      	str	r4, [r6, #4]
 8020dea:	2b07      	cmp	r3, #7
 8020dec:	4414      	add	r4, r2
 8020dee:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8020df2:	f340 8140 	ble.w	8021076 <_vfiprintf_r+0x7da>
 8020df6:	aa0c      	add	r2, sp, #48	; 0x30
 8020df8:	4639      	mov	r1, r7
 8020dfa:	4648      	mov	r0, r9
 8020dfc:	f7ff fd1b 	bl	8020836 <__sprint_r>
 8020e00:	2800      	cmp	r0, #0
 8020e02:	f040 8173 	bne.w	80210ec <_vfiprintf_r+0x850>
 8020e06:	ae0f      	add	r6, sp, #60	; 0x3c
 8020e08:	9b00      	ldr	r3, [sp, #0]
 8020e0a:	1aec      	subs	r4, r5, r3
 8020e0c:	2c00      	cmp	r4, #0
 8020e0e:	dd1a      	ble.n	8020e46 <_vfiprintf_r+0x5aa>
 8020e10:	4d89      	ldr	r5, [pc, #548]	; (8021038 <_vfiprintf_r+0x79c>)
 8020e12:	6035      	str	r5, [r6, #0]
 8020e14:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8020e18:	2c10      	cmp	r4, #16
 8020e1a:	f103 0301 	add.w	r3, r3, #1
 8020e1e:	f106 0208 	add.w	r2, r6, #8
 8020e22:	f300 812a 	bgt.w	802107a <_vfiprintf_r+0x7de>
 8020e26:	6074      	str	r4, [r6, #4]
 8020e28:	2b07      	cmp	r3, #7
 8020e2a:	440c      	add	r4, r1
 8020e2c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8020e30:	f340 8134 	ble.w	802109c <_vfiprintf_r+0x800>
 8020e34:	aa0c      	add	r2, sp, #48	; 0x30
 8020e36:	4639      	mov	r1, r7
 8020e38:	4648      	mov	r0, r9
 8020e3a:	f7ff fcfc 	bl	8020836 <__sprint_r>
 8020e3e:	2800      	cmp	r0, #0
 8020e40:	f040 8154 	bne.w	80210ec <_vfiprintf_r+0x850>
 8020e44:	ae0f      	add	r6, sp, #60	; 0x3c
 8020e46:	9b00      	ldr	r3, [sp, #0]
 8020e48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020e4a:	6073      	str	r3, [r6, #4]
 8020e4c:	4418      	add	r0, r3
 8020e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e50:	f8c6 8000 	str.w	r8, [r6]
 8020e54:	3301      	adds	r3, #1
 8020e56:	2b07      	cmp	r3, #7
 8020e58:	900e      	str	r0, [sp, #56]	; 0x38
 8020e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8020e5c:	f300 8120 	bgt.w	80210a0 <_vfiprintf_r+0x804>
 8020e60:	f106 0308 	add.w	r3, r6, #8
 8020e64:	f01a 0f04 	tst.w	sl, #4
 8020e68:	f040 8122 	bne.w	80210b0 <_vfiprintf_r+0x814>
 8020e6c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020e70:	9904      	ldr	r1, [sp, #16]
 8020e72:	428a      	cmp	r2, r1
 8020e74:	bfac      	ite	ge
 8020e76:	189b      	addge	r3, r3, r2
 8020e78:	185b      	addlt	r3, r3, r1
 8020e7a:	9302      	str	r3, [sp, #8]
 8020e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e7e:	b13b      	cbz	r3, 8020e90 <_vfiprintf_r+0x5f4>
 8020e80:	aa0c      	add	r2, sp, #48	; 0x30
 8020e82:	4639      	mov	r1, r7
 8020e84:	4648      	mov	r0, r9
 8020e86:	f7ff fcd6 	bl	8020836 <__sprint_r>
 8020e8a:	2800      	cmp	r0, #0
 8020e8c:	f040 812e 	bne.w	80210ec <_vfiprintf_r+0x850>
 8020e90:	2300      	movs	r3, #0
 8020e92:	930d      	str	r3, [sp, #52]	; 0x34
 8020e94:	465c      	mov	r4, fp
 8020e96:	ae0f      	add	r6, sp, #60	; 0x3c
 8020e98:	e564      	b.n	8020964 <_vfiprintf_r+0xc8>
 8020e9a:	4640      	mov	r0, r8
 8020e9c:	f7df f9ba 	bl	8000214 <strlen>
 8020ea0:	9000      	str	r0, [sp, #0]
 8020ea2:	e736      	b.n	8020d12 <_vfiprintf_r+0x476>
 8020ea4:	f04a 0a10 	orr.w	sl, sl, #16
 8020ea8:	f01a 0f20 	tst.w	sl, #32
 8020eac:	d006      	beq.n	8020ebc <_vfiprintf_r+0x620>
 8020eae:	3407      	adds	r4, #7
 8020eb0:	f024 0b07 	bic.w	fp, r4, #7
 8020eb4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8020eb8:	2301      	movs	r3, #1
 8020eba:	e6dd      	b.n	8020c78 <_vfiprintf_r+0x3dc>
 8020ebc:	f01a 0f10 	tst.w	sl, #16
 8020ec0:	f104 0b04 	add.w	fp, r4, #4
 8020ec4:	d001      	beq.n	8020eca <_vfiprintf_r+0x62e>
 8020ec6:	6824      	ldr	r4, [r4, #0]
 8020ec8:	e003      	b.n	8020ed2 <_vfiprintf_r+0x636>
 8020eca:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8020ece:	d002      	beq.n	8020ed6 <_vfiprintf_r+0x63a>
 8020ed0:	8824      	ldrh	r4, [r4, #0]
 8020ed2:	2500      	movs	r5, #0
 8020ed4:	e7f0      	b.n	8020eb8 <_vfiprintf_r+0x61c>
 8020ed6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8020eda:	d0f4      	beq.n	8020ec6 <_vfiprintf_r+0x62a>
 8020edc:	7824      	ldrb	r4, [r4, #0]
 8020ede:	e7f8      	b.n	8020ed2 <_vfiprintf_r+0x636>
 8020ee0:	4a56      	ldr	r2, [pc, #344]	; (802103c <_vfiprintf_r+0x7a0>)
 8020ee2:	e5d5      	b.n	8020a90 <_vfiprintf_r+0x1f4>
 8020ee4:	f01a 0f10 	tst.w	sl, #16
 8020ee8:	f104 0b04 	add.w	fp, r4, #4
 8020eec:	d001      	beq.n	8020ef2 <_vfiprintf_r+0x656>
 8020eee:	6824      	ldr	r4, [r4, #0]
 8020ef0:	e003      	b.n	8020efa <_vfiprintf_r+0x65e>
 8020ef2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8020ef6:	d002      	beq.n	8020efe <_vfiprintf_r+0x662>
 8020ef8:	8824      	ldrh	r4, [r4, #0]
 8020efa:	2500      	movs	r5, #0
 8020efc:	e5d2      	b.n	8020aa4 <_vfiprintf_r+0x208>
 8020efe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8020f02:	d0f4      	beq.n	8020eee <_vfiprintf_r+0x652>
 8020f04:	7824      	ldrb	r4, [r4, #0]
 8020f06:	e7f8      	b.n	8020efa <_vfiprintf_r+0x65e>
 8020f08:	2d00      	cmp	r5, #0
 8020f0a:	bf08      	it	eq
 8020f0c:	2c0a      	cmpeq	r4, #10
 8020f0e:	d205      	bcs.n	8020f1c <_vfiprintf_r+0x680>
 8020f10:	3430      	adds	r4, #48	; 0x30
 8020f12:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8020f16:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8020f1a:	e13c      	b.n	8021196 <_vfiprintf_r+0x8fa>
 8020f1c:	ab38      	add	r3, sp, #224	; 0xe0
 8020f1e:	9308      	str	r3, [sp, #32]
 8020f20:	9b04      	ldr	r3, [sp, #16]
 8020f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020f26:	f04f 0a00 	mov.w	sl, #0
 8020f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f2c:	9b08      	ldr	r3, [sp, #32]
 8020f2e:	220a      	movs	r2, #10
 8020f30:	f103 38ff 	add.w	r8, r3, #4294967295
 8020f34:	4620      	mov	r0, r4
 8020f36:	2300      	movs	r3, #0
 8020f38:	4629      	mov	r1, r5
 8020f3a:	f7df fe5d 	bl	8000bf8 <__aeabi_uldivmod>
 8020f3e:	9b08      	ldr	r3, [sp, #32]
 8020f40:	3230      	adds	r2, #48	; 0x30
 8020f42:	f803 2c01 	strb.w	r2, [r3, #-1]
 8020f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f48:	f10a 0a01 	add.w	sl, sl, #1
 8020f4c:	b1db      	cbz	r3, 8020f86 <_vfiprintf_r+0x6ea>
 8020f4e:	9b06      	ldr	r3, [sp, #24]
 8020f50:	781b      	ldrb	r3, [r3, #0]
 8020f52:	4553      	cmp	r3, sl
 8020f54:	d117      	bne.n	8020f86 <_vfiprintf_r+0x6ea>
 8020f56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020f5a:	d014      	beq.n	8020f86 <_vfiprintf_r+0x6ea>
 8020f5c:	2d00      	cmp	r5, #0
 8020f5e:	bf08      	it	eq
 8020f60:	2c0a      	cmpeq	r4, #10
 8020f62:	d310      	bcc.n	8020f86 <_vfiprintf_r+0x6ea>
 8020f64:	9b07      	ldr	r3, [sp, #28]
 8020f66:	eba8 0803 	sub.w	r8, r8, r3
 8020f6a:	461a      	mov	r2, r3
 8020f6c:	ee18 1a10 	vmov	r1, s16
 8020f70:	4640      	mov	r0, r8
 8020f72:	f7fc f82b 	bl	801cfcc <strncpy>
 8020f76:	9b06      	ldr	r3, [sp, #24]
 8020f78:	785b      	ldrb	r3, [r3, #1]
 8020f7a:	b1a3      	cbz	r3, 8020fa6 <_vfiprintf_r+0x70a>
 8020f7c:	9b06      	ldr	r3, [sp, #24]
 8020f7e:	3301      	adds	r3, #1
 8020f80:	9306      	str	r3, [sp, #24]
 8020f82:	f04f 0a00 	mov.w	sl, #0
 8020f86:	220a      	movs	r2, #10
 8020f88:	2300      	movs	r3, #0
 8020f8a:	4620      	mov	r0, r4
 8020f8c:	4629      	mov	r1, r5
 8020f8e:	f7df fe33 	bl	8000bf8 <__aeabi_uldivmod>
 8020f92:	2d00      	cmp	r5, #0
 8020f94:	bf08      	it	eq
 8020f96:	2c0a      	cmpeq	r4, #10
 8020f98:	f0c0 80fd 	bcc.w	8021196 <_vfiprintf_r+0x8fa>
 8020f9c:	4604      	mov	r4, r0
 8020f9e:	460d      	mov	r5, r1
 8020fa0:	f8cd 8020 	str.w	r8, [sp, #32]
 8020fa4:	e7c2      	b.n	8020f2c <_vfiprintf_r+0x690>
 8020fa6:	469a      	mov	sl, r3
 8020fa8:	e7ed      	b.n	8020f86 <_vfiprintf_r+0x6ea>
 8020faa:	9a05      	ldr	r2, [sp, #20]
 8020fac:	f004 030f 	and.w	r3, r4, #15
 8020fb0:	5cd3      	ldrb	r3, [r2, r3]
 8020fb2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020fb6:	0923      	lsrs	r3, r4, #4
 8020fb8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8020fbc:	092a      	lsrs	r2, r5, #4
 8020fbe:	461c      	mov	r4, r3
 8020fc0:	4615      	mov	r5, r2
 8020fc2:	ea54 0305 	orrs.w	r3, r4, r5
 8020fc6:	d1f0      	bne.n	8020faa <_vfiprintf_r+0x70e>
 8020fc8:	e0e5      	b.n	8021196 <_vfiprintf_r+0x8fa>
 8020fca:	b933      	cbnz	r3, 8020fda <_vfiprintf_r+0x73e>
 8020fcc:	f01a 0f01 	tst.w	sl, #1
 8020fd0:	d003      	beq.n	8020fda <_vfiprintf_r+0x73e>
 8020fd2:	2330      	movs	r3, #48	; 0x30
 8020fd4:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8020fd8:	e79d      	b.n	8020f16 <_vfiprintf_r+0x67a>
 8020fda:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8020fde:	e0da      	b.n	8021196 <_vfiprintf_r+0x8fa>
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	f000 80a4 	beq.w	802112e <_vfiprintf_r+0x892>
 8020fe6:	2100      	movs	r1, #0
 8020fe8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8020fec:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8020ff0:	46a3      	mov	fp, r4
 8020ff2:	e5e7      	b.n	8020bc4 <_vfiprintf_r+0x328>
 8020ff4:	4605      	mov	r5, r0
 8020ff6:	e68c      	b.n	8020d12 <_vfiprintf_r+0x476>
 8020ff8:	2010      	movs	r0, #16
 8020ffa:	4402      	add	r2, r0
 8020ffc:	2b07      	cmp	r3, #7
 8020ffe:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8021002:	6070      	str	r0, [r6, #4]
 8021004:	dd07      	ble.n	8021016 <_vfiprintf_r+0x77a>
 8021006:	aa0c      	add	r2, sp, #48	; 0x30
 8021008:	4639      	mov	r1, r7
 802100a:	4648      	mov	r0, r9
 802100c:	f7ff fc13 	bl	8020836 <__sprint_r>
 8021010:	2800      	cmp	r0, #0
 8021012:	d16b      	bne.n	80210ec <_vfiprintf_r+0x850>
 8021014:	a90f      	add	r1, sp, #60	; 0x3c
 8021016:	3c10      	subs	r4, #16
 8021018:	460e      	mov	r6, r1
 802101a:	e695      	b.n	8020d48 <_vfiprintf_r+0x4ac>
 802101c:	460e      	mov	r6, r1
 802101e:	e6ae      	b.n	8020d7e <_vfiprintf_r+0x4e2>
 8021020:	aa0c      	add	r2, sp, #48	; 0x30
 8021022:	4639      	mov	r1, r7
 8021024:	4648      	mov	r0, r9
 8021026:	f7ff fc06 	bl	8020836 <__sprint_r>
 802102a:	2800      	cmp	r0, #0
 802102c:	d15e      	bne.n	80210ec <_vfiprintf_r+0x850>
 802102e:	ae0f      	add	r6, sp, #60	; 0x3c
 8021030:	e6b7      	b.n	8020da2 <_vfiprintf_r+0x506>
 8021032:	bf00      	nop
 8021034:	0802cf28 	.word	0x0802cf28
 8021038:	0802cf38 	.word	0x0802cf38
 802103c:	0802cbd1 	.word	0x0802cbd1
 8021040:	aa0c      	add	r2, sp, #48	; 0x30
 8021042:	4639      	mov	r1, r7
 8021044:	4648      	mov	r0, r9
 8021046:	f7ff fbf6 	bl	8020836 <__sprint_r>
 802104a:	2800      	cmp	r0, #0
 802104c:	d14e      	bne.n	80210ec <_vfiprintf_r+0x850>
 802104e:	ae0f      	add	r6, sp, #60	; 0x3c
 8021050:	e6b7      	b.n	8020dc2 <_vfiprintf_r+0x526>
 8021052:	2010      	movs	r0, #16
 8021054:	4402      	add	r2, r0
 8021056:	2b07      	cmp	r3, #7
 8021058:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 802105c:	6070      	str	r0, [r6, #4]
 802105e:	dd07      	ble.n	8021070 <_vfiprintf_r+0x7d4>
 8021060:	aa0c      	add	r2, sp, #48	; 0x30
 8021062:	4639      	mov	r1, r7
 8021064:	4648      	mov	r0, r9
 8021066:	f7ff fbe6 	bl	8020836 <__sprint_r>
 802106a:	2800      	cmp	r0, #0
 802106c:	d13e      	bne.n	80210ec <_vfiprintf_r+0x850>
 802106e:	a90f      	add	r1, sp, #60	; 0x3c
 8021070:	3c10      	subs	r4, #16
 8021072:	460e      	mov	r6, r1
 8021074:	e6ad      	b.n	8020dd2 <_vfiprintf_r+0x536>
 8021076:	460e      	mov	r6, r1
 8021078:	e6c6      	b.n	8020e08 <_vfiprintf_r+0x56c>
 802107a:	2010      	movs	r0, #16
 802107c:	4401      	add	r1, r0
 802107e:	2b07      	cmp	r3, #7
 8021080:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8021084:	6070      	str	r0, [r6, #4]
 8021086:	dd06      	ble.n	8021096 <_vfiprintf_r+0x7fa>
 8021088:	aa0c      	add	r2, sp, #48	; 0x30
 802108a:	4639      	mov	r1, r7
 802108c:	4648      	mov	r0, r9
 802108e:	f7ff fbd2 	bl	8020836 <__sprint_r>
 8021092:	bb58      	cbnz	r0, 80210ec <_vfiprintf_r+0x850>
 8021094:	aa0f      	add	r2, sp, #60	; 0x3c
 8021096:	3c10      	subs	r4, #16
 8021098:	4616      	mov	r6, r2
 802109a:	e6ba      	b.n	8020e12 <_vfiprintf_r+0x576>
 802109c:	4616      	mov	r6, r2
 802109e:	e6d2      	b.n	8020e46 <_vfiprintf_r+0x5aa>
 80210a0:	aa0c      	add	r2, sp, #48	; 0x30
 80210a2:	4639      	mov	r1, r7
 80210a4:	4648      	mov	r0, r9
 80210a6:	f7ff fbc6 	bl	8020836 <__sprint_r>
 80210aa:	b9f8      	cbnz	r0, 80210ec <_vfiprintf_r+0x850>
 80210ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80210ae:	e6d9      	b.n	8020e64 <_vfiprintf_r+0x5c8>
 80210b0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80210b4:	1a54      	subs	r4, r2, r1
 80210b6:	2c00      	cmp	r4, #0
 80210b8:	f77f aed8 	ble.w	8020e6c <_vfiprintf_r+0x5d0>
 80210bc:	4d3a      	ldr	r5, [pc, #232]	; (80211a8 <_vfiprintf_r+0x90c>)
 80210be:	2610      	movs	r6, #16
 80210c0:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80210c4:	2c10      	cmp	r4, #16
 80210c6:	f102 0201 	add.w	r2, r2, #1
 80210ca:	601d      	str	r5, [r3, #0]
 80210cc:	dc1d      	bgt.n	802110a <_vfiprintf_r+0x86e>
 80210ce:	605c      	str	r4, [r3, #4]
 80210d0:	2a07      	cmp	r2, #7
 80210d2:	440c      	add	r4, r1
 80210d4:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80210d8:	f77f aec8 	ble.w	8020e6c <_vfiprintf_r+0x5d0>
 80210dc:	aa0c      	add	r2, sp, #48	; 0x30
 80210de:	4639      	mov	r1, r7
 80210e0:	4648      	mov	r0, r9
 80210e2:	f7ff fba8 	bl	8020836 <__sprint_r>
 80210e6:	2800      	cmp	r0, #0
 80210e8:	f43f aec0 	beq.w	8020e6c <_vfiprintf_r+0x5d0>
 80210ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80210ee:	07d9      	lsls	r1, r3, #31
 80210f0:	d405      	bmi.n	80210fe <_vfiprintf_r+0x862>
 80210f2:	89bb      	ldrh	r3, [r7, #12]
 80210f4:	059a      	lsls	r2, r3, #22
 80210f6:	d402      	bmi.n	80210fe <_vfiprintf_r+0x862>
 80210f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80210fa:	f7fe f96a 	bl	801f3d2 <__retarget_lock_release_recursive>
 80210fe:	89bb      	ldrh	r3, [r7, #12]
 8021100:	065b      	lsls	r3, r3, #25
 8021102:	f57f abfe 	bpl.w	8020902 <_vfiprintf_r+0x66>
 8021106:	f7ff bbf9 	b.w	80208fc <_vfiprintf_r+0x60>
 802110a:	3110      	adds	r1, #16
 802110c:	2a07      	cmp	r2, #7
 802110e:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8021112:	605e      	str	r6, [r3, #4]
 8021114:	dc02      	bgt.n	802111c <_vfiprintf_r+0x880>
 8021116:	3308      	adds	r3, #8
 8021118:	3c10      	subs	r4, #16
 802111a:	e7d1      	b.n	80210c0 <_vfiprintf_r+0x824>
 802111c:	aa0c      	add	r2, sp, #48	; 0x30
 802111e:	4639      	mov	r1, r7
 8021120:	4648      	mov	r0, r9
 8021122:	f7ff fb88 	bl	8020836 <__sprint_r>
 8021126:	2800      	cmp	r0, #0
 8021128:	d1e0      	bne.n	80210ec <_vfiprintf_r+0x850>
 802112a:	ab0f      	add	r3, sp, #60	; 0x3c
 802112c:	e7f4      	b.n	8021118 <_vfiprintf_r+0x87c>
 802112e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021130:	b913      	cbnz	r3, 8021138 <_vfiprintf_r+0x89c>
 8021132:	2300      	movs	r3, #0
 8021134:	930d      	str	r3, [sp, #52]	; 0x34
 8021136:	e7d9      	b.n	80210ec <_vfiprintf_r+0x850>
 8021138:	aa0c      	add	r2, sp, #48	; 0x30
 802113a:	4639      	mov	r1, r7
 802113c:	4648      	mov	r0, r9
 802113e:	f7ff fb7a 	bl	8020836 <__sprint_r>
 8021142:	2800      	cmp	r0, #0
 8021144:	d0f5      	beq.n	8021132 <_vfiprintf_r+0x896>
 8021146:	e7d1      	b.n	80210ec <_vfiprintf_r+0x850>
 8021148:	ea54 0205 	orrs.w	r2, r4, r5
 802114c:	f8cd a010 	str.w	sl, [sp, #16]
 8021150:	f43f ada4 	beq.w	8020c9c <_vfiprintf_r+0x400>
 8021154:	2b01      	cmp	r3, #1
 8021156:	f43f aed7 	beq.w	8020f08 <_vfiprintf_r+0x66c>
 802115a:	2b02      	cmp	r3, #2
 802115c:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8021160:	f43f af23 	beq.w	8020faa <_vfiprintf_r+0x70e>
 8021164:	08e2      	lsrs	r2, r4, #3
 8021166:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 802116a:	08e8      	lsrs	r0, r5, #3
 802116c:	f004 0307 	and.w	r3, r4, #7
 8021170:	4605      	mov	r5, r0
 8021172:	4614      	mov	r4, r2
 8021174:	3330      	adds	r3, #48	; 0x30
 8021176:	ea54 0205 	orrs.w	r2, r4, r5
 802117a:	4641      	mov	r1, r8
 802117c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8021180:	d1f0      	bne.n	8021164 <_vfiprintf_r+0x8c8>
 8021182:	9a04      	ldr	r2, [sp, #16]
 8021184:	07d0      	lsls	r0, r2, #31
 8021186:	d506      	bpl.n	8021196 <_vfiprintf_r+0x8fa>
 8021188:	2b30      	cmp	r3, #48	; 0x30
 802118a:	d004      	beq.n	8021196 <_vfiprintf_r+0x8fa>
 802118c:	2330      	movs	r3, #48	; 0x30
 802118e:	f808 3c01 	strb.w	r3, [r8, #-1]
 8021192:	f1a1 0802 	sub.w	r8, r1, #2
 8021196:	ab38      	add	r3, sp, #224	; 0xe0
 8021198:	eba3 0308 	sub.w	r3, r3, r8
 802119c:	9d00      	ldr	r5, [sp, #0]
 802119e:	f8dd a010 	ldr.w	sl, [sp, #16]
 80211a2:	9300      	str	r3, [sp, #0]
 80211a4:	e5b5      	b.n	8020d12 <_vfiprintf_r+0x476>
 80211a6:	bf00      	nop
 80211a8:	0802cf28 	.word	0x0802cf28

080211ac <__sbprintf>:
 80211ac:	b570      	push	{r4, r5, r6, lr}
 80211ae:	460c      	mov	r4, r1
 80211b0:	8989      	ldrh	r1, [r1, #12]
 80211b2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80211b6:	f021 0102 	bic.w	r1, r1, #2
 80211ba:	f8ad 1014 	strh.w	r1, [sp, #20]
 80211be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80211c0:	911b      	str	r1, [sp, #108]	; 0x6c
 80211c2:	89e1      	ldrh	r1, [r4, #14]
 80211c4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80211c8:	69e1      	ldr	r1, [r4, #28]
 80211ca:	9109      	str	r1, [sp, #36]	; 0x24
 80211cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80211ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80211d0:	a91c      	add	r1, sp, #112	; 0x70
 80211d2:	9102      	str	r1, [sp, #8]
 80211d4:	9106      	str	r1, [sp, #24]
 80211d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80211da:	4606      	mov	r6, r0
 80211dc:	9104      	str	r1, [sp, #16]
 80211de:	9107      	str	r1, [sp, #28]
 80211e0:	a818      	add	r0, sp, #96	; 0x60
 80211e2:	2100      	movs	r1, #0
 80211e4:	e9cd 3200 	strd	r3, r2, [sp]
 80211e8:	9108      	str	r1, [sp, #32]
 80211ea:	f7fe f8ef 	bl	801f3cc <__retarget_lock_init_recursive>
 80211ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80211f2:	a902      	add	r1, sp, #8
 80211f4:	4630      	mov	r0, r6
 80211f6:	f7ff fb51 	bl	802089c <_vfiprintf_r>
 80211fa:	1e05      	subs	r5, r0, #0
 80211fc:	db07      	blt.n	802120e <__sbprintf+0x62>
 80211fe:	a902      	add	r1, sp, #8
 8021200:	4630      	mov	r0, r6
 8021202:	f7ff fa39 	bl	8020678 <_fflush_r>
 8021206:	2800      	cmp	r0, #0
 8021208:	bf18      	it	ne
 802120a:	f04f 35ff 	movne.w	r5, #4294967295
 802120e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8021212:	9818      	ldr	r0, [sp, #96]	; 0x60
 8021214:	065b      	lsls	r3, r3, #25
 8021216:	bf42      	ittt	mi
 8021218:	89a3      	ldrhmi	r3, [r4, #12]
 802121a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 802121e:	81a3      	strhmi	r3, [r4, #12]
 8021220:	f7fe f8d5 	bl	801f3ce <__retarget_lock_close_recursive>
 8021224:	4628      	mov	r0, r5
 8021226:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802122a:	bd70      	pop	{r4, r5, r6, pc}

0802122c <__swsetup_r>:
 802122c:	b538      	push	{r3, r4, r5, lr}
 802122e:	4b2a      	ldr	r3, [pc, #168]	; (80212d8 <__swsetup_r+0xac>)
 8021230:	4605      	mov	r5, r0
 8021232:	6818      	ldr	r0, [r3, #0]
 8021234:	460c      	mov	r4, r1
 8021236:	b118      	cbz	r0, 8021240 <__swsetup_r+0x14>
 8021238:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802123a:	b90b      	cbnz	r3, 8021240 <__swsetup_r+0x14>
 802123c:	f7ff fa88 	bl	8020750 <__sinit>
 8021240:	89a3      	ldrh	r3, [r4, #12]
 8021242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021246:	0718      	lsls	r0, r3, #28
 8021248:	d422      	bmi.n	8021290 <__swsetup_r+0x64>
 802124a:	06d9      	lsls	r1, r3, #27
 802124c:	d407      	bmi.n	802125e <__swsetup_r+0x32>
 802124e:	2309      	movs	r3, #9
 8021250:	602b      	str	r3, [r5, #0]
 8021252:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021256:	81a3      	strh	r3, [r4, #12]
 8021258:	f04f 30ff 	mov.w	r0, #4294967295
 802125c:	e034      	b.n	80212c8 <__swsetup_r+0x9c>
 802125e:	0758      	lsls	r0, r3, #29
 8021260:	d512      	bpl.n	8021288 <__swsetup_r+0x5c>
 8021262:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021264:	b141      	cbz	r1, 8021278 <__swsetup_r+0x4c>
 8021266:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802126a:	4299      	cmp	r1, r3
 802126c:	d002      	beq.n	8021274 <__swsetup_r+0x48>
 802126e:	4628      	mov	r0, r5
 8021270:	f7fd ffe2 	bl	801f238 <_free_r>
 8021274:	2300      	movs	r3, #0
 8021276:	6323      	str	r3, [r4, #48]	; 0x30
 8021278:	89a3      	ldrh	r3, [r4, #12]
 802127a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802127e:	81a3      	strh	r3, [r4, #12]
 8021280:	2300      	movs	r3, #0
 8021282:	6063      	str	r3, [r4, #4]
 8021284:	6923      	ldr	r3, [r4, #16]
 8021286:	6023      	str	r3, [r4, #0]
 8021288:	89a3      	ldrh	r3, [r4, #12]
 802128a:	f043 0308 	orr.w	r3, r3, #8
 802128e:	81a3      	strh	r3, [r4, #12]
 8021290:	6923      	ldr	r3, [r4, #16]
 8021292:	b94b      	cbnz	r3, 80212a8 <__swsetup_r+0x7c>
 8021294:	89a3      	ldrh	r3, [r4, #12]
 8021296:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802129a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802129e:	d003      	beq.n	80212a8 <__swsetup_r+0x7c>
 80212a0:	4621      	mov	r1, r4
 80212a2:	4628      	mov	r0, r5
 80212a4:	f000 fa5a 	bl	802175c <__smakebuf_r>
 80212a8:	89a0      	ldrh	r0, [r4, #12]
 80212aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80212ae:	f010 0301 	ands.w	r3, r0, #1
 80212b2:	d00a      	beq.n	80212ca <__swsetup_r+0x9e>
 80212b4:	2300      	movs	r3, #0
 80212b6:	60a3      	str	r3, [r4, #8]
 80212b8:	6963      	ldr	r3, [r4, #20]
 80212ba:	425b      	negs	r3, r3
 80212bc:	61a3      	str	r3, [r4, #24]
 80212be:	6923      	ldr	r3, [r4, #16]
 80212c0:	b943      	cbnz	r3, 80212d4 <__swsetup_r+0xa8>
 80212c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80212c6:	d1c4      	bne.n	8021252 <__swsetup_r+0x26>
 80212c8:	bd38      	pop	{r3, r4, r5, pc}
 80212ca:	0781      	lsls	r1, r0, #30
 80212cc:	bf58      	it	pl
 80212ce:	6963      	ldrpl	r3, [r4, #20]
 80212d0:	60a3      	str	r3, [r4, #8]
 80212d2:	e7f4      	b.n	80212be <__swsetup_r+0x92>
 80212d4:	2000      	movs	r0, #0
 80212d6:	e7f7      	b.n	80212c8 <__swsetup_r+0x9c>
 80212d8:	20000624 	.word	0x20000624

080212dc <abort>:
 80212dc:	b508      	push	{r3, lr}
 80212de:	2006      	movs	r0, #6
 80212e0:	f000 faa6 	bl	8021830 <raise>
 80212e4:	2001      	movs	r0, #1
 80212e6:	f7e0 f85b 	bl	80013a0 <_exit>

080212ea <_fclose_r>:
 80212ea:	b570      	push	{r4, r5, r6, lr}
 80212ec:	4606      	mov	r6, r0
 80212ee:	460c      	mov	r4, r1
 80212f0:	b911      	cbnz	r1, 80212f8 <_fclose_r+0xe>
 80212f2:	2500      	movs	r5, #0
 80212f4:	4628      	mov	r0, r5
 80212f6:	bd70      	pop	{r4, r5, r6, pc}
 80212f8:	b118      	cbz	r0, 8021302 <_fclose_r+0x18>
 80212fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80212fc:	b90b      	cbnz	r3, 8021302 <_fclose_r+0x18>
 80212fe:	f7ff fa27 	bl	8020750 <__sinit>
 8021302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021304:	07d8      	lsls	r0, r3, #31
 8021306:	d405      	bmi.n	8021314 <_fclose_r+0x2a>
 8021308:	89a3      	ldrh	r3, [r4, #12]
 802130a:	0599      	lsls	r1, r3, #22
 802130c:	d402      	bmi.n	8021314 <_fclose_r+0x2a>
 802130e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021310:	f7fe f85e 	bl	801f3d0 <__retarget_lock_acquire_recursive>
 8021314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021318:	b93b      	cbnz	r3, 802132a <_fclose_r+0x40>
 802131a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802131c:	f015 0501 	ands.w	r5, r5, #1
 8021320:	d1e7      	bne.n	80212f2 <_fclose_r+0x8>
 8021322:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021324:	f7fe f855 	bl	801f3d2 <__retarget_lock_release_recursive>
 8021328:	e7e4      	b.n	80212f4 <_fclose_r+0xa>
 802132a:	4621      	mov	r1, r4
 802132c:	4630      	mov	r0, r6
 802132e:	f7ff f915 	bl	802055c <__sflush_r>
 8021332:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021334:	4605      	mov	r5, r0
 8021336:	b133      	cbz	r3, 8021346 <_fclose_r+0x5c>
 8021338:	69e1      	ldr	r1, [r4, #28]
 802133a:	4630      	mov	r0, r6
 802133c:	4798      	blx	r3
 802133e:	2800      	cmp	r0, #0
 8021340:	bfb8      	it	lt
 8021342:	f04f 35ff 	movlt.w	r5, #4294967295
 8021346:	89a3      	ldrh	r3, [r4, #12]
 8021348:	061a      	lsls	r2, r3, #24
 802134a:	d503      	bpl.n	8021354 <_fclose_r+0x6a>
 802134c:	6921      	ldr	r1, [r4, #16]
 802134e:	4630      	mov	r0, r6
 8021350:	f7fd ff72 	bl	801f238 <_free_r>
 8021354:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021356:	b141      	cbz	r1, 802136a <_fclose_r+0x80>
 8021358:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802135c:	4299      	cmp	r1, r3
 802135e:	d002      	beq.n	8021366 <_fclose_r+0x7c>
 8021360:	4630      	mov	r0, r6
 8021362:	f7fd ff69 	bl	801f238 <_free_r>
 8021366:	2300      	movs	r3, #0
 8021368:	6323      	str	r3, [r4, #48]	; 0x30
 802136a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802136c:	b121      	cbz	r1, 8021378 <_fclose_r+0x8e>
 802136e:	4630      	mov	r0, r6
 8021370:	f7fd ff62 	bl	801f238 <_free_r>
 8021374:	2300      	movs	r3, #0
 8021376:	6463      	str	r3, [r4, #68]	; 0x44
 8021378:	f7ff f9d2 	bl	8020720 <__sfp_lock_acquire>
 802137c:	2300      	movs	r3, #0
 802137e:	81a3      	strh	r3, [r4, #12]
 8021380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021382:	07db      	lsls	r3, r3, #31
 8021384:	d402      	bmi.n	802138c <_fclose_r+0xa2>
 8021386:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021388:	f7fe f823 	bl	801f3d2 <__retarget_lock_release_recursive>
 802138c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802138e:	f7fe f81e 	bl	801f3ce <__retarget_lock_close_recursive>
 8021392:	f7ff f9cb 	bl	802072c <__sfp_lock_release>
 8021396:	e7ad      	b.n	80212f4 <_fclose_r+0xa>

08021398 <__fputwc>:
 8021398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802139c:	4680      	mov	r8, r0
 802139e:	460e      	mov	r6, r1
 80213a0:	4615      	mov	r5, r2
 80213a2:	f7fe f809 	bl	801f3b8 <__locale_mb_cur_max>
 80213a6:	2801      	cmp	r0, #1
 80213a8:	d11c      	bne.n	80213e4 <__fputwc+0x4c>
 80213aa:	1e73      	subs	r3, r6, #1
 80213ac:	2bfe      	cmp	r3, #254	; 0xfe
 80213ae:	d819      	bhi.n	80213e4 <__fputwc+0x4c>
 80213b0:	f88d 6004 	strb.w	r6, [sp, #4]
 80213b4:	4604      	mov	r4, r0
 80213b6:	2700      	movs	r7, #0
 80213b8:	f10d 0904 	add.w	r9, sp, #4
 80213bc:	42a7      	cmp	r7, r4
 80213be:	d020      	beq.n	8021402 <__fputwc+0x6a>
 80213c0:	68ab      	ldr	r3, [r5, #8]
 80213c2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80213c6:	3b01      	subs	r3, #1
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	60ab      	str	r3, [r5, #8]
 80213cc:	da04      	bge.n	80213d8 <__fputwc+0x40>
 80213ce:	69aa      	ldr	r2, [r5, #24]
 80213d0:	4293      	cmp	r3, r2
 80213d2:	db1a      	blt.n	802140a <__fputwc+0x72>
 80213d4:	290a      	cmp	r1, #10
 80213d6:	d018      	beq.n	802140a <__fputwc+0x72>
 80213d8:	682b      	ldr	r3, [r5, #0]
 80213da:	1c5a      	adds	r2, r3, #1
 80213dc:	602a      	str	r2, [r5, #0]
 80213de:	7019      	strb	r1, [r3, #0]
 80213e0:	3701      	adds	r7, #1
 80213e2:	e7eb      	b.n	80213bc <__fputwc+0x24>
 80213e4:	4632      	mov	r2, r6
 80213e6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80213ea:	a901      	add	r1, sp, #4
 80213ec:	4640      	mov	r0, r8
 80213ee:	f000 fa85 	bl	80218fc <_wcrtomb_r>
 80213f2:	1c42      	adds	r2, r0, #1
 80213f4:	4604      	mov	r4, r0
 80213f6:	d1de      	bne.n	80213b6 <__fputwc+0x1e>
 80213f8:	89ab      	ldrh	r3, [r5, #12]
 80213fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80213fe:	81ab      	strh	r3, [r5, #12]
 8021400:	4606      	mov	r6, r0
 8021402:	4630      	mov	r0, r6
 8021404:	b003      	add	sp, #12
 8021406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802140a:	462a      	mov	r2, r5
 802140c:	4640      	mov	r0, r8
 802140e:	f000 fa2b 	bl	8021868 <__swbuf_r>
 8021412:	1c43      	adds	r3, r0, #1
 8021414:	d1e4      	bne.n	80213e0 <__fputwc+0x48>
 8021416:	4606      	mov	r6, r0
 8021418:	e7f3      	b.n	8021402 <__fputwc+0x6a>

0802141a <_fputwc_r>:
 802141a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 802141c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802141e:	4614      	mov	r4, r2
 8021420:	07da      	lsls	r2, r3, #31
 8021422:	4605      	mov	r5, r0
 8021424:	d407      	bmi.n	8021436 <_fputwc_r+0x1c>
 8021426:	89a3      	ldrh	r3, [r4, #12]
 8021428:	059b      	lsls	r3, r3, #22
 802142a:	d404      	bmi.n	8021436 <_fputwc_r+0x1c>
 802142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802142e:	9101      	str	r1, [sp, #4]
 8021430:	f7fd ffce 	bl	801f3d0 <__retarget_lock_acquire_recursive>
 8021434:	9901      	ldr	r1, [sp, #4]
 8021436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802143a:	0498      	lsls	r0, r3, #18
 802143c:	d406      	bmi.n	802144c <_fputwc_r+0x32>
 802143e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021442:	81a3      	strh	r3, [r4, #12]
 8021444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802144a:	6663      	str	r3, [r4, #100]	; 0x64
 802144c:	4622      	mov	r2, r4
 802144e:	4628      	mov	r0, r5
 8021450:	f7ff ffa2 	bl	8021398 <__fputwc>
 8021454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021456:	07da      	lsls	r2, r3, #31
 8021458:	4605      	mov	r5, r0
 802145a:	d405      	bmi.n	8021468 <_fputwc_r+0x4e>
 802145c:	89a3      	ldrh	r3, [r4, #12]
 802145e:	059b      	lsls	r3, r3, #22
 8021460:	d402      	bmi.n	8021468 <_fputwc_r+0x4e>
 8021462:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021464:	f7fd ffb5 	bl	801f3d2 <__retarget_lock_release_recursive>
 8021468:	4628      	mov	r0, r5
 802146a:	b003      	add	sp, #12
 802146c:	bd30      	pop	{r4, r5, pc}
	...

08021470 <__sfvwrite_r>:
 8021470:	6893      	ldr	r3, [r2, #8]
 8021472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021476:	4606      	mov	r6, r0
 8021478:	460c      	mov	r4, r1
 802147a:	4690      	mov	r8, r2
 802147c:	b91b      	cbnz	r3, 8021486 <__sfvwrite_r+0x16>
 802147e:	2000      	movs	r0, #0
 8021480:	b003      	add	sp, #12
 8021482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021486:	898b      	ldrh	r3, [r1, #12]
 8021488:	0718      	lsls	r0, r3, #28
 802148a:	d550      	bpl.n	802152e <__sfvwrite_r+0xbe>
 802148c:	690b      	ldr	r3, [r1, #16]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d04d      	beq.n	802152e <__sfvwrite_r+0xbe>
 8021492:	89a3      	ldrh	r3, [r4, #12]
 8021494:	f8d8 7000 	ldr.w	r7, [r8]
 8021498:	f013 0902 	ands.w	r9, r3, #2
 802149c:	d16c      	bne.n	8021578 <__sfvwrite_r+0x108>
 802149e:	f013 0301 	ands.w	r3, r3, #1
 80214a2:	f000 809c 	beq.w	80215de <__sfvwrite_r+0x16e>
 80214a6:	4648      	mov	r0, r9
 80214a8:	46ca      	mov	sl, r9
 80214aa:	46cb      	mov	fp, r9
 80214ac:	f1bb 0f00 	cmp.w	fp, #0
 80214b0:	f000 8103 	beq.w	80216ba <__sfvwrite_r+0x24a>
 80214b4:	b950      	cbnz	r0, 80214cc <__sfvwrite_r+0x5c>
 80214b6:	465a      	mov	r2, fp
 80214b8:	210a      	movs	r1, #10
 80214ba:	4650      	mov	r0, sl
 80214bc:	f7de feb8 	bl	8000230 <memchr>
 80214c0:	2800      	cmp	r0, #0
 80214c2:	f000 80ff 	beq.w	80216c4 <__sfvwrite_r+0x254>
 80214c6:	3001      	adds	r0, #1
 80214c8:	eba0 090a 	sub.w	r9, r0, sl
 80214cc:	6820      	ldr	r0, [r4, #0]
 80214ce:	6921      	ldr	r1, [r4, #16]
 80214d0:	6963      	ldr	r3, [r4, #20]
 80214d2:	45d9      	cmp	r9, fp
 80214d4:	464a      	mov	r2, r9
 80214d6:	bf28      	it	cs
 80214d8:	465a      	movcs	r2, fp
 80214da:	4288      	cmp	r0, r1
 80214dc:	f240 80f5 	bls.w	80216ca <__sfvwrite_r+0x25a>
 80214e0:	68a5      	ldr	r5, [r4, #8]
 80214e2:	441d      	add	r5, r3
 80214e4:	42aa      	cmp	r2, r5
 80214e6:	f340 80f0 	ble.w	80216ca <__sfvwrite_r+0x25a>
 80214ea:	4651      	mov	r1, sl
 80214ec:	462a      	mov	r2, r5
 80214ee:	f7ff f988 	bl	8020802 <memmove>
 80214f2:	6823      	ldr	r3, [r4, #0]
 80214f4:	442b      	add	r3, r5
 80214f6:	6023      	str	r3, [r4, #0]
 80214f8:	4621      	mov	r1, r4
 80214fa:	4630      	mov	r0, r6
 80214fc:	f7ff f8bc 	bl	8020678 <_fflush_r>
 8021500:	2800      	cmp	r0, #0
 8021502:	d167      	bne.n	80215d4 <__sfvwrite_r+0x164>
 8021504:	ebb9 0905 	subs.w	r9, r9, r5
 8021508:	f040 80f7 	bne.w	80216fa <__sfvwrite_r+0x28a>
 802150c:	4621      	mov	r1, r4
 802150e:	4630      	mov	r0, r6
 8021510:	f7ff f8b2 	bl	8020678 <_fflush_r>
 8021514:	2800      	cmp	r0, #0
 8021516:	d15d      	bne.n	80215d4 <__sfvwrite_r+0x164>
 8021518:	f8d8 2008 	ldr.w	r2, [r8, #8]
 802151c:	44aa      	add	sl, r5
 802151e:	ebab 0b05 	sub.w	fp, fp, r5
 8021522:	1b55      	subs	r5, r2, r5
 8021524:	f8c8 5008 	str.w	r5, [r8, #8]
 8021528:	2d00      	cmp	r5, #0
 802152a:	d1bf      	bne.n	80214ac <__sfvwrite_r+0x3c>
 802152c:	e7a7      	b.n	802147e <__sfvwrite_r+0xe>
 802152e:	4621      	mov	r1, r4
 8021530:	4630      	mov	r0, r6
 8021532:	f7ff fe7b 	bl	802122c <__swsetup_r>
 8021536:	2800      	cmp	r0, #0
 8021538:	d0ab      	beq.n	8021492 <__sfvwrite_r+0x22>
 802153a:	f04f 30ff 	mov.w	r0, #4294967295
 802153e:	e79f      	b.n	8021480 <__sfvwrite_r+0x10>
 8021540:	e9d7 b900 	ldrd	fp, r9, [r7]
 8021544:	3708      	adds	r7, #8
 8021546:	f1b9 0f00 	cmp.w	r9, #0
 802154a:	d0f9      	beq.n	8021540 <__sfvwrite_r+0xd0>
 802154c:	45d1      	cmp	r9, sl
 802154e:	464b      	mov	r3, r9
 8021550:	69e1      	ldr	r1, [r4, #28]
 8021552:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021554:	bf28      	it	cs
 8021556:	4653      	movcs	r3, sl
 8021558:	465a      	mov	r2, fp
 802155a:	4630      	mov	r0, r6
 802155c:	47a8      	blx	r5
 802155e:	2800      	cmp	r0, #0
 8021560:	dd38      	ble.n	80215d4 <__sfvwrite_r+0x164>
 8021562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021566:	4483      	add	fp, r0
 8021568:	eba9 0900 	sub.w	r9, r9, r0
 802156c:	1a18      	subs	r0, r3, r0
 802156e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021572:	2800      	cmp	r0, #0
 8021574:	d1e7      	bne.n	8021546 <__sfvwrite_r+0xd6>
 8021576:	e782      	b.n	802147e <__sfvwrite_r+0xe>
 8021578:	f04f 0b00 	mov.w	fp, #0
 802157c:	f8df a180 	ldr.w	sl, [pc, #384]	; 8021700 <__sfvwrite_r+0x290>
 8021580:	46d9      	mov	r9, fp
 8021582:	e7e0      	b.n	8021546 <__sfvwrite_r+0xd6>
 8021584:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8021588:	3708      	adds	r7, #8
 802158a:	f1ba 0f00 	cmp.w	sl, #0
 802158e:	d0f9      	beq.n	8021584 <__sfvwrite_r+0x114>
 8021590:	89a3      	ldrh	r3, [r4, #12]
 8021592:	68a2      	ldr	r2, [r4, #8]
 8021594:	6820      	ldr	r0, [r4, #0]
 8021596:	0599      	lsls	r1, r3, #22
 8021598:	d563      	bpl.n	8021662 <__sfvwrite_r+0x1f2>
 802159a:	4552      	cmp	r2, sl
 802159c:	d836      	bhi.n	802160c <__sfvwrite_r+0x19c>
 802159e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80215a2:	d033      	beq.n	802160c <__sfvwrite_r+0x19c>
 80215a4:	6921      	ldr	r1, [r4, #16]
 80215a6:	6965      	ldr	r5, [r4, #20]
 80215a8:	eba0 0b01 	sub.w	fp, r0, r1
 80215ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80215b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80215b4:	f10b 0201 	add.w	r2, fp, #1
 80215b8:	106d      	asrs	r5, r5, #1
 80215ba:	4452      	add	r2, sl
 80215bc:	4295      	cmp	r5, r2
 80215be:	bf38      	it	cc
 80215c0:	4615      	movcc	r5, r2
 80215c2:	055b      	lsls	r3, r3, #21
 80215c4:	d53d      	bpl.n	8021642 <__sfvwrite_r+0x1d2>
 80215c6:	4629      	mov	r1, r5
 80215c8:	4630      	mov	r0, r6
 80215ca:	f7fd ff15 	bl	801f3f8 <_malloc_r>
 80215ce:	b948      	cbnz	r0, 80215e4 <__sfvwrite_r+0x174>
 80215d0:	230c      	movs	r3, #12
 80215d2:	6033      	str	r3, [r6, #0]
 80215d4:	89a3      	ldrh	r3, [r4, #12]
 80215d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80215da:	81a3      	strh	r3, [r4, #12]
 80215dc:	e7ad      	b.n	802153a <__sfvwrite_r+0xca>
 80215de:	4699      	mov	r9, r3
 80215e0:	469a      	mov	sl, r3
 80215e2:	e7d2      	b.n	802158a <__sfvwrite_r+0x11a>
 80215e4:	465a      	mov	r2, fp
 80215e6:	6921      	ldr	r1, [r4, #16]
 80215e8:	9001      	str	r0, [sp, #4]
 80215ea:	f7fb fc27 	bl	801ce3c <memcpy>
 80215ee:	89a2      	ldrh	r2, [r4, #12]
 80215f0:	9b01      	ldr	r3, [sp, #4]
 80215f2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80215f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80215fa:	81a2      	strh	r2, [r4, #12]
 80215fc:	6123      	str	r3, [r4, #16]
 80215fe:	6165      	str	r5, [r4, #20]
 8021600:	445b      	add	r3, fp
 8021602:	eba5 050b 	sub.w	r5, r5, fp
 8021606:	6023      	str	r3, [r4, #0]
 8021608:	4652      	mov	r2, sl
 802160a:	60a5      	str	r5, [r4, #8]
 802160c:	4552      	cmp	r2, sl
 802160e:	bf28      	it	cs
 8021610:	4652      	movcs	r2, sl
 8021612:	6820      	ldr	r0, [r4, #0]
 8021614:	9201      	str	r2, [sp, #4]
 8021616:	4649      	mov	r1, r9
 8021618:	f7ff f8f3 	bl	8020802 <memmove>
 802161c:	68a3      	ldr	r3, [r4, #8]
 802161e:	9a01      	ldr	r2, [sp, #4]
 8021620:	1a9b      	subs	r3, r3, r2
 8021622:	60a3      	str	r3, [r4, #8]
 8021624:	6823      	ldr	r3, [r4, #0]
 8021626:	441a      	add	r2, r3
 8021628:	4655      	mov	r5, sl
 802162a:	6022      	str	r2, [r4, #0]
 802162c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8021630:	44a9      	add	r9, r5
 8021632:	ebaa 0a05 	sub.w	sl, sl, r5
 8021636:	1b45      	subs	r5, r0, r5
 8021638:	f8c8 5008 	str.w	r5, [r8, #8]
 802163c:	2d00      	cmp	r5, #0
 802163e:	d1a4      	bne.n	802158a <__sfvwrite_r+0x11a>
 8021640:	e71d      	b.n	802147e <__sfvwrite_r+0xe>
 8021642:	462a      	mov	r2, r5
 8021644:	4630      	mov	r0, r6
 8021646:	f7fe fc79 	bl	801ff3c <_realloc_r>
 802164a:	4603      	mov	r3, r0
 802164c:	2800      	cmp	r0, #0
 802164e:	d1d5      	bne.n	80215fc <__sfvwrite_r+0x18c>
 8021650:	6921      	ldr	r1, [r4, #16]
 8021652:	4630      	mov	r0, r6
 8021654:	f7fd fdf0 	bl	801f238 <_free_r>
 8021658:	89a3      	ldrh	r3, [r4, #12]
 802165a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802165e:	81a3      	strh	r3, [r4, #12]
 8021660:	e7b6      	b.n	80215d0 <__sfvwrite_r+0x160>
 8021662:	6923      	ldr	r3, [r4, #16]
 8021664:	4283      	cmp	r3, r0
 8021666:	d302      	bcc.n	802166e <__sfvwrite_r+0x1fe>
 8021668:	6961      	ldr	r1, [r4, #20]
 802166a:	4551      	cmp	r1, sl
 802166c:	d915      	bls.n	802169a <__sfvwrite_r+0x22a>
 802166e:	4552      	cmp	r2, sl
 8021670:	bf28      	it	cs
 8021672:	4652      	movcs	r2, sl
 8021674:	4649      	mov	r1, r9
 8021676:	4615      	mov	r5, r2
 8021678:	f7ff f8c3 	bl	8020802 <memmove>
 802167c:	68a3      	ldr	r3, [r4, #8]
 802167e:	6822      	ldr	r2, [r4, #0]
 8021680:	1b5b      	subs	r3, r3, r5
 8021682:	442a      	add	r2, r5
 8021684:	60a3      	str	r3, [r4, #8]
 8021686:	6022      	str	r2, [r4, #0]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d1cf      	bne.n	802162c <__sfvwrite_r+0x1bc>
 802168c:	4621      	mov	r1, r4
 802168e:	4630      	mov	r0, r6
 8021690:	f7fe fff2 	bl	8020678 <_fflush_r>
 8021694:	2800      	cmp	r0, #0
 8021696:	d0c9      	beq.n	802162c <__sfvwrite_r+0x1bc>
 8021698:	e79c      	b.n	80215d4 <__sfvwrite_r+0x164>
 802169a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802169e:	459a      	cmp	sl, r3
 80216a0:	bf38      	it	cc
 80216a2:	4653      	movcc	r3, sl
 80216a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80216a6:	fb93 f3f1 	sdiv	r3, r3, r1
 80216aa:	464a      	mov	r2, r9
 80216ac:	434b      	muls	r3, r1
 80216ae:	4630      	mov	r0, r6
 80216b0:	69e1      	ldr	r1, [r4, #28]
 80216b2:	47a8      	blx	r5
 80216b4:	1e05      	subs	r5, r0, #0
 80216b6:	dcb9      	bgt.n	802162c <__sfvwrite_r+0x1bc>
 80216b8:	e78c      	b.n	80215d4 <__sfvwrite_r+0x164>
 80216ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80216be:	2000      	movs	r0, #0
 80216c0:	3708      	adds	r7, #8
 80216c2:	e6f3      	b.n	80214ac <__sfvwrite_r+0x3c>
 80216c4:	f10b 0901 	add.w	r9, fp, #1
 80216c8:	e700      	b.n	80214cc <__sfvwrite_r+0x5c>
 80216ca:	4293      	cmp	r3, r2
 80216cc:	dc08      	bgt.n	80216e0 <__sfvwrite_r+0x270>
 80216ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80216d0:	69e1      	ldr	r1, [r4, #28]
 80216d2:	4652      	mov	r2, sl
 80216d4:	4630      	mov	r0, r6
 80216d6:	47a8      	blx	r5
 80216d8:	1e05      	subs	r5, r0, #0
 80216da:	f73f af13 	bgt.w	8021504 <__sfvwrite_r+0x94>
 80216de:	e779      	b.n	80215d4 <__sfvwrite_r+0x164>
 80216e0:	4651      	mov	r1, sl
 80216e2:	9201      	str	r2, [sp, #4]
 80216e4:	f7ff f88d 	bl	8020802 <memmove>
 80216e8:	9a01      	ldr	r2, [sp, #4]
 80216ea:	68a3      	ldr	r3, [r4, #8]
 80216ec:	1a9b      	subs	r3, r3, r2
 80216ee:	60a3      	str	r3, [r4, #8]
 80216f0:	6823      	ldr	r3, [r4, #0]
 80216f2:	4413      	add	r3, r2
 80216f4:	6023      	str	r3, [r4, #0]
 80216f6:	4615      	mov	r5, r2
 80216f8:	e704      	b.n	8021504 <__sfvwrite_r+0x94>
 80216fa:	2001      	movs	r0, #1
 80216fc:	e70c      	b.n	8021518 <__sfvwrite_r+0xa8>
 80216fe:	bf00      	nop
 8021700:	7ffffc00 	.word	0x7ffffc00

08021704 <__swhatbuf_r>:
 8021704:	b570      	push	{r4, r5, r6, lr}
 8021706:	460e      	mov	r6, r1
 8021708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802170c:	2900      	cmp	r1, #0
 802170e:	b096      	sub	sp, #88	; 0x58
 8021710:	4614      	mov	r4, r2
 8021712:	461d      	mov	r5, r3
 8021714:	da09      	bge.n	802172a <__swhatbuf_r+0x26>
 8021716:	89b3      	ldrh	r3, [r6, #12]
 8021718:	2200      	movs	r2, #0
 802171a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802171e:	602a      	str	r2, [r5, #0]
 8021720:	d116      	bne.n	8021750 <__swhatbuf_r+0x4c>
 8021722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021726:	6023      	str	r3, [r4, #0]
 8021728:	e015      	b.n	8021756 <__swhatbuf_r+0x52>
 802172a:	466a      	mov	r2, sp
 802172c:	f000 f8fc 	bl	8021928 <_fstat_r>
 8021730:	2800      	cmp	r0, #0
 8021732:	dbf0      	blt.n	8021716 <__swhatbuf_r+0x12>
 8021734:	9a01      	ldr	r2, [sp, #4]
 8021736:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802173a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802173e:	425a      	negs	r2, r3
 8021740:	415a      	adcs	r2, r3
 8021742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021746:	602a      	str	r2, [r5, #0]
 8021748:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802174c:	6023      	str	r3, [r4, #0]
 802174e:	e002      	b.n	8021756 <__swhatbuf_r+0x52>
 8021750:	2340      	movs	r3, #64	; 0x40
 8021752:	6023      	str	r3, [r4, #0]
 8021754:	4610      	mov	r0, r2
 8021756:	b016      	add	sp, #88	; 0x58
 8021758:	bd70      	pop	{r4, r5, r6, pc}
	...

0802175c <__smakebuf_r>:
 802175c:	898b      	ldrh	r3, [r1, #12]
 802175e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021760:	079d      	lsls	r5, r3, #30
 8021762:	4606      	mov	r6, r0
 8021764:	460c      	mov	r4, r1
 8021766:	d507      	bpl.n	8021778 <__smakebuf_r+0x1c>
 8021768:	f104 0343 	add.w	r3, r4, #67	; 0x43
 802176c:	6023      	str	r3, [r4, #0]
 802176e:	6123      	str	r3, [r4, #16]
 8021770:	2301      	movs	r3, #1
 8021772:	6163      	str	r3, [r4, #20]
 8021774:	b002      	add	sp, #8
 8021776:	bd70      	pop	{r4, r5, r6, pc}
 8021778:	ab01      	add	r3, sp, #4
 802177a:	466a      	mov	r2, sp
 802177c:	f7ff ffc2 	bl	8021704 <__swhatbuf_r>
 8021780:	9900      	ldr	r1, [sp, #0]
 8021782:	4605      	mov	r5, r0
 8021784:	4630      	mov	r0, r6
 8021786:	f7fd fe37 	bl	801f3f8 <_malloc_r>
 802178a:	b948      	cbnz	r0, 80217a0 <__smakebuf_r+0x44>
 802178c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021790:	059a      	lsls	r2, r3, #22
 8021792:	d4ef      	bmi.n	8021774 <__smakebuf_r+0x18>
 8021794:	f023 0303 	bic.w	r3, r3, #3
 8021798:	f043 0302 	orr.w	r3, r3, #2
 802179c:	81a3      	strh	r3, [r4, #12]
 802179e:	e7e3      	b.n	8021768 <__smakebuf_r+0xc>
 80217a0:	4b0d      	ldr	r3, [pc, #52]	; (80217d8 <__smakebuf_r+0x7c>)
 80217a2:	63f3      	str	r3, [r6, #60]	; 0x3c
 80217a4:	89a3      	ldrh	r3, [r4, #12]
 80217a6:	6020      	str	r0, [r4, #0]
 80217a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80217ac:	81a3      	strh	r3, [r4, #12]
 80217ae:	9b00      	ldr	r3, [sp, #0]
 80217b0:	6163      	str	r3, [r4, #20]
 80217b2:	9b01      	ldr	r3, [sp, #4]
 80217b4:	6120      	str	r0, [r4, #16]
 80217b6:	b15b      	cbz	r3, 80217d0 <__smakebuf_r+0x74>
 80217b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80217bc:	4630      	mov	r0, r6
 80217be:	f000 f8c5 	bl	802194c <_isatty_r>
 80217c2:	b128      	cbz	r0, 80217d0 <__smakebuf_r+0x74>
 80217c4:	89a3      	ldrh	r3, [r4, #12]
 80217c6:	f023 0303 	bic.w	r3, r3, #3
 80217ca:	f043 0301 	orr.w	r3, r3, #1
 80217ce:	81a3      	strh	r3, [r4, #12]
 80217d0:	89a0      	ldrh	r0, [r4, #12]
 80217d2:	4305      	orrs	r5, r0
 80217d4:	81a5      	strh	r5, [r4, #12]
 80217d6:	e7cd      	b.n	8021774 <__smakebuf_r+0x18>
 80217d8:	08020715 	.word	0x08020715

080217dc <_raise_r>:
 80217dc:	291f      	cmp	r1, #31
 80217de:	b538      	push	{r3, r4, r5, lr}
 80217e0:	4604      	mov	r4, r0
 80217e2:	460d      	mov	r5, r1
 80217e4:	d904      	bls.n	80217f0 <_raise_r+0x14>
 80217e6:	2316      	movs	r3, #22
 80217e8:	6003      	str	r3, [r0, #0]
 80217ea:	f04f 30ff 	mov.w	r0, #4294967295
 80217ee:	bd38      	pop	{r3, r4, r5, pc}
 80217f0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80217f4:	b112      	cbz	r2, 80217fc <_raise_r+0x20>
 80217f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80217fa:	b94b      	cbnz	r3, 8021810 <_raise_r+0x34>
 80217fc:	4620      	mov	r0, r4
 80217fe:	f000 f831 	bl	8021864 <_getpid_r>
 8021802:	462a      	mov	r2, r5
 8021804:	4601      	mov	r1, r0
 8021806:	4620      	mov	r0, r4
 8021808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802180c:	f000 b818 	b.w	8021840 <_kill_r>
 8021810:	2b01      	cmp	r3, #1
 8021812:	d00a      	beq.n	802182a <_raise_r+0x4e>
 8021814:	1c59      	adds	r1, r3, #1
 8021816:	d103      	bne.n	8021820 <_raise_r+0x44>
 8021818:	2316      	movs	r3, #22
 802181a:	6003      	str	r3, [r0, #0]
 802181c:	2001      	movs	r0, #1
 802181e:	e7e6      	b.n	80217ee <_raise_r+0x12>
 8021820:	2400      	movs	r4, #0
 8021822:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021826:	4628      	mov	r0, r5
 8021828:	4798      	blx	r3
 802182a:	2000      	movs	r0, #0
 802182c:	e7df      	b.n	80217ee <_raise_r+0x12>
	...

08021830 <raise>:
 8021830:	4b02      	ldr	r3, [pc, #8]	; (802183c <raise+0xc>)
 8021832:	4601      	mov	r1, r0
 8021834:	6818      	ldr	r0, [r3, #0]
 8021836:	f7ff bfd1 	b.w	80217dc <_raise_r>
 802183a:	bf00      	nop
 802183c:	20000624 	.word	0x20000624

08021840 <_kill_r>:
 8021840:	b538      	push	{r3, r4, r5, lr}
 8021842:	4d07      	ldr	r5, [pc, #28]	; (8021860 <_kill_r+0x20>)
 8021844:	2300      	movs	r3, #0
 8021846:	4604      	mov	r4, r0
 8021848:	4608      	mov	r0, r1
 802184a:	4611      	mov	r1, r2
 802184c:	602b      	str	r3, [r5, #0]
 802184e:	f7df fd9f 	bl	8001390 <_kill>
 8021852:	1c43      	adds	r3, r0, #1
 8021854:	d102      	bne.n	802185c <_kill_r+0x1c>
 8021856:	682b      	ldr	r3, [r5, #0]
 8021858:	b103      	cbz	r3, 802185c <_kill_r+0x1c>
 802185a:	6023      	str	r3, [r4, #0]
 802185c:	bd38      	pop	{r3, r4, r5, pc}
 802185e:	bf00      	nop
 8021860:	20009910 	.word	0x20009910

08021864 <_getpid_r>:
 8021864:	f7df bd92 	b.w	800138c <_getpid>

08021868 <__swbuf_r>:
 8021868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802186a:	460e      	mov	r6, r1
 802186c:	4614      	mov	r4, r2
 802186e:	4605      	mov	r5, r0
 8021870:	b118      	cbz	r0, 802187a <__swbuf_r+0x12>
 8021872:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021874:	b90b      	cbnz	r3, 802187a <__swbuf_r+0x12>
 8021876:	f7fe ff6b 	bl	8020750 <__sinit>
 802187a:	69a3      	ldr	r3, [r4, #24]
 802187c:	60a3      	str	r3, [r4, #8]
 802187e:	89a3      	ldrh	r3, [r4, #12]
 8021880:	0719      	lsls	r1, r3, #28
 8021882:	d529      	bpl.n	80218d8 <__swbuf_r+0x70>
 8021884:	6923      	ldr	r3, [r4, #16]
 8021886:	b33b      	cbz	r3, 80218d8 <__swbuf_r+0x70>
 8021888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802188c:	b2f6      	uxtb	r6, r6
 802188e:	049a      	lsls	r2, r3, #18
 8021890:	4637      	mov	r7, r6
 8021892:	d52a      	bpl.n	80218ea <__swbuf_r+0x82>
 8021894:	6823      	ldr	r3, [r4, #0]
 8021896:	6920      	ldr	r0, [r4, #16]
 8021898:	1a18      	subs	r0, r3, r0
 802189a:	6963      	ldr	r3, [r4, #20]
 802189c:	4283      	cmp	r3, r0
 802189e:	dc04      	bgt.n	80218aa <__swbuf_r+0x42>
 80218a0:	4621      	mov	r1, r4
 80218a2:	4628      	mov	r0, r5
 80218a4:	f7fe fee8 	bl	8020678 <_fflush_r>
 80218a8:	b9e0      	cbnz	r0, 80218e4 <__swbuf_r+0x7c>
 80218aa:	68a3      	ldr	r3, [r4, #8]
 80218ac:	3b01      	subs	r3, #1
 80218ae:	60a3      	str	r3, [r4, #8]
 80218b0:	6823      	ldr	r3, [r4, #0]
 80218b2:	1c5a      	adds	r2, r3, #1
 80218b4:	6022      	str	r2, [r4, #0]
 80218b6:	701e      	strb	r6, [r3, #0]
 80218b8:	6962      	ldr	r2, [r4, #20]
 80218ba:	1c43      	adds	r3, r0, #1
 80218bc:	429a      	cmp	r2, r3
 80218be:	d004      	beq.n	80218ca <__swbuf_r+0x62>
 80218c0:	89a3      	ldrh	r3, [r4, #12]
 80218c2:	07db      	lsls	r3, r3, #31
 80218c4:	d506      	bpl.n	80218d4 <__swbuf_r+0x6c>
 80218c6:	2e0a      	cmp	r6, #10
 80218c8:	d104      	bne.n	80218d4 <__swbuf_r+0x6c>
 80218ca:	4621      	mov	r1, r4
 80218cc:	4628      	mov	r0, r5
 80218ce:	f7fe fed3 	bl	8020678 <_fflush_r>
 80218d2:	b938      	cbnz	r0, 80218e4 <__swbuf_r+0x7c>
 80218d4:	4638      	mov	r0, r7
 80218d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218d8:	4621      	mov	r1, r4
 80218da:	4628      	mov	r0, r5
 80218dc:	f7ff fca6 	bl	802122c <__swsetup_r>
 80218e0:	2800      	cmp	r0, #0
 80218e2:	d0d1      	beq.n	8021888 <__swbuf_r+0x20>
 80218e4:	f04f 37ff 	mov.w	r7, #4294967295
 80218e8:	e7f4      	b.n	80218d4 <__swbuf_r+0x6c>
 80218ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80218ee:	81a3      	strh	r3, [r4, #12]
 80218f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80218f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80218f6:	6663      	str	r3, [r4, #100]	; 0x64
 80218f8:	e7cc      	b.n	8021894 <__swbuf_r+0x2c>
	...

080218fc <_wcrtomb_r>:
 80218fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218fe:	4c09      	ldr	r4, [pc, #36]	; (8021924 <_wcrtomb_r+0x28>)
 8021900:	b085      	sub	sp, #20
 8021902:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8021906:	4605      	mov	r5, r0
 8021908:	461e      	mov	r6, r3
 802190a:	b909      	cbnz	r1, 8021910 <_wcrtomb_r+0x14>
 802190c:	460a      	mov	r2, r1
 802190e:	a901      	add	r1, sp, #4
 8021910:	47b8      	blx	r7
 8021912:	1c43      	adds	r3, r0, #1
 8021914:	bf01      	itttt	eq
 8021916:	2300      	moveq	r3, #0
 8021918:	6033      	streq	r3, [r6, #0]
 802191a:	238a      	moveq	r3, #138	; 0x8a
 802191c:	602b      	streq	r3, [r5, #0]
 802191e:	b005      	add	sp, #20
 8021920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021922:	bf00      	nop
 8021924:	20000a54 	.word	0x20000a54

08021928 <_fstat_r>:
 8021928:	b538      	push	{r3, r4, r5, lr}
 802192a:	4d07      	ldr	r5, [pc, #28]	; (8021948 <_fstat_r+0x20>)
 802192c:	2300      	movs	r3, #0
 802192e:	4604      	mov	r4, r0
 8021930:	4608      	mov	r0, r1
 8021932:	4611      	mov	r1, r2
 8021934:	602b      	str	r3, [r5, #0]
 8021936:	f7df fd56 	bl	80013e6 <_fstat>
 802193a:	1c43      	adds	r3, r0, #1
 802193c:	d102      	bne.n	8021944 <_fstat_r+0x1c>
 802193e:	682b      	ldr	r3, [r5, #0]
 8021940:	b103      	cbz	r3, 8021944 <_fstat_r+0x1c>
 8021942:	6023      	str	r3, [r4, #0]
 8021944:	bd38      	pop	{r3, r4, r5, pc}
 8021946:	bf00      	nop
 8021948:	20009910 	.word	0x20009910

0802194c <_isatty_r>:
 802194c:	b538      	push	{r3, r4, r5, lr}
 802194e:	4d06      	ldr	r5, [pc, #24]	; (8021968 <_isatty_r+0x1c>)
 8021950:	2300      	movs	r3, #0
 8021952:	4604      	mov	r4, r0
 8021954:	4608      	mov	r0, r1
 8021956:	602b      	str	r3, [r5, #0]
 8021958:	f7df fd4a 	bl	80013f0 <_isatty>
 802195c:	1c43      	adds	r3, r0, #1
 802195e:	d102      	bne.n	8021966 <_isatty_r+0x1a>
 8021960:	682b      	ldr	r3, [r5, #0]
 8021962:	b103      	cbz	r3, 8021966 <_isatty_r+0x1a>
 8021964:	6023      	str	r3, [r4, #0]
 8021966:	bd38      	pop	{r3, r4, r5, pc}
 8021968:	20009910 	.word	0x20009910

0802196c <_init>:
 802196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802196e:	bf00      	nop
 8021970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021972:	bc08      	pop	{r3}
 8021974:	469e      	mov	lr, r3
 8021976:	4770      	bx	lr

08021978 <_fini>:
 8021978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802197a:	bf00      	nop
 802197c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802197e:	bc08      	pop	{r3}
 8021980:	469e      	mov	lr, r3
 8021982:	4770      	bx	lr
